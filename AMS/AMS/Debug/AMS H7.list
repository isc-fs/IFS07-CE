
AMS H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b640  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  0800b910  0800b910  0000c910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bcf0  0800bcf0  0000ccf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800bcf8  0800bcf8  0000ccf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bd00  0800bd00  0000cd00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  0800bd04  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000de0  2400006c  0800bd70  0000d06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000e4c  0800bd70  0000de4c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021911  00000000  00000000  0000d09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000035aa  00000000  00000000  0002e9ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001380  00000000  00000000  00031f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f18  00000000  00000000  000332d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a2a3  00000000  00000000  000341f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a7e8  00000000  00000000  0006e493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00169d35  00000000  00000000  00088c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f29b0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000592c  00000000  00000000  001f29f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005d  00000000  00000000  001f8320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b8f8 	.word	0x0800b8f8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	0800b8f8 	.word	0x0800b8f8

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <_ZN7BMS_MODC1Emiiihjii>:
/*********************************************************************************************************
 ** Function name:           BMS_MOD
 ** Descriptions:            Initialization function of teh class
 *********************************************************************************************************/

BMS_MOD::BMS_MOD(uint32_t _ID, int _MAXV, int _MINV, int _MAXT,
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	603b      	str	r3, [r7, #0]
                 uint8_t _NUMCELLS, unsigned int _SHUNT, int _LAG_V, int _LAG_T) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800072c:	61da      	str	r2, [r3, #28]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2232      	movs	r2, #50	@ 0x32
 8000732:	621a      	str	r2, [r3, #32]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800073a:	625a      	str	r2, [r3, #36]	@ 0x24
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000742:	629a      	str	r2, [r3, #40]	@ 0x28
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800074a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000752:	631a      	str	r2, [r3, #48]	@ 0x30
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	69da      	ldr	r2, [r3, #28]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	635a      	str	r2, [r3, #52]	@ 0x34
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	2200      	movs	r2, #0
 8000760:	639a      	str	r2, [r3, #56]	@ 0x38
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	63da      	str	r2, [r3, #60]	@ 0x3c
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	641a      	str	r2, [r3, #64]	@ 0x40
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	2200      	movs	r2, #0
 8000776:	645a      	str	r2, [r3, #68]	@ 0x44
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	649a      	str	r2, [r3, #72]	@ 0x48
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2200      	movs	r2, #0
 8000784:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2200      	movs	r2, #0
 800078c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2200      	movs	r2, #0
 8000794:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2200      	movs	r2, #0
 800079c:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	2213      	movs	r2, #19
 80007a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	220a      	movs	r2, #10
 80007ac:	655a      	str	r2, [r3, #84]	@ 0x54
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	3358      	adds	r3, #88	@ 0x58
 80007b2:	2230      	movs	r2, #48	@ 0x30
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f00a fc20 	bl	800affc <memset>
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2200      	movs	r2, #0
 80007c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	2200      	movs	r2, #0
 80007c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	2200      	movs	r2, #0
 80007d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f241 0268 	movw	r2, #4200	@ 0x1068
 80007da:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	2200      	movs	r2, #0
 80007e2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	2200      	movs	r2, #0
 80007ea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	2200      	movs	r2, #0
 80007f2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	33a4      	adds	r3, #164	@ 0xa4
 80007fa:	224c      	movs	r2, #76	@ 0x4c
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f00a fbfc 	bl	800affc <memset>
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	33f0      	adds	r3, #240	@ 0xf0
 8000808:	2298      	movs	r2, #152	@ 0x98
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f00a fbf5 	bl	800affc <memset>
	CANID = _ID;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	68ba      	ldr	r2, [r7, #8]
 8000816:	601a      	str	r2, [r3, #0]
	LIMIT_MAX_V = _MAXV;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	60da      	str	r2, [r3, #12]
	LIMIT_MIN_V = _MINV;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	683a      	ldr	r2, [r7, #0]
 8000822:	611a      	str	r2, [r3, #16]
	LIMIT_MAX_T = _MAXT;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	6a3a      	ldr	r2, [r7, #32]
 8000828:	615a      	str	r2, [r3, #20]
	NUM_CELLS = _NUMCELLS;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000830:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

	uint32_t now = HAL_GetTick();
 8000834:	f002 f954 	bl	8002ae0 <HAL_GetTick>
 8000838:	6178      	str	r0, [r7, #20]

	time_lim_plotted_volts = now + _LAG_V;
 800083a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	441a      	add	r2, r3
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	635a      	str	r2, [r3, #52]	@ 0x34
	time_lim_sent_volts    = now + _LAG_V;
 8000844:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	441a      	add	r2, r3
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	639a      	str	r2, [r3, #56]	@ 0x38
	time_lim_received_volts = now + TIME_LIM_RECV_VOLTS + _LAG_V;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	441a      	add	r2, r3
 8000856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000858:	441a      	add	r2, r3
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	63da      	str	r2, [r3, #60]	@ 0x3c

	time_lim_plotted_temps = now + _LAG_T;
 800085e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	441a      	add	r2, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	641a      	str	r2, [r3, #64]	@ 0x40
	time_lim_sent_temps    = now + _LAG_T;
 8000868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	441a      	add	r2, r3
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	645a      	str	r2, [r3, #68]	@ 0x44
	time_lim_received_temps = now + TIME_LIM_RECV_TEMPS + _LAG_T;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	441a      	add	r2, r3
 800087a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800087c:	441a      	add	r2, r3
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	4618      	mov	r0, r3
 8000886:	3718      	adds	r7, #24
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <_ZN7BMS_MOD12voltage_infoEPc>:

/*********************************************************************************************************
 ** Function name:           info
 ** Descriptions:            Function for printing the class data
 *********************************************************************************************************/
void BMS_MOD::voltage_info(char *buffer) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]

	if (getUARTState() == HAL_UART_STATE_READY) { // Send the message just if there is a serial por connected
 8000896:	f001 fa7f 	bl	8001d98 <getUARTState>
 800089a:	4603      	mov	r3, r0
 800089c:	2b20      	cmp	r3, #32
 800089e:	bf0c      	ite	eq
 80008a0:	2301      	moveq	r3, #1
 80008a2:	2300      	movne	r3, #0
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	f000 8084 	beq.w	80009b4 <_ZN7BMS_MOD12voltage_infoEPc+0x128>
		print((char*) "\n***********************");
 80008ac:	4851      	ldr	r0, [pc, #324]	@ (80009f4 <_ZN7BMS_MOD12voltage_infoEPc+0x168>)
 80008ae:	f001 fa37 	bl	8001d20 <print>
		print((char*) "         BMS");
 80008b2:	4851      	ldr	r0, [pc, #324]	@ (80009f8 <_ZN7BMS_MOD12voltage_infoEPc+0x16c>)
 80008b4:	f001 fa34 	bl	8001d20 <print>
		print((char*) "***********************");
 80008b8:	4850      	ldr	r0, [pc, #320]	@ (80009fc <_ZN7BMS_MOD12voltage_infoEPc+0x170>)
 80008ba:	f001 fa31 	bl	8001d20 <print>
		sprintf(buffer, " - ERROR:     %i", error_volt);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	461a      	mov	r2, r3
 80008c4:	494e      	ldr	r1, [pc, #312]	@ (8000a00 <_ZN7BMS_MOD12voltage_infoEPc+0x174>)
 80008c6:	6838      	ldr	r0, [r7, #0]
 80008c8:	f00a fb76 	bl	800afb8 <siprintf>
		print(buffer);
 80008cc:	6838      	ldr	r0, [r7, #0]
 80008ce:	f001 fa27 	bl	8001d20 <print>
		sprintf(buffer, " - CAN ID:    0x%lx", CANID);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	461a      	mov	r2, r3
 80008d8:	494a      	ldr	r1, [pc, #296]	@ (8000a04 <_ZN7BMS_MOD12voltage_infoEPc+0x178>)
 80008da:	6838      	ldr	r0, [r7, #0]
 80008dc:	f00a fb6c 	bl	800afb8 <siprintf>
		print(buffer);
 80008e0:	6838      	ldr	r0, [r7, #0]
 80008e2:	f001 fa1d 	bl	8001d20 <print>
		sprintf(buffer, " - MAX V =    %i mV", MAX_V);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	461a      	mov	r2, r3
 80008ec:	4946      	ldr	r1, [pc, #280]	@ (8000a08 <_ZN7BMS_MOD12voltage_infoEPc+0x17c>)
 80008ee:	6838      	ldr	r0, [r7, #0]
 80008f0:	f00a fb62 	bl	800afb8 <siprintf>
		print(buffer);
 80008f4:	6838      	ldr	r0, [r7, #0]
 80008f6:	f001 fa13 	bl	8001d20 <print>
		sprintf(buffer, " - MIN V =    %i mV", MIN_V);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000900:	461a      	mov	r2, r3
 8000902:	4942      	ldr	r1, [pc, #264]	@ (8000a0c <_ZN7BMS_MOD12voltage_infoEPc+0x180>)
 8000904:	6838      	ldr	r0, [r7, #0]
 8000906:	f00a fb57 	bl	800afb8 <siprintf>
		print(buffer);
 800090a:	6838      	ldr	r0, [r7, #0]
 800090c:	f001 fa08 	bl	8001d20 <print>
		print((char*) "-----------------------");
 8000910:	483f      	ldr	r0, [pc, #252]	@ (8000a10 <_ZN7BMS_MOD12voltage_infoEPc+0x184>)
 8000912:	f001 fa05 	bl	8001d20 <print>
		sprintf(buffer, "VOLTS (mV): [%i", cellVoltagemV[0]);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800091c:	461a      	mov	r2, r3
 800091e:	493d      	ldr	r1, [pc, #244]	@ (8000a14 <_ZN7BMS_MOD12voltage_infoEPc+0x188>)
 8000920:	6838      	ldr	r0, [r7, #0]
 8000922:	f00a fb49 	bl	800afb8 <siprintf>
		printnl(buffer);
 8000926:	6838      	ldr	r0, [r7, #0]
 8000928:	f001 fa18 	bl	8001d5c <printnl>
		for (int i = 0; i < NUM_CELLS; i++) {
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	e010      	b.n	8000954 <_ZN7BMS_MOD12voltage_infoEPc+0xc8>
			sprintf(buffer, ", %i", cellVoltagemV[i]);
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	3328      	adds	r3, #40	@ 0x28
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	4413      	add	r3, r2
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	461a      	mov	r2, r3
 8000940:	4935      	ldr	r1, [pc, #212]	@ (8000a18 <_ZN7BMS_MOD12voltage_infoEPc+0x18c>)
 8000942:	6838      	ldr	r0, [r7, #0]
 8000944:	f00a fb38 	bl	800afb8 <siprintf>
			printnl(buffer);
 8000948:	6838      	ldr	r0, [r7, #0]
 800094a:	f001 fa07 	bl	8001d5c <printnl>
		for (int i = 0; i < NUM_CELLS; i++) {
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	3301      	adds	r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800095a:	461a      	mov	r2, r3
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	4293      	cmp	r3, r2
 8000960:	dbe7      	blt.n	8000932 <_ZN7BMS_MOD12voltage_infoEPc+0xa6>
		}

		for (int i = 0; i < NUM_CELLS; i++) {
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	e00f      	b.n	8000988 <_ZN7BMS_MOD12voltage_infoEPc+0xfc>
			voltage_acum += cellVoltagemV[i];
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	3328      	adds	r3, #40	@ 0x28
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	440b      	add	r3, r1
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	441a      	add	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
		for (int i = 0; i < NUM_CELLS; i++) {
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	3301      	adds	r3, #1
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800098e:	461a      	mov	r2, r3
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	4293      	cmp	r3, r2
 8000994:	dbe8      	blt.n	8000968 <_ZN7BMS_MOD12voltage_infoEPc+0xdc>
		}

		print((char*) "]");
 8000996:	4821      	ldr	r0, [pc, #132]	@ (8000a1c <_ZN7BMS_MOD12voltage_infoEPc+0x190>)
 8000998:	f001 f9c2 	bl	8001d20 <print>
		sprintf(buffer, " - V(max) = %i mV || V(min) = %i", MAX_V, MIN_V);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	699a      	ldr	r2, [r3, #24]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009a6:	491e      	ldr	r1, [pc, #120]	@ (8000a20 <_ZN7BMS_MOD12voltage_infoEPc+0x194>)
 80009a8:	6838      	ldr	r0, [r7, #0]
 80009aa:	f00a fb05 	bl	800afb8 <siprintf>
		print(buffer);
 80009ae:	6838      	ldr	r0, [r7, #0]
 80009b0:	f001 f9b6 	bl	8001d20 <print>
	}
	sprintf(buffer, "- BALANCING V = %i mV", BALANCING_V);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80009ba:	461a      	mov	r2, r3
 80009bc:	4919      	ldr	r1, [pc, #100]	@ (8000a24 <_ZN7BMS_MOD12voltage_infoEPc+0x198>)
 80009be:	6838      	ldr	r0, [r7, #0]
 80009c0:	f00a fafa 	bl	800afb8 <siprintf>
	print(buffer);
 80009c4:	6838      	ldr	r0, [r7, #0]
 80009c6:	f001 f9ab 	bl	8001d20 <print>

	sprintf(buffer, "- STACK VOLTAGE = %i V", voltage_acum / 1000);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009d0:	4a15      	ldr	r2, [pc, #84]	@ (8000a28 <_ZN7BMS_MOD12voltage_infoEPc+0x19c>)
 80009d2:	fb82 1203 	smull	r1, r2, r2, r3
 80009d6:	1192      	asrs	r2, r2, #6
 80009d8:	17db      	asrs	r3, r3, #31
 80009da:	1ad3      	subs	r3, r2, r3
 80009dc:	461a      	mov	r2, r3
 80009de:	4913      	ldr	r1, [pc, #76]	@ (8000a2c <_ZN7BMS_MOD12voltage_infoEPc+0x1a0>)
 80009e0:	6838      	ldr	r0, [r7, #0]
 80009e2:	f00a fae9 	bl	800afb8 <siprintf>
	print(buffer);
 80009e6:	6838      	ldr	r0, [r7, #0]
 80009e8:	f001 f99a 	bl	8001d20 <print>
}
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	0800b910 	.word	0x0800b910
 80009f8:	0800b92c 	.word	0x0800b92c
 80009fc:	0800b93c 	.word	0x0800b93c
 8000a00:	0800b954 	.word	0x0800b954
 8000a04:	0800b968 	.word	0x0800b968
 8000a08:	0800b97c 	.word	0x0800b97c
 8000a0c:	0800b990 	.word	0x0800b990
 8000a10:	0800b9a4 	.word	0x0800b9a4
 8000a14:	0800b9bc 	.word	0x0800b9bc
 8000a18:	0800b9cc 	.word	0x0800b9cc
 8000a1c:	0800b9d4 	.word	0x0800b9d4
 8000a20:	0800b9d8 	.word	0x0800b9d8
 8000a24:	0800b9fc 	.word	0x0800b9fc
 8000a28:	10624dd3 	.word	0x10624dd3
 8000a2c:	0800ba14 	.word	0x0800ba14

08000a30 <_ZN7BMS_MOD5parseEmPhm>:

/*********************************************************************************************************
 ** Function name:           parse
 ** Descriptions:            Function for parsing the received data via CAN protocol
 *********************************************************************************************************/
bool BMS_MOD::parse(uint32_t id, uint8_t *buf, uint32_t t) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	@ 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
 8000a3c:	603b      	str	r3, [r7, #0]
	if (id > CANID && id < CANID + 30) {
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	f240 813d 	bls.w	8000cc4 <_ZN7BMS_MOD5parseEmPhm+0x294>
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	331e      	adds	r3, #30
 8000a50:	68ba      	ldr	r2, [r7, #8]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	f080 8136 	bcs.w	8000cc4 <_ZN7BMS_MOD5parseEmPhm+0x294>
		int m = id % CANID;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a62:	fb01 f202 	mul.w	r2, r1, r2
 8000a66:	1a9b      	subs	r3, r3, r2
 8000a68:	617b      	str	r3, [r7, #20]
		int pos = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
		if (m >= 1 && m <= 5) {
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	f340 80ab 	ble.w	8000bcc <_ZN7BMS_MOD5parseEmPhm+0x19c>
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	2b05      	cmp	r3, #5
 8000a7a:	f300 80a7 	bgt.w	8000bcc <_ZN7BMS_MOD5parseEmPhm+0x19c>
			time_lim_received_volts = t + TIME_LIM_RECV_VOLTS;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	441a      	add	r2, r3
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	63da      	str	r2, [r3, #60]	@ 0x3c

			for (int i = 0; i < 4; i++) {
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a8e:	e05b      	b.n	8000b48 <_ZN7BMS_MOD5parseEmPhm+0x118>
				pos = (m - 1) * 4 + i;
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a98:	4413      	add	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
				if (pos >= 19)
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	2b12      	cmp	r3, #18
 8000aa0:	dc56      	bgt.n	8000b50 <_ZN7BMS_MOD5parseEmPhm+0x120>
					break;

				cellVoltagemV[pos] = (buf[2 * i] << 8) | buf[2 * i + 1];
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4413      	add	r3, r2
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	021b      	lsls	r3, r3, #8
 8000ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ab2:	0052      	lsls	r2, r2, #1
 8000ab4:	3201      	adds	r2, #1
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	440a      	add	r2, r1
 8000aba:	7812      	ldrb	r2, [r2, #0]
 8000abc:	431a      	orrs	r2, r3
 8000abe:	68f9      	ldr	r1, [r7, #12]
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	3328      	adds	r3, #40	@ 0x28
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	440b      	add	r3, r1
 8000ac8:	605a      	str	r2, [r3, #4]

				if ((cellVoltagemV[pos] > LIMIT_MAX_V
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	3328      	adds	r3, #40	@ 0x28
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	4413      	add	r3, r2
 8000ad4:	685a      	ldr	r2, [r3, #4]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	dc09      	bgt.n	8000af2 <_ZN7BMS_MOD5parseEmPhm+0xc2>
						|| cellVoltagemV[pos] < LIMIT_MIN_V)
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	3328      	adds	r3, #40	@ 0x28
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	4413      	add	r3, r2
 8000ae8:	685a      	ldr	r2, [r3, #4]
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	691b      	ldr	r3, [r3, #16]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	da21      	bge.n	8000b36 <_ZN7BMS_MOD5parseEmPhm+0x106>
						&& pos < NUM_CELLS) {
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000af8:	461a      	mov	r2, r3
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	4293      	cmp	r3, r2
 8000afe:	da1a      	bge.n	8000b36 <_ZN7BMS_MOD5parseEmPhm+0x106>
					flag_error_volt[pos]++;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	3216      	adds	r2, #22
 8000b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b0a:	1c59      	adds	r1, r3, #1
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	3216      	adds	r2, #22
 8000b12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					if (flag_error_volt[pos] >= max_flag)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	3216      	adds	r2, #22
 8000b1c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b24:	429a      	cmp	r2, r3
 8000b26:	db02      	blt.n	8000b2e <_ZN7BMS_MOD5parseEmPhm+0xfe>
						error_volt = BMS_ERROR_VOLTS;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	605a      	str	r2, [r3, #4]
						error_volt = BMS_OK;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	2200      	movs	r2, #0
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	e005      	b.n	8000b42 <_ZN7BMS_MOD5parseEmPhm+0x112>
					} else {
					flag_error_volt[pos] = 0;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	3216      	adds	r2, #22
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (int i = 0; i < 4; i++) {
 8000b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b44:	3301      	adds	r3, #1
 8000b46:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b4a:	2b03      	cmp	r3, #3
 8000b4c:	dda0      	ble.n	8000a90 <_ZN7BMS_MOD5parseEmPhm+0x60>
 8000b4e:	e000      	b.n	8000b52 <_ZN7BMS_MOD5parseEmPhm+0x122>
					break;
 8000b50:	bf00      	nop
				}
			}

			MAX_V = cellVoltagemV[0];
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	619a      	str	r2, [r3, #24]
			MIN_V = cellVoltagemV[0];
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
			for (int i = 1; i < 19; i++) {
 8000b68:	2301      	movs	r3, #1
 8000b6a:	623b      	str	r3, [r7, #32]
 8000b6c:	e029      	b.n	8000bc2 <_ZN7BMS_MOD5parseEmPhm+0x192>
				if (cellVoltagemV[i] > MAX_V)
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	6a3b      	ldr	r3, [r7, #32]
 8000b72:	3328      	adds	r3, #40	@ 0x28
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	4413      	add	r3, r2
 8000b78:	685a      	ldr	r2, [r3, #4]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	dd08      	ble.n	8000b94 <_ZN7BMS_MOD5parseEmPhm+0x164>
					MAX_V = cellVoltagemV[i];
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	6a3b      	ldr	r3, [r7, #32]
 8000b86:	3328      	adds	r3, #40	@ 0x28
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	4413      	add	r3, r2
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	619a      	str	r2, [r3, #24]
 8000b92:	e013      	b.n	8000bbc <_ZN7BMS_MOD5parseEmPhm+0x18c>
				else if (cellVoltagemV[i] < MIN_V)
 8000b94:	68fa      	ldr	r2, [r7, #12]
 8000b96:	6a3b      	ldr	r3, [r7, #32]
 8000b98:	3328      	adds	r3, #40	@ 0x28
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	4413      	add	r3, r2
 8000b9e:	685a      	ldr	r2, [r3, #4]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	da08      	bge.n	8000bbc <_ZN7BMS_MOD5parseEmPhm+0x18c>
					MIN_V = cellVoltagemV[i];
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	6a3b      	ldr	r3, [r7, #32]
 8000bae:	3328      	adds	r3, #40	@ 0x28
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	4413      	add	r3, r2
 8000bb4:	685a      	ldr	r2, [r3, #4]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
			for (int i = 1; i < 19; i++) {
 8000bbc:	6a3b      	ldr	r3, [r7, #32]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	623b      	str	r3, [r7, #32]
 8000bc2:	6a3b      	ldr	r3, [r7, #32]
 8000bc4:	2b12      	cmp	r3, #18
 8000bc6:	ddd2      	ble.n	8000b6e <_ZN7BMS_MOD5parseEmPhm+0x13e>
			}

			return true;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e07c      	b.n	8000cc6 <_ZN7BMS_MOD5parseEmPhm+0x296>

		} else if (m >= 21 && m <= 25) {
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	2b14      	cmp	r3, #20
 8000bd0:	dd78      	ble.n	8000cc4 <_ZN7BMS_MOD5parseEmPhm+0x294>
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	2b19      	cmp	r3, #25
 8000bd6:	dc75      	bgt.n	8000cc4 <_ZN7BMS_MOD5parseEmPhm+0x294>
			// m = 21 → packet 0, m = 25 → packet 4
			time_lim_received_temps = t + TIME_LIM_RECV_TEMPS;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	441a      	add	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	649a      	str	r2, [r3, #72]	@ 0x48
			if (flag_charger == 1)
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d104      	bne.n	8000bf8 <_ZN7BMS_MOD5parseEmPhm+0x1c8>
				module_send_message_CAN1(id, buf, 8);
 8000bee:	2208      	movs	r2, #8
 8000bf0:	6879      	ldr	r1, [r7, #4]
 8000bf2:	68b8      	ldr	r0, [r7, #8]
 8000bf4:	f001 f832 	bl	8001c5c <module_send_message_CAN1>

			for (int i = 0; i < 8; i++) {
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
 8000bfc:	e021      	b.n	8000c42 <_ZN7BMS_MOD5parseEmPhm+0x212>
				pos = (m - 21) * 8 + i;
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	3b15      	subs	r3, #21
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	69fa      	ldr	r2, [r7, #28]
 8000c06:	4413      	add	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
				if (pos >= 38)
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	2b25      	cmp	r3, #37	@ 0x25
 8000c0e:	dc1c      	bgt.n	8000c4a <_ZN7BMS_MOD5parseEmPhm+0x21a>
					break;

				cellTemperature[pos] = buf[i];
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	323c      	adds	r2, #60	@ 0x3c
 8000c20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				if (cellTemperature[pos] > LIMIT_MAX_T)
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	323c      	adds	r2, #60	@ 0x3c
 8000c2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	dd02      	ble.n	8000c3c <_ZN7BMS_MOD5parseEmPhm+0x20c>
					error_temp = BMS_ERROR_TEMP;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	2203      	movs	r2, #3
 8000c3a:	609a      	str	r2, [r3, #8]
			for (int i = 0; i < 8; i++) {
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	61fb      	str	r3, [r7, #28]
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	2b07      	cmp	r3, #7
 8000c46:	ddda      	ble.n	8000bfe <_ZN7BMS_MOD5parseEmPhm+0x1ce>
 8000c48:	e000      	b.n	8000c4c <_ZN7BMS_MOD5parseEmPhm+0x21c>
					break;
 8000c4a:	bf00      	nop


			}

		      MAX_T = cellTemperature[0];
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		      MIN_T = cellTemperature[0];
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
		      for (int i = 0; i < 38; i++)
 8000c64:	2300      	movs	r3, #0
 8000c66:	61bb      	str	r3, [r7, #24]
 8000c68:	e027      	b.n	8000cba <_ZN7BMS_MOD5parseEmPhm+0x28a>
		      {
		        if (cellTemperature[i] > MAX_T)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	323c      	adds	r2, #60	@ 0x3c
 8000c70:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	dd08      	ble.n	8000c90 <_ZN7BMS_MOD5parseEmPhm+0x260>
		          MAX_T = cellTemperature[i];
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	323c      	adds	r2, #60	@ 0x3c
 8000c84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8000c8e:	e011      	b.n	8000cb4 <_ZN7BMS_MOD5parseEmPhm+0x284>
		        else if (cellTemperature[i] < MIN_T)
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	323c      	adds	r2, #60	@ 0x3c
 8000c96:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	da07      	bge.n	8000cb4 <_ZN7BMS_MOD5parseEmPhm+0x284>
		          MIN_T = cellTemperature[i];
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	323c      	adds	r2, #60	@ 0x3c
 8000caa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
		      for (int i = 0; i < 38; i++)
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	61bb      	str	r3, [r7, #24]
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	2b25      	cmp	r3, #37	@ 0x25
 8000cbe:	ddd4      	ble.n	8000c6a <_ZN7BMS_MOD5parseEmPhm+0x23a>
		      }


			return true;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e000      	b.n	8000cc6 <_ZN7BMS_MOD5parseEmPhm+0x296>
		}

	}

	return false;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3728      	adds	r7, #40	@ 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <_ZN7BMS_MOD13query_voltageEmPc>:

/*********************************************************************************************************
 ** Function name:           query_voltage
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/
int BMS_MOD::query_voltage(uint32_t time, char *buffer) {
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b086      	sub	sp, #24
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	60f8      	str	r0, [r7, #12]
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
	// Shunt voltage in milivolts

	//message_balancing[1] = BALANCING_V & 0xFF; // Coment this two lines for disabling the balancing
	//message_balancing[0] = (BALANCING_V >> 8) & 0xFF; // Coment this two lines for disabling the balancing

	if (time > time_lim_sent_volts) {
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d91d      	bls.n	8000d20 <_ZN7BMS_MOD13query_voltageEmPc+0x52>
		time_lim_sent_volts += TIME_LIM_SEND_VOLTS;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	6a1b      	ldr	r3, [r3, #32]
 8000cec:	441a      	add	r2, r3
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	639a      	str	r2, [r3, #56]	@ 0x38
		if (CANID != 0x00) { //It keeps sending 0x00 and dont know where
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d012      	beq.n	8000d20 <_ZN7BMS_MOD13query_voltageEmPc+0x52>
			if (module_send_message_CAN2(CANID, message_balancing, 2)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	6818      	ldr	r0, [r3, #0]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	334c      	adds	r3, #76	@ 0x4c
 8000d02:	2202      	movs	r2, #2
 8000d04:	4619      	mov	r1, r3
 8000d06:	f000 ffeb 	bl	8001ce0 <module_send_message_CAN2>
 8000d0a:	4603      	mov	r3, r0
					!= HAL_OK) {
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	bf14      	ite	ne
 8000d10:	2301      	movne	r3, #1
 8000d12:	2300      	moveq	r3, #0
 8000d14:	b2db      	uxtb	r3, r3
			if (module_send_message_CAN2(CANID, message_balancing, 2)
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d002      	beq.n	8000d20 <_ZN7BMS_MOD13query_voltageEmPc+0x52>
				error_volt = BMS_ERROR_COMMUNICATION;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	605a      	str	r2, [r3, #4]
		}

	}


    if (time > time_lim_received_volts) {
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d24:	68ba      	ldr	r2, [r7, #8]
 8000d26:	429a      	cmp	r2, r3
        if (time - time_lim_received_volts > TIME_LIM_RECV_VOLTS) {
            //error_volt = BMS_ERROR_COMMUNICATION;
        }
    }

	if (TIME_LIM_PLOT_VOLTS > 0 && time > time_lim_plotted_volts) {
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	69db      	ldr	r3, [r3, #28]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d00f      	beq.n	8000d50 <_ZN7BMS_MOD13query_voltageEmPc+0x82>
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d34:	68ba      	ldr	r2, [r7, #8]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d90a      	bls.n	8000d50 <_ZN7BMS_MOD13query_voltageEmPc+0x82>
		time_lim_plotted_volts += TIME_LIM_PLOT_VOLTS;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	441a      	add	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	635a      	str	r2, [r3, #52]	@ 0x34
		voltage_info(buffer);
 8000d48:	6879      	ldr	r1, [r7, #4]
 8000d4a:	68f8      	ldr	r0, [r7, #12]
 8000d4c:	f7ff fd9e 	bl	800088c <_ZN7BMS_MOD12voltage_infoEPc>
	}

	for (int i = 0; i < NUM_CELLS; i++) {
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	e00f      	b.n	8000d76 <_ZN7BMS_MOD13query_voltageEmPc+0xa8>
		voltage_acum += cellVoltagemV[i];
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000d5c:	68f9      	ldr	r1, [r7, #12]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3328      	adds	r3, #40	@ 0x28
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	440b      	add	r3, r1
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	441a      	add	r2, r3
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	for (int i = 0; i < NUM_CELLS; i++) {
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	3301      	adds	r3, #1
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	4293      	cmp	r3, r2
 8000d82:	dbe8      	blt.n	8000d56 <_ZN7BMS_MOD13query_voltageEmPc+0x88>
	}
	return error_volt;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	685b      	ldr	r3, [r3, #4]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <_ZN7BMS_MOD17query_temperatureEmPc>:
/*********************************************************************************************************
 ** Function name:           query_temperature
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/

int BMS_MOD::query_temperature(uint32_t time, char *buffer) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
// Function for performing a correct behavior
	if (time > time_lim_sent_temps) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE TEMPERATURES
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da0:	68ba      	ldr	r2, [r7, #8]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d91b      	bls.n	8000dde <_ZN7BMS_MOD17query_temperatureEmPc+0x4e>
		time_lim_sent_temps += TIME_LIM_SEND_TEMPS;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dae:	441a      	add	r2, r3
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	645a      	str	r2, [r3, #68]	@ 0x44

		if (module_send_message_CAN2(CANID + 20, message_temperatures, 2)
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f103 0014 	add.w	r0, r3, #20
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	334e      	adds	r3, #78	@ 0x4e
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f000 ff8c 	bl	8001ce0 <module_send_message_CAN2>
 8000dc8:	4603      	mov	r3, r0
				!= HAL_OK) {
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	bf14      	ite	ne
 8000dce:	2301      	movne	r3, #1
 8000dd0:	2300      	moveq	r3, #0
 8000dd2:	b2db      	uxtb	r3, r3
		if (module_send_message_CAN2(CANID + 20, message_temperatures, 2)
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d002      	beq.n	8000dde <_ZN7BMS_MOD17query_temperatureEmPc+0x4e>
			error_temp = BMS_ERROR_TEMP; // If the message is not sended then, error
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2203      	movs	r2, #3
 8000ddc:	609a      	str	r2, [r3, #8]
		}
	}

	if (time_lim_sent_temps > 0 &&
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <_ZN7BMS_MOD17query_temperatureEmPc+0x5e>
	    time > time_lim_received_temps &&
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
	if (time_lim_sent_temps > 0 &&
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	429a      	cmp	r2, r3
	    time - time_lim_received_temps > TIME_LIM_RECV_TEMPS) {
	    //error_temp = BMS_ERROR_COMMUNICATION;
	}

	if (TIME_LIM_PLOT_TEMPS > 0 && time > time_lim_plotted_temps) {
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d00b      	beq.n	8000e0e <_ZN7BMS_MOD17query_temperatureEmPc+0x7e>
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d906      	bls.n	8000e0e <_ZN7BMS_MOD17query_temperatureEmPc+0x7e>
		time_lim_plotted_temps += TIME_LIM_PLOT_TEMPS;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e08:	441a      	add	r2, r3
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	641a      	str	r2, [r3, #64]	@ 0x40
		//temperature_info(buffer);
	}



	return error_temp;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	689b      	ldr	r3, [r3, #8]

}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <_ZN7CPU_MODC1Emmi>:

// ********************************************************************************************************
// **Function name:           CPU_MOD
// **Descriptions:            Initialization function of teh class
// ********************************************************************************************************
CPU_MOD::CPU_MOD(uint32_t _ID_send, uint32_t _ID_recv, int _LAG) { /////////////////////////Habia un _LAG=0
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2200      	movs	r2, #0
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2202      	movs	r2, #2
 8000e40:	731a      	strb	r2, [r3, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	2202      	movs	r2, #2
 8000e46:	611a      	str	r2, [r3, #16]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e4e:	615a      	str	r2, [r3, #20]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2264      	movs	r2, #100	@ 0x64
 8000e54:	619a      	str	r2, [r3, #24]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4a18      	ldr	r2, [pc, #96]	@ (8000ebc <_ZN7CPU_MODC1Emmi+0xa0>)
 8000e5a:	61da      	str	r2, [r3, #28]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	695a      	ldr	r2, [r3, #20]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	621a      	str	r2, [r3, #32]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2200      	movs	r2, #0
 8000e68:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	69da      	ldr	r2, [r3, #28]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	2200      	movs	r2, #0
 8000e76:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	631a      	str	r2, [r3, #48]	@ 0x30
    CANID_send = _ID_send;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	68ba      	ldr	r2, [r7, #8]
 8000e82:	601a      	str	r2, [r3, #0]
    CANID_recv = _ID_recv;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	605a      	str	r2, [r3, #4]

    time_lim_plotted += _LAG;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	6a1a      	ldr	r2, [r3, #32]
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	441a      	add	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	621a      	str	r2, [r3, #32]
    time_lim_sended += _LAG;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	441a      	add	r2, r3
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	625a      	str	r2, [r3, #36]	@ 0x24
    time_lim_received += _LAG;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	441a      	add	r2, r3
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	000f4240 	.word	0x000f4240

08000ec0 <_ZN7CPU_MOD5parseEmPhm>:

// ********************************************************************************************************
// **Function name:           parse
// **Descriptions:            Function for parsing the received data via CAN protocl
// ********************************************************************************************************
bool CPU_MOD::parse(uint32_t id, uint8_t* buf, uint32_t t) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
 8000ecc:	603b      	str	r3, [r7, #0]
    if (id == 0x100) {
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ed4:	d131      	bne.n	8000f3a <_ZN7CPU_MOD5parseEmPhm+0x7a>
        error = CPU_OK;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
        time_lim_received = t + TIME_LIM_RECV;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	69da      	ldr	r2, [r3, #28]
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	441a      	add	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	629a      	str	r2, [r3, #40]	@ 0x28
        DC_BUS = (int)((buf[1]<<8)|buf[0]); // This direction sends the voltage in DC_BUS
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3301      	adds	r3, #1
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	021b      	lsls	r3, r3, #8
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	7812      	ldrb	r2, [r2, #0]
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	631a      	str	r2, [r3, #48]	@ 0x30
        if (DC_BUS > 280) { //(DC_BUS>0.9*voltage_acum)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8000f02:	dd18      	ble.n	8000f36 <_ZN7CPU_MOD5parseEmPhm+0x76>
            error = CPU_BUS_LINE_OK;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2202      	movs	r2, #2
 8000f08:	609a      	str	r2, [r3, #8]
            if (module_send_message_CAN1(CANID_send, currentState, 1) != HAL_OK){
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	6818      	ldr	r0, [r3, #0]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	330c      	adds	r3, #12
 8000f12:	2201      	movs	r2, #1
 8000f14:	4619      	mov	r1, r3
 8000f16:	f000 fea1 	bl	8001c5c <module_send_message_CAN1>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	bf14      	ite	ne
 8000f20:	2301      	movne	r3, #1
 8000f22:	2300      	moveq	r3, #0
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d005      	beq.n	8000f36 <_ZN7CPU_MOD5parseEmPhm+0x76>
                error = CPU_ERROR_COMMUNICATION;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	609a      	str	r2, [r3, #8]
                print((char*)"error message");
 8000f30:	4804      	ldr	r0, [pc, #16]	@ (8000f44 <_ZN7CPU_MOD5parseEmPhm+0x84>)
 8000f32:	f000 fef5 	bl	8001d20 <print>
            }

        }
        return true;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e000      	b.n	8000f3c <_ZN7CPU_MOD5parseEmPhm+0x7c>
    }
    return false;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	0800bb88 	.word	0x0800bb88

08000f48 <_ZN7CPU_MOD5queryEmPc>:

// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function to check if i need to send a mesage new mesage and the received mesajes interval are within the limits
// ********************************************************************************************************
int CPU_MOD::query(uint32_t time, char* buffer) {
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
	// Function for performing a correct behaivour
    if (time > time_lim_sended) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE BMS
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f58:	68ba      	ldr	r2, [r7, #8]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d906      	bls.n	8000f6c <_ZN7CPU_MOD5queryEmPc+0x24>
        time_lim_sended += TIME_LIM_SEND;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	441a      	add	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    if (time > time_lim_received)
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d902      	bls.n	8000f7c <_ZN7CPU_MOD5queryEmPc+0x34>
        error = CPU_ERROR_COMMUNICATION; ///////Cheking if everything is alright each time
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	609a      	str	r2, [r3, #8]

    if (TIME_LIM_PLOT > 0 && time > time_lim_plotted) {
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d00b      	beq.n	8000f9c <_ZN7CPU_MOD5queryEmPc+0x54>
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	6a1b      	ldr	r3, [r3, #32]
 8000f88:	68ba      	ldr	r2, [r7, #8]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d906      	bls.n	8000f9c <_ZN7CPU_MOD5queryEmPc+0x54>
        time_lim_plotted += TIME_LIM_PLOT;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	6a1a      	ldr	r2, [r3, #32]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	441a      	add	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	621a      	str	r2, [r3, #32]
        //info(buffer);
    }
    return error;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	689b      	ldr	r3, [r3, #8]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <_ZN7CPU_MOD11updateStateEi>:

void CPU_MOD::updateState(int s) {
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
    currentState[0] = s & 0xFF;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	731a      	strb	r2, [r3, #12]
    current_state = s;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	611a      	str	r2, [r3, #16]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <_ZN11Current_MODC1Emi>:

// ********************************************************************************************************
// **Function name:           Current_MOD
// **Descriptions:            Initialization function of current class
// **********************************************************************************************************
Current_MOD::Current_MOD(uint32_t ID, int _C_MAX)
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2200      	movs	r2, #0
 8000fec:	721a      	strb	r2, [r3, #8]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	725a      	strb	r2, [r3, #9]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f04f 0200 	mov.w	r2, #0
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f04f 0200 	mov.w	r2, #0
 800100a:	615a      	str	r2, [r3, #20]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001018:	621a      	str	r2, [r3, #32]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	22fa      	movs	r2, #250	@ 0xfa
 800101e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2232      	movs	r2, #50	@ 0x32
 8001024:	629a      	str	r2, [r3, #40]	@ 0x28
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2232      	movs	r2, #50	@ 0x32
 800102a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2200      	movs	r2, #0
 8001030:	631a      	str	r2, [r3, #48]	@ 0x30
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2200      	movs	r2, #0
 8001036:	635a      	str	r2, [r3, #52]	@ 0x34
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2200      	movs	r2, #0
 800103c:	639a      	str	r2, [r3, #56]	@ 0x38
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2200      	movs	r2, #0
 8001042:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2200      	movs	r2, #0
 8001048:	641a      	str	r2, [r3, #64]	@ 0x40
{
    CANID = ID;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	68ba      	ldr	r2, [r7, #8]
 800104e:	605a      	str	r2, [r3, #4]
    C_MAX = _C_MAX;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	601a      	str	r2, [r3, #0]
    flag_error_current = 1;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2201      	movs	r2, #1
 800105a:	61da      	str	r2, [r3, #28]
}
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4618      	mov	r0, r3
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	0000      	movs	r0, r0
 800106c:	0000      	movs	r0, r0
	...

08001070 <_ZN11Current_MOD5queryEiPc>:
// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function that transforms the voltage measured by the sensor to its equivalent current
// **********************************************************************************************************
int Current_MOD::query(int time, char* buffer)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
    error = Current_OK;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2200      	movs	r2, #0
 8001080:	631a      	str	r2, [r3, #48]	@ 0x30

    VoltageADC = readAnalogValue();
 8001082:	f000 fe93 	bl	8001dac <readAnalogValue>
 8001086:	eef0 7a40 	vmov.f32	s15, s0
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	edc3 7a04 	vstr	s15, [r3, #16]

    //printValue(VoltagemV);

    if(VoltageADC < 400){
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	edd3 7a04 	vldr	s15, [r3, #16]
 8001096:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8001278 <_ZN11Current_MOD5queryEiPc+0x208>
 800109a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800109e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a2:	d509      	bpl.n	80010b8 <_ZN11Current_MOD5queryEiPc+0x48>
    	flag_error_current = 1;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2201      	movs	r2, #1
 80010a8:	61da      	str	r2, [r3, #28]
    	flag_current = 1;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2201      	movs	r2, #1
 80010ae:	641a      	str	r2, [r3, #64]	@ 0x40
    	error = 1;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2201      	movs	r2, #1
 80010b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80010b6:	e008      	b.n	80010ca <_ZN11Current_MOD5queryEiPc+0x5a>
    }
    else{
    	flag_error_current = 0;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
    	flag_current = 0;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2200      	movs	r2, #0
 80010c2:	641a      	str	r2, [r3, #64]	@ 0x40
    	error = Current_OK;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2200      	movs	r2, #0
 80010c8:	631a      	str	r2, [r3, #48]	@ 0x30
    if(VoltageADC <=  400)
    {
     //error=Current_ERROR_Comunication;
    }

    VoltageV=VoltageADC*3.3/1023; //AnalogRead function reads a value between 0-1023 (1024, 10 bits) here I get the real voltage value based on the value the function gets
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80010d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010d4:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 8001250 <_ZN11Current_MOD5queryEiPc+0x1e0>
 80010d8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80010dc:	ed9f 5b5e 	vldr	d5, [pc, #376]	@ 8001258 <_ZN11Current_MOD5queryEiPc+0x1e8>
 80010e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010e4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	edc3 7a03 	vstr	s15, [r3, #12]

    if(VoltageV >= 2.8){
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80010f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010f8:	ed9f 6b59 	vldr	d6, [pc, #356]	@ 8001260 <_ZN11Current_MOD5queryEiPc+0x1f0>
 80010fc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001104:	db02      	blt.n	800110c <_ZN11Current_MOD5queryEiPc+0x9c>
    	flag_current = 1;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2201      	movs	r2, #1
 800110a:	641a      	str	r2, [r3, #64]	@ 0x40
    printnl("V");
    printValue(VoltageV); */
    

    //printValue(Current);
    Current=(2.5-VoltageV)/0.0057; //Sensitivity is 5,7 mv/A
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001112:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001116:	eeb0 6b04 	vmov.f64	d6, #4	@ 0x40200000  2.5
 800111a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800111e:	ed9f 5b52 	vldr	d5, [pc, #328]	@ 8001268 <_ZN11Current_MOD5queryEiPc+0x1f8>
 8001122:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001126:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800112a:	ee17 2a90 	vmov	r2, s15
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	63da      	str	r2, [r3, #60]	@ 0x3c
    if(Current > C_MAX*0.8 && Current < C_MAX)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001136:	ee07 3a90 	vmov	s15, r3
 800113a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	ee07 3a90 	vmov	s15, r3
 8001146:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800114a:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 8001270 <_ZN11Current_MOD5queryEiPc+0x200>
 800114e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001152:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115a:	dd11      	ble.n	8001180 <_ZN11Current_MOD5queryEiPc+0x110>
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	429a      	cmp	r2, r3
 8001166:	da0b      	bge.n	8001180 <_ZN11Current_MOD5queryEiPc+0x110>
    {
        if(flag_error_current == 0) module_send_message_NoExtId_CAN1(0x500,message,1); //If current between 80 and 100% of maximun, sends alert
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	69db      	ldr	r3, [r3, #28]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d107      	bne.n	8001180 <_ZN11Current_MOD5queryEiPc+0x110>
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	3308      	adds	r3, #8
 8001174:	2201      	movs	r2, #1
 8001176:	4619      	mov	r1, r3
 8001178:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800117c:	f000 fd90 	bl	8001ca0 <module_send_message_NoExtId_CAN1>
    }

    if (Current > C_MAX)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	429a      	cmp	r2, r3
 800118a:	dd18      	ble.n	80011be <_ZN11Current_MOD5queryEiPc+0x14e>
    {
        if (flag_error_current == 1) {
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d107      	bne.n	80011a4 <_ZN11Current_MOD5queryEiPc+0x134>
        	module_send_message_NoExtId_CAN1(0x501, message, 2); //If current over maximun, sends alert
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	3308      	adds	r3, #8
 8001198:	2202      	movs	r2, #2
 800119a:	4619      	mov	r1, r3
 800119c:	f240 5001 	movw	r0, #1281	@ 0x501
 80011a0:	f000 fd7e 	bl	8001ca0 <module_send_message_NoExtId_CAN1>
        }

        flag_error_current++;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	69db      	ldr	r3, [r3, #28]
 80011a8:	1c5a      	adds	r2, r3, #1
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	61da      	str	r2, [r3, #28]

        if (flag_charger != 1 || flag_charger == 1) //Only cut the AMS if accu not connected to charger, during charging the current control is on charger
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d119      	bne.n	80011ea <_ZN11Current_MOD5queryEiPc+0x17a>
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	e015      	b.n	80011ea <_ZN11Current_MOD5queryEiPc+0x17a>
            }
        }
    }
    else
    {
        if (flag_error_current != 0)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00e      	beq.n	80011e4 <_ZN11Current_MOD5queryEiPc+0x174>
		for (int i = 0; i < 5; i++)
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	e008      	b.n	80011de <_ZN11Current_MOD5queryEiPc+0x16e>
		{
			module_send_message_NoExtId_CAN1(0x502, 0, 2); //If current normal, sends green flag
 80011cc:	2202      	movs	r2, #2
 80011ce:	2100      	movs	r1, #0
 80011d0:	f240 5002 	movw	r0, #1282	@ 0x502
 80011d4:	f000 fd64 	bl	8001ca0 <module_send_message_NoExtId_CAN1>
		for (int i = 0; i < 5; i++)
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	3301      	adds	r3, #1
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	ddf3      	ble.n	80011cc <_ZN11Current_MOD5queryEiPc+0x15c>
		}
        flag_error_current = 0;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
    }


    if (time > time_lim_sended)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	dd16      	ble.n	8001222 <_ZN11Current_MOD5queryEiPc+0x1b2>
    {
        time_lim_sended += TIME_LIM_SEND;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011fc:	441a      	add	r2, r3
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	62da      	str	r2, [r3, #44]	@ 0x2c
        message[0] = 0;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2200      	movs	r2, #0
 8001206:	721a      	strb	r2, [r3, #8]
        message[1] = Current & 0xFF;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800120c:	b2da      	uxtb	r2, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	725a      	strb	r2, [r3, #9]
        module_send_message_NoExtId_CAN1(CANID, message, 2); //Sends current through CAN each interval of ms
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6858      	ldr	r0, [r3, #4]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	3308      	adds	r3, #8
 800121a:	2202      	movs	r2, #2
 800121c:	4619      	mov	r1, r3
 800121e:	f000 fd3f 	bl	8001ca0 <module_send_message_NoExtId_CAN1>
    }


    if (TIME_LIM_PLOT > 0 && time > time_lim_plotted)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6a1b      	ldr	r3, [r3, #32]
 8001226:	2b00      	cmp	r3, #0
 8001228:	dd0b      	ble.n	8001242 <_ZN11Current_MOD5queryEiPc+0x1d2>
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	429a      	cmp	r2, r3
 8001232:	dd06      	ble.n	8001242 <_ZN11Current_MOD5queryEiPc+0x1d2>
    {
        time_lim_plotted += TIME_LIM_PLOT;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	441a      	add	r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	629a      	str	r2, [r3, #40]	@ 0x28
        //info(buffer);

    }

    
    return error;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
}
 8001246:	4618      	mov	r0, r3
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	66666666 	.word	0x66666666
 8001254:	400a6666 	.word	0x400a6666
 8001258:	00000000 	.word	0x00000000
 800125c:	408ff800 	.word	0x408ff800
 8001260:	66666666 	.word	0x66666666
 8001264:	40066666 	.word	0x40066666
 8001268:	19652bd4 	.word	0x19652bd4
 800126c:	3f7758e2 	.word	0x3f7758e2
 8001270:	9999999a 	.word	0x9999999a
 8001274:	3fe99999 	.word	0x3fe99999
 8001278:	43c80000 	.word	0x43c80000

0800127c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b085      	sub	sp, #20
 8001280:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001282:	f001 fba7 	bl	80029d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001286:	f000 f89d 	bl	80013c4 <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800128a:	f000 f917 	bl	80014bc <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800128e:	f000 fbc1 	bl	8001a14 <_ZL12MX_GPIO_Initv>
  MX_FDCAN2_Init();
 8001292:	f000 fad5 	bl	8001840 <_ZL14MX_FDCAN2_Initv>
  MX_FDCAN1_Init();
 8001296:	f000 fa49 	bl	800172c <_ZL14MX_FDCAN1_Initv>
  MX_USART2_UART_Init();
 800129a:	f000 fb5b 	bl	8001954 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 800129e:	f000 f941 	bl	8001524 <_ZL12MX_ADC1_Initv>
  MX_ADC3_Init();
 80012a2:	f000 f9c9 	bl	8001638 <_ZL12MX_ADC3_Initv>
  /* USER CODE BEGIN 2 */

  if (HAL_FDCAN_Start(&hfdcan1) == HAL_OK){
 80012a6:	483d      	ldr	r0, [pc, #244]	@ (800139c <main+0x120>)
 80012a8:	f003 ff28 	bl	80050fc <HAL_FDCAN_Start>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	bf0c      	ite	eq
 80012b2:	2301      	moveq	r3, #1
 80012b4:	2300      	movne	r3, #0
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <main+0x46>
	  print((char*)"CAN_ACU iniciado");
 80012bc:	4838      	ldr	r0, [pc, #224]	@ (80013a0 <main+0x124>)
 80012be:	f000 fd2f 	bl	8001d20 <print>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) == HAL_OK)
 80012c2:	2200      	movs	r2, #0
 80012c4:	2101      	movs	r1, #1
 80012c6:	4835      	ldr	r0, [pc, #212]	@ (800139c <main+0x120>)
 80012c8:	f004 f90a 	bl	80054e0 <HAL_FDCAN_ActivateNotification>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	bf0c      	ite	eq
 80012d2:	2301      	moveq	r3, #1
 80012d4:	2300      	movne	r3, #0
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d002      	beq.n	80012e2 <main+0x66>
  {
	  print((char*)"CAN_ACU notification");
 80012dc:	4831      	ldr	r0, [pc, #196]	@ (80013a4 <main+0x128>)
 80012de:	f000 fd1f 	bl	8001d20 <print>
  }

  if (HAL_FDCAN_Start(&hfdcan2) == HAL_OK){
 80012e2:	4831      	ldr	r0, [pc, #196]	@ (80013a8 <main+0x12c>)
 80012e4:	f003 ff0a 	bl	80050fc <HAL_FDCAN_Start>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	bf0c      	ite	eq
 80012ee:	2301      	moveq	r3, #1
 80012f0:	2300      	movne	r3, #0
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <main+0x82>
	  print((char*)"CAN_BMS iniciado");
 80012f8:	482c      	ldr	r0, [pc, #176]	@ (80013ac <main+0x130>)
 80012fa:	f000 fd11 	bl	8001d20 <print>
  }

  if(HAL_ADC_Start(&hadc3) == HAL_OK){
 80012fe:	482c      	ldr	r0, [pc, #176]	@ (80013b0 <main+0x134>)
 8001300:	f002 f928 	bl	8003554 <HAL_ADC_Start>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	bf0c      	ite	eq
 800130a:	2301      	moveq	r3, #1
 800130c:	2300      	movne	r3, #0
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	d002      	beq.n	800131a <main+0x9e>
	  print((char*)"ADC iniciado");
 8001314:	4827      	ldr	r0, [pc, #156]	@ (80013b4 <main+0x138>)
 8001316:	f000 fd03 	bl	8001d20 <print>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  select_state();
 800131a:	f000 fd71 	bl	8001e00 <_Z12select_statev>
		  msg_acu.bus = 1;
		  msg_acu.time = HAL_GetTick();
		  parse_state(msg_acu);
	  }*/

	  if (HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader_bms, RxData) == HAL_OK) {
 800131e:	4b26      	ldr	r3, [pc, #152]	@ (80013b8 <main+0x13c>)
 8001320:	4a26      	ldr	r2, [pc, #152]	@ (80013bc <main+0x140>)
 8001322:	2140      	movs	r1, #64	@ 0x40
 8001324:	4820      	ldr	r0, [pc, #128]	@ (80013a8 <main+0x12c>)
 8001326:	f003 ff6f 	bl	8005208 <HAL_FDCAN_GetRxMessage>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	bf0c      	ite	eq
 8001330:	2301      	moveq	r3, #1
 8001332:	2300      	movne	r3, #0
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0ef      	beq.n	800131a <main+0x9e>

		  msg_bms.id = RxHeader_bms.Identifier;
 800133a:	4b20      	ldr	r3, [pc, #128]	@ (80013bc <main+0x140>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a20      	ldr	r2, [pc, #128]	@ (80013c0 <main+0x144>)
 8001340:	6013      	str	r3, [r2, #0]
		  msg_bms.len = RxHeader_bms.DataLength;
 8001342:	4b1e      	ldr	r3, [pc, #120]	@ (80013bc <main+0x140>)
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	b2da      	uxtb	r2, r3
 8001348:	4b1d      	ldr	r3, [pc, #116]	@ (80013c0 <main+0x144>)
 800134a:	711a      	strb	r2, [r3, #4]
		  for (int i = 0; i < 8; i++) {msg_bms.buf[i] = RxData[i];}
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	e00c      	b.n	800136c <main+0xf0>
 8001352:	4a19      	ldr	r2, [pc, #100]	@ (80013b8 <main+0x13c>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4413      	add	r3, r2
 8001358:	7819      	ldrb	r1, [r3, #0]
 800135a:	4a19      	ldr	r2, [pc, #100]	@ (80013c0 <main+0x144>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4413      	add	r3, r2
 8001360:	3305      	adds	r3, #5
 8001362:	460a      	mov	r2, r1
 8001364:	701a      	strb	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3301      	adds	r3, #1
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b07      	cmp	r3, #7
 8001370:	ddef      	ble.n	8001352 <main+0xd6>
		  msg_bms.bus = 2;
 8001372:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <main+0x144>)
 8001374:	2202      	movs	r2, #2
 8001376:	611a      	str	r2, [r3, #16]
		  msg_bms.time = HAL_GetTick();
 8001378:	f001 fbb2 	bl	8002ae0 <HAL_GetTick>
 800137c:	4603      	mov	r3, r0
 800137e:	4a10      	ldr	r2, [pc, #64]	@ (80013c0 <main+0x144>)
 8001380:	6153      	str	r3, [r2, #20]

		  parse_state(msg_bms);
 8001382:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <main+0x144>)
 8001384:	466c      	mov	r4, sp
 8001386:	f103 0210 	add.w	r2, r3, #16
 800138a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800138e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001392:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001394:	f000 ff3e 	bl	8002214 <_Z11parse_state6CANMsg>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001398:	e7bf      	b.n	800131a <main+0x9e>
 800139a:	bf00      	nop
 800139c:	24000168 	.word	0x24000168
 80013a0:	0800bb98 	.word	0x0800bb98
 80013a4:	0800bbac 	.word	0x0800bbac
 80013a8:	24000208 	.word	0x24000208
 80013ac:	0800bbc4 	.word	0x0800bbc4
 80013b0:	240000f8 	.word	0x240000f8
 80013b4:	0800bbd8 	.word	0x0800bbd8
 80013b8:	240003d4 	.word	0x240003d4
 80013bc:	240003ac 	.word	0x240003ac
 80013c0:	24000440 	.word	0x24000440

080013c4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b09c      	sub	sp, #112	@ 0x70
 80013c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ce:	224c      	movs	r2, #76	@ 0x4c
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f009 fe12 	bl	800affc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	2220      	movs	r2, #32
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f009 fe0c 	bl	800affc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013e4:	2002      	movs	r0, #2
 80013e6:	f004 ffdd 	bl	80063a4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80013ea:	2300      	movs	r3, #0
 80013ec:	603b      	str	r3, [r7, #0]
 80013ee:	4b32      	ldr	r3, [pc, #200]	@ (80014b8 <_Z18SystemClock_Configv+0xf4>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	4a31      	ldr	r2, [pc, #196]	@ (80014b8 <_Z18SystemClock_Configv+0xf4>)
 80013f4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013f8:	6193      	str	r3, [r2, #24]
 80013fa:	4b2f      	ldr	r3, [pc, #188]	@ (80014b8 <_Z18SystemClock_Configv+0xf4>)
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001406:	bf00      	nop
 8001408:	4b2b      	ldr	r3, [pc, #172]	@ (80014b8 <_Z18SystemClock_Configv+0xf4>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001410:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001414:	bf14      	ite	ne
 8001416:	2301      	movne	r3, #1
 8001418:	2300      	moveq	r3, #0
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1f3      	bne.n	8001408 <_Z18SystemClock_Configv+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001420:	2301      	movs	r3, #1
 8001422:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001424:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001428:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800142a:	2302      	movs	r3, #2
 800142c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800142e:	2302      	movs	r3, #2
 8001430:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001432:	2302      	movs	r3, #2
 8001434:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001436:	232c      	movs	r3, #44	@ 0x2c
 8001438:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800143a:	2301      	movs	r3, #1
 800143c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800143e:	2304      	movs	r3, #4
 8001440:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001442:	2302      	movs	r3, #2
 8001444:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001446:	230c      	movs	r3, #12
 8001448:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800144a:	2300      	movs	r3, #0
 800144c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001452:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001456:	4618      	mov	r0, r3
 8001458:	f004 ffde 	bl	8006418 <HAL_RCC_OscConfig>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	bf14      	ite	ne
 8001462:	2301      	movne	r3, #1
 8001464:	2300      	moveq	r3, #0
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 800146c:	f000 fcc0 	bl	8001df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001470:	233f      	movs	r3, #63	@ 0x3f
 8001472:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001474:	2303      	movs	r3, #3
 8001476:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800147c:	2308      	movs	r3, #8
 800147e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001480:	2340      	movs	r3, #64	@ 0x40
 8001482:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001484:	2340      	movs	r3, #64	@ 0x40
 8001486:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001488:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800148c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800148e:	2340      	movs	r3, #64	@ 0x40
 8001490:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	2103      	movs	r1, #3
 8001496:	4618      	mov	r0, r3
 8001498:	f005 fb98 	bl	8006bcc <HAL_RCC_ClockConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	bf14      	ite	ne
 80014a2:	2301      	movne	r3, #1
 80014a4:	2300      	moveq	r3, #0
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <_Z18SystemClock_Configv+0xec>
  {
    Error_Handler();
 80014ac:	f000 fca0 	bl	8001df0 <Error_Handler>
  }
}
 80014b0:	bf00      	nop
 80014b2:	3770      	adds	r7, #112	@ 0x70
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	58024800 	.word	0x58024800

080014bc <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b0ae      	sub	sp, #184	@ 0xb8
 80014c0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c2:	463b      	mov	r3, r7
 80014c4:	22b8      	movs	r2, #184	@ 0xb8
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f009 fd97 	bl	800affc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014ce:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80014d2:	f04f 0300 	mov.w	r3, #0
 80014d6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80014da:	2302      	movs	r3, #2
 80014dc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80014de:	2310      	movs	r3, #16
 80014e0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80014e2:	2302      	movs	r3, #2
 80014e4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80014e6:	2302      	movs	r3, #2
 80014e8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80014ea:	2302      	movs	r3, #2
 80014ec:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80014ee:	23c0      	movs	r3, #192	@ 0xc0
 80014f0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001500:	463b      	mov	r3, r7
 8001502:	4618      	mov	r0, r3
 8001504:	f005 feee 	bl	80072e4 <HAL_RCCEx_PeriphCLKConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	bf14      	ite	ne
 800150e:	2301      	movne	r3, #1
 8001510:	2300      	moveq	r3, #0
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <_Z24PeriphCommonClock_Configv+0x60>
  {
    Error_Handler();
 8001518:	f000 fc6a 	bl	8001df0 <Error_Handler>
  }
}
 800151c:	bf00      	nop
 800151e:	37b8      	adds	r7, #184	@ 0xb8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08c      	sub	sp, #48	@ 0x30
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800152a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001536:	463b      	mov	r3, r7
 8001538:	2224      	movs	r2, #36	@ 0x24
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f009 fd5d 	bl	800affc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001542:	4b3a      	ldr	r3, [pc, #232]	@ (800162c <_ZL12MX_ADC1_Initv+0x108>)
 8001544:	4a3a      	ldr	r2, [pc, #232]	@ (8001630 <_ZL12MX_ADC1_Initv+0x10c>)
 8001546:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001548:	4b38      	ldr	r3, [pc, #224]	@ (800162c <_ZL12MX_ADC1_Initv+0x108>)
 800154a:	2200      	movs	r2, #0
 800154c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800154e:	4b37      	ldr	r3, [pc, #220]	@ (800162c <_ZL12MX_ADC1_Initv+0x108>)
 8001550:	2208      	movs	r2, #8
 8001552:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001554:	4b35      	ldr	r3, [pc, #212]	@ (800162c <_ZL12MX_ADC1_Initv+0x108>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800155a:	4b34      	ldr	r3, [pc, #208]	@ (800162c <_ZL12MX_ADC1_Initv+0x108>)
 800155c:	2204      	movs	r2, #4
 800155e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001560:	4b32      	ldr	r3, [pc, #200]	@ (800162c <_ZL12MX_ADC1_Initv+0x108>)
 8001562:	2200      	movs	r2, #0
 8001564:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001566:	4b31      	ldr	r3, [pc, #196]	@ (800162c <_ZL12MX_ADC1_Initv+0x108>)
 8001568:	2200      	movs	r2, #0
 800156a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800156c:	4b2f      	ldr	r3, [pc, #188]	@ (800162c <_ZL12MX_ADC1_Initv+0x108>)
 800156e:	2201      	movs	r2, #1
 8001570:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001572:	4b2e      	ldr	r3, [pc, #184]	@ (800162c <_ZL12MX_ADC1_Initv+0x108>)
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800157a:	4b2c      	ldr	r3, [pc, #176]	@ (800162c <_ZL12MX_ADC1_Initv+0x108>)
 800157c:	2200      	movs	r2, #0
 800157e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001580:	4b2a      	ldr	r3, [pc, #168]	@ (800162c <_ZL12MX_ADC1_Initv+0x108>)
 8001582:	2200      	movs	r2, #0
 8001584:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001586:	4b29      	ldr	r3, [pc, #164]	@ (800162c <_ZL12MX_ADC1_Initv+0x108>)
 8001588:	2200      	movs	r2, #0
 800158a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800158c:	4b27      	ldr	r3, [pc, #156]	@ (800162c <_ZL12MX_ADC1_Initv+0x108>)
 800158e:	2200      	movs	r2, #0
 8001590:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001592:	4b26      	ldr	r3, [pc, #152]	@ (800162c <_ZL12MX_ADC1_Initv+0x108>)
 8001594:	2200      	movs	r2, #0
 8001596:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001598:	4b24      	ldr	r3, [pc, #144]	@ (800162c <_ZL12MX_ADC1_Initv+0x108>)
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 80015a0:	4b22      	ldr	r3, [pc, #136]	@ (800162c <_ZL12MX_ADC1_Initv+0x108>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015a6:	4821      	ldr	r0, [pc, #132]	@ (800162c <_ZL12MX_ADC1_Initv+0x108>)
 80015a8:	f001 fdcc 	bl	8003144 <HAL_ADC_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	bf14      	ite	ne
 80015b2:	2301      	movne	r3, #1
 80015b4:	2300      	moveq	r3, #0
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 80015bc:	f000 fc18 	bl	8001df0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015c0:	2300      	movs	r3, #0
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c8:	4619      	mov	r1, r3
 80015ca:	4818      	ldr	r0, [pc, #96]	@ (800162c <_ZL12MX_ADC1_Initv+0x108>)
 80015cc:	f003 f950 	bl	8004870 <HAL_ADCEx_MultiModeConfigChannel>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	bf14      	ite	ne
 80015d6:	2301      	movne	r3, #1
 80015d8:	2300      	moveq	r3, #0
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 80015e0:	f000 fc06 	bl	8001df0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80015e4:	4b13      	ldr	r3, [pc, #76]	@ (8001634 <_ZL12MX_ADC1_Initv+0x110>)
 80015e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015e8:	2306      	movs	r3, #6
 80015ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015f0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80015f4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015f6:	2304      	movs	r3, #4
 80015f8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80015fe:	2300      	movs	r3, #0
 8001600:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001604:	463b      	mov	r3, r7
 8001606:	4619      	mov	r1, r3
 8001608:	4808      	ldr	r0, [pc, #32]	@ (800162c <_ZL12MX_ADC1_Initv+0x108>)
 800160a:	f002 f9a3 	bl	8003954 <HAL_ADC_ConfigChannel>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	bf14      	ite	ne
 8001614:	2301      	movne	r3, #1
 8001616:	2300      	moveq	r3, #0
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <_ZL12MX_ADC1_Initv+0xfe>
  {
    Error_Handler();
 800161e:	f000 fbe7 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	3730      	adds	r7, #48	@ 0x30
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	24000088 	.word	0x24000088
 8001630:	40022000 	.word	0x40022000
 8001634:	08600004 	.word	0x08600004

08001638 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	@ 0x28
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2224      	movs	r2, #36	@ 0x24
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f009 fcd9 	bl	800affc <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800164a:	4b35      	ldr	r3, [pc, #212]	@ (8001720 <_ZL12MX_ADC3_Initv+0xe8>)
 800164c:	4a35      	ldr	r2, [pc, #212]	@ (8001724 <_ZL12MX_ADC3_Initv+0xec>)
 800164e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001650:	4b33      	ldr	r3, [pc, #204]	@ (8001720 <_ZL12MX_ADC3_Initv+0xe8>)
 8001652:	2200      	movs	r2, #0
 8001654:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 8001656:	4b32      	ldr	r3, [pc, #200]	@ (8001720 <_ZL12MX_ADC3_Initv+0xe8>)
 8001658:	220c      	movs	r2, #12
 800165a:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 800165c:	4b30      	ldr	r3, [pc, #192]	@ (8001720 <_ZL12MX_ADC3_Initv+0xe8>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001662:	4b2f      	ldr	r3, [pc, #188]	@ (8001720 <_ZL12MX_ADC3_Initv+0xe8>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001668:	4b2d      	ldr	r3, [pc, #180]	@ (8001720 <_ZL12MX_ADC3_Initv+0xe8>)
 800166a:	2204      	movs	r2, #4
 800166c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800166e:	4b2c      	ldr	r3, [pc, #176]	@ (8001720 <_ZL12MX_ADC3_Initv+0xe8>)
 8001670:	2200      	movs	r2, #0
 8001672:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001674:	4b2a      	ldr	r3, [pc, #168]	@ (8001720 <_ZL12MX_ADC3_Initv+0xe8>)
 8001676:	2200      	movs	r2, #0
 8001678:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800167a:	4b29      	ldr	r3, [pc, #164]	@ (8001720 <_ZL12MX_ADC3_Initv+0xe8>)
 800167c:	2201      	movs	r2, #1
 800167e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001680:	4b27      	ldr	r3, [pc, #156]	@ (8001720 <_ZL12MX_ADC3_Initv+0xe8>)
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001688:	4b25      	ldr	r3, [pc, #148]	@ (8001720 <_ZL12MX_ADC3_Initv+0xe8>)
 800168a:	2200      	movs	r2, #0
 800168c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800168e:	4b24      	ldr	r3, [pc, #144]	@ (8001720 <_ZL12MX_ADC3_Initv+0xe8>)
 8001690:	2200      	movs	r2, #0
 8001692:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001694:	4b22      	ldr	r3, [pc, #136]	@ (8001720 <_ZL12MX_ADC3_Initv+0xe8>)
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800169c:	4b20      	ldr	r3, [pc, #128]	@ (8001720 <_ZL12MX_ADC3_Initv+0xe8>)
 800169e:	2200      	movs	r2, #0
 80016a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80016a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001720 <_ZL12MX_ADC3_Initv+0xe8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001720 <_ZL12MX_ADC3_Initv+0xe8>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80016ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001720 <_ZL12MX_ADC3_Initv+0xe8>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80016b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001720 <_ZL12MX_ADC3_Initv+0xe8>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 80016bc:	4b18      	ldr	r3, [pc, #96]	@ (8001720 <_ZL12MX_ADC3_Initv+0xe8>)
 80016be:	2200      	movs	r2, #0
 80016c0:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80016c2:	4817      	ldr	r0, [pc, #92]	@ (8001720 <_ZL12MX_ADC3_Initv+0xe8>)
 80016c4:	f001 fd3e 	bl	8003144 <HAL_ADC_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	bf14      	ite	ne
 80016ce:	2301      	movne	r3, #1
 80016d0:	2300      	moveq	r3, #0
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 80016d8:	f000 fb8a 	bl	8001df0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80016dc:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <_ZL12MX_ADC3_Initv+0xf0>)
 80016de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016e0:	2306      	movs	r3, #6
 80016e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016e8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80016ec:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016ee:	2304      	movs	r3, #4
 80016f0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	4619      	mov	r1, r3
 80016fe:	4808      	ldr	r0, [pc, #32]	@ (8001720 <_ZL12MX_ADC3_Initv+0xe8>)
 8001700:	f002 f928 	bl	8003954 <HAL_ADC_ConfigChannel>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	bf14      	ite	ne
 800170a:	2301      	movne	r3, #1
 800170c:	2300      	moveq	r3, #0
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <_ZL12MX_ADC3_Initv+0xe0>
  {
    Error_Handler();
 8001714:	f000 fb6c 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001718:	bf00      	nop
 800171a:	3728      	adds	r7, #40	@ 0x28
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	240000f8 	.word	0x240000f8
 8001724:	58026000 	.word	0x58026000
 8001728:	1d500080 	.word	0x1d500080

0800172c <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001732:	4b41      	ldr	r3, [pc, #260]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001734:	4a41      	ldr	r2, [pc, #260]	@ (800183c <_ZL14MX_FDCAN1_Initv+0x110>)
 8001736:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8001738:	4b3f      	ldr	r3, [pc, #252]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800173a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800173e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001740:	4b3d      	ldr	r3, [pc, #244]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001746:	4b3c      	ldr	r3, [pc, #240]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001748:	2200      	movs	r2, #0
 800174a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800174c:	4b3a      	ldr	r3, [pc, #232]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800174e:	2200      	movs	r2, #0
 8001750:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001752:	4b39      	ldr	r3, [pc, #228]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001754:	2200      	movs	r2, #0
 8001756:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 8001758:	4b37      	ldr	r3, [pc, #220]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800175a:	2203      	movs	r2, #3
 800175c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800175e:	4b36      	ldr	r3, [pc, #216]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001760:	2201      	movs	r2, #1
 8001762:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 8001764:	4b34      	ldr	r3, [pc, #208]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001766:	220a      	movs	r2, #10
 8001768:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 800176a:	4b33      	ldr	r3, [pc, #204]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800176c:	2205      	movs	r2, #5
 800176e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001770:	4b31      	ldr	r3, [pc, #196]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001772:	2201      	movs	r2, #1
 8001774:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001776:	4b30      	ldr	r3, [pc, #192]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001778:	2201      	movs	r2, #1
 800177a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800177c:	4b2e      	ldr	r3, [pc, #184]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800177e:	2201      	movs	r2, #1
 8001780:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001782:	4b2d      	ldr	r3, [pc, #180]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001784:	2201      	movs	r2, #1
 8001786:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001788:	4b2b      	ldr	r3, [pc, #172]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800178a:	2200      	movs	r2, #0
 800178c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800178e:	4b2a      	ldr	r3, [pc, #168]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001790:	2200      	movs	r2, #0
 8001792:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 5;
 8001794:	4b28      	ldr	r3, [pc, #160]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001796:	2205      	movs	r2, #5
 8001798:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 800179a:	4b27      	ldr	r3, [pc, #156]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800179c:	2220      	movs	r2, #32
 800179e:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80017a0:	4b25      	ldr	r3, [pc, #148]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017a2:	2204      	movs	r2, #4
 80017a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 80017a6:	4b24      	ldr	r3, [pc, #144]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017a8:	2220      	movs	r2, #32
 80017aa:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80017ac:	4b22      	ldr	r3, [pc, #136]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017ae:	2204      	movs	r2, #4
 80017b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 80017b2:	4b21      	ldr	r3, [pc, #132]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80017b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017ba:	2204      	movs	r2, #4
 80017bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 1;
 80017be:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 80017c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017c6:	2220      	movs	r2, #32
 80017c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 80017ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017cc:	2220      	movs	r2, #32
 80017ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80017d0:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80017d6:	4b18      	ldr	r3, [pc, #96]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017d8:	2204      	movs	r2, #4
 80017da:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80017dc:	4816      	ldr	r0, [pc, #88]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017de:	f003 fa39 	bl	8004c54 <HAL_FDCAN_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bf14      	ite	ne
 80017e8:	2301      	movne	r3, #1
 80017ea:	2300      	moveq	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <_ZL14MX_FDCAN1_Initv+0xca>
  {
    Error_Handler();
 80017f2:	f000 fafd 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80017f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017fa:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001800:	2302      	movs	r3, #2
 8001802:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001804:	2301      	movs	r3, #1
 8001806:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0;
 8001808:	2300      	movs	r3, #0
 800180a:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x0;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001810:	463b      	mov	r3, r7
 8001812:	4619      	mov	r1, r3
 8001814:	4808      	ldr	r0, [pc, #32]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001816:	f003 fbfb 	bl	8005010 <HAL_FDCAN_ConfigFilter>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	bf14      	ite	ne
 8001820:	2301      	movne	r3, #1
 8001822:	2300      	moveq	r3, #0
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <_ZL14MX_FDCAN1_Initv+0x102>
  {
    Error_Handler();
 800182a:	f000 fae1 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 800182e:	bf00      	nop
 8001830:	3720      	adds	r7, #32
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	24000168 	.word	0x24000168
 800183c:	4000a000 	.word	0x4000a000

08001840 <_ZL14MX_FDCAN2_Initv>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001846:	4b41      	ldr	r3, [pc, #260]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001848:	4a41      	ldr	r2, [pc, #260]	@ (8001950 <_ZL14MX_FDCAN2_Initv+0x110>)
 800184a:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 800184c:	4b3f      	ldr	r3, [pc, #252]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 800184e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001852:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001854:	4b3d      	ldr	r3, [pc, #244]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800185a:	4b3c      	ldr	r3, [pc, #240]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 800185c:	2200      	movs	r2, #0
 800185e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001860:	4b3a      	ldr	r3, [pc, #232]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001862:	2200      	movs	r2, #0
 8001864:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001866:	4b39      	ldr	r3, [pc, #228]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001868:	2200      	movs	r2, #0
 800186a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 3;
 800186c:	4b37      	ldr	r3, [pc, #220]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 800186e:	2203      	movs	r2, #3
 8001870:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001872:	4b36      	ldr	r3, [pc, #216]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001874:	2201      	movs	r2, #1
 8001876:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 10;
 8001878:	4b34      	ldr	r3, [pc, #208]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 800187a:	220a      	movs	r2, #10
 800187c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 800187e:	4b33      	ldr	r3, [pc, #204]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001880:	2205      	movs	r2, #5
 8001882:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001884:	4b31      	ldr	r3, [pc, #196]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001886:	2201      	movs	r2, #1
 8001888:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800188a:	4b30      	ldr	r3, [pc, #192]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 800188c:	2201      	movs	r2, #1
 800188e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001890:	4b2e      	ldr	r3, [pc, #184]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001892:	2201      	movs	r2, #1
 8001894:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001896:	4b2d      	ldr	r3, [pc, #180]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001898:	2201      	movs	r2, #1
 800189a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 800189c:	4b2b      	ldr	r3, [pc, #172]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 80018a2:	4b2a      	ldr	r3, [pc, #168]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 5;
 80018a8:	4b28      	ldr	r3, [pc, #160]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018aa:	2205      	movs	r2, #5
 80018ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 32;
 80018ae:	4b27      	ldr	r3, [pc, #156]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018b0:	2220      	movs	r2, #32
 80018b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80018b4:	4b25      	ldr	r3, [pc, #148]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018b6:	2204      	movs	r2, #4
 80018b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 32;
 80018ba:	4b24      	ldr	r3, [pc, #144]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018bc:	2220      	movs	r2, #32
 80018be:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80018c0:	4b22      	ldr	r3, [pc, #136]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018c2:	2204      	movs	r2, #4
 80018c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 1;
 80018c6:	4b21      	ldr	r3, [pc, #132]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80018cc:	4b1f      	ldr	r3, [pc, #124]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018ce:	2204      	movs	r2, #4
 80018d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 1;
 80018d2:	4b1e      	ldr	r3, [pc, #120]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 32;
 80018d8:	4b1c      	ldr	r3, [pc, #112]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018da:	2220      	movs	r2, #32
 80018dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 32;
 80018de:	4b1b      	ldr	r3, [pc, #108]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018e0:	2220      	movs	r2, #32
 80018e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80018e4:	4b19      	ldr	r3, [pc, #100]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80018ea:	4b18      	ldr	r3, [pc, #96]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018ec:	2204      	movs	r2, #4
 80018ee:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80018f0:	4816      	ldr	r0, [pc, #88]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018f2:	f003 f9af 	bl	8004c54 <HAL_FDCAN_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	bf14      	ite	ne
 80018fc:	2301      	movne	r3, #1
 80018fe:	2300      	moveq	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <_ZL14MX_FDCAN2_Initv+0xca>
  {
    Error_Handler();
 8001906:	f000 fa73 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800190a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800190e:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001914:	2302      	movs	r3, #2
 8001916:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001918:	2301      	movs	r3, #1
 800191a:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x10;
 800191c:	2310      	movs	r3, #16
 800191e:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x10;
 8001920:	2310      	movs	r3, #16
 8001922:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8001924:	463b      	mov	r3, r7
 8001926:	4619      	mov	r1, r3
 8001928:	4808      	ldr	r0, [pc, #32]	@ (800194c <_ZL14MX_FDCAN2_Initv+0x10c>)
 800192a:	f003 fb71 	bl	8005010 <HAL_FDCAN_ConfigFilter>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	bf14      	ite	ne
 8001934:	2301      	movne	r3, #1
 8001936:	2300      	moveq	r3, #0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <_ZL14MX_FDCAN2_Initv+0x102>
  {
    Error_Handler();
 800193e:	f000 fa57 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE END FDCAN2_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	3720      	adds	r7, #32
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	24000208 	.word	0x24000208
 8001950:	4000a400 	.word	0x4000a400

08001954 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001958:	4b2c      	ldr	r3, [pc, #176]	@ (8001a0c <_ZL19MX_USART2_UART_Initv+0xb8>)
 800195a:	4a2d      	ldr	r2, [pc, #180]	@ (8001a10 <_ZL19MX_USART2_UART_Initv+0xbc>)
 800195c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800195e:	4b2b      	ldr	r3, [pc, #172]	@ (8001a0c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001960:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001964:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001966:	4b29      	ldr	r3, [pc, #164]	@ (8001a0c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800196c:	4b27      	ldr	r3, [pc, #156]	@ (8001a0c <_ZL19MX_USART2_UART_Initv+0xb8>)
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001972:	4b26      	ldr	r3, [pc, #152]	@ (8001a0c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001978:	4b24      	ldr	r3, [pc, #144]	@ (8001a0c <_ZL19MX_USART2_UART_Initv+0xb8>)
 800197a:	220c      	movs	r2, #12
 800197c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800197e:	4b23      	ldr	r3, [pc, #140]	@ (8001a0c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001984:	4b21      	ldr	r3, [pc, #132]	@ (8001a0c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800198a:	4b20      	ldr	r3, [pc, #128]	@ (8001a0c <_ZL19MX_USART2_UART_Initv+0xb8>)
 800198c:	2200      	movs	r2, #0
 800198e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001990:	4b1e      	ldr	r3, [pc, #120]	@ (8001a0c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001992:	2200      	movs	r2, #0
 8001994:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001996:	4b1d      	ldr	r3, [pc, #116]	@ (8001a0c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001998:	2200      	movs	r2, #0
 800199a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800199c:	481b      	ldr	r0, [pc, #108]	@ (8001a0c <_ZL19MX_USART2_UART_Initv+0xb8>)
 800199e:	f008 f887 	bl	8009ab0 <HAL_UART_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	bf14      	ite	ne
 80019a8:	2301      	movne	r3, #1
 80019aa:	2300      	moveq	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 80019b2:	f000 fa1d 	bl	8001df0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019b6:	2100      	movs	r1, #0
 80019b8:	4814      	ldr	r0, [pc, #80]	@ (8001a0c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80019ba:	f009 fa32 	bl	800ae22 <HAL_UARTEx_SetTxFifoThreshold>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	bf14      	ite	ne
 80019c4:	2301      	movne	r3, #1
 80019c6:	2300      	moveq	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 80019ce:	f000 fa0f 	bl	8001df0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019d2:	2100      	movs	r1, #0
 80019d4:	480d      	ldr	r0, [pc, #52]	@ (8001a0c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80019d6:	f009 fa62 	bl	800ae9e <HAL_UARTEx_SetRxFifoThreshold>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	bf14      	ite	ne
 80019e0:	2301      	movne	r3, #1
 80019e2:	2300      	moveq	r3, #0
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 80019ea:	f000 fa01 	bl	8001df0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80019ee:	4807      	ldr	r0, [pc, #28]	@ (8001a0c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80019f0:	f009 f9de 	bl	800adb0 <HAL_UARTEx_DisableFifoMode>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	bf14      	ite	ne
 80019fa:	2301      	movne	r3, #1
 80019fc:	2300      	moveq	r3, #0
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8001a04:	f000 f9f4 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	240002a8 	.word	0x240002a8
 8001a10:	40004400 	.word	0x40004400

08001a14 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08c      	sub	sp, #48	@ 0x30
 8001a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a2a:	4b57      	ldr	r3, [pc, #348]	@ (8001b88 <_ZL12MX_GPIO_Initv+0x174>)
 8001a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a30:	4a55      	ldr	r2, [pc, #340]	@ (8001b88 <_ZL12MX_GPIO_Initv+0x174>)
 8001a32:	f043 0320 	orr.w	r3, r3, #32
 8001a36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a3a:	4b53      	ldr	r3, [pc, #332]	@ (8001b88 <_ZL12MX_GPIO_Initv+0x174>)
 8001a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a40:	f003 0320 	and.w	r3, r3, #32
 8001a44:	61bb      	str	r3, [r7, #24]
 8001a46:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a48:	4b4f      	ldr	r3, [pc, #316]	@ (8001b88 <_ZL12MX_GPIO_Initv+0x174>)
 8001a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a4e:	4a4e      	ldr	r2, [pc, #312]	@ (8001b88 <_ZL12MX_GPIO_Initv+0x174>)
 8001a50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a58:	4b4b      	ldr	r3, [pc, #300]	@ (8001b88 <_ZL12MX_GPIO_Initv+0x174>)
 8001a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	4b48      	ldr	r3, [pc, #288]	@ (8001b88 <_ZL12MX_GPIO_Initv+0x174>)
 8001a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a6c:	4a46      	ldr	r2, [pc, #280]	@ (8001b88 <_ZL12MX_GPIO_Initv+0x174>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a76:	4b44      	ldr	r3, [pc, #272]	@ (8001b88 <_ZL12MX_GPIO_Initv+0x174>)
 8001a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a84:	4b40      	ldr	r3, [pc, #256]	@ (8001b88 <_ZL12MX_GPIO_Initv+0x174>)
 8001a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a8a:	4a3f      	ldr	r2, [pc, #252]	@ (8001b88 <_ZL12MX_GPIO_Initv+0x174>)
 8001a8c:	f043 0310 	orr.w	r3, r3, #16
 8001a90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a94:	4b3c      	ldr	r3, [pc, #240]	@ (8001b88 <_ZL12MX_GPIO_Initv+0x174>)
 8001a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a9a:	f003 0310 	and.w	r3, r3, #16
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa2:	4b39      	ldr	r3, [pc, #228]	@ (8001b88 <_ZL12MX_GPIO_Initv+0x174>)
 8001aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aa8:	4a37      	ldr	r2, [pc, #220]	@ (8001b88 <_ZL12MX_GPIO_Initv+0x174>)
 8001aaa:	f043 0302 	orr.w	r3, r3, #2
 8001aae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ab2:	4b35      	ldr	r3, [pc, #212]	@ (8001b88 <_ZL12MX_GPIO_Initv+0x174>)
 8001ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ac0:	4b31      	ldr	r3, [pc, #196]	@ (8001b88 <_ZL12MX_GPIO_Initv+0x174>)
 8001ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ac6:	4a30      	ldr	r2, [pc, #192]	@ (8001b88 <_ZL12MX_GPIO_Initv+0x174>)
 8001ac8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001acc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ad0:	4b2d      	ldr	r3, [pc, #180]	@ (8001b88 <_ZL12MX_GPIO_Initv+0x174>)
 8001ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ade:	4b2a      	ldr	r3, [pc, #168]	@ (8001b88 <_ZL12MX_GPIO_Initv+0x174>)
 8001ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ae4:	4a28      	ldr	r2, [pc, #160]	@ (8001b88 <_ZL12MX_GPIO_Initv+0x174>)
 8001ae6:	f043 0308 	orr.w	r3, r3, #8
 8001aea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aee:	4b26      	ldr	r3, [pc, #152]	@ (8001b88 <_ZL12MX_GPIO_Initv+0x174>)
 8001af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	603b      	str	r3, [r7, #0]
 8001afa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, GPIO_PIN_RESET);
 8001afc:	2200      	movs	r2, #0
 8001afe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b02:	4822      	ldr	r0, [pc, #136]	@ (8001b8c <_ZL12MX_GPIO_Initv+0x178>)
 8001b04:	f004 fc34 	bl	8006370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin, GPIO_PIN_RESET);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2138      	movs	r1, #56	@ 0x38
 8001b0c:	4820      	ldr	r0, [pc, #128]	@ (8001b90 <_ZL12MX_GPIO_Initv+0x17c>)
 8001b0e:	f004 fc2f 	bl	8006370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AMS_OK_Pin */
  GPIO_InitStruct.Pin = AMS_OK_Pin;
 8001b12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b20:	2300      	movs	r3, #0
 8001b22:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AMS_OK_GPIO_Port, &GPIO_InitStruct);
 8001b24:	f107 031c 	add.w	r3, r7, #28
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4818      	ldr	r0, [pc, #96]	@ (8001b8c <_ZL12MX_GPIO_Initv+0x178>)
 8001b2c:	f004 fa60 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITAL1_Pin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin;
 8001b30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIGITAL1_GPIO_Port, &GPIO_InitStruct);
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	4619      	mov	r1, r3
 8001b44:	4813      	ldr	r0, [pc, #76]	@ (8001b94 <_ZL12MX_GPIO_Initv+0x180>)
 8001b46:	f004 fa53 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Charge_Button_Pin */
  GPIO_InitStruct.Pin = Charge_Button_Pin;
 8001b4a:	2380      	movs	r3, #128	@ 0x80
 8001b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Charge_Button_GPIO_Port, &GPIO_InitStruct);
 8001b56:	f107 031c 	add.w	r3, r7, #28
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	480e      	ldr	r0, [pc, #56]	@ (8001b98 <_ZL12MX_GPIO_Initv+0x184>)
 8001b5e:	f004 fa47 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_AIR_N_Pin RELAY_AIR_P_Pin RELAY_PRECHARGE_Pin */
  GPIO_InitStruct.Pin = RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin;
 8001b62:	2338      	movs	r3, #56	@ 0x38
 8001b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b66:	2301      	movs	r3, #1
 8001b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b72:	f107 031c 	add.w	r3, r7, #28
 8001b76:	4619      	mov	r1, r3
 8001b78:	4805      	ldr	r0, [pc, #20]	@ (8001b90 <_ZL12MX_GPIO_Initv+0x17c>)
 8001b7a:	f004 fa39 	bl	8005ff0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b7e:	bf00      	nop
 8001b80:	3730      	adds	r7, #48	@ 0x30
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	58024400 	.word	0x58024400
 8001b8c:	58021400 	.word	0x58021400
 8001b90:	58020c00 	.word	0x58020c00
 8001b94:	58021000 	.word	0x58021000
 8001b98:	58021800 	.word	0x58021800

08001b9c <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001b9c:	b590      	push	{r4, r7, lr}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af02      	add	r7, sp, #8
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d04b      	beq.n	8001c48 <HAL_FDCAN_RxFifo0Callback+0xac>
	{
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_acu, RxData) == HAL_OK)
 8001bb0:	4b27      	ldr	r3, [pc, #156]	@ (8001c50 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001bb2:	4a28      	ldr	r2, [pc, #160]	@ (8001c54 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001bb4:	2140      	movs	r1, #64	@ 0x40
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f003 fb26 	bl	8005208 <HAL_FDCAN_GetRxMessage>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	bf0c      	ite	eq
 8001bc2:	2301      	moveq	r3, #1
 8001bc4:	2300      	movne	r3, #0
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d02e      	beq.n	8001c2a <HAL_FDCAN_RxFifo0Callback+0x8e>
    {
		msg_acu.id = RxHeader_acu.Identifier;
 8001bcc:	4b21      	ldr	r3, [pc, #132]	@ (8001c54 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a21      	ldr	r2, [pc, #132]	@ (8001c58 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001bd2:	6013      	str	r3, [r2, #0]
		msg_acu.len = RxHeader_acu.DataLength;
 8001bd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c54 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	4b1f      	ldr	r3, [pc, #124]	@ (8001c58 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001bdc:	711a      	strb	r2, [r3, #4]
		for (int i = 0; i < 8; i++) {msg_acu.buf[i] = RxData[i];}
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	e00c      	b.n	8001bfe <HAL_FDCAN_RxFifo0Callback+0x62>
 8001be4:	4a1a      	ldr	r2, [pc, #104]	@ (8001c50 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4413      	add	r3, r2
 8001bea:	7819      	ldrb	r1, [r3, #0]
 8001bec:	4a1a      	ldr	r2, [pc, #104]	@ (8001c58 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3305      	adds	r3, #5
 8001bf4:	460a      	mov	r2, r1
 8001bf6:	701a      	strb	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2b07      	cmp	r3, #7
 8001c02:	ddef      	ble.n	8001be4 <HAL_FDCAN_RxFifo0Callback+0x48>
		msg_acu.bus = 1;
 8001c04:	4b14      	ldr	r3, [pc, #80]	@ (8001c58 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	611a      	str	r2, [r3, #16]
		msg_acu.time = HAL_GetTick();
 8001c0a:	f000 ff69 	bl	8002ae0 <HAL_GetTick>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4a11      	ldr	r2, [pc, #68]	@ (8001c58 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001c12:	6153      	str	r3, [r2, #20]
		parse_state(msg_acu);
 8001c14:	4b10      	ldr	r3, [pc, #64]	@ (8001c58 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001c16:	466c      	mov	r4, sp
 8001c18:	f103 0210 	add.w	r2, r3, #16
 8001c1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c20:	e884 0003 	stmia.w	r4, {r0, r1}
 8001c24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c26:	f000 faf5 	bl	8002214 <_Z11parse_state6CANMsg>

    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f003 fc56 	bl	80054e0 <HAL_FDCAN_ActivateNotification>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	bf14      	ite	ne
 8001c3a:	2301      	movne	r3, #1
 8001c3c:	2300      	moveq	r3, #0
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_FDCAN_RxFifo0Callback+0xac>
    {
      /* Notification Error */
      Error_Handler();
 8001c44:	f000 f8d4 	bl	8001df0 <Error_Handler>
    }
  }
}
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd90      	pop	{r4, r7, pc}
 8001c50:	240003d4 	.word	0x240003d4
 8001c54:	24000384 	.word	0x24000384
 8001c58:	24000458 	.word	0x24000458

08001c5c <module_send_message_CAN1>:

//extended ID
HAL_StatusTypeDef module_send_message_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	4613      	mov	r3, r2
 8001c68:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 8001c6a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c98 <module_send_message_CAN1+0x3c>)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_EXTENDED_ID;
 8001c70:	4b09      	ldr	r3, [pc, #36]	@ (8001c98 <module_send_message_CAN1+0x3c>)
 8001c72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c76:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	4a07      	ldr	r2, [pc, #28]	@ (8001c98 <module_send_message_CAN1+0x3c>)
 8001c7c:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	4905      	ldr	r1, [pc, #20]	@ (8001c98 <module_send_message_CAN1+0x3c>)
 8001c82:	4806      	ldr	r0, [pc, #24]	@ (8001c9c <module_send_message_CAN1+0x40>)
 8001c84:	f003 fa65 	bl	8005152 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	75fb      	strb	r3, [r7, #23]

	return status;
 8001c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	2400033c 	.word	0x2400033c
 8001c9c:	24000168 	.word	0x24000168

08001ca0 <module_send_message_NoExtId_CAN1>:

//NO extended ID
HAL_StatusTypeDef module_send_message_NoExtId_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	4613      	mov	r3, r2
 8001cac:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 8001cae:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd8 <module_send_message_NoExtId_CAN1+0x38>)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_STANDARD_ID;
 8001cb4:	4b08      	ldr	r3, [pc, #32]	@ (8001cd8 <module_send_message_NoExtId_CAN1+0x38>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	4a06      	ldr	r2, [pc, #24]	@ (8001cd8 <module_send_message_NoExtId_CAN1+0x38>)
 8001cbe:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	4905      	ldr	r1, [pc, #20]	@ (8001cd8 <module_send_message_NoExtId_CAN1+0x38>)
 8001cc4:	4805      	ldr	r0, [pc, #20]	@ (8001cdc <module_send_message_NoExtId_CAN1+0x3c>)
 8001cc6:	f003 fa44 	bl	8005152 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	75fb      	strb	r3, [r7, #23]

	return status;
 8001cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	2400033c 	.word	0x2400033c
 8001cdc:	24000168 	.word	0x24000168

08001ce0 <module_send_message_CAN2>:

HAL_StatusTypeDef module_send_message_CAN2(uint32_t id, uint8_t* data, uint8_t length) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	4613      	mov	r3, r2
 8001cec:	71fb      	strb	r3, [r7, #7]
	TxHeader_bms.Identifier = id;
 8001cee:	4a0a      	ldr	r2, [pc, #40]	@ (8001d18 <module_send_message_CAN2+0x38>)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6013      	str	r3, [r2, #0]
	TxHeader_bms.IdType = FDCAN_STANDARD_ID;
 8001cf4:	4b08      	ldr	r3, [pc, #32]	@ (8001d18 <module_send_message_CAN2+0x38>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	605a      	str	r2, [r3, #4]
	TxHeader_bms.DataLength = length;
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	4a06      	ldr	r2, [pc, #24]	@ (8001d18 <module_send_message_CAN2+0x38>)
 8001cfe:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_bms, data);
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	4905      	ldr	r1, [pc, #20]	@ (8001d18 <module_send_message_CAN2+0x38>)
 8001d04:	4805      	ldr	r0, [pc, #20]	@ (8001d1c <module_send_message_CAN2+0x3c>)
 8001d06:	f003 fa24 	bl	8005152 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	75fb      	strb	r3, [r7, #23]

	return status;
 8001d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	24000360 	.word	0x24000360
 8001d1c:	24000208 	.word	0x24000208

08001d20 <print>:

void print(char uart_buffer[]){
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	4909      	ldr	r1, [pc, #36]	@ (8001d50 <print+0x30>)
 8001d2c:	4809      	ldr	r0, [pc, #36]	@ (8001d54 <print+0x34>)
 8001d2e:	f009 f943 	bl	800afb8 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001d32:	4808      	ldr	r0, [pc, #32]	@ (8001d54 <print+0x34>)
 8001d34:	f7fe faec 	bl	8000310 <strlen>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d40:	4904      	ldr	r1, [pc, #16]	@ (8001d54 <print+0x34>)
 8001d42:	4805      	ldr	r0, [pc, #20]	@ (8001d58 <print+0x38>)
 8001d44:	f007 ff04 	bl	8009b50 <HAL_UART_Transmit>
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	0800bbe8 	.word	0x0800bbe8
 8001d54:	240003dc 	.word	0x240003dc
 8001d58:	240002a8 	.word	0x240002a8

08001d5c <printnl>:

void printnl(char uart_buffer[]){
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s", uart_buffer);
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	4909      	ldr	r1, [pc, #36]	@ (8001d8c <printnl+0x30>)
 8001d68:	4809      	ldr	r0, [pc, #36]	@ (8001d90 <printnl+0x34>)
 8001d6a:	f009 f925 	bl	800afb8 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001d6e:	4808      	ldr	r0, [pc, #32]	@ (8001d90 <printnl+0x34>)
 8001d70:	f7fe face 	bl	8000310 <strlen>
 8001d74:	4603      	mov	r3, r0
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7c:	4904      	ldr	r1, [pc, #16]	@ (8001d90 <printnl+0x34>)
 8001d7e:	4805      	ldr	r0, [pc, #20]	@ (8001d94 <printnl+0x38>)
 8001d80:	f007 fee6 	bl	8009b50 <HAL_UART_Transmit>
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	0800bbf0 	.word	0x0800bbf0
 8001d90:	240003dc 	.word	0x240003dc
 8001d94:	240002a8 	.word	0x240002a8

08001d98 <getUARTState>:
void printValue(int value){
	sprintf(uart_msg, "%hu \n\r", value);
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
}

HAL_UART_StateTypeDef getUARTState(){
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
	return HAL_UART_GetState(&huart2);
 8001d9c:	4802      	ldr	r0, [pc, #8]	@ (8001da8 <getUARTState+0x10>)
 8001d9e:	f007 ff65 	bl	8009c6c <HAL_UART_GetState>
 8001da2:	4603      	mov	r3, r0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	240002a8 	.word	0x240002a8

08001dac <readAnalogValue>:

float readAnalogValue(void){
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
	float analogValue;

	HAL_ADC_Start(&hadc3);
 8001db2:	480e      	ldr	r0, [pc, #56]	@ (8001dec <readAnalogValue+0x40>)
 8001db4:	f001 fbce 	bl	8003554 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8001db8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dbc:	480b      	ldr	r0, [pc, #44]	@ (8001dec <readAnalogValue+0x40>)
 8001dbe:	f001 fcc7 	bl	8003750 <HAL_ADC_PollForConversion>
	analogValue = HAL_ADC_GetValue(&hadc3);
 8001dc2:	480a      	ldr	r0, [pc, #40]	@ (8001dec <readAnalogValue+0x40>)
 8001dc4:	f001 fdb8 	bl	8003938 <HAL_ADC_GetValue>
 8001dc8:	ee07 0a90 	vmov	s15, r0
 8001dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dd0:	edc7 7a01 	vstr	s15, [r7, #4]
	HAL_ADC_Stop(&hadc3);
 8001dd4:	4805      	ldr	r0, [pc, #20]	@ (8001dec <readAnalogValue+0x40>)
 8001dd6:	f001 fc87 	bl	80036e8 <HAL_ADC_Stop>
	return analogValue;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	ee07 3a90 	vmov	s15, r3
}
 8001de0:	eeb0 0a67 	vmov.f32	s0, s15
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	240000f8 	.word	0x240000f8

08001df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001df4:	b672      	cpsid	i
}
 8001df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <Error_Handler+0x8>
 8001dfc:	0000      	movs	r0, r0
	...

08001e00 <_Z12select_statev>:

/*********************************************************************************************************
 ** Function name:           select_state
 ** Descriptions:            check what should they do on the state machine
 *********************************************************************************************************/
void select_state() {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08c      	sub	sp, #48	@ 0x30
 8001e04:	af00      	add	r7, sp, #0
	int state_air_n = 0;     // 0 means open, 1 closed     // Turn on SEVCON
 8001e06:	2300      	movs	r3, #0
 8001e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int state_air_p = 0;     // 0 means open, 1 closed     // Energize HV relay
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	int state_precharge = 0; // 0 means open, 1 closed
 8001e0e:	2300      	movs	r3, #0
 8001e10:	627b      	str	r3, [r7, #36]	@ 0x24
	int flag_cpu = CPU_ERROR_COMMUNICATION;
 8001e12:	2301      	movs	r3, #1
 8001e14:	61bb      	str	r3, [r7, #24]
	int flag_current = Current_ERROR_Comunication;
 8001e16:	2302      	movs	r3, #2
 8001e18:	617b      	str	r3, [r7, #20]


	int gpio_charge = HAL_GPIO_ReadPin(Charge_Button_GPIO_Port, Charge_Button_Pin); // pull-up: 1 = charge started
 8001e1a:	2180      	movs	r1, #128	@ 0x80
 8001e1c:	48a4      	ldr	r0, [pc, #656]	@ (80020b0 <_Z12select_statev+0x2b0>)
 8001e1e:	f004 fa8f 	bl	8006340 <HAL_GPIO_ReadPin>
 8001e22:	4603      	mov	r3, r0
 8001e24:	613b      	str	r3, [r7, #16]
	 * 1 ms interruption => 1ms * 264MHz = 264000
	 * prescalado 264 (por ejemplo)
	 * timer count = 264000 / 264 = 1000
	 */

	uint32_t time = HAL_GetTick();
 8001e26:	f000 fe5b 	bl	8002ae0 <HAL_GetTick>
 8001e2a:	60f8      	str	r0, [r7, #12]
	int time_s = HAL_GetTick();
 8001e2c:	f000 fe58 	bl	8002ae0 <HAL_GetTick>
 8001e30:	4603      	mov	r3, r0
 8001e32:	60bb      	str	r3, [r7, #8]


	CPU.voltage_acum = 0; // For precharge
 8001e34:	4b9f      	ldr	r3, [pc, #636]	@ (80020b4 <_Z12select_statev+0x2b4>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	62da      	str	r2, [r3, #44]	@ 0x2c


	MIN_V = 4200; /// I reset the number each cycle cause if the voltages goes up again I wanna has it risen again on telemetry
 8001e3a:	4b9f      	ldr	r3, [pc, #636]	@ (80020b8 <_Z12select_statev+0x2b8>)
 8001e3c:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001e40:	601a      	str	r2, [r3, #0]
	MAX_T = 0;
 8001e42:	4b9e      	ldr	r3, [pc, #632]	@ (80020bc <_Z12select_statev+0x2bc>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001e48:	2300      	movs	r3, #0
 8001e4a:	623b      	str	r3, [r7, #32]
 8001e4c:	e06f      	b.n	8001f2e <_Z12select_statev+0x12e>
		BMS[i].voltage_acum = 0;// For precharge
 8001e4e:	4a9c      	ldr	r2, [pc, #624]	@ (80020c0 <_Z12select_statev+0x2c0>)
 8001e50:	6a3b      	ldr	r3, [r7, #32]
 8001e52:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001e56:	fb01 f303 	mul.w	r3, r1, r3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	338c      	adds	r3, #140	@ 0x8c
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]


		if (BMS[i].query_voltage(time, buffer) != BMS_OK) //I ask the BMS about voltages and cheking their states
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8001e68:	fb02 f303 	mul.w	r3, r2, r3
 8001e6c:	4a94      	ldr	r2, [pc, #592]	@ (80020c0 <_Z12select_statev+0x2c0>)
 8001e6e:	4413      	add	r3, r2
 8001e70:	4a94      	ldr	r2, [pc, #592]	@ (80020c4 <_Z12select_statev+0x2c4>)
 8001e72:	68f9      	ldr	r1, [r7, #12]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe ff2a 	bl	8000cce <_ZN7BMS_MOD13query_voltageEmPc>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	bf14      	ite	ne
 8001e80:	2301      	movne	r3, #1
 8001e82:	2300      	moveq	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <_Z12select_statev+0x90>
		{
			//state = error;
			flag_ams_ok = 0;
 8001e8a:	4b8f      	ldr	r3, [pc, #572]	@ (80020c8 <_Z12select_statev+0x2c8>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
		}

		CPU.voltage_acum += BMS[i].voltage_acum; // For precharge
 8001e90:	4b88      	ldr	r3, [pc, #544]	@ (80020b4 <_Z12select_statev+0x2b4>)
 8001e92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e94:	498a      	ldr	r1, [pc, #552]	@ (80020c0 <_Z12select_statev+0x2c0>)
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 8001e9c:	fb00 f303 	mul.w	r3, r0, r3
 8001ea0:	440b      	add	r3, r1
 8001ea2:	338c      	adds	r3, #140	@ 0x8c
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	4a82      	ldr	r2, [pc, #520]	@ (80020b4 <_Z12select_statev+0x2b4>)
 8001eaa:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if (BMS[i].MIN_V < MIN_V)
 8001eac:	4a84      	ldr	r2, [pc, #528]	@ (80020c0 <_Z12select_statev+0x2c0>)
 8001eae:	6a3b      	ldr	r3, [r7, #32]
 8001eb0:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001eb4:	fb01 f303 	mul.w	r3, r1, r3
 8001eb8:	4413      	add	r3, r2
 8001eba:	3390      	adds	r3, #144	@ 0x90
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	4b7e      	ldr	r3, [pc, #504]	@ (80020b8 <_Z12select_statev+0x2b8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	da0a      	bge.n	8001edc <_Z12select_statev+0xdc>
			MIN_V = BMS[i].MIN_V; //Checking the minimun voltage of cell in the whole battery
 8001ec6:	4a7e      	ldr	r2, [pc, #504]	@ (80020c0 <_Z12select_statev+0x2c0>)
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
 8001eca:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001ece:	fb01 f303 	mul.w	r3, r1, r3
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3390      	adds	r3, #144	@ 0x90
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a77      	ldr	r2, [pc, #476]	@ (80020b8 <_Z12select_statev+0x2b8>)
 8001eda:	6013      	str	r3, [r2, #0]


		if (BMS[i].query_temperature(time, buffer) != Temperatures_OK){
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8001ee2:	fb02 f303 	mul.w	r3, r2, r3
 8001ee6:	4a76      	ldr	r2, [pc, #472]	@ (80020c0 <_Z12select_statev+0x2c0>)
 8001ee8:	4413      	add	r3, r2
 8001eea:	4a76      	ldr	r2, [pc, #472]	@ (80020c4 <_Z12select_statev+0x2c4>)
 8001eec:	68f9      	ldr	r1, [r7, #12]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe ff4e 	bl	8000d90 <_ZN7BMS_MOD17query_temperatureEmPc>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
			//state = error;
		}

		if (BMS[i].MAX_T > MAX_T)
 8001ef8:	4a71      	ldr	r2, [pc, #452]	@ (80020c0 <_Z12select_statev+0x2c0>)
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001f00:	fb01 f303 	mul.w	r3, r1, r3
 8001f04:	4413      	add	r3, r2
 8001f06:	33a0      	adds	r3, #160	@ 0xa0
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	4b6c      	ldr	r3, [pc, #432]	@ (80020bc <_Z12select_statev+0x2bc>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	dd0a      	ble.n	8001f28 <_Z12select_statev+0x128>
			MAX_T = BMS[i].MAX_T;
 8001f12:	4a6b      	ldr	r2, [pc, #428]	@ (80020c0 <_Z12select_statev+0x2c0>)
 8001f14:	6a3b      	ldr	r3, [r7, #32]
 8001f16:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001f1a:	fb01 f303 	mul.w	r3, r1, r3
 8001f1e:	4413      	add	r3, r2
 8001f20:	33a0      	adds	r3, #160	@ 0xa0
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a65      	ldr	r2, [pc, #404]	@ (80020bc <_Z12select_statev+0x2bc>)
 8001f26:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	623b      	str	r3, [r7, #32]
 8001f2e:	4b67      	ldr	r3, [pc, #412]	@ (80020cc <_Z12select_statev+0x2cc>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6a3a      	ldr	r2, [r7, #32]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	db8a      	blt.n	8001e4e <_Z12select_statev+0x4e>
	}

	if (time_s > time_sending_minV + 500) {
 8001f38:	4b65      	ldr	r3, [pc, #404]	@ (80020d0 <_Z12select_statev+0x2d0>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001f40:	68ba      	ldr	r2, [r7, #8]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	dd23      	ble.n	8001f8e <_Z12select_statev+0x18e>
		message_MINV[1] = MIN_V & 0xFF;
 8001f46:	4b5c      	ldr	r3, [pc, #368]	@ (80020b8 <_Z12select_statev+0x2b8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	4b61      	ldr	r3, [pc, #388]	@ (80020d4 <_Z12select_statev+0x2d4>)
 8001f4e:	705a      	strb	r2, [r3, #1]
		message_MINV[0] = (MIN_V >> 8) & 0xFF;
 8001f50:	4b59      	ldr	r3, [pc, #356]	@ (80020b8 <_Z12select_statev+0x2b8>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	121b      	asrs	r3, r3, #8
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	4b5e      	ldr	r3, [pc, #376]	@ (80020d4 <_Z12select_statev+0x2d4>)
 8001f5a:	701a      	strb	r2, [r3, #0]
		if (BMS[0].flag_charger != 1) {
 8001f5c:	4b58      	ldr	r3, [pc, #352]	@ (80020c0 <_Z12select_statev+0x2c0>)
 8001f5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d010      	beq.n	8001f88 <_Z12select_statev+0x188>
			if (module_send_message_CAN1(BMS_ID, message_MINV, 2) != HAL_OK)
 8001f66:	2202      	movs	r2, #2
 8001f68:	495a      	ldr	r1, [pc, #360]	@ (80020d4 <_Z12select_statev+0x2d4>)
 8001f6a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001f6e:	f7ff fe75 	bl	8001c5c <module_send_message_CAN1>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	bf14      	ite	ne
 8001f78:	2301      	movne	r3, #1
 8001f7a:	2300      	moveq	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d002      	beq.n	8001f88 <_Z12select_statev+0x188>
				print((char*) "Error al enviar tension minima"); //Sending the message through telemtry each 500 ms
 8001f82:	4855      	ldr	r0, [pc, #340]	@ (80020d8 <_Z12select_statev+0x2d8>)
 8001f84:	f7ff fecc 	bl	8001d20 <print>
		}
		time_sending_minV = time_s;
 8001f88:	4a51      	ldr	r2, [pc, #324]	@ (80020d0 <_Z12select_statev+0x2d0>)
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	6013      	str	r3, [r2, #0]
	}
	for (int i = 0; i < BMS_N; i++) {
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
 8001f92:	e00d      	b.n	8001fb0 <_Z12select_statev+0x1b0>
		BMS[i].BALANCING_V = MIN_V; //Here I say I wanna balance all the cells in the battery to the minimun
 8001f94:	4b48      	ldr	r3, [pc, #288]	@ (80020b8 <_Z12select_statev+0x2b8>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4949      	ldr	r1, [pc, #292]	@ (80020c0 <_Z12select_statev+0x2c0>)
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 8001fa0:	fb00 f303 	mul.w	r3, r0, r3
 8001fa4:	440b      	add	r3, r1
 8001fa6:	3394      	adds	r3, #148	@ 0x94
 8001fa8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3301      	adds	r3, #1
 8001fae:	61fb      	str	r3, [r7, #28]
 8001fb0:	4b46      	ldr	r3, [pc, #280]	@ (80020cc <_Z12select_statev+0x2cc>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	69fa      	ldr	r2, [r7, #28]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	dbec      	blt.n	8001f94 <_Z12select_statev+0x194>

	}


	flag_cpu = CPU.query(time, buffer); //Asking the rest of the car how is it
 8001fba:	4a42      	ldr	r2, [pc, #264]	@ (80020c4 <_Z12select_statev+0x2c4>)
 8001fbc:	68f9      	ldr	r1, [r7, #12]
 8001fbe:	483d      	ldr	r0, [pc, #244]	@ (80020b4 <_Z12select_statev+0x2b4>)
 8001fc0:	f7fe ffc2 	bl	8000f48 <_ZN7CPU_MOD5queryEmPc>
 8001fc4:	61b8      	str	r0, [r7, #24]
	//flag_cpu = CPU_OK;

	flag_current = current.query(time, buffer); //asking current how is it
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4a3e      	ldr	r2, [pc, #248]	@ (80020c4 <_Z12select_statev+0x2c4>)
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4843      	ldr	r0, [pc, #268]	@ (80020dc <_Z12select_statev+0x2dc>)
 8001fce:	f7ff f84f 	bl	8001070 <_ZN11Current_MOD5queryEiPc>
 8001fd2:	6178      	str	r0, [r7, #20]
	print((char*)"voltage acu");
	printValue(CPU.voltage_acum);
	print((char*)"dc bus");
	printValue(CPU.DC_BUS);
	printValue(state);*/
	switch (state) {
 8001fd4:	4b42      	ldr	r3, [pc, #264]	@ (80020e0 <_Z12select_statev+0x2e0>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b05      	cmp	r3, #5
 8001fda:	f200 80d1 	bhi.w	8002180 <_Z12select_statev+0x380>
 8001fde:	a201      	add	r2, pc, #4	@ (adr r2, 8001fe4 <_Z12select_statev+0x1e4>)
 8001fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe4:	08001ffd 	.word	0x08001ffd
 8001fe8:	0800202f 	.word	0x0800202f
 8001fec:	0800204b 	.word	0x0800204b
 8001ff0:	080020e9 	.word	0x080020e9
 8001ff4:	08002121 	.word	0x08002121
 8001ff8:	08002161 	.word	0x08002161
	case start:
		state_air_n = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_DISCONNECTED);
 8002008:	2102      	movs	r1, #2
 800200a:	482a      	ldr	r0, [pc, #168]	@ (80020b4 <_Z12select_statev+0x2b4>)
 800200c:	f7fe ffce 	bl	8000fac <_ZN7CPU_MOD11updateStateEi>
		if(gpio_charge == GPIO_PIN_SET){
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d103      	bne.n	800201e <_Z12select_statev+0x21e>
			state = charge;
 8002016:	4b32      	ldr	r3, [pc, #200]	@ (80020e0 <_Z12select_statev+0x2e0>)
 8002018:	2204      	movs	r2, #4
 800201a:	701a      	strb	r2, [r3, #0]
		}

		else if (flag_cpu != CPU_ERROR_COMMUNICATION)
			state = precharge; //If I do comunicate with the rest of the car, I go to precharge
		break;
 800201c:	e0ab      	b.n	8002176 <_Z12select_statev+0x376>
		else if (flag_cpu != CPU_ERROR_COMMUNICATION)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	2b01      	cmp	r3, #1
 8002022:	f000 80a8 	beq.w	8002176 <_Z12select_statev+0x376>
			state = precharge; //If I do comunicate with the rest of the car, I go to precharge
 8002026:	4b2e      	ldr	r3, [pc, #184]	@ (80020e0 <_Z12select_statev+0x2e0>)
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
		break;
 800202c:	e0a3      	b.n	8002176 <_Z12select_statev+0x376>
	case precharge:
		state_air_n = 1;
 800202e:	2301      	movs	r3, #1
 8002030:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 1;
 8002036:	2301      	movs	r3, #1
 8002038:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_PRECHARGE);
 800203a:	2101      	movs	r1, #1
 800203c:	481d      	ldr	r0, [pc, #116]	@ (80020b4 <_Z12select_statev+0x2b4>)
 800203e:	f7fe ffb5 	bl	8000fac <_ZN7CPU_MOD11updateStateEi>
		//if (flag_cpu == CPU_OK) {
			state = transition;
 8002042:	4b27      	ldr	r3, [pc, #156]	@ (80020e0 <_Z12select_statev+0x2e0>)
 8002044:	2202      	movs	r2, #2
 8002046:	701a      	strb	r2, [r3, #0]
		//} else if (flag_cpu == CPU_ERROR_COMMUNICATION)
			//state = error;
		 //else if(flag_current != Current_OK) state = error; //I take this out cause in precharge current can be very high, but probably can be uncommented,
		break;
 8002048:	e09a      	b.n	8002180 <_Z12select_statev+0x380>
	case transition:
		state_air_n = 1;
 800204a:	2301      	movs	r3, #1
 800204c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 1;
 8002052:	2301      	movs	r3, #1
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_PRECHARGE);
 8002056:	2101      	movs	r1, #1
 8002058:	4816      	ldr	r0, [pc, #88]	@ (80020b4 <_Z12select_statev+0x2b4>)
 800205a:	f7fe ffa7 	bl	8000fac <_ZN7CPU_MOD11updateStateEi>
		if ((((CPU.voltage_acum)/1000) * 0.9 < CPU.DC_BUS) && (CPU.voltage_acum != 0)){
 800205e:	4b15      	ldr	r3, [pc, #84]	@ (80020b4 <_Z12select_statev+0x2b4>)
 8002060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002062:	4a20      	ldr	r2, [pc, #128]	@ (80020e4 <_Z12select_statev+0x2e4>)
 8002064:	fb82 1203 	smull	r1, r2, r2, r3
 8002068:	1192      	asrs	r2, r2, #6
 800206a:	17db      	asrs	r3, r3, #31
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	ee07 3a90 	vmov	s15, r3
 8002072:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002076:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 80020a8 <_Z12select_statev+0x2a8>
 800207a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800207e:	4b0d      	ldr	r3, [pc, #52]	@ (80020b4 <_Z12select_statev+0x2b4>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002082:	ee07 3a90 	vmov	s15, r3
 8002086:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800208a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800208e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002092:	d400      	bmi.n	8002096 <_Z12select_statev+0x296>
			state = run; //If DC_BUS voltage is higher than 90% of battery voltage, precharge finish
		//}else if((flag_cpu == CPU_ERROR_COMMUNICATION)&&(flag_charger == 1)) state = error;
		 //else if(flag_current != Current_OK) state = error;
		}
		break;
 8002094:	e071      	b.n	800217a <_Z12select_statev+0x37a>
		if ((((CPU.voltage_acum)/1000) * 0.9 < CPU.DC_BUS) && (CPU.voltage_acum != 0)){
 8002096:	4b07      	ldr	r3, [pc, #28]	@ (80020b4 <_Z12select_statev+0x2b4>)
 8002098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209a:	2b00      	cmp	r3, #0
 800209c:	d06d      	beq.n	800217a <_Z12select_statev+0x37a>
			state = run; //If DC_BUS voltage is higher than 90% of battery voltage, precharge finish
 800209e:	4b10      	ldr	r3, [pc, #64]	@ (80020e0 <_Z12select_statev+0x2e0>)
 80020a0:	2203      	movs	r2, #3
 80020a2:	701a      	strb	r2, [r3, #0]
		break;
 80020a4:	e069      	b.n	800217a <_Z12select_statev+0x37a>
 80020a6:	bf00      	nop
 80020a8:	cccccccd 	.word	0xcccccccd
 80020ac:	3feccccc 	.word	0x3feccccc
 80020b0:	58021800 	.word	0x58021800
 80020b4:	24000c24 	.word	0x24000c24
 80020b8:	24000004 	.word	0x24000004
 80020bc:	24000c18 	.word	0x24000c18
 80020c0:	24000470 	.word	0x24000470
 80020c4:	24000ca8 	.word	0x24000ca8
 80020c8:	24000008 	.word	0x24000008
 80020cc:	24000000 	.word	0x24000000
 80020d0:	24000c20 	.word	0x24000c20
 80020d4:	24000c1c 	.word	0x24000c1c
 80020d8:	0800bbfc 	.word	0x0800bbfc
 80020dc:	24000c60 	.word	0x24000c60
 80020e0:	24000ca4 	.word	0x24000ca4
 80020e4:	10624dd3 	.word	0x10624dd3
	case run:
		state_air_n = 1;
 80020e8:	2301      	movs	r3, #1
 80020ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 1;
 80020ec:	2301      	movs	r3, #1
 80020ee:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 1;
 80020f0:	2301      	movs	r3, #1
 80020f2:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_POWER);
 80020f4:	2100      	movs	r1, #0
 80020f6:	483b      	ldr	r0, [pc, #236]	@ (80021e4 <_Z12select_statev+0x3e4>)
 80020f8:	f7fe ff58 	bl	8000fac <_ZN7CPU_MOD11updateStateEi>
		if ((flag_cpu == CPU_ERROR_COMMUNICATION) && (flag_charger == 1)){
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d106      	bne.n	8002110 <_Z12select_statev+0x310>
 8002102:	4b39      	ldr	r3, [pc, #228]	@ (80021e8 <_Z12select_statev+0x3e8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d102      	bne.n	8002110 <_Z12select_statev+0x310>
			//state = error; //If I disconnect the charger, error
			print((char*)"CPU");
 800210a:	4838      	ldr	r0, [pc, #224]	@ (80021ec <_Z12select_statev+0x3ec>)
 800210c:	f7ff fe08 	bl	8001d20 <print>
		}
		if (flag_current != Current_OK){
			//state = error; //If current is too high, error
		}
		if(HAL_GPIO_ReadPin(DIGITAL1_GPIO_Port, DIGITAL1_Pin) == GPIO_PIN_RESET){ //SDC IO
 8002110:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002114:	4836      	ldr	r0, [pc, #216]	@ (80021f0 <_Z12select_statev+0x3f0>)
 8002116:	f004 f913 	bl	8006340 <HAL_GPIO_ReadPin>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
			//state = error;
			//print((char*)"DIGITAL");
		}
		break;
 800211e:	e02f      	b.n	8002180 <_Z12select_statev+0x380>

	case charge: {
		state_air_n = 1;
 8002120:	2301      	movs	r3, #1
 8002122:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 1;
 8002124:	2301      	movs	r3, #1
 8002126:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 1;
 8002128:	2301      	movs	r3, #1
 800212a:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_CHARGING);
 800212c:	2104      	movs	r1, #4
 800212e:	482d      	ldr	r0, [pc, #180]	@ (80021e4 <_Z12select_statev+0x3e4>)
 8002130:	f7fe ff3c 	bl	8000fac <_ZN7CPU_MOD11updateStateEi>

		print((char*)"CHARGE");
 8002134:	482f      	ldr	r0, [pc, #188]	@ (80021f4 <_Z12select_statev+0x3f4>)
 8002136:	f7ff fdf3 	bl	8001d20 <print>

		int32_t current_act = current.Current / 1000; //Actual current in mA to check if it's charging
 800213a:	4b2f      	ldr	r3, [pc, #188]	@ (80021f8 <_Z12select_statev+0x3f8>)
 800213c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800213e:	4a2f      	ldr	r2, [pc, #188]	@ (80021fc <_Z12select_statev+0x3fc>)
 8002140:	fb82 1203 	smull	r1, r2, r2, r3
 8002144:	1192      	asrs	r2, r2, #6
 8002146:	17db      	asrs	r3, r3, #31
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	607b      	str	r3, [r7, #4]
				state = error; //Charge has been interrupted
		} else {
			charge_current_error_counter = 0;
		}*/

		if (gpio_charge == GPIO_PIN_RESET){
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d115      	bne.n	800217e <_Z12select_statev+0x37e>
			state = start;
 8002152:	4b2b      	ldr	r3, [pc, #172]	@ (8002200 <_Z12select_statev+0x400>)
 8002154:	2200      	movs	r2, #0
 8002156:	701a      	strb	r2, [r3, #0]
			charge_current_error_counter = 0;
 8002158:	4b2a      	ldr	r3, [pc, #168]	@ (8002204 <_Z12select_statev+0x404>)
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
		}


		break;
 800215e:	e00e      	b.n	800217e <_Z12select_statev+0x37e>
	}

	case error:
		state_air_n = 0; //All relés closed
 8002160:	2300      	movs	r3, #0
 8002162:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_ERROR);
 800216c:	2103      	movs	r1, #3
 800216e:	481d      	ldr	r0, [pc, #116]	@ (80021e4 <_Z12select_statev+0x3e4>)
 8002170:	f7fe ff1c 	bl	8000fac <_ZN7CPU_MOD11updateStateEi>
		break;
 8002174:	e004      	b.n	8002180 <_Z12select_statev+0x380>
		break;
 8002176:	bf00      	nop
 8002178:	e002      	b.n	8002180 <_Z12select_statev+0x380>
		break;
 800217a:	bf00      	nop
 800217c:	e000      	b.n	8002180 <_Z12select_statev+0x380>
		break;
 800217e:	bf00      	nop
	 sprintf(buffer, " - STATE:     %i\n", state);
	 print(buffer);
	 sprintf(buffer, "***********************\n");
	 print(buffer);*/
	HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin,
			flag_ams_ok ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002180:	4b21      	ldr	r3, [pc, #132]	@ (8002208 <_Z12select_statev+0x408>)
 8002182:	681b      	ldr	r3, [r3, #0]
	HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin,
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <_Z12select_statev+0x38c>
 8002188:	2301      	movs	r3, #1
 800218a:	e000      	b.n	800218e <_Z12select_statev+0x38e>
 800218c:	2300      	movs	r3, #0
 800218e:	461a      	mov	r2, r3
 8002190:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002194:	481d      	ldr	r0, [pc, #116]	@ (800220c <_Z12select_statev+0x40c>)
 8002196:	f004 f8eb 	bl	8006370 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_AIR_N_GPIO_Port, RELAY_AIR_N_Pin,
 800219a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <_Z12select_statev+0x3a4>
 80021a0:	2301      	movs	r3, #1
 80021a2:	e000      	b.n	80021a6 <_Z12select_statev+0x3a6>
 80021a4:	2300      	movs	r3, #0
 80021a6:	461a      	mov	r2, r3
 80021a8:	2108      	movs	r1, #8
 80021aa:	4819      	ldr	r0, [pc, #100]	@ (8002210 <_Z12select_statev+0x410>)
 80021ac:	f004 f8e0 	bl	8006370 <HAL_GPIO_WritePin>
			state_air_n ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_AIR_P_GPIO_Port, RELAY_AIR_P_Pin,
 80021b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <_Z12select_statev+0x3ba>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <_Z12select_statev+0x3bc>
 80021ba:	2300      	movs	r3, #0
 80021bc:	461a      	mov	r2, r3
 80021be:	2110      	movs	r1, #16
 80021c0:	4813      	ldr	r0, [pc, #76]	@ (8002210 <_Z12select_statev+0x410>)
 80021c2:	f004 f8d5 	bl	8006370 <HAL_GPIO_WritePin>
			state_air_p ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_PRECHARGE_GPIO_Port, RELAY_PRECHARGE_Pin,
 80021c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <_Z12select_statev+0x3d0>
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <_Z12select_statev+0x3d2>
 80021d0:	2300      	movs	r3, #0
 80021d2:	461a      	mov	r2, r3
 80021d4:	2120      	movs	r1, #32
 80021d6:	480e      	ldr	r0, [pc, #56]	@ (8002210 <_Z12select_statev+0x410>)
 80021d8:	f004 f8ca 	bl	8006370 <HAL_GPIO_WritePin>





}
 80021dc:	bf00      	nop
 80021de:	3730      	adds	r7, #48	@ 0x30
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	24000c24 	.word	0x24000c24
 80021e8:	24000c58 	.word	0x24000c58
 80021ec:	0800bc1c 	.word	0x0800bc1c
 80021f0:	58021000 	.word	0x58021000
 80021f4:	0800bc20 	.word	0x0800bc20
 80021f8:	24000c60 	.word	0x24000c60
 80021fc:	10624dd3 	.word	0x10624dd3
 8002200:	24000ca4 	.word	0x24000ca4
 8002204:	24000c5c 	.word	0x24000c5c
 8002208:	24000008 	.word	0x24000008
 800220c:	58021400 	.word	0x58021400
 8002210:	58020c00 	.word	0x58020c00

08002214 <_Z11parse_state6CANMsg>:

/*********************************************************************************************************
 ** Function name:           parse_state
 ** Descriptions:            Function for analysing the data from the CAN
 *********************************************************************************************************/
void parse_state(CANMsg data) {
 8002214:	b084      	sub	sp, #16
 8002216:	b580      	push	{r7, lr}
 8002218:	b084      	sub	sp, #16
 800221a:	af00      	add	r7, sp, #0
 800221c:	f107 0c18 	add.w	ip, r7, #24
 8002220:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t time = HAL_GetTick();
 8002224:	f000 fc5c 	bl	8002ae0 <HAL_GetTick>
 8002228:	6038      	str	r0, [r7, #0]
	bool flag_bms = false;
 800222a:	2300      	movs	r3, #0
 800222c:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; i < BMS_N; i++) {
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	e017      	b.n	8002264 <_Z11parse_state6CANMsg+0x50>
		flag_bms = BMS[i].parse(data.id, &data.buf[0], time); //Checking if the message received is for  BMS
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 800223a:	fb02 f303 	mul.w	r3, r2, r3
 800223e:	4a25      	ldr	r2, [pc, #148]	@ (80022d4 <_Z11parse_state6CANMsg+0xc0>)
 8002240:	1898      	adds	r0, r3, r2
 8002242:	69b9      	ldr	r1, [r7, #24]
 8002244:	f107 021d 	add.w	r2, r7, #29
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	f7fe fbf1 	bl	8000a30 <_ZN7BMS_MOD5parseEmPhm>
 800224e:	4603      	mov	r3, r0
 8002250:	73fb      	strb	r3, [r7, #15]
		if (flag_bms)
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <_Z11parse_state6CANMsg+0x4a>
			i = BMS_N;
 8002258:	4b1f      	ldr	r3, [pc, #124]	@ (80022d8 <_Z11parse_state6CANMsg+0xc4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < BMS_N; i++) {
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	3301      	adds	r3, #1
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	4b1c      	ldr	r3, [pc, #112]	@ (80022d8 <_Z11parse_state6CANMsg+0xc4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	429a      	cmp	r2, r3
 800226c:	dbe2      	blt.n	8002234 <_Z11parse_state6CANMsg+0x20>
	}

	if (!flag_bms) {
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	f083 0301 	eor.w	r3, r3, #1
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d025      	beq.n	80022c6 <_Z11parse_state6CANMsg+0xb2>
		if (CPU.parse(data.id, &data.buf[0], time))
 800227a:	69b9      	ldr	r1, [r7, #24]
 800227c:	f107 021d 	add.w	r2, r7, #29
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	4816      	ldr	r0, [pc, #88]	@ (80022dc <_Z11parse_state6CANMsg+0xc8>)
 8002284:	f7fe fe1c 	bl	8000ec0 <_ZN7CPU_MOD5parseEmPhm>
			;                       //Cheking if message is for CPU
		if (data.id == 419385575) //If message from this direction received, it is because the charger is connected and the accu is for charging
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	4a15      	ldr	r2, [pc, #84]	@ (80022e0 <_Z11parse_state6CANMsg+0xcc>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d11a      	bne.n	80022c6 <_Z11parse_state6CANMsg+0xb2>
				{
			for (int i = 0; i < BMS_N; i++) {
 8002290:	2300      	movs	r3, #0
 8002292:	607b      	str	r3, [r7, #4]
 8002294:	e00c      	b.n	80022b0 <_Z11parse_state6CANMsg+0x9c>
				BMS[i].flag_charger = 1;
 8002296:	4a0f      	ldr	r2, [pc, #60]	@ (80022d4 <_Z11parse_state6CANMsg+0xc0>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 800229e:	fb01 f303 	mul.w	r3, r1, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	3398      	adds	r3, #152	@ 0x98
 80022a6:	2201      	movs	r2, #1
 80022a8:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < BMS_N; i++) {
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3301      	adds	r3, #1
 80022ae:	607b      	str	r3, [r7, #4]
 80022b0:	4b09      	ldr	r3, [pc, #36]	@ (80022d8 <_Z11parse_state6CANMsg+0xc4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	dbed      	blt.n	8002296 <_Z11parse_state6CANMsg+0x82>
			}

			current.flag_charger = 1;
 80022ba:	4b0a      	ldr	r3, [pc, #40]	@ (80022e4 <_Z11parse_state6CANMsg+0xd0>)
 80022bc:	2201      	movs	r2, #1
 80022be:	639a      	str	r2, [r3, #56]	@ 0x38
			flag_charger = 1;
 80022c0:	4b09      	ldr	r3, [pc, #36]	@ (80022e8 <_Z11parse_state6CANMsg+0xd4>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]
		} else {
			// Serial.print("ID: ");
			// Serial.println(data.id);
		}
	}
}
 80022c6:	bf00      	nop
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022d0:	b004      	add	sp, #16
 80022d2:	4770      	bx	lr
 80022d4:	24000470 	.word	0x24000470
 80022d8:	24000000 	.word	0x24000000
 80022dc:	24000c24 	.word	0x24000c24
 80022e0:	18ff50e7 	.word	0x18ff50e7
 80022e4:	24000c60 	.word	0x24000c60
 80022e8:	24000c58 	.word	0x24000c58

080022ec <_Z41__static_initialization_and_destruction_0v>:
 80022ec:	b590      	push	{r4, r7, lr}
 80022ee:	b087      	sub	sp, #28
 80022f0:	af06      	add	r7, sp, #24
		};
 80022f2:	4c40      	ldr	r4, [pc, #256]	@ (80023f4 <_Z41__static_initialization_and_destruction_0v+0x108>)
 80022f4:	2337      	movs	r3, #55	@ 0x37
 80022f6:	9304      	str	r3, [sp, #16]
 80022f8:	2300      	movs	r3, #0
 80022fa:	9303      	str	r3, [sp, #12]
 80022fc:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002300:	9302      	str	r3, [sp, #8]
 8002302:	2313      	movs	r3, #19
 8002304:	9301      	str	r3, [sp, #4]
 8002306:	233c      	movs	r3, #60	@ 0x3c
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 800230e:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002312:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8002316:	4620      	mov	r0, r4
 8002318:	f7fe f9e8 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 800231c:	f504 74c4 	add.w	r4, r4, #392	@ 0x188
 8002320:	239b      	movs	r3, #155	@ 0x9b
 8002322:	9304      	str	r3, [sp, #16]
 8002324:	230a      	movs	r3, #10
 8002326:	9303      	str	r3, [sp, #12]
 8002328:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800232c:	9302      	str	r3, [sp, #8]
 800232e:	2313      	movs	r3, #19
 8002330:	9301      	str	r3, [sp, #4]
 8002332:	233c      	movs	r3, #60	@ 0x3c
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 800233a:	f241 0268 	movw	r2, #4200	@ 0x1068
 800233e:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8002342:	4620      	mov	r0, r4
 8002344:	f7fe f9d2 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 8002348:	f504 74c4 	add.w	r4, r4, #392	@ 0x188
 800234c:	23ff      	movs	r3, #255	@ 0xff
 800234e:	9304      	str	r3, [sp, #16]
 8002350:	2314      	movs	r3, #20
 8002352:	9303      	str	r3, [sp, #12]
 8002354:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002358:	9302      	str	r3, [sp, #8]
 800235a:	2313      	movs	r3, #19
 800235c:	9301      	str	r3, [sp, #4]
 800235e:	233c      	movs	r3, #60	@ 0x3c
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8002366:	f241 0268 	movw	r2, #4200	@ 0x1068
 800236a:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800236e:	4620      	mov	r0, r4
 8002370:	f7fe f9bc 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 8002374:	f504 74c4 	add.w	r4, r4, #392	@ 0x188
 8002378:	f240 1363 	movw	r3, #355	@ 0x163
 800237c:	9304      	str	r3, [sp, #16]
 800237e:	231e      	movs	r3, #30
 8002380:	9303      	str	r3, [sp, #12]
 8002382:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002386:	9302      	str	r3, [sp, #8]
 8002388:	2313      	movs	r3, #19
 800238a:	9301      	str	r3, [sp, #4]
 800238c:	233c      	movs	r3, #60	@ 0x3c
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8002394:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002398:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 800239c:	4620      	mov	r0, r4
 800239e:	f7fe f9a5 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 80023a2:	f504 70c4 	add.w	r0, r4, #392	@ 0x188
 80023a6:	f240 13c7 	movw	r3, #455	@ 0x1c7
 80023aa:	9304      	str	r3, [sp, #16]
 80023ac:	2328      	movs	r3, #40	@ 0x28
 80023ae:	9303      	str	r3, [sp, #12]
 80023b0:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80023b4:	9302      	str	r3, [sp, #8]
 80023b6:	2313      	movs	r3, #19
 80023b8:	9301      	str	r3, [sp, #4]
 80023ba:	233c      	movs	r3, #60	@ 0x3c
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80023c2:	f241 0268 	movw	r2, #4200	@ 0x1068
 80023c6:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 80023ca:	f7fe f98f 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
CPU_MOD CPU(CPU_ID_send, CPU_ID_recv, 500); //Same with CPU, rest of vehicle
 80023ce:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80023d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023d6:	2120      	movs	r1, #32
 80023d8:	4807      	ldr	r0, [pc, #28]	@ (80023f8 <_Z41__static_initialization_and_destruction_0v+0x10c>)
 80023da:	f7fe fd1f 	bl	8000e1c <_ZN7CPU_MODC1Emmi>
Current_MOD current(Current_ID, Current_max); //Class for current measurement
 80023de:	22c8      	movs	r2, #200	@ 0xc8
 80023e0:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80023e4:	4805      	ldr	r0, [pc, #20]	@ (80023fc <_Z41__static_initialization_and_destruction_0v+0x110>)
 80023e6:	f7fe fdf3 	bl	8000fd0 <_ZN11Current_MODC1Emi>
}
 80023ea:	bf00      	nop
 80023ec:	3704      	adds	r7, #4
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd90      	pop	{r4, r7, pc}
 80023f2:	bf00      	nop
 80023f4:	24000470 	.word	0x24000470
 80023f8:	24000c24 	.word	0x24000c24
 80023fc:	24000c60 	.word	0x24000c60

08002400 <_GLOBAL__sub_I_BMS>:
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
 8002404:	f7ff ff72 	bl	80022ec <_Z41__static_initialization_and_destruction_0v>
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002412:	4b0a      	ldr	r3, [pc, #40]	@ (800243c <HAL_MspInit+0x30>)
 8002414:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002418:	4a08      	ldr	r2, [pc, #32]	@ (800243c <HAL_MspInit+0x30>)
 800241a:	f043 0302 	orr.w	r3, r3, #2
 800241e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002422:	4b06      	ldr	r3, [pc, #24]	@ (800243c <HAL_MspInit+0x30>)
 8002424:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	607b      	str	r3, [r7, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	58024400 	.word	0x58024400

08002440 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08c      	sub	sp, #48	@ 0x30
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	f107 031c 	add.w	r3, r7, #28
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a31      	ldr	r2, [pc, #196]	@ (8002524 <HAL_ADC_MspInit+0xe4>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d12b      	bne.n	80024ba <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002462:	4b31      	ldr	r3, [pc, #196]	@ (8002528 <HAL_ADC_MspInit+0xe8>)
 8002464:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002468:	4a2f      	ldr	r2, [pc, #188]	@ (8002528 <HAL_ADC_MspInit+0xe8>)
 800246a:	f043 0320 	orr.w	r3, r3, #32
 800246e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002472:	4b2d      	ldr	r3, [pc, #180]	@ (8002528 <HAL_ADC_MspInit+0xe8>)
 8002474:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002478:	f003 0320 	and.w	r3, r3, #32
 800247c:	61bb      	str	r3, [r7, #24]
 800247e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002480:	4b29      	ldr	r3, [pc, #164]	@ (8002528 <HAL_ADC_MspInit+0xe8>)
 8002482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002486:	4a28      	ldr	r2, [pc, #160]	@ (8002528 <HAL_ADC_MspInit+0xe8>)
 8002488:	f043 0320 	orr.w	r3, r3, #32
 800248c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002490:	4b25      	ldr	r3, [pc, #148]	@ (8002528 <HAL_ADC_MspInit+0xe8>)
 8002492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002496:	f003 0320 	and.w	r3, r3, #32
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800249e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80024a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024a4:	2303      	movs	r3, #3
 80024a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024ac:	f107 031c 	add.w	r3, r7, #28
 80024b0:	4619      	mov	r1, r3
 80024b2:	481e      	ldr	r0, [pc, #120]	@ (800252c <HAL_ADC_MspInit+0xec>)
 80024b4:	f003 fd9c 	bl	8005ff0 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 80024b8:	e02f      	b.n	800251a <HAL_ADC_MspInit+0xda>
  else if(hadc->Instance==ADC3)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a1c      	ldr	r2, [pc, #112]	@ (8002530 <HAL_ADC_MspInit+0xf0>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d12a      	bne.n	800251a <HAL_ADC_MspInit+0xda>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80024c4:	4b18      	ldr	r3, [pc, #96]	@ (8002528 <HAL_ADC_MspInit+0xe8>)
 80024c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ca:	4a17      	ldr	r2, [pc, #92]	@ (8002528 <HAL_ADC_MspInit+0xe8>)
 80024cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024d4:	4b14      	ldr	r3, [pc, #80]	@ (8002528 <HAL_ADC_MspInit+0xe8>)
 80024d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80024e2:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <HAL_ADC_MspInit+0xe8>)
 80024e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002528 <HAL_ADC_MspInit+0xe8>)
 80024ea:	f043 0320 	orr.w	r3, r3, #32
 80024ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002528 <HAL_ADC_MspInit+0xe8>)
 80024f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024f8:	f003 0320 	and.w	r3, r3, #32
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002500:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002506:	2303      	movs	r3, #3
 8002508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800250e:	f107 031c 	add.w	r3, r7, #28
 8002512:	4619      	mov	r1, r3
 8002514:	4805      	ldr	r0, [pc, #20]	@ (800252c <HAL_ADC_MspInit+0xec>)
 8002516:	f003 fd6b 	bl	8005ff0 <HAL_GPIO_Init>
}
 800251a:	bf00      	nop
 800251c:	3730      	adds	r7, #48	@ 0x30
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40022000 	.word	0x40022000
 8002528:	58024400 	.word	0x58024400
 800252c:	58021400 	.word	0x58021400
 8002530:	58026000 	.word	0x58026000

08002534 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b0ba      	sub	sp, #232	@ 0xe8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800254c:	f107 0318 	add.w	r3, r7, #24
 8002550:	22b8      	movs	r2, #184	@ 0xb8
 8002552:	2100      	movs	r1, #0
 8002554:	4618      	mov	r0, r3
 8002556:	f008 fd51 	bl	800affc <memset>
  if(hfdcan->Instance==FDCAN1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a5a      	ldr	r2, [pc, #360]	@ (80026c8 <HAL_FDCAN_MspInit+0x194>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d157      	bne.n	8002614 <HAL_FDCAN_MspInit+0xe0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002564:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002570:	2300      	movs	r3, #0
 8002572:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002576:	f107 0318 	add.w	r3, r7, #24
 800257a:	4618      	mov	r0, r3
 800257c:	f004 feb2 	bl	80072e4 <HAL_RCCEx_PeriphCLKConfig>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002586:	f7ff fc33 	bl	8001df0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800258a:	4b50      	ldr	r3, [pc, #320]	@ (80026cc <HAL_FDCAN_MspInit+0x198>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	3301      	adds	r3, #1
 8002590:	4a4e      	ldr	r2, [pc, #312]	@ (80026cc <HAL_FDCAN_MspInit+0x198>)
 8002592:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002594:	4b4d      	ldr	r3, [pc, #308]	@ (80026cc <HAL_FDCAN_MspInit+0x198>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d10e      	bne.n	80025ba <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800259c:	4b4c      	ldr	r3, [pc, #304]	@ (80026d0 <HAL_FDCAN_MspInit+0x19c>)
 800259e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80025a2:	4a4b      	ldr	r2, [pc, #300]	@ (80026d0 <HAL_FDCAN_MspInit+0x19c>)
 80025a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025a8:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80025ac:	4b48      	ldr	r3, [pc, #288]	@ (80026d0 <HAL_FDCAN_MspInit+0x19c>)
 80025ae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80025b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ba:	4b45      	ldr	r3, [pc, #276]	@ (80026d0 <HAL_FDCAN_MspInit+0x19c>)
 80025bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025c0:	4a43      	ldr	r2, [pc, #268]	@ (80026d0 <HAL_FDCAN_MspInit+0x19c>)
 80025c2:	f043 0308 	orr.w	r3, r3, #8
 80025c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025ca:	4b41      	ldr	r3, [pc, #260]	@ (80026d0 <HAL_FDCAN_MspInit+0x19c>)
 80025cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025d8:	2303      	movs	r3, #3
 80025da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025de:	2302      	movs	r3, #2
 80025e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ea:	2300      	movs	r3, #0
 80025ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80025f0:	2309      	movs	r3, #9
 80025f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025f6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80025fa:	4619      	mov	r1, r3
 80025fc:	4835      	ldr	r0, [pc, #212]	@ (80026d4 <HAL_FDCAN_MspInit+0x1a0>)
 80025fe:	f003 fcf7 	bl	8005ff0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002602:	2200      	movs	r2, #0
 8002604:	2100      	movs	r1, #0
 8002606:	2013      	movs	r0, #19
 8002608:	f002 faef 	bl	8004bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800260c:	2013      	movs	r0, #19
 800260e:	f002 fb06 	bl	8004c1e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN FDCAN2_MspInit 1 */

    /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002612:	e054      	b.n	80026be <HAL_FDCAN_MspInit+0x18a>
  else if(hfdcan->Instance==FDCAN2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a2f      	ldr	r2, [pc, #188]	@ (80026d8 <HAL_FDCAN_MspInit+0x1a4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d14f      	bne.n	80026be <HAL_FDCAN_MspInit+0x18a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800261e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800262a:	2300      	movs	r3, #0
 800262c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002630:	f107 0318 	add.w	r3, r7, #24
 8002634:	4618      	mov	r0, r3
 8002636:	f004 fe55 	bl	80072e4 <HAL_RCCEx_PeriphCLKConfig>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 8002640:	f7ff fbd6 	bl	8001df0 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002644:	4b21      	ldr	r3, [pc, #132]	@ (80026cc <HAL_FDCAN_MspInit+0x198>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	3301      	adds	r3, #1
 800264a:	4a20      	ldr	r2, [pc, #128]	@ (80026cc <HAL_FDCAN_MspInit+0x198>)
 800264c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800264e:	4b1f      	ldr	r3, [pc, #124]	@ (80026cc <HAL_FDCAN_MspInit+0x198>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d10e      	bne.n	8002674 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002656:	4b1e      	ldr	r3, [pc, #120]	@ (80026d0 <HAL_FDCAN_MspInit+0x19c>)
 8002658:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800265c:	4a1c      	ldr	r2, [pc, #112]	@ (80026d0 <HAL_FDCAN_MspInit+0x19c>)
 800265e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002662:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002666:	4b1a      	ldr	r3, [pc, #104]	@ (80026d0 <HAL_FDCAN_MspInit+0x19c>)
 8002668:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800266c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002674:	4b16      	ldr	r3, [pc, #88]	@ (80026d0 <HAL_FDCAN_MspInit+0x19c>)
 8002676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800267a:	4a15      	ldr	r2, [pc, #84]	@ (80026d0 <HAL_FDCAN_MspInit+0x19c>)
 800267c:	f043 0302 	orr.w	r3, r3, #2
 8002680:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002684:	4b12      	ldr	r3, [pc, #72]	@ (80026d0 <HAL_FDCAN_MspInit+0x19c>)
 8002686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002692:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002696:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269a:	2302      	movs	r3, #2
 800269c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a6:	2300      	movs	r3, #0
 80026a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80026ac:	2309      	movs	r3, #9
 80026ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80026b6:	4619      	mov	r1, r3
 80026b8:	4808      	ldr	r0, [pc, #32]	@ (80026dc <HAL_FDCAN_MspInit+0x1a8>)
 80026ba:	f003 fc99 	bl	8005ff0 <HAL_GPIO_Init>
}
 80026be:	bf00      	nop
 80026c0:	37e8      	adds	r7, #232	@ 0xe8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	4000a000 	.word	0x4000a000
 80026cc:	24000cf8 	.word	0x24000cf8
 80026d0:	58024400 	.word	0x58024400
 80026d4:	58020c00 	.word	0x58020c00
 80026d8:	4000a400 	.word	0x4000a400
 80026dc:	58020400 	.word	0x58020400

080026e0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b0b8      	sub	sp, #224	@ 0xe0
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	605a      	str	r2, [r3, #4]
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	60da      	str	r2, [r3, #12]
 80026f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026f8:	f107 0310 	add.w	r3, r7, #16
 80026fc:	22b8      	movs	r2, #184	@ 0xb8
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f008 fc7b 	bl	800affc <memset>
  if(huart->Instance==USART2)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a26      	ldr	r2, [pc, #152]	@ (80027a4 <HAL_UART_MspInit+0xc4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d145      	bne.n	800279c <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002710:	f04f 0202 	mov.w	r2, #2
 8002714:	f04f 0300 	mov.w	r3, #0
 8002718:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800271c:	2300      	movs	r3, #0
 800271e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002722:	f107 0310 	add.w	r3, r7, #16
 8002726:	4618      	mov	r0, r3
 8002728:	f004 fddc 	bl	80072e4 <HAL_RCCEx_PeriphCLKConfig>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002732:	f7ff fb5d 	bl	8001df0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002736:	4b1c      	ldr	r3, [pc, #112]	@ (80027a8 <HAL_UART_MspInit+0xc8>)
 8002738:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800273c:	4a1a      	ldr	r2, [pc, #104]	@ (80027a8 <HAL_UART_MspInit+0xc8>)
 800273e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002742:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002746:	4b18      	ldr	r3, [pc, #96]	@ (80027a8 <HAL_UART_MspInit+0xc8>)
 8002748:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800274c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002754:	4b14      	ldr	r3, [pc, #80]	@ (80027a8 <HAL_UART_MspInit+0xc8>)
 8002756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800275a:	4a13      	ldr	r2, [pc, #76]	@ (80027a8 <HAL_UART_MspInit+0xc8>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002764:	4b10      	ldr	r3, [pc, #64]	@ (80027a8 <HAL_UART_MspInit+0xc8>)
 8002766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	60bb      	str	r3, [r7, #8]
 8002770:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002772:	230c      	movs	r3, #12
 8002774:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002778:	2302      	movs	r3, #2
 800277a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002784:	2300      	movs	r3, #0
 8002786:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800278a:	2307      	movs	r3, #7
 800278c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002790:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002794:	4619      	mov	r1, r3
 8002796:	4805      	ldr	r0, [pc, #20]	@ (80027ac <HAL_UART_MspInit+0xcc>)
 8002798:	f003 fc2a 	bl	8005ff0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800279c:	bf00      	nop
 800279e:	37e0      	adds	r7, #224	@ 0xe0
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40004400 	.word	0x40004400
 80027a8:	58024400 	.word	0x58024400
 80027ac:	58020000 	.word	0x58020000

080027b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027b4:	bf00      	nop
 80027b6:	e7fd      	b.n	80027b4 <NMI_Handler+0x4>

080027b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027bc:	bf00      	nop
 80027be:	e7fd      	b.n	80027bc <HardFault_Handler+0x4>

080027c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027c4:	bf00      	nop
 80027c6:	e7fd      	b.n	80027c4 <MemManage_Handler+0x4>

080027c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027cc:	bf00      	nop
 80027ce:	e7fd      	b.n	80027cc <BusFault_Handler+0x4>

080027d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027d4:	bf00      	nop
 80027d6:	e7fd      	b.n	80027d4 <UsageFault_Handler+0x4>

080027d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027e6:	b480      	push	{r7}
 80027e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002806:	f000 f957 	bl	8002ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002814:	4802      	ldr	r0, [pc, #8]	@ (8002820 <FDCAN1_IT0_IRQHandler+0x10>)
 8002816:	f002 fedd 	bl	80055d4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	24000168 	.word	0x24000168

08002824 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800282c:	4a14      	ldr	r2, [pc, #80]	@ (8002880 <_sbrk+0x5c>)
 800282e:	4b15      	ldr	r3, [pc, #84]	@ (8002884 <_sbrk+0x60>)
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002838:	4b13      	ldr	r3, [pc, #76]	@ (8002888 <_sbrk+0x64>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d102      	bne.n	8002846 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002840:	4b11      	ldr	r3, [pc, #68]	@ (8002888 <_sbrk+0x64>)
 8002842:	4a12      	ldr	r2, [pc, #72]	@ (800288c <_sbrk+0x68>)
 8002844:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002846:	4b10      	ldr	r3, [pc, #64]	@ (8002888 <_sbrk+0x64>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4413      	add	r3, r2
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	429a      	cmp	r2, r3
 8002852:	d207      	bcs.n	8002864 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002854:	f008 fbda 	bl	800b00c <__errno>
 8002858:	4603      	mov	r3, r0
 800285a:	220c      	movs	r2, #12
 800285c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800285e:	f04f 33ff 	mov.w	r3, #4294967295
 8002862:	e009      	b.n	8002878 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002864:	4b08      	ldr	r3, [pc, #32]	@ (8002888 <_sbrk+0x64>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800286a:	4b07      	ldr	r3, [pc, #28]	@ (8002888 <_sbrk+0x64>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4413      	add	r3, r2
 8002872:	4a05      	ldr	r2, [pc, #20]	@ (8002888 <_sbrk+0x64>)
 8002874:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002876:	68fb      	ldr	r3, [r7, #12]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	24050000 	.word	0x24050000
 8002884:	00000400 	.word	0x00000400
 8002888:	24000cfc 	.word	0x24000cfc
 800288c:	24000e50 	.word	0x24000e50

08002890 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002894:	4b32      	ldr	r3, [pc, #200]	@ (8002960 <SystemInit+0xd0>)
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800289a:	4a31      	ldr	r2, [pc, #196]	@ (8002960 <SystemInit+0xd0>)
 800289c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80028a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002964 <SystemInit+0xd4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 030f 	and.w	r3, r3, #15
 80028ac:	2b06      	cmp	r3, #6
 80028ae:	d807      	bhi.n	80028c0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80028b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002964 <SystemInit+0xd4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f023 030f 	bic.w	r3, r3, #15
 80028b8:	4a2a      	ldr	r2, [pc, #168]	@ (8002964 <SystemInit+0xd4>)
 80028ba:	f043 0307 	orr.w	r3, r3, #7
 80028be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80028c0:	4b29      	ldr	r3, [pc, #164]	@ (8002968 <SystemInit+0xd8>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a28      	ldr	r2, [pc, #160]	@ (8002968 <SystemInit+0xd8>)
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80028cc:	4b26      	ldr	r3, [pc, #152]	@ (8002968 <SystemInit+0xd8>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80028d2:	4b25      	ldr	r3, [pc, #148]	@ (8002968 <SystemInit+0xd8>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	4924      	ldr	r1, [pc, #144]	@ (8002968 <SystemInit+0xd8>)
 80028d8:	4b24      	ldr	r3, [pc, #144]	@ (800296c <SystemInit+0xdc>)
 80028da:	4013      	ands	r3, r2
 80028dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80028de:	4b21      	ldr	r3, [pc, #132]	@ (8002964 <SystemInit+0xd4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d007      	beq.n	80028fa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80028ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002964 <SystemInit+0xd4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f023 030f 	bic.w	r3, r3, #15
 80028f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002964 <SystemInit+0xd4>)
 80028f4:	f043 0307 	orr.w	r3, r3, #7
 80028f8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80028fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002968 <SystemInit+0xd8>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002900:	4b19      	ldr	r3, [pc, #100]	@ (8002968 <SystemInit+0xd8>)
 8002902:	2200      	movs	r2, #0
 8002904:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002906:	4b18      	ldr	r3, [pc, #96]	@ (8002968 <SystemInit+0xd8>)
 8002908:	2200      	movs	r2, #0
 800290a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800290c:	4b16      	ldr	r3, [pc, #88]	@ (8002968 <SystemInit+0xd8>)
 800290e:	4a18      	ldr	r2, [pc, #96]	@ (8002970 <SystemInit+0xe0>)
 8002910:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002912:	4b15      	ldr	r3, [pc, #84]	@ (8002968 <SystemInit+0xd8>)
 8002914:	4a17      	ldr	r2, [pc, #92]	@ (8002974 <SystemInit+0xe4>)
 8002916:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002918:	4b13      	ldr	r3, [pc, #76]	@ (8002968 <SystemInit+0xd8>)
 800291a:	4a17      	ldr	r2, [pc, #92]	@ (8002978 <SystemInit+0xe8>)
 800291c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800291e:	4b12      	ldr	r3, [pc, #72]	@ (8002968 <SystemInit+0xd8>)
 8002920:	2200      	movs	r2, #0
 8002922:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002924:	4b10      	ldr	r3, [pc, #64]	@ (8002968 <SystemInit+0xd8>)
 8002926:	4a14      	ldr	r2, [pc, #80]	@ (8002978 <SystemInit+0xe8>)
 8002928:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800292a:	4b0f      	ldr	r3, [pc, #60]	@ (8002968 <SystemInit+0xd8>)
 800292c:	2200      	movs	r2, #0
 800292e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002930:	4b0d      	ldr	r3, [pc, #52]	@ (8002968 <SystemInit+0xd8>)
 8002932:	4a11      	ldr	r2, [pc, #68]	@ (8002978 <SystemInit+0xe8>)
 8002934:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002936:	4b0c      	ldr	r3, [pc, #48]	@ (8002968 <SystemInit+0xd8>)
 8002938:	2200      	movs	r2, #0
 800293a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800293c:	4b0a      	ldr	r3, [pc, #40]	@ (8002968 <SystemInit+0xd8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a09      	ldr	r2, [pc, #36]	@ (8002968 <SystemInit+0xd8>)
 8002942:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002946:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002948:	4b07      	ldr	r3, [pc, #28]	@ (8002968 <SystemInit+0xd8>)
 800294a:	2200      	movs	r2, #0
 800294c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800294e:	4b0b      	ldr	r3, [pc, #44]	@ (800297c <SystemInit+0xec>)
 8002950:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002954:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002956:	bf00      	nop
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000ed00 	.word	0xe000ed00
 8002964:	52002000 	.word	0x52002000
 8002968:	58024400 	.word	0x58024400
 800296c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002970:	02020200 	.word	0x02020200
 8002974:	01ff0000 	.word	0x01ff0000
 8002978:	01010280 	.word	0x01010280
 800297c:	52004000 	.word	0x52004000

08002980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002980:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002984:	f7ff ff84 	bl	8002890 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002988:	480c      	ldr	r0, [pc, #48]	@ (80029bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800298a:	490d      	ldr	r1, [pc, #52]	@ (80029c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800298c:	4a0d      	ldr	r2, [pc, #52]	@ (80029c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800298e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002990:	e002      	b.n	8002998 <LoopCopyDataInit>

08002992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002996:	3304      	adds	r3, #4

08002998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800299a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800299c:	d3f9      	bcc.n	8002992 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800299e:	4a0a      	ldr	r2, [pc, #40]	@ (80029c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029a0:	4c0a      	ldr	r4, [pc, #40]	@ (80029cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80029a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029a4:	e001      	b.n	80029aa <LoopFillZerobss>

080029a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029a6:	6013      	str	r3, [r2, #0]
   adds r2, r2, #4
 80029a8:	3204      	adds	r2, #4

080029aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029ac:	d3fb      	bcc.n	80029a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029ae:	f008 fb33 	bl	800b018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029b2:	f7fe fc63 	bl	800127c <main>
  bx  lr
 80029b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029b8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80029bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80029c0:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 80029c4:	0800bd04 	.word	0x0800bd04
  ldr r2, =_sbss
 80029c8:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 80029cc:	24000e4c 	.word	0x24000e4c

080029d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029d0:	e7fe      	b.n	80029d0 <ADC3_IRQHandler>
	...

080029d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029da:	2003      	movs	r0, #3
 80029dc:	f002 f8fa 	bl	8004bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029e0:	f004 faaa 	bl	8006f38 <HAL_RCC_GetSysClockFreq>
 80029e4:	4602      	mov	r2, r0
 80029e6:	4b15      	ldr	r3, [pc, #84]	@ (8002a3c <HAL_Init+0x68>)
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	0a1b      	lsrs	r3, r3, #8
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	4913      	ldr	r1, [pc, #76]	@ (8002a40 <HAL_Init+0x6c>)
 80029f2:	5ccb      	ldrb	r3, [r1, r3]
 80029f4:	f003 031f 	and.w	r3, r3, #31
 80029f8:	fa22 f303 	lsr.w	r3, r2, r3
 80029fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029fe:	4b0f      	ldr	r3, [pc, #60]	@ (8002a3c <HAL_Init+0x68>)
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	4a0e      	ldr	r2, [pc, #56]	@ (8002a40 <HAL_Init+0x6c>)
 8002a08:	5cd3      	ldrb	r3, [r2, r3]
 8002a0a:	f003 031f 	and.w	r3, r3, #31
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	fa22 f303 	lsr.w	r3, r2, r3
 8002a14:	4a0b      	ldr	r2, [pc, #44]	@ (8002a44 <HAL_Init+0x70>)
 8002a16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a18:	4a0b      	ldr	r2, [pc, #44]	@ (8002a48 <HAL_Init+0x74>)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a1e:	200f      	movs	r0, #15
 8002a20:	f000 f814 	bl	8002a4c <HAL_InitTick>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e002      	b.n	8002a34 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a2e:	f7ff fced 	bl	800240c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	58024400 	.word	0x58024400
 8002a40:	0800bc74 	.word	0x0800bc74
 8002a44:	24000010 	.word	0x24000010
 8002a48:	2400000c 	.word	0x2400000c

08002a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002a54:	4b15      	ldr	r3, [pc, #84]	@ (8002aac <HAL_InitTick+0x60>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e021      	b.n	8002aa4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a60:	4b13      	ldr	r3, [pc, #76]	@ (8002ab0 <HAL_InitTick+0x64>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4b11      	ldr	r3, [pc, #68]	@ (8002aac <HAL_InitTick+0x60>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a76:	4618      	mov	r0, r3
 8002a78:	f002 f8df 	bl	8004c3a <HAL_SYSTICK_Config>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e00e      	b.n	8002aa4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b0f      	cmp	r3, #15
 8002a8a:	d80a      	bhi.n	8002aa2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	f04f 30ff 	mov.w	r0, #4294967295
 8002a94:	f002 f8a9 	bl	8004bea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a98:	4a06      	ldr	r2, [pc, #24]	@ (8002ab4 <HAL_InitTick+0x68>)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	e000      	b.n	8002aa4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	24000018 	.word	0x24000018
 8002ab0:	2400000c 	.word	0x2400000c
 8002ab4:	24000014 	.word	0x24000014

08002ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002abc:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <HAL_IncTick+0x20>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <HAL_IncTick+0x24>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	4a04      	ldr	r2, [pc, #16]	@ (8002adc <HAL_IncTick+0x24>)
 8002aca:	6013      	str	r3, [r2, #0]
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	24000018 	.word	0x24000018
 8002adc:	24000d00 	.word	0x24000d00

08002ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ae4:	4b03      	ldr	r3, [pc, #12]	@ (8002af4 <HAL_GetTick+0x14>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	24000d00 	.word	0x24000d00

08002af8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	609a      	str	r2, [r3, #8]
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	609a      	str	r2, [r3, #8]
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a18      	ldr	r2, [pc, #96]	@ (8002bd0 <LL_ADC_SetChannelPreselection+0x70>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d027      	beq.n	8002bc2 <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d107      	bne.n	8002b8c <LL_ADC_SetChannelPreselection+0x2c>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	0e9b      	lsrs	r3, r3, #26
 8002b80:	f003 031f 	and.w	r3, r3, #31
 8002b84:	2201      	movs	r2, #1
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	e015      	b.n	8002bb8 <LL_ADC_SetChannelPreselection+0x58>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8002ba2:	2320      	movs	r3, #32
 8002ba4:	e003      	b.n	8002bae <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	fab3 f383 	clz	r3, r3
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	f003 031f 	and.w	r3, r3, #31
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	69d2      	ldr	r2, [r2, #28]
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8002bc2:	bf00      	nop
 8002bc4:	371c      	adds	r7, #28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	58026000 	.word	0x58026000

08002bd4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b087      	sub	sp, #28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
 8002be0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	3360      	adds	r3, #96	@ 0x60
 8002be6:	461a      	mov	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4a10      	ldr	r2, [pc, #64]	@ (8002c34 <LL_ADC_SetOffset+0x60>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d10b      	bne.n	8002c10 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002c0e:	e00b      	b.n	8002c28 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	430b      	orrs	r3, r1
 8002c22:	431a      	orrs	r2, r3
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	601a      	str	r2, [r3, #0]
}
 8002c28:	bf00      	nop
 8002c2a:	371c      	adds	r7, #28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	58026000 	.word	0x58026000

08002c38 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3360      	adds	r3, #96	@ 0x60
 8002c46:	461a      	mov	r2, r3
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f003 031f 	and.w	r3, r3, #31
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	fa01 f303 	lsl.w	r3, r1, r3
 8002c84:	431a      	orrs	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	611a      	str	r2, [r3, #16]
}
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4a0c      	ldr	r2, [pc, #48]	@ (8002cd8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d00e      	beq.n	8002cca <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	3360      	adds	r3, #96	@ 0x60
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	601a      	str	r2, [r3, #0]
  }
}
 8002cca:	bf00      	nop
 8002ccc:	371c      	adds	r7, #28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	58026000 	.word	0x58026000

08002cdc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4a0c      	ldr	r2, [pc, #48]	@ (8002d1c <LL_ADC_SetOffsetSaturation+0x40>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d10e      	bne.n	8002d0e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	3360      	adds	r3, #96	@ 0x60
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002d0e:	bf00      	nop
 8002d10:	371c      	adds	r7, #28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	58026000 	.word	0x58026000

08002d20 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4a0c      	ldr	r2, [pc, #48]	@ (8002d60 <LL_ADC_SetOffsetSign+0x40>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d10e      	bne.n	8002d52 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	3360      	adds	r3, #96	@ 0x60
 8002d38:	461a      	mov	r2, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002d52:	bf00      	nop
 8002d54:	371c      	adds	r7, #28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	58026000 	.word	0x58026000

08002d64 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	3360      	adds	r3, #96	@ 0x60
 8002d74:	461a      	mov	r2, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4a0c      	ldr	r2, [pc, #48]	@ (8002db4 <LL_ADC_SetOffsetState+0x50>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d108      	bne.n	8002d98 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	431a      	orrs	r2, r3
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002d96:	e007      	b.n	8002da8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	431a      	orrs	r2, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	601a      	str	r2, [r3, #0]
}
 8002da8:	bf00      	nop
 8002daa:	371c      	adds	r7, #28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	58026000 	.word	0x58026000

08002db8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e000      	b.n	8002dd2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b087      	sub	sp, #28
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	3330      	adds	r3, #48	@ 0x30
 8002dee:	461a      	mov	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	0a1b      	lsrs	r3, r3, #8
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	f003 030c 	and.w	r3, r3, #12
 8002dfa:	4413      	add	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	f003 031f 	and.w	r3, r3, #31
 8002e08:	211f      	movs	r1, #31
 8002e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	401a      	ands	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	0e9b      	lsrs	r3, r3, #26
 8002e16:	f003 011f 	and.w	r1, r3, #31
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f003 031f 	and.w	r3, r3, #31
 8002e20:	fa01 f303 	lsl.w	r3, r1, r3
 8002e24:	431a      	orrs	r2, r3
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e2a:	bf00      	nop
 8002e2c:	371c      	adds	r7, #28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b087      	sub	sp, #28
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	3314      	adds	r3, #20
 8002e46:	461a      	mov	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	0e5b      	lsrs	r3, r3, #25
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	4413      	add	r3, r2
 8002e54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	0d1b      	lsrs	r3, r3, #20
 8002e5e:	f003 031f 	and.w	r3, r3, #31
 8002e62:	2107      	movs	r1, #7
 8002e64:	fa01 f303 	lsl.w	r3, r1, r3
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	401a      	ands	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	0d1b      	lsrs	r3, r3, #20
 8002e70:	f003 031f 	and.w	r3, r3, #31
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e80:	bf00      	nop
 8002e82:	371c      	adds	r7, #28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4a1a      	ldr	r2, [pc, #104]	@ (8002f04 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d115      	bne.n	8002ecc <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002eac:	43db      	mvns	r3, r3
 8002eae:	401a      	ands	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f003 0318 	and.w	r3, r3, #24
 8002eb6:	4914      	ldr	r1, [pc, #80]	@ (8002f08 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002eb8:	40d9      	lsrs	r1, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	400b      	ands	r3, r1
 8002ebe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002eca:	e014      	b.n	8002ef6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	401a      	ands	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f003 0318 	and.w	r3, r3, #24
 8002ee2:	4909      	ldr	r1, [pc, #36]	@ (8002f08 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002ee4:	40d9      	lsrs	r1, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	400b      	ands	r3, r1
 8002eea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002ef6:	bf00      	nop
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	58026000 	.word	0x58026000
 8002f08:	000fffff 	.word	0x000fffff

08002f0c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 031f 	and.w	r3, r3, #31
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	4b04      	ldr	r3, [pc, #16]	@ (8002f64 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6093      	str	r3, [r2, #8]
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	5fffffc0 	.word	0x5fffffc0

08002f68 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f7c:	d101      	bne.n	8002f82 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	4b05      	ldr	r3, [pc, #20]	@ (8002fb4 <LL_ADC_EnableInternalRegulator+0x24>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	6fffffc0 	.word	0x6fffffc0

08002fb8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002fcc:	d101      	bne.n	8002fd2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	4b05      	ldr	r3, [pc, #20]	@ (8003004 <LL_ADC_Enable+0x24>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	f043 0201 	orr.w	r2, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	7fffffc0 	.word	0x7fffffc0

08003008 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	4b05      	ldr	r3, [pc, #20]	@ (800302c <LL_ADC_Disable+0x24>)
 8003016:	4013      	ands	r3, r2
 8003018:	f043 0202 	orr.w	r2, r3, #2
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	7fffffc0 	.word	0x7fffffc0

08003030 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <LL_ADC_IsEnabled+0x18>
 8003044:	2301      	movs	r3, #1
 8003046:	e000      	b.n	800304a <LL_ADC_IsEnabled+0x1a>
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b02      	cmp	r3, #2
 8003068:	d101      	bne.n	800306e <LL_ADC_IsDisableOngoing+0x18>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <LL_ADC_IsDisableOngoing+0x1a>
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	4b05      	ldr	r3, [pc, #20]	@ (80030a0 <LL_ADC_REG_StartConversion+0x24>)
 800308a:	4013      	ands	r3, r2
 800308c:	f043 0204 	orr.w	r2, r3, #4
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	7fffffc0 	.word	0x7fffffc0

080030a4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	4b05      	ldr	r3, [pc, #20]	@ (80030c8 <LL_ADC_REG_StopConversion+0x24>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	f043 0210 	orr.w	r2, r3, #16
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	7fffffc0 	.word	0x7fffffc0

080030cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d101      	bne.n	80030e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	4b05      	ldr	r3, [pc, #20]	@ (8003118 <LL_ADC_INJ_StopConversion+0x24>)
 8003102:	4013      	ands	r3, r2
 8003104:	f043 0220 	orr.w	r2, r3, #32
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	7fffffc0 	.word	0x7fffffc0

0800311c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b08      	cmp	r3, #8
 800312e:	d101      	bne.n	8003134 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003130:	2301      	movs	r3, #1
 8003132:	e000      	b.n	8003136 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003144:	b590      	push	{r4, r7, lr}
 8003146:	b089      	sub	sp, #36	@ 0x24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003150:	2300      	movs	r3, #0
 8003152:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e1ee      	b.n	800353c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003168:	2b00      	cmp	r3, #0
 800316a:	d109      	bne.n	8003180 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7ff f967 	bl	8002440 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff feef 	bl	8002f68 <LL_ADC_IsDeepPowerDownEnabled>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d004      	beq.n	800319a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff fed5 	bl	8002f44 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff ff0a 	bl	8002fb8 <LL_ADC_IsInternalRegulatorEnabled>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d114      	bne.n	80031d4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff feee 	bl	8002f90 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031b4:	4b8e      	ldr	r3, [pc, #568]	@ (80033f0 <HAL_ADC_Init+0x2ac>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	099b      	lsrs	r3, r3, #6
 80031ba:	4a8e      	ldr	r2, [pc, #568]	@ (80033f4 <HAL_ADC_Init+0x2b0>)
 80031bc:	fba2 2303 	umull	r2, r3, r2, r3
 80031c0:	099b      	lsrs	r3, r3, #6
 80031c2:	3301      	adds	r3, #1
 80031c4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031c6:	e002      	b.n	80031ce <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1f9      	bne.n	80031c8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff feed 	bl	8002fb8 <LL_ADC_IsInternalRegulatorEnabled>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10d      	bne.n	8003200 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031e8:	f043 0210 	orr.w	r2, r3, #16
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031f4:	f043 0201 	orr.w	r2, r3, #1
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff ff61 	bl	80030cc <LL_ADC_REG_IsConversionOngoing>
 800320a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003210:	f003 0310 	and.w	r3, r3, #16
 8003214:	2b00      	cmp	r3, #0
 8003216:	f040 8188 	bne.w	800352a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2b00      	cmp	r3, #0
 800321e:	f040 8184 	bne.w	800352a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003226:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800322a:	f043 0202 	orr.w	r2, r3, #2
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff fefa 	bl	8003030 <LL_ADC_IsEnabled>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d136      	bne.n	80032b0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a6c      	ldr	r2, [pc, #432]	@ (80033f8 <HAL_ADC_Init+0x2b4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d004      	beq.n	8003256 <HAL_ADC_Init+0x112>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a6a      	ldr	r2, [pc, #424]	@ (80033fc <HAL_ADC_Init+0x2b8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d10e      	bne.n	8003274 <HAL_ADC_Init+0x130>
 8003256:	4868      	ldr	r0, [pc, #416]	@ (80033f8 <HAL_ADC_Init+0x2b4>)
 8003258:	f7ff feea 	bl	8003030 <LL_ADC_IsEnabled>
 800325c:	4604      	mov	r4, r0
 800325e:	4867      	ldr	r0, [pc, #412]	@ (80033fc <HAL_ADC_Init+0x2b8>)
 8003260:	f7ff fee6 	bl	8003030 <LL_ADC_IsEnabled>
 8003264:	4603      	mov	r3, r0
 8003266:	4323      	orrs	r3, r4
 8003268:	2b00      	cmp	r3, #0
 800326a:	bf0c      	ite	eq
 800326c:	2301      	moveq	r3, #1
 800326e:	2300      	movne	r3, #0
 8003270:	b2db      	uxtb	r3, r3
 8003272:	e008      	b.n	8003286 <HAL_ADC_Init+0x142>
 8003274:	4862      	ldr	r0, [pc, #392]	@ (8003400 <HAL_ADC_Init+0x2bc>)
 8003276:	f7ff fedb 	bl	8003030 <LL_ADC_IsEnabled>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	bf0c      	ite	eq
 8003280:	2301      	moveq	r3, #1
 8003282:	2300      	movne	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d012      	beq.n	80032b0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a5a      	ldr	r2, [pc, #360]	@ (80033f8 <HAL_ADC_Init+0x2b4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d004      	beq.n	800329e <HAL_ADC_Init+0x15a>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a58      	ldr	r2, [pc, #352]	@ (80033fc <HAL_ADC_Init+0x2b8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d101      	bne.n	80032a2 <HAL_ADC_Init+0x15e>
 800329e:	4a59      	ldr	r2, [pc, #356]	@ (8003404 <HAL_ADC_Init+0x2c0>)
 80032a0:	e000      	b.n	80032a4 <HAL_ADC_Init+0x160>
 80032a2:	4a59      	ldr	r2, [pc, #356]	@ (8003408 <HAL_ADC_Init+0x2c4>)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	4619      	mov	r1, r3
 80032aa:	4610      	mov	r0, r2
 80032ac:	f7ff fc24 	bl	8002af8 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a52      	ldr	r2, [pc, #328]	@ (8003400 <HAL_ADC_Init+0x2bc>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d129      	bne.n	800330e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	7e5b      	ldrb	r3, [r3, #25]
 80032be:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80032c4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80032ca:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d013      	beq.n	80032fc <HAL_ADC_Init+0x1b8>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2b0c      	cmp	r3, #12
 80032da:	d00d      	beq.n	80032f8 <HAL_ADC_Init+0x1b4>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b1c      	cmp	r3, #28
 80032e2:	d007      	beq.n	80032f4 <HAL_ADC_Init+0x1b0>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b18      	cmp	r3, #24
 80032ea:	d101      	bne.n	80032f0 <HAL_ADC_Init+0x1ac>
 80032ec:	2318      	movs	r3, #24
 80032ee:	e006      	b.n	80032fe <HAL_ADC_Init+0x1ba>
 80032f0:	2300      	movs	r3, #0
 80032f2:	e004      	b.n	80032fe <HAL_ADC_Init+0x1ba>
 80032f4:	2310      	movs	r3, #16
 80032f6:	e002      	b.n	80032fe <HAL_ADC_Init+0x1ba>
 80032f8:	2308      	movs	r3, #8
 80032fa:	e000      	b.n	80032fe <HAL_ADC_Init+0x1ba>
 80032fc:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80032fe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003306:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003308:	4313      	orrs	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
 800330c:	e00e      	b.n	800332c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	7e5b      	ldrb	r3, [r3, #25]
 8003312:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003318:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800331e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003326:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003328:	4313      	orrs	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d106      	bne.n	8003344 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333a:	3b01      	subs	r3, #1
 800333c:	045b      	lsls	r3, r3, #17
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4313      	orrs	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003348:	2b00      	cmp	r3, #0
 800334a:	d009      	beq.n	8003360 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003350:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003358:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4313      	orrs	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a26      	ldr	r2, [pc, #152]	@ (8003400 <HAL_ADC_Init+0x2bc>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d115      	bne.n	8003396 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	4b26      	ldr	r3, [pc, #152]	@ (800340c <HAL_ADC_Init+0x2c8>)
 8003372:	4013      	ands	r3, r2
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6812      	ldr	r2, [r2, #0]
 8003378:	69b9      	ldr	r1, [r7, #24]
 800337a:	430b      	orrs	r3, r1
 800337c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	611a      	str	r2, [r3, #16]
 8003394:	e009      	b.n	80033aa <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	4b1c      	ldr	r3, [pc, #112]	@ (8003410 <HAL_ADC_Init+0x2cc>)
 800339e:	4013      	ands	r3, r2
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	69b9      	ldr	r1, [r7, #24]
 80033a6:	430b      	orrs	r3, r1
 80033a8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff fe8c 	bl	80030cc <LL_ADC_REG_IsConversionOngoing>
 80033b4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff feae 	bl	800311c <LL_ADC_INJ_IsConversionOngoing>
 80033c0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f040 808e 	bne.w	80034e6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f040 808a 	bne.w	80034e6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003400 <HAL_ADC_Init+0x2bc>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d11b      	bne.n	8003414 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	7e1b      	ldrb	r3, [r3, #24]
 80033e0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80033e8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80033ea:	4313      	orrs	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
 80033ee:	e018      	b.n	8003422 <HAL_ADC_Init+0x2de>
 80033f0:	2400000c 	.word	0x2400000c
 80033f4:	053e2d63 	.word	0x053e2d63
 80033f8:	40022000 	.word	0x40022000
 80033fc:	40022100 	.word	0x40022100
 8003400:	58026000 	.word	0x58026000
 8003404:	40022300 	.word	0x40022300
 8003408:	58026300 	.word	0x58026300
 800340c:	fff04007 	.word	0xfff04007
 8003410:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	7e1b      	ldrb	r3, [r3, #24]
 8003418:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800341e:	4313      	orrs	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68da      	ldr	r2, [r3, #12]
 8003428:	4b46      	ldr	r3, [pc, #280]	@ (8003544 <HAL_ADC_Init+0x400>)
 800342a:	4013      	ands	r3, r2
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	69b9      	ldr	r1, [r7, #24]
 8003432:	430b      	orrs	r3, r1
 8003434:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800343c:	2b01      	cmp	r3, #1
 800343e:	d137      	bne.n	80034b0 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003444:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a3f      	ldr	r2, [pc, #252]	@ (8003548 <HAL_ADC_Init+0x404>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d116      	bne.n	800347e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	4b3d      	ldr	r3, [pc, #244]	@ (800354c <HAL_ADC_Init+0x408>)
 8003458:	4013      	ands	r3, r2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003462:	4311      	orrs	r1, r2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003468:	4311      	orrs	r1, r2
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800346e:	430a      	orrs	r2, r1
 8003470:	431a      	orrs	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0201 	orr.w	r2, r2, #1
 800347a:	611a      	str	r2, [r3, #16]
 800347c:	e020      	b.n	80034c0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	4b32      	ldr	r3, [pc, #200]	@ (8003550 <HAL_ADC_Init+0x40c>)
 8003486:	4013      	ands	r3, r2
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800348c:	3a01      	subs	r2, #1
 800348e:	0411      	lsls	r1, r2, #16
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003494:	4311      	orrs	r1, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800349a:	4311      	orrs	r1, r2
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80034a0:	430a      	orrs	r2, r1
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f042 0201 	orr.w	r2, r2, #1
 80034ac:	611a      	str	r2, [r3, #16]
 80034ae:	e007      	b.n	80034c0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	691a      	ldr	r2, [r3, #16]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a1b      	ldr	r2, [pc, #108]	@ (8003548 <HAL_ADC_Init+0x404>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d002      	beq.n	80034e6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f001 f8b1 	bl	8004648 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d10c      	bne.n	8003508 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f4:	f023 010f 	bic.w	r1, r3, #15
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	1e5a      	subs	r2, r3, #1
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	631a      	str	r2, [r3, #48]	@ 0x30
 8003506:	e007      	b.n	8003518 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 020f 	bic.w	r2, r2, #15
 8003516:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800351c:	f023 0303 	bic.w	r3, r3, #3
 8003520:	f043 0201 	orr.w	r2, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	661a      	str	r2, [r3, #96]	@ 0x60
 8003528:	e007      	b.n	800353a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800352e:	f043 0210 	orr.w	r2, r3, #16
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800353a:	7ffb      	ldrb	r3, [r7, #31]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3724      	adds	r7, #36	@ 0x24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd90      	pop	{r4, r7, pc}
 8003544:	ffffbffc 	.word	0xffffbffc
 8003548:	58026000 	.word	0x58026000
 800354c:	fc00f81f 	.word	0xfc00f81f
 8003550:	fc00f81e 	.word	0xfc00f81e

08003554 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a5c      	ldr	r2, [pc, #368]	@ (80036d4 <HAL_ADC_Start+0x180>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d004      	beq.n	8003570 <HAL_ADC_Start+0x1c>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a5b      	ldr	r2, [pc, #364]	@ (80036d8 <HAL_ADC_Start+0x184>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d101      	bne.n	8003574 <HAL_ADC_Start+0x20>
 8003570:	4b5a      	ldr	r3, [pc, #360]	@ (80036dc <HAL_ADC_Start+0x188>)
 8003572:	e000      	b.n	8003576 <HAL_ADC_Start+0x22>
 8003574:	4b5a      	ldr	r3, [pc, #360]	@ (80036e0 <HAL_ADC_Start+0x18c>)
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff fcc8 	bl	8002f0c <LL_ADC_GetMultimode>
 800357c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fda2 	bl	80030cc <LL_ADC_REG_IsConversionOngoing>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	f040 809a 	bne.w	80036c4 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_ADC_Start+0x4a>
 800359a:	2302      	movs	r3, #2
 800359c:	e095      	b.n	80036ca <HAL_ADC_Start+0x176>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 ff64 	bl	8004474 <ADC_Enable>
 80035ac:	4603      	mov	r3, r0
 80035ae:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80035b0:	7dfb      	ldrb	r3, [r7, #23]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f040 8081 	bne.w	80036ba <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80035bc:	4b49      	ldr	r3, [pc, #292]	@ (80036e4 <HAL_ADC_Start+0x190>)
 80035be:	4013      	ands	r3, r2
 80035c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a42      	ldr	r2, [pc, #264]	@ (80036d8 <HAL_ADC_Start+0x184>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d002      	beq.n	80035d8 <HAL_ADC_Start+0x84>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	e000      	b.n	80035da <HAL_ADC_Start+0x86>
 80035d8:	4b3e      	ldr	r3, [pc, #248]	@ (80036d4 <HAL_ADC_Start+0x180>)
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6812      	ldr	r2, [r2, #0]
 80035de:	4293      	cmp	r3, r2
 80035e0:	d002      	beq.n	80035e8 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d105      	bne.n	80035f4 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003600:	d106      	bne.n	8003610 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003606:	f023 0206 	bic.w	r2, r3, #6
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	665a      	str	r2, [r3, #100]	@ 0x64
 800360e:	e002      	b.n	8003616 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	221c      	movs	r2, #28
 800361c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a2b      	ldr	r2, [pc, #172]	@ (80036d8 <HAL_ADC_Start+0x184>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d002      	beq.n	8003636 <HAL_ADC_Start+0xe2>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	e000      	b.n	8003638 <HAL_ADC_Start+0xe4>
 8003636:	4b27      	ldr	r3, [pc, #156]	@ (80036d4 <HAL_ADC_Start+0x180>)
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6812      	ldr	r2, [r2, #0]
 800363c:	4293      	cmp	r3, r2
 800363e:	d008      	beq.n	8003652 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d005      	beq.n	8003652 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	2b05      	cmp	r3, #5
 800364a:	d002      	beq.n	8003652 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	2b09      	cmp	r3, #9
 8003650:	d114      	bne.n	800367c <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d007      	beq.n	8003670 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003664:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003668:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff fd01 	bl	800307c <LL_ADC_REG_StartConversion>
 800367a:	e025      	b.n	80036c8 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003680:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a12      	ldr	r2, [pc, #72]	@ (80036d8 <HAL_ADC_Start+0x184>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d002      	beq.n	8003698 <HAL_ADC_Start+0x144>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	e000      	b.n	800369a <HAL_ADC_Start+0x146>
 8003698:	4b0e      	ldr	r3, [pc, #56]	@ (80036d4 <HAL_ADC_Start+0x180>)
 800369a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00f      	beq.n	80036c8 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80036b0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	661a      	str	r2, [r3, #96]	@ 0x60
 80036b8:	e006      	b.n	80036c8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80036c2:	e001      	b.n	80036c8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80036c4:	2302      	movs	r3, #2
 80036c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80036c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40022000 	.word	0x40022000
 80036d8:	40022100 	.word	0x40022100
 80036dc:	40022300 	.word	0x40022300
 80036e0:	58026300 	.word	0x58026300
 80036e4:	fffff0fe 	.word	0xfffff0fe

080036e8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d101      	bne.n	80036fe <HAL_ADC_Stop+0x16>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e021      	b.n	8003742 <HAL_ADC_Stop+0x5a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003706:	2103      	movs	r1, #3
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 fdf7 	bl	80042fc <ADC_ConversionStop>
 800370e:	4603      	mov	r3, r0
 8003710:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003712:	7bfb      	ldrb	r3, [r7, #15]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10f      	bne.n	8003738 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 ff35 	bl	8004588 <ADC_Disable>
 800371e:	4603      	mov	r3, r0
 8003720:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003722:	7bfb      	ldrb	r3, [r7, #15]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d107      	bne.n	8003738 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800372c:	4b07      	ldr	r3, [pc, #28]	@ (800374c <HAL_ADC_Stop+0x64>)
 800372e:	4013      	ands	r3, r2
 8003730:	f043 0201 	orr.w	r2, r3, #1
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003740:	7bfb      	ldrb	r3, [r7, #15]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	ffffeefe 	.word	0xffffeefe

08003750 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a72      	ldr	r2, [pc, #456]	@ (8003928 <HAL_ADC_PollForConversion+0x1d8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d004      	beq.n	800376e <HAL_ADC_PollForConversion+0x1e>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a70      	ldr	r2, [pc, #448]	@ (800392c <HAL_ADC_PollForConversion+0x1dc>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d101      	bne.n	8003772 <HAL_ADC_PollForConversion+0x22>
 800376e:	4b70      	ldr	r3, [pc, #448]	@ (8003930 <HAL_ADC_PollForConversion+0x1e0>)
 8003770:	e000      	b.n	8003774 <HAL_ADC_PollForConversion+0x24>
 8003772:	4b70      	ldr	r3, [pc, #448]	@ (8003934 <HAL_ADC_PollForConversion+0x1e4>)
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff fbc9 	bl	8002f0c <LL_ADC_GetMultimode>
 800377a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	2b08      	cmp	r3, #8
 8003782:	d102      	bne.n	800378a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003784:	2308      	movs	r3, #8
 8003786:	61fb      	str	r3, [r7, #28]
 8003788:	e037      	b.n	80037fa <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d005      	beq.n	800379c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	2b05      	cmp	r3, #5
 8003794:	d002      	beq.n	800379c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2b09      	cmp	r3, #9
 800379a:	d111      	bne.n	80037c0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d007      	beq.n	80037ba <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ae:	f043 0220 	orr.w	r2, r3, #32
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e0b1      	b.n	800391e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80037ba:	2304      	movs	r3, #4
 80037bc:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80037be:	e01c      	b.n	80037fa <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a58      	ldr	r2, [pc, #352]	@ (8003928 <HAL_ADC_PollForConversion+0x1d8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d004      	beq.n	80037d4 <HAL_ADC_PollForConversion+0x84>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a57      	ldr	r2, [pc, #348]	@ (800392c <HAL_ADC_PollForConversion+0x1dc>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d101      	bne.n	80037d8 <HAL_ADC_PollForConversion+0x88>
 80037d4:	4b56      	ldr	r3, [pc, #344]	@ (8003930 <HAL_ADC_PollForConversion+0x1e0>)
 80037d6:	e000      	b.n	80037da <HAL_ADC_PollForConversion+0x8a>
 80037d8:	4b56      	ldr	r3, [pc, #344]	@ (8003934 <HAL_ADC_PollForConversion+0x1e4>)
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff fba4 	bl	8002f28 <LL_ADC_GetMultiDMATransfer>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d007      	beq.n	80037f6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ea:	f043 0220 	orr.w	r2, r3, #32
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e093      	b.n	800391e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80037f6:	2304      	movs	r3, #4
 80037f8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80037fa:	f7ff f971 	bl	8002ae0 <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003800:	e021      	b.n	8003846 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003808:	d01d      	beq.n	8003846 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800380a:	f7ff f969 	bl	8002ae0 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d302      	bcc.n	8003820 <HAL_ADC_PollForConversion+0xd0>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d112      	bne.n	8003846 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	4013      	ands	r3, r2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10b      	bne.n	8003846 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003832:	f043 0204 	orr.w	r2, r3, #4
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e06b      	b.n	800391e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	4013      	ands	r3, r2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0d6      	beq.n	8003802 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003858:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff faa7 	bl	8002db8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d01c      	beq.n	80038aa <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	7e5b      	ldrb	r3, [r3, #25]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d118      	bne.n	80038aa <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b08      	cmp	r3, #8
 8003884:	d111      	bne.n	80038aa <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800388a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003896:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d105      	bne.n	80038aa <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a2:	f043 0201 	orr.w	r2, r3, #1
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a1f      	ldr	r2, [pc, #124]	@ (800392c <HAL_ADC_PollForConversion+0x1dc>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d002      	beq.n	80038ba <HAL_ADC_PollForConversion+0x16a>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	e000      	b.n	80038bc <HAL_ADC_PollForConversion+0x16c>
 80038ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003928 <HAL_ADC_PollForConversion+0x1d8>)
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d008      	beq.n	80038d6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d005      	beq.n	80038d6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2b05      	cmp	r3, #5
 80038ce:	d002      	beq.n	80038d6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	2b09      	cmp	r3, #9
 80038d4:	d104      	bne.n	80038e0 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	e00c      	b.n	80038fa <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a11      	ldr	r2, [pc, #68]	@ (800392c <HAL_ADC_PollForConversion+0x1dc>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d002      	beq.n	80038f0 <HAL_ADC_PollForConversion+0x1a0>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	e000      	b.n	80038f2 <HAL_ADC_PollForConversion+0x1a2>
 80038f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003928 <HAL_ADC_PollForConversion+0x1d8>)
 80038f2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d104      	bne.n	800390a <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2208      	movs	r2, #8
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	e008      	b.n	800391c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d103      	bne.n	800391c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	220c      	movs	r2, #12
 800391a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3720      	adds	r7, #32
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40022000 	.word	0x40022000
 800392c:	40022100 	.word	0x40022100
 8003930:	40022300 	.word	0x40022300
 8003934:	58026300 	.word	0x58026300

08003938 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003946:	4618      	mov	r0, r3
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
	...

08003954 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003954:	b590      	push	{r4, r7, lr}
 8003956:	b0a5      	sub	sp, #148	@ 0x94
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003964:	2300      	movs	r3, #0
 8003966:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800396e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	4aa4      	ldr	r2, [pc, #656]	@ (8003c08 <HAL_ADC_ConfigChannel+0x2b4>)
 8003976:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800397e:	2b01      	cmp	r3, #1
 8003980:	d102      	bne.n	8003988 <HAL_ADC_ConfigChannel+0x34>
 8003982:	2302      	movs	r3, #2
 8003984:	f000 bca2 	b.w	80042cc <HAL_ADC_ConfigChannel+0x978>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff fb99 	bl	80030cc <LL_ADC_REG_IsConversionOngoing>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	f040 8486 	bne.w	80042ae <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	db31      	blt.n	8003a0e <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a97      	ldr	r2, [pc, #604]	@ (8003c0c <HAL_ADC_ConfigChannel+0x2b8>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d02c      	beq.n	8003a0e <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d108      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x7e>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	0e9b      	lsrs	r3, r3, #26
 80039c6:	f003 031f 	and.w	r3, r3, #31
 80039ca:	2201      	movs	r2, #1
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	e016      	b.n	8003a00 <HAL_ADC_ConfigChannel+0xac>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039da:	fa93 f3a3 	rbit	r3, r3
 80039de:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80039e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039e2:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80039e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 80039ea:	2320      	movs	r3, #32
 80039ec:	e003      	b.n	80039f6 <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 80039ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039f0:	fab3 f383 	clz	r3, r3
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	f003 031f 	and.w	r3, r3, #31
 80039fa:	2201      	movs	r2, #1
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6812      	ldr	r2, [r2, #0]
 8003a04:	69d1      	ldr	r1, [r2, #28]
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6812      	ldr	r2, [r2, #0]
 8003a0a:	430b      	orrs	r3, r1
 8003a0c:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6818      	ldr	r0, [r3, #0]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	6859      	ldr	r1, [r3, #4]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	f7ff f9df 	bl	8002dde <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff fb51 	bl	80030cc <LL_ADC_REG_IsConversionOngoing>
 8003a2a:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff fb72 	bl	800311c <LL_ADC_INJ_IsConversionOngoing>
 8003a38:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f040 824a 	bne.w	8003eda <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a46:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f040 8245 	bne.w	8003eda <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	6819      	ldr	r1, [r3, #0]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	f7ff f9ea 	bl	8002e36 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a69      	ldr	r2, [pc, #420]	@ (8003c0c <HAL_ADC_ConfigChannel+0x2b8>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d10d      	bne.n	8003a88 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	695a      	ldr	r2, [r3, #20]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	08db      	lsrs	r3, r3, #3
 8003a78:	f003 0303 	and.w	r3, r3, #3
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a86:	e032      	b.n	8003aee <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a88:	4b61      	ldr	r3, [pc, #388]	@ (8003c10 <HAL_ADC_ConfigChannel+0x2bc>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003a90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a94:	d10b      	bne.n	8003aae <HAL_ADC_ConfigChannel+0x15a>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	695a      	ldr	r2, [r3, #20]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	089b      	lsrs	r3, r3, #2
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	e01d      	b.n	8003aea <HAL_ADC_ConfigChannel+0x196>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f003 0310 	and.w	r3, r3, #16
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10b      	bne.n	8003ad4 <HAL_ADC_ConfigChannel+0x180>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	695a      	ldr	r2, [r3, #20]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	089b      	lsrs	r3, r3, #2
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	e00a      	b.n	8003aea <HAL_ADC_ConfigChannel+0x196>
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	695a      	ldr	r2, [r3, #20]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	089b      	lsrs	r3, r3, #2
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d048      	beq.n	8003b88 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	6919      	ldr	r1, [r3, #16]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b06:	f7ff f865 	bl	8002bd4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a3f      	ldr	r2, [pc, #252]	@ (8003c0c <HAL_ADC_ConfigChannel+0x2b8>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d119      	bne.n	8003b48 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6818      	ldr	r0, [r3, #0]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	6919      	ldr	r1, [r3, #16]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	461a      	mov	r2, r3
 8003b22:	f7ff f8fd 	bl	8002d20 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6818      	ldr	r0, [r3, #0]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	6919      	ldr	r1, [r3, #16]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d102      	bne.n	8003b3e <HAL_ADC_ConfigChannel+0x1ea>
 8003b38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b3c:	e000      	b.n	8003b40 <HAL_ADC_ConfigChannel+0x1ec>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	461a      	mov	r2, r3
 8003b42:	f7ff f8cb 	bl	8002cdc <LL_ADC_SetOffsetSaturation>
 8003b46:	e1c8      	b.n	8003eda <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	6919      	ldr	r1, [r3, #16]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d102      	bne.n	8003b60 <HAL_ADC_ConfigChannel+0x20c>
 8003b5a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003b5e:	e000      	b.n	8003b62 <HAL_ADC_ConfigChannel+0x20e>
 8003b60:	2300      	movs	r3, #0
 8003b62:	461a      	mov	r2, r3
 8003b64:	f7ff f898 	bl	8002c98 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6818      	ldr	r0, [r3, #0]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	6919      	ldr	r1, [r3, #16]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	7e1b      	ldrb	r3, [r3, #24]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d102      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x22a>
 8003b78:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003b7c:	e000      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x22c>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	461a      	mov	r2, r3
 8003b82:	f7ff f86f 	bl	8002c64 <LL_ADC_SetDataRightShift>
 8003b86:	e1a8      	b.n	8003eda <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a1f      	ldr	r2, [pc, #124]	@ (8003c0c <HAL_ADC_ConfigChannel+0x2b8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	f040 815b 	bne.w	8003e4a <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2100      	movs	r1, #0
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff f84c 	bl	8002c38 <LL_ADC_GetOffsetChannel>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10a      	bne.n	8003bc0 <HAL_ADC_ConfigChannel+0x26c>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2100      	movs	r1, #0
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff f841 	bl	8002c38 <LL_ADC_GetOffsetChannel>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	0e9b      	lsrs	r3, r3, #26
 8003bba:	f003 021f 	and.w	r2, r3, #31
 8003bbe:	e017      	b.n	8003bf0 <HAL_ADC_ConfigChannel+0x29c>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff f836 	bl	8002c38 <LL_ADC_GetOffsetChannel>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bd2:	fa93 f3a3 	rbit	r3, r3
 8003bd6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003bd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bda:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003bdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003be2:	2320      	movs	r3, #32
 8003be4:	e003      	b.n	8003bee <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8003be6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003be8:	fab3 f383 	clz	r3, r3
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	461a      	mov	r2, r3
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10b      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x2c0>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	0e9b      	lsrs	r3, r3, #26
 8003c02:	f003 031f 	and.w	r3, r3, #31
 8003c06:	e017      	b.n	8003c38 <HAL_ADC_ConfigChannel+0x2e4>
 8003c08:	47ff0000 	.word	0x47ff0000
 8003c0c:	58026000 	.word	0x58026000
 8003c10:	5c001000 	.word	0x5c001000
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c1c:	fa93 f3a3 	rbit	r3, r3
 8003c20:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003c22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c24:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003c26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8003c2c:	2320      	movs	r3, #32
 8003c2e:	e003      	b.n	8003c38 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8003c30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c32:	fab3 f383 	clz	r3, r3
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d106      	bne.n	8003c4a <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2200      	movs	r2, #0
 8003c42:	2100      	movs	r1, #0
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff f88d 	bl	8002d64 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2101      	movs	r1, #1
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fe fff1 	bl	8002c38 <LL_ADC_GetOffsetChannel>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10a      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x322>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2101      	movs	r1, #1
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fe ffe6 	bl	8002c38 <LL_ADC_GetOffsetChannel>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	0e9b      	lsrs	r3, r3, #26
 8003c70:	f003 021f 	and.w	r2, r3, #31
 8003c74:	e017      	b.n	8003ca6 <HAL_ADC_ConfigChannel+0x352>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7fe ffdb 	bl	8002c38 <LL_ADC_GetOffsetChannel>
 8003c82:	4603      	mov	r3, r0
 8003c84:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c88:	fa93 f3a3 	rbit	r3, r3
 8003c8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003c8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c90:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8003c98:	2320      	movs	r3, #32
 8003c9a:	e003      	b.n	8003ca4 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8003c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c9e:	fab3 f383 	clz	r3, r3
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d105      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x36a>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	0e9b      	lsrs	r3, r3, #26
 8003cb8:	f003 031f 	and.w	r3, r3, #31
 8003cbc:	e011      	b.n	8003ce2 <HAL_ADC_ConfigChannel+0x38e>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cc6:	fa93 f3a3 	rbit	r3, r3
 8003cca:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003ccc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cce:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003cd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003cd6:	2320      	movs	r3, #32
 8003cd8:	e003      	b.n	8003ce2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003cda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cdc:	fab3 f383 	clz	r3, r3
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d106      	bne.n	8003cf4 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2200      	movs	r2, #0
 8003cec:	2101      	movs	r1, #1
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff f838 	bl	8002d64 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2102      	movs	r1, #2
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fe ff9c 	bl	8002c38 <LL_ADC_GetOffsetChannel>
 8003d00:	4603      	mov	r3, r0
 8003d02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10a      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x3cc>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2102      	movs	r1, #2
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fe ff91 	bl	8002c38 <LL_ADC_GetOffsetChannel>
 8003d16:	4603      	mov	r3, r0
 8003d18:	0e9b      	lsrs	r3, r3, #26
 8003d1a:	f003 021f 	and.w	r2, r3, #31
 8003d1e:	e017      	b.n	8003d50 <HAL_ADC_ConfigChannel+0x3fc>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2102      	movs	r1, #2
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fe ff86 	bl	8002c38 <LL_ADC_GetOffsetChannel>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d32:	fa93 f3a3 	rbit	r3, r3
 8003d36:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003d3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003d42:	2320      	movs	r3, #32
 8003d44:	e003      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d48:	fab3 f383 	clz	r3, r3
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	461a      	mov	r2, r3
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d105      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x414>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	0e9b      	lsrs	r3, r3, #26
 8003d62:	f003 031f 	and.w	r3, r3, #31
 8003d66:	e011      	b.n	8003d8c <HAL_ADC_ConfigChannel+0x438>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d70:	fa93 f3a3 	rbit	r3, r3
 8003d74:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d78:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003d80:	2320      	movs	r3, #32
 8003d82:	e003      	b.n	8003d8c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d86:	fab3 f383 	clz	r3, r3
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d106      	bne.n	8003d9e <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2200      	movs	r2, #0
 8003d96:	2102      	movs	r1, #2
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fe ffe3 	bl	8002d64 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2103      	movs	r1, #3
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fe ff47 	bl	8002c38 <LL_ADC_GetOffsetChannel>
 8003daa:	4603      	mov	r3, r0
 8003dac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10a      	bne.n	8003dca <HAL_ADC_ConfigChannel+0x476>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2103      	movs	r1, #3
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fe ff3c 	bl	8002c38 <LL_ADC_GetOffsetChannel>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	0e9b      	lsrs	r3, r3, #26
 8003dc4:	f003 021f 	and.w	r2, r3, #31
 8003dc8:	e017      	b.n	8003dfa <HAL_ADC_ConfigChannel+0x4a6>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2103      	movs	r1, #3
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fe ff31 	bl	8002c38 <LL_ADC_GetOffsetChannel>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	fa93 f3a3 	rbit	r3, r3
 8003de0:	61fb      	str	r3, [r7, #28]
  return result;
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003dec:	2320      	movs	r3, #32
 8003dee:	e003      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df2:	fab3 f383 	clz	r3, r3
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	461a      	mov	r2, r3
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d105      	bne.n	8003e12 <HAL_ADC_ConfigChannel+0x4be>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	0e9b      	lsrs	r3, r3, #26
 8003e0c:	f003 031f 	and.w	r3, r3, #31
 8003e10:	e011      	b.n	8003e36 <HAL_ADC_ConfigChannel+0x4e2>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	fa93 f3a3 	rbit	r3, r3
 8003e1e:	613b      	str	r3, [r7, #16]
  return result;
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8003e2a:	2320      	movs	r3, #32
 8003e2c:	e003      	b.n	8003e36 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	fab3 f383 	clz	r3, r3
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d14f      	bne.n	8003eda <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2103      	movs	r1, #3
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fe ff8e 	bl	8002d64 <LL_ADC_SetOffsetState>
 8003e48:	e047      	b.n	8003eda <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	069b      	lsls	r3, r3, #26
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d107      	bne.n	8003e6e <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003e6c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	069b      	lsls	r3, r3, #26
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d107      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003e90:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e98:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	069b      	lsls	r3, r3, #26
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d107      	bne.n	8003eb6 <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003eb4:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ebc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	069b      	lsls	r3, r3, #26
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d107      	bne.n	8003eda <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003ed8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7ff f8a6 	bl	8003030 <LL_ADC_IsEnabled>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f040 81ea 	bne.w	80042c0 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6818      	ldr	r0, [r3, #0]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	6819      	ldr	r1, [r3, #0]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	f7fe ffc7 	bl	8002e8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	4a7a      	ldr	r2, [pc, #488]	@ (80040ec <HAL_ADC_ConfigChannel+0x798>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	f040 80e0 	bne.w	80040ca <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4977      	ldr	r1, [pc, #476]	@ (80040f0 <HAL_ADC_ConfigChannel+0x79c>)
 8003f14:	428b      	cmp	r3, r1
 8003f16:	d147      	bne.n	8003fa8 <HAL_ADC_ConfigChannel+0x654>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4975      	ldr	r1, [pc, #468]	@ (80040f4 <HAL_ADC_ConfigChannel+0x7a0>)
 8003f1e:	428b      	cmp	r3, r1
 8003f20:	d040      	beq.n	8003fa4 <HAL_ADC_ConfigChannel+0x650>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4974      	ldr	r1, [pc, #464]	@ (80040f8 <HAL_ADC_ConfigChannel+0x7a4>)
 8003f28:	428b      	cmp	r3, r1
 8003f2a:	d039      	beq.n	8003fa0 <HAL_ADC_ConfigChannel+0x64c>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4972      	ldr	r1, [pc, #456]	@ (80040fc <HAL_ADC_ConfigChannel+0x7a8>)
 8003f32:	428b      	cmp	r3, r1
 8003f34:	d032      	beq.n	8003f9c <HAL_ADC_ConfigChannel+0x648>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4971      	ldr	r1, [pc, #452]	@ (8004100 <HAL_ADC_ConfigChannel+0x7ac>)
 8003f3c:	428b      	cmp	r3, r1
 8003f3e:	d02b      	beq.n	8003f98 <HAL_ADC_ConfigChannel+0x644>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	496f      	ldr	r1, [pc, #444]	@ (8004104 <HAL_ADC_ConfigChannel+0x7b0>)
 8003f46:	428b      	cmp	r3, r1
 8003f48:	d024      	beq.n	8003f94 <HAL_ADC_ConfigChannel+0x640>
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	496e      	ldr	r1, [pc, #440]	@ (8004108 <HAL_ADC_ConfigChannel+0x7b4>)
 8003f50:	428b      	cmp	r3, r1
 8003f52:	d01d      	beq.n	8003f90 <HAL_ADC_ConfigChannel+0x63c>
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	496c      	ldr	r1, [pc, #432]	@ (800410c <HAL_ADC_ConfigChannel+0x7b8>)
 8003f5a:	428b      	cmp	r3, r1
 8003f5c:	d016      	beq.n	8003f8c <HAL_ADC_ConfigChannel+0x638>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	496b      	ldr	r1, [pc, #428]	@ (8004110 <HAL_ADC_ConfigChannel+0x7bc>)
 8003f64:	428b      	cmp	r3, r1
 8003f66:	d00f      	beq.n	8003f88 <HAL_ADC_ConfigChannel+0x634>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4969      	ldr	r1, [pc, #420]	@ (8004114 <HAL_ADC_ConfigChannel+0x7c0>)
 8003f6e:	428b      	cmp	r3, r1
 8003f70:	d008      	beq.n	8003f84 <HAL_ADC_ConfigChannel+0x630>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4968      	ldr	r1, [pc, #416]	@ (8004118 <HAL_ADC_ConfigChannel+0x7c4>)
 8003f78:	428b      	cmp	r3, r1
 8003f7a:	d101      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x62c>
 8003f7c:	4b67      	ldr	r3, [pc, #412]	@ (800411c <HAL_ADC_ConfigChannel+0x7c8>)
 8003f7e:	e0a0      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 8003f80:	2300      	movs	r3, #0
 8003f82:	e09e      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 8003f84:	4b66      	ldr	r3, [pc, #408]	@ (8004120 <HAL_ADC_ConfigChannel+0x7cc>)
 8003f86:	e09c      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 8003f88:	4b66      	ldr	r3, [pc, #408]	@ (8004124 <HAL_ADC_ConfigChannel+0x7d0>)
 8003f8a:	e09a      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 8003f8c:	4b60      	ldr	r3, [pc, #384]	@ (8004110 <HAL_ADC_ConfigChannel+0x7bc>)
 8003f8e:	e098      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 8003f90:	4b5e      	ldr	r3, [pc, #376]	@ (800410c <HAL_ADC_ConfigChannel+0x7b8>)
 8003f92:	e096      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 8003f94:	4b64      	ldr	r3, [pc, #400]	@ (8004128 <HAL_ADC_ConfigChannel+0x7d4>)
 8003f96:	e094      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 8003f98:	4b64      	ldr	r3, [pc, #400]	@ (800412c <HAL_ADC_ConfigChannel+0x7d8>)
 8003f9a:	e092      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 8003f9c:	4b64      	ldr	r3, [pc, #400]	@ (8004130 <HAL_ADC_ConfigChannel+0x7dc>)
 8003f9e:	e090      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 8003fa0:	4b64      	ldr	r3, [pc, #400]	@ (8004134 <HAL_ADC_ConfigChannel+0x7e0>)
 8003fa2:	e08e      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e08c      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4962      	ldr	r1, [pc, #392]	@ (8004138 <HAL_ADC_ConfigChannel+0x7e4>)
 8003fae:	428b      	cmp	r3, r1
 8003fb0:	d140      	bne.n	8004034 <HAL_ADC_ConfigChannel+0x6e0>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	494f      	ldr	r1, [pc, #316]	@ (80040f4 <HAL_ADC_ConfigChannel+0x7a0>)
 8003fb8:	428b      	cmp	r3, r1
 8003fba:	d039      	beq.n	8004030 <HAL_ADC_ConfigChannel+0x6dc>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	494d      	ldr	r1, [pc, #308]	@ (80040f8 <HAL_ADC_ConfigChannel+0x7a4>)
 8003fc2:	428b      	cmp	r3, r1
 8003fc4:	d032      	beq.n	800402c <HAL_ADC_ConfigChannel+0x6d8>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	494c      	ldr	r1, [pc, #304]	@ (80040fc <HAL_ADC_ConfigChannel+0x7a8>)
 8003fcc:	428b      	cmp	r3, r1
 8003fce:	d02b      	beq.n	8004028 <HAL_ADC_ConfigChannel+0x6d4>
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	494a      	ldr	r1, [pc, #296]	@ (8004100 <HAL_ADC_ConfigChannel+0x7ac>)
 8003fd6:	428b      	cmp	r3, r1
 8003fd8:	d024      	beq.n	8004024 <HAL_ADC_ConfigChannel+0x6d0>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4949      	ldr	r1, [pc, #292]	@ (8004104 <HAL_ADC_ConfigChannel+0x7b0>)
 8003fe0:	428b      	cmp	r3, r1
 8003fe2:	d01d      	beq.n	8004020 <HAL_ADC_ConfigChannel+0x6cc>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4947      	ldr	r1, [pc, #284]	@ (8004108 <HAL_ADC_ConfigChannel+0x7b4>)
 8003fea:	428b      	cmp	r3, r1
 8003fec:	d016      	beq.n	800401c <HAL_ADC_ConfigChannel+0x6c8>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4946      	ldr	r1, [pc, #280]	@ (800410c <HAL_ADC_ConfigChannel+0x7b8>)
 8003ff4:	428b      	cmp	r3, r1
 8003ff6:	d00f      	beq.n	8004018 <HAL_ADC_ConfigChannel+0x6c4>
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4944      	ldr	r1, [pc, #272]	@ (8004110 <HAL_ADC_ConfigChannel+0x7bc>)
 8003ffe:	428b      	cmp	r3, r1
 8004000:	d008      	beq.n	8004014 <HAL_ADC_ConfigChannel+0x6c0>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4944      	ldr	r1, [pc, #272]	@ (8004118 <HAL_ADC_ConfigChannel+0x7c4>)
 8004008:	428b      	cmp	r3, r1
 800400a:	d101      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x6bc>
 800400c:	4b43      	ldr	r3, [pc, #268]	@ (800411c <HAL_ADC_ConfigChannel+0x7c8>)
 800400e:	e058      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 8004010:	2300      	movs	r3, #0
 8004012:	e056      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 8004014:	4b43      	ldr	r3, [pc, #268]	@ (8004124 <HAL_ADC_ConfigChannel+0x7d0>)
 8004016:	e054      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 8004018:	4b3d      	ldr	r3, [pc, #244]	@ (8004110 <HAL_ADC_ConfigChannel+0x7bc>)
 800401a:	e052      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 800401c:	4b3b      	ldr	r3, [pc, #236]	@ (800410c <HAL_ADC_ConfigChannel+0x7b8>)
 800401e:	e050      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 8004020:	4b41      	ldr	r3, [pc, #260]	@ (8004128 <HAL_ADC_ConfigChannel+0x7d4>)
 8004022:	e04e      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 8004024:	4b41      	ldr	r3, [pc, #260]	@ (800412c <HAL_ADC_ConfigChannel+0x7d8>)
 8004026:	e04c      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 8004028:	4b41      	ldr	r3, [pc, #260]	@ (8004130 <HAL_ADC_ConfigChannel+0x7dc>)
 800402a:	e04a      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 800402c:	4b41      	ldr	r3, [pc, #260]	@ (8004134 <HAL_ADC_ConfigChannel+0x7e0>)
 800402e:	e048      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 8004030:	2301      	movs	r3, #1
 8004032:	e046      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4940      	ldr	r1, [pc, #256]	@ (800413c <HAL_ADC_ConfigChannel+0x7e8>)
 800403a:	428b      	cmp	r3, r1
 800403c:	d140      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x76c>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	492c      	ldr	r1, [pc, #176]	@ (80040f4 <HAL_ADC_ConfigChannel+0x7a0>)
 8004044:	428b      	cmp	r3, r1
 8004046:	d039      	beq.n	80040bc <HAL_ADC_ConfigChannel+0x768>
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	492a      	ldr	r1, [pc, #168]	@ (80040f8 <HAL_ADC_ConfigChannel+0x7a4>)
 800404e:	428b      	cmp	r3, r1
 8004050:	d032      	beq.n	80040b8 <HAL_ADC_ConfigChannel+0x764>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4929      	ldr	r1, [pc, #164]	@ (80040fc <HAL_ADC_ConfigChannel+0x7a8>)
 8004058:	428b      	cmp	r3, r1
 800405a:	d02b      	beq.n	80040b4 <HAL_ADC_ConfigChannel+0x760>
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4927      	ldr	r1, [pc, #156]	@ (8004100 <HAL_ADC_ConfigChannel+0x7ac>)
 8004062:	428b      	cmp	r3, r1
 8004064:	d024      	beq.n	80040b0 <HAL_ADC_ConfigChannel+0x75c>
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4926      	ldr	r1, [pc, #152]	@ (8004104 <HAL_ADC_ConfigChannel+0x7b0>)
 800406c:	428b      	cmp	r3, r1
 800406e:	d01d      	beq.n	80040ac <HAL_ADC_ConfigChannel+0x758>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4924      	ldr	r1, [pc, #144]	@ (8004108 <HAL_ADC_ConfigChannel+0x7b4>)
 8004076:	428b      	cmp	r3, r1
 8004078:	d016      	beq.n	80040a8 <HAL_ADC_ConfigChannel+0x754>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4923      	ldr	r1, [pc, #140]	@ (800410c <HAL_ADC_ConfigChannel+0x7b8>)
 8004080:	428b      	cmp	r3, r1
 8004082:	d00f      	beq.n	80040a4 <HAL_ADC_ConfigChannel+0x750>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4926      	ldr	r1, [pc, #152]	@ (8004124 <HAL_ADC_ConfigChannel+0x7d0>)
 800408a:	428b      	cmp	r3, r1
 800408c:	d008      	beq.n	80040a0 <HAL_ADC_ConfigChannel+0x74c>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	492b      	ldr	r1, [pc, #172]	@ (8004140 <HAL_ADC_ConfigChannel+0x7ec>)
 8004094:	428b      	cmp	r3, r1
 8004096:	d101      	bne.n	800409c <HAL_ADC_ConfigChannel+0x748>
 8004098:	4b2a      	ldr	r3, [pc, #168]	@ (8004144 <HAL_ADC_ConfigChannel+0x7f0>)
 800409a:	e012      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 800409c:	2300      	movs	r3, #0
 800409e:	e010      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 80040a0:	4b27      	ldr	r3, [pc, #156]	@ (8004140 <HAL_ADC_ConfigChannel+0x7ec>)
 80040a2:	e00e      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 80040a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004110 <HAL_ADC_ConfigChannel+0x7bc>)
 80040a6:	e00c      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 80040a8:	4b18      	ldr	r3, [pc, #96]	@ (800410c <HAL_ADC_ConfigChannel+0x7b8>)
 80040aa:	e00a      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 80040ac:	4b1e      	ldr	r3, [pc, #120]	@ (8004128 <HAL_ADC_ConfigChannel+0x7d4>)
 80040ae:	e008      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 80040b0:	4b1e      	ldr	r3, [pc, #120]	@ (800412c <HAL_ADC_ConfigChannel+0x7d8>)
 80040b2:	e006      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 80040b4:	4b1e      	ldr	r3, [pc, #120]	@ (8004130 <HAL_ADC_ConfigChannel+0x7dc>)
 80040b6:	e004      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 80040b8:	4b1e      	ldr	r3, [pc, #120]	@ (8004134 <HAL_ADC_ConfigChannel+0x7e0>)
 80040ba:	e002      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x76e>
 80040c0:	2300      	movs	r3, #0
 80040c2:	4619      	mov	r1, r3
 80040c4:	4610      	mov	r0, r2
 80040c6:	f7fe fd4b 	bl	8002b60 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f280 80f6 	bge.w	80042c0 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a05      	ldr	r2, [pc, #20]	@ (80040f0 <HAL_ADC_ConfigChannel+0x79c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d004      	beq.n	80040e8 <HAL_ADC_ConfigChannel+0x794>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a15      	ldr	r2, [pc, #84]	@ (8004138 <HAL_ADC_ConfigChannel+0x7e4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d131      	bne.n	800414c <HAL_ADC_ConfigChannel+0x7f8>
 80040e8:	4b17      	ldr	r3, [pc, #92]	@ (8004148 <HAL_ADC_ConfigChannel+0x7f4>)
 80040ea:	e030      	b.n	800414e <HAL_ADC_ConfigChannel+0x7fa>
 80040ec:	47ff0000 	.word	0x47ff0000
 80040f0:	40022000 	.word	0x40022000
 80040f4:	04300002 	.word	0x04300002
 80040f8:	08600004 	.word	0x08600004
 80040fc:	0c900008 	.word	0x0c900008
 8004100:	10c00010 	.word	0x10c00010
 8004104:	14f00020 	.word	0x14f00020
 8004108:	2a000400 	.word	0x2a000400
 800410c:	2e300800 	.word	0x2e300800
 8004110:	32601000 	.word	0x32601000
 8004114:	43210000 	.word	0x43210000
 8004118:	4b840000 	.word	0x4b840000
 800411c:	4fb80000 	.word	0x4fb80000
 8004120:	47520000 	.word	0x47520000
 8004124:	36902000 	.word	0x36902000
 8004128:	25b00200 	.word	0x25b00200
 800412c:	21800100 	.word	0x21800100
 8004130:	1d500080 	.word	0x1d500080
 8004134:	19200040 	.word	0x19200040
 8004138:	40022100 	.word	0x40022100
 800413c:	58026000 	.word	0x58026000
 8004140:	3ac04000 	.word	0x3ac04000
 8004144:	3ef08000 	.word	0x3ef08000
 8004148:	40022300 	.word	0x40022300
 800414c:	4b61      	ldr	r3, [pc, #388]	@ (80042d4 <HAL_ADC_ConfigChannel+0x980>)
 800414e:	4618      	mov	r0, r3
 8004150:	f7fe fcf8 	bl	8002b44 <LL_ADC_GetCommonPathInternalCh>
 8004154:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a5f      	ldr	r2, [pc, #380]	@ (80042d8 <HAL_ADC_ConfigChannel+0x984>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d004      	beq.n	800416a <HAL_ADC_ConfigChannel+0x816>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a5d      	ldr	r2, [pc, #372]	@ (80042dc <HAL_ADC_ConfigChannel+0x988>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d10e      	bne.n	8004188 <HAL_ADC_ConfigChannel+0x834>
 800416a:	485b      	ldr	r0, [pc, #364]	@ (80042d8 <HAL_ADC_ConfigChannel+0x984>)
 800416c:	f7fe ff60 	bl	8003030 <LL_ADC_IsEnabled>
 8004170:	4604      	mov	r4, r0
 8004172:	485a      	ldr	r0, [pc, #360]	@ (80042dc <HAL_ADC_ConfigChannel+0x988>)
 8004174:	f7fe ff5c 	bl	8003030 <LL_ADC_IsEnabled>
 8004178:	4603      	mov	r3, r0
 800417a:	4323      	orrs	r3, r4
 800417c:	2b00      	cmp	r3, #0
 800417e:	bf0c      	ite	eq
 8004180:	2301      	moveq	r3, #1
 8004182:	2300      	movne	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	e008      	b.n	800419a <HAL_ADC_ConfigChannel+0x846>
 8004188:	4855      	ldr	r0, [pc, #340]	@ (80042e0 <HAL_ADC_ConfigChannel+0x98c>)
 800418a:	f7fe ff51 	bl	8003030 <LL_ADC_IsEnabled>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	bf0c      	ite	eq
 8004194:	2301      	moveq	r3, #1
 8004196:	2300      	movne	r3, #0
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d07d      	beq.n	800429a <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a50      	ldr	r2, [pc, #320]	@ (80042e4 <HAL_ADC_ConfigChannel+0x990>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d130      	bne.n	800420a <HAL_ADC_ConfigChannel+0x8b6>
 80041a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d12b      	bne.n	800420a <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a4a      	ldr	r2, [pc, #296]	@ (80042e0 <HAL_ADC_ConfigChannel+0x98c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	f040 8081 	bne.w	80042c0 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a45      	ldr	r2, [pc, #276]	@ (80042d8 <HAL_ADC_ConfigChannel+0x984>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d004      	beq.n	80041d2 <HAL_ADC_ConfigChannel+0x87e>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a43      	ldr	r2, [pc, #268]	@ (80042dc <HAL_ADC_ConfigChannel+0x988>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d101      	bne.n	80041d6 <HAL_ADC_ConfigChannel+0x882>
 80041d2:	4a45      	ldr	r2, [pc, #276]	@ (80042e8 <HAL_ADC_ConfigChannel+0x994>)
 80041d4:	e000      	b.n	80041d8 <HAL_ADC_ConfigChannel+0x884>
 80041d6:	4a3f      	ldr	r2, [pc, #252]	@ (80042d4 <HAL_ADC_ConfigChannel+0x980>)
 80041d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041de:	4619      	mov	r1, r3
 80041e0:	4610      	mov	r0, r2
 80041e2:	f7fe fc9c 	bl	8002b1e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041e6:	4b41      	ldr	r3, [pc, #260]	@ (80042ec <HAL_ADC_ConfigChannel+0x998>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	099b      	lsrs	r3, r3, #6
 80041ec:	4a40      	ldr	r2, [pc, #256]	@ (80042f0 <HAL_ADC_ConfigChannel+0x99c>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	099b      	lsrs	r3, r3, #6
 80041f4:	3301      	adds	r3, #1
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80041fa:	e002      	b.n	8004202 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	3b01      	subs	r3, #1
 8004200:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1f9      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004208:	e05a      	b.n	80042c0 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a39      	ldr	r2, [pc, #228]	@ (80042f4 <HAL_ADC_ConfigChannel+0x9a0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d11e      	bne.n	8004252 <HAL_ADC_ConfigChannel+0x8fe>
 8004214:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004216:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d119      	bne.n	8004252 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a2f      	ldr	r2, [pc, #188]	@ (80042e0 <HAL_ADC_ConfigChannel+0x98c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d14b      	bne.n	80042c0 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a2a      	ldr	r2, [pc, #168]	@ (80042d8 <HAL_ADC_ConfigChannel+0x984>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d004      	beq.n	800423c <HAL_ADC_ConfigChannel+0x8e8>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a29      	ldr	r2, [pc, #164]	@ (80042dc <HAL_ADC_ConfigChannel+0x988>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d101      	bne.n	8004240 <HAL_ADC_ConfigChannel+0x8ec>
 800423c:	4a2a      	ldr	r2, [pc, #168]	@ (80042e8 <HAL_ADC_ConfigChannel+0x994>)
 800423e:	e000      	b.n	8004242 <HAL_ADC_ConfigChannel+0x8ee>
 8004240:	4a24      	ldr	r2, [pc, #144]	@ (80042d4 <HAL_ADC_ConfigChannel+0x980>)
 8004242:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004244:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004248:	4619      	mov	r1, r3
 800424a:	4610      	mov	r0, r2
 800424c:	f7fe fc67 	bl	8002b1e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004250:	e036      	b.n	80042c0 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a28      	ldr	r2, [pc, #160]	@ (80042f8 <HAL_ADC_ConfigChannel+0x9a4>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d131      	bne.n	80042c0 <HAL_ADC_ConfigChannel+0x96c>
 800425c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800425e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d12c      	bne.n	80042c0 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a1d      	ldr	r2, [pc, #116]	@ (80042e0 <HAL_ADC_ConfigChannel+0x98c>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d127      	bne.n	80042c0 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a18      	ldr	r2, [pc, #96]	@ (80042d8 <HAL_ADC_ConfigChannel+0x984>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d004      	beq.n	8004284 <HAL_ADC_ConfigChannel+0x930>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a17      	ldr	r2, [pc, #92]	@ (80042dc <HAL_ADC_ConfigChannel+0x988>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d101      	bne.n	8004288 <HAL_ADC_ConfigChannel+0x934>
 8004284:	4a18      	ldr	r2, [pc, #96]	@ (80042e8 <HAL_ADC_ConfigChannel+0x994>)
 8004286:	e000      	b.n	800428a <HAL_ADC_ConfigChannel+0x936>
 8004288:	4a12      	ldr	r2, [pc, #72]	@ (80042d4 <HAL_ADC_ConfigChannel+0x980>)
 800428a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800428c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004290:	4619      	mov	r1, r3
 8004292:	4610      	mov	r0, r2
 8004294:	f7fe fc43 	bl	8002b1e <LL_ADC_SetCommonPathInternalCh>
 8004298:	e012      	b.n	80042c0 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800429e:	f043 0220 	orr.w	r2, r3, #32
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80042ac:	e008      	b.n	80042c0 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042b2:	f043 0220 	orr.w	r2, r3, #32
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80042c8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3794      	adds	r7, #148	@ 0x94
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd90      	pop	{r4, r7, pc}
 80042d4:	58026300 	.word	0x58026300
 80042d8:	40022000 	.word	0x40022000
 80042dc:	40022100 	.word	0x40022100
 80042e0:	58026000 	.word	0x58026000
 80042e4:	c7520000 	.word	0xc7520000
 80042e8:	40022300 	.word	0x40022300
 80042ec:	2400000c 	.word	0x2400000c
 80042f0:	053e2d63 	.word	0x053e2d63
 80042f4:	c3210000 	.word	0xc3210000
 80042f8:	cb840000 	.word	0xcb840000

080042fc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b088      	sub	sp, #32
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004306:	2300      	movs	r3, #0
 8004308:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4618      	mov	r0, r3
 8004314:	f7fe feda 	bl	80030cc <LL_ADC_REG_IsConversionOngoing>
 8004318:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f7fe fefc 	bl	800311c <LL_ADC_INJ_IsConversionOngoing>
 8004324:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d103      	bne.n	8004334 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 8098 	beq.w	8004464 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d02a      	beq.n	8004398 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	7e5b      	ldrb	r3, [r3, #25]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d126      	bne.n	8004398 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	7e1b      	ldrb	r3, [r3, #24]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d122      	bne.n	8004398 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004352:	2301      	movs	r3, #1
 8004354:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004356:	e014      	b.n	8004382 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	4a45      	ldr	r2, [pc, #276]	@ (8004470 <ADC_ConversionStop+0x174>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d90d      	bls.n	800437c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004364:	f043 0210 	orr.w	r2, r3, #16
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004370:	f043 0201 	orr.w	r2, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e074      	b.n	8004466 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	3301      	adds	r3, #1
 8004380:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800438c:	2b40      	cmp	r3, #64	@ 0x40
 800438e:	d1e3      	bne.n	8004358 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2240      	movs	r2, #64	@ 0x40
 8004396:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	2b02      	cmp	r3, #2
 800439c:	d014      	beq.n	80043c8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fe fe92 	bl	80030cc <LL_ADC_REG_IsConversionOngoing>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00c      	beq.n	80043c8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fe fe4f 	bl	8003056 <LL_ADC_IsDisableOngoing>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d104      	bne.n	80043c8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fe fe6e 	bl	80030a4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d014      	beq.n	80043f8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fe fea2 	bl	800311c <LL_ADC_INJ_IsConversionOngoing>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00c      	beq.n	80043f8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fe fe37 	bl	8003056 <LL_ADC_IsDisableOngoing>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d104      	bne.n	80043f8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fe fe7e 	bl	80030f4 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d005      	beq.n	800440a <ADC_ConversionStop+0x10e>
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	2b03      	cmp	r3, #3
 8004402:	d105      	bne.n	8004410 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004404:	230c      	movs	r3, #12
 8004406:	617b      	str	r3, [r7, #20]
        break;
 8004408:	e005      	b.n	8004416 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800440a:	2308      	movs	r3, #8
 800440c:	617b      	str	r3, [r7, #20]
        break;
 800440e:	e002      	b.n	8004416 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004410:	2304      	movs	r3, #4
 8004412:	617b      	str	r3, [r7, #20]
        break;
 8004414:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004416:	f7fe fb63 	bl	8002ae0 <HAL_GetTick>
 800441a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800441c:	e01b      	b.n	8004456 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800441e:	f7fe fb5f 	bl	8002ae0 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b05      	cmp	r3, #5
 800442a:	d914      	bls.n	8004456 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	4013      	ands	r3, r2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00d      	beq.n	8004456 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800443e:	f043 0210 	orr.w	r2, r3, #16
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800444a:	f043 0201 	orr.w	r2, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e007      	b.n	8004466 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	4013      	ands	r3, r2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1dc      	bne.n	800441e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3720      	adds	r7, #32
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	000cdbff 	.word	0x000cdbff

08004474 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4618      	mov	r0, r3
 8004482:	f7fe fdd5 	bl	8003030 <LL_ADC_IsEnabled>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d16e      	bne.n	800456a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	4b38      	ldr	r3, [pc, #224]	@ (8004574 <ADC_Enable+0x100>)
 8004494:	4013      	ands	r3, r2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00d      	beq.n	80044b6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800449e:	f043 0210 	orr.w	r2, r3, #16
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044aa:	f043 0201 	orr.w	r2, r3, #1
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e05a      	b.n	800456c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fe fd90 	bl	8002fe0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80044c0:	f7fe fb0e 	bl	8002ae0 <HAL_GetTick>
 80044c4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a2b      	ldr	r2, [pc, #172]	@ (8004578 <ADC_Enable+0x104>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d004      	beq.n	80044da <ADC_Enable+0x66>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a29      	ldr	r2, [pc, #164]	@ (800457c <ADC_Enable+0x108>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d101      	bne.n	80044de <ADC_Enable+0x6a>
 80044da:	4b29      	ldr	r3, [pc, #164]	@ (8004580 <ADC_Enable+0x10c>)
 80044dc:	e000      	b.n	80044e0 <ADC_Enable+0x6c>
 80044de:	4b29      	ldr	r3, [pc, #164]	@ (8004584 <ADC_Enable+0x110>)
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7fe fd13 	bl	8002f0c <LL_ADC_GetMultimode>
 80044e6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a23      	ldr	r2, [pc, #140]	@ (800457c <ADC_Enable+0x108>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d002      	beq.n	80044f8 <ADC_Enable+0x84>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	e000      	b.n	80044fa <ADC_Enable+0x86>
 80044f8:	4b1f      	ldr	r3, [pc, #124]	@ (8004578 <ADC_Enable+0x104>)
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6812      	ldr	r2, [r2, #0]
 80044fe:	4293      	cmp	r3, r2
 8004500:	d02c      	beq.n	800455c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d130      	bne.n	800456a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004508:	e028      	b.n	800455c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f7fe fd8e 	bl	8003030 <LL_ADC_IsEnabled>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d104      	bne.n	8004524 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f7fe fd5e 	bl	8002fe0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004524:	f7fe fadc 	bl	8002ae0 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d914      	bls.n	800455c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b01      	cmp	r3, #1
 800453e:	d00d      	beq.n	800455c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004544:	f043 0210 	orr.w	r2, r3, #16
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004550:	f043 0201 	orr.w	r2, r3, #1
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e007      	b.n	800456c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b01      	cmp	r3, #1
 8004568:	d1cf      	bne.n	800450a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	8000003f 	.word	0x8000003f
 8004578:	40022000 	.word	0x40022000
 800457c:	40022100 	.word	0x40022100
 8004580:	40022300 	.word	0x40022300
 8004584:	58026300 	.word	0x58026300

08004588 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f7fe fd5e 	bl	8003056 <LL_ADC_IsDisableOngoing>
 800459a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fe fd45 	bl	8003030 <LL_ADC_IsEnabled>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d047      	beq.n	800463c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d144      	bne.n	800463c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 030d 	and.w	r3, r3, #13
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d10c      	bne.n	80045da <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fe fd1f 	bl	8003008 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2203      	movs	r2, #3
 80045d0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80045d2:	f7fe fa85 	bl	8002ae0 <HAL_GetTick>
 80045d6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80045d8:	e029      	b.n	800462e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045de:	f043 0210 	orr.w	r2, r3, #16
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045ea:	f043 0201 	orr.w	r2, r3, #1
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e023      	b.n	800463e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045f6:	f7fe fa73 	bl	8002ae0 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d914      	bls.n	800462e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00d      	beq.n	800462e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004616:	f043 0210 	orr.w	r2, r3, #16
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004622:	f043 0201 	orr.w	r2, r3, #1
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e007      	b.n	800463e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1dc      	bne.n	80045f6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a6c      	ldr	r2, [pc, #432]	@ (8004808 <ADC_ConfigureBoostMode+0x1c0>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d004      	beq.n	8004664 <ADC_ConfigureBoostMode+0x1c>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a6b      	ldr	r2, [pc, #428]	@ (800480c <ADC_ConfigureBoostMode+0x1c4>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d109      	bne.n	8004678 <ADC_ConfigureBoostMode+0x30>
 8004664:	4b6a      	ldr	r3, [pc, #424]	@ (8004810 <ADC_ConfigureBoostMode+0x1c8>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800466c:	2b00      	cmp	r3, #0
 800466e:	bf14      	ite	ne
 8004670:	2301      	movne	r3, #1
 8004672:	2300      	moveq	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	e008      	b.n	800468a <ADC_ConfigureBoostMode+0x42>
 8004678:	4b66      	ldr	r3, [pc, #408]	@ (8004814 <ADC_ConfigureBoostMode+0x1cc>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004680:	2b00      	cmp	r3, #0
 8004682:	bf14      	ite	ne
 8004684:	2301      	movne	r3, #1
 8004686:	2300      	moveq	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d01c      	beq.n	80046c8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800468e:	f002 fdcd 	bl	800722c <HAL_RCC_GetHCLKFreq>
 8004692:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800469c:	d010      	beq.n	80046c0 <ADC_ConfigureBoostMode+0x78>
 800469e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80046a2:	d873      	bhi.n	800478c <ADC_ConfigureBoostMode+0x144>
 80046a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046a8:	d002      	beq.n	80046b0 <ADC_ConfigureBoostMode+0x68>
 80046aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046ae:	d16d      	bne.n	800478c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	0c1b      	lsrs	r3, r3, #16
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046bc:	60fb      	str	r3, [r7, #12]
        break;
 80046be:	e068      	b.n	8004792 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	089b      	lsrs	r3, r3, #2
 80046c4:	60fb      	str	r3, [r7, #12]
        break;
 80046c6:	e064      	b.n	8004792 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80046c8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80046cc:	f04f 0100 	mov.w	r1, #0
 80046d0:	f003 ffa8 	bl	8008624 <HAL_RCCEx_GetPeriphCLKFreq>
 80046d4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80046de:	d051      	beq.n	8004784 <ADC_ConfigureBoostMode+0x13c>
 80046e0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80046e4:	d854      	bhi.n	8004790 <ADC_ConfigureBoostMode+0x148>
 80046e6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80046ea:	d047      	beq.n	800477c <ADC_ConfigureBoostMode+0x134>
 80046ec:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80046f0:	d84e      	bhi.n	8004790 <ADC_ConfigureBoostMode+0x148>
 80046f2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80046f6:	d03d      	beq.n	8004774 <ADC_ConfigureBoostMode+0x12c>
 80046f8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80046fc:	d848      	bhi.n	8004790 <ADC_ConfigureBoostMode+0x148>
 80046fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004702:	d033      	beq.n	800476c <ADC_ConfigureBoostMode+0x124>
 8004704:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004708:	d842      	bhi.n	8004790 <ADC_ConfigureBoostMode+0x148>
 800470a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800470e:	d029      	beq.n	8004764 <ADC_ConfigureBoostMode+0x11c>
 8004710:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004714:	d83c      	bhi.n	8004790 <ADC_ConfigureBoostMode+0x148>
 8004716:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800471a:	d01a      	beq.n	8004752 <ADC_ConfigureBoostMode+0x10a>
 800471c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004720:	d836      	bhi.n	8004790 <ADC_ConfigureBoostMode+0x148>
 8004722:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004726:	d014      	beq.n	8004752 <ADC_ConfigureBoostMode+0x10a>
 8004728:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800472c:	d830      	bhi.n	8004790 <ADC_ConfigureBoostMode+0x148>
 800472e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004732:	d00e      	beq.n	8004752 <ADC_ConfigureBoostMode+0x10a>
 8004734:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004738:	d82a      	bhi.n	8004790 <ADC_ConfigureBoostMode+0x148>
 800473a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800473e:	d008      	beq.n	8004752 <ADC_ConfigureBoostMode+0x10a>
 8004740:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004744:	d824      	bhi.n	8004790 <ADC_ConfigureBoostMode+0x148>
 8004746:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800474a:	d002      	beq.n	8004752 <ADC_ConfigureBoostMode+0x10a>
 800474c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004750:	d11e      	bne.n	8004790 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	0c9b      	lsrs	r3, r3, #18
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004760:	60fb      	str	r3, [r7, #12]
        break;
 8004762:	e016      	b.n	8004792 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	091b      	lsrs	r3, r3, #4
 8004768:	60fb      	str	r3, [r7, #12]
        break;
 800476a:	e012      	b.n	8004792 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	095b      	lsrs	r3, r3, #5
 8004770:	60fb      	str	r3, [r7, #12]
        break;
 8004772:	e00e      	b.n	8004792 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	099b      	lsrs	r3, r3, #6
 8004778:	60fb      	str	r3, [r7, #12]
        break;
 800477a:	e00a      	b.n	8004792 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	09db      	lsrs	r3, r3, #7
 8004780:	60fb      	str	r3, [r7, #12]
        break;
 8004782:	e006      	b.n	8004792 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	0a1b      	lsrs	r3, r3, #8
 8004788:	60fb      	str	r3, [r7, #12]
        break;
 800478a:	e002      	b.n	8004792 <ADC_ConfigureBoostMode+0x14a>
        break;
 800478c:	bf00      	nop
 800478e:	e000      	b.n	8004792 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004790:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	085b      	lsrs	r3, r3, #1
 8004796:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4a1f      	ldr	r2, [pc, #124]	@ (8004818 <ADC_ConfigureBoostMode+0x1d0>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d808      	bhi.n	80047b2 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80047ae:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80047b0:	e025      	b.n	80047fe <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4a19      	ldr	r2, [pc, #100]	@ (800481c <ADC_ConfigureBoostMode+0x1d4>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d80a      	bhi.n	80047d0 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047cc:	609a      	str	r2, [r3, #8]
}
 80047ce:	e016      	b.n	80047fe <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4a13      	ldr	r2, [pc, #76]	@ (8004820 <ADC_ConfigureBoostMode+0x1d8>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d80a      	bhi.n	80047ee <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047ea:	609a      	str	r2, [r3, #8]
}
 80047ec:	e007      	b.n	80047fe <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80047fc:	609a      	str	r2, [r3, #8]
}
 80047fe:	bf00      	nop
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	40022000 	.word	0x40022000
 800480c:	40022100 	.word	0x40022100
 8004810:	40022300 	.word	0x40022300
 8004814:	58026300 	.word	0x58026300
 8004818:	005f5e10 	.word	0x005f5e10
 800481c:	00bebc20 	.word	0x00bebc20
 8004820:	017d7840 	.word	0x017d7840

08004824 <LL_ADC_IsEnabled>:
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <LL_ADC_IsEnabled+0x18>
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <LL_ADC_IsEnabled+0x1a>
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <LL_ADC_REG_IsConversionOngoing>:
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 0304 	and.w	r3, r3, #4
 800485a:	2b04      	cmp	r3, #4
 800485c:	d101      	bne.n	8004862 <LL_ADC_REG_IsConversionOngoing+0x18>
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004870:	b590      	push	{r4, r7, lr}
 8004872:	b0a3      	sub	sp, #140	@ 0x8c
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004886:	2b01      	cmp	r3, #1
 8004888:	d101      	bne.n	800488e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800488a:	2302      	movs	r3, #2
 800488c:	e0c1      	b.n	8004a12 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004896:	2300      	movs	r3, #0
 8004898:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800489a:	2300      	movs	r3, #0
 800489c:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a5e      	ldr	r2, [pc, #376]	@ (8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d102      	bne.n	80048ae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80048a8:	4b5d      	ldr	r3, [pc, #372]	@ (8004a20 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	e001      	b.n	80048b2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80048ae:	2300      	movs	r3, #0
 80048b0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10b      	bne.n	80048d0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048bc:	f043 0220 	orr.w	r2, r3, #32
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e0a0      	b.n	8004a12 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7ff ffb9 	bl	800484a <LL_ADC_REG_IsConversionOngoing>
 80048d8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff ffb2 	bl	800484a <LL_ADC_REG_IsConversionOngoing>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f040 8081 	bne.w	80049f0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80048ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d17c      	bne.n	80049f0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a48      	ldr	r2, [pc, #288]	@ (8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d004      	beq.n	800490a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a46      	ldr	r2, [pc, #280]	@ (8004a20 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d101      	bne.n	800490e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800490a:	4b46      	ldr	r3, [pc, #280]	@ (8004a24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800490c:	e000      	b.n	8004910 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800490e:	4b46      	ldr	r3, [pc, #280]	@ (8004a28 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004910:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d039      	beq.n	800498e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800491a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	431a      	orrs	r2, r3
 8004928:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800492a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a3a      	ldr	r2, [pc, #232]	@ (8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d004      	beq.n	8004940 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a39      	ldr	r2, [pc, #228]	@ (8004a20 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d10e      	bne.n	800495e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004940:	4836      	ldr	r0, [pc, #216]	@ (8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004942:	f7ff ff6f 	bl	8004824 <LL_ADC_IsEnabled>
 8004946:	4604      	mov	r4, r0
 8004948:	4835      	ldr	r0, [pc, #212]	@ (8004a20 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800494a:	f7ff ff6b 	bl	8004824 <LL_ADC_IsEnabled>
 800494e:	4603      	mov	r3, r0
 8004950:	4323      	orrs	r3, r4
 8004952:	2b00      	cmp	r3, #0
 8004954:	bf0c      	ite	eq
 8004956:	2301      	moveq	r3, #1
 8004958:	2300      	movne	r3, #0
 800495a:	b2db      	uxtb	r3, r3
 800495c:	e008      	b.n	8004970 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800495e:	4833      	ldr	r0, [pc, #204]	@ (8004a2c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004960:	f7ff ff60 	bl	8004824 <LL_ADC_IsEnabled>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	bf0c      	ite	eq
 800496a:	2301      	moveq	r3, #1
 800496c:	2300      	movne	r3, #0
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d047      	beq.n	8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004974:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	4b2d      	ldr	r3, [pc, #180]	@ (8004a30 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800497a:	4013      	ands	r3, r2
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	6811      	ldr	r1, [r2, #0]
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	6892      	ldr	r2, [r2, #8]
 8004984:	430a      	orrs	r2, r1
 8004986:	431a      	orrs	r2, r3
 8004988:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800498a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800498c:	e03a      	b.n	8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800498e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004996:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004998:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a1f      	ldr	r2, [pc, #124]	@ (8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d004      	beq.n	80049ae <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004a20 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d10e      	bne.n	80049cc <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80049ae:	481b      	ldr	r0, [pc, #108]	@ (8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80049b0:	f7ff ff38 	bl	8004824 <LL_ADC_IsEnabled>
 80049b4:	4604      	mov	r4, r0
 80049b6:	481a      	ldr	r0, [pc, #104]	@ (8004a20 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049b8:	f7ff ff34 	bl	8004824 <LL_ADC_IsEnabled>
 80049bc:	4603      	mov	r3, r0
 80049be:	4323      	orrs	r3, r4
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	bf0c      	ite	eq
 80049c4:	2301      	moveq	r3, #1
 80049c6:	2300      	movne	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	e008      	b.n	80049de <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80049cc:	4817      	ldr	r0, [pc, #92]	@ (8004a2c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80049ce:	f7ff ff29 	bl	8004824 <LL_ADC_IsEnabled>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	bf0c      	ite	eq
 80049d8:	2301      	moveq	r3, #1
 80049da:	2300      	movne	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d010      	beq.n	8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80049e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049e4:	689a      	ldr	r2, [r3, #8]
 80049e6:	4b12      	ldr	r3, [pc, #72]	@ (8004a30 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80049e8:	4013      	ands	r3, r2
 80049ea:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80049ec:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049ee:	e009      	b.n	8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049f4:	f043 0220 	orr.w	r2, r3, #32
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004a02:	e000      	b.n	8004a06 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a04:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004a0e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	378c      	adds	r7, #140	@ 0x8c
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd90      	pop	{r4, r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40022000 	.word	0x40022000
 8004a20:	40022100 	.word	0x40022100
 8004a24:	40022300 	.word	0x40022300
 8004a28:	58026300 	.word	0x58026300
 8004a2c:	58026000 	.word	0x58026000
 8004a30:	fffff0e0 	.word	0xfffff0e0

08004a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a44:	4b0b      	ldr	r3, [pc, #44]	@ (8004a74 <__NVIC_SetPriorityGrouping+0x40>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a50:	4013      	ands	r3, r2
 8004a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004a5c:	4b06      	ldr	r3, [pc, #24]	@ (8004a78 <__NVIC_SetPriorityGrouping+0x44>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a62:	4a04      	ldr	r2, [pc, #16]	@ (8004a74 <__NVIC_SetPriorityGrouping+0x40>)
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	60d3      	str	r3, [r2, #12]
}
 8004a68:	bf00      	nop
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	e000ed00 	.word	0xe000ed00
 8004a78:	05fa0000 	.word	0x05fa0000

08004a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a80:	4b04      	ldr	r3, [pc, #16]	@ (8004a94 <__NVIC_GetPriorityGrouping+0x18>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	0a1b      	lsrs	r3, r3, #8
 8004a86:	f003 0307 	and.w	r3, r3, #7
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	e000ed00 	.word	0xe000ed00

08004a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	db0b      	blt.n	8004ac2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aaa:	88fb      	ldrh	r3, [r7, #6]
 8004aac:	f003 021f 	and.w	r2, r3, #31
 8004ab0:	4907      	ldr	r1, [pc, #28]	@ (8004ad0 <__NVIC_EnableIRQ+0x38>)
 8004ab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ab6:	095b      	lsrs	r3, r3, #5
 8004ab8:	2001      	movs	r0, #1
 8004aba:	fa00 f202 	lsl.w	r2, r0, r2
 8004abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	e000e100 	.word	0xe000e100

08004ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	4603      	mov	r3, r0
 8004adc:	6039      	str	r1, [r7, #0]
 8004ade:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ae0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	db0a      	blt.n	8004afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	490c      	ldr	r1, [pc, #48]	@ (8004b20 <__NVIC_SetPriority+0x4c>)
 8004aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004af2:	0112      	lsls	r2, r2, #4
 8004af4:	b2d2      	uxtb	r2, r2
 8004af6:	440b      	add	r3, r1
 8004af8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004afc:	e00a      	b.n	8004b14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	4908      	ldr	r1, [pc, #32]	@ (8004b24 <__NVIC_SetPriority+0x50>)
 8004b04:	88fb      	ldrh	r3, [r7, #6]
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	3b04      	subs	r3, #4
 8004b0c:	0112      	lsls	r2, r2, #4
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	440b      	add	r3, r1
 8004b12:	761a      	strb	r2, [r3, #24]
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	e000e100 	.word	0xe000e100
 8004b24:	e000ed00 	.word	0xe000ed00

08004b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b089      	sub	sp, #36	@ 0x24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	f1c3 0307 	rsb	r3, r3, #7
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	bf28      	it	cs
 8004b46:	2304      	movcs	r3, #4
 8004b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	2b06      	cmp	r3, #6
 8004b50:	d902      	bls.n	8004b58 <NVIC_EncodePriority+0x30>
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	3b03      	subs	r3, #3
 8004b56:	e000      	b.n	8004b5a <NVIC_EncodePriority+0x32>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	fa02 f303 	lsl.w	r3, r2, r3
 8004b66:	43da      	mvns	r2, r3
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	401a      	ands	r2, r3
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b70:	f04f 31ff 	mov.w	r1, #4294967295
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7a:	43d9      	mvns	r1, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b80:	4313      	orrs	r3, r2
         );
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3724      	adds	r7, #36	@ 0x24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
	...

08004b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ba0:	d301      	bcc.n	8004ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e00f      	b.n	8004bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8004bd0 <SysTick_Config+0x40>)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3b01      	subs	r3, #1
 8004bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bae:	210f      	movs	r1, #15
 8004bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb4:	f7ff ff8e 	bl	8004ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bb8:	4b05      	ldr	r3, [pc, #20]	@ (8004bd0 <SysTick_Config+0x40>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bbe:	4b04      	ldr	r3, [pc, #16]	@ (8004bd0 <SysTick_Config+0x40>)
 8004bc0:	2207      	movs	r2, #7
 8004bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	e000e010 	.word	0xe000e010

08004bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7ff ff29 	bl	8004a34 <__NVIC_SetPriorityGrouping>
}
 8004be2:	bf00      	nop
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b086      	sub	sp, #24
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	60b9      	str	r1, [r7, #8]
 8004bf4:	607a      	str	r2, [r7, #4]
 8004bf6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004bf8:	f7ff ff40 	bl	8004a7c <__NVIC_GetPriorityGrouping>
 8004bfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	68b9      	ldr	r1, [r7, #8]
 8004c02:	6978      	ldr	r0, [r7, #20]
 8004c04:	f7ff ff90 	bl	8004b28 <NVIC_EncodePriority>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c0e:	4611      	mov	r1, r2
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff ff5f 	bl	8004ad4 <__NVIC_SetPriority>
}
 8004c16:	bf00      	nop
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b082      	sub	sp, #8
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	4603      	mov	r3, r0
 8004c26:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff ff33 	bl	8004a98 <__NVIC_EnableIRQ>
}
 8004c32:	bf00      	nop
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b082      	sub	sp, #8
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7ff ffa4 	bl	8004b90 <SysTick_Config>
 8004c48:	4603      	mov	r3, r0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b098      	sub	sp, #96	@ 0x60
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004c5c:	4a84      	ldr	r2, [pc, #528]	@ (8004e70 <HAL_FDCAN_Init+0x21c>)
 8004c5e:	f107 030c 	add.w	r3, r7, #12
 8004c62:	4611      	mov	r1, r2
 8004c64:	224c      	movs	r2, #76	@ 0x4c
 8004c66:	4618      	mov	r0, r3
 8004c68:	f006 f9fc 	bl	800b064 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e1c6      	b.n	8005004 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a7e      	ldr	r2, [pc, #504]	@ (8004e74 <HAL_FDCAN_Init+0x220>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d106      	bne.n	8004c8e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004c88:	461a      	mov	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fd fc46 	bl	8002534 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 0210 	bic.w	r2, r2, #16
 8004cb6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cb8:	f7fd ff12 	bl	8002ae0 <HAL_GetTick>
 8004cbc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004cbe:	e014      	b.n	8004cea <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004cc0:	f7fd ff0e 	bl	8002ae0 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b0a      	cmp	r3, #10
 8004ccc:	d90d      	bls.n	8004cea <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cd4:	f043 0201 	orr.w	r2, r3, #1
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2203      	movs	r2, #3
 8004ce2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e18c      	b.n	8005004 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	f003 0308 	and.w	r3, r3, #8
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d0e3      	beq.n	8004cc0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699a      	ldr	r2, [r3, #24]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0201 	orr.w	r2, r2, #1
 8004d06:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d08:	f7fd feea 	bl	8002ae0 <HAL_GetTick>
 8004d0c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004d0e:	e014      	b.n	8004d3a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004d10:	f7fd fee6 	bl	8002ae0 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b0a      	cmp	r3, #10
 8004d1c:	d90d      	bls.n	8004d3a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d24:	f043 0201 	orr.w	r2, r3, #1
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2203      	movs	r2, #3
 8004d32:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e164      	b.n	8005004 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0e3      	beq.n	8004d10 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0202 	orr.w	r2, r2, #2
 8004d56:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	7c1b      	ldrb	r3, [r3, #16]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d108      	bne.n	8004d72 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	699a      	ldr	r2, [r3, #24]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d6e:	619a      	str	r2, [r3, #24]
 8004d70:	e007      	b.n	8004d82 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	699a      	ldr	r2, [r3, #24]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d80:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	7c5b      	ldrb	r3, [r3, #17]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d108      	bne.n	8004d9c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	699a      	ldr	r2, [r3, #24]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d98:	619a      	str	r2, [r3, #24]
 8004d9a:	e007      	b.n	8004dac <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	699a      	ldr	r2, [r3, #24]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004daa:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	7c9b      	ldrb	r3, [r3, #18]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d108      	bne.n	8004dc6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	699a      	ldr	r2, [r3, #24]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004dc2:	619a      	str	r2, [r3, #24]
 8004dc4:	e007      	b.n	8004dd6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	699a      	ldr	r2, [r3, #24]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004dd4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	699a      	ldr	r2, [r3, #24]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004dfa:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	691a      	ldr	r2, [r3, #16]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 0210 	bic.w	r2, r2, #16
 8004e0a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d108      	bne.n	8004e26 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699a      	ldr	r2, [r3, #24]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0204 	orr.w	r2, r2, #4
 8004e22:	619a      	str	r2, [r3, #24]
 8004e24:	e030      	b.n	8004e88 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d02c      	beq.n	8004e88 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d020      	beq.n	8004e78 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	699a      	ldr	r2, [r3, #24]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004e44:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f042 0210 	orr.w	r2, r2, #16
 8004e54:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	d114      	bne.n	8004e88 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	699a      	ldr	r2, [r3, #24]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f042 0220 	orr.w	r2, r2, #32
 8004e6c:	619a      	str	r2, [r3, #24]
 8004e6e:	e00b      	b.n	8004e88 <HAL_FDCAN_Init+0x234>
 8004e70:	0800bc28 	.word	0x0800bc28
 8004e74:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	699a      	ldr	r2, [r3, #24]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0220 	orr.w	r2, r2, #32
 8004e86:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	3b01      	subs	r3, #1
 8004e96:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004e98:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004ea0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004eb0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004eb2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ebc:	d115      	bne.n	8004eea <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004ecc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004ed6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004ee6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004ee8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f10:	4413      	add	r3, r2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d011      	beq.n	8004f3a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004f1e:	f023 0107 	bic.w	r1, r3, #7
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	3360      	adds	r3, #96	@ 0x60
 8004f2a:	443b      	add	r3, r7
 8004f2c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d011      	beq.n	8004f66 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004f4a:	f023 0107 	bic.w	r1, r3, #7
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	3360      	adds	r3, #96	@ 0x60
 8004f56:	443b      	add	r3, r7
 8004f58:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d012      	beq.n	8004f94 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004f76:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	3360      	adds	r3, #96	@ 0x60
 8004f82:	443b      	add	r3, r7
 8004f84:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004f88:	011a      	lsls	r2, r3, #4
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d012      	beq.n	8004fc2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004fa4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	3360      	adds	r3, #96	@ 0x60
 8004fb0:	443b      	add	r3, r7
 8004fb2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004fb6:	021a      	lsls	r2, r3, #8
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a11      	ldr	r2, [pc, #68]	@ (800500c <HAL_FDCAN_Init+0x3b8>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d107      	bne.n	8004fdc <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f022 0203 	bic.w	r2, r2, #3
 8004fda:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 fdf7 	bl	8005be8 <FDCAN_CalcultateRamBlockAddresses>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8005000:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8005004:	4618      	mov	r0, r3
 8005006:	3760      	adds	r7, #96	@ 0x60
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	4000a000 	.word	0x4000a000

08005010 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8005010:	b480      	push	{r7}
 8005012:	b087      	sub	sp, #28
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005020:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005022:	7bfb      	ldrb	r3, [r7, #15]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d002      	beq.n	800502e <HAL_FDCAN_ConfigFilter+0x1e>
 8005028:	7bfb      	ldrb	r3, [r7, #15]
 800502a:	2b02      	cmp	r3, #2
 800502c:	d157      	bne.n	80050de <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d12b      	bne.n	800508e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	2b07      	cmp	r3, #7
 800503c:	d10d      	bne.n	800505a <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800504a:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005050:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8005052:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8005056:	617b      	str	r3, [r7, #20]
 8005058:	e00e      	b.n	8005078 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005066:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800506e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005074:	4313      	orrs	r3, r2
 8005076:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	e025      	b.n	80050da <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	075a      	lsls	r2, r3, #29
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	4313      	orrs	r3, r2
 800509a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	2b07      	cmp	r3, #7
 80050a2:	d103      	bne.n	80050ac <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	613b      	str	r3, [r7, #16]
 80050aa:	e006      	b.n	80050ba <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	079a      	lsls	r2, r3, #30
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	4413      	add	r3, r2
 80050c6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	3304      	adds	r3, #4
 80050d2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	e008      	b.n	80050f0 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050e4:	f043 0202 	orr.w	r2, r3, #2
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
  }
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	371c      	adds	r7, #28
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b01      	cmp	r3, #1
 800510e:	d111      	bne.n	8005134 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2202      	movs	r2, #2
 8005114:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699a      	ldr	r2, [r3, #24]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0201 	bic.w	r2, r2, #1
 8005126:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8005130:	2300      	movs	r3, #0
 8005132:	e008      	b.n	8005146 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800513a:	f043 0204 	orr.w	r2, r3, #4
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
  }
}
 8005146:	4618      	mov	r0, r3
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b086      	sub	sp, #24
 8005156:	af00      	add	r7, sp, #0
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d141      	bne.n	80051ee <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005172:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d109      	bne.n	800518e <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005180:	f043 0220 	orr.w	r2, r3, #32
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e038      	b.n	8005200 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005196:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d009      	beq.n	80051b2 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051a4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e026      	b.n	8005200 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80051ba:	0c1b      	lsrs	r3, r3, #16
 80051bc:	f003 031f 	and.w	r3, r3, #31
 80051c0:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	68b9      	ldr	r1, [r7, #8]
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 fe93 	bl	8005ef4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2101      	movs	r1, #1
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	fa01 f202 	lsl.w	r2, r1, r2
 80051da:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80051de:	2201      	movs	r2, #1
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	409a      	lsls	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	e008      	b.n	8005200 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051f4:	f043 0208 	orr.w	r2, r3, #8
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
  }
}
 8005200:	4618      	mov	r0, r3
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005208:	b480      	push	{r7}
 800520a:	b08b      	sub	sp, #44	@ 0x2c
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005216:	2300      	movs	r3, #0
 8005218:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005220:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005222:	7efb      	ldrb	r3, [r7, #27]
 8005224:	2b02      	cmp	r3, #2
 8005226:	f040 8149 	bne.w	80054bc <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2b40      	cmp	r3, #64	@ 0x40
 800522e:	d14c      	bne.n	80052ca <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005238:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d109      	bne.n	8005254 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005246:	f043 0220 	orr.w	r2, r3, #32
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e13c      	b.n	80054ce <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800525c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005260:	2b00      	cmp	r3, #0
 8005262:	d109      	bne.n	8005278 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800526a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e12a      	b.n	80054ce <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005280:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005284:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005288:	d10a      	bne.n	80052a0 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005292:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005296:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800529a:	d101      	bne.n	80052a0 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800529c:	2301      	movs	r3, #1
 800529e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80052a8:	0a1b      	lsrs	r3, r3, #8
 80052aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052ae:	69fa      	ldr	r2, [r7, #28]
 80052b0:	4413      	add	r3, r2
 80052b2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052bc:	69f9      	ldr	r1, [r7, #28]
 80052be:	fb01 f303 	mul.w	r3, r1, r3
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	4413      	add	r3, r2
 80052c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80052c8:	e068      	b.n	800539c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2b41      	cmp	r3, #65	@ 0x41
 80052ce:	d14c      	bne.n	800536a <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80052d8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d109      	bne.n	80052f4 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052e6:	f043 0220 	orr.w	r2, r3, #32
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e0ec      	b.n	80054ce <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80052fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005300:	2b00      	cmp	r3, #0
 8005302:	d109      	bne.n	8005318 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800530a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e0da      	b.n	80054ce <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005320:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005324:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005328:	d10a      	bne.n	8005340 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005332:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005336:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800533a:	d101      	bne.n	8005340 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800533c:	2301      	movs	r3, #1
 800533e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005348:	0a1b      	lsrs	r3, r3, #8
 800534a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800534e:	69fa      	ldr	r2, [r7, #28]
 8005350:	4413      	add	r3, r2
 8005352:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800535c:	69f9      	ldr	r1, [r7, #28]
 800535e:	fb01 f303 	mul.w	r3, r1, r3
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4413      	add	r3, r2
 8005366:	627b      	str	r3, [r7, #36]	@ 0x24
 8005368:	e018      	b.n	800539c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	429a      	cmp	r2, r3
 8005372:	d309      	bcc.n	8005388 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800537a:	f043 0220 	orr.w	r2, r3, #32
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e0a2      	b.n	80054ce <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005390:	68b9      	ldr	r1, [r7, #8]
 8005392:	fb01 f303 	mul.w	r3, r1, r3
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800539c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d107      	bne.n	80053c0 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80053b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	0c9b      	lsrs	r3, r3, #18
 80053b6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	e005      	b.n	80053cc <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80053c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80053cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80053d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80053e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e6:	3304      	adds	r3, #4
 80053e8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80053ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80053f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	0c1b      	lsrs	r3, r3, #16
 80053fa:	f003 020f 	and.w	r2, r3, #15
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800540e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800541a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	0e1b      	lsrs	r3, r3, #24
 8005420:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	0fda      	lsrs	r2, r3, #31
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005434:	3304      	adds	r3, #4
 8005436:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800543c:	2300      	movs	r3, #0
 800543e:	623b      	str	r3, [r7, #32]
 8005440:	e00a      	b.n	8005458 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	441a      	add	r2, r3
 8005448:	6839      	ldr	r1, [r7, #0]
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	440b      	add	r3, r1
 800544e:	7812      	ldrb	r2, [r2, #0]
 8005450:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	3301      	adds	r3, #1
 8005456:	623b      	str	r3, [r7, #32]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	4a1f      	ldr	r2, [pc, #124]	@ (80054dc <HAL_FDCAN_GetRxMessage+0x2d4>)
 800545e:	5cd3      	ldrb	r3, [r2, r3]
 8005460:	461a      	mov	r2, r3
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	4293      	cmp	r3, r2
 8005466:	d3ec      	bcc.n	8005442 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2b40      	cmp	r3, #64	@ 0x40
 800546c:	d105      	bne.n	800547a <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	69fa      	ldr	r2, [r7, #28]
 8005474:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8005478:	e01e      	b.n	80054b8 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2b41      	cmp	r3, #65	@ 0x41
 800547e:	d105      	bne.n	800548c <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	69fa      	ldr	r2, [r7, #28]
 8005486:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800548a:	e015      	b.n	80054b8 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b1f      	cmp	r3, #31
 8005490:	d808      	bhi.n	80054a4 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2101      	movs	r1, #1
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	fa01 f202 	lsl.w	r2, r1, r2
 800549e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80054a2:	e009      	b.n	80054b8 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	f003 021f 	and.w	r2, r3, #31
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2101      	movs	r1, #1
 80054b0:	fa01 f202 	lsl.w	r2, r1, r2
 80054b4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80054b8:	2300      	movs	r3, #0
 80054ba:	e008      	b.n	80054ce <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054c2:	f043 0208 	orr.w	r2, r3, #8
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
  }
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	372c      	adds	r7, #44	@ 0x2c
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	0800bc84 	.word	0x0800bc84

080054e0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80054f2:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80054f4:	7dfb      	ldrb	r3, [r7, #23]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d002      	beq.n	8005500 <HAL_FDCAN_ActivateNotification+0x20>
 80054fa:	7dfb      	ldrb	r3, [r7, #23]
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d155      	bne.n	80055ac <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	4013      	ands	r3, r2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d108      	bne.n	8005520 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f042 0201 	orr.w	r2, r2, #1
 800551c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800551e:	e014      	b.n	800554a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	4013      	ands	r3, r2
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	429a      	cmp	r2, r3
 800552e:	d108      	bne.n	8005542 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 0202 	orr.w	r2, r2, #2
 800553e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005540:	e003      	b.n	800554a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2203      	movs	r2, #3
 8005548:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005550:	2b00      	cmp	r3, #0
 8005552:	d009      	beq.n	8005568 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	430a      	orrs	r2, r1
 8005564:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800556e:	2b00      	cmp	r3, #0
 8005570:	d009      	beq.n	8005586 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	430a      	orrs	r2, r1
 8005582:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	4b0f      	ldr	r3, [pc, #60]	@ (80055cc <HAL_FDCAN_ActivateNotification+0xec>)
 8005590:	4013      	ands	r3, r2
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	6812      	ldr	r2, [r2, #0]
 8005596:	430b      	orrs	r3, r1
 8005598:	6553      	str	r3, [r2, #84]	@ 0x54
 800559a:	4b0d      	ldr	r3, [pc, #52]	@ (80055d0 <HAL_FDCAN_ActivateNotification+0xf0>)
 800559c:	695a      	ldr	r2, [r3, #20]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	0f9b      	lsrs	r3, r3, #30
 80055a2:	490b      	ldr	r1, [pc, #44]	@ (80055d0 <HAL_FDCAN_ActivateNotification+0xf0>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80055a8:	2300      	movs	r3, #0
 80055aa:	e008      	b.n	80055be <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055b2:	f043 0202 	orr.w	r2, r3, #2
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
  }
}
 80055be:	4618      	mov	r0, r3
 80055c0:	371c      	adds	r7, #28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	3fcfffff 	.word	0x3fcfffff
 80055d0:	4000a800 	.word	0x4000a800

080055d4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b096      	sub	sp, #88	@ 0x58
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80055dc:	4b9a      	ldr	r3, [pc, #616]	@ (8005848 <HAL_FDCAN_IRQHandler+0x274>)
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	079b      	lsls	r3, r3, #30
 80055e2:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80055e4:	4b98      	ldr	r3, [pc, #608]	@ (8005848 <HAL_FDCAN_IRQHandler+0x274>)
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	079b      	lsls	r3, r3, #30
 80055ea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80055ec:	4013      	ands	r3, r2
 80055ee:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055f6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80055fa:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005602:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005604:	4013      	ands	r3, r2
 8005606:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800561a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800561c:	4013      	ands	r3, r2
 800561e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005626:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800562a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005632:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005634:	4013      	ands	r3, r2
 8005636:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800563e:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8005642:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800564a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800564c:	4013      	ands	r3, r2
 800564e:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005656:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800565a:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005662:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005664:	4013      	ands	r3, r2
 8005666:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800566e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005676:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800567a:	0a1b      	lsrs	r3, r3, #8
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	d010      	beq.n	80056a6 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005686:	0a1b      	lsrs	r3, r3, #8
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00a      	beq.n	80056a6 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005698:	651a      	str	r2, [r3, #80]	@ 0x50
 800569a:	4b6b      	ldr	r3, [pc, #428]	@ (8005848 <HAL_FDCAN_IRQHandler+0x274>)
 800569c:	2200      	movs	r2, #0
 800569e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 fa54 	bl	8005b4e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80056a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056a8:	0a9b      	lsrs	r3, r3, #10
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d01d      	beq.n	80056ee <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80056b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b4:	0a9b      	lsrs	r3, r3, #10
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d017      	beq.n	80056ee <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80056c6:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056d2:	4013      	ands	r3, r2
 80056d4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80056de:	651a      	str	r2, [r3, #80]	@ 0x50
 80056e0:	4b59      	ldr	r3, [pc, #356]	@ (8005848 <HAL_FDCAN_IRQHandler+0x274>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80056e6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fa07 	bl	8005afc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80056ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00d      	beq.n	8005710 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056fa:	4b54      	ldr	r3, [pc, #336]	@ (800584c <HAL_FDCAN_IRQHandler+0x278>)
 80056fc:	400b      	ands	r3, r1
 80056fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8005700:	4a51      	ldr	r2, [pc, #324]	@ (8005848 <HAL_FDCAN_IRQHandler+0x274>)
 8005702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005704:	0f9b      	lsrs	r3, r3, #30
 8005706:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005708:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f9c0 	bl	8005a90 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005710:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00d      	beq.n	8005732 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800571c:	4b4b      	ldr	r3, [pc, #300]	@ (800584c <HAL_FDCAN_IRQHandler+0x278>)
 800571e:	400b      	ands	r3, r1
 8005720:	6513      	str	r3, [r2, #80]	@ 0x50
 8005722:	4a49      	ldr	r2, [pc, #292]	@ (8005848 <HAL_FDCAN_IRQHandler+0x274>)
 8005724:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005726:	0f9b      	lsrs	r3, r3, #30
 8005728:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800572a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f9ba 	bl	8005aa6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005732:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00d      	beq.n	8005754 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800573e:	4b43      	ldr	r3, [pc, #268]	@ (800584c <HAL_FDCAN_IRQHandler+0x278>)
 8005740:	400b      	ands	r3, r1
 8005742:	6513      	str	r3, [r2, #80]	@ 0x50
 8005744:	4a40      	ldr	r2, [pc, #256]	@ (8005848 <HAL_FDCAN_IRQHandler+0x274>)
 8005746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005748:	0f9b      	lsrs	r3, r3, #30
 800574a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800574c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7fc fa24 	bl	8001b9c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005754:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00d      	beq.n	8005776 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005760:	4b3a      	ldr	r3, [pc, #232]	@ (800584c <HAL_FDCAN_IRQHandler+0x278>)
 8005762:	400b      	ands	r3, r1
 8005764:	6513      	str	r3, [r2, #80]	@ 0x50
 8005766:	4a38      	ldr	r2, [pc, #224]	@ (8005848 <HAL_FDCAN_IRQHandler+0x274>)
 8005768:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800576a:	0f9b      	lsrs	r3, r3, #30
 800576c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800576e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 f9a3 	bl	8005abc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005778:	0adb      	lsrs	r3, r3, #11
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d010      	beq.n	80057a4 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005784:	0adb      	lsrs	r3, r3, #11
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00a      	beq.n	80057a4 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005796:	651a      	str	r2, [r3, #80]	@ 0x50
 8005798:	4b2b      	ldr	r3, [pc, #172]	@ (8005848 <HAL_FDCAN_IRQHandler+0x274>)
 800579a:	2200      	movs	r2, #0
 800579c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f997 	bl	8005ad2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80057a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057a6:	0a5b      	lsrs	r3, r3, #9
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d01d      	beq.n	80057ec <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80057b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b2:	0a5b      	lsrs	r3, r3, #9
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d017      	beq.n	80057ec <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80057c4:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80057ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057d0:	4013      	ands	r3, r2
 80057d2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057dc:	651a      	str	r2, [r3, #80]	@ 0x50
 80057de:	4b1a      	ldr	r3, [pc, #104]	@ (8005848 <HAL_FDCAN_IRQHandler+0x274>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80057e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f97d 	bl	8005ae6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80057ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057ee:	0cdb      	lsrs	r3, r3, #19
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d010      	beq.n	800581a <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80057f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057fa:	0cdb      	lsrs	r3, r3, #19
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00a      	beq.n	800581a <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800580c:	651a      	str	r2, [r3, #80]	@ 0x50
 800580e:	4b0e      	ldr	r3, [pc, #56]	@ (8005848 <HAL_FDCAN_IRQHandler+0x274>)
 8005810:	2200      	movs	r2, #0
 8005812:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f97c 	bl	8005b12 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800581a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800581c:	0c1b      	lsrs	r3, r3, #16
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d016      	beq.n	8005854 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005828:	0c1b      	lsrs	r3, r3, #16
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d010      	beq.n	8005854 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800583a:	651a      	str	r2, [r3, #80]	@ 0x50
 800583c:	4b02      	ldr	r3, [pc, #8]	@ (8005848 <HAL_FDCAN_IRQHandler+0x274>)
 800583e:	2200      	movs	r2, #0
 8005840:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	e004      	b.n	8005850 <HAL_FDCAN_IRQHandler+0x27c>
 8005846:	bf00      	nop
 8005848:	4000a800 	.word	0x4000a800
 800584c:	3fcfffff 	.word	0x3fcfffff
 8005850:	f000 f969 	bl	8005b26 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005854:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005856:	0c9b      	lsrs	r3, r3, #18
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b00      	cmp	r3, #0
 800585e:	d010      	beq.n	8005882 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005862:	0c9b      	lsrs	r3, r3, #18
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00a      	beq.n	8005882 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005874:	651a      	str	r2, [r3, #80]	@ 0x50
 8005876:	4b83      	ldr	r3, [pc, #524]	@ (8005a84 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005878:	2200      	movs	r2, #0
 800587a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f95c 	bl	8005b3a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005884:	0c5b      	lsrs	r3, r3, #17
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d015      	beq.n	80058ba <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800588e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005890:	0c5b      	lsrs	r3, r3, #17
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00f      	beq.n	80058ba <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80058a2:	651a      	str	r2, [r3, #80]	@ 0x50
 80058a4:	4b77      	ldr	r3, [pc, #476]	@ (8005a84 <HAL_FDCAN_IRQHandler+0x4b0>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058b0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80058ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00d      	beq.n	80058dc <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058c6:	4b70      	ldr	r3, [pc, #448]	@ (8005a88 <HAL_FDCAN_IRQHandler+0x4b4>)
 80058c8:	400b      	ands	r3, r1
 80058ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80058cc:	4a6d      	ldr	r2, [pc, #436]	@ (8005a84 <HAL_FDCAN_IRQHandler+0x4b0>)
 80058ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058d0:	0f9b      	lsrs	r3, r3, #30
 80058d2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80058d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f94d 	bl	8005b76 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80058dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d011      	beq.n	8005906 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80058e8:	4b67      	ldr	r3, [pc, #412]	@ (8005a88 <HAL_FDCAN_IRQHandler+0x4b4>)
 80058ea:	400b      	ands	r3, r1
 80058ec:	6513      	str	r3, [r2, #80]	@ 0x50
 80058ee:	4a65      	ldr	r2, [pc, #404]	@ (8005a84 <HAL_FDCAN_IRQHandler+0x4b0>)
 80058f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058f2:	0f9b      	lsrs	r3, r3, #30
 80058f4:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80058fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a60      	ldr	r2, [pc, #384]	@ (8005a8c <HAL_FDCAN_IRQHandler+0x4b8>)
 800590c:	4293      	cmp	r3, r2
 800590e:	f040 80ac 	bne.w	8005a6a <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f003 0303 	and.w	r3, r3, #3
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 80a4 	beq.w	8005a6a <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	f003 030f 	and.w	r3, r3, #15
 800592c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005934:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005936:	4013      	ands	r3, r2
 8005938:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005944:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800594e:	4013      	ands	r3, r2
 8005950:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800595c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005966:	4013      	ands	r3, r2
 8005968:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	6a1b      	ldr	r3, [r3, #32]
 8005970:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8005974:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800597c:	6a3a      	ldr	r2, [r7, #32]
 800597e:	4013      	ands	r3, r2
 8005980:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 800598c:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005994:	69fa      	ldr	r2, [r7, #28]
 8005996:	4013      	ands	r3, r2
 8005998:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a0:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80059aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d007      	beq.n	80059c0 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059b6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80059b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f8e6 	bl	8005b8c <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80059c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d007      	beq.n	80059d6 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059cc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80059ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f8e6 	bl	8005ba2 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	099b      	lsrs	r3, r3, #6
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d01a      	beq.n	8005a18 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	099b      	lsrs	r3, r3, #6
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d014      	beq.n	8005a18 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059f4:	0c1b      	lsrs	r3, r3, #16
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a04:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	2240      	movs	r2, #64	@ 0x40
 8005a0c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	6939      	ldr	r1, [r7, #16]
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f8d0 	bl	8005bb8 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d007      	beq.n	8005a2e <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a24:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005a26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 f8d1 	bl	8005bd0 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005a2e:	6a3b      	ldr	r3, [r7, #32]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00b      	beq.n	8005a4c <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	6a3a      	ldr	r2, [r7, #32]
 8005a3a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	431a      	orrs	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00b      	beq.n	8005a6a <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	69fa      	ldr	r2, [r7, #28]
 8005a58:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	431a      	orrs	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d002      	beq.n	8005a7a <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 f874 	bl	8005b62 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005a7a:	bf00      	nop
 8005a7c:	3758      	adds	r7, #88	@ 0x58
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	4000a800 	.word	0x4000a800
 8005a88:	3fcfffff 	.word	0x3fcfffff
 8005a8c:	4000a000 	.word	0x4000a000

08005a90 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005a9a:	bf00      	nop
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b083      	sub	sp, #12
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
 8005aae:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005b1a:	bf00      	nop
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b083      	sub	sp, #12
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005b2e:	bf00      	nop
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b083      	sub	sp, #12
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005b42:	bf00      	nop
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b083      	sub	sp, #12
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b083      	sub	sp, #12
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005b6a:	bf00      	nop
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b083      	sub	sp, #12
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8005bda:	bf00      	nop
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
	...

08005be8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bf4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005bfe:	4ba7      	ldr	r3, [pc, #668]	@ (8005e9c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c00:	4013      	ands	r3, r2
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	0091      	lsls	r1, r2, #2
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6812      	ldr	r2, [r2, #0]
 8005c0a:	430b      	orrs	r3, r1
 8005c0c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c18:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c20:	041a      	lsls	r2, r3, #16
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	430a      	orrs	r2, r1
 8005c28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	4413      	add	r3, r2
 8005c34:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005c3e:	4b97      	ldr	r3, [pc, #604]	@ (8005e9c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	0091      	lsls	r1, r2, #2
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	6812      	ldr	r2, [r2, #0]
 8005c4a:	430b      	orrs	r3, r1
 8005c4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c58:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c60:	041a      	lsls	r2, r3, #16
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c70:	005b      	lsls	r3, r3, #1
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	4413      	add	r3, r2
 8005c76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005c80:	4b86      	ldr	r3, [pc, #536]	@ (8005e9c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c82:	4013      	ands	r3, r2
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	0091      	lsls	r1, r2, #2
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	6812      	ldr	r2, [r2, #0]
 8005c8c:	430b      	orrs	r3, r1
 8005c8e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005c9a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca2:	041a      	lsls	r2, r3, #16
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005cb6:	fb02 f303 	mul.w	r3, r2, r3
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005cc8:	4b74      	ldr	r3, [pc, #464]	@ (8005e9c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005cca:	4013      	ands	r3, r2
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	0091      	lsls	r1, r2, #2
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6812      	ldr	r2, [r2, #0]
 8005cd4:	430b      	orrs	r3, r1
 8005cd6:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ce2:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cea:	041a      	lsls	r2, r3, #16
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005cfe:	fb02 f303 	mul.w	r3, r2, r3
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	4413      	add	r3, r2
 8005d06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005d10:	4b62      	ldr	r3, [pc, #392]	@ (8005e9c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d12:	4013      	ands	r3, r2
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	0091      	lsls	r1, r2, #2
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6812      	ldr	r2, [r2, #0]
 8005d1c:	430b      	orrs	r3, r1
 8005d1e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005d2a:	fb02 f303 	mul.w	r3, r2, r3
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	4413      	add	r3, r2
 8005d32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005d3c:	4b57      	ldr	r3, [pc, #348]	@ (8005e9c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d3e:	4013      	ands	r3, r2
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	0091      	lsls	r1, r2, #2
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	6812      	ldr	r2, [r2, #0]
 8005d48:	430b      	orrs	r3, r1
 8005d4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d56:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d5e:	041a      	lsls	r2, r3, #16
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d6e:	005b      	lsls	r3, r3, #1
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	4413      	add	r3, r2
 8005d74:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005d7e:	4b47      	ldr	r3, [pc, #284]	@ (8005e9c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d80:	4013      	ands	r3, r2
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	0091      	lsls	r1, r2, #2
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6812      	ldr	r2, [r2, #0]
 8005d8a:	430b      	orrs	r3, r1
 8005d8c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005d98:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005da0:	041a      	lsls	r2, r3, #16
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005db4:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dbc:	061a      	lsls	r2, r3, #24
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005dcc:	4b34      	ldr	r3, [pc, #208]	@ (8005ea0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005dce:	4413      	add	r3, r2
 8005dd0:	009a      	lsls	r2, r3, #2
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	441a      	add	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	441a      	add	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfe:	6879      	ldr	r1, [r7, #4]
 8005e00:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8005e02:	fb01 f303 	mul.w	r3, r1, r3
 8005e06:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005e08:	441a      	add	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e16:	6879      	ldr	r1, [r7, #4]
 8005e18:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8005e1a:	fb01 f303 	mul.w	r3, r1, r3
 8005e1e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005e20:	441a      	add	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e2e:	6879      	ldr	r1, [r7, #4]
 8005e30:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8005e32:	fb01 f303 	mul.w	r3, r1, r3
 8005e36:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005e38:	441a      	add	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e4a:	00db      	lsls	r3, r3, #3
 8005e4c:	441a      	add	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e5e:	6879      	ldr	r1, [r7, #4]
 8005e60:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005e62:	fb01 f303 	mul.w	r3, r1, r3
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	441a      	add	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e7a:	6879      	ldr	r1, [r7, #4]
 8005e7c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005e7e:	fb01 f303 	mul.w	r3, r1, r3
 8005e82:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005e84:	441a      	add	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e92:	4a04      	ldr	r2, [pc, #16]	@ (8005ea4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d915      	bls.n	8005ec4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005e98:	e006      	b.n	8005ea8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005e9a:	bf00      	nop
 8005e9c:	ffff0003 	.word	0xffff0003
 8005ea0:	10002b00 	.word	0x10002b00
 8005ea4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005eae:	f043 0220 	orr.w	r2, r3, #32
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2203      	movs	r2, #3
 8005ebc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e010      	b.n	8005ee6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	e005      	b.n	8005ed8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d3f3      	bcc.n	8005ecc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop

08005ef4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b089      	sub	sp, #36	@ 0x24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
 8005f00:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10a      	bne.n	8005f20 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005f12:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	61fb      	str	r3, [r7, #28]
 8005f1e:	e00a      	b.n	8005f36 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005f28:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005f2e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005f30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f34:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005f40:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005f46:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005f4c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005f54:	4313      	orrs	r3, r2
 8005f56:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f62:	6839      	ldr	r1, [r7, #0]
 8005f64:	fb01 f303 	mul.w	r3, r1, r3
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	69fa      	ldr	r2, [r7, #28]
 8005f72:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	3304      	adds	r3, #4
 8005f78:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	3304      	adds	r3, #4
 8005f84:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005f86:	2300      	movs	r3, #0
 8005f88:	617b      	str	r3, [r7, #20]
 8005f8a:	e020      	b.n	8005fce <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	3303      	adds	r3, #3
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	4413      	add	r3, r2
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	3302      	adds	r3, #2
 8005f9c:	6879      	ldr	r1, [r7, #4]
 8005f9e:	440b      	add	r3, r1
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005fa4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	440b      	add	r3, r1
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005fb2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	440a      	add	r2, r1
 8005fba:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005fbc:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	4a06      	ldr	r2, [pc, #24]	@ (8005fec <FDCAN_CopyMessageToRAM+0xf8>)
 8005fd4:	5cd3      	ldrb	r3, [r2, r3]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d3d6      	bcc.n	8005f8c <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8005fde:	bf00      	nop
 8005fe0:	bf00      	nop
 8005fe2:	3724      	adds	r7, #36	@ 0x24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	0800bc84 	.word	0x0800bc84

08005ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b089      	sub	sp, #36	@ 0x24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005ffe:	4b86      	ldr	r3, [pc, #536]	@ (8006218 <HAL_GPIO_Init+0x228>)
 8006000:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006002:	e18c      	b.n	800631e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	2101      	movs	r1, #1
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	fa01 f303 	lsl.w	r3, r1, r3
 8006010:	4013      	ands	r3, r2
 8006012:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 817e 	beq.w	8006318 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f003 0303 	and.w	r3, r3, #3
 8006024:	2b01      	cmp	r3, #1
 8006026:	d005      	beq.n	8006034 <HAL_GPIO_Init+0x44>
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f003 0303 	and.w	r3, r3, #3
 8006030:	2b02      	cmp	r3, #2
 8006032:	d130      	bne.n	8006096 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	005b      	lsls	r3, r3, #1
 800603e:	2203      	movs	r2, #3
 8006040:	fa02 f303 	lsl.w	r3, r2, r3
 8006044:	43db      	mvns	r3, r3
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	4013      	ands	r3, r2
 800604a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	fa02 f303 	lsl.w	r3, r2, r3
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	4313      	orrs	r3, r2
 800605c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	69ba      	ldr	r2, [r7, #24]
 8006062:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800606a:	2201      	movs	r2, #1
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	fa02 f303 	lsl.w	r3, r2, r3
 8006072:	43db      	mvns	r3, r3
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	4013      	ands	r3, r2
 8006078:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	091b      	lsrs	r3, r3, #4
 8006080:	f003 0201 	and.w	r2, r3, #1
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	fa02 f303 	lsl.w	r3, r2, r3
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	4313      	orrs	r3, r2
 800608e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f003 0303 	and.w	r3, r3, #3
 800609e:	2b03      	cmp	r3, #3
 80060a0:	d017      	beq.n	80060d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	005b      	lsls	r3, r3, #1
 80060ac:	2203      	movs	r2, #3
 80060ae:	fa02 f303 	lsl.w	r3, r2, r3
 80060b2:	43db      	mvns	r3, r3
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	4013      	ands	r3, r2
 80060b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	689a      	ldr	r2, [r3, #8]
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	005b      	lsls	r3, r3, #1
 80060c2:	fa02 f303 	lsl.w	r3, r2, r3
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f003 0303 	and.w	r3, r3, #3
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d123      	bne.n	8006126 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	08da      	lsrs	r2, r3, #3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	3208      	adds	r2, #8
 80060e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	f003 0307 	and.w	r3, r3, #7
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	220f      	movs	r2, #15
 80060f6:	fa02 f303 	lsl.w	r3, r2, r3
 80060fa:	43db      	mvns	r3, r3
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	4013      	ands	r3, r2
 8006100:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	691a      	ldr	r2, [r3, #16]
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	f003 0307 	and.w	r3, r3, #7
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	fa02 f303 	lsl.w	r3, r2, r3
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	4313      	orrs	r3, r2
 8006116:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	08da      	lsrs	r2, r3, #3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	3208      	adds	r2, #8
 8006120:	69b9      	ldr	r1, [r7, #24]
 8006122:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	005b      	lsls	r3, r3, #1
 8006130:	2203      	movs	r2, #3
 8006132:	fa02 f303 	lsl.w	r3, r2, r3
 8006136:	43db      	mvns	r3, r3
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	4013      	ands	r3, r2
 800613c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f003 0203 	and.w	r2, r3, #3
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	fa02 f303 	lsl.w	r3, r2, r3
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	4313      	orrs	r3, r2
 8006152:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006162:	2b00      	cmp	r3, #0
 8006164:	f000 80d8 	beq.w	8006318 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006168:	4b2c      	ldr	r3, [pc, #176]	@ (800621c <HAL_GPIO_Init+0x22c>)
 800616a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800616e:	4a2b      	ldr	r2, [pc, #172]	@ (800621c <HAL_GPIO_Init+0x22c>)
 8006170:	f043 0302 	orr.w	r3, r3, #2
 8006174:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006178:	4b28      	ldr	r3, [pc, #160]	@ (800621c <HAL_GPIO_Init+0x22c>)
 800617a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006186:	4a26      	ldr	r2, [pc, #152]	@ (8006220 <HAL_GPIO_Init+0x230>)
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	089b      	lsrs	r3, r3, #2
 800618c:	3302      	adds	r3, #2
 800618e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	f003 0303 	and.w	r3, r3, #3
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	220f      	movs	r2, #15
 800619e:	fa02 f303 	lsl.w	r3, r2, r3
 80061a2:	43db      	mvns	r3, r3
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	4013      	ands	r3, r2
 80061a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006224 <HAL_GPIO_Init+0x234>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d04a      	beq.n	8006248 <HAL_GPIO_Init+0x258>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a1c      	ldr	r2, [pc, #112]	@ (8006228 <HAL_GPIO_Init+0x238>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d02b      	beq.n	8006212 <HAL_GPIO_Init+0x222>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a1b      	ldr	r2, [pc, #108]	@ (800622c <HAL_GPIO_Init+0x23c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d025      	beq.n	800620e <HAL_GPIO_Init+0x21e>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a1a      	ldr	r2, [pc, #104]	@ (8006230 <HAL_GPIO_Init+0x240>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d01f      	beq.n	800620a <HAL_GPIO_Init+0x21a>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a19      	ldr	r2, [pc, #100]	@ (8006234 <HAL_GPIO_Init+0x244>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d019      	beq.n	8006206 <HAL_GPIO_Init+0x216>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a18      	ldr	r2, [pc, #96]	@ (8006238 <HAL_GPIO_Init+0x248>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d013      	beq.n	8006202 <HAL_GPIO_Init+0x212>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a17      	ldr	r2, [pc, #92]	@ (800623c <HAL_GPIO_Init+0x24c>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00d      	beq.n	80061fe <HAL_GPIO_Init+0x20e>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a16      	ldr	r2, [pc, #88]	@ (8006240 <HAL_GPIO_Init+0x250>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d007      	beq.n	80061fa <HAL_GPIO_Init+0x20a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a15      	ldr	r2, [pc, #84]	@ (8006244 <HAL_GPIO_Init+0x254>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d101      	bne.n	80061f6 <HAL_GPIO_Init+0x206>
 80061f2:	2309      	movs	r3, #9
 80061f4:	e029      	b.n	800624a <HAL_GPIO_Init+0x25a>
 80061f6:	230a      	movs	r3, #10
 80061f8:	e027      	b.n	800624a <HAL_GPIO_Init+0x25a>
 80061fa:	2307      	movs	r3, #7
 80061fc:	e025      	b.n	800624a <HAL_GPIO_Init+0x25a>
 80061fe:	2306      	movs	r3, #6
 8006200:	e023      	b.n	800624a <HAL_GPIO_Init+0x25a>
 8006202:	2305      	movs	r3, #5
 8006204:	e021      	b.n	800624a <HAL_GPIO_Init+0x25a>
 8006206:	2304      	movs	r3, #4
 8006208:	e01f      	b.n	800624a <HAL_GPIO_Init+0x25a>
 800620a:	2303      	movs	r3, #3
 800620c:	e01d      	b.n	800624a <HAL_GPIO_Init+0x25a>
 800620e:	2302      	movs	r3, #2
 8006210:	e01b      	b.n	800624a <HAL_GPIO_Init+0x25a>
 8006212:	2301      	movs	r3, #1
 8006214:	e019      	b.n	800624a <HAL_GPIO_Init+0x25a>
 8006216:	bf00      	nop
 8006218:	58000080 	.word	0x58000080
 800621c:	58024400 	.word	0x58024400
 8006220:	58000400 	.word	0x58000400
 8006224:	58020000 	.word	0x58020000
 8006228:	58020400 	.word	0x58020400
 800622c:	58020800 	.word	0x58020800
 8006230:	58020c00 	.word	0x58020c00
 8006234:	58021000 	.word	0x58021000
 8006238:	58021400 	.word	0x58021400
 800623c:	58021800 	.word	0x58021800
 8006240:	58021c00 	.word	0x58021c00
 8006244:	58022400 	.word	0x58022400
 8006248:	2300      	movs	r3, #0
 800624a:	69fa      	ldr	r2, [r7, #28]
 800624c:	f002 0203 	and.w	r2, r2, #3
 8006250:	0092      	lsls	r2, r2, #2
 8006252:	4093      	lsls	r3, r2
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	4313      	orrs	r3, r2
 8006258:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800625a:	4938      	ldr	r1, [pc, #224]	@ (800633c <HAL_GPIO_Init+0x34c>)
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	089b      	lsrs	r3, r3, #2
 8006260:	3302      	adds	r3, #2
 8006262:	69ba      	ldr	r2, [r7, #24]
 8006264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006268:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	43db      	mvns	r3, r3
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	4013      	ands	r3, r2
 8006278:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	4313      	orrs	r3, r2
 800628c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800628e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006296:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	43db      	mvns	r3, r3
 80062a2:	69ba      	ldr	r2, [r7, #24]
 80062a4:	4013      	ands	r3, r2
 80062a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d003      	beq.n	80062bc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80062bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	43db      	mvns	r3, r3
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	4013      	ands	r3, r2
 80062d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d003      	beq.n	80062e8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	43db      	mvns	r3, r3
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	4013      	ands	r3, r2
 80062fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d003      	beq.n	8006312 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	4313      	orrs	r3, r2
 8006310:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	3301      	adds	r3, #1
 800631c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	fa22 f303 	lsr.w	r3, r2, r3
 8006328:	2b00      	cmp	r3, #0
 800632a:	f47f ae6b 	bne.w	8006004 <HAL_GPIO_Init+0x14>
  }
}
 800632e:	bf00      	nop
 8006330:	bf00      	nop
 8006332:	3724      	adds	r7, #36	@ 0x24
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	58000400 	.word	0x58000400

08006340 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	460b      	mov	r3, r1
 800634a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	691a      	ldr	r2, [r3, #16]
 8006350:	887b      	ldrh	r3, [r7, #2]
 8006352:	4013      	ands	r3, r2
 8006354:	2b00      	cmp	r3, #0
 8006356:	d002      	beq.n	800635e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006358:	2301      	movs	r3, #1
 800635a:	73fb      	strb	r3, [r7, #15]
 800635c:	e001      	b.n	8006362 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800635e:	2300      	movs	r3, #0
 8006360:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006362:	7bfb      	ldrb	r3, [r7, #15]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	460b      	mov	r3, r1
 800637a:	807b      	strh	r3, [r7, #2]
 800637c:	4613      	mov	r3, r2
 800637e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006380:	787b      	ldrb	r3, [r7, #1]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d003      	beq.n	800638e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006386:	887a      	ldrh	r2, [r7, #2]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800638c:	e003      	b.n	8006396 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800638e:	887b      	ldrh	r3, [r7, #2]
 8006390:	041a      	lsls	r2, r3, #16
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	619a      	str	r2, [r3, #24]
}
 8006396:	bf00      	nop
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
	...

080063a4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80063ac:	4b19      	ldr	r3, [pc, #100]	@ (8006414 <HAL_PWREx_ConfigSupply+0x70>)
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	f003 0304 	and.w	r3, r3, #4
 80063b4:	2b04      	cmp	r3, #4
 80063b6:	d00a      	beq.n	80063ce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80063b8:	4b16      	ldr	r3, [pc, #88]	@ (8006414 <HAL_PWREx_ConfigSupply+0x70>)
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	f003 0307 	and.w	r3, r3, #7
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d001      	beq.n	80063ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e01f      	b.n	800640a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80063ca:	2300      	movs	r3, #0
 80063cc:	e01d      	b.n	800640a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80063ce:	4b11      	ldr	r3, [pc, #68]	@ (8006414 <HAL_PWREx_ConfigSupply+0x70>)
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	f023 0207 	bic.w	r2, r3, #7
 80063d6:	490f      	ldr	r1, [pc, #60]	@ (8006414 <HAL_PWREx_ConfigSupply+0x70>)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80063de:	f7fc fb7f 	bl	8002ae0 <HAL_GetTick>
 80063e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80063e4:	e009      	b.n	80063fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80063e6:	f7fc fb7b 	bl	8002ae0 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063f4:	d901      	bls.n	80063fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e007      	b.n	800640a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80063fa:	4b06      	ldr	r3, [pc, #24]	@ (8006414 <HAL_PWREx_ConfigSupply+0x70>)
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006402:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006406:	d1ee      	bne.n	80063e6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	58024800 	.word	0x58024800

08006418 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b08c      	sub	sp, #48	@ 0x30
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e3c8      	b.n	8006bbc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 8087 	beq.w	8006546 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006438:	4b88      	ldr	r3, [pc, #544]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006440:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006442:	4b86      	ldr	r3, [pc, #536]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 8006444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006446:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800644a:	2b10      	cmp	r3, #16
 800644c:	d007      	beq.n	800645e <HAL_RCC_OscConfig+0x46>
 800644e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006450:	2b18      	cmp	r3, #24
 8006452:	d110      	bne.n	8006476 <HAL_RCC_OscConfig+0x5e>
 8006454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006456:	f003 0303 	and.w	r3, r3, #3
 800645a:	2b02      	cmp	r3, #2
 800645c:	d10b      	bne.n	8006476 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800645e:	4b7f      	ldr	r3, [pc, #508]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d06c      	beq.n	8006544 <HAL_RCC_OscConfig+0x12c>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d168      	bne.n	8006544 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e3a2      	b.n	8006bbc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800647e:	d106      	bne.n	800648e <HAL_RCC_OscConfig+0x76>
 8006480:	4b76      	ldr	r3, [pc, #472]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a75      	ldr	r2, [pc, #468]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 8006486:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800648a:	6013      	str	r3, [r2, #0]
 800648c:	e02e      	b.n	80064ec <HAL_RCC_OscConfig+0xd4>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10c      	bne.n	80064b0 <HAL_RCC_OscConfig+0x98>
 8006496:	4b71      	ldr	r3, [pc, #452]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a70      	ldr	r2, [pc, #448]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 800649c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064a0:	6013      	str	r3, [r2, #0]
 80064a2:	4b6e      	ldr	r3, [pc, #440]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a6d      	ldr	r2, [pc, #436]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 80064a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064ac:	6013      	str	r3, [r2, #0]
 80064ae:	e01d      	b.n	80064ec <HAL_RCC_OscConfig+0xd4>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80064b8:	d10c      	bne.n	80064d4 <HAL_RCC_OscConfig+0xbc>
 80064ba:	4b68      	ldr	r3, [pc, #416]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a67      	ldr	r2, [pc, #412]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 80064c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064c4:	6013      	str	r3, [r2, #0]
 80064c6:	4b65      	ldr	r3, [pc, #404]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a64      	ldr	r2, [pc, #400]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 80064cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064d0:	6013      	str	r3, [r2, #0]
 80064d2:	e00b      	b.n	80064ec <HAL_RCC_OscConfig+0xd4>
 80064d4:	4b61      	ldr	r3, [pc, #388]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a60      	ldr	r2, [pc, #384]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 80064da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064de:	6013      	str	r3, [r2, #0]
 80064e0:	4b5e      	ldr	r3, [pc, #376]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a5d      	ldr	r2, [pc, #372]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 80064e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d013      	beq.n	800651c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f4:	f7fc faf4 	bl	8002ae0 <HAL_GetTick>
 80064f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064fa:	e008      	b.n	800650e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064fc:	f7fc faf0 	bl	8002ae0 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b64      	cmp	r3, #100	@ 0x64
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e356      	b.n	8006bbc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800650e:	4b53      	ldr	r3, [pc, #332]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0f0      	beq.n	80064fc <HAL_RCC_OscConfig+0xe4>
 800651a:	e014      	b.n	8006546 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800651c:	f7fc fae0 	bl	8002ae0 <HAL_GetTick>
 8006520:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006522:	e008      	b.n	8006536 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006524:	f7fc fadc 	bl	8002ae0 <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	2b64      	cmp	r3, #100	@ 0x64
 8006530:	d901      	bls.n	8006536 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e342      	b.n	8006bbc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006536:	4b49      	ldr	r3, [pc, #292]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1f0      	bne.n	8006524 <HAL_RCC_OscConfig+0x10c>
 8006542:	e000      	b.n	8006546 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 808c 	beq.w	800666c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006554:	4b41      	ldr	r3, [pc, #260]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800655c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800655e:	4b3f      	ldr	r3, [pc, #252]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 8006560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006562:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006564:	6a3b      	ldr	r3, [r7, #32]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d007      	beq.n	800657a <HAL_RCC_OscConfig+0x162>
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	2b18      	cmp	r3, #24
 800656e:	d137      	bne.n	80065e0 <HAL_RCC_OscConfig+0x1c8>
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	f003 0303 	and.w	r3, r3, #3
 8006576:	2b00      	cmp	r3, #0
 8006578:	d132      	bne.n	80065e0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800657a:	4b38      	ldr	r3, [pc, #224]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0304 	and.w	r3, r3, #4
 8006582:	2b00      	cmp	r3, #0
 8006584:	d005      	beq.n	8006592 <HAL_RCC_OscConfig+0x17a>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e314      	b.n	8006bbc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006592:	4b32      	ldr	r3, [pc, #200]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f023 0219 	bic.w	r2, r3, #25
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	492f      	ldr	r1, [pc, #188]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065a4:	f7fc fa9c 	bl	8002ae0 <HAL_GetTick>
 80065a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065aa:	e008      	b.n	80065be <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065ac:	f7fc fa98 	bl	8002ae0 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d901      	bls.n	80065be <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e2fe      	b.n	8006bbc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065be:	4b27      	ldr	r3, [pc, #156]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0304 	and.w	r3, r3, #4
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d0f0      	beq.n	80065ac <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065ca:	4b24      	ldr	r3, [pc, #144]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	061b      	lsls	r3, r3, #24
 80065d8:	4920      	ldr	r1, [pc, #128]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065de:	e045      	b.n	800666c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d026      	beq.n	8006636 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80065e8:	4b1c      	ldr	r3, [pc, #112]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f023 0219 	bic.w	r2, r3, #25
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	4919      	ldr	r1, [pc, #100]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065fa:	f7fc fa71 	bl	8002ae0 <HAL_GetTick>
 80065fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006600:	e008      	b.n	8006614 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006602:	f7fc fa6d 	bl	8002ae0 <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	2b02      	cmp	r3, #2
 800660e:	d901      	bls.n	8006614 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e2d3      	b.n	8006bbc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006614:	4b11      	ldr	r3, [pc, #68]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0304 	and.w	r3, r3, #4
 800661c:	2b00      	cmp	r3, #0
 800661e:	d0f0      	beq.n	8006602 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006620:	4b0e      	ldr	r3, [pc, #56]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	061b      	lsls	r3, r3, #24
 800662e:	490b      	ldr	r1, [pc, #44]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 8006630:	4313      	orrs	r3, r2
 8006632:	604b      	str	r3, [r1, #4]
 8006634:	e01a      	b.n	800666c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006636:	4b09      	ldr	r3, [pc, #36]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a08      	ldr	r2, [pc, #32]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 800663c:	f023 0301 	bic.w	r3, r3, #1
 8006640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006642:	f7fc fa4d 	bl	8002ae0 <HAL_GetTick>
 8006646:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006648:	e00a      	b.n	8006660 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800664a:	f7fc fa49 	bl	8002ae0 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	2b02      	cmp	r3, #2
 8006656:	d903      	bls.n	8006660 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e2af      	b.n	8006bbc <HAL_RCC_OscConfig+0x7a4>
 800665c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006660:	4b96      	ldr	r3, [pc, #600]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1ee      	bne.n	800664a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0310 	and.w	r3, r3, #16
 8006674:	2b00      	cmp	r3, #0
 8006676:	d06a      	beq.n	800674e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006678:	4b90      	ldr	r3, [pc, #576]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006680:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006682:	4b8e      	ldr	r3, [pc, #568]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 8006684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006686:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	2b08      	cmp	r3, #8
 800668c:	d007      	beq.n	800669e <HAL_RCC_OscConfig+0x286>
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	2b18      	cmp	r3, #24
 8006692:	d11b      	bne.n	80066cc <HAL_RCC_OscConfig+0x2b4>
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f003 0303 	and.w	r3, r3, #3
 800669a:	2b01      	cmp	r3, #1
 800669c:	d116      	bne.n	80066cc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800669e:	4b87      	ldr	r3, [pc, #540]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d005      	beq.n	80066b6 <HAL_RCC_OscConfig+0x29e>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	2b80      	cmp	r3, #128	@ 0x80
 80066b0:	d001      	beq.n	80066b6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e282      	b.n	8006bbc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066b6:	4b81      	ldr	r3, [pc, #516]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	061b      	lsls	r3, r3, #24
 80066c4:	497d      	ldr	r1, [pc, #500]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066ca:	e040      	b.n	800674e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	69db      	ldr	r3, [r3, #28]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d023      	beq.n	800671c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80066d4:	4b79      	ldr	r3, [pc, #484]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a78      	ldr	r2, [pc, #480]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 80066da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e0:	f7fc f9fe 	bl	8002ae0 <HAL_GetTick>
 80066e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066e6:	e008      	b.n	80066fa <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80066e8:	f7fc f9fa 	bl	8002ae0 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d901      	bls.n	80066fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e260      	b.n	8006bbc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066fa:	4b70      	ldr	r3, [pc, #448]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006702:	2b00      	cmp	r3, #0
 8006704:	d0f0      	beq.n	80066e8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006706:	4b6d      	ldr	r3, [pc, #436]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	061b      	lsls	r3, r3, #24
 8006714:	4969      	ldr	r1, [pc, #420]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 8006716:	4313      	orrs	r3, r2
 8006718:	60cb      	str	r3, [r1, #12]
 800671a:	e018      	b.n	800674e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800671c:	4b67      	ldr	r3, [pc, #412]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a66      	ldr	r2, [pc, #408]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 8006722:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006728:	f7fc f9da 	bl	8002ae0 <HAL_GetTick>
 800672c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800672e:	e008      	b.n	8006742 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006730:	f7fc f9d6 	bl	8002ae0 <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	2b02      	cmp	r3, #2
 800673c:	d901      	bls.n	8006742 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e23c      	b.n	8006bbc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006742:	4b5e      	ldr	r3, [pc, #376]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1f0      	bne.n	8006730 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0308 	and.w	r3, r3, #8
 8006756:	2b00      	cmp	r3, #0
 8006758:	d036      	beq.n	80067c8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d019      	beq.n	8006796 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006762:	4b56      	ldr	r3, [pc, #344]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 8006764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006766:	4a55      	ldr	r2, [pc, #340]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 8006768:	f043 0301 	orr.w	r3, r3, #1
 800676c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800676e:	f7fc f9b7 	bl	8002ae0 <HAL_GetTick>
 8006772:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006774:	e008      	b.n	8006788 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006776:	f7fc f9b3 	bl	8002ae0 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d901      	bls.n	8006788 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e219      	b.n	8006bbc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006788:	4b4c      	ldr	r3, [pc, #304]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 800678a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800678c:	f003 0302 	and.w	r3, r3, #2
 8006790:	2b00      	cmp	r3, #0
 8006792:	d0f0      	beq.n	8006776 <HAL_RCC_OscConfig+0x35e>
 8006794:	e018      	b.n	80067c8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006796:	4b49      	ldr	r3, [pc, #292]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 8006798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800679a:	4a48      	ldr	r2, [pc, #288]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 800679c:	f023 0301 	bic.w	r3, r3, #1
 80067a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a2:	f7fc f99d 	bl	8002ae0 <HAL_GetTick>
 80067a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80067a8:	e008      	b.n	80067bc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067aa:	f7fc f999 	bl	8002ae0 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d901      	bls.n	80067bc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e1ff      	b.n	8006bbc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80067bc:	4b3f      	ldr	r3, [pc, #252]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 80067be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1f0      	bne.n	80067aa <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0320 	and.w	r3, r3, #32
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d036      	beq.n	8006842 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d019      	beq.n	8006810 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80067dc:	4b37      	ldr	r3, [pc, #220]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a36      	ldr	r2, [pc, #216]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 80067e2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80067e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80067e8:	f7fc f97a 	bl	8002ae0 <HAL_GetTick>
 80067ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80067ee:	e008      	b.n	8006802 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067f0:	f7fc f976 	bl	8002ae0 <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d901      	bls.n	8006802 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e1dc      	b.n	8006bbc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006802:	4b2e      	ldr	r3, [pc, #184]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d0f0      	beq.n	80067f0 <HAL_RCC_OscConfig+0x3d8>
 800680e:	e018      	b.n	8006842 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006810:	4b2a      	ldr	r3, [pc, #168]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a29      	ldr	r2, [pc, #164]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 8006816:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800681a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800681c:	f7fc f960 	bl	8002ae0 <HAL_GetTick>
 8006820:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006822:	e008      	b.n	8006836 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006824:	f7fc f95c 	bl	8002ae0 <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	2b02      	cmp	r3, #2
 8006830:	d901      	bls.n	8006836 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e1c2      	b.n	8006bbc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006836:	4b21      	ldr	r3, [pc, #132]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1f0      	bne.n	8006824 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0304 	and.w	r3, r3, #4
 800684a:	2b00      	cmp	r3, #0
 800684c:	f000 8086 	beq.w	800695c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006850:	4b1b      	ldr	r3, [pc, #108]	@ (80068c0 <HAL_RCC_OscConfig+0x4a8>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a1a      	ldr	r2, [pc, #104]	@ (80068c0 <HAL_RCC_OscConfig+0x4a8>)
 8006856:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800685a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800685c:	f7fc f940 	bl	8002ae0 <HAL_GetTick>
 8006860:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006862:	e008      	b.n	8006876 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006864:	f7fc f93c 	bl	8002ae0 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	2b64      	cmp	r3, #100	@ 0x64
 8006870:	d901      	bls.n	8006876 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e1a2      	b.n	8006bbc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006876:	4b12      	ldr	r3, [pc, #72]	@ (80068c0 <HAL_RCC_OscConfig+0x4a8>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800687e:	2b00      	cmp	r3, #0
 8006880:	d0f0      	beq.n	8006864 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d106      	bne.n	8006898 <HAL_RCC_OscConfig+0x480>
 800688a:	4b0c      	ldr	r3, [pc, #48]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 800688c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800688e:	4a0b      	ldr	r2, [pc, #44]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 8006890:	f043 0301 	orr.w	r3, r3, #1
 8006894:	6713      	str	r3, [r2, #112]	@ 0x70
 8006896:	e032      	b.n	80068fe <HAL_RCC_OscConfig+0x4e6>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d111      	bne.n	80068c4 <HAL_RCC_OscConfig+0x4ac>
 80068a0:	4b06      	ldr	r3, [pc, #24]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 80068a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068a4:	4a05      	ldr	r2, [pc, #20]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 80068a6:	f023 0301 	bic.w	r3, r3, #1
 80068aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80068ac:	4b03      	ldr	r3, [pc, #12]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 80068ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068b0:	4a02      	ldr	r2, [pc, #8]	@ (80068bc <HAL_RCC_OscConfig+0x4a4>)
 80068b2:	f023 0304 	bic.w	r3, r3, #4
 80068b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80068b8:	e021      	b.n	80068fe <HAL_RCC_OscConfig+0x4e6>
 80068ba:	bf00      	nop
 80068bc:	58024400 	.word	0x58024400
 80068c0:	58024800 	.word	0x58024800
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	2b05      	cmp	r3, #5
 80068ca:	d10c      	bne.n	80068e6 <HAL_RCC_OscConfig+0x4ce>
 80068cc:	4b83      	ldr	r3, [pc, #524]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 80068ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068d0:	4a82      	ldr	r2, [pc, #520]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 80068d2:	f043 0304 	orr.w	r3, r3, #4
 80068d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80068d8:	4b80      	ldr	r3, [pc, #512]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 80068da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068dc:	4a7f      	ldr	r2, [pc, #508]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 80068de:	f043 0301 	orr.w	r3, r3, #1
 80068e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80068e4:	e00b      	b.n	80068fe <HAL_RCC_OscConfig+0x4e6>
 80068e6:	4b7d      	ldr	r3, [pc, #500]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 80068e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ea:	4a7c      	ldr	r2, [pc, #496]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 80068ec:	f023 0301 	bic.w	r3, r3, #1
 80068f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80068f2:	4b7a      	ldr	r3, [pc, #488]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 80068f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068f6:	4a79      	ldr	r2, [pc, #484]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 80068f8:	f023 0304 	bic.w	r3, r3, #4
 80068fc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d015      	beq.n	8006932 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006906:	f7fc f8eb 	bl	8002ae0 <HAL_GetTick>
 800690a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800690c:	e00a      	b.n	8006924 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800690e:	f7fc f8e7 	bl	8002ae0 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	f241 3288 	movw	r2, #5000	@ 0x1388
 800691c:	4293      	cmp	r3, r2
 800691e:	d901      	bls.n	8006924 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e14b      	b.n	8006bbc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006924:	4b6d      	ldr	r3, [pc, #436]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 8006926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006928:	f003 0302 	and.w	r3, r3, #2
 800692c:	2b00      	cmp	r3, #0
 800692e:	d0ee      	beq.n	800690e <HAL_RCC_OscConfig+0x4f6>
 8006930:	e014      	b.n	800695c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006932:	f7fc f8d5 	bl	8002ae0 <HAL_GetTick>
 8006936:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006938:	e00a      	b.n	8006950 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800693a:	f7fc f8d1 	bl	8002ae0 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006948:	4293      	cmp	r3, r2
 800694a:	d901      	bls.n	8006950 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e135      	b.n	8006bbc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006950:	4b62      	ldr	r3, [pc, #392]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 8006952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006954:	f003 0302 	and.w	r3, r3, #2
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1ee      	bne.n	800693a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 812a 	beq.w	8006bba <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006966:	4b5d      	ldr	r3, [pc, #372]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800696e:	2b18      	cmp	r3, #24
 8006970:	f000 80ba 	beq.w	8006ae8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006978:	2b02      	cmp	r3, #2
 800697a:	f040 8095 	bne.w	8006aa8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800697e:	4b57      	ldr	r3, [pc, #348]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a56      	ldr	r2, [pc, #344]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 8006984:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800698a:	f7fc f8a9 	bl	8002ae0 <HAL_GetTick>
 800698e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006990:	e008      	b.n	80069a4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006992:	f7fc f8a5 	bl	8002ae0 <HAL_GetTick>
 8006996:	4602      	mov	r2, r0
 8006998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	2b02      	cmp	r3, #2
 800699e:	d901      	bls.n	80069a4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e10b      	b.n	8006bbc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069a4:	4b4d      	ldr	r3, [pc, #308]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1f0      	bne.n	8006992 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069b0:	4b4a      	ldr	r3, [pc, #296]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 80069b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069b4:	4b4a      	ldr	r3, [pc, #296]	@ (8006ae0 <HAL_RCC_OscConfig+0x6c8>)
 80069b6:	4013      	ands	r3, r2
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80069c0:	0112      	lsls	r2, r2, #4
 80069c2:	430a      	orrs	r2, r1
 80069c4:	4945      	ldr	r1, [pc, #276]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	628b      	str	r3, [r1, #40]	@ 0x28
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ce:	3b01      	subs	r3, #1
 80069d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069d8:	3b01      	subs	r3, #1
 80069da:	025b      	lsls	r3, r3, #9
 80069dc:	b29b      	uxth	r3, r3
 80069de:	431a      	orrs	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e4:	3b01      	subs	r3, #1
 80069e6:	041b      	lsls	r3, r3, #16
 80069e8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80069ec:	431a      	orrs	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069f2:	3b01      	subs	r3, #1
 80069f4:	061b      	lsls	r3, r3, #24
 80069f6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80069fa:	4938      	ldr	r1, [pc, #224]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006a00:	4b36      	ldr	r3, [pc, #216]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 8006a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a04:	4a35      	ldr	r2, [pc, #212]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 8006a06:	f023 0301 	bic.w	r3, r3, #1
 8006a0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a0c:	4b33      	ldr	r3, [pc, #204]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 8006a0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a10:	4b34      	ldr	r3, [pc, #208]	@ (8006ae4 <HAL_RCC_OscConfig+0x6cc>)
 8006a12:	4013      	ands	r3, r2
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006a18:	00d2      	lsls	r2, r2, #3
 8006a1a:	4930      	ldr	r1, [pc, #192]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006a20:	4b2e      	ldr	r3, [pc, #184]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 8006a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a24:	f023 020c 	bic.w	r2, r3, #12
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a2c:	492b      	ldr	r1, [pc, #172]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006a32:	4b2a      	ldr	r3, [pc, #168]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 8006a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a36:	f023 0202 	bic.w	r2, r3, #2
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a3e:	4927      	ldr	r1, [pc, #156]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a44:	4b25      	ldr	r3, [pc, #148]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 8006a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a48:	4a24      	ldr	r2, [pc, #144]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 8006a4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a50:	4b22      	ldr	r3, [pc, #136]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 8006a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a54:	4a21      	ldr	r2, [pc, #132]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 8006a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 8006a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a60:	4a1e      	ldr	r2, [pc, #120]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 8006a62:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006a68:	4b1c      	ldr	r3, [pc, #112]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 8006a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6c:	4a1b      	ldr	r2, [pc, #108]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 8006a6e:	f043 0301 	orr.w	r3, r3, #1
 8006a72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a74:	4b19      	ldr	r3, [pc, #100]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a18      	ldr	r2, [pc, #96]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 8006a7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a80:	f7fc f82e 	bl	8002ae0 <HAL_GetTick>
 8006a84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a86:	e008      	b.n	8006a9a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a88:	f7fc f82a 	bl	8002ae0 <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d901      	bls.n	8006a9a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e090      	b.n	8006bbc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a9a:	4b10      	ldr	r3, [pc, #64]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d0f0      	beq.n	8006a88 <HAL_RCC_OscConfig+0x670>
 8006aa6:	e088      	b.n	8006bba <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a0b      	ldr	r2, [pc, #44]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 8006aae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab4:	f7fc f814 	bl	8002ae0 <HAL_GetTick>
 8006ab8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006aba:	e008      	b.n	8006ace <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006abc:	f7fc f810 	bl	8002ae0 <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d901      	bls.n	8006ace <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e076      	b.n	8006bbc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ace:	4b03      	ldr	r3, [pc, #12]	@ (8006adc <HAL_RCC_OscConfig+0x6c4>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1f0      	bne.n	8006abc <HAL_RCC_OscConfig+0x6a4>
 8006ada:	e06e      	b.n	8006bba <HAL_RCC_OscConfig+0x7a2>
 8006adc:	58024400 	.word	0x58024400
 8006ae0:	fffffc0c 	.word	0xfffffc0c
 8006ae4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006ae8:	4b36      	ldr	r3, [pc, #216]	@ (8006bc4 <HAL_RCC_OscConfig+0x7ac>)
 8006aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006aee:	4b35      	ldr	r3, [pc, #212]	@ (8006bc4 <HAL_RCC_OscConfig+0x7ac>)
 8006af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d031      	beq.n	8006b60 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	f003 0203 	and.w	r2, r3, #3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d12a      	bne.n	8006b60 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	091b      	lsrs	r3, r3, #4
 8006b0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d122      	bne.n	8006b60 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b24:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d11a      	bne.n	8006b60 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	0a5b      	lsrs	r3, r3, #9
 8006b2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b36:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d111      	bne.n	8006b60 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	0c1b      	lsrs	r3, r3, #16
 8006b40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b48:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d108      	bne.n	8006b60 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	0e1b      	lsrs	r3, r3, #24
 8006b52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b5a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d001      	beq.n	8006b64 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e02b      	b.n	8006bbc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006b64:	4b17      	ldr	r3, [pc, #92]	@ (8006bc4 <HAL_RCC_OscConfig+0x7ac>)
 8006b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b68:	08db      	lsrs	r3, r3, #3
 8006b6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b6e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d01f      	beq.n	8006bba <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006b7a:	4b12      	ldr	r3, [pc, #72]	@ (8006bc4 <HAL_RCC_OscConfig+0x7ac>)
 8006b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b7e:	4a11      	ldr	r2, [pc, #68]	@ (8006bc4 <HAL_RCC_OscConfig+0x7ac>)
 8006b80:	f023 0301 	bic.w	r3, r3, #1
 8006b84:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b86:	f7fb ffab 	bl	8002ae0 <HAL_GetTick>
 8006b8a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006b8c:	bf00      	nop
 8006b8e:	f7fb ffa7 	bl	8002ae0 <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d0f9      	beq.n	8006b8e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8006bc4 <HAL_RCC_OscConfig+0x7ac>)
 8006b9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8006bc8 <HAL_RCC_OscConfig+0x7b0>)
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006ba6:	00d2      	lsls	r2, r2, #3
 8006ba8:	4906      	ldr	r1, [pc, #24]	@ (8006bc4 <HAL_RCC_OscConfig+0x7ac>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006bae:	4b05      	ldr	r3, [pc, #20]	@ (8006bc4 <HAL_RCC_OscConfig+0x7ac>)
 8006bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bb2:	4a04      	ldr	r2, [pc, #16]	@ (8006bc4 <HAL_RCC_OscConfig+0x7ac>)
 8006bb4:	f043 0301 	orr.w	r3, r3, #1
 8006bb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3730      	adds	r7, #48	@ 0x30
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	58024400 	.word	0x58024400
 8006bc8:	ffff0007 	.word	0xffff0007

08006bcc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e19c      	b.n	8006f1a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006be0:	4b8a      	ldr	r3, [pc, #552]	@ (8006e0c <HAL_RCC_ClockConfig+0x240>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 030f 	and.w	r3, r3, #15
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d910      	bls.n	8006c10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bee:	4b87      	ldr	r3, [pc, #540]	@ (8006e0c <HAL_RCC_ClockConfig+0x240>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f023 020f 	bic.w	r2, r3, #15
 8006bf6:	4985      	ldr	r1, [pc, #532]	@ (8006e0c <HAL_RCC_ClockConfig+0x240>)
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bfe:	4b83      	ldr	r3, [pc, #524]	@ (8006e0c <HAL_RCC_ClockConfig+0x240>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 030f 	and.w	r3, r3, #15
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d001      	beq.n	8006c10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e184      	b.n	8006f1a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0304 	and.w	r3, r3, #4
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d010      	beq.n	8006c3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	691a      	ldr	r2, [r3, #16]
 8006c20:	4b7b      	ldr	r3, [pc, #492]	@ (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d908      	bls.n	8006c3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c2c:	4b78      	ldr	r3, [pc, #480]	@ (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	4975      	ldr	r1, [pc, #468]	@ (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0308 	and.w	r3, r3, #8
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d010      	beq.n	8006c6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	695a      	ldr	r2, [r3, #20]
 8006c4e:	4b70      	ldr	r3, [pc, #448]	@ (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d908      	bls.n	8006c6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c5a:	4b6d      	ldr	r3, [pc, #436]	@ (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	496a      	ldr	r1, [pc, #424]	@ (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0310 	and.w	r3, r3, #16
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d010      	beq.n	8006c9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	699a      	ldr	r2, [r3, #24]
 8006c7c:	4b64      	ldr	r3, [pc, #400]	@ (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006c7e:	69db      	ldr	r3, [r3, #28]
 8006c80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d908      	bls.n	8006c9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c88:	4b61      	ldr	r3, [pc, #388]	@ (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006c8a:	69db      	ldr	r3, [r3, #28]
 8006c8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	495e      	ldr	r1, [pc, #376]	@ (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0320 	and.w	r3, r3, #32
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d010      	beq.n	8006cc8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	69da      	ldr	r2, [r3, #28]
 8006caa:	4b59      	ldr	r3, [pc, #356]	@ (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d908      	bls.n	8006cc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006cb6:	4b56      	ldr	r3, [pc, #344]	@ (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	69db      	ldr	r3, [r3, #28]
 8006cc2:	4953      	ldr	r1, [pc, #332]	@ (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d010      	beq.n	8006cf6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	68da      	ldr	r2, [r3, #12]
 8006cd8:	4b4d      	ldr	r3, [pc, #308]	@ (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	f003 030f 	and.w	r3, r3, #15
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d908      	bls.n	8006cf6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ce4:	4b4a      	ldr	r3, [pc, #296]	@ (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	f023 020f 	bic.w	r2, r3, #15
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	4947      	ldr	r1, [pc, #284]	@ (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0301 	and.w	r3, r3, #1
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d055      	beq.n	8006dae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006d02:	4b43      	ldr	r3, [pc, #268]	@ (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	4940      	ldr	r1, [pc, #256]	@ (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d107      	bne.n	8006d2c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d1c:	4b3c      	ldr	r3, [pc, #240]	@ (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d121      	bne.n	8006d6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e0f6      	b.n	8006f1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	2b03      	cmp	r3, #3
 8006d32:	d107      	bne.n	8006d44 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d34:	4b36      	ldr	r3, [pc, #216]	@ (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d115      	bne.n	8006d6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e0ea      	b.n	8006f1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d107      	bne.n	8006d5c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d4c:	4b30      	ldr	r3, [pc, #192]	@ (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d109      	bne.n	8006d6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e0de      	b.n	8006f1a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d5c:	4b2c      	ldr	r3, [pc, #176]	@ (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0304 	and.w	r3, r3, #4
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d101      	bne.n	8006d6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e0d6      	b.n	8006f1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d6c:	4b28      	ldr	r3, [pc, #160]	@ (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	f023 0207 	bic.w	r2, r3, #7
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	4925      	ldr	r1, [pc, #148]	@ (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d7e:	f7fb feaf 	bl	8002ae0 <HAL_GetTick>
 8006d82:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d84:	e00a      	b.n	8006d9c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d86:	f7fb feab 	bl	8002ae0 <HAL_GetTick>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d901      	bls.n	8006d9c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e0be      	b.n	8006f1a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d9c:	4b1c      	ldr	r3, [pc, #112]	@ (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	00db      	lsls	r3, r3, #3
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d1eb      	bne.n	8006d86 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0302 	and.w	r3, r3, #2
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d010      	beq.n	8006ddc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68da      	ldr	r2, [r3, #12]
 8006dbe:	4b14      	ldr	r3, [pc, #80]	@ (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d208      	bcs.n	8006ddc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dca:	4b11      	ldr	r3, [pc, #68]	@ (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	f023 020f 	bic.w	r2, r3, #15
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	490e      	ldr	r1, [pc, #56]	@ (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8006e0c <HAL_RCC_ClockConfig+0x240>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 030f 	and.w	r3, r3, #15
 8006de4:	683a      	ldr	r2, [r7, #0]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d214      	bcs.n	8006e14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dea:	4b08      	ldr	r3, [pc, #32]	@ (8006e0c <HAL_RCC_ClockConfig+0x240>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f023 020f 	bic.w	r2, r3, #15
 8006df2:	4906      	ldr	r1, [pc, #24]	@ (8006e0c <HAL_RCC_ClockConfig+0x240>)
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dfa:	4b04      	ldr	r3, [pc, #16]	@ (8006e0c <HAL_RCC_ClockConfig+0x240>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 030f 	and.w	r3, r3, #15
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d005      	beq.n	8006e14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e086      	b.n	8006f1a <HAL_RCC_ClockConfig+0x34e>
 8006e0c:	52002000 	.word	0x52002000
 8006e10:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0304 	and.w	r3, r3, #4
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d010      	beq.n	8006e42 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	691a      	ldr	r2, [r3, #16]
 8006e24:	4b3f      	ldr	r3, [pc, #252]	@ (8006f24 <HAL_RCC_ClockConfig+0x358>)
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d208      	bcs.n	8006e42 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e30:	4b3c      	ldr	r3, [pc, #240]	@ (8006f24 <HAL_RCC_ClockConfig+0x358>)
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	4939      	ldr	r1, [pc, #228]	@ (8006f24 <HAL_RCC_ClockConfig+0x358>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0308 	and.w	r3, r3, #8
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d010      	beq.n	8006e70 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	695a      	ldr	r2, [r3, #20]
 8006e52:	4b34      	ldr	r3, [pc, #208]	@ (8006f24 <HAL_RCC_ClockConfig+0x358>)
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d208      	bcs.n	8006e70 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e5e:	4b31      	ldr	r3, [pc, #196]	@ (8006f24 <HAL_RCC_ClockConfig+0x358>)
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	492e      	ldr	r1, [pc, #184]	@ (8006f24 <HAL_RCC_ClockConfig+0x358>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0310 	and.w	r3, r3, #16
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d010      	beq.n	8006e9e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	699a      	ldr	r2, [r3, #24]
 8006e80:	4b28      	ldr	r3, [pc, #160]	@ (8006f24 <HAL_RCC_ClockConfig+0x358>)
 8006e82:	69db      	ldr	r3, [r3, #28]
 8006e84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d208      	bcs.n	8006e9e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e8c:	4b25      	ldr	r3, [pc, #148]	@ (8006f24 <HAL_RCC_ClockConfig+0x358>)
 8006e8e:	69db      	ldr	r3, [r3, #28]
 8006e90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	4922      	ldr	r1, [pc, #136]	@ (8006f24 <HAL_RCC_ClockConfig+0x358>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0320 	and.w	r3, r3, #32
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d010      	beq.n	8006ecc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	69da      	ldr	r2, [r3, #28]
 8006eae:	4b1d      	ldr	r3, [pc, #116]	@ (8006f24 <HAL_RCC_ClockConfig+0x358>)
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d208      	bcs.n	8006ecc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006eba:	4b1a      	ldr	r3, [pc, #104]	@ (8006f24 <HAL_RCC_ClockConfig+0x358>)
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	4917      	ldr	r1, [pc, #92]	@ (8006f24 <HAL_RCC_ClockConfig+0x358>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006ecc:	f000 f834 	bl	8006f38 <HAL_RCC_GetSysClockFreq>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	4b14      	ldr	r3, [pc, #80]	@ (8006f24 <HAL_RCC_ClockConfig+0x358>)
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	0a1b      	lsrs	r3, r3, #8
 8006ed8:	f003 030f 	and.w	r3, r3, #15
 8006edc:	4912      	ldr	r1, [pc, #72]	@ (8006f28 <HAL_RCC_ClockConfig+0x35c>)
 8006ede:	5ccb      	ldrb	r3, [r1, r3]
 8006ee0:	f003 031f 	and.w	r3, r3, #31
 8006ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006eea:	4b0e      	ldr	r3, [pc, #56]	@ (8006f24 <HAL_RCC_ClockConfig+0x358>)
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	f003 030f 	and.w	r3, r3, #15
 8006ef2:	4a0d      	ldr	r2, [pc, #52]	@ (8006f28 <HAL_RCC_ClockConfig+0x35c>)
 8006ef4:	5cd3      	ldrb	r3, [r2, r3]
 8006ef6:	f003 031f 	and.w	r3, r3, #31
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	fa22 f303 	lsr.w	r3, r2, r3
 8006f00:	4a0a      	ldr	r2, [pc, #40]	@ (8006f2c <HAL_RCC_ClockConfig+0x360>)
 8006f02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f04:	4a0a      	ldr	r2, [pc, #40]	@ (8006f30 <HAL_RCC_ClockConfig+0x364>)
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8006f34 <HAL_RCC_ClockConfig+0x368>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fb fd9c 	bl	8002a4c <HAL_InitTick>
 8006f14:	4603      	mov	r3, r0
 8006f16:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	58024400 	.word	0x58024400
 8006f28:	0800bc74 	.word	0x0800bc74
 8006f2c:	24000010 	.word	0x24000010
 8006f30:	2400000c 	.word	0x2400000c
 8006f34:	24000014 	.word	0x24000014

08006f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b089      	sub	sp, #36	@ 0x24
 8006f3c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f3e:	4bb3      	ldr	r3, [pc, #716]	@ (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f46:	2b18      	cmp	r3, #24
 8006f48:	f200 8155 	bhi.w	80071f6 <HAL_RCC_GetSysClockFreq+0x2be>
 8006f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f54 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f52:	bf00      	nop
 8006f54:	08006fb9 	.word	0x08006fb9
 8006f58:	080071f7 	.word	0x080071f7
 8006f5c:	080071f7 	.word	0x080071f7
 8006f60:	080071f7 	.word	0x080071f7
 8006f64:	080071f7 	.word	0x080071f7
 8006f68:	080071f7 	.word	0x080071f7
 8006f6c:	080071f7 	.word	0x080071f7
 8006f70:	080071f7 	.word	0x080071f7
 8006f74:	08006fdf 	.word	0x08006fdf
 8006f78:	080071f7 	.word	0x080071f7
 8006f7c:	080071f7 	.word	0x080071f7
 8006f80:	080071f7 	.word	0x080071f7
 8006f84:	080071f7 	.word	0x080071f7
 8006f88:	080071f7 	.word	0x080071f7
 8006f8c:	080071f7 	.word	0x080071f7
 8006f90:	080071f7 	.word	0x080071f7
 8006f94:	08006fe5 	.word	0x08006fe5
 8006f98:	080071f7 	.word	0x080071f7
 8006f9c:	080071f7 	.word	0x080071f7
 8006fa0:	080071f7 	.word	0x080071f7
 8006fa4:	080071f7 	.word	0x080071f7
 8006fa8:	080071f7 	.word	0x080071f7
 8006fac:	080071f7 	.word	0x080071f7
 8006fb0:	080071f7 	.word	0x080071f7
 8006fb4:	08006feb 	.word	0x08006feb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fb8:	4b94      	ldr	r3, [pc, #592]	@ (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0320 	and.w	r3, r3, #32
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d009      	beq.n	8006fd8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fc4:	4b91      	ldr	r3, [pc, #580]	@ (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	08db      	lsrs	r3, r3, #3
 8006fca:	f003 0303 	and.w	r3, r3, #3
 8006fce:	4a90      	ldr	r2, [pc, #576]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006fd6:	e111      	b.n	80071fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006fd8:	4b8d      	ldr	r3, [pc, #564]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006fda:	61bb      	str	r3, [r7, #24]
      break;
 8006fdc:	e10e      	b.n	80071fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006fde:	4b8d      	ldr	r3, [pc, #564]	@ (8007214 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006fe0:	61bb      	str	r3, [r7, #24]
      break;
 8006fe2:	e10b      	b.n	80071fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006fe4:	4b8c      	ldr	r3, [pc, #560]	@ (8007218 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006fe6:	61bb      	str	r3, [r7, #24]
      break;
 8006fe8:	e108      	b.n	80071fc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006fea:	4b88      	ldr	r3, [pc, #544]	@ (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fee:	f003 0303 	and.w	r3, r3, #3
 8006ff2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006ff4:	4b85      	ldr	r3, [pc, #532]	@ (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff8:	091b      	lsrs	r3, r3, #4
 8006ffa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ffe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007000:	4b82      	ldr	r3, [pc, #520]	@ (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007004:	f003 0301 	and.w	r3, r3, #1
 8007008:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800700a:	4b80      	ldr	r3, [pc, #512]	@ (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800700c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800700e:	08db      	lsrs	r3, r3, #3
 8007010:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	fb02 f303 	mul.w	r3, r2, r3
 800701a:	ee07 3a90 	vmov	s15, r3
 800701e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007022:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	2b00      	cmp	r3, #0
 800702a:	f000 80e1 	beq.w	80071f0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2b02      	cmp	r3, #2
 8007032:	f000 8083 	beq.w	800713c <HAL_RCC_GetSysClockFreq+0x204>
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2b02      	cmp	r3, #2
 800703a:	f200 80a1 	bhi.w	8007180 <HAL_RCC_GetSysClockFreq+0x248>
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d003      	beq.n	800704c <HAL_RCC_GetSysClockFreq+0x114>
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d056      	beq.n	80070f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800704a:	e099      	b.n	8007180 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800704c:	4b6f      	ldr	r3, [pc, #444]	@ (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0320 	and.w	r3, r3, #32
 8007054:	2b00      	cmp	r3, #0
 8007056:	d02d      	beq.n	80070b4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007058:	4b6c      	ldr	r3, [pc, #432]	@ (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	08db      	lsrs	r3, r3, #3
 800705e:	f003 0303 	and.w	r3, r3, #3
 8007062:	4a6b      	ldr	r2, [pc, #428]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007064:	fa22 f303 	lsr.w	r3, r2, r3
 8007068:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	ee07 3a90 	vmov	s15, r3
 8007070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	ee07 3a90 	vmov	s15, r3
 800707a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007082:	4b62      	ldr	r3, [pc, #392]	@ (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800708a:	ee07 3a90 	vmov	s15, r3
 800708e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007092:	ed97 6a02 	vldr	s12, [r7, #8]
 8007096:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800721c <HAL_RCC_GetSysClockFreq+0x2e4>
 800709a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800709e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80070b2:	e087      	b.n	80071c4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	ee07 3a90 	vmov	s15, r3
 80070ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070be:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007220 <HAL_RCC_GetSysClockFreq+0x2e8>
 80070c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070c6:	4b51      	ldr	r3, [pc, #324]	@ (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80070da:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800721c <HAL_RCC_GetSysClockFreq+0x2e4>
 80070de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80070f6:	e065      	b.n	80071c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	ee07 3a90 	vmov	s15, r3
 80070fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007102:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007224 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800710a:	4b40      	ldr	r3, [pc, #256]	@ (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800710c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800710e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800711a:	ed97 6a02 	vldr	s12, [r7, #8]
 800711e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800721c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800712a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800712e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007136:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800713a:	e043      	b.n	80071c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	ee07 3a90 	vmov	s15, r3
 8007142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007146:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007228 <HAL_RCC_GetSysClockFreq+0x2f0>
 800714a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800714e:	4b2f      	ldr	r3, [pc, #188]	@ (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800715e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007162:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800721c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800716a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800716e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800717a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800717e:	e021      	b.n	80071c4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007224 <HAL_RCC_GetSysClockFreq+0x2ec>
 800718e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007192:	4b1e      	ldr	r3, [pc, #120]	@ (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80071a6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800721c <HAL_RCC_GetSysClockFreq+0x2e4>
 80071aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071c2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80071c4:	4b11      	ldr	r3, [pc, #68]	@ (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c8:	0a5b      	lsrs	r3, r3, #9
 80071ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071ce:	3301      	adds	r3, #1
 80071d0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	ee07 3a90 	vmov	s15, r3
 80071d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80071dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80071e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071e8:	ee17 3a90 	vmov	r3, s15
 80071ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80071ee:	e005      	b.n	80071fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80071f0:	2300      	movs	r3, #0
 80071f2:	61bb      	str	r3, [r7, #24]
      break;
 80071f4:	e002      	b.n	80071fc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80071f6:	4b07      	ldr	r3, [pc, #28]	@ (8007214 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80071f8:	61bb      	str	r3, [r7, #24]
      break;
 80071fa:	bf00      	nop
  }

  return sysclockfreq;
 80071fc:	69bb      	ldr	r3, [r7, #24]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3724      	adds	r7, #36	@ 0x24
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	58024400 	.word	0x58024400
 8007210:	03d09000 	.word	0x03d09000
 8007214:	003d0900 	.word	0x003d0900
 8007218:	016e3600 	.word	0x016e3600
 800721c:	46000000 	.word	0x46000000
 8007220:	4c742400 	.word	0x4c742400
 8007224:	4a742400 	.word	0x4a742400
 8007228:	4bb71b00 	.word	0x4bb71b00

0800722c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007232:	f7ff fe81 	bl	8006f38 <HAL_RCC_GetSysClockFreq>
 8007236:	4602      	mov	r2, r0
 8007238:	4b10      	ldr	r3, [pc, #64]	@ (800727c <HAL_RCC_GetHCLKFreq+0x50>)
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	0a1b      	lsrs	r3, r3, #8
 800723e:	f003 030f 	and.w	r3, r3, #15
 8007242:	490f      	ldr	r1, [pc, #60]	@ (8007280 <HAL_RCC_GetHCLKFreq+0x54>)
 8007244:	5ccb      	ldrb	r3, [r1, r3]
 8007246:	f003 031f 	and.w	r3, r3, #31
 800724a:	fa22 f303 	lsr.w	r3, r2, r3
 800724e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007250:	4b0a      	ldr	r3, [pc, #40]	@ (800727c <HAL_RCC_GetHCLKFreq+0x50>)
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	f003 030f 	and.w	r3, r3, #15
 8007258:	4a09      	ldr	r2, [pc, #36]	@ (8007280 <HAL_RCC_GetHCLKFreq+0x54>)
 800725a:	5cd3      	ldrb	r3, [r2, r3]
 800725c:	f003 031f 	and.w	r3, r3, #31
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	fa22 f303 	lsr.w	r3, r2, r3
 8007266:	4a07      	ldr	r2, [pc, #28]	@ (8007284 <HAL_RCC_GetHCLKFreq+0x58>)
 8007268:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800726a:	4a07      	ldr	r2, [pc, #28]	@ (8007288 <HAL_RCC_GetHCLKFreq+0x5c>)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007270:	4b04      	ldr	r3, [pc, #16]	@ (8007284 <HAL_RCC_GetHCLKFreq+0x58>)
 8007272:	681b      	ldr	r3, [r3, #0]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	58024400 	.word	0x58024400
 8007280:	0800bc74 	.word	0x0800bc74
 8007284:	24000010 	.word	0x24000010
 8007288:	2400000c 	.word	0x2400000c

0800728c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007290:	f7ff ffcc 	bl	800722c <HAL_RCC_GetHCLKFreq>
 8007294:	4602      	mov	r2, r0
 8007296:	4b06      	ldr	r3, [pc, #24]	@ (80072b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	091b      	lsrs	r3, r3, #4
 800729c:	f003 0307 	and.w	r3, r3, #7
 80072a0:	4904      	ldr	r1, [pc, #16]	@ (80072b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80072a2:	5ccb      	ldrb	r3, [r1, r3]
 80072a4:	f003 031f 	and.w	r3, r3, #31
 80072a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	58024400 	.word	0x58024400
 80072b4:	0800bc74 	.word	0x0800bc74

080072b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80072bc:	f7ff ffb6 	bl	800722c <HAL_RCC_GetHCLKFreq>
 80072c0:	4602      	mov	r2, r0
 80072c2:	4b06      	ldr	r3, [pc, #24]	@ (80072dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80072c4:	69db      	ldr	r3, [r3, #28]
 80072c6:	0a1b      	lsrs	r3, r3, #8
 80072c8:	f003 0307 	and.w	r3, r3, #7
 80072cc:	4904      	ldr	r1, [pc, #16]	@ (80072e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80072ce:	5ccb      	ldrb	r3, [r1, r3]
 80072d0:	f003 031f 	and.w	r3, r3, #31
 80072d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80072d8:	4618      	mov	r0, r3
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	58024400 	.word	0x58024400
 80072e0:	0800bc74 	.word	0x0800bc74

080072e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072e8:	b0c6      	sub	sp, #280	@ 0x118
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80072f0:	2300      	movs	r3, #0
 80072f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80072f6:	2300      	movs	r3, #0
 80072f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80072fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007304:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007308:	2500      	movs	r5, #0
 800730a:	ea54 0305 	orrs.w	r3, r4, r5
 800730e:	d049      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007314:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007316:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800731a:	d02f      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800731c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007320:	d828      	bhi.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007322:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007326:	d01a      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007328:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800732c:	d822      	bhi.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800732e:	2b00      	cmp	r3, #0
 8007330:	d003      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007332:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007336:	d007      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007338:	e01c      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800733a:	4bab      	ldr	r3, [pc, #684]	@ (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800733c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800733e:	4aaa      	ldr	r2, [pc, #680]	@ (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007340:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007344:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007346:	e01a      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800734c:	3308      	adds	r3, #8
 800734e:	2102      	movs	r1, #2
 8007350:	4618      	mov	r0, r3
 8007352:	f002 fa49 	bl	80097e8 <RCCEx_PLL2_Config>
 8007356:	4603      	mov	r3, r0
 8007358:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800735c:	e00f      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800735e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007362:	3328      	adds	r3, #40	@ 0x28
 8007364:	2102      	movs	r1, #2
 8007366:	4618      	mov	r0, r3
 8007368:	f002 faf0 	bl	800994c <RCCEx_PLL3_Config>
 800736c:	4603      	mov	r3, r0
 800736e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007372:	e004      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800737a:	e000      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800737c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800737e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10a      	bne.n	800739c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007386:	4b98      	ldr	r3, [pc, #608]	@ (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800738a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800738e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007392:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007394:	4a94      	ldr	r2, [pc, #592]	@ (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007396:	430b      	orrs	r3, r1
 8007398:	6513      	str	r3, [r2, #80]	@ 0x50
 800739a:	e003      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800739c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80073a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ac:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80073b0:	f04f 0900 	mov.w	r9, #0
 80073b4:	ea58 0309 	orrs.w	r3, r8, r9
 80073b8:	d047      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80073ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073c0:	2b04      	cmp	r3, #4
 80073c2:	d82a      	bhi.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80073c4:	a201      	add	r2, pc, #4	@ (adr r2, 80073cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80073c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ca:	bf00      	nop
 80073cc:	080073e1 	.word	0x080073e1
 80073d0:	080073ef 	.word	0x080073ef
 80073d4:	08007405 	.word	0x08007405
 80073d8:	08007423 	.word	0x08007423
 80073dc:	08007423 	.word	0x08007423
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073e0:	4b81      	ldr	r3, [pc, #516]	@ (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80073e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e4:	4a80      	ldr	r2, [pc, #512]	@ (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80073e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073ec:	e01a      	b.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f2:	3308      	adds	r3, #8
 80073f4:	2100      	movs	r1, #0
 80073f6:	4618      	mov	r0, r3
 80073f8:	f002 f9f6 	bl	80097e8 <RCCEx_PLL2_Config>
 80073fc:	4603      	mov	r3, r0
 80073fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007402:	e00f      	b.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007404:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007408:	3328      	adds	r3, #40	@ 0x28
 800740a:	2100      	movs	r1, #0
 800740c:	4618      	mov	r0, r3
 800740e:	f002 fa9d 	bl	800994c <RCCEx_PLL3_Config>
 8007412:	4603      	mov	r3, r0
 8007414:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007418:	e004      	b.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007420:	e000      	b.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007422:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007424:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10a      	bne.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800742c:	4b6e      	ldr	r3, [pc, #440]	@ (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800742e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007430:	f023 0107 	bic.w	r1, r3, #7
 8007434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800743a:	4a6b      	ldr	r2, [pc, #428]	@ (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800743c:	430b      	orrs	r3, r1
 800743e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007440:	e003      	b.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007442:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007446:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800744a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800744e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007452:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8007456:	f04f 0b00 	mov.w	fp, #0
 800745a:	ea5a 030b 	orrs.w	r3, sl, fp
 800745e:	d05b      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007464:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007468:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800746c:	d03b      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800746e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007472:	d834      	bhi.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007474:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007478:	d037      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x206>
 800747a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800747e:	d82e      	bhi.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007480:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007484:	d033      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007486:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800748a:	d828      	bhi.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800748c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007490:	d01a      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007492:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007496:	d822      	bhi.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007498:	2b00      	cmp	r3, #0
 800749a:	d003      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800749c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074a0:	d007      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80074a2:	e01c      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074a4:	4b50      	ldr	r3, [pc, #320]	@ (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80074a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a8:	4a4f      	ldr	r2, [pc, #316]	@ (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80074aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074b0:	e01e      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b6:	3308      	adds	r3, #8
 80074b8:	2100      	movs	r1, #0
 80074ba:	4618      	mov	r0, r3
 80074bc:	f002 f994 	bl	80097e8 <RCCEx_PLL2_Config>
 80074c0:	4603      	mov	r3, r0
 80074c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80074c6:	e013      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074cc:	3328      	adds	r3, #40	@ 0x28
 80074ce:	2100      	movs	r1, #0
 80074d0:	4618      	mov	r0, r3
 80074d2:	f002 fa3b 	bl	800994c <RCCEx_PLL3_Config>
 80074d6:	4603      	mov	r3, r0
 80074d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074dc:	e008      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80074e4:	e004      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80074e6:	bf00      	nop
 80074e8:	e002      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80074ea:	bf00      	nop
 80074ec:	e000      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80074ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10b      	bne.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80074f8:	4b3b      	ldr	r3, [pc, #236]	@ (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80074fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074fc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007504:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007508:	4a37      	ldr	r2, [pc, #220]	@ (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800750a:	430b      	orrs	r3, r1
 800750c:	6593      	str	r3, [r2, #88]	@ 0x58
 800750e:	e003      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007510:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007514:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800751c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007520:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007524:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007528:	2300      	movs	r3, #0
 800752a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800752e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007532:	460b      	mov	r3, r1
 8007534:	4313      	orrs	r3, r2
 8007536:	d05d      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800753c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007540:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007544:	d03b      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007546:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800754a:	d834      	bhi.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800754c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007550:	d037      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007552:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007556:	d82e      	bhi.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007558:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800755c:	d033      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800755e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007562:	d828      	bhi.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007564:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007568:	d01a      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800756a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800756e:	d822      	bhi.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007570:	2b00      	cmp	r3, #0
 8007572:	d003      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007574:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007578:	d007      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800757a:	e01c      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800757c:	4b1a      	ldr	r3, [pc, #104]	@ (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800757e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007580:	4a19      	ldr	r2, [pc, #100]	@ (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007582:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007586:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007588:	e01e      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800758a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800758e:	3308      	adds	r3, #8
 8007590:	2100      	movs	r1, #0
 8007592:	4618      	mov	r0, r3
 8007594:	f002 f928 	bl	80097e8 <RCCEx_PLL2_Config>
 8007598:	4603      	mov	r3, r0
 800759a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800759e:	e013      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a4:	3328      	adds	r3, #40	@ 0x28
 80075a6:	2100      	movs	r1, #0
 80075a8:	4618      	mov	r0, r3
 80075aa:	f002 f9cf 	bl	800994c <RCCEx_PLL3_Config>
 80075ae:	4603      	mov	r3, r0
 80075b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075b4:	e008      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80075bc:	e004      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80075be:	bf00      	nop
 80075c0:	e002      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80075c2:	bf00      	nop
 80075c4:	e000      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80075c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10d      	bne.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80075d0:	4b05      	ldr	r3, [pc, #20]	@ (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075d4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80075d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80075e0:	4a01      	ldr	r2, [pc, #4]	@ (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075e2:	430b      	orrs	r3, r1
 80075e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80075e6:	e005      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80075e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80075f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007600:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007604:	2300      	movs	r3, #0
 8007606:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800760a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800760e:	460b      	mov	r3, r1
 8007610:	4313      	orrs	r3, r2
 8007612:	d03a      	beq.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800761a:	2b30      	cmp	r3, #48	@ 0x30
 800761c:	d01f      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800761e:	2b30      	cmp	r3, #48	@ 0x30
 8007620:	d819      	bhi.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007622:	2b20      	cmp	r3, #32
 8007624:	d00c      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007626:	2b20      	cmp	r3, #32
 8007628:	d815      	bhi.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800762a:	2b00      	cmp	r3, #0
 800762c:	d019      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800762e:	2b10      	cmp	r3, #16
 8007630:	d111      	bne.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007632:	4baa      	ldr	r3, [pc, #680]	@ (80078dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007636:	4aa9      	ldr	r2, [pc, #676]	@ (80078dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800763c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800763e:	e011      	b.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007644:	3308      	adds	r3, #8
 8007646:	2102      	movs	r1, #2
 8007648:	4618      	mov	r0, r3
 800764a:	f002 f8cd 	bl	80097e8 <RCCEx_PLL2_Config>
 800764e:	4603      	mov	r3, r0
 8007650:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007654:	e006      	b.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800765c:	e002      	b.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800765e:	bf00      	nop
 8007660:	e000      	b.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007662:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007664:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007668:	2b00      	cmp	r3, #0
 800766a:	d10a      	bne.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800766c:	4b9b      	ldr	r3, [pc, #620]	@ (80078dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800766e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007670:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800767a:	4a98      	ldr	r2, [pc, #608]	@ (80078dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800767c:	430b      	orrs	r3, r1
 800767e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007680:	e003      	b.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007682:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007686:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800768a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800768e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007692:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007696:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800769a:	2300      	movs	r3, #0
 800769c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80076a0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80076a4:	460b      	mov	r3, r1
 80076a6:	4313      	orrs	r3, r2
 80076a8:	d051      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80076aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076b4:	d035      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80076b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076ba:	d82e      	bhi.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80076bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80076c0:	d031      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80076c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80076c6:	d828      	bhi.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80076c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076cc:	d01a      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80076ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076d2:	d822      	bhi.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d003      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80076d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076dc:	d007      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80076de:	e01c      	b.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076e0:	4b7e      	ldr	r3, [pc, #504]	@ (80078dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e4:	4a7d      	ldr	r2, [pc, #500]	@ (80078dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80076ec:	e01c      	b.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f2:	3308      	adds	r3, #8
 80076f4:	2100      	movs	r1, #0
 80076f6:	4618      	mov	r0, r3
 80076f8:	f002 f876 	bl	80097e8 <RCCEx_PLL2_Config>
 80076fc:	4603      	mov	r3, r0
 80076fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007702:	e011      	b.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007708:	3328      	adds	r3, #40	@ 0x28
 800770a:	2100      	movs	r1, #0
 800770c:	4618      	mov	r0, r3
 800770e:	f002 f91d 	bl	800994c <RCCEx_PLL3_Config>
 8007712:	4603      	mov	r3, r0
 8007714:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007718:	e006      	b.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007720:	e002      	b.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007722:	bf00      	nop
 8007724:	e000      	b.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007726:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007728:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10a      	bne.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007730:	4b6a      	ldr	r3, [pc, #424]	@ (80078dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007734:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800773c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800773e:	4a67      	ldr	r2, [pc, #412]	@ (80078dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007740:	430b      	orrs	r3, r1
 8007742:	6513      	str	r3, [r2, #80]	@ 0x50
 8007744:	e003      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007746:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800774a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800774e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007756:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800775a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800775e:	2300      	movs	r3, #0
 8007760:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007764:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007768:	460b      	mov	r3, r1
 800776a:	4313      	orrs	r3, r2
 800776c:	d053      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800776e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007772:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007774:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007778:	d033      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800777a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800777e:	d82c      	bhi.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007780:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007784:	d02f      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8007786:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800778a:	d826      	bhi.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800778c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007790:	d02b      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007792:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007796:	d820      	bhi.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007798:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800779c:	d012      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800779e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077a2:	d81a      	bhi.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d022      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80077a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077ac:	d115      	bne.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b2:	3308      	adds	r3, #8
 80077b4:	2101      	movs	r1, #1
 80077b6:	4618      	mov	r0, r3
 80077b8:	f002 f816 	bl	80097e8 <RCCEx_PLL2_Config>
 80077bc:	4603      	mov	r3, r0
 80077be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80077c2:	e015      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077c8:	3328      	adds	r3, #40	@ 0x28
 80077ca:	2101      	movs	r1, #1
 80077cc:	4618      	mov	r0, r3
 80077ce:	f002 f8bd 	bl	800994c <RCCEx_PLL3_Config>
 80077d2:	4603      	mov	r3, r0
 80077d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80077d8:	e00a      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80077e0:	e006      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80077e2:	bf00      	nop
 80077e4:	e004      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80077e6:	bf00      	nop
 80077e8:	e002      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80077ea:	bf00      	nop
 80077ec:	e000      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80077ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10a      	bne.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80077f8:	4b38      	ldr	r3, [pc, #224]	@ (80078dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077fc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007806:	4a35      	ldr	r2, [pc, #212]	@ (80078dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007808:	430b      	orrs	r3, r1
 800780a:	6513      	str	r3, [r2, #80]	@ 0x50
 800780c:	e003      	b.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800780e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007812:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800781a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007822:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007826:	2300      	movs	r3, #0
 8007828:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800782c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007830:	460b      	mov	r3, r1
 8007832:	4313      	orrs	r3, r2
 8007834:	d058      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800783a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800783e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007842:	d033      	beq.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007844:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007848:	d82c      	bhi.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800784a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800784e:	d02f      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007850:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007854:	d826      	bhi.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007856:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800785a:	d02b      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800785c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007860:	d820      	bhi.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007862:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007866:	d012      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007868:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800786c:	d81a      	bhi.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800786e:	2b00      	cmp	r3, #0
 8007870:	d022      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007872:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007876:	d115      	bne.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800787c:	3308      	adds	r3, #8
 800787e:	2101      	movs	r1, #1
 8007880:	4618      	mov	r0, r3
 8007882:	f001 ffb1 	bl	80097e8 <RCCEx_PLL2_Config>
 8007886:	4603      	mov	r3, r0
 8007888:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800788c:	e015      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800788e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007892:	3328      	adds	r3, #40	@ 0x28
 8007894:	2101      	movs	r1, #1
 8007896:	4618      	mov	r0, r3
 8007898:	f002 f858 	bl	800994c <RCCEx_PLL3_Config>
 800789c:	4603      	mov	r3, r0
 800789e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80078a2:	e00a      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80078aa:	e006      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80078ac:	bf00      	nop
 80078ae:	e004      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80078b0:	bf00      	nop
 80078b2:	e002      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80078b4:	bf00      	nop
 80078b6:	e000      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80078b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d10e      	bne.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80078c2:	4b06      	ldr	r3, [pc, #24]	@ (80078dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80078c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078c6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80078ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80078d2:	4a02      	ldr	r2, [pc, #8]	@ (80078dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80078d4:	430b      	orrs	r3, r1
 80078d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80078d8:	e006      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80078da:	bf00      	nop
 80078dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80078e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80078f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80078f8:	2300      	movs	r3, #0
 80078fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80078fe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007902:	460b      	mov	r3, r1
 8007904:	4313      	orrs	r3, r2
 8007906:	d037      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800790c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800790e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007912:	d00e      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007914:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007918:	d816      	bhi.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800791a:	2b00      	cmp	r3, #0
 800791c:	d018      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800791e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007922:	d111      	bne.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007924:	4bc4      	ldr	r3, [pc, #784]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007928:	4ac3      	ldr	r2, [pc, #780]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800792a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800792e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007930:	e00f      	b.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007936:	3308      	adds	r3, #8
 8007938:	2101      	movs	r1, #1
 800793a:	4618      	mov	r0, r3
 800793c:	f001 ff54 	bl	80097e8 <RCCEx_PLL2_Config>
 8007940:	4603      	mov	r3, r0
 8007942:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007946:	e004      	b.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800794e:	e000      	b.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007950:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007952:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10a      	bne.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800795a:	4bb7      	ldr	r3, [pc, #732]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800795c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800795e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007966:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007968:	4ab3      	ldr	r2, [pc, #716]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800796a:	430b      	orrs	r3, r1
 800796c:	6513      	str	r3, [r2, #80]	@ 0x50
 800796e:	e003      	b.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007970:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007974:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800797c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007980:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007984:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007988:	2300      	movs	r3, #0
 800798a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800798e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007992:	460b      	mov	r3, r1
 8007994:	4313      	orrs	r3, r2
 8007996:	d039      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800799c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800799e:	2b03      	cmp	r3, #3
 80079a0:	d81c      	bhi.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80079a2:	a201      	add	r2, pc, #4	@ (adr r2, 80079a8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80079a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a8:	080079e5 	.word	0x080079e5
 80079ac:	080079b9 	.word	0x080079b9
 80079b0:	080079c7 	.word	0x080079c7
 80079b4:	080079e5 	.word	0x080079e5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079b8:	4b9f      	ldr	r3, [pc, #636]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079bc:	4a9e      	ldr	r2, [pc, #632]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80079c4:	e00f      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ca:	3308      	adds	r3, #8
 80079cc:	2102      	movs	r1, #2
 80079ce:	4618      	mov	r0, r3
 80079d0:	f001 ff0a 	bl	80097e8 <RCCEx_PLL2_Config>
 80079d4:	4603      	mov	r3, r0
 80079d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80079da:	e004      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80079e2:	e000      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80079e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d10a      	bne.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80079ee:	4b92      	ldr	r3, [pc, #584]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079f2:	f023 0103 	bic.w	r1, r3, #3
 80079f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079fc:	4a8e      	ldr	r2, [pc, #568]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079fe:	430b      	orrs	r3, r1
 8007a00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a02:	e003      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a14:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007a18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a22:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007a26:	460b      	mov	r3, r1
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	f000 8099 	beq.w	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a2e:	4b83      	ldr	r3, [pc, #524]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a82      	ldr	r2, [pc, #520]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007a34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a3a:	f7fb f851 	bl	8002ae0 <HAL_GetTick>
 8007a3e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a42:	e00b      	b.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a44:	f7fb f84c 	bl	8002ae0 <HAL_GetTick>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	2b64      	cmp	r3, #100	@ 0x64
 8007a52:	d903      	bls.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007a54:	2303      	movs	r3, #3
 8007a56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a5a:	e005      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a5c:	4b77      	ldr	r3, [pc, #476]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d0ed      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007a68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d173      	bne.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007a70:	4b71      	ldr	r3, [pc, #452]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a72:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007a7c:	4053      	eors	r3, r2
 8007a7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d015      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a86:	4b6c      	ldr	r3, [pc, #432]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a8e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a92:	4b69      	ldr	r3, [pc, #420]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a96:	4a68      	ldr	r2, [pc, #416]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a9c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a9e:	4b66      	ldr	r3, [pc, #408]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aa2:	4a65      	ldr	r2, [pc, #404]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007aa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007aa8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007aaa:	4a63      	ldr	r2, [pc, #396]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007aac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ab0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ab6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007aba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007abe:	d118      	bne.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ac0:	f7fb f80e 	bl	8002ae0 <HAL_GetTick>
 8007ac4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ac8:	e00d      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007aca:	f7fb f809 	bl	8002ae0 <HAL_GetTick>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007ad4:	1ad2      	subs	r2, r2, r3
 8007ad6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d903      	bls.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007ae4:	e005      	b.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ae6:	4b54      	ldr	r3, [pc, #336]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aea:	f003 0302 	and.w	r3, r3, #2
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d0eb      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007af2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d129      	bne.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007afe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b0a:	d10e      	bne.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007b0c:	4b4a      	ldr	r3, [pc, #296]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b1c:	091a      	lsrs	r2, r3, #4
 8007b1e:	4b48      	ldr	r3, [pc, #288]	@ (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007b20:	4013      	ands	r3, r2
 8007b22:	4a45      	ldr	r2, [pc, #276]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b24:	430b      	orrs	r3, r1
 8007b26:	6113      	str	r3, [r2, #16]
 8007b28:	e005      	b.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007b2a:	4b43      	ldr	r3, [pc, #268]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	4a42      	ldr	r2, [pc, #264]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007b34:	6113      	str	r3, [r2, #16]
 8007b36:	4b40      	ldr	r3, [pc, #256]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b38:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b46:	4a3c      	ldr	r2, [pc, #240]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b48:	430b      	orrs	r3, r1
 8007b4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b4c:	e008      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b52:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8007b56:	e003      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b68:	f002 0301 	and.w	r3, r2, #1
 8007b6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b70:	2300      	movs	r3, #0
 8007b72:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007b76:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	f000 808f 	beq.w	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b88:	2b28      	cmp	r3, #40	@ 0x28
 8007b8a:	d871      	bhi.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8007b94 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b92:	bf00      	nop
 8007b94:	08007c79 	.word	0x08007c79
 8007b98:	08007c71 	.word	0x08007c71
 8007b9c:	08007c71 	.word	0x08007c71
 8007ba0:	08007c71 	.word	0x08007c71
 8007ba4:	08007c71 	.word	0x08007c71
 8007ba8:	08007c71 	.word	0x08007c71
 8007bac:	08007c71 	.word	0x08007c71
 8007bb0:	08007c71 	.word	0x08007c71
 8007bb4:	08007c45 	.word	0x08007c45
 8007bb8:	08007c71 	.word	0x08007c71
 8007bbc:	08007c71 	.word	0x08007c71
 8007bc0:	08007c71 	.word	0x08007c71
 8007bc4:	08007c71 	.word	0x08007c71
 8007bc8:	08007c71 	.word	0x08007c71
 8007bcc:	08007c71 	.word	0x08007c71
 8007bd0:	08007c71 	.word	0x08007c71
 8007bd4:	08007c5b 	.word	0x08007c5b
 8007bd8:	08007c71 	.word	0x08007c71
 8007bdc:	08007c71 	.word	0x08007c71
 8007be0:	08007c71 	.word	0x08007c71
 8007be4:	08007c71 	.word	0x08007c71
 8007be8:	08007c71 	.word	0x08007c71
 8007bec:	08007c71 	.word	0x08007c71
 8007bf0:	08007c71 	.word	0x08007c71
 8007bf4:	08007c79 	.word	0x08007c79
 8007bf8:	08007c71 	.word	0x08007c71
 8007bfc:	08007c71 	.word	0x08007c71
 8007c00:	08007c71 	.word	0x08007c71
 8007c04:	08007c71 	.word	0x08007c71
 8007c08:	08007c71 	.word	0x08007c71
 8007c0c:	08007c71 	.word	0x08007c71
 8007c10:	08007c71 	.word	0x08007c71
 8007c14:	08007c79 	.word	0x08007c79
 8007c18:	08007c71 	.word	0x08007c71
 8007c1c:	08007c71 	.word	0x08007c71
 8007c20:	08007c71 	.word	0x08007c71
 8007c24:	08007c71 	.word	0x08007c71
 8007c28:	08007c71 	.word	0x08007c71
 8007c2c:	08007c71 	.word	0x08007c71
 8007c30:	08007c71 	.word	0x08007c71
 8007c34:	08007c79 	.word	0x08007c79
 8007c38:	58024400 	.word	0x58024400
 8007c3c:	58024800 	.word	0x58024800
 8007c40:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c48:	3308      	adds	r3, #8
 8007c4a:	2101      	movs	r1, #1
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f001 fdcb 	bl	80097e8 <RCCEx_PLL2_Config>
 8007c52:	4603      	mov	r3, r0
 8007c54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007c58:	e00f      	b.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c5e:	3328      	adds	r3, #40	@ 0x28
 8007c60:	2101      	movs	r1, #1
 8007c62:	4618      	mov	r0, r3
 8007c64:	f001 fe72 	bl	800994c <RCCEx_PLL3_Config>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007c6e:	e004      	b.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c76:	e000      	b.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10a      	bne.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007c82:	4bbf      	ldr	r3, [pc, #764]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c86:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c90:	4abb      	ldr	r2, [pc, #748]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007c92:	430b      	orrs	r3, r1
 8007c94:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c96:	e003      	b.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca8:	f002 0302 	and.w	r3, r2, #2
 8007cac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007cb6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	d041      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cc6:	2b05      	cmp	r3, #5
 8007cc8:	d824      	bhi.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007cca:	a201      	add	r2, pc, #4	@ (adr r2, 8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd0:	08007d1d 	.word	0x08007d1d
 8007cd4:	08007ce9 	.word	0x08007ce9
 8007cd8:	08007cff 	.word	0x08007cff
 8007cdc:	08007d1d 	.word	0x08007d1d
 8007ce0:	08007d1d 	.word	0x08007d1d
 8007ce4:	08007d1d 	.word	0x08007d1d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cec:	3308      	adds	r3, #8
 8007cee:	2101      	movs	r1, #1
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f001 fd79 	bl	80097e8 <RCCEx_PLL2_Config>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007cfc:	e00f      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d02:	3328      	adds	r3, #40	@ 0x28
 8007d04:	2101      	movs	r1, #1
 8007d06:	4618      	mov	r0, r3
 8007d08:	f001 fe20 	bl	800994c <RCCEx_PLL3_Config>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007d12:	e004      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d1a:	e000      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d10a      	bne.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007d26:	4b96      	ldr	r3, [pc, #600]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d2a:	f023 0107 	bic.w	r1, r3, #7
 8007d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d34:	4a92      	ldr	r2, [pc, #584]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007d36:	430b      	orrs	r3, r1
 8007d38:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d3a:	e003      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4c:	f002 0304 	and.w	r3, r2, #4
 8007d50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007d54:	2300      	movs	r3, #0
 8007d56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d5a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007d5e:	460b      	mov	r3, r1
 8007d60:	4313      	orrs	r3, r2
 8007d62:	d044      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d6c:	2b05      	cmp	r3, #5
 8007d6e:	d825      	bhi.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007d70:	a201      	add	r2, pc, #4	@ (adr r2, 8007d78 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d76:	bf00      	nop
 8007d78:	08007dc5 	.word	0x08007dc5
 8007d7c:	08007d91 	.word	0x08007d91
 8007d80:	08007da7 	.word	0x08007da7
 8007d84:	08007dc5 	.word	0x08007dc5
 8007d88:	08007dc5 	.word	0x08007dc5
 8007d8c:	08007dc5 	.word	0x08007dc5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d94:	3308      	adds	r3, #8
 8007d96:	2101      	movs	r1, #1
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f001 fd25 	bl	80097e8 <RCCEx_PLL2_Config>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007da4:	e00f      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007daa:	3328      	adds	r3, #40	@ 0x28
 8007dac:	2101      	movs	r1, #1
 8007dae:	4618      	mov	r0, r3
 8007db0:	f001 fdcc 	bl	800994c <RCCEx_PLL3_Config>
 8007db4:	4603      	mov	r3, r0
 8007db6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007dba:	e004      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007dc2:	e000      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007dc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d10b      	bne.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007dce:	4b6c      	ldr	r3, [pc, #432]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dd2:	f023 0107 	bic.w	r1, r3, #7
 8007dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dde:	4a68      	ldr	r2, [pc, #416]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007de0:	430b      	orrs	r3, r1
 8007de2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007de4:	e003      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007de6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df6:	f002 0320 	and.w	r3, r2, #32
 8007dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007dfe:	2300      	movs	r3, #0
 8007e00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007e04:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007e08:	460b      	mov	r3, r1
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	d055      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e1a:	d033      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007e1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e20:	d82c      	bhi.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e26:	d02f      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007e28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e2c:	d826      	bhi.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007e2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e32:	d02b      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007e34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e38:	d820      	bhi.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007e3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e3e:	d012      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007e40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e44:	d81a      	bhi.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d022      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007e4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e4e:	d115      	bne.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e54:	3308      	adds	r3, #8
 8007e56:	2100      	movs	r1, #0
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f001 fcc5 	bl	80097e8 <RCCEx_PLL2_Config>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007e64:	e015      	b.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e6a:	3328      	adds	r3, #40	@ 0x28
 8007e6c:	2102      	movs	r1, #2
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f001 fd6c 	bl	800994c <RCCEx_PLL3_Config>
 8007e74:	4603      	mov	r3, r0
 8007e76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007e7a:	e00a      	b.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e82:	e006      	b.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007e84:	bf00      	nop
 8007e86:	e004      	b.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007e88:	bf00      	nop
 8007e8a:	e002      	b.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007e8c:	bf00      	nop
 8007e8e:	e000      	b.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007e90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10b      	bne.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e9a:	4b39      	ldr	r3, [pc, #228]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e9e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007eaa:	4a35      	ldr	r2, [pc, #212]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007eac:	430b      	orrs	r3, r1
 8007eae:	6553      	str	r3, [r2, #84]	@ 0x54
 8007eb0:	e003      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007eb6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007ec6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007eca:	2300      	movs	r3, #0
 8007ecc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007ed0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	d058      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ede:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ee2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007ee6:	d033      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007ee8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007eec:	d82c      	bhi.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007eee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ef2:	d02f      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007ef4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ef8:	d826      	bhi.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007efa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007efe:	d02b      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007f00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f04:	d820      	bhi.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007f06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f0a:	d012      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007f0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f10:	d81a      	bhi.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d022      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f1a:	d115      	bne.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f20:	3308      	adds	r3, #8
 8007f22:	2100      	movs	r1, #0
 8007f24:	4618      	mov	r0, r3
 8007f26:	f001 fc5f 	bl	80097e8 <RCCEx_PLL2_Config>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007f30:	e015      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f36:	3328      	adds	r3, #40	@ 0x28
 8007f38:	2102      	movs	r1, #2
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f001 fd06 	bl	800994c <RCCEx_PLL3_Config>
 8007f40:	4603      	mov	r3, r0
 8007f42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007f46:	e00a      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f4e:	e006      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007f50:	bf00      	nop
 8007f52:	e004      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007f54:	bf00      	nop
 8007f56:	e002      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007f58:	bf00      	nop
 8007f5a:	e000      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10e      	bne.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007f66:	4b06      	ldr	r3, [pc, #24]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f6a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f76:	4a02      	ldr	r2, [pc, #8]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007f78:	430b      	orrs	r3, r1
 8007f7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f7c:	e006      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007f7e:	bf00      	nop
 8007f80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f94:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007f98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007fa2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	d055      	beq.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007fb4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007fb8:	d033      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007fba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007fbe:	d82c      	bhi.n	800801a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007fc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fc4:	d02f      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007fc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fca:	d826      	bhi.n	800801a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007fcc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007fd0:	d02b      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007fd2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007fd6:	d820      	bhi.n	800801a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007fd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fdc:	d012      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007fde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fe2:	d81a      	bhi.n	800801a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d022      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007fe8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fec:	d115      	bne.n	800801a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ff2:	3308      	adds	r3, #8
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f001 fbf6 	bl	80097e8 <RCCEx_PLL2_Config>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008002:	e015      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008008:	3328      	adds	r3, #40	@ 0x28
 800800a:	2102      	movs	r1, #2
 800800c:	4618      	mov	r0, r3
 800800e:	f001 fc9d 	bl	800994c <RCCEx_PLL3_Config>
 8008012:	4603      	mov	r3, r0
 8008014:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008018:	e00a      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008020:	e006      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008022:	bf00      	nop
 8008024:	e004      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008026:	bf00      	nop
 8008028:	e002      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800802a:	bf00      	nop
 800802c:	e000      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800802e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008030:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008034:	2b00      	cmp	r3, #0
 8008036:	d10b      	bne.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008038:	4ba0      	ldr	r3, [pc, #640]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800803a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800803c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008044:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008048:	4a9c      	ldr	r2, [pc, #624]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800804a:	430b      	orrs	r3, r1
 800804c:	6593      	str	r3, [r2, #88]	@ 0x58
 800804e:	e003      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008050:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008054:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800805c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008060:	f002 0308 	and.w	r3, r2, #8
 8008064:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008068:	2300      	movs	r3, #0
 800806a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800806e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008072:	460b      	mov	r3, r1
 8008074:	4313      	orrs	r3, r2
 8008076:	d01e      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8008078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800807c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008080:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008084:	d10c      	bne.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800808a:	3328      	adds	r3, #40	@ 0x28
 800808c:	2102      	movs	r1, #2
 800808e:	4618      	mov	r0, r3
 8008090:	f001 fc5c 	bl	800994c <RCCEx_PLL3_Config>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d002      	beq.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80080a0:	4b86      	ldr	r3, [pc, #536]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80080a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080a4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80080a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080b0:	4a82      	ldr	r2, [pc, #520]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80080b2:	430b      	orrs	r3, r1
 80080b4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80080b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080be:	f002 0310 	and.w	r3, r2, #16
 80080c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80080c6:	2300      	movs	r3, #0
 80080c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80080cc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80080d0:	460b      	mov	r3, r1
 80080d2:	4313      	orrs	r3, r2
 80080d4:	d01e      	beq.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80080d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080e2:	d10c      	bne.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80080e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080e8:	3328      	adds	r3, #40	@ 0x28
 80080ea:	2102      	movs	r1, #2
 80080ec:	4618      	mov	r0, r3
 80080ee:	f001 fc2d 	bl	800994c <RCCEx_PLL3_Config>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d002      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80080fe:	4b6f      	ldr	r3, [pc, #444]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008102:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800810a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800810e:	4a6b      	ldr	r2, [pc, #428]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008110:	430b      	orrs	r3, r1
 8008112:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008120:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008122:	2300      	movs	r3, #0
 8008124:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008126:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800812a:	460b      	mov	r3, r1
 800812c:	4313      	orrs	r3, r2
 800812e:	d03e      	beq.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008134:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008138:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800813c:	d022      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800813e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008142:	d81b      	bhi.n	800817c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8008144:	2b00      	cmp	r3, #0
 8008146:	d003      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8008148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800814c:	d00b      	beq.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800814e:	e015      	b.n	800817c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008154:	3308      	adds	r3, #8
 8008156:	2100      	movs	r1, #0
 8008158:	4618      	mov	r0, r3
 800815a:	f001 fb45 	bl	80097e8 <RCCEx_PLL2_Config>
 800815e:	4603      	mov	r3, r0
 8008160:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008164:	e00f      	b.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800816a:	3328      	adds	r3, #40	@ 0x28
 800816c:	2102      	movs	r1, #2
 800816e:	4618      	mov	r0, r3
 8008170:	f001 fbec 	bl	800994c <RCCEx_PLL3_Config>
 8008174:	4603      	mov	r3, r0
 8008176:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800817a:	e004      	b.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008182:	e000      	b.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8008184:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008186:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10b      	bne.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800818e:	4b4b      	ldr	r3, [pc, #300]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008192:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800819a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800819e:	4a47      	ldr	r2, [pc, #284]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80081a0:	430b      	orrs	r3, r1
 80081a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80081a4:	e003      	b.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80081ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80081ba:	673b      	str	r3, [r7, #112]	@ 0x70
 80081bc:	2300      	movs	r3, #0
 80081be:	677b      	str	r3, [r7, #116]	@ 0x74
 80081c0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80081c4:	460b      	mov	r3, r1
 80081c6:	4313      	orrs	r3, r2
 80081c8:	d03b      	beq.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80081ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80081d6:	d01f      	beq.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80081d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80081dc:	d818      	bhi.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80081de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081e2:	d003      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80081e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80081e8:	d007      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80081ea:	e011      	b.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081ec:	4b33      	ldr	r3, [pc, #204]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80081ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f0:	4a32      	ldr	r2, [pc, #200]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80081f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80081f8:	e00f      	b.n	800821a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80081fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081fe:	3328      	adds	r3, #40	@ 0x28
 8008200:	2101      	movs	r1, #1
 8008202:	4618      	mov	r0, r3
 8008204:	f001 fba2 	bl	800994c <RCCEx_PLL3_Config>
 8008208:	4603      	mov	r3, r0
 800820a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800820e:	e004      	b.n	800821a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008216:	e000      	b.n	800821a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8008218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800821a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10b      	bne.n	800823a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008222:	4b26      	ldr	r3, [pc, #152]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008226:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800822a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800822e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008232:	4a22      	ldr	r2, [pc, #136]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008234:	430b      	orrs	r3, r1
 8008236:	6553      	str	r3, [r2, #84]	@ 0x54
 8008238:	e003      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800823a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800823e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800824e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008250:	2300      	movs	r3, #0
 8008252:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008254:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008258:	460b      	mov	r3, r1
 800825a:	4313      	orrs	r3, r2
 800825c:	d034      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800825e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008262:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008264:	2b00      	cmp	r3, #0
 8008266:	d003      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8008268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800826c:	d007      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800826e:	e011      	b.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008270:	4b12      	ldr	r3, [pc, #72]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008274:	4a11      	ldr	r2, [pc, #68]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008276:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800827a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800827c:	e00e      	b.n	800829c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800827e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008282:	3308      	adds	r3, #8
 8008284:	2102      	movs	r1, #2
 8008286:	4618      	mov	r0, r3
 8008288:	f001 faae 	bl	80097e8 <RCCEx_PLL2_Config>
 800828c:	4603      	mov	r3, r0
 800828e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008292:	e003      	b.n	800829c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800829a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800829c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10d      	bne.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80082a4:	4b05      	ldr	r3, [pc, #20]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082a8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80082ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082b2:	4a02      	ldr	r2, [pc, #8]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082b4:	430b      	orrs	r3, r1
 80082b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80082b8:	e006      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80082ba:	bf00      	nop
 80082bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80082c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80082d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80082d6:	2300      	movs	r3, #0
 80082d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80082da:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80082de:	460b      	mov	r3, r1
 80082e0:	4313      	orrs	r3, r2
 80082e2:	d00c      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80082e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082e8:	3328      	adds	r3, #40	@ 0x28
 80082ea:	2102      	movs	r1, #2
 80082ec:	4618      	mov	r0, r3
 80082ee:	f001 fb2d 	bl	800994c <RCCEx_PLL3_Config>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d002      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80082fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008306:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800830a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800830c:	2300      	movs	r3, #0
 800830e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008310:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008314:	460b      	mov	r3, r1
 8008316:	4313      	orrs	r3, r2
 8008318:	d036      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800831a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800831e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008320:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008324:	d018      	beq.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8008326:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800832a:	d811      	bhi.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800832c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008330:	d014      	beq.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8008332:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008336:	d80b      	bhi.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008338:	2b00      	cmp	r3, #0
 800833a:	d011      	beq.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800833c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008340:	d106      	bne.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008342:	4bb7      	ldr	r3, [pc, #732]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008346:	4ab6      	ldr	r2, [pc, #728]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008348:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800834c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800834e:	e008      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008356:	e004      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008358:	bf00      	nop
 800835a:	e002      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800835c:	bf00      	nop
 800835e:	e000      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008360:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008362:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10a      	bne.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800836a:	4bad      	ldr	r3, [pc, #692]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800836c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800836e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008376:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008378:	4aa9      	ldr	r2, [pc, #676]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800837a:	430b      	orrs	r3, r1
 800837c:	6553      	str	r3, [r2, #84]	@ 0x54
 800837e:	e003      	b.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008380:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008384:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800838c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008390:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008394:	653b      	str	r3, [r7, #80]	@ 0x50
 8008396:	2300      	movs	r3, #0
 8008398:	657b      	str	r3, [r7, #84]	@ 0x54
 800839a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800839e:	460b      	mov	r3, r1
 80083a0:	4313      	orrs	r3, r2
 80083a2:	d009      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80083a4:	4b9e      	ldr	r3, [pc, #632]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80083a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80083ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083b2:	4a9b      	ldr	r2, [pc, #620]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80083b4:	430b      	orrs	r3, r1
 80083b6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80083b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80083c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083c6:	2300      	movs	r3, #0
 80083c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083ca:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80083ce:	460b      	mov	r3, r1
 80083d0:	4313      	orrs	r3, r2
 80083d2:	d009      	beq.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80083d4:	4b92      	ldr	r3, [pc, #584]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80083d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083d8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80083dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083e2:	4a8f      	ldr	r2, [pc, #572]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80083e4:	430b      	orrs	r3, r1
 80083e6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80083e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80083f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80083f6:	2300      	movs	r3, #0
 80083f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80083fa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80083fe:	460b      	mov	r3, r1
 8008400:	4313      	orrs	r3, r2
 8008402:	d00e      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008404:	4b86      	ldr	r3, [pc, #536]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	4a85      	ldr	r2, [pc, #532]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800840a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800840e:	6113      	str	r3, [r2, #16]
 8008410:	4b83      	ldr	r3, [pc, #524]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008412:	6919      	ldr	r1, [r3, #16]
 8008414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008418:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800841c:	4a80      	ldr	r2, [pc, #512]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800841e:	430b      	orrs	r3, r1
 8008420:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800842e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008430:	2300      	movs	r3, #0
 8008432:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008434:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008438:	460b      	mov	r3, r1
 800843a:	4313      	orrs	r3, r2
 800843c:	d009      	beq.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800843e:	4b78      	ldr	r3, [pc, #480]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008442:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800844a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800844c:	4a74      	ldr	r2, [pc, #464]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800844e:	430b      	orrs	r3, r1
 8008450:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800845e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008460:	2300      	movs	r3, #0
 8008462:	637b      	str	r3, [r7, #52]	@ 0x34
 8008464:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008468:	460b      	mov	r3, r1
 800846a:	4313      	orrs	r3, r2
 800846c:	d00a      	beq.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800846e:	4b6c      	ldr	r3, [pc, #432]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008472:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800847a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800847e:	4a68      	ldr	r2, [pc, #416]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008480:	430b      	orrs	r3, r1
 8008482:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848c:	2100      	movs	r1, #0
 800848e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008490:	f003 0301 	and.w	r3, r3, #1
 8008494:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008496:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800849a:	460b      	mov	r3, r1
 800849c:	4313      	orrs	r3, r2
 800849e:	d011      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084a4:	3308      	adds	r3, #8
 80084a6:	2100      	movs	r1, #0
 80084a8:	4618      	mov	r0, r3
 80084aa:	f001 f99d 	bl	80097e8 <RCCEx_PLL2_Config>
 80084ae:	4603      	mov	r3, r0
 80084b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80084b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d003      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80084c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084cc:	2100      	movs	r1, #0
 80084ce:	6239      	str	r1, [r7, #32]
 80084d0:	f003 0302 	and.w	r3, r3, #2
 80084d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80084d6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80084da:	460b      	mov	r3, r1
 80084dc:	4313      	orrs	r3, r2
 80084de:	d011      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80084e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084e4:	3308      	adds	r3, #8
 80084e6:	2101      	movs	r1, #1
 80084e8:	4618      	mov	r0, r3
 80084ea:	f001 f97d 	bl	80097e8 <RCCEx_PLL2_Config>
 80084ee:	4603      	mov	r3, r0
 80084f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80084f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d003      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008500:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850c:	2100      	movs	r1, #0
 800850e:	61b9      	str	r1, [r7, #24]
 8008510:	f003 0304 	and.w	r3, r3, #4
 8008514:	61fb      	str	r3, [r7, #28]
 8008516:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800851a:	460b      	mov	r3, r1
 800851c:	4313      	orrs	r3, r2
 800851e:	d011      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008524:	3308      	adds	r3, #8
 8008526:	2102      	movs	r1, #2
 8008528:	4618      	mov	r0, r3
 800852a:	f001 f95d 	bl	80097e8 <RCCEx_PLL2_Config>
 800852e:	4603      	mov	r3, r0
 8008530:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008534:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008538:	2b00      	cmp	r3, #0
 800853a:	d003      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800853c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008540:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854c:	2100      	movs	r1, #0
 800854e:	6139      	str	r1, [r7, #16]
 8008550:	f003 0308 	and.w	r3, r3, #8
 8008554:	617b      	str	r3, [r7, #20]
 8008556:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800855a:	460b      	mov	r3, r1
 800855c:	4313      	orrs	r3, r2
 800855e:	d011      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008564:	3328      	adds	r3, #40	@ 0x28
 8008566:	2100      	movs	r1, #0
 8008568:	4618      	mov	r0, r3
 800856a:	f001 f9ef 	bl	800994c <RCCEx_PLL3_Config>
 800856e:	4603      	mov	r3, r0
 8008570:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8008574:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008578:	2b00      	cmp	r3, #0
 800857a:	d003      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800857c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008580:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858c:	2100      	movs	r1, #0
 800858e:	60b9      	str	r1, [r7, #8]
 8008590:	f003 0310 	and.w	r3, r3, #16
 8008594:	60fb      	str	r3, [r7, #12]
 8008596:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800859a:	460b      	mov	r3, r1
 800859c:	4313      	orrs	r3, r2
 800859e:	d011      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80085a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085a4:	3328      	adds	r3, #40	@ 0x28
 80085a6:	2101      	movs	r1, #1
 80085a8:	4618      	mov	r0, r3
 80085aa:	f001 f9cf 	bl	800994c <RCCEx_PLL3_Config>
 80085ae:	4603      	mov	r3, r0
 80085b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80085b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d003      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80085c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085cc:	2100      	movs	r1, #0
 80085ce:	6039      	str	r1, [r7, #0]
 80085d0:	f003 0320 	and.w	r3, r3, #32
 80085d4:	607b      	str	r3, [r7, #4]
 80085d6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80085da:	460b      	mov	r3, r1
 80085dc:	4313      	orrs	r3, r2
 80085de:	d011      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085e4:	3328      	adds	r3, #40	@ 0x28
 80085e6:	2102      	movs	r1, #2
 80085e8:	4618      	mov	r0, r3
 80085ea:	f001 f9af 	bl	800994c <RCCEx_PLL3_Config>
 80085ee:	4603      	mov	r3, r0
 80085f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80085f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d003      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008600:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8008604:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8008608:	2b00      	cmp	r3, #0
 800860a:	d101      	bne.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	e000      	b.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008610:	2301      	movs	r3, #1
}
 8008612:	4618      	mov	r0, r3
 8008614:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8008618:	46bd      	mov	sp, r7
 800861a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800861e:	bf00      	nop
 8008620:	58024400 	.word	0x58024400

08008624 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b090      	sub	sp, #64	@ 0x40
 8008628:	af00      	add	r7, sp, #0
 800862a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800862e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008632:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008636:	430b      	orrs	r3, r1
 8008638:	f040 8094 	bne.w	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800863c:	4b9b      	ldr	r3, [pc, #620]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800863e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008640:	f003 0307 	and.w	r3, r3, #7
 8008644:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008648:	2b04      	cmp	r3, #4
 800864a:	f200 8087 	bhi.w	800875c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800864e:	a201      	add	r2, pc, #4	@ (adr r2, 8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008654:	08008669 	.word	0x08008669
 8008658:	08008691 	.word	0x08008691
 800865c:	080086b9 	.word	0x080086b9
 8008660:	08008755 	.word	0x08008755
 8008664:	080086e1 	.word	0x080086e1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008668:	4b90      	ldr	r3, [pc, #576]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008670:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008674:	d108      	bne.n	8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008676:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800867a:	4618      	mov	r0, r3
 800867c:	f000 ff62 	bl	8009544 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008684:	f000 bc93 	b.w	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008688:	2300      	movs	r3, #0
 800868a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800868c:	f000 bc8f 	b.w	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008690:	4b86      	ldr	r3, [pc, #536]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008698:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800869c:	d108      	bne.n	80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800869e:	f107 0318 	add.w	r3, r7, #24
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 fca6 	bl	8008ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ac:	f000 bc7f 	b.w	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086b0:	2300      	movs	r3, #0
 80086b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086b4:	f000 bc7b 	b.w	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086b8:	4b7c      	ldr	r3, [pc, #496]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086c4:	d108      	bne.n	80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086c6:	f107 030c 	add.w	r3, r7, #12
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 fde6 	bl	800929c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086d4:	f000 bc6b 	b.w	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086d8:	2300      	movs	r3, #0
 80086da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086dc:	f000 bc67 	b.w	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086e0:	4b72      	ldr	r3, [pc, #456]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80086e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80086e8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086ea:	4b70      	ldr	r3, [pc, #448]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 0304 	and.w	r3, r3, #4
 80086f2:	2b04      	cmp	r3, #4
 80086f4:	d10c      	bne.n	8008710 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80086f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d109      	bne.n	8008710 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086fc:	4b6b      	ldr	r3, [pc, #428]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	08db      	lsrs	r3, r3, #3
 8008702:	f003 0303 	and.w	r3, r3, #3
 8008706:	4a6a      	ldr	r2, [pc, #424]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008708:	fa22 f303 	lsr.w	r3, r2, r3
 800870c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800870e:	e01f      	b.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008710:	4b66      	ldr	r3, [pc, #408]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008718:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800871c:	d106      	bne.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800871e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008720:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008724:	d102      	bne.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008726:	4b63      	ldr	r3, [pc, #396]	@ (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008728:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800872a:	e011      	b.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800872c:	4b5f      	ldr	r3, [pc, #380]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008734:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008738:	d106      	bne.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800873a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800873c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008740:	d102      	bne.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008742:	4b5d      	ldr	r3, [pc, #372]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008744:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008746:	e003      	b.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008748:	2300      	movs	r3, #0
 800874a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800874c:	f000 bc2f 	b.w	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008750:	f000 bc2d 	b.w	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008754:	4b59      	ldr	r3, [pc, #356]	@ (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008758:	f000 bc29 	b.w	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800875c:	2300      	movs	r3, #0
 800875e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008760:	f000 bc25 	b.w	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008764:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008768:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800876c:	430b      	orrs	r3, r1
 800876e:	f040 80a7 	bne.w	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008772:	4b4e      	ldr	r3, [pc, #312]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008776:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800877a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800877c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800877e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008782:	d054      	beq.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008786:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800878a:	f200 808b 	bhi.w	80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800878e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008790:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008794:	f000 8083 	beq.w	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8008798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800879e:	f200 8081 	bhi.w	80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80087a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087a8:	d02f      	beq.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80087aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087b0:	d878      	bhi.n	80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80087b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d004      	beq.n	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80087b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087be:	d012      	beq.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80087c0:	e070      	b.n	80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087c2:	4b3a      	ldr	r3, [pc, #232]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087ce:	d107      	bne.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 feb5 	bl	8009544 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087de:	e3e6      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80087e0:	2300      	movs	r3, #0
 80087e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087e4:	e3e3      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087e6:	4b31      	ldr	r3, [pc, #196]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087f2:	d107      	bne.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087f4:	f107 0318 	add.w	r3, r7, #24
 80087f8:	4618      	mov	r0, r3
 80087fa:	f000 fbfb 	bl	8008ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008802:	e3d4      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008804:	2300      	movs	r3, #0
 8008806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008808:	e3d1      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800880a:	4b28      	ldr	r3, [pc, #160]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008812:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008816:	d107      	bne.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008818:	f107 030c 	add.w	r3, r7, #12
 800881c:	4618      	mov	r0, r3
 800881e:	f000 fd3d 	bl	800929c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008826:	e3c2      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008828:	2300      	movs	r3, #0
 800882a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800882c:	e3bf      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800882e:	4b1f      	ldr	r3, [pc, #124]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008832:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008836:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008838:	4b1c      	ldr	r3, [pc, #112]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 0304 	and.w	r3, r3, #4
 8008840:	2b04      	cmp	r3, #4
 8008842:	d10c      	bne.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8008844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008846:	2b00      	cmp	r3, #0
 8008848:	d109      	bne.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800884a:	4b18      	ldr	r3, [pc, #96]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	08db      	lsrs	r3, r3, #3
 8008850:	f003 0303 	and.w	r3, r3, #3
 8008854:	4a16      	ldr	r2, [pc, #88]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008856:	fa22 f303 	lsr.w	r3, r2, r3
 800885a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800885c:	e01e      	b.n	800889c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800885e:	4b13      	ldr	r3, [pc, #76]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008866:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800886a:	d106      	bne.n	800887a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800886c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800886e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008872:	d102      	bne.n	800887a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008874:	4b0f      	ldr	r3, [pc, #60]	@ (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008876:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008878:	e010      	b.n	800889c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800887a:	4b0c      	ldr	r3, [pc, #48]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008882:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008886:	d106      	bne.n	8008896 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800888a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800888e:	d102      	bne.n	8008896 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008890:	4b09      	ldr	r3, [pc, #36]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008892:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008894:	e002      	b.n	800889c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008896:	2300      	movs	r3, #0
 8008898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800889a:	e388      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800889c:	e387      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800889e:	4b07      	ldr	r3, [pc, #28]	@ (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80088a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088a2:	e384      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80088a4:	2300      	movs	r3, #0
 80088a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088a8:	e381      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80088aa:	bf00      	nop
 80088ac:	58024400 	.word	0x58024400
 80088b0:	03d09000 	.word	0x03d09000
 80088b4:	003d0900 	.word	0x003d0900
 80088b8:	016e3600 	.word	0x016e3600
 80088bc:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80088c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088c4:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80088c8:	430b      	orrs	r3, r1
 80088ca:	f040 809c 	bne.w	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80088ce:	4b9e      	ldr	r3, [pc, #632]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80088d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088d2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80088d6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80088d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80088de:	d054      	beq.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80088e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80088e6:	f200 808b 	bhi.w	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80088ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80088f0:	f000 8083 	beq.w	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80088f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80088fa:	f200 8081 	bhi.w	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80088fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008900:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008904:	d02f      	beq.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008908:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800890c:	d878      	bhi.n	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800890e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008910:	2b00      	cmp	r3, #0
 8008912:	d004      	beq.n	800891e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008916:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800891a:	d012      	beq.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800891c:	e070      	b.n	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800891e:	4b8a      	ldr	r3, [pc, #552]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008926:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800892a:	d107      	bne.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800892c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008930:	4618      	mov	r0, r3
 8008932:	f000 fe07 	bl	8009544 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800893a:	e338      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800893c:	2300      	movs	r3, #0
 800893e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008940:	e335      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008942:	4b81      	ldr	r3, [pc, #516]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800894a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800894e:	d107      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008950:	f107 0318 	add.w	r3, r7, #24
 8008954:	4618      	mov	r0, r3
 8008956:	f000 fb4d 	bl	8008ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800895e:	e326      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008960:	2300      	movs	r3, #0
 8008962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008964:	e323      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008966:	4b78      	ldr	r3, [pc, #480]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800896e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008972:	d107      	bne.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008974:	f107 030c 	add.w	r3, r7, #12
 8008978:	4618      	mov	r0, r3
 800897a:	f000 fc8f 	bl	800929c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008982:	e314      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008984:	2300      	movs	r3, #0
 8008986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008988:	e311      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800898a:	4b6f      	ldr	r3, [pc, #444]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800898c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800898e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008992:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008994:	4b6c      	ldr	r3, [pc, #432]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 0304 	and.w	r3, r3, #4
 800899c:	2b04      	cmp	r3, #4
 800899e:	d10c      	bne.n	80089ba <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80089a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d109      	bne.n	80089ba <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089a6:	4b68      	ldr	r3, [pc, #416]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	08db      	lsrs	r3, r3, #3
 80089ac:	f003 0303 	and.w	r3, r3, #3
 80089b0:	4a66      	ldr	r2, [pc, #408]	@ (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80089b2:	fa22 f303 	lsr.w	r3, r2, r3
 80089b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089b8:	e01e      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089ba:	4b63      	ldr	r3, [pc, #396]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089c6:	d106      	bne.n	80089d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80089c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089ce:	d102      	bne.n	80089d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80089d0:	4b5f      	ldr	r3, [pc, #380]	@ (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80089d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089d4:	e010      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089d6:	4b5c      	ldr	r3, [pc, #368]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089e2:	d106      	bne.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80089e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089ea:	d102      	bne.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80089ec:	4b59      	ldr	r3, [pc, #356]	@ (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089f0:	e002      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80089f2:	2300      	movs	r3, #0
 80089f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80089f6:	e2da      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80089f8:	e2d9      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80089fa:	4b57      	ldr	r3, [pc, #348]	@ (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80089fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089fe:	e2d6      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008a00:	2300      	movs	r3, #0
 8008a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a04:	e2d3      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008a06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a0a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008a0e:	430b      	orrs	r3, r1
 8008a10:	f040 80a7 	bne.w	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008a14:	4b4c      	ldr	r3, [pc, #304]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a18:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008a1c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a24:	d055      	beq.n	8008ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a2c:	f200 8096 	bhi.w	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a32:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a36:	f000 8084 	beq.w	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a3c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a40:	f200 808c 	bhi.w	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a4a:	d030      	beq.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a52:	f200 8083 	bhi.w	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d004      	beq.n	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a62:	d012      	beq.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008a64:	e07a      	b.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a66:	4b38      	ldr	r3, [pc, #224]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a72:	d107      	bne.n	8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f000 fd63 	bl	8009544 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a82:	e294      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a84:	2300      	movs	r3, #0
 8008a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a88:	e291      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a96:	d107      	bne.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a98:	f107 0318 	add.w	r3, r7, #24
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f000 faa9 	bl	8008ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aa6:	e282      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aac:	e27f      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008aae:	4b26      	ldr	r3, [pc, #152]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ab6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008aba:	d107      	bne.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008abc:	f107 030c 	add.w	r3, r7, #12
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f000 fbeb 	bl	800929c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aca:	e270      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008acc:	2300      	movs	r3, #0
 8008ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ad0:	e26d      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ad6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ada:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008adc:	4b1a      	ldr	r3, [pc, #104]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0304 	and.w	r3, r3, #4
 8008ae4:	2b04      	cmp	r3, #4
 8008ae6:	d10c      	bne.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d109      	bne.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008aee:	4b16      	ldr	r3, [pc, #88]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	08db      	lsrs	r3, r3, #3
 8008af4:	f003 0303 	and.w	r3, r3, #3
 8008af8:	4a14      	ldr	r2, [pc, #80]	@ (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008afa:	fa22 f303 	lsr.w	r3, r2, r3
 8008afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b00:	e01e      	b.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b02:	4b11      	ldr	r3, [pc, #68]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b0e:	d106      	bne.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b16:	d102      	bne.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008b18:	4b0d      	ldr	r3, [pc, #52]	@ (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b1c:	e010      	b.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b2a:	d106      	bne.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b32:	d102      	bne.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b34:	4b07      	ldr	r3, [pc, #28]	@ (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b38:	e002      	b.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008b3e:	e236      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008b40:	e235      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b42:	4b05      	ldr	r3, [pc, #20]	@ (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b46:	e232      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008b48:	58024400 	.word	0x58024400
 8008b4c:	03d09000 	.word	0x03d09000
 8008b50:	003d0900 	.word	0x003d0900
 8008b54:	016e3600 	.word	0x016e3600
 8008b58:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b60:	e225      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008b62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b66:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008b6a:	430b      	orrs	r3, r1
 8008b6c:	f040 8085 	bne.w	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008b70:	4b9c      	ldr	r3, [pc, #624]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b74:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008b78:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b80:	d06b      	beq.n	8008c5a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b88:	d874      	bhi.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008b90:	d056      	beq.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8008b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008b98:	d86c      	bhi.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008ba0:	d03b      	beq.n	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008ba8:	d864      	bhi.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bb0:	d021      	beq.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bb8:	d85c      	bhi.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d004      	beq.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8008bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bc6:	d004      	beq.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8008bc8:	e054      	b.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008bca:	f7fe fb5f 	bl	800728c <HAL_RCC_GetPCLK1Freq>
 8008bce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008bd0:	e1ed      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bd2:	4b84      	ldr	r3, [pc, #528]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bde:	d107      	bne.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008be0:	f107 0318 	add.w	r3, r7, #24
 8008be4:	4618      	mov	r0, r3
 8008be6:	f000 fa05 	bl	8008ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bee:	e1de      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bf4:	e1db      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bf6:	4b7b      	ldr	r3, [pc, #492]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c02:	d107      	bne.n	8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c04:	f107 030c 	add.w	r3, r7, #12
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f000 fb47 	bl	800929c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c12:	e1cc      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c14:	2300      	movs	r3, #0
 8008c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c18:	e1c9      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008c1a:	4b72      	ldr	r3, [pc, #456]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f003 0304 	and.w	r3, r3, #4
 8008c22:	2b04      	cmp	r3, #4
 8008c24:	d109      	bne.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c26:	4b6f      	ldr	r3, [pc, #444]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	08db      	lsrs	r3, r3, #3
 8008c2c:	f003 0303 	and.w	r3, r3, #3
 8008c30:	4a6d      	ldr	r2, [pc, #436]	@ (8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008c32:	fa22 f303 	lsr.w	r3, r2, r3
 8008c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c38:	e1b9      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c3e:	e1b6      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008c40:	4b68      	ldr	r3, [pc, #416]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c4c:	d102      	bne.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8008c4e:	4b67      	ldr	r3, [pc, #412]	@ (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c52:	e1ac      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c54:	2300      	movs	r3, #0
 8008c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c58:	e1a9      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c5a:	4b62      	ldr	r3, [pc, #392]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c66:	d102      	bne.n	8008c6e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8008c68:	4b61      	ldr	r3, [pc, #388]	@ (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c6c:	e19f      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c72:	e19c      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008c74:	2300      	movs	r3, #0
 8008c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c78:	e199      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008c7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c7e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008c82:	430b      	orrs	r3, r1
 8008c84:	d173      	bne.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008c86:	4b57      	ldr	r3, [pc, #348]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008c8e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c96:	d02f      	beq.n	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8008c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c9e:	d863      	bhi.n	8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8008ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d004      	beq.n	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8008ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cac:	d012      	beq.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8008cae:	e05b      	b.n	8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cb0:	4b4c      	ldr	r3, [pc, #304]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cbc:	d107      	bne.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cbe:	f107 0318 	add.w	r3, r7, #24
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f000 f996 	bl	8008ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ccc:	e16f      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cd2:	e16c      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008cd4:	4b43      	ldr	r3, [pc, #268]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008cdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ce0:	d107      	bne.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ce2:	f107 030c 	add.w	r3, r7, #12
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 fad8 	bl	800929c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cf0:	e15d      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cf6:	e15a      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008cf8:	4b3a      	ldr	r3, [pc, #232]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008cfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cfc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008d00:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d02:	4b38      	ldr	r3, [pc, #224]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 0304 	and.w	r3, r3, #4
 8008d0a:	2b04      	cmp	r3, #4
 8008d0c:	d10c      	bne.n	8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d109      	bne.n	8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d14:	4b33      	ldr	r3, [pc, #204]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	08db      	lsrs	r3, r3, #3
 8008d1a:	f003 0303 	and.w	r3, r3, #3
 8008d1e:	4a32      	ldr	r2, [pc, #200]	@ (8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008d20:	fa22 f303 	lsr.w	r3, r2, r3
 8008d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d26:	e01e      	b.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d28:	4b2e      	ldr	r3, [pc, #184]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d34:	d106      	bne.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d3c:	d102      	bne.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d3e:	4b2b      	ldr	r3, [pc, #172]	@ (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d42:	e010      	b.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d44:	4b27      	ldr	r3, [pc, #156]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d50:	d106      	bne.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d58:	d102      	bne.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d5a:	4b25      	ldr	r3, [pc, #148]	@ (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d5e:	e002      	b.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d60:	2300      	movs	r3, #0
 8008d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008d64:	e123      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008d66:	e122      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d6c:	e11f      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008d6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d72:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008d76:	430b      	orrs	r3, r1
 8008d78:	d13c      	bne.n	8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008d82:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d004      	beq.n	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d90:	d012      	beq.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8008d92:	e023      	b.n	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d94:	4b13      	ldr	r3, [pc, #76]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008da0:	d107      	bne.n	8008db2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008da2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008da6:	4618      	mov	r0, r3
 8008da8:	f000 fbcc 	bl	8009544 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008db0:	e0fd      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008db2:	2300      	movs	r3, #0
 8008db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008db6:	e0fa      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008db8:	4b0a      	ldr	r3, [pc, #40]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008dc4:	d107      	bne.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dc6:	f107 0318 	add.w	r3, r7, #24
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f000 f912 	bl	8008ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008dd0:	6a3b      	ldr	r3, [r7, #32]
 8008dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dd4:	e0eb      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dda:	e0e8      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008de0:	e0e5      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008de2:	bf00      	nop
 8008de4:	58024400 	.word	0x58024400
 8008de8:	03d09000 	.word	0x03d09000
 8008dec:	003d0900 	.word	0x003d0900
 8008df0:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008df4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008df8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008dfc:	430b      	orrs	r3, r1
 8008dfe:	f040 8085 	bne.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008e02:	4b6d      	ldr	r3, [pc, #436]	@ (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e06:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008e0a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e12:	d06b      	beq.n	8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e1a:	d874      	bhi.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e22:	d056      	beq.n	8008ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e2a:	d86c      	bhi.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008e32:	d03b      	beq.n	8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8008e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008e3a:	d864      	bhi.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e42:	d021      	beq.n	8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8008e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e4a:	d85c      	bhi.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d004      	beq.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8008e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e58:	d004      	beq.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008e5a:	e054      	b.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008e5c:	f000 f8b4 	bl	8008fc8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008e60:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e62:	e0a4      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e64:	4b54      	ldr	r3, [pc, #336]	@ (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e70:	d107      	bne.n	8008e82 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e72:	f107 0318 	add.w	r3, r7, #24
 8008e76:	4618      	mov	r0, r3
 8008e78:	f000 f8bc 	bl	8008ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e80:	e095      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e82:	2300      	movs	r3, #0
 8008e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e86:	e092      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e88:	4b4b      	ldr	r3, [pc, #300]	@ (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e94:	d107      	bne.n	8008ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e96:	f107 030c 	add.w	r3, r7, #12
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f000 f9fe 	bl	800929c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ea4:	e083      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eaa:	e080      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008eac:	4b42      	ldr	r3, [pc, #264]	@ (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 0304 	and.w	r3, r3, #4
 8008eb4:	2b04      	cmp	r3, #4
 8008eb6:	d109      	bne.n	8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008eb8:	4b3f      	ldr	r3, [pc, #252]	@ (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	08db      	lsrs	r3, r3, #3
 8008ebe:	f003 0303 	and.w	r3, r3, #3
 8008ec2:	4a3e      	ldr	r2, [pc, #248]	@ (8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eca:	e070      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ed0:	e06d      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008ed2:	4b39      	ldr	r3, [pc, #228]	@ (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008eda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ede:	d102      	bne.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008ee0:	4b37      	ldr	r3, [pc, #220]	@ (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ee4:	e063      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eea:	e060      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008eec:	4b32      	ldr	r3, [pc, #200]	@ (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ef4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ef8:	d102      	bne.n	8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8008efa:	4b32      	ldr	r3, [pc, #200]	@ (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008efe:	e056      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f00:	2300      	movs	r3, #0
 8008f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f04:	e053      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008f06:	2300      	movs	r3, #0
 8008f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f0a:	e050      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008f0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f10:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008f14:	430b      	orrs	r3, r1
 8008f16:	d148      	bne.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008f18:	4b27      	ldr	r3, [pc, #156]	@ (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008f20:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f28:	d02a      	beq.n	8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f30:	d838      	bhi.n	8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d004      	beq.n	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f3e:	d00d      	beq.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008f40:	e030      	b.n	8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f42:	4b1d      	ldr	r3, [pc, #116]	@ (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f4e:	d102      	bne.n	8008f56 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8008f50:	4b1c      	ldr	r3, [pc, #112]	@ (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f54:	e02b      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f56:	2300      	movs	r3, #0
 8008f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f5a:	e028      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f5c:	4b16      	ldr	r3, [pc, #88]	@ (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f68:	d107      	bne.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f000 fae8 	bl	8009544 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f78:	e019      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f7e:	e016      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f80:	4b0d      	ldr	r3, [pc, #52]	@ (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f8c:	d107      	bne.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f8e:	f107 0318 	add.w	r3, r7, #24
 8008f92:	4618      	mov	r0, r3
 8008f94:	f000 f82e 	bl	8008ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f9c:	e007      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fa2:	e004      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fa8:	e001      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8008faa:	2300      	movs	r3, #0
 8008fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3740      	adds	r7, #64	@ 0x40
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	58024400 	.word	0x58024400
 8008fbc:	03d09000 	.word	0x03d09000
 8008fc0:	003d0900 	.word	0x003d0900
 8008fc4:	016e3600 	.word	0x016e3600

08008fc8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008fcc:	f7fe f92e 	bl	800722c <HAL_RCC_GetHCLKFreq>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	4b06      	ldr	r3, [pc, #24]	@ (8008fec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008fd4:	6a1b      	ldr	r3, [r3, #32]
 8008fd6:	091b      	lsrs	r3, r3, #4
 8008fd8:	f003 0307 	and.w	r3, r3, #7
 8008fdc:	4904      	ldr	r1, [pc, #16]	@ (8008ff0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008fde:	5ccb      	ldrb	r3, [r1, r3]
 8008fe0:	f003 031f 	and.w	r3, r3, #31
 8008fe4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	58024400 	.word	0x58024400
 8008ff0:	0800bc74 	.word	0x0800bc74

08008ff4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b089      	sub	sp, #36	@ 0x24
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ffc:	4ba1      	ldr	r3, [pc, #644]	@ (8009284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009000:	f003 0303 	and.w	r3, r3, #3
 8009004:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009006:	4b9f      	ldr	r3, [pc, #636]	@ (8009284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800900a:	0b1b      	lsrs	r3, r3, #12
 800900c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009010:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009012:	4b9c      	ldr	r3, [pc, #624]	@ (8009284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009016:	091b      	lsrs	r3, r3, #4
 8009018:	f003 0301 	and.w	r3, r3, #1
 800901c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800901e:	4b99      	ldr	r3, [pc, #612]	@ (8009284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009022:	08db      	lsrs	r3, r3, #3
 8009024:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009028:	693a      	ldr	r2, [r7, #16]
 800902a:	fb02 f303 	mul.w	r3, r2, r3
 800902e:	ee07 3a90 	vmov	s15, r3
 8009032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009036:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	2b00      	cmp	r3, #0
 800903e:	f000 8111 	beq.w	8009264 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	2b02      	cmp	r3, #2
 8009046:	f000 8083 	beq.w	8009150 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	2b02      	cmp	r3, #2
 800904e:	f200 80a1 	bhi.w	8009194 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d003      	beq.n	8009060 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	2b01      	cmp	r3, #1
 800905c:	d056      	beq.n	800910c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800905e:	e099      	b.n	8009194 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009060:	4b88      	ldr	r3, [pc, #544]	@ (8009284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 0320 	and.w	r3, r3, #32
 8009068:	2b00      	cmp	r3, #0
 800906a:	d02d      	beq.n	80090c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800906c:	4b85      	ldr	r3, [pc, #532]	@ (8009284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	08db      	lsrs	r3, r3, #3
 8009072:	f003 0303 	and.w	r3, r3, #3
 8009076:	4a84      	ldr	r2, [pc, #528]	@ (8009288 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009078:	fa22 f303 	lsr.w	r3, r2, r3
 800907c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	ee07 3a90 	vmov	s15, r3
 8009084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	ee07 3a90 	vmov	s15, r3
 800908e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009096:	4b7b      	ldr	r3, [pc, #492]	@ (8009284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800909a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800909e:	ee07 3a90 	vmov	s15, r3
 80090a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80090aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800928c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80090ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80090c6:	e087      	b.n	80091d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	ee07 3a90 	vmov	s15, r3
 80090ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090d2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009290 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80090d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090da:	4b6a      	ldr	r3, [pc, #424]	@ (8009284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090e2:	ee07 3a90 	vmov	s15, r3
 80090e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80090ee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800928c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80090f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009106:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800910a:	e065      	b.n	80091d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	ee07 3a90 	vmov	s15, r3
 8009112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009116:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009294 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800911a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800911e:	4b59      	ldr	r3, [pc, #356]	@ (8009284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009126:	ee07 3a90 	vmov	s15, r3
 800912a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800912e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009132:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800928c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800913a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800913e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800914a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800914e:	e043      	b.n	80091d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	ee07 3a90 	vmov	s15, r3
 8009156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800915a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009298 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800915e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009162:	4b48      	ldr	r3, [pc, #288]	@ (8009284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800916a:	ee07 3a90 	vmov	s15, r3
 800916e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009172:	ed97 6a03 	vldr	s12, [r7, #12]
 8009176:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800928c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800917a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800917e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800918a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800918e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009192:	e021      	b.n	80091d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	ee07 3a90 	vmov	s15, r3
 800919a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800919e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009294 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80091a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091a6:	4b37      	ldr	r3, [pc, #220]	@ (8009284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ae:	ee07 3a90 	vmov	s15, r3
 80091b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80091ba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800928c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80091d8:	4b2a      	ldr	r3, [pc, #168]	@ (8009284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091dc:	0a5b      	lsrs	r3, r3, #9
 80091de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091e2:	ee07 3a90 	vmov	s15, r3
 80091e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80091f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091fe:	ee17 2a90 	vmov	r2, s15
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009206:	4b1f      	ldr	r3, [pc, #124]	@ (8009284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800920a:	0c1b      	lsrs	r3, r3, #16
 800920c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009210:	ee07 3a90 	vmov	s15, r3
 8009214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009218:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800921c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009220:	edd7 6a07 	vldr	s13, [r7, #28]
 8009224:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800922c:	ee17 2a90 	vmov	r2, s15
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009234:	4b13      	ldr	r3, [pc, #76]	@ (8009284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009238:	0e1b      	lsrs	r3, r3, #24
 800923a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800923e:	ee07 3a90 	vmov	s15, r3
 8009242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009246:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800924a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800924e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800925a:	ee17 2a90 	vmov	r2, s15
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009262:	e008      	b.n	8009276 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	609a      	str	r2, [r3, #8]
}
 8009276:	bf00      	nop
 8009278:	3724      	adds	r7, #36	@ 0x24
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	58024400 	.word	0x58024400
 8009288:	03d09000 	.word	0x03d09000
 800928c:	46000000 	.word	0x46000000
 8009290:	4c742400 	.word	0x4c742400
 8009294:	4a742400 	.word	0x4a742400
 8009298:	4bb71b00 	.word	0x4bb71b00

0800929c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800929c:	b480      	push	{r7}
 800929e:	b089      	sub	sp, #36	@ 0x24
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80092a4:	4ba1      	ldr	r3, [pc, #644]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092a8:	f003 0303 	and.w	r3, r3, #3
 80092ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80092ae:	4b9f      	ldr	r3, [pc, #636]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092b2:	0d1b      	lsrs	r3, r3, #20
 80092b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80092ba:	4b9c      	ldr	r3, [pc, #624]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092be:	0a1b      	lsrs	r3, r3, #8
 80092c0:	f003 0301 	and.w	r3, r3, #1
 80092c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80092c6:	4b99      	ldr	r3, [pc, #612]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092ca:	08db      	lsrs	r3, r3, #3
 80092cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092d0:	693a      	ldr	r2, [r7, #16]
 80092d2:	fb02 f303 	mul.w	r3, r2, r3
 80092d6:	ee07 3a90 	vmov	s15, r3
 80092da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f000 8111 	beq.w	800950c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	f000 8083 	beq.w	80093f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	f200 80a1 	bhi.w	800943c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d003      	beq.n	8009308 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	2b01      	cmp	r3, #1
 8009304:	d056      	beq.n	80093b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009306:	e099      	b.n	800943c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009308:	4b88      	ldr	r3, [pc, #544]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f003 0320 	and.w	r3, r3, #32
 8009310:	2b00      	cmp	r3, #0
 8009312:	d02d      	beq.n	8009370 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009314:	4b85      	ldr	r3, [pc, #532]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	08db      	lsrs	r3, r3, #3
 800931a:	f003 0303 	and.w	r3, r3, #3
 800931e:	4a84      	ldr	r2, [pc, #528]	@ (8009530 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009320:	fa22 f303 	lsr.w	r3, r2, r3
 8009324:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	ee07 3a90 	vmov	s15, r3
 800932c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	ee07 3a90 	vmov	s15, r3
 8009336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800933a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800933e:	4b7b      	ldr	r3, [pc, #492]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009346:	ee07 3a90 	vmov	s15, r3
 800934a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800934e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009352:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800935a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800935e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800936a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800936e:	e087      	b.n	8009480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	ee07 3a90 	vmov	s15, r3
 8009376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800937a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009538 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800937e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009382:	4b6a      	ldr	r3, [pc, #424]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800938a:	ee07 3a90 	vmov	s15, r3
 800938e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009392:	ed97 6a03 	vldr	s12, [r7, #12]
 8009396:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800939a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800939e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093b2:	e065      	b.n	8009480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	ee07 3a90 	vmov	s15, r3
 80093ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800953c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80093c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093c6:	4b59      	ldr	r3, [pc, #356]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ce:	ee07 3a90 	vmov	s15, r3
 80093d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80093da:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093f6:	e043      	b.n	8009480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	ee07 3a90 	vmov	s15, r3
 80093fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009402:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009540 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800940a:	4b48      	ldr	r3, [pc, #288]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800940c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800940e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009412:	ee07 3a90 	vmov	s15, r3
 8009416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800941a:	ed97 6a03 	vldr	s12, [r7, #12]
 800941e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800942a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800942e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800943a:	e021      	b.n	8009480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	ee07 3a90 	vmov	s15, r3
 8009442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009446:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800953c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800944a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800944e:	4b37      	ldr	r3, [pc, #220]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009456:	ee07 3a90 	vmov	s15, r3
 800945a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800945e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009462:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800946a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800946e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800947a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800947e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009480:	4b2a      	ldr	r3, [pc, #168]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009484:	0a5b      	lsrs	r3, r3, #9
 8009486:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800948a:	ee07 3a90 	vmov	s15, r3
 800948e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009492:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009496:	ee37 7a87 	vadd.f32	s14, s15, s14
 800949a:	edd7 6a07 	vldr	s13, [r7, #28]
 800949e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094a6:	ee17 2a90 	vmov	r2, s15
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80094ae:	4b1f      	ldr	r3, [pc, #124]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094b2:	0c1b      	lsrs	r3, r3, #16
 80094b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094b8:	ee07 3a90 	vmov	s15, r3
 80094bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80094cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094d4:	ee17 2a90 	vmov	r2, s15
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80094dc:	4b13      	ldr	r3, [pc, #76]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094e0:	0e1b      	lsrs	r3, r3, #24
 80094e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094e6:	ee07 3a90 	vmov	s15, r3
 80094ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80094fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009502:	ee17 2a90 	vmov	r2, s15
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800950a:	e008      	b.n	800951e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	609a      	str	r2, [r3, #8]
}
 800951e:	bf00      	nop
 8009520:	3724      	adds	r7, #36	@ 0x24
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	58024400 	.word	0x58024400
 8009530:	03d09000 	.word	0x03d09000
 8009534:	46000000 	.word	0x46000000
 8009538:	4c742400 	.word	0x4c742400
 800953c:	4a742400 	.word	0x4a742400
 8009540:	4bb71b00 	.word	0x4bb71b00

08009544 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009544:	b480      	push	{r7}
 8009546:	b089      	sub	sp, #36	@ 0x24
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800954c:	4ba0      	ldr	r3, [pc, #640]	@ (80097d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800954e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009550:	f003 0303 	and.w	r3, r3, #3
 8009554:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009556:	4b9e      	ldr	r3, [pc, #632]	@ (80097d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800955a:	091b      	lsrs	r3, r3, #4
 800955c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009560:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009562:	4b9b      	ldr	r3, [pc, #620]	@ (80097d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009566:	f003 0301 	and.w	r3, r3, #1
 800956a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800956c:	4b98      	ldr	r3, [pc, #608]	@ (80097d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800956e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009570:	08db      	lsrs	r3, r3, #3
 8009572:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009576:	693a      	ldr	r2, [r7, #16]
 8009578:	fb02 f303 	mul.w	r3, r2, r3
 800957c:	ee07 3a90 	vmov	s15, r3
 8009580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009584:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	2b00      	cmp	r3, #0
 800958c:	f000 8111 	beq.w	80097b2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	2b02      	cmp	r3, #2
 8009594:	f000 8083 	beq.w	800969e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	2b02      	cmp	r3, #2
 800959c:	f200 80a1 	bhi.w	80096e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d003      	beq.n	80095ae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d056      	beq.n	800965a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80095ac:	e099      	b.n	80096e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095ae:	4b88      	ldr	r3, [pc, #544]	@ (80097d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f003 0320 	and.w	r3, r3, #32
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d02d      	beq.n	8009616 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095ba:	4b85      	ldr	r3, [pc, #532]	@ (80097d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	08db      	lsrs	r3, r3, #3
 80095c0:	f003 0303 	and.w	r3, r3, #3
 80095c4:	4a83      	ldr	r2, [pc, #524]	@ (80097d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80095c6:	fa22 f303 	lsr.w	r3, r2, r3
 80095ca:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	ee07 3a90 	vmov	s15, r3
 80095d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	ee07 3a90 	vmov	s15, r3
 80095dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095e4:	4b7a      	ldr	r3, [pc, #488]	@ (80097d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ec:	ee07 3a90 	vmov	s15, r3
 80095f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80095f8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80097d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80095fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009600:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009604:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800960c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009610:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009614:	e087      	b.n	8009726 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	ee07 3a90 	vmov	s15, r3
 800961c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009620:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80097dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009624:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009628:	4b69      	ldr	r3, [pc, #420]	@ (80097d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800962a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800962c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009630:	ee07 3a90 	vmov	s15, r3
 8009634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009638:	ed97 6a03 	vldr	s12, [r7, #12]
 800963c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80097d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009640:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009644:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009648:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800964c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009654:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009658:	e065      	b.n	8009726 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	ee07 3a90 	vmov	s15, r3
 8009660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009664:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80097e0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009668:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800966c:	4b58      	ldr	r3, [pc, #352]	@ (80097d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800966e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009674:	ee07 3a90 	vmov	s15, r3
 8009678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800967c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009680:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80097d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009684:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009688:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800968c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009690:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009698:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800969c:	e043      	b.n	8009726 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	ee07 3a90 	vmov	s15, r3
 80096a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096a8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80097e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80096ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096b0:	4b47      	ldr	r3, [pc, #284]	@ (80097d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096b8:	ee07 3a90 	vmov	s15, r3
 80096bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80096c4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80097d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096e0:	e021      	b.n	8009726 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	ee07 3a90 	vmov	s15, r3
 80096e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ec:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80097dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80096f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096f4:	4b36      	ldr	r3, [pc, #216]	@ (80097d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096fc:	ee07 3a90 	vmov	s15, r3
 8009700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009704:	ed97 6a03 	vldr	s12, [r7, #12]
 8009708:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80097d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800970c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009710:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009714:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009718:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800971c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009720:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009724:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009726:	4b2a      	ldr	r3, [pc, #168]	@ (80097d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800972a:	0a5b      	lsrs	r3, r3, #9
 800972c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009730:	ee07 3a90 	vmov	s15, r3
 8009734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009738:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800973c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009740:	edd7 6a07 	vldr	s13, [r7, #28]
 8009744:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800974c:	ee17 2a90 	vmov	r2, s15
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009754:	4b1e      	ldr	r3, [pc, #120]	@ (80097d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009758:	0c1b      	lsrs	r3, r3, #16
 800975a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800975e:	ee07 3a90 	vmov	s15, r3
 8009762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009766:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800976a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800976e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009772:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009776:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800977a:	ee17 2a90 	vmov	r2, s15
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009782:	4b13      	ldr	r3, [pc, #76]	@ (80097d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009786:	0e1b      	lsrs	r3, r3, #24
 8009788:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800978c:	ee07 3a90 	vmov	s15, r3
 8009790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009794:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009798:	ee37 7a87 	vadd.f32	s14, s15, s14
 800979c:	edd7 6a07 	vldr	s13, [r7, #28]
 80097a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097a8:	ee17 2a90 	vmov	r2, s15
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80097b0:	e008      	b.n	80097c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	609a      	str	r2, [r3, #8]
}
 80097c4:	bf00      	nop
 80097c6:	3724      	adds	r7, #36	@ 0x24
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr
 80097d0:	58024400 	.word	0x58024400
 80097d4:	03d09000 	.word	0x03d09000
 80097d8:	46000000 	.word	0x46000000
 80097dc:	4c742400 	.word	0x4c742400
 80097e0:	4a742400 	.word	0x4a742400
 80097e4:	4bb71b00 	.word	0x4bb71b00

080097e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80097f2:	2300      	movs	r3, #0
 80097f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80097f6:	4b53      	ldr	r3, [pc, #332]	@ (8009944 <RCCEx_PLL2_Config+0x15c>)
 80097f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097fa:	f003 0303 	and.w	r3, r3, #3
 80097fe:	2b03      	cmp	r3, #3
 8009800:	d101      	bne.n	8009806 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	e099      	b.n	800993a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009806:	4b4f      	ldr	r3, [pc, #316]	@ (8009944 <RCCEx_PLL2_Config+0x15c>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a4e      	ldr	r2, [pc, #312]	@ (8009944 <RCCEx_PLL2_Config+0x15c>)
 800980c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009810:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009812:	f7f9 f965 	bl	8002ae0 <HAL_GetTick>
 8009816:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009818:	e008      	b.n	800982c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800981a:	f7f9 f961 	bl	8002ae0 <HAL_GetTick>
 800981e:	4602      	mov	r2, r0
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	1ad3      	subs	r3, r2, r3
 8009824:	2b02      	cmp	r3, #2
 8009826:	d901      	bls.n	800982c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009828:	2303      	movs	r3, #3
 800982a:	e086      	b.n	800993a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800982c:	4b45      	ldr	r3, [pc, #276]	@ (8009944 <RCCEx_PLL2_Config+0x15c>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009834:	2b00      	cmp	r3, #0
 8009836:	d1f0      	bne.n	800981a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009838:	4b42      	ldr	r3, [pc, #264]	@ (8009944 <RCCEx_PLL2_Config+0x15c>)
 800983a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800983c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	031b      	lsls	r3, r3, #12
 8009846:	493f      	ldr	r1, [pc, #252]	@ (8009944 <RCCEx_PLL2_Config+0x15c>)
 8009848:	4313      	orrs	r3, r2
 800984a:	628b      	str	r3, [r1, #40]	@ 0x28
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	3b01      	subs	r3, #1
 8009852:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	3b01      	subs	r3, #1
 800985c:	025b      	lsls	r3, r3, #9
 800985e:	b29b      	uxth	r3, r3
 8009860:	431a      	orrs	r2, r3
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	3b01      	subs	r3, #1
 8009868:	041b      	lsls	r3, r3, #16
 800986a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800986e:	431a      	orrs	r2, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	3b01      	subs	r3, #1
 8009876:	061b      	lsls	r3, r3, #24
 8009878:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800987c:	4931      	ldr	r1, [pc, #196]	@ (8009944 <RCCEx_PLL2_Config+0x15c>)
 800987e:	4313      	orrs	r3, r2
 8009880:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009882:	4b30      	ldr	r3, [pc, #192]	@ (8009944 <RCCEx_PLL2_Config+0x15c>)
 8009884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009886:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	695b      	ldr	r3, [r3, #20]
 800988e:	492d      	ldr	r1, [pc, #180]	@ (8009944 <RCCEx_PLL2_Config+0x15c>)
 8009890:	4313      	orrs	r3, r2
 8009892:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009894:	4b2b      	ldr	r3, [pc, #172]	@ (8009944 <RCCEx_PLL2_Config+0x15c>)
 8009896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009898:	f023 0220 	bic.w	r2, r3, #32
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	699b      	ldr	r3, [r3, #24]
 80098a0:	4928      	ldr	r1, [pc, #160]	@ (8009944 <RCCEx_PLL2_Config+0x15c>)
 80098a2:	4313      	orrs	r3, r2
 80098a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80098a6:	4b27      	ldr	r3, [pc, #156]	@ (8009944 <RCCEx_PLL2_Config+0x15c>)
 80098a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098aa:	4a26      	ldr	r2, [pc, #152]	@ (8009944 <RCCEx_PLL2_Config+0x15c>)
 80098ac:	f023 0310 	bic.w	r3, r3, #16
 80098b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80098b2:	4b24      	ldr	r3, [pc, #144]	@ (8009944 <RCCEx_PLL2_Config+0x15c>)
 80098b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098b6:	4b24      	ldr	r3, [pc, #144]	@ (8009948 <RCCEx_PLL2_Config+0x160>)
 80098b8:	4013      	ands	r3, r2
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	69d2      	ldr	r2, [r2, #28]
 80098be:	00d2      	lsls	r2, r2, #3
 80098c0:	4920      	ldr	r1, [pc, #128]	@ (8009944 <RCCEx_PLL2_Config+0x15c>)
 80098c2:	4313      	orrs	r3, r2
 80098c4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80098c6:	4b1f      	ldr	r3, [pc, #124]	@ (8009944 <RCCEx_PLL2_Config+0x15c>)
 80098c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ca:	4a1e      	ldr	r2, [pc, #120]	@ (8009944 <RCCEx_PLL2_Config+0x15c>)
 80098cc:	f043 0310 	orr.w	r3, r3, #16
 80098d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d106      	bne.n	80098e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80098d8:	4b1a      	ldr	r3, [pc, #104]	@ (8009944 <RCCEx_PLL2_Config+0x15c>)
 80098da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098dc:	4a19      	ldr	r2, [pc, #100]	@ (8009944 <RCCEx_PLL2_Config+0x15c>)
 80098de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80098e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80098e4:	e00f      	b.n	8009906 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d106      	bne.n	80098fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80098ec:	4b15      	ldr	r3, [pc, #84]	@ (8009944 <RCCEx_PLL2_Config+0x15c>)
 80098ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098f0:	4a14      	ldr	r2, [pc, #80]	@ (8009944 <RCCEx_PLL2_Config+0x15c>)
 80098f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80098f8:	e005      	b.n	8009906 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80098fa:	4b12      	ldr	r3, [pc, #72]	@ (8009944 <RCCEx_PLL2_Config+0x15c>)
 80098fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098fe:	4a11      	ldr	r2, [pc, #68]	@ (8009944 <RCCEx_PLL2_Config+0x15c>)
 8009900:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009904:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009906:	4b0f      	ldr	r3, [pc, #60]	@ (8009944 <RCCEx_PLL2_Config+0x15c>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a0e      	ldr	r2, [pc, #56]	@ (8009944 <RCCEx_PLL2_Config+0x15c>)
 800990c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009910:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009912:	f7f9 f8e5 	bl	8002ae0 <HAL_GetTick>
 8009916:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009918:	e008      	b.n	800992c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800991a:	f7f9 f8e1 	bl	8002ae0 <HAL_GetTick>
 800991e:	4602      	mov	r2, r0
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	1ad3      	subs	r3, r2, r3
 8009924:	2b02      	cmp	r3, #2
 8009926:	d901      	bls.n	800992c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009928:	2303      	movs	r3, #3
 800992a:	e006      	b.n	800993a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800992c:	4b05      	ldr	r3, [pc, #20]	@ (8009944 <RCCEx_PLL2_Config+0x15c>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009934:	2b00      	cmp	r3, #0
 8009936:	d0f0      	beq.n	800991a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009938:	7bfb      	ldrb	r3, [r7, #15]
}
 800993a:	4618      	mov	r0, r3
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	58024400 	.word	0x58024400
 8009948:	ffff0007 	.word	0xffff0007

0800994c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009956:	2300      	movs	r3, #0
 8009958:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800995a:	4b53      	ldr	r3, [pc, #332]	@ (8009aa8 <RCCEx_PLL3_Config+0x15c>)
 800995c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800995e:	f003 0303 	and.w	r3, r3, #3
 8009962:	2b03      	cmp	r3, #3
 8009964:	d101      	bne.n	800996a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	e099      	b.n	8009a9e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800996a:	4b4f      	ldr	r3, [pc, #316]	@ (8009aa8 <RCCEx_PLL3_Config+0x15c>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a4e      	ldr	r2, [pc, #312]	@ (8009aa8 <RCCEx_PLL3_Config+0x15c>)
 8009970:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009974:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009976:	f7f9 f8b3 	bl	8002ae0 <HAL_GetTick>
 800997a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800997c:	e008      	b.n	8009990 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800997e:	f7f9 f8af 	bl	8002ae0 <HAL_GetTick>
 8009982:	4602      	mov	r2, r0
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	1ad3      	subs	r3, r2, r3
 8009988:	2b02      	cmp	r3, #2
 800998a:	d901      	bls.n	8009990 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800998c:	2303      	movs	r3, #3
 800998e:	e086      	b.n	8009a9e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009990:	4b45      	ldr	r3, [pc, #276]	@ (8009aa8 <RCCEx_PLL3_Config+0x15c>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009998:	2b00      	cmp	r3, #0
 800999a:	d1f0      	bne.n	800997e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800999c:	4b42      	ldr	r3, [pc, #264]	@ (8009aa8 <RCCEx_PLL3_Config+0x15c>)
 800999e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	051b      	lsls	r3, r3, #20
 80099aa:	493f      	ldr	r1, [pc, #252]	@ (8009aa8 <RCCEx_PLL3_Config+0x15c>)
 80099ac:	4313      	orrs	r3, r2
 80099ae:	628b      	str	r3, [r1, #40]	@ 0x28
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	3b01      	subs	r3, #1
 80099b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	3b01      	subs	r3, #1
 80099c0:	025b      	lsls	r3, r3, #9
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	431a      	orrs	r2, r3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	3b01      	subs	r3, #1
 80099cc:	041b      	lsls	r3, r3, #16
 80099ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80099d2:	431a      	orrs	r2, r3
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	3b01      	subs	r3, #1
 80099da:	061b      	lsls	r3, r3, #24
 80099dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80099e0:	4931      	ldr	r1, [pc, #196]	@ (8009aa8 <RCCEx_PLL3_Config+0x15c>)
 80099e2:	4313      	orrs	r3, r2
 80099e4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80099e6:	4b30      	ldr	r3, [pc, #192]	@ (8009aa8 <RCCEx_PLL3_Config+0x15c>)
 80099e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	695b      	ldr	r3, [r3, #20]
 80099f2:	492d      	ldr	r1, [pc, #180]	@ (8009aa8 <RCCEx_PLL3_Config+0x15c>)
 80099f4:	4313      	orrs	r3, r2
 80099f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80099f8:	4b2b      	ldr	r3, [pc, #172]	@ (8009aa8 <RCCEx_PLL3_Config+0x15c>)
 80099fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099fc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	4928      	ldr	r1, [pc, #160]	@ (8009aa8 <RCCEx_PLL3_Config+0x15c>)
 8009a06:	4313      	orrs	r3, r2
 8009a08:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009a0a:	4b27      	ldr	r3, [pc, #156]	@ (8009aa8 <RCCEx_PLL3_Config+0x15c>)
 8009a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a0e:	4a26      	ldr	r2, [pc, #152]	@ (8009aa8 <RCCEx_PLL3_Config+0x15c>)
 8009a10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009a16:	4b24      	ldr	r3, [pc, #144]	@ (8009aa8 <RCCEx_PLL3_Config+0x15c>)
 8009a18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a1a:	4b24      	ldr	r3, [pc, #144]	@ (8009aac <RCCEx_PLL3_Config+0x160>)
 8009a1c:	4013      	ands	r3, r2
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	69d2      	ldr	r2, [r2, #28]
 8009a22:	00d2      	lsls	r2, r2, #3
 8009a24:	4920      	ldr	r1, [pc, #128]	@ (8009aa8 <RCCEx_PLL3_Config+0x15c>)
 8009a26:	4313      	orrs	r3, r2
 8009a28:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009a2a:	4b1f      	ldr	r3, [pc, #124]	@ (8009aa8 <RCCEx_PLL3_Config+0x15c>)
 8009a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8009aa8 <RCCEx_PLL3_Config+0x15c>)
 8009a30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a34:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d106      	bne.n	8009a4a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8009aa8 <RCCEx_PLL3_Config+0x15c>)
 8009a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a40:	4a19      	ldr	r2, [pc, #100]	@ (8009aa8 <RCCEx_PLL3_Config+0x15c>)
 8009a42:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009a46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a48:	e00f      	b.n	8009a6a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d106      	bne.n	8009a5e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009a50:	4b15      	ldr	r3, [pc, #84]	@ (8009aa8 <RCCEx_PLL3_Config+0x15c>)
 8009a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a54:	4a14      	ldr	r2, [pc, #80]	@ (8009aa8 <RCCEx_PLL3_Config+0x15c>)
 8009a56:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a5c:	e005      	b.n	8009a6a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009a5e:	4b12      	ldr	r3, [pc, #72]	@ (8009aa8 <RCCEx_PLL3_Config+0x15c>)
 8009a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a62:	4a11      	ldr	r2, [pc, #68]	@ (8009aa8 <RCCEx_PLL3_Config+0x15c>)
 8009a64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009a68:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8009aa8 <RCCEx_PLL3_Config+0x15c>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a0e      	ldr	r2, [pc, #56]	@ (8009aa8 <RCCEx_PLL3_Config+0x15c>)
 8009a70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a76:	f7f9 f833 	bl	8002ae0 <HAL_GetTick>
 8009a7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a7c:	e008      	b.n	8009a90 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009a7e:	f7f9 f82f 	bl	8002ae0 <HAL_GetTick>
 8009a82:	4602      	mov	r2, r0
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	1ad3      	subs	r3, r2, r3
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d901      	bls.n	8009a90 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	e006      	b.n	8009a9e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a90:	4b05      	ldr	r3, [pc, #20]	@ (8009aa8 <RCCEx_PLL3_Config+0x15c>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d0f0      	beq.n	8009a7e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3710      	adds	r7, #16
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	58024400 	.word	0x58024400
 8009aac:	ffff0007 	.word	0xffff0007

08009ab0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d101      	bne.n	8009ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e042      	b.n	8009b48 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d106      	bne.n	8009ada <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f7f8 fe03 	bl	80026e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2224      	movs	r2, #36	@ 0x24
 8009ade:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f022 0201 	bic.w	r2, r2, #1
 8009af0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d002      	beq.n	8009b00 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 ff38 	bl	800a970 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 f8c9 	bl	8009c98 <UART_SetConfig>
 8009b06:	4603      	mov	r3, r0
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d101      	bne.n	8009b10 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	e01b      	b.n	8009b48 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	685a      	ldr	r2, [r3, #4]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009b1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	689a      	ldr	r2, [r3, #8]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009b2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f042 0201 	orr.w	r2, r2, #1
 8009b3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 ffb7 	bl	800aab4 <UART_CheckIdleState>
 8009b46:	4603      	mov	r3, r0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3708      	adds	r7, #8
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b08a      	sub	sp, #40	@ 0x28
 8009b54:	af02      	add	r7, sp, #8
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	603b      	str	r3, [r7, #0]
 8009b5c:	4613      	mov	r3, r2
 8009b5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b66:	2b20      	cmp	r3, #32
 8009b68:	d17b      	bne.n	8009c62 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d002      	beq.n	8009b76 <HAL_UART_Transmit+0x26>
 8009b70:	88fb      	ldrh	r3, [r7, #6]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d101      	bne.n	8009b7a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009b76:	2301      	movs	r3, #1
 8009b78:	e074      	b.n	8009c64 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2221      	movs	r2, #33	@ 0x21
 8009b86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b8a:	f7f8 ffa9 	bl	8002ae0 <HAL_GetTick>
 8009b8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	88fa      	ldrh	r2, [r7, #6]
 8009b94:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	88fa      	ldrh	r2, [r7, #6]
 8009b9c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ba8:	d108      	bne.n	8009bbc <HAL_UART_Transmit+0x6c>
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	691b      	ldr	r3, [r3, #16]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d104      	bne.n	8009bbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	61bb      	str	r3, [r7, #24]
 8009bba:	e003      	b.n	8009bc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009bc4:	e030      	b.n	8009c28 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	9300      	str	r3, [sp, #0]
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	2180      	movs	r1, #128	@ 0x80
 8009bd0:	68f8      	ldr	r0, [r7, #12]
 8009bd2:	f001 f819 	bl	800ac08 <UART_WaitOnFlagUntilTimeout>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d005      	beq.n	8009be8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2220      	movs	r2, #32
 8009be0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009be4:	2303      	movs	r3, #3
 8009be6:	e03d      	b.n	8009c64 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009be8:	69fb      	ldr	r3, [r7, #28]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d10b      	bne.n	8009c06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	881b      	ldrh	r3, [r3, #0]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009bfc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009bfe:	69bb      	ldr	r3, [r7, #24]
 8009c00:	3302      	adds	r3, #2
 8009c02:	61bb      	str	r3, [r7, #24]
 8009c04:	e007      	b.n	8009c16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	781a      	ldrb	r2, [r3, #0]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	3301      	adds	r3, #1
 8009c14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	3b01      	subs	r3, #1
 8009c20:	b29a      	uxth	r2, r3
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1c8      	bne.n	8009bc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	9300      	str	r3, [sp, #0]
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	2140      	movs	r1, #64	@ 0x40
 8009c3e:	68f8      	ldr	r0, [r7, #12]
 8009c40:	f000 ffe2 	bl	800ac08 <UART_WaitOnFlagUntilTimeout>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d005      	beq.n	8009c56 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2220      	movs	r2, #32
 8009c4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009c52:	2303      	movs	r3, #3
 8009c54:	e006      	b.n	8009c64 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2220      	movs	r2, #32
 8009c5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	e000      	b.n	8009c64 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009c62:	2302      	movs	r3, #2
  }
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3720      	adds	r7, #32
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c7a:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c82:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	4313      	orrs	r3, r2
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3714      	adds	r7, #20
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr
	...

08009c98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c9c:	b092      	sub	sp, #72	@ 0x48
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	689a      	ldr	r2, [r3, #8]
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	431a      	orrs	r2, r3
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	695b      	ldr	r3, [r3, #20]
 8009cb6:	431a      	orrs	r2, r3
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	69db      	ldr	r3, [r3, #28]
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	4bbe      	ldr	r3, [pc, #760]	@ (8009fc0 <UART_SetConfig+0x328>)
 8009cc8:	4013      	ands	r3, r2
 8009cca:	697a      	ldr	r2, [r7, #20]
 8009ccc:	6812      	ldr	r2, [r2, #0]
 8009cce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009cd0:	430b      	orrs	r3, r1
 8009cd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	68da      	ldr	r2, [r3, #12]
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	430a      	orrs	r2, r1
 8009ce8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	699b      	ldr	r3, [r3, #24]
 8009cee:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4ab3      	ldr	r2, [pc, #716]	@ (8009fc4 <UART_SetConfig+0x32c>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d004      	beq.n	8009d04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	6a1b      	ldr	r3, [r3, #32]
 8009cfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d00:	4313      	orrs	r3, r2
 8009d02:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	689a      	ldr	r2, [r3, #8]
 8009d0a:	4baf      	ldr	r3, [pc, #700]	@ (8009fc8 <UART_SetConfig+0x330>)
 8009d0c:	4013      	ands	r3, r2
 8009d0e:	697a      	ldr	r2, [r7, #20]
 8009d10:	6812      	ldr	r2, [r2, #0]
 8009d12:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009d14:	430b      	orrs	r3, r1
 8009d16:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d1e:	f023 010f 	bic.w	r1, r3, #15
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	430a      	orrs	r2, r1
 8009d2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4aa6      	ldr	r2, [pc, #664]	@ (8009fcc <UART_SetConfig+0x334>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d177      	bne.n	8009e28 <UART_SetConfig+0x190>
 8009d38:	4ba5      	ldr	r3, [pc, #660]	@ (8009fd0 <UART_SetConfig+0x338>)
 8009d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009d40:	2b28      	cmp	r3, #40	@ 0x28
 8009d42:	d86d      	bhi.n	8009e20 <UART_SetConfig+0x188>
 8009d44:	a201      	add	r2, pc, #4	@ (adr r2, 8009d4c <UART_SetConfig+0xb4>)
 8009d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d4a:	bf00      	nop
 8009d4c:	08009df1 	.word	0x08009df1
 8009d50:	08009e21 	.word	0x08009e21
 8009d54:	08009e21 	.word	0x08009e21
 8009d58:	08009e21 	.word	0x08009e21
 8009d5c:	08009e21 	.word	0x08009e21
 8009d60:	08009e21 	.word	0x08009e21
 8009d64:	08009e21 	.word	0x08009e21
 8009d68:	08009e21 	.word	0x08009e21
 8009d6c:	08009df9 	.word	0x08009df9
 8009d70:	08009e21 	.word	0x08009e21
 8009d74:	08009e21 	.word	0x08009e21
 8009d78:	08009e21 	.word	0x08009e21
 8009d7c:	08009e21 	.word	0x08009e21
 8009d80:	08009e21 	.word	0x08009e21
 8009d84:	08009e21 	.word	0x08009e21
 8009d88:	08009e21 	.word	0x08009e21
 8009d8c:	08009e01 	.word	0x08009e01
 8009d90:	08009e21 	.word	0x08009e21
 8009d94:	08009e21 	.word	0x08009e21
 8009d98:	08009e21 	.word	0x08009e21
 8009d9c:	08009e21 	.word	0x08009e21
 8009da0:	08009e21 	.word	0x08009e21
 8009da4:	08009e21 	.word	0x08009e21
 8009da8:	08009e21 	.word	0x08009e21
 8009dac:	08009e09 	.word	0x08009e09
 8009db0:	08009e21 	.word	0x08009e21
 8009db4:	08009e21 	.word	0x08009e21
 8009db8:	08009e21 	.word	0x08009e21
 8009dbc:	08009e21 	.word	0x08009e21
 8009dc0:	08009e21 	.word	0x08009e21
 8009dc4:	08009e21 	.word	0x08009e21
 8009dc8:	08009e21 	.word	0x08009e21
 8009dcc:	08009e11 	.word	0x08009e11
 8009dd0:	08009e21 	.word	0x08009e21
 8009dd4:	08009e21 	.word	0x08009e21
 8009dd8:	08009e21 	.word	0x08009e21
 8009ddc:	08009e21 	.word	0x08009e21
 8009de0:	08009e21 	.word	0x08009e21
 8009de4:	08009e21 	.word	0x08009e21
 8009de8:	08009e21 	.word	0x08009e21
 8009dec:	08009e19 	.word	0x08009e19
 8009df0:	2301      	movs	r3, #1
 8009df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009df6:	e326      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009df8:	2304      	movs	r3, #4
 8009dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dfe:	e322      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009e00:	2308      	movs	r3, #8
 8009e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e06:	e31e      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009e08:	2310      	movs	r3, #16
 8009e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e0e:	e31a      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009e10:	2320      	movs	r3, #32
 8009e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e16:	e316      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009e18:	2340      	movs	r3, #64	@ 0x40
 8009e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e1e:	e312      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009e20:	2380      	movs	r3, #128	@ 0x80
 8009e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e26:	e30e      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a69      	ldr	r2, [pc, #420]	@ (8009fd4 <UART_SetConfig+0x33c>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d130      	bne.n	8009e94 <UART_SetConfig+0x1fc>
 8009e32:	4b67      	ldr	r3, [pc, #412]	@ (8009fd0 <UART_SetConfig+0x338>)
 8009e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e36:	f003 0307 	and.w	r3, r3, #7
 8009e3a:	2b05      	cmp	r3, #5
 8009e3c:	d826      	bhi.n	8009e8c <UART_SetConfig+0x1f4>
 8009e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e44 <UART_SetConfig+0x1ac>)
 8009e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e44:	08009e5d 	.word	0x08009e5d
 8009e48:	08009e65 	.word	0x08009e65
 8009e4c:	08009e6d 	.word	0x08009e6d
 8009e50:	08009e75 	.word	0x08009e75
 8009e54:	08009e7d 	.word	0x08009e7d
 8009e58:	08009e85 	.word	0x08009e85
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e62:	e2f0      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009e64:	2304      	movs	r3, #4
 8009e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e6a:	e2ec      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009e6c:	2308      	movs	r3, #8
 8009e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e72:	e2e8      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009e74:	2310      	movs	r3, #16
 8009e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e7a:	e2e4      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009e7c:	2320      	movs	r3, #32
 8009e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e82:	e2e0      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009e84:	2340      	movs	r3, #64	@ 0x40
 8009e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e8a:	e2dc      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009e8c:	2380      	movs	r3, #128	@ 0x80
 8009e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e92:	e2d8      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a4f      	ldr	r2, [pc, #316]	@ (8009fd8 <UART_SetConfig+0x340>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d130      	bne.n	8009f00 <UART_SetConfig+0x268>
 8009e9e:	4b4c      	ldr	r3, [pc, #304]	@ (8009fd0 <UART_SetConfig+0x338>)
 8009ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ea2:	f003 0307 	and.w	r3, r3, #7
 8009ea6:	2b05      	cmp	r3, #5
 8009ea8:	d826      	bhi.n	8009ef8 <UART_SetConfig+0x260>
 8009eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8009eb0 <UART_SetConfig+0x218>)
 8009eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb0:	08009ec9 	.word	0x08009ec9
 8009eb4:	08009ed1 	.word	0x08009ed1
 8009eb8:	08009ed9 	.word	0x08009ed9
 8009ebc:	08009ee1 	.word	0x08009ee1
 8009ec0:	08009ee9 	.word	0x08009ee9
 8009ec4:	08009ef1 	.word	0x08009ef1
 8009ec8:	2300      	movs	r3, #0
 8009eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ece:	e2ba      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009ed0:	2304      	movs	r3, #4
 8009ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ed6:	e2b6      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009ed8:	2308      	movs	r3, #8
 8009eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ede:	e2b2      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009ee0:	2310      	movs	r3, #16
 8009ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ee6:	e2ae      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009ee8:	2320      	movs	r3, #32
 8009eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eee:	e2aa      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009ef0:	2340      	movs	r3, #64	@ 0x40
 8009ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ef6:	e2a6      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009ef8:	2380      	movs	r3, #128	@ 0x80
 8009efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009efe:	e2a2      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a35      	ldr	r2, [pc, #212]	@ (8009fdc <UART_SetConfig+0x344>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d130      	bne.n	8009f6c <UART_SetConfig+0x2d4>
 8009f0a:	4b31      	ldr	r3, [pc, #196]	@ (8009fd0 <UART_SetConfig+0x338>)
 8009f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f0e:	f003 0307 	and.w	r3, r3, #7
 8009f12:	2b05      	cmp	r3, #5
 8009f14:	d826      	bhi.n	8009f64 <UART_SetConfig+0x2cc>
 8009f16:	a201      	add	r2, pc, #4	@ (adr r2, 8009f1c <UART_SetConfig+0x284>)
 8009f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f1c:	08009f35 	.word	0x08009f35
 8009f20:	08009f3d 	.word	0x08009f3d
 8009f24:	08009f45 	.word	0x08009f45
 8009f28:	08009f4d 	.word	0x08009f4d
 8009f2c:	08009f55 	.word	0x08009f55
 8009f30:	08009f5d 	.word	0x08009f5d
 8009f34:	2300      	movs	r3, #0
 8009f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f3a:	e284      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009f3c:	2304      	movs	r3, #4
 8009f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f42:	e280      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009f44:	2308      	movs	r3, #8
 8009f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f4a:	e27c      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009f4c:	2310      	movs	r3, #16
 8009f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f52:	e278      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009f54:	2320      	movs	r3, #32
 8009f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f5a:	e274      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009f5c:	2340      	movs	r3, #64	@ 0x40
 8009f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f62:	e270      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009f64:	2380      	movs	r3, #128	@ 0x80
 8009f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f6a:	e26c      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a1b      	ldr	r2, [pc, #108]	@ (8009fe0 <UART_SetConfig+0x348>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d142      	bne.n	8009ffc <UART_SetConfig+0x364>
 8009f76:	4b16      	ldr	r3, [pc, #88]	@ (8009fd0 <UART_SetConfig+0x338>)
 8009f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f7a:	f003 0307 	and.w	r3, r3, #7
 8009f7e:	2b05      	cmp	r3, #5
 8009f80:	d838      	bhi.n	8009ff4 <UART_SetConfig+0x35c>
 8009f82:	a201      	add	r2, pc, #4	@ (adr r2, 8009f88 <UART_SetConfig+0x2f0>)
 8009f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f88:	08009fa1 	.word	0x08009fa1
 8009f8c:	08009fa9 	.word	0x08009fa9
 8009f90:	08009fb1 	.word	0x08009fb1
 8009f94:	08009fb9 	.word	0x08009fb9
 8009f98:	08009fe5 	.word	0x08009fe5
 8009f9c:	08009fed 	.word	0x08009fed
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fa6:	e24e      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009fa8:	2304      	movs	r3, #4
 8009faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fae:	e24a      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009fb0:	2308      	movs	r3, #8
 8009fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fb6:	e246      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009fb8:	2310      	movs	r3, #16
 8009fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fbe:	e242      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009fc0:	cfff69f3 	.word	0xcfff69f3
 8009fc4:	58000c00 	.word	0x58000c00
 8009fc8:	11fff4ff 	.word	0x11fff4ff
 8009fcc:	40011000 	.word	0x40011000
 8009fd0:	58024400 	.word	0x58024400
 8009fd4:	40004400 	.word	0x40004400
 8009fd8:	40004800 	.word	0x40004800
 8009fdc:	40004c00 	.word	0x40004c00
 8009fe0:	40005000 	.word	0x40005000
 8009fe4:	2320      	movs	r3, #32
 8009fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fea:	e22c      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009fec:	2340      	movs	r3, #64	@ 0x40
 8009fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ff2:	e228      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009ff4:	2380      	movs	r3, #128	@ 0x80
 8009ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ffa:	e224      	b.n	800a446 <UART_SetConfig+0x7ae>
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4ab1      	ldr	r2, [pc, #708]	@ (800a2c8 <UART_SetConfig+0x630>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d176      	bne.n	800a0f4 <UART_SetConfig+0x45c>
 800a006:	4bb1      	ldr	r3, [pc, #708]	@ (800a2cc <UART_SetConfig+0x634>)
 800a008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a00a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a00e:	2b28      	cmp	r3, #40	@ 0x28
 800a010:	d86c      	bhi.n	800a0ec <UART_SetConfig+0x454>
 800a012:	a201      	add	r2, pc, #4	@ (adr r2, 800a018 <UART_SetConfig+0x380>)
 800a014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a018:	0800a0bd 	.word	0x0800a0bd
 800a01c:	0800a0ed 	.word	0x0800a0ed
 800a020:	0800a0ed 	.word	0x0800a0ed
 800a024:	0800a0ed 	.word	0x0800a0ed
 800a028:	0800a0ed 	.word	0x0800a0ed
 800a02c:	0800a0ed 	.word	0x0800a0ed
 800a030:	0800a0ed 	.word	0x0800a0ed
 800a034:	0800a0ed 	.word	0x0800a0ed
 800a038:	0800a0c5 	.word	0x0800a0c5
 800a03c:	0800a0ed 	.word	0x0800a0ed
 800a040:	0800a0ed 	.word	0x0800a0ed
 800a044:	0800a0ed 	.word	0x0800a0ed
 800a048:	0800a0ed 	.word	0x0800a0ed
 800a04c:	0800a0ed 	.word	0x0800a0ed
 800a050:	0800a0ed 	.word	0x0800a0ed
 800a054:	0800a0ed 	.word	0x0800a0ed
 800a058:	0800a0cd 	.word	0x0800a0cd
 800a05c:	0800a0ed 	.word	0x0800a0ed
 800a060:	0800a0ed 	.word	0x0800a0ed
 800a064:	0800a0ed 	.word	0x0800a0ed
 800a068:	0800a0ed 	.word	0x0800a0ed
 800a06c:	0800a0ed 	.word	0x0800a0ed
 800a070:	0800a0ed 	.word	0x0800a0ed
 800a074:	0800a0ed 	.word	0x0800a0ed
 800a078:	0800a0d5 	.word	0x0800a0d5
 800a07c:	0800a0ed 	.word	0x0800a0ed
 800a080:	0800a0ed 	.word	0x0800a0ed
 800a084:	0800a0ed 	.word	0x0800a0ed
 800a088:	0800a0ed 	.word	0x0800a0ed
 800a08c:	0800a0ed 	.word	0x0800a0ed
 800a090:	0800a0ed 	.word	0x0800a0ed
 800a094:	0800a0ed 	.word	0x0800a0ed
 800a098:	0800a0dd 	.word	0x0800a0dd
 800a09c:	0800a0ed 	.word	0x0800a0ed
 800a0a0:	0800a0ed 	.word	0x0800a0ed
 800a0a4:	0800a0ed 	.word	0x0800a0ed
 800a0a8:	0800a0ed 	.word	0x0800a0ed
 800a0ac:	0800a0ed 	.word	0x0800a0ed
 800a0b0:	0800a0ed 	.word	0x0800a0ed
 800a0b4:	0800a0ed 	.word	0x0800a0ed
 800a0b8:	0800a0e5 	.word	0x0800a0e5
 800a0bc:	2301      	movs	r3, #1
 800a0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0c2:	e1c0      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a0c4:	2304      	movs	r3, #4
 800a0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ca:	e1bc      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a0cc:	2308      	movs	r3, #8
 800a0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0d2:	e1b8      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a0d4:	2310      	movs	r3, #16
 800a0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0da:	e1b4      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a0dc:	2320      	movs	r3, #32
 800a0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0e2:	e1b0      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a0e4:	2340      	movs	r3, #64	@ 0x40
 800a0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ea:	e1ac      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a0ec:	2380      	movs	r3, #128	@ 0x80
 800a0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0f2:	e1a8      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a75      	ldr	r2, [pc, #468]	@ (800a2d0 <UART_SetConfig+0x638>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d130      	bne.n	800a160 <UART_SetConfig+0x4c8>
 800a0fe:	4b73      	ldr	r3, [pc, #460]	@ (800a2cc <UART_SetConfig+0x634>)
 800a100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a102:	f003 0307 	and.w	r3, r3, #7
 800a106:	2b05      	cmp	r3, #5
 800a108:	d826      	bhi.n	800a158 <UART_SetConfig+0x4c0>
 800a10a:	a201      	add	r2, pc, #4	@ (adr r2, 800a110 <UART_SetConfig+0x478>)
 800a10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a110:	0800a129 	.word	0x0800a129
 800a114:	0800a131 	.word	0x0800a131
 800a118:	0800a139 	.word	0x0800a139
 800a11c:	0800a141 	.word	0x0800a141
 800a120:	0800a149 	.word	0x0800a149
 800a124:	0800a151 	.word	0x0800a151
 800a128:	2300      	movs	r3, #0
 800a12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a12e:	e18a      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a130:	2304      	movs	r3, #4
 800a132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a136:	e186      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a138:	2308      	movs	r3, #8
 800a13a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a13e:	e182      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a140:	2310      	movs	r3, #16
 800a142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a146:	e17e      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a148:	2320      	movs	r3, #32
 800a14a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a14e:	e17a      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a150:	2340      	movs	r3, #64	@ 0x40
 800a152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a156:	e176      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a158:	2380      	movs	r3, #128	@ 0x80
 800a15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a15e:	e172      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a5b      	ldr	r2, [pc, #364]	@ (800a2d4 <UART_SetConfig+0x63c>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d130      	bne.n	800a1cc <UART_SetConfig+0x534>
 800a16a:	4b58      	ldr	r3, [pc, #352]	@ (800a2cc <UART_SetConfig+0x634>)
 800a16c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a16e:	f003 0307 	and.w	r3, r3, #7
 800a172:	2b05      	cmp	r3, #5
 800a174:	d826      	bhi.n	800a1c4 <UART_SetConfig+0x52c>
 800a176:	a201      	add	r2, pc, #4	@ (adr r2, 800a17c <UART_SetConfig+0x4e4>)
 800a178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a17c:	0800a195 	.word	0x0800a195
 800a180:	0800a19d 	.word	0x0800a19d
 800a184:	0800a1a5 	.word	0x0800a1a5
 800a188:	0800a1ad 	.word	0x0800a1ad
 800a18c:	0800a1b5 	.word	0x0800a1b5
 800a190:	0800a1bd 	.word	0x0800a1bd
 800a194:	2300      	movs	r3, #0
 800a196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a19a:	e154      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a19c:	2304      	movs	r3, #4
 800a19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1a2:	e150      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a1a4:	2308      	movs	r3, #8
 800a1a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1aa:	e14c      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a1ac:	2310      	movs	r3, #16
 800a1ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1b2:	e148      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a1b4:	2320      	movs	r3, #32
 800a1b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ba:	e144      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a1bc:	2340      	movs	r3, #64	@ 0x40
 800a1be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1c2:	e140      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a1c4:	2380      	movs	r3, #128	@ 0x80
 800a1c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ca:	e13c      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a41      	ldr	r2, [pc, #260]	@ (800a2d8 <UART_SetConfig+0x640>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	f040 8082 	bne.w	800a2dc <UART_SetConfig+0x644>
 800a1d8:	4b3c      	ldr	r3, [pc, #240]	@ (800a2cc <UART_SetConfig+0x634>)
 800a1da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a1e0:	2b28      	cmp	r3, #40	@ 0x28
 800a1e2:	d86d      	bhi.n	800a2c0 <UART_SetConfig+0x628>
 800a1e4:	a201      	add	r2, pc, #4	@ (adr r2, 800a1ec <UART_SetConfig+0x554>)
 800a1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ea:	bf00      	nop
 800a1ec:	0800a291 	.word	0x0800a291
 800a1f0:	0800a2c1 	.word	0x0800a2c1
 800a1f4:	0800a2c1 	.word	0x0800a2c1
 800a1f8:	0800a2c1 	.word	0x0800a2c1
 800a1fc:	0800a2c1 	.word	0x0800a2c1
 800a200:	0800a2c1 	.word	0x0800a2c1
 800a204:	0800a2c1 	.word	0x0800a2c1
 800a208:	0800a2c1 	.word	0x0800a2c1
 800a20c:	0800a299 	.word	0x0800a299
 800a210:	0800a2c1 	.word	0x0800a2c1
 800a214:	0800a2c1 	.word	0x0800a2c1
 800a218:	0800a2c1 	.word	0x0800a2c1
 800a21c:	0800a2c1 	.word	0x0800a2c1
 800a220:	0800a2c1 	.word	0x0800a2c1
 800a224:	0800a2c1 	.word	0x0800a2c1
 800a228:	0800a2c1 	.word	0x0800a2c1
 800a22c:	0800a2a1 	.word	0x0800a2a1
 800a230:	0800a2c1 	.word	0x0800a2c1
 800a234:	0800a2c1 	.word	0x0800a2c1
 800a238:	0800a2c1 	.word	0x0800a2c1
 800a23c:	0800a2c1 	.word	0x0800a2c1
 800a240:	0800a2c1 	.word	0x0800a2c1
 800a244:	0800a2c1 	.word	0x0800a2c1
 800a248:	0800a2c1 	.word	0x0800a2c1
 800a24c:	0800a2a9 	.word	0x0800a2a9
 800a250:	0800a2c1 	.word	0x0800a2c1
 800a254:	0800a2c1 	.word	0x0800a2c1
 800a258:	0800a2c1 	.word	0x0800a2c1
 800a25c:	0800a2c1 	.word	0x0800a2c1
 800a260:	0800a2c1 	.word	0x0800a2c1
 800a264:	0800a2c1 	.word	0x0800a2c1
 800a268:	0800a2c1 	.word	0x0800a2c1
 800a26c:	0800a2b1 	.word	0x0800a2b1
 800a270:	0800a2c1 	.word	0x0800a2c1
 800a274:	0800a2c1 	.word	0x0800a2c1
 800a278:	0800a2c1 	.word	0x0800a2c1
 800a27c:	0800a2c1 	.word	0x0800a2c1
 800a280:	0800a2c1 	.word	0x0800a2c1
 800a284:	0800a2c1 	.word	0x0800a2c1
 800a288:	0800a2c1 	.word	0x0800a2c1
 800a28c:	0800a2b9 	.word	0x0800a2b9
 800a290:	2301      	movs	r3, #1
 800a292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a296:	e0d6      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a298:	2304      	movs	r3, #4
 800a29a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a29e:	e0d2      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a2a0:	2308      	movs	r3, #8
 800a2a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2a6:	e0ce      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a2a8:	2310      	movs	r3, #16
 800a2aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ae:	e0ca      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a2b0:	2320      	movs	r3, #32
 800a2b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2b6:	e0c6      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a2b8:	2340      	movs	r3, #64	@ 0x40
 800a2ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2be:	e0c2      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a2c0:	2380      	movs	r3, #128	@ 0x80
 800a2c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2c6:	e0be      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a2c8:	40011400 	.word	0x40011400
 800a2cc:	58024400 	.word	0x58024400
 800a2d0:	40007800 	.word	0x40007800
 800a2d4:	40007c00 	.word	0x40007c00
 800a2d8:	40011800 	.word	0x40011800
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4aad      	ldr	r2, [pc, #692]	@ (800a598 <UART_SetConfig+0x900>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d176      	bne.n	800a3d4 <UART_SetConfig+0x73c>
 800a2e6:	4bad      	ldr	r3, [pc, #692]	@ (800a59c <UART_SetConfig+0x904>)
 800a2e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a2ee:	2b28      	cmp	r3, #40	@ 0x28
 800a2f0:	d86c      	bhi.n	800a3cc <UART_SetConfig+0x734>
 800a2f2:	a201      	add	r2, pc, #4	@ (adr r2, 800a2f8 <UART_SetConfig+0x660>)
 800a2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f8:	0800a39d 	.word	0x0800a39d
 800a2fc:	0800a3cd 	.word	0x0800a3cd
 800a300:	0800a3cd 	.word	0x0800a3cd
 800a304:	0800a3cd 	.word	0x0800a3cd
 800a308:	0800a3cd 	.word	0x0800a3cd
 800a30c:	0800a3cd 	.word	0x0800a3cd
 800a310:	0800a3cd 	.word	0x0800a3cd
 800a314:	0800a3cd 	.word	0x0800a3cd
 800a318:	0800a3a5 	.word	0x0800a3a5
 800a31c:	0800a3cd 	.word	0x0800a3cd
 800a320:	0800a3cd 	.word	0x0800a3cd
 800a324:	0800a3cd 	.word	0x0800a3cd
 800a328:	0800a3cd 	.word	0x0800a3cd
 800a32c:	0800a3cd 	.word	0x0800a3cd
 800a330:	0800a3cd 	.word	0x0800a3cd
 800a334:	0800a3cd 	.word	0x0800a3cd
 800a338:	0800a3ad 	.word	0x0800a3ad
 800a33c:	0800a3cd 	.word	0x0800a3cd
 800a340:	0800a3cd 	.word	0x0800a3cd
 800a344:	0800a3cd 	.word	0x0800a3cd
 800a348:	0800a3cd 	.word	0x0800a3cd
 800a34c:	0800a3cd 	.word	0x0800a3cd
 800a350:	0800a3cd 	.word	0x0800a3cd
 800a354:	0800a3cd 	.word	0x0800a3cd
 800a358:	0800a3b5 	.word	0x0800a3b5
 800a35c:	0800a3cd 	.word	0x0800a3cd
 800a360:	0800a3cd 	.word	0x0800a3cd
 800a364:	0800a3cd 	.word	0x0800a3cd
 800a368:	0800a3cd 	.word	0x0800a3cd
 800a36c:	0800a3cd 	.word	0x0800a3cd
 800a370:	0800a3cd 	.word	0x0800a3cd
 800a374:	0800a3cd 	.word	0x0800a3cd
 800a378:	0800a3bd 	.word	0x0800a3bd
 800a37c:	0800a3cd 	.word	0x0800a3cd
 800a380:	0800a3cd 	.word	0x0800a3cd
 800a384:	0800a3cd 	.word	0x0800a3cd
 800a388:	0800a3cd 	.word	0x0800a3cd
 800a38c:	0800a3cd 	.word	0x0800a3cd
 800a390:	0800a3cd 	.word	0x0800a3cd
 800a394:	0800a3cd 	.word	0x0800a3cd
 800a398:	0800a3c5 	.word	0x0800a3c5
 800a39c:	2301      	movs	r3, #1
 800a39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3a2:	e050      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a3a4:	2304      	movs	r3, #4
 800a3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3aa:	e04c      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a3ac:	2308      	movs	r3, #8
 800a3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3b2:	e048      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a3b4:	2310      	movs	r3, #16
 800a3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ba:	e044      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a3bc:	2320      	movs	r3, #32
 800a3be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3c2:	e040      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a3c4:	2340      	movs	r3, #64	@ 0x40
 800a3c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ca:	e03c      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a3cc:	2380      	movs	r3, #128	@ 0x80
 800a3ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3d2:	e038      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a71      	ldr	r2, [pc, #452]	@ (800a5a0 <UART_SetConfig+0x908>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d130      	bne.n	800a440 <UART_SetConfig+0x7a8>
 800a3de:	4b6f      	ldr	r3, [pc, #444]	@ (800a59c <UART_SetConfig+0x904>)
 800a3e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3e2:	f003 0307 	and.w	r3, r3, #7
 800a3e6:	2b05      	cmp	r3, #5
 800a3e8:	d826      	bhi.n	800a438 <UART_SetConfig+0x7a0>
 800a3ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a3f0 <UART_SetConfig+0x758>)
 800a3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f0:	0800a409 	.word	0x0800a409
 800a3f4:	0800a411 	.word	0x0800a411
 800a3f8:	0800a419 	.word	0x0800a419
 800a3fc:	0800a421 	.word	0x0800a421
 800a400:	0800a429 	.word	0x0800a429
 800a404:	0800a431 	.word	0x0800a431
 800a408:	2302      	movs	r3, #2
 800a40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a40e:	e01a      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a410:	2304      	movs	r3, #4
 800a412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a416:	e016      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a418:	2308      	movs	r3, #8
 800a41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a41e:	e012      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a420:	2310      	movs	r3, #16
 800a422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a426:	e00e      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a428:	2320      	movs	r3, #32
 800a42a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a42e:	e00a      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a430:	2340      	movs	r3, #64	@ 0x40
 800a432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a436:	e006      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a438:	2380      	movs	r3, #128	@ 0x80
 800a43a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a43e:	e002      	b.n	800a446 <UART_SetConfig+0x7ae>
 800a440:	2380      	movs	r3, #128	@ 0x80
 800a442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a55      	ldr	r2, [pc, #340]	@ (800a5a0 <UART_SetConfig+0x908>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	f040 80f8 	bne.w	800a642 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a452:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a456:	2b20      	cmp	r3, #32
 800a458:	dc46      	bgt.n	800a4e8 <UART_SetConfig+0x850>
 800a45a:	2b02      	cmp	r3, #2
 800a45c:	db75      	blt.n	800a54a <UART_SetConfig+0x8b2>
 800a45e:	3b02      	subs	r3, #2
 800a460:	2b1e      	cmp	r3, #30
 800a462:	d872      	bhi.n	800a54a <UART_SetConfig+0x8b2>
 800a464:	a201      	add	r2, pc, #4	@ (adr r2, 800a46c <UART_SetConfig+0x7d4>)
 800a466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a46a:	bf00      	nop
 800a46c:	0800a4ef 	.word	0x0800a4ef
 800a470:	0800a54b 	.word	0x0800a54b
 800a474:	0800a4f7 	.word	0x0800a4f7
 800a478:	0800a54b 	.word	0x0800a54b
 800a47c:	0800a54b 	.word	0x0800a54b
 800a480:	0800a54b 	.word	0x0800a54b
 800a484:	0800a507 	.word	0x0800a507
 800a488:	0800a54b 	.word	0x0800a54b
 800a48c:	0800a54b 	.word	0x0800a54b
 800a490:	0800a54b 	.word	0x0800a54b
 800a494:	0800a54b 	.word	0x0800a54b
 800a498:	0800a54b 	.word	0x0800a54b
 800a49c:	0800a54b 	.word	0x0800a54b
 800a4a0:	0800a54b 	.word	0x0800a54b
 800a4a4:	0800a517 	.word	0x0800a517
 800a4a8:	0800a54b 	.word	0x0800a54b
 800a4ac:	0800a54b 	.word	0x0800a54b
 800a4b0:	0800a54b 	.word	0x0800a54b
 800a4b4:	0800a54b 	.word	0x0800a54b
 800a4b8:	0800a54b 	.word	0x0800a54b
 800a4bc:	0800a54b 	.word	0x0800a54b
 800a4c0:	0800a54b 	.word	0x0800a54b
 800a4c4:	0800a54b 	.word	0x0800a54b
 800a4c8:	0800a54b 	.word	0x0800a54b
 800a4cc:	0800a54b 	.word	0x0800a54b
 800a4d0:	0800a54b 	.word	0x0800a54b
 800a4d4:	0800a54b 	.word	0x0800a54b
 800a4d8:	0800a54b 	.word	0x0800a54b
 800a4dc:	0800a54b 	.word	0x0800a54b
 800a4e0:	0800a54b 	.word	0x0800a54b
 800a4e4:	0800a53d 	.word	0x0800a53d
 800a4e8:	2b40      	cmp	r3, #64	@ 0x40
 800a4ea:	d02a      	beq.n	800a542 <UART_SetConfig+0x8aa>
 800a4ec:	e02d      	b.n	800a54a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a4ee:	f7fe fd6b 	bl	8008fc8 <HAL_RCCEx_GetD3PCLK1Freq>
 800a4f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a4f4:	e02f      	b.n	800a556 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7fe fd7a 	bl	8008ff4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a504:	e027      	b.n	800a556 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a506:	f107 0318 	add.w	r3, r7, #24
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fe fec6 	bl	800929c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a514:	e01f      	b.n	800a556 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a516:	4b21      	ldr	r3, [pc, #132]	@ (800a59c <UART_SetConfig+0x904>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f003 0320 	and.w	r3, r3, #32
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d009      	beq.n	800a536 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a522:	4b1e      	ldr	r3, [pc, #120]	@ (800a59c <UART_SetConfig+0x904>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	08db      	lsrs	r3, r3, #3
 800a528:	f003 0303 	and.w	r3, r3, #3
 800a52c:	4a1d      	ldr	r2, [pc, #116]	@ (800a5a4 <UART_SetConfig+0x90c>)
 800a52e:	fa22 f303 	lsr.w	r3, r2, r3
 800a532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a534:	e00f      	b.n	800a556 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a536:	4b1b      	ldr	r3, [pc, #108]	@ (800a5a4 <UART_SetConfig+0x90c>)
 800a538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a53a:	e00c      	b.n	800a556 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a53c:	4b1a      	ldr	r3, [pc, #104]	@ (800a5a8 <UART_SetConfig+0x910>)
 800a53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a540:	e009      	b.n	800a556 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a542:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a548:	e005      	b.n	800a556 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a54a:	2300      	movs	r3, #0
 800a54c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a54e:	2301      	movs	r3, #1
 800a550:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a554:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a558:	2b00      	cmp	r3, #0
 800a55a:	f000 81ee 	beq.w	800a93a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a562:	4a12      	ldr	r2, [pc, #72]	@ (800a5ac <UART_SetConfig+0x914>)
 800a564:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a568:	461a      	mov	r2, r3
 800a56a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a56c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a570:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	685a      	ldr	r2, [r3, #4]
 800a576:	4613      	mov	r3, r2
 800a578:	005b      	lsls	r3, r3, #1
 800a57a:	4413      	add	r3, r2
 800a57c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a57e:	429a      	cmp	r2, r3
 800a580:	d305      	bcc.n	800a58e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a588:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d910      	bls.n	800a5b0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a594:	e1d1      	b.n	800a93a <UART_SetConfig+0xca2>
 800a596:	bf00      	nop
 800a598:	40011c00 	.word	0x40011c00
 800a59c:	58024400 	.word	0x58024400
 800a5a0:	58000c00 	.word	0x58000c00
 800a5a4:	03d09000 	.word	0x03d09000
 800a5a8:	003d0900 	.word	0x003d0900
 800a5ac:	0800bc94 	.word	0x0800bc94
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	60bb      	str	r3, [r7, #8]
 800a5b6:	60fa      	str	r2, [r7, #12]
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5bc:	4ac0      	ldr	r2, [pc, #768]	@ (800a8c0 <UART_SetConfig+0xc28>)
 800a5be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	603b      	str	r3, [r7, #0]
 800a5c8:	607a      	str	r2, [r7, #4]
 800a5ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a5d2:	f7f5 fef5 	bl	80003c0 <__aeabi_uldivmod>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	460b      	mov	r3, r1
 800a5da:	4610      	mov	r0, r2
 800a5dc:	4619      	mov	r1, r3
 800a5de:	f04f 0200 	mov.w	r2, #0
 800a5e2:	f04f 0300 	mov.w	r3, #0
 800a5e6:	020b      	lsls	r3, r1, #8
 800a5e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a5ec:	0202      	lsls	r2, r0, #8
 800a5ee:	6979      	ldr	r1, [r7, #20]
 800a5f0:	6849      	ldr	r1, [r1, #4]
 800a5f2:	0849      	lsrs	r1, r1, #1
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	460c      	mov	r4, r1
 800a5f8:	4605      	mov	r5, r0
 800a5fa:	eb12 0804 	adds.w	r8, r2, r4
 800a5fe:	eb43 0905 	adc.w	r9, r3, r5
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	469a      	mov	sl, r3
 800a60a:	4693      	mov	fp, r2
 800a60c:	4652      	mov	r2, sl
 800a60e:	465b      	mov	r3, fp
 800a610:	4640      	mov	r0, r8
 800a612:	4649      	mov	r1, r9
 800a614:	f7f5 fed4 	bl	80003c0 <__aeabi_uldivmod>
 800a618:	4602      	mov	r2, r0
 800a61a:	460b      	mov	r3, r1
 800a61c:	4613      	mov	r3, r2
 800a61e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a622:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a626:	d308      	bcc.n	800a63a <UART_SetConfig+0x9a2>
 800a628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a62a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a62e:	d204      	bcs.n	800a63a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a636:	60da      	str	r2, [r3, #12]
 800a638:	e17f      	b.n	800a93a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a63a:	2301      	movs	r3, #1
 800a63c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a640:	e17b      	b.n	800a93a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	69db      	ldr	r3, [r3, #28]
 800a646:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a64a:	f040 80bd 	bne.w	800a7c8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a64e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a652:	2b20      	cmp	r3, #32
 800a654:	dc48      	bgt.n	800a6e8 <UART_SetConfig+0xa50>
 800a656:	2b00      	cmp	r3, #0
 800a658:	db7b      	blt.n	800a752 <UART_SetConfig+0xaba>
 800a65a:	2b20      	cmp	r3, #32
 800a65c:	d879      	bhi.n	800a752 <UART_SetConfig+0xaba>
 800a65e:	a201      	add	r2, pc, #4	@ (adr r2, 800a664 <UART_SetConfig+0x9cc>)
 800a660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a664:	0800a6ef 	.word	0x0800a6ef
 800a668:	0800a6f7 	.word	0x0800a6f7
 800a66c:	0800a753 	.word	0x0800a753
 800a670:	0800a753 	.word	0x0800a753
 800a674:	0800a6ff 	.word	0x0800a6ff
 800a678:	0800a753 	.word	0x0800a753
 800a67c:	0800a753 	.word	0x0800a753
 800a680:	0800a753 	.word	0x0800a753
 800a684:	0800a70f 	.word	0x0800a70f
 800a688:	0800a753 	.word	0x0800a753
 800a68c:	0800a753 	.word	0x0800a753
 800a690:	0800a753 	.word	0x0800a753
 800a694:	0800a753 	.word	0x0800a753
 800a698:	0800a753 	.word	0x0800a753
 800a69c:	0800a753 	.word	0x0800a753
 800a6a0:	0800a753 	.word	0x0800a753
 800a6a4:	0800a71f 	.word	0x0800a71f
 800a6a8:	0800a753 	.word	0x0800a753
 800a6ac:	0800a753 	.word	0x0800a753
 800a6b0:	0800a753 	.word	0x0800a753
 800a6b4:	0800a753 	.word	0x0800a753
 800a6b8:	0800a753 	.word	0x0800a753
 800a6bc:	0800a753 	.word	0x0800a753
 800a6c0:	0800a753 	.word	0x0800a753
 800a6c4:	0800a753 	.word	0x0800a753
 800a6c8:	0800a753 	.word	0x0800a753
 800a6cc:	0800a753 	.word	0x0800a753
 800a6d0:	0800a753 	.word	0x0800a753
 800a6d4:	0800a753 	.word	0x0800a753
 800a6d8:	0800a753 	.word	0x0800a753
 800a6dc:	0800a753 	.word	0x0800a753
 800a6e0:	0800a753 	.word	0x0800a753
 800a6e4:	0800a745 	.word	0x0800a745
 800a6e8:	2b40      	cmp	r3, #64	@ 0x40
 800a6ea:	d02e      	beq.n	800a74a <UART_SetConfig+0xab2>
 800a6ec:	e031      	b.n	800a752 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6ee:	f7fc fdcd 	bl	800728c <HAL_RCC_GetPCLK1Freq>
 800a6f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a6f4:	e033      	b.n	800a75e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6f6:	f7fc fddf 	bl	80072b8 <HAL_RCC_GetPCLK2Freq>
 800a6fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a6fc:	e02f      	b.n	800a75e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a702:	4618      	mov	r0, r3
 800a704:	f7fe fc76 	bl	8008ff4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a70c:	e027      	b.n	800a75e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a70e:	f107 0318 	add.w	r3, r7, #24
 800a712:	4618      	mov	r0, r3
 800a714:	f7fe fdc2 	bl	800929c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a718:	69fb      	ldr	r3, [r7, #28]
 800a71a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a71c:	e01f      	b.n	800a75e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a71e:	4b69      	ldr	r3, [pc, #420]	@ (800a8c4 <UART_SetConfig+0xc2c>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f003 0320 	and.w	r3, r3, #32
 800a726:	2b00      	cmp	r3, #0
 800a728:	d009      	beq.n	800a73e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a72a:	4b66      	ldr	r3, [pc, #408]	@ (800a8c4 <UART_SetConfig+0xc2c>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	08db      	lsrs	r3, r3, #3
 800a730:	f003 0303 	and.w	r3, r3, #3
 800a734:	4a64      	ldr	r2, [pc, #400]	@ (800a8c8 <UART_SetConfig+0xc30>)
 800a736:	fa22 f303 	lsr.w	r3, r2, r3
 800a73a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a73c:	e00f      	b.n	800a75e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a73e:	4b62      	ldr	r3, [pc, #392]	@ (800a8c8 <UART_SetConfig+0xc30>)
 800a740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a742:	e00c      	b.n	800a75e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a744:	4b61      	ldr	r3, [pc, #388]	@ (800a8cc <UART_SetConfig+0xc34>)
 800a746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a748:	e009      	b.n	800a75e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a74a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a74e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a750:	e005      	b.n	800a75e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a752:	2300      	movs	r3, #0
 800a754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a75c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a75e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a760:	2b00      	cmp	r3, #0
 800a762:	f000 80ea 	beq.w	800a93a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a76a:	4a55      	ldr	r2, [pc, #340]	@ (800a8c0 <UART_SetConfig+0xc28>)
 800a76c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a770:	461a      	mov	r2, r3
 800a772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a774:	fbb3 f3f2 	udiv	r3, r3, r2
 800a778:	005a      	lsls	r2, r3, #1
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	085b      	lsrs	r3, r3, #1
 800a780:	441a      	add	r2, r3
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	fbb2 f3f3 	udiv	r3, r2, r3
 800a78a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a78e:	2b0f      	cmp	r3, #15
 800a790:	d916      	bls.n	800a7c0 <UART_SetConfig+0xb28>
 800a792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a798:	d212      	bcs.n	800a7c0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	f023 030f 	bic.w	r3, r3, #15
 800a7a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a7a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7a6:	085b      	lsrs	r3, r3, #1
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	f003 0307 	and.w	r3, r3, #7
 800a7ae:	b29a      	uxth	r2, r3
 800a7b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a7bc:	60da      	str	r2, [r3, #12]
 800a7be:	e0bc      	b.n	800a93a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a7c6:	e0b8      	b.n	800a93a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a7c8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a7cc:	2b20      	cmp	r3, #32
 800a7ce:	dc4b      	bgt.n	800a868 <UART_SetConfig+0xbd0>
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f2c0 8087 	blt.w	800a8e4 <UART_SetConfig+0xc4c>
 800a7d6:	2b20      	cmp	r3, #32
 800a7d8:	f200 8084 	bhi.w	800a8e4 <UART_SetConfig+0xc4c>
 800a7dc:	a201      	add	r2, pc, #4	@ (adr r2, 800a7e4 <UART_SetConfig+0xb4c>)
 800a7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e2:	bf00      	nop
 800a7e4:	0800a86f 	.word	0x0800a86f
 800a7e8:	0800a877 	.word	0x0800a877
 800a7ec:	0800a8e5 	.word	0x0800a8e5
 800a7f0:	0800a8e5 	.word	0x0800a8e5
 800a7f4:	0800a87f 	.word	0x0800a87f
 800a7f8:	0800a8e5 	.word	0x0800a8e5
 800a7fc:	0800a8e5 	.word	0x0800a8e5
 800a800:	0800a8e5 	.word	0x0800a8e5
 800a804:	0800a88f 	.word	0x0800a88f
 800a808:	0800a8e5 	.word	0x0800a8e5
 800a80c:	0800a8e5 	.word	0x0800a8e5
 800a810:	0800a8e5 	.word	0x0800a8e5
 800a814:	0800a8e5 	.word	0x0800a8e5
 800a818:	0800a8e5 	.word	0x0800a8e5
 800a81c:	0800a8e5 	.word	0x0800a8e5
 800a820:	0800a8e5 	.word	0x0800a8e5
 800a824:	0800a89f 	.word	0x0800a89f
 800a828:	0800a8e5 	.word	0x0800a8e5
 800a82c:	0800a8e5 	.word	0x0800a8e5
 800a830:	0800a8e5 	.word	0x0800a8e5
 800a834:	0800a8e5 	.word	0x0800a8e5
 800a838:	0800a8e5 	.word	0x0800a8e5
 800a83c:	0800a8e5 	.word	0x0800a8e5
 800a840:	0800a8e5 	.word	0x0800a8e5
 800a844:	0800a8e5 	.word	0x0800a8e5
 800a848:	0800a8e5 	.word	0x0800a8e5
 800a84c:	0800a8e5 	.word	0x0800a8e5
 800a850:	0800a8e5 	.word	0x0800a8e5
 800a854:	0800a8e5 	.word	0x0800a8e5
 800a858:	0800a8e5 	.word	0x0800a8e5
 800a85c:	0800a8e5 	.word	0x0800a8e5
 800a860:	0800a8e5 	.word	0x0800a8e5
 800a864:	0800a8d7 	.word	0x0800a8d7
 800a868:	2b40      	cmp	r3, #64	@ 0x40
 800a86a:	d037      	beq.n	800a8dc <UART_SetConfig+0xc44>
 800a86c:	e03a      	b.n	800a8e4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a86e:	f7fc fd0d 	bl	800728c <HAL_RCC_GetPCLK1Freq>
 800a872:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a874:	e03c      	b.n	800a8f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a876:	f7fc fd1f 	bl	80072b8 <HAL_RCC_GetPCLK2Freq>
 800a87a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a87c:	e038      	b.n	800a8f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a87e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a882:	4618      	mov	r0, r3
 800a884:	f7fe fbb6 	bl	8008ff4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a88a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a88c:	e030      	b.n	800a8f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a88e:	f107 0318 	add.w	r3, r7, #24
 800a892:	4618      	mov	r0, r3
 800a894:	f7fe fd02 	bl	800929c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a898:	69fb      	ldr	r3, [r7, #28]
 800a89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a89c:	e028      	b.n	800a8f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a89e:	4b09      	ldr	r3, [pc, #36]	@ (800a8c4 <UART_SetConfig+0xc2c>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f003 0320 	and.w	r3, r3, #32
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d012      	beq.n	800a8d0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8aa:	4b06      	ldr	r3, [pc, #24]	@ (800a8c4 <UART_SetConfig+0xc2c>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	08db      	lsrs	r3, r3, #3
 800a8b0:	f003 0303 	and.w	r3, r3, #3
 800a8b4:	4a04      	ldr	r2, [pc, #16]	@ (800a8c8 <UART_SetConfig+0xc30>)
 800a8b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8bc:	e018      	b.n	800a8f0 <UART_SetConfig+0xc58>
 800a8be:	bf00      	nop
 800a8c0:	0800bc94 	.word	0x0800bc94
 800a8c4:	58024400 	.word	0x58024400
 800a8c8:	03d09000 	.word	0x03d09000
 800a8cc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a8d0:	4b24      	ldr	r3, [pc, #144]	@ (800a964 <UART_SetConfig+0xccc>)
 800a8d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8d4:	e00c      	b.n	800a8f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a8d6:	4b24      	ldr	r3, [pc, #144]	@ (800a968 <UART_SetConfig+0xcd0>)
 800a8d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8da:	e009      	b.n	800a8f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8e2:	e005      	b.n	800a8f0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a8ee:	bf00      	nop
    }

    if (pclk != 0U)
 800a8f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d021      	beq.n	800a93a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8fa:	4a1c      	ldr	r2, [pc, #112]	@ (800a96c <UART_SetConfig+0xcd4>)
 800a8fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a900:	461a      	mov	r2, r3
 800a902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a904:	fbb3 f2f2 	udiv	r2, r3, r2
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	085b      	lsrs	r3, r3, #1
 800a90e:	441a      	add	r2, r3
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	fbb2 f3f3 	udiv	r3, r2, r3
 800a918:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a91a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a91c:	2b0f      	cmp	r3, #15
 800a91e:	d909      	bls.n	800a934 <UART_SetConfig+0xc9c>
 800a920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a922:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a926:	d205      	bcs.n	800a934 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a92a:	b29a      	uxth	r2, r3
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	60da      	str	r2, [r3, #12]
 800a932:	e002      	b.n	800a93a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a934:	2301      	movs	r3, #1
 800a936:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	2201      	movs	r2, #1
 800a93e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	2201      	movs	r2, #1
 800a946:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	2200      	movs	r2, #0
 800a94e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	2200      	movs	r2, #0
 800a954:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a956:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3748      	adds	r7, #72	@ 0x48
 800a95e:	46bd      	mov	sp, r7
 800a960:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a964:	03d09000 	.word	0x03d09000
 800a968:	003d0900 	.word	0x003d0900
 800a96c:	0800bc94 	.word	0x0800bc94

0800a970 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a97c:	f003 0308 	and.w	r3, r3, #8
 800a980:	2b00      	cmp	r3, #0
 800a982:	d00a      	beq.n	800a99a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	430a      	orrs	r2, r1
 800a998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a99e:	f003 0301 	and.w	r3, r3, #1
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d00a      	beq.n	800a9bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	430a      	orrs	r2, r1
 800a9ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9c0:	f003 0302 	and.w	r3, r3, #2
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d00a      	beq.n	800a9de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	430a      	orrs	r2, r1
 800a9dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9e2:	f003 0304 	and.w	r3, r3, #4
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00a      	beq.n	800aa00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	430a      	orrs	r2, r1
 800a9fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa04:	f003 0310 	and.w	r3, r3, #16
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d00a      	beq.n	800aa22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	430a      	orrs	r2, r1
 800aa20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa26:	f003 0320 	and.w	r3, r3, #32
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d00a      	beq.n	800aa44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	689b      	ldr	r3, [r3, #8]
 800aa34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	430a      	orrs	r2, r1
 800aa42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d01a      	beq.n	800aa86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	430a      	orrs	r2, r1
 800aa64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa6e:	d10a      	bne.n	800aa86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	430a      	orrs	r2, r1
 800aa84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d00a      	beq.n	800aaa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	430a      	orrs	r2, r1
 800aaa6:	605a      	str	r2, [r3, #4]
  }
}
 800aaa8:	bf00      	nop
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b098      	sub	sp, #96	@ 0x60
 800aab8:	af02      	add	r7, sp, #8
 800aaba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aac4:	f7f8 f80c 	bl	8002ae0 <HAL_GetTick>
 800aac8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f003 0308 	and.w	r3, r3, #8
 800aad4:	2b08      	cmp	r3, #8
 800aad6:	d12f      	bne.n	800ab38 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aad8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aadc:	9300      	str	r3, [sp, #0]
 800aade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aae0:	2200      	movs	r2, #0
 800aae2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 f88e 	bl	800ac08 <UART_WaitOnFlagUntilTimeout>
 800aaec:	4603      	mov	r3, r0
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d022      	beq.n	800ab38 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aafa:	e853 3f00 	ldrex	r3, [r3]
 800aafe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ab00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab06:	653b      	str	r3, [r7, #80]	@ 0x50
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab10:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab12:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab18:	e841 2300 	strex	r3, r2, [r1]
 800ab1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d1e6      	bne.n	800aaf2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2220      	movs	r2, #32
 800ab28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab34:	2303      	movs	r3, #3
 800ab36:	e063      	b.n	800ac00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f003 0304 	and.w	r3, r3, #4
 800ab42:	2b04      	cmp	r3, #4
 800ab44:	d149      	bne.n	800abda <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab46:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ab4a:	9300      	str	r3, [sp, #0]
 800ab4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 f857 	bl	800ac08 <UART_WaitOnFlagUntilTimeout>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d03c      	beq.n	800abda <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab68:	e853 3f00 	ldrex	r3, [r3]
 800ab6c:	623b      	str	r3, [r7, #32]
   return(result);
 800ab6e:	6a3b      	ldr	r3, [r7, #32]
 800ab70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab7e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab80:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab86:	e841 2300 	strex	r3, r2, [r1]
 800ab8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d1e6      	bne.n	800ab60 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	3308      	adds	r3, #8
 800ab98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	e853 3f00 	ldrex	r3, [r3]
 800aba0:	60fb      	str	r3, [r7, #12]
   return(result);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f023 0301 	bic.w	r3, r3, #1
 800aba8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	3308      	adds	r3, #8
 800abb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800abb2:	61fa      	str	r2, [r7, #28]
 800abb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb6:	69b9      	ldr	r1, [r7, #24]
 800abb8:	69fa      	ldr	r2, [r7, #28]
 800abba:	e841 2300 	strex	r3, r2, [r1]
 800abbe:	617b      	str	r3, [r7, #20]
   return(result);
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d1e5      	bne.n	800ab92 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2220      	movs	r2, #32
 800abca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2200      	movs	r2, #0
 800abd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abd6:	2303      	movs	r3, #3
 800abd8:	e012      	b.n	800ac00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2220      	movs	r2, #32
 800abde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2220      	movs	r2, #32
 800abe6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2200      	movs	r2, #0
 800abee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2200      	movs	r2, #0
 800abfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3758      	adds	r7, #88	@ 0x58
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	603b      	str	r3, [r7, #0]
 800ac14:	4613      	mov	r3, r2
 800ac16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac18:	e04f      	b.n	800acba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac20:	d04b      	beq.n	800acba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac22:	f7f7 ff5d 	bl	8002ae0 <HAL_GetTick>
 800ac26:	4602      	mov	r2, r0
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	1ad3      	subs	r3, r2, r3
 800ac2c:	69ba      	ldr	r2, [r7, #24]
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d302      	bcc.n	800ac38 <UART_WaitOnFlagUntilTimeout+0x30>
 800ac32:	69bb      	ldr	r3, [r7, #24]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d101      	bne.n	800ac3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ac38:	2303      	movs	r3, #3
 800ac3a:	e04e      	b.n	800acda <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f003 0304 	and.w	r3, r3, #4
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d037      	beq.n	800acba <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	2b80      	cmp	r3, #128	@ 0x80
 800ac4e:	d034      	beq.n	800acba <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	2b40      	cmp	r3, #64	@ 0x40
 800ac54:	d031      	beq.n	800acba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	69db      	ldr	r3, [r3, #28]
 800ac5c:	f003 0308 	and.w	r3, r3, #8
 800ac60:	2b08      	cmp	r3, #8
 800ac62:	d110      	bne.n	800ac86 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2208      	movs	r2, #8
 800ac6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac6c:	68f8      	ldr	r0, [r7, #12]
 800ac6e:	f000 f839 	bl	800ace4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2208      	movs	r2, #8
 800ac76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ac82:	2301      	movs	r3, #1
 800ac84:	e029      	b.n	800acda <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	69db      	ldr	r3, [r3, #28]
 800ac8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ac90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac94:	d111      	bne.n	800acba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ac9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	f000 f81f 	bl	800ace4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2220      	movs	r2, #32
 800acaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2200      	movs	r2, #0
 800acb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800acb6:	2303      	movs	r3, #3
 800acb8:	e00f      	b.n	800acda <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	69da      	ldr	r2, [r3, #28]
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	4013      	ands	r3, r2
 800acc4:	68ba      	ldr	r2, [r7, #8]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	bf0c      	ite	eq
 800acca:	2301      	moveq	r3, #1
 800accc:	2300      	movne	r3, #0
 800acce:	b2db      	uxtb	r3, r3
 800acd0:	461a      	mov	r2, r3
 800acd2:	79fb      	ldrb	r3, [r7, #7]
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d0a0      	beq.n	800ac1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800acd8:	2300      	movs	r3, #0
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3710      	adds	r7, #16
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
	...

0800ace4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b095      	sub	sp, #84	@ 0x54
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acf4:	e853 3f00 	ldrex	r3, [r3]
 800acf8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800acfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	461a      	mov	r2, r3
 800ad08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad0a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ad10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad12:	e841 2300 	strex	r3, r2, [r1]
 800ad16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ad18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1e6      	bne.n	800acec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	3308      	adds	r3, #8
 800ad24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad26:	6a3b      	ldr	r3, [r7, #32]
 800ad28:	e853 3f00 	ldrex	r3, [r3]
 800ad2c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad2e:	69fa      	ldr	r2, [r7, #28]
 800ad30:	4b1e      	ldr	r3, [pc, #120]	@ (800adac <UART_EndRxTransfer+0xc8>)
 800ad32:	4013      	ands	r3, r2
 800ad34:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	3308      	adds	r3, #8
 800ad3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ad40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad46:	e841 2300 	strex	r3, r2, [r1]
 800ad4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ad4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d1e5      	bne.n	800ad1e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d118      	bne.n	800ad8c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	e853 3f00 	ldrex	r3, [r3]
 800ad66:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	f023 0310 	bic.w	r3, r3, #16
 800ad6e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	461a      	mov	r2, r3
 800ad76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad78:	61bb      	str	r3, [r7, #24]
 800ad7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7c:	6979      	ldr	r1, [r7, #20]
 800ad7e:	69ba      	ldr	r2, [r7, #24]
 800ad80:	e841 2300 	strex	r3, r2, [r1]
 800ad84:	613b      	str	r3, [r7, #16]
   return(result);
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d1e6      	bne.n	800ad5a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2220      	movs	r2, #32
 800ad90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ada0:	bf00      	nop
 800ada2:	3754      	adds	r7, #84	@ 0x54
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr
 800adac:	effffffe 	.word	0xeffffffe

0800adb0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b085      	sub	sp, #20
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d101      	bne.n	800adc6 <HAL_UARTEx_DisableFifoMode+0x16>
 800adc2:	2302      	movs	r3, #2
 800adc4:	e027      	b.n	800ae16 <HAL_UARTEx_DisableFifoMode+0x66>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2201      	movs	r2, #1
 800adca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2224      	movs	r2, #36	@ 0x24
 800add2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	681a      	ldr	r2, [r3, #0]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f022 0201 	bic.w	r2, r2, #1
 800adec:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800adf4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2200      	movs	r2, #0
 800adfa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	68fa      	ldr	r2, [r7, #12]
 800ae02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2220      	movs	r2, #32
 800ae08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae14:	2300      	movs	r3, #0
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3714      	adds	r7, #20
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr

0800ae22 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae22:	b580      	push	{r7, lr}
 800ae24:	b084      	sub	sp, #16
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
 800ae2a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d101      	bne.n	800ae3a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ae36:	2302      	movs	r3, #2
 800ae38:	e02d      	b.n	800ae96 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2224      	movs	r2, #36	@ 0x24
 800ae46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f022 0201 	bic.w	r2, r2, #1
 800ae60:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	689b      	ldr	r3, [r3, #8]
 800ae68:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	683a      	ldr	r2, [r7, #0]
 800ae72:	430a      	orrs	r2, r1
 800ae74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 f850 	bl	800af1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2220      	movs	r2, #32
 800ae88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae94:	2300      	movs	r3, #0
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3710      	adds	r7, #16
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}

0800ae9e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	b084      	sub	sp, #16
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]
 800aea6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	d101      	bne.n	800aeb6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aeb2:	2302      	movs	r3, #2
 800aeb4:	e02d      	b.n	800af12 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2201      	movs	r2, #1
 800aeba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2224      	movs	r2, #36	@ 0x24
 800aec2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f022 0201 	bic.w	r2, r2, #1
 800aedc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	689b      	ldr	r3, [r3, #8]
 800aee4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	683a      	ldr	r2, [r7, #0]
 800aeee:	430a      	orrs	r2, r1
 800aef0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f000 f812 	bl	800af1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	68fa      	ldr	r2, [r7, #12]
 800aefe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2220      	movs	r2, #32
 800af04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
	...

0800af1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b085      	sub	sp, #20
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d108      	bne.n	800af3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2201      	movs	r2, #1
 800af30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2201      	movs	r2, #1
 800af38:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800af3c:	e031      	b.n	800afa2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800af3e:	2310      	movs	r3, #16
 800af40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800af42:	2310      	movs	r3, #16
 800af44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	0e5b      	lsrs	r3, r3, #25
 800af4e:	b2db      	uxtb	r3, r3
 800af50:	f003 0307 	and.w	r3, r3, #7
 800af54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	0f5b      	lsrs	r3, r3, #29
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	f003 0307 	and.w	r3, r3, #7
 800af64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af66:	7bbb      	ldrb	r3, [r7, #14]
 800af68:	7b3a      	ldrb	r2, [r7, #12]
 800af6a:	4911      	ldr	r1, [pc, #68]	@ (800afb0 <UARTEx_SetNbDataToProcess+0x94>)
 800af6c:	5c8a      	ldrb	r2, [r1, r2]
 800af6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800af72:	7b3a      	ldrb	r2, [r7, #12]
 800af74:	490f      	ldr	r1, [pc, #60]	@ (800afb4 <UARTEx_SetNbDataToProcess+0x98>)
 800af76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af78:	fb93 f3f2 	sdiv	r3, r3, r2
 800af7c:	b29a      	uxth	r2, r3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af84:	7bfb      	ldrb	r3, [r7, #15]
 800af86:	7b7a      	ldrb	r2, [r7, #13]
 800af88:	4909      	ldr	r1, [pc, #36]	@ (800afb0 <UARTEx_SetNbDataToProcess+0x94>)
 800af8a:	5c8a      	ldrb	r2, [r1, r2]
 800af8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800af90:	7b7a      	ldrb	r2, [r7, #13]
 800af92:	4908      	ldr	r1, [pc, #32]	@ (800afb4 <UARTEx_SetNbDataToProcess+0x98>)
 800af94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af96:	fb93 f3f2 	sdiv	r3, r3, r2
 800af9a:	b29a      	uxth	r2, r3
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800afa2:	bf00      	nop
 800afa4:	3714      	adds	r7, #20
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr
 800afae:	bf00      	nop
 800afb0:	0800bcac 	.word	0x0800bcac
 800afb4:	0800bcb4 	.word	0x0800bcb4

0800afb8 <siprintf>:
 800afb8:	b40e      	push	{r1, r2, r3}
 800afba:	b510      	push	{r4, lr}
 800afbc:	b09d      	sub	sp, #116	@ 0x74
 800afbe:	ab1f      	add	r3, sp, #124	@ 0x7c
 800afc0:	9002      	str	r0, [sp, #8]
 800afc2:	9006      	str	r0, [sp, #24]
 800afc4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800afc8:	480a      	ldr	r0, [pc, #40]	@ (800aff4 <siprintf+0x3c>)
 800afca:	9107      	str	r1, [sp, #28]
 800afcc:	9104      	str	r1, [sp, #16]
 800afce:	490a      	ldr	r1, [pc, #40]	@ (800aff8 <siprintf+0x40>)
 800afd0:	f853 2b04 	ldr.w	r2, [r3], #4
 800afd4:	9105      	str	r1, [sp, #20]
 800afd6:	2400      	movs	r4, #0
 800afd8:	a902      	add	r1, sp, #8
 800afda:	6800      	ldr	r0, [r0, #0]
 800afdc:	9301      	str	r3, [sp, #4]
 800afde:	941b      	str	r4, [sp, #108]	@ 0x6c
 800afe0:	f000 f9a2 	bl	800b328 <_svfiprintf_r>
 800afe4:	9b02      	ldr	r3, [sp, #8]
 800afe6:	701c      	strb	r4, [r3, #0]
 800afe8:	b01d      	add	sp, #116	@ 0x74
 800afea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afee:	b003      	add	sp, #12
 800aff0:	4770      	bx	lr
 800aff2:	bf00      	nop
 800aff4:	2400001c 	.word	0x2400001c
 800aff8:	ffff0208 	.word	0xffff0208

0800affc <memset>:
 800affc:	4402      	add	r2, r0
 800affe:	4603      	mov	r3, r0
 800b000:	4293      	cmp	r3, r2
 800b002:	d100      	bne.n	800b006 <memset+0xa>
 800b004:	4770      	bx	lr
 800b006:	f803 1b01 	strb.w	r1, [r3], #1
 800b00a:	e7f9      	b.n	800b000 <memset+0x4>

0800b00c <__errno>:
 800b00c:	4b01      	ldr	r3, [pc, #4]	@ (800b014 <__errno+0x8>)
 800b00e:	6818      	ldr	r0, [r3, #0]
 800b010:	4770      	bx	lr
 800b012:	bf00      	nop
 800b014:	2400001c 	.word	0x2400001c

0800b018 <__libc_init_array>:
 800b018:	b570      	push	{r4, r5, r6, lr}
 800b01a:	4d0d      	ldr	r5, [pc, #52]	@ (800b050 <__libc_init_array+0x38>)
 800b01c:	4c0d      	ldr	r4, [pc, #52]	@ (800b054 <__libc_init_array+0x3c>)
 800b01e:	1b64      	subs	r4, r4, r5
 800b020:	10a4      	asrs	r4, r4, #2
 800b022:	2600      	movs	r6, #0
 800b024:	42a6      	cmp	r6, r4
 800b026:	d109      	bne.n	800b03c <__libc_init_array+0x24>
 800b028:	4d0b      	ldr	r5, [pc, #44]	@ (800b058 <__libc_init_array+0x40>)
 800b02a:	4c0c      	ldr	r4, [pc, #48]	@ (800b05c <__libc_init_array+0x44>)
 800b02c:	f000 fc64 	bl	800b8f8 <_init>
 800b030:	1b64      	subs	r4, r4, r5
 800b032:	10a4      	asrs	r4, r4, #2
 800b034:	2600      	movs	r6, #0
 800b036:	42a6      	cmp	r6, r4
 800b038:	d105      	bne.n	800b046 <__libc_init_array+0x2e>
 800b03a:	bd70      	pop	{r4, r5, r6, pc}
 800b03c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b040:	4798      	blx	r3
 800b042:	3601      	adds	r6, #1
 800b044:	e7ee      	b.n	800b024 <__libc_init_array+0xc>
 800b046:	f855 3b04 	ldr.w	r3, [r5], #4
 800b04a:	4798      	blx	r3
 800b04c:	3601      	adds	r6, #1
 800b04e:	e7f2      	b.n	800b036 <__libc_init_array+0x1e>
 800b050:	0800bcf8 	.word	0x0800bcf8
 800b054:	0800bcf8 	.word	0x0800bcf8
 800b058:	0800bcf8 	.word	0x0800bcf8
 800b05c:	0800bd00 	.word	0x0800bd00

0800b060 <__retarget_lock_acquire_recursive>:
 800b060:	4770      	bx	lr

0800b062 <__retarget_lock_release_recursive>:
 800b062:	4770      	bx	lr

0800b064 <memcpy>:
 800b064:	440a      	add	r2, r1
 800b066:	4291      	cmp	r1, r2
 800b068:	f100 33ff 	add.w	r3, r0, #4294967295
 800b06c:	d100      	bne.n	800b070 <memcpy+0xc>
 800b06e:	4770      	bx	lr
 800b070:	b510      	push	{r4, lr}
 800b072:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b076:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b07a:	4291      	cmp	r1, r2
 800b07c:	d1f9      	bne.n	800b072 <memcpy+0xe>
 800b07e:	bd10      	pop	{r4, pc}

0800b080 <_free_r>:
 800b080:	b538      	push	{r3, r4, r5, lr}
 800b082:	4605      	mov	r5, r0
 800b084:	2900      	cmp	r1, #0
 800b086:	d041      	beq.n	800b10c <_free_r+0x8c>
 800b088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b08c:	1f0c      	subs	r4, r1, #4
 800b08e:	2b00      	cmp	r3, #0
 800b090:	bfb8      	it	lt
 800b092:	18e4      	addlt	r4, r4, r3
 800b094:	f000 f8e0 	bl	800b258 <__malloc_lock>
 800b098:	4a1d      	ldr	r2, [pc, #116]	@ (800b110 <_free_r+0x90>)
 800b09a:	6813      	ldr	r3, [r2, #0]
 800b09c:	b933      	cbnz	r3, 800b0ac <_free_r+0x2c>
 800b09e:	6063      	str	r3, [r4, #4]
 800b0a0:	6014      	str	r4, [r2, #0]
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0a8:	f000 b8dc 	b.w	800b264 <__malloc_unlock>
 800b0ac:	42a3      	cmp	r3, r4
 800b0ae:	d908      	bls.n	800b0c2 <_free_r+0x42>
 800b0b0:	6820      	ldr	r0, [r4, #0]
 800b0b2:	1821      	adds	r1, r4, r0
 800b0b4:	428b      	cmp	r3, r1
 800b0b6:	bf01      	itttt	eq
 800b0b8:	6819      	ldreq	r1, [r3, #0]
 800b0ba:	685b      	ldreq	r3, [r3, #4]
 800b0bc:	1809      	addeq	r1, r1, r0
 800b0be:	6021      	streq	r1, [r4, #0]
 800b0c0:	e7ed      	b.n	800b09e <_free_r+0x1e>
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	b10b      	cbz	r3, 800b0cc <_free_r+0x4c>
 800b0c8:	42a3      	cmp	r3, r4
 800b0ca:	d9fa      	bls.n	800b0c2 <_free_r+0x42>
 800b0cc:	6811      	ldr	r1, [r2, #0]
 800b0ce:	1850      	adds	r0, r2, r1
 800b0d0:	42a0      	cmp	r0, r4
 800b0d2:	d10b      	bne.n	800b0ec <_free_r+0x6c>
 800b0d4:	6820      	ldr	r0, [r4, #0]
 800b0d6:	4401      	add	r1, r0
 800b0d8:	1850      	adds	r0, r2, r1
 800b0da:	4283      	cmp	r3, r0
 800b0dc:	6011      	str	r1, [r2, #0]
 800b0de:	d1e0      	bne.n	800b0a2 <_free_r+0x22>
 800b0e0:	6818      	ldr	r0, [r3, #0]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	6053      	str	r3, [r2, #4]
 800b0e6:	4408      	add	r0, r1
 800b0e8:	6010      	str	r0, [r2, #0]
 800b0ea:	e7da      	b.n	800b0a2 <_free_r+0x22>
 800b0ec:	d902      	bls.n	800b0f4 <_free_r+0x74>
 800b0ee:	230c      	movs	r3, #12
 800b0f0:	602b      	str	r3, [r5, #0]
 800b0f2:	e7d6      	b.n	800b0a2 <_free_r+0x22>
 800b0f4:	6820      	ldr	r0, [r4, #0]
 800b0f6:	1821      	adds	r1, r4, r0
 800b0f8:	428b      	cmp	r3, r1
 800b0fa:	bf04      	itt	eq
 800b0fc:	6819      	ldreq	r1, [r3, #0]
 800b0fe:	685b      	ldreq	r3, [r3, #4]
 800b100:	6063      	str	r3, [r4, #4]
 800b102:	bf04      	itt	eq
 800b104:	1809      	addeq	r1, r1, r0
 800b106:	6021      	streq	r1, [r4, #0]
 800b108:	6054      	str	r4, [r2, #4]
 800b10a:	e7ca      	b.n	800b0a2 <_free_r+0x22>
 800b10c:	bd38      	pop	{r3, r4, r5, pc}
 800b10e:	bf00      	nop
 800b110:	24000e48 	.word	0x24000e48

0800b114 <sbrk_aligned>:
 800b114:	b570      	push	{r4, r5, r6, lr}
 800b116:	4e0f      	ldr	r6, [pc, #60]	@ (800b154 <sbrk_aligned+0x40>)
 800b118:	460c      	mov	r4, r1
 800b11a:	6831      	ldr	r1, [r6, #0]
 800b11c:	4605      	mov	r5, r0
 800b11e:	b911      	cbnz	r1, 800b126 <sbrk_aligned+0x12>
 800b120:	f000 fba4 	bl	800b86c <_sbrk_r>
 800b124:	6030      	str	r0, [r6, #0]
 800b126:	4621      	mov	r1, r4
 800b128:	4628      	mov	r0, r5
 800b12a:	f000 fb9f 	bl	800b86c <_sbrk_r>
 800b12e:	1c43      	adds	r3, r0, #1
 800b130:	d103      	bne.n	800b13a <sbrk_aligned+0x26>
 800b132:	f04f 34ff 	mov.w	r4, #4294967295
 800b136:	4620      	mov	r0, r4
 800b138:	bd70      	pop	{r4, r5, r6, pc}
 800b13a:	1cc4      	adds	r4, r0, #3
 800b13c:	f024 0403 	bic.w	r4, r4, #3
 800b140:	42a0      	cmp	r0, r4
 800b142:	d0f8      	beq.n	800b136 <sbrk_aligned+0x22>
 800b144:	1a21      	subs	r1, r4, r0
 800b146:	4628      	mov	r0, r5
 800b148:	f000 fb90 	bl	800b86c <_sbrk_r>
 800b14c:	3001      	adds	r0, #1
 800b14e:	d1f2      	bne.n	800b136 <sbrk_aligned+0x22>
 800b150:	e7ef      	b.n	800b132 <sbrk_aligned+0x1e>
 800b152:	bf00      	nop
 800b154:	24000e44 	.word	0x24000e44

0800b158 <_malloc_r>:
 800b158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b15c:	1ccd      	adds	r5, r1, #3
 800b15e:	f025 0503 	bic.w	r5, r5, #3
 800b162:	3508      	adds	r5, #8
 800b164:	2d0c      	cmp	r5, #12
 800b166:	bf38      	it	cc
 800b168:	250c      	movcc	r5, #12
 800b16a:	2d00      	cmp	r5, #0
 800b16c:	4606      	mov	r6, r0
 800b16e:	db01      	blt.n	800b174 <_malloc_r+0x1c>
 800b170:	42a9      	cmp	r1, r5
 800b172:	d904      	bls.n	800b17e <_malloc_r+0x26>
 800b174:	230c      	movs	r3, #12
 800b176:	6033      	str	r3, [r6, #0]
 800b178:	2000      	movs	r0, #0
 800b17a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b17e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b254 <_malloc_r+0xfc>
 800b182:	f000 f869 	bl	800b258 <__malloc_lock>
 800b186:	f8d8 3000 	ldr.w	r3, [r8]
 800b18a:	461c      	mov	r4, r3
 800b18c:	bb44      	cbnz	r4, 800b1e0 <_malloc_r+0x88>
 800b18e:	4629      	mov	r1, r5
 800b190:	4630      	mov	r0, r6
 800b192:	f7ff ffbf 	bl	800b114 <sbrk_aligned>
 800b196:	1c43      	adds	r3, r0, #1
 800b198:	4604      	mov	r4, r0
 800b19a:	d158      	bne.n	800b24e <_malloc_r+0xf6>
 800b19c:	f8d8 4000 	ldr.w	r4, [r8]
 800b1a0:	4627      	mov	r7, r4
 800b1a2:	2f00      	cmp	r7, #0
 800b1a4:	d143      	bne.n	800b22e <_malloc_r+0xd6>
 800b1a6:	2c00      	cmp	r4, #0
 800b1a8:	d04b      	beq.n	800b242 <_malloc_r+0xea>
 800b1aa:	6823      	ldr	r3, [r4, #0]
 800b1ac:	4639      	mov	r1, r7
 800b1ae:	4630      	mov	r0, r6
 800b1b0:	eb04 0903 	add.w	r9, r4, r3
 800b1b4:	f000 fb5a 	bl	800b86c <_sbrk_r>
 800b1b8:	4581      	cmp	r9, r0
 800b1ba:	d142      	bne.n	800b242 <_malloc_r+0xea>
 800b1bc:	6821      	ldr	r1, [r4, #0]
 800b1be:	1a6d      	subs	r5, r5, r1
 800b1c0:	4629      	mov	r1, r5
 800b1c2:	4630      	mov	r0, r6
 800b1c4:	f7ff ffa6 	bl	800b114 <sbrk_aligned>
 800b1c8:	3001      	adds	r0, #1
 800b1ca:	d03a      	beq.n	800b242 <_malloc_r+0xea>
 800b1cc:	6823      	ldr	r3, [r4, #0]
 800b1ce:	442b      	add	r3, r5
 800b1d0:	6023      	str	r3, [r4, #0]
 800b1d2:	f8d8 3000 	ldr.w	r3, [r8]
 800b1d6:	685a      	ldr	r2, [r3, #4]
 800b1d8:	bb62      	cbnz	r2, 800b234 <_malloc_r+0xdc>
 800b1da:	f8c8 7000 	str.w	r7, [r8]
 800b1de:	e00f      	b.n	800b200 <_malloc_r+0xa8>
 800b1e0:	6822      	ldr	r2, [r4, #0]
 800b1e2:	1b52      	subs	r2, r2, r5
 800b1e4:	d420      	bmi.n	800b228 <_malloc_r+0xd0>
 800b1e6:	2a0b      	cmp	r2, #11
 800b1e8:	d917      	bls.n	800b21a <_malloc_r+0xc2>
 800b1ea:	1961      	adds	r1, r4, r5
 800b1ec:	42a3      	cmp	r3, r4
 800b1ee:	6025      	str	r5, [r4, #0]
 800b1f0:	bf18      	it	ne
 800b1f2:	6059      	strne	r1, [r3, #4]
 800b1f4:	6863      	ldr	r3, [r4, #4]
 800b1f6:	bf08      	it	eq
 800b1f8:	f8c8 1000 	streq.w	r1, [r8]
 800b1fc:	5162      	str	r2, [r4, r5]
 800b1fe:	604b      	str	r3, [r1, #4]
 800b200:	4630      	mov	r0, r6
 800b202:	f000 f82f 	bl	800b264 <__malloc_unlock>
 800b206:	f104 000b 	add.w	r0, r4, #11
 800b20a:	1d23      	adds	r3, r4, #4
 800b20c:	f020 0007 	bic.w	r0, r0, #7
 800b210:	1ac2      	subs	r2, r0, r3
 800b212:	bf1c      	itt	ne
 800b214:	1a1b      	subne	r3, r3, r0
 800b216:	50a3      	strne	r3, [r4, r2]
 800b218:	e7af      	b.n	800b17a <_malloc_r+0x22>
 800b21a:	6862      	ldr	r2, [r4, #4]
 800b21c:	42a3      	cmp	r3, r4
 800b21e:	bf0c      	ite	eq
 800b220:	f8c8 2000 	streq.w	r2, [r8]
 800b224:	605a      	strne	r2, [r3, #4]
 800b226:	e7eb      	b.n	800b200 <_malloc_r+0xa8>
 800b228:	4623      	mov	r3, r4
 800b22a:	6864      	ldr	r4, [r4, #4]
 800b22c:	e7ae      	b.n	800b18c <_malloc_r+0x34>
 800b22e:	463c      	mov	r4, r7
 800b230:	687f      	ldr	r7, [r7, #4]
 800b232:	e7b6      	b.n	800b1a2 <_malloc_r+0x4a>
 800b234:	461a      	mov	r2, r3
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	42a3      	cmp	r3, r4
 800b23a:	d1fb      	bne.n	800b234 <_malloc_r+0xdc>
 800b23c:	2300      	movs	r3, #0
 800b23e:	6053      	str	r3, [r2, #4]
 800b240:	e7de      	b.n	800b200 <_malloc_r+0xa8>
 800b242:	230c      	movs	r3, #12
 800b244:	6033      	str	r3, [r6, #0]
 800b246:	4630      	mov	r0, r6
 800b248:	f000 f80c 	bl	800b264 <__malloc_unlock>
 800b24c:	e794      	b.n	800b178 <_malloc_r+0x20>
 800b24e:	6005      	str	r5, [r0, #0]
 800b250:	e7d6      	b.n	800b200 <_malloc_r+0xa8>
 800b252:	bf00      	nop
 800b254:	24000e48 	.word	0x24000e48

0800b258 <__malloc_lock>:
 800b258:	4801      	ldr	r0, [pc, #4]	@ (800b260 <__malloc_lock+0x8>)
 800b25a:	f7ff bf01 	b.w	800b060 <__retarget_lock_acquire_recursive>
 800b25e:	bf00      	nop
 800b260:	24000e40 	.word	0x24000e40

0800b264 <__malloc_unlock>:
 800b264:	4801      	ldr	r0, [pc, #4]	@ (800b26c <__malloc_unlock+0x8>)
 800b266:	f7ff befc 	b.w	800b062 <__retarget_lock_release_recursive>
 800b26a:	bf00      	nop
 800b26c:	24000e40 	.word	0x24000e40

0800b270 <__ssputs_r>:
 800b270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b274:	688e      	ldr	r6, [r1, #8]
 800b276:	461f      	mov	r7, r3
 800b278:	42be      	cmp	r6, r7
 800b27a:	680b      	ldr	r3, [r1, #0]
 800b27c:	4682      	mov	sl, r0
 800b27e:	460c      	mov	r4, r1
 800b280:	4690      	mov	r8, r2
 800b282:	d82d      	bhi.n	800b2e0 <__ssputs_r+0x70>
 800b284:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b288:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b28c:	d026      	beq.n	800b2dc <__ssputs_r+0x6c>
 800b28e:	6965      	ldr	r5, [r4, #20]
 800b290:	6909      	ldr	r1, [r1, #16]
 800b292:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b296:	eba3 0901 	sub.w	r9, r3, r1
 800b29a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b29e:	1c7b      	adds	r3, r7, #1
 800b2a0:	444b      	add	r3, r9
 800b2a2:	106d      	asrs	r5, r5, #1
 800b2a4:	429d      	cmp	r5, r3
 800b2a6:	bf38      	it	cc
 800b2a8:	461d      	movcc	r5, r3
 800b2aa:	0553      	lsls	r3, r2, #21
 800b2ac:	d527      	bpl.n	800b2fe <__ssputs_r+0x8e>
 800b2ae:	4629      	mov	r1, r5
 800b2b0:	f7ff ff52 	bl	800b158 <_malloc_r>
 800b2b4:	4606      	mov	r6, r0
 800b2b6:	b360      	cbz	r0, 800b312 <__ssputs_r+0xa2>
 800b2b8:	6921      	ldr	r1, [r4, #16]
 800b2ba:	464a      	mov	r2, r9
 800b2bc:	f7ff fed2 	bl	800b064 <memcpy>
 800b2c0:	89a3      	ldrh	r3, [r4, #12]
 800b2c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b2c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2ca:	81a3      	strh	r3, [r4, #12]
 800b2cc:	6126      	str	r6, [r4, #16]
 800b2ce:	6165      	str	r5, [r4, #20]
 800b2d0:	444e      	add	r6, r9
 800b2d2:	eba5 0509 	sub.w	r5, r5, r9
 800b2d6:	6026      	str	r6, [r4, #0]
 800b2d8:	60a5      	str	r5, [r4, #8]
 800b2da:	463e      	mov	r6, r7
 800b2dc:	42be      	cmp	r6, r7
 800b2de:	d900      	bls.n	800b2e2 <__ssputs_r+0x72>
 800b2e0:	463e      	mov	r6, r7
 800b2e2:	6820      	ldr	r0, [r4, #0]
 800b2e4:	4632      	mov	r2, r6
 800b2e6:	4641      	mov	r1, r8
 800b2e8:	f000 faa6 	bl	800b838 <memmove>
 800b2ec:	68a3      	ldr	r3, [r4, #8]
 800b2ee:	1b9b      	subs	r3, r3, r6
 800b2f0:	60a3      	str	r3, [r4, #8]
 800b2f2:	6823      	ldr	r3, [r4, #0]
 800b2f4:	4433      	add	r3, r6
 800b2f6:	6023      	str	r3, [r4, #0]
 800b2f8:	2000      	movs	r0, #0
 800b2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2fe:	462a      	mov	r2, r5
 800b300:	f000 fac4 	bl	800b88c <_realloc_r>
 800b304:	4606      	mov	r6, r0
 800b306:	2800      	cmp	r0, #0
 800b308:	d1e0      	bne.n	800b2cc <__ssputs_r+0x5c>
 800b30a:	6921      	ldr	r1, [r4, #16]
 800b30c:	4650      	mov	r0, sl
 800b30e:	f7ff feb7 	bl	800b080 <_free_r>
 800b312:	230c      	movs	r3, #12
 800b314:	f8ca 3000 	str.w	r3, [sl]
 800b318:	89a3      	ldrh	r3, [r4, #12]
 800b31a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b31e:	81a3      	strh	r3, [r4, #12]
 800b320:	f04f 30ff 	mov.w	r0, #4294967295
 800b324:	e7e9      	b.n	800b2fa <__ssputs_r+0x8a>
	...

0800b328 <_svfiprintf_r>:
 800b328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32c:	4698      	mov	r8, r3
 800b32e:	898b      	ldrh	r3, [r1, #12]
 800b330:	061b      	lsls	r3, r3, #24
 800b332:	b09d      	sub	sp, #116	@ 0x74
 800b334:	4607      	mov	r7, r0
 800b336:	460d      	mov	r5, r1
 800b338:	4614      	mov	r4, r2
 800b33a:	d510      	bpl.n	800b35e <_svfiprintf_r+0x36>
 800b33c:	690b      	ldr	r3, [r1, #16]
 800b33e:	b973      	cbnz	r3, 800b35e <_svfiprintf_r+0x36>
 800b340:	2140      	movs	r1, #64	@ 0x40
 800b342:	f7ff ff09 	bl	800b158 <_malloc_r>
 800b346:	6028      	str	r0, [r5, #0]
 800b348:	6128      	str	r0, [r5, #16]
 800b34a:	b930      	cbnz	r0, 800b35a <_svfiprintf_r+0x32>
 800b34c:	230c      	movs	r3, #12
 800b34e:	603b      	str	r3, [r7, #0]
 800b350:	f04f 30ff 	mov.w	r0, #4294967295
 800b354:	b01d      	add	sp, #116	@ 0x74
 800b356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b35a:	2340      	movs	r3, #64	@ 0x40
 800b35c:	616b      	str	r3, [r5, #20]
 800b35e:	2300      	movs	r3, #0
 800b360:	9309      	str	r3, [sp, #36]	@ 0x24
 800b362:	2320      	movs	r3, #32
 800b364:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b368:	f8cd 800c 	str.w	r8, [sp, #12]
 800b36c:	2330      	movs	r3, #48	@ 0x30
 800b36e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b50c <_svfiprintf_r+0x1e4>
 800b372:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b376:	f04f 0901 	mov.w	r9, #1
 800b37a:	4623      	mov	r3, r4
 800b37c:	469a      	mov	sl, r3
 800b37e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b382:	b10a      	cbz	r2, 800b388 <_svfiprintf_r+0x60>
 800b384:	2a25      	cmp	r2, #37	@ 0x25
 800b386:	d1f9      	bne.n	800b37c <_svfiprintf_r+0x54>
 800b388:	ebba 0b04 	subs.w	fp, sl, r4
 800b38c:	d00b      	beq.n	800b3a6 <_svfiprintf_r+0x7e>
 800b38e:	465b      	mov	r3, fp
 800b390:	4622      	mov	r2, r4
 800b392:	4629      	mov	r1, r5
 800b394:	4638      	mov	r0, r7
 800b396:	f7ff ff6b 	bl	800b270 <__ssputs_r>
 800b39a:	3001      	adds	r0, #1
 800b39c:	f000 80a7 	beq.w	800b4ee <_svfiprintf_r+0x1c6>
 800b3a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3a2:	445a      	add	r2, fp
 800b3a4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b3a6:	f89a 3000 	ldrb.w	r3, [sl]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	f000 809f 	beq.w	800b4ee <_svfiprintf_r+0x1c6>
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b3b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3ba:	f10a 0a01 	add.w	sl, sl, #1
 800b3be:	9304      	str	r3, [sp, #16]
 800b3c0:	9307      	str	r3, [sp, #28]
 800b3c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b3c6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b3c8:	4654      	mov	r4, sl
 800b3ca:	2205      	movs	r2, #5
 800b3cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3d0:	484e      	ldr	r0, [pc, #312]	@ (800b50c <_svfiprintf_r+0x1e4>)
 800b3d2:	f7f4 ffa5 	bl	8000320 <memchr>
 800b3d6:	9a04      	ldr	r2, [sp, #16]
 800b3d8:	b9d8      	cbnz	r0, 800b412 <_svfiprintf_r+0xea>
 800b3da:	06d0      	lsls	r0, r2, #27
 800b3dc:	bf44      	itt	mi
 800b3de:	2320      	movmi	r3, #32
 800b3e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3e4:	0711      	lsls	r1, r2, #28
 800b3e6:	bf44      	itt	mi
 800b3e8:	232b      	movmi	r3, #43	@ 0x2b
 800b3ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3ee:	f89a 3000 	ldrb.w	r3, [sl]
 800b3f2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3f4:	d015      	beq.n	800b422 <_svfiprintf_r+0xfa>
 800b3f6:	9a07      	ldr	r2, [sp, #28]
 800b3f8:	4654      	mov	r4, sl
 800b3fa:	2000      	movs	r0, #0
 800b3fc:	f04f 0c0a 	mov.w	ip, #10
 800b400:	4621      	mov	r1, r4
 800b402:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b406:	3b30      	subs	r3, #48	@ 0x30
 800b408:	2b09      	cmp	r3, #9
 800b40a:	d94b      	bls.n	800b4a4 <_svfiprintf_r+0x17c>
 800b40c:	b1b0      	cbz	r0, 800b43c <_svfiprintf_r+0x114>
 800b40e:	9207      	str	r2, [sp, #28]
 800b410:	e014      	b.n	800b43c <_svfiprintf_r+0x114>
 800b412:	eba0 0308 	sub.w	r3, r0, r8
 800b416:	fa09 f303 	lsl.w	r3, r9, r3
 800b41a:	4313      	orrs	r3, r2
 800b41c:	9304      	str	r3, [sp, #16]
 800b41e:	46a2      	mov	sl, r4
 800b420:	e7d2      	b.n	800b3c8 <_svfiprintf_r+0xa0>
 800b422:	9b03      	ldr	r3, [sp, #12]
 800b424:	1d19      	adds	r1, r3, #4
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	9103      	str	r1, [sp, #12]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	bfbb      	ittet	lt
 800b42e:	425b      	neglt	r3, r3
 800b430:	f042 0202 	orrlt.w	r2, r2, #2
 800b434:	9307      	strge	r3, [sp, #28]
 800b436:	9307      	strlt	r3, [sp, #28]
 800b438:	bfb8      	it	lt
 800b43a:	9204      	strlt	r2, [sp, #16]
 800b43c:	7823      	ldrb	r3, [r4, #0]
 800b43e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b440:	d10a      	bne.n	800b458 <_svfiprintf_r+0x130>
 800b442:	7863      	ldrb	r3, [r4, #1]
 800b444:	2b2a      	cmp	r3, #42	@ 0x2a
 800b446:	d132      	bne.n	800b4ae <_svfiprintf_r+0x186>
 800b448:	9b03      	ldr	r3, [sp, #12]
 800b44a:	1d1a      	adds	r2, r3, #4
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	9203      	str	r2, [sp, #12]
 800b450:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b454:	3402      	adds	r4, #2
 800b456:	9305      	str	r3, [sp, #20]
 800b458:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b51c <_svfiprintf_r+0x1f4>
 800b45c:	7821      	ldrb	r1, [r4, #0]
 800b45e:	2203      	movs	r2, #3
 800b460:	4650      	mov	r0, sl
 800b462:	f7f4 ff5d 	bl	8000320 <memchr>
 800b466:	b138      	cbz	r0, 800b478 <_svfiprintf_r+0x150>
 800b468:	9b04      	ldr	r3, [sp, #16]
 800b46a:	eba0 000a 	sub.w	r0, r0, sl
 800b46e:	2240      	movs	r2, #64	@ 0x40
 800b470:	4082      	lsls	r2, r0
 800b472:	4313      	orrs	r3, r2
 800b474:	3401      	adds	r4, #1
 800b476:	9304      	str	r3, [sp, #16]
 800b478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b47c:	4824      	ldr	r0, [pc, #144]	@ (800b510 <_svfiprintf_r+0x1e8>)
 800b47e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b482:	2206      	movs	r2, #6
 800b484:	f7f4 ff4c 	bl	8000320 <memchr>
 800b488:	2800      	cmp	r0, #0
 800b48a:	d036      	beq.n	800b4fa <_svfiprintf_r+0x1d2>
 800b48c:	4b21      	ldr	r3, [pc, #132]	@ (800b514 <_svfiprintf_r+0x1ec>)
 800b48e:	bb1b      	cbnz	r3, 800b4d8 <_svfiprintf_r+0x1b0>
 800b490:	9b03      	ldr	r3, [sp, #12]
 800b492:	3307      	adds	r3, #7
 800b494:	f023 0307 	bic.w	r3, r3, #7
 800b498:	3308      	adds	r3, #8
 800b49a:	9303      	str	r3, [sp, #12]
 800b49c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b49e:	4433      	add	r3, r6
 800b4a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4a2:	e76a      	b.n	800b37a <_svfiprintf_r+0x52>
 800b4a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4a8:	460c      	mov	r4, r1
 800b4aa:	2001      	movs	r0, #1
 800b4ac:	e7a8      	b.n	800b400 <_svfiprintf_r+0xd8>
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	3401      	adds	r4, #1
 800b4b2:	9305      	str	r3, [sp, #20]
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	f04f 0c0a 	mov.w	ip, #10
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4c0:	3a30      	subs	r2, #48	@ 0x30
 800b4c2:	2a09      	cmp	r2, #9
 800b4c4:	d903      	bls.n	800b4ce <_svfiprintf_r+0x1a6>
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d0c6      	beq.n	800b458 <_svfiprintf_r+0x130>
 800b4ca:	9105      	str	r1, [sp, #20]
 800b4cc:	e7c4      	b.n	800b458 <_svfiprintf_r+0x130>
 800b4ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4d2:	4604      	mov	r4, r0
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e7f0      	b.n	800b4ba <_svfiprintf_r+0x192>
 800b4d8:	ab03      	add	r3, sp, #12
 800b4da:	9300      	str	r3, [sp, #0]
 800b4dc:	462a      	mov	r2, r5
 800b4de:	4b0e      	ldr	r3, [pc, #56]	@ (800b518 <_svfiprintf_r+0x1f0>)
 800b4e0:	a904      	add	r1, sp, #16
 800b4e2:	4638      	mov	r0, r7
 800b4e4:	f3af 8000 	nop.w
 800b4e8:	1c42      	adds	r2, r0, #1
 800b4ea:	4606      	mov	r6, r0
 800b4ec:	d1d6      	bne.n	800b49c <_svfiprintf_r+0x174>
 800b4ee:	89ab      	ldrh	r3, [r5, #12]
 800b4f0:	065b      	lsls	r3, r3, #25
 800b4f2:	f53f af2d 	bmi.w	800b350 <_svfiprintf_r+0x28>
 800b4f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b4f8:	e72c      	b.n	800b354 <_svfiprintf_r+0x2c>
 800b4fa:	ab03      	add	r3, sp, #12
 800b4fc:	9300      	str	r3, [sp, #0]
 800b4fe:	462a      	mov	r2, r5
 800b500:	4b05      	ldr	r3, [pc, #20]	@ (800b518 <_svfiprintf_r+0x1f0>)
 800b502:	a904      	add	r1, sp, #16
 800b504:	4638      	mov	r0, r7
 800b506:	f000 f879 	bl	800b5fc <_printf_i>
 800b50a:	e7ed      	b.n	800b4e8 <_svfiprintf_r+0x1c0>
 800b50c:	0800bcbc 	.word	0x0800bcbc
 800b510:	0800bcc6 	.word	0x0800bcc6
 800b514:	00000000 	.word	0x00000000
 800b518:	0800b271 	.word	0x0800b271
 800b51c:	0800bcc2 	.word	0x0800bcc2

0800b520 <_printf_common>:
 800b520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b524:	4616      	mov	r6, r2
 800b526:	4698      	mov	r8, r3
 800b528:	688a      	ldr	r2, [r1, #8]
 800b52a:	690b      	ldr	r3, [r1, #16]
 800b52c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b530:	4293      	cmp	r3, r2
 800b532:	bfb8      	it	lt
 800b534:	4613      	movlt	r3, r2
 800b536:	6033      	str	r3, [r6, #0]
 800b538:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b53c:	4607      	mov	r7, r0
 800b53e:	460c      	mov	r4, r1
 800b540:	b10a      	cbz	r2, 800b546 <_printf_common+0x26>
 800b542:	3301      	adds	r3, #1
 800b544:	6033      	str	r3, [r6, #0]
 800b546:	6823      	ldr	r3, [r4, #0]
 800b548:	0699      	lsls	r1, r3, #26
 800b54a:	bf42      	ittt	mi
 800b54c:	6833      	ldrmi	r3, [r6, #0]
 800b54e:	3302      	addmi	r3, #2
 800b550:	6033      	strmi	r3, [r6, #0]
 800b552:	6825      	ldr	r5, [r4, #0]
 800b554:	f015 0506 	ands.w	r5, r5, #6
 800b558:	d106      	bne.n	800b568 <_printf_common+0x48>
 800b55a:	f104 0a19 	add.w	sl, r4, #25
 800b55e:	68e3      	ldr	r3, [r4, #12]
 800b560:	6832      	ldr	r2, [r6, #0]
 800b562:	1a9b      	subs	r3, r3, r2
 800b564:	42ab      	cmp	r3, r5
 800b566:	dc26      	bgt.n	800b5b6 <_printf_common+0x96>
 800b568:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b56c:	6822      	ldr	r2, [r4, #0]
 800b56e:	3b00      	subs	r3, #0
 800b570:	bf18      	it	ne
 800b572:	2301      	movne	r3, #1
 800b574:	0692      	lsls	r2, r2, #26
 800b576:	d42b      	bmi.n	800b5d0 <_printf_common+0xb0>
 800b578:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b57c:	4641      	mov	r1, r8
 800b57e:	4638      	mov	r0, r7
 800b580:	47c8      	blx	r9
 800b582:	3001      	adds	r0, #1
 800b584:	d01e      	beq.n	800b5c4 <_printf_common+0xa4>
 800b586:	6823      	ldr	r3, [r4, #0]
 800b588:	6922      	ldr	r2, [r4, #16]
 800b58a:	f003 0306 	and.w	r3, r3, #6
 800b58e:	2b04      	cmp	r3, #4
 800b590:	bf02      	ittt	eq
 800b592:	68e5      	ldreq	r5, [r4, #12]
 800b594:	6833      	ldreq	r3, [r6, #0]
 800b596:	1aed      	subeq	r5, r5, r3
 800b598:	68a3      	ldr	r3, [r4, #8]
 800b59a:	bf0c      	ite	eq
 800b59c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5a0:	2500      	movne	r5, #0
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	bfc4      	itt	gt
 800b5a6:	1a9b      	subgt	r3, r3, r2
 800b5a8:	18ed      	addgt	r5, r5, r3
 800b5aa:	2600      	movs	r6, #0
 800b5ac:	341a      	adds	r4, #26
 800b5ae:	42b5      	cmp	r5, r6
 800b5b0:	d11a      	bne.n	800b5e8 <_printf_common+0xc8>
 800b5b2:	2000      	movs	r0, #0
 800b5b4:	e008      	b.n	800b5c8 <_printf_common+0xa8>
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	4652      	mov	r2, sl
 800b5ba:	4641      	mov	r1, r8
 800b5bc:	4638      	mov	r0, r7
 800b5be:	47c8      	blx	r9
 800b5c0:	3001      	adds	r0, #1
 800b5c2:	d103      	bne.n	800b5cc <_printf_common+0xac>
 800b5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5cc:	3501      	adds	r5, #1
 800b5ce:	e7c6      	b.n	800b55e <_printf_common+0x3e>
 800b5d0:	18e1      	adds	r1, r4, r3
 800b5d2:	1c5a      	adds	r2, r3, #1
 800b5d4:	2030      	movs	r0, #48	@ 0x30
 800b5d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b5da:	4422      	add	r2, r4
 800b5dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b5e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b5e4:	3302      	adds	r3, #2
 800b5e6:	e7c7      	b.n	800b578 <_printf_common+0x58>
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	4622      	mov	r2, r4
 800b5ec:	4641      	mov	r1, r8
 800b5ee:	4638      	mov	r0, r7
 800b5f0:	47c8      	blx	r9
 800b5f2:	3001      	adds	r0, #1
 800b5f4:	d0e6      	beq.n	800b5c4 <_printf_common+0xa4>
 800b5f6:	3601      	adds	r6, #1
 800b5f8:	e7d9      	b.n	800b5ae <_printf_common+0x8e>
	...

0800b5fc <_printf_i>:
 800b5fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b600:	7e0f      	ldrb	r7, [r1, #24]
 800b602:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b604:	2f78      	cmp	r7, #120	@ 0x78
 800b606:	4691      	mov	r9, r2
 800b608:	4680      	mov	r8, r0
 800b60a:	460c      	mov	r4, r1
 800b60c:	469a      	mov	sl, r3
 800b60e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b612:	d807      	bhi.n	800b624 <_printf_i+0x28>
 800b614:	2f62      	cmp	r7, #98	@ 0x62
 800b616:	d80a      	bhi.n	800b62e <_printf_i+0x32>
 800b618:	2f00      	cmp	r7, #0
 800b61a:	f000 80d1 	beq.w	800b7c0 <_printf_i+0x1c4>
 800b61e:	2f58      	cmp	r7, #88	@ 0x58
 800b620:	f000 80b8 	beq.w	800b794 <_printf_i+0x198>
 800b624:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b628:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b62c:	e03a      	b.n	800b6a4 <_printf_i+0xa8>
 800b62e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b632:	2b15      	cmp	r3, #21
 800b634:	d8f6      	bhi.n	800b624 <_printf_i+0x28>
 800b636:	a101      	add	r1, pc, #4	@ (adr r1, 800b63c <_printf_i+0x40>)
 800b638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b63c:	0800b695 	.word	0x0800b695
 800b640:	0800b6a9 	.word	0x0800b6a9
 800b644:	0800b625 	.word	0x0800b625
 800b648:	0800b625 	.word	0x0800b625
 800b64c:	0800b625 	.word	0x0800b625
 800b650:	0800b625 	.word	0x0800b625
 800b654:	0800b6a9 	.word	0x0800b6a9
 800b658:	0800b625 	.word	0x0800b625
 800b65c:	0800b625 	.word	0x0800b625
 800b660:	0800b625 	.word	0x0800b625
 800b664:	0800b625 	.word	0x0800b625
 800b668:	0800b7a7 	.word	0x0800b7a7
 800b66c:	0800b6d3 	.word	0x0800b6d3
 800b670:	0800b761 	.word	0x0800b761
 800b674:	0800b625 	.word	0x0800b625
 800b678:	0800b625 	.word	0x0800b625
 800b67c:	0800b7c9 	.word	0x0800b7c9
 800b680:	0800b625 	.word	0x0800b625
 800b684:	0800b6d3 	.word	0x0800b6d3
 800b688:	0800b625 	.word	0x0800b625
 800b68c:	0800b625 	.word	0x0800b625
 800b690:	0800b769 	.word	0x0800b769
 800b694:	6833      	ldr	r3, [r6, #0]
 800b696:	1d1a      	adds	r2, r3, #4
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	6032      	str	r2, [r6, #0]
 800b69c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b6a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	e09c      	b.n	800b7e2 <_printf_i+0x1e6>
 800b6a8:	6833      	ldr	r3, [r6, #0]
 800b6aa:	6820      	ldr	r0, [r4, #0]
 800b6ac:	1d19      	adds	r1, r3, #4
 800b6ae:	6031      	str	r1, [r6, #0]
 800b6b0:	0606      	lsls	r6, r0, #24
 800b6b2:	d501      	bpl.n	800b6b8 <_printf_i+0xbc>
 800b6b4:	681d      	ldr	r5, [r3, #0]
 800b6b6:	e003      	b.n	800b6c0 <_printf_i+0xc4>
 800b6b8:	0645      	lsls	r5, r0, #25
 800b6ba:	d5fb      	bpl.n	800b6b4 <_printf_i+0xb8>
 800b6bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b6c0:	2d00      	cmp	r5, #0
 800b6c2:	da03      	bge.n	800b6cc <_printf_i+0xd0>
 800b6c4:	232d      	movs	r3, #45	@ 0x2d
 800b6c6:	426d      	negs	r5, r5
 800b6c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6cc:	4858      	ldr	r0, [pc, #352]	@ (800b830 <_printf_i+0x234>)
 800b6ce:	230a      	movs	r3, #10
 800b6d0:	e011      	b.n	800b6f6 <_printf_i+0xfa>
 800b6d2:	6821      	ldr	r1, [r4, #0]
 800b6d4:	6833      	ldr	r3, [r6, #0]
 800b6d6:	0608      	lsls	r0, r1, #24
 800b6d8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b6dc:	d402      	bmi.n	800b6e4 <_printf_i+0xe8>
 800b6de:	0649      	lsls	r1, r1, #25
 800b6e0:	bf48      	it	mi
 800b6e2:	b2ad      	uxthmi	r5, r5
 800b6e4:	2f6f      	cmp	r7, #111	@ 0x6f
 800b6e6:	4852      	ldr	r0, [pc, #328]	@ (800b830 <_printf_i+0x234>)
 800b6e8:	6033      	str	r3, [r6, #0]
 800b6ea:	bf14      	ite	ne
 800b6ec:	230a      	movne	r3, #10
 800b6ee:	2308      	moveq	r3, #8
 800b6f0:	2100      	movs	r1, #0
 800b6f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b6f6:	6866      	ldr	r6, [r4, #4]
 800b6f8:	60a6      	str	r6, [r4, #8]
 800b6fa:	2e00      	cmp	r6, #0
 800b6fc:	db05      	blt.n	800b70a <_printf_i+0x10e>
 800b6fe:	6821      	ldr	r1, [r4, #0]
 800b700:	432e      	orrs	r6, r5
 800b702:	f021 0104 	bic.w	r1, r1, #4
 800b706:	6021      	str	r1, [r4, #0]
 800b708:	d04b      	beq.n	800b7a2 <_printf_i+0x1a6>
 800b70a:	4616      	mov	r6, r2
 800b70c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b710:	fb03 5711 	mls	r7, r3, r1, r5
 800b714:	5dc7      	ldrb	r7, [r0, r7]
 800b716:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b71a:	462f      	mov	r7, r5
 800b71c:	42bb      	cmp	r3, r7
 800b71e:	460d      	mov	r5, r1
 800b720:	d9f4      	bls.n	800b70c <_printf_i+0x110>
 800b722:	2b08      	cmp	r3, #8
 800b724:	d10b      	bne.n	800b73e <_printf_i+0x142>
 800b726:	6823      	ldr	r3, [r4, #0]
 800b728:	07df      	lsls	r7, r3, #31
 800b72a:	d508      	bpl.n	800b73e <_printf_i+0x142>
 800b72c:	6923      	ldr	r3, [r4, #16]
 800b72e:	6861      	ldr	r1, [r4, #4]
 800b730:	4299      	cmp	r1, r3
 800b732:	bfde      	ittt	le
 800b734:	2330      	movle	r3, #48	@ 0x30
 800b736:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b73a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b73e:	1b92      	subs	r2, r2, r6
 800b740:	6122      	str	r2, [r4, #16]
 800b742:	f8cd a000 	str.w	sl, [sp]
 800b746:	464b      	mov	r3, r9
 800b748:	aa03      	add	r2, sp, #12
 800b74a:	4621      	mov	r1, r4
 800b74c:	4640      	mov	r0, r8
 800b74e:	f7ff fee7 	bl	800b520 <_printf_common>
 800b752:	3001      	adds	r0, #1
 800b754:	d14a      	bne.n	800b7ec <_printf_i+0x1f0>
 800b756:	f04f 30ff 	mov.w	r0, #4294967295
 800b75a:	b004      	add	sp, #16
 800b75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b760:	6823      	ldr	r3, [r4, #0]
 800b762:	f043 0320 	orr.w	r3, r3, #32
 800b766:	6023      	str	r3, [r4, #0]
 800b768:	4832      	ldr	r0, [pc, #200]	@ (800b834 <_printf_i+0x238>)
 800b76a:	2778      	movs	r7, #120	@ 0x78
 800b76c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b770:	6823      	ldr	r3, [r4, #0]
 800b772:	6831      	ldr	r1, [r6, #0]
 800b774:	061f      	lsls	r7, r3, #24
 800b776:	f851 5b04 	ldr.w	r5, [r1], #4
 800b77a:	d402      	bmi.n	800b782 <_printf_i+0x186>
 800b77c:	065f      	lsls	r7, r3, #25
 800b77e:	bf48      	it	mi
 800b780:	b2ad      	uxthmi	r5, r5
 800b782:	6031      	str	r1, [r6, #0]
 800b784:	07d9      	lsls	r1, r3, #31
 800b786:	bf44      	itt	mi
 800b788:	f043 0320 	orrmi.w	r3, r3, #32
 800b78c:	6023      	strmi	r3, [r4, #0]
 800b78e:	b11d      	cbz	r5, 800b798 <_printf_i+0x19c>
 800b790:	2310      	movs	r3, #16
 800b792:	e7ad      	b.n	800b6f0 <_printf_i+0xf4>
 800b794:	4826      	ldr	r0, [pc, #152]	@ (800b830 <_printf_i+0x234>)
 800b796:	e7e9      	b.n	800b76c <_printf_i+0x170>
 800b798:	6823      	ldr	r3, [r4, #0]
 800b79a:	f023 0320 	bic.w	r3, r3, #32
 800b79e:	6023      	str	r3, [r4, #0]
 800b7a0:	e7f6      	b.n	800b790 <_printf_i+0x194>
 800b7a2:	4616      	mov	r6, r2
 800b7a4:	e7bd      	b.n	800b722 <_printf_i+0x126>
 800b7a6:	6833      	ldr	r3, [r6, #0]
 800b7a8:	6825      	ldr	r5, [r4, #0]
 800b7aa:	6961      	ldr	r1, [r4, #20]
 800b7ac:	1d18      	adds	r0, r3, #4
 800b7ae:	6030      	str	r0, [r6, #0]
 800b7b0:	062e      	lsls	r6, r5, #24
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	d501      	bpl.n	800b7ba <_printf_i+0x1be>
 800b7b6:	6019      	str	r1, [r3, #0]
 800b7b8:	e002      	b.n	800b7c0 <_printf_i+0x1c4>
 800b7ba:	0668      	lsls	r0, r5, #25
 800b7bc:	d5fb      	bpl.n	800b7b6 <_printf_i+0x1ba>
 800b7be:	8019      	strh	r1, [r3, #0]
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	6123      	str	r3, [r4, #16]
 800b7c4:	4616      	mov	r6, r2
 800b7c6:	e7bc      	b.n	800b742 <_printf_i+0x146>
 800b7c8:	6833      	ldr	r3, [r6, #0]
 800b7ca:	1d1a      	adds	r2, r3, #4
 800b7cc:	6032      	str	r2, [r6, #0]
 800b7ce:	681e      	ldr	r6, [r3, #0]
 800b7d0:	6862      	ldr	r2, [r4, #4]
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	4630      	mov	r0, r6
 800b7d6:	f7f4 fda3 	bl	8000320 <memchr>
 800b7da:	b108      	cbz	r0, 800b7e0 <_printf_i+0x1e4>
 800b7dc:	1b80      	subs	r0, r0, r6
 800b7de:	6060      	str	r0, [r4, #4]
 800b7e0:	6863      	ldr	r3, [r4, #4]
 800b7e2:	6123      	str	r3, [r4, #16]
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7ea:	e7aa      	b.n	800b742 <_printf_i+0x146>
 800b7ec:	6923      	ldr	r3, [r4, #16]
 800b7ee:	4632      	mov	r2, r6
 800b7f0:	4649      	mov	r1, r9
 800b7f2:	4640      	mov	r0, r8
 800b7f4:	47d0      	blx	sl
 800b7f6:	3001      	adds	r0, #1
 800b7f8:	d0ad      	beq.n	800b756 <_printf_i+0x15a>
 800b7fa:	6823      	ldr	r3, [r4, #0]
 800b7fc:	079b      	lsls	r3, r3, #30
 800b7fe:	d413      	bmi.n	800b828 <_printf_i+0x22c>
 800b800:	68e0      	ldr	r0, [r4, #12]
 800b802:	9b03      	ldr	r3, [sp, #12]
 800b804:	4298      	cmp	r0, r3
 800b806:	bfb8      	it	lt
 800b808:	4618      	movlt	r0, r3
 800b80a:	e7a6      	b.n	800b75a <_printf_i+0x15e>
 800b80c:	2301      	movs	r3, #1
 800b80e:	4632      	mov	r2, r6
 800b810:	4649      	mov	r1, r9
 800b812:	4640      	mov	r0, r8
 800b814:	47d0      	blx	sl
 800b816:	3001      	adds	r0, #1
 800b818:	d09d      	beq.n	800b756 <_printf_i+0x15a>
 800b81a:	3501      	adds	r5, #1
 800b81c:	68e3      	ldr	r3, [r4, #12]
 800b81e:	9903      	ldr	r1, [sp, #12]
 800b820:	1a5b      	subs	r3, r3, r1
 800b822:	42ab      	cmp	r3, r5
 800b824:	dcf2      	bgt.n	800b80c <_printf_i+0x210>
 800b826:	e7eb      	b.n	800b800 <_printf_i+0x204>
 800b828:	2500      	movs	r5, #0
 800b82a:	f104 0619 	add.w	r6, r4, #25
 800b82e:	e7f5      	b.n	800b81c <_printf_i+0x220>
 800b830:	0800bccd 	.word	0x0800bccd
 800b834:	0800bcde 	.word	0x0800bcde

0800b838 <memmove>:
 800b838:	4288      	cmp	r0, r1
 800b83a:	b510      	push	{r4, lr}
 800b83c:	eb01 0402 	add.w	r4, r1, r2
 800b840:	d902      	bls.n	800b848 <memmove+0x10>
 800b842:	4284      	cmp	r4, r0
 800b844:	4623      	mov	r3, r4
 800b846:	d807      	bhi.n	800b858 <memmove+0x20>
 800b848:	1e43      	subs	r3, r0, #1
 800b84a:	42a1      	cmp	r1, r4
 800b84c:	d008      	beq.n	800b860 <memmove+0x28>
 800b84e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b852:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b856:	e7f8      	b.n	800b84a <memmove+0x12>
 800b858:	4402      	add	r2, r0
 800b85a:	4601      	mov	r1, r0
 800b85c:	428a      	cmp	r2, r1
 800b85e:	d100      	bne.n	800b862 <memmove+0x2a>
 800b860:	bd10      	pop	{r4, pc}
 800b862:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b866:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b86a:	e7f7      	b.n	800b85c <memmove+0x24>

0800b86c <_sbrk_r>:
 800b86c:	b538      	push	{r3, r4, r5, lr}
 800b86e:	4d06      	ldr	r5, [pc, #24]	@ (800b888 <_sbrk_r+0x1c>)
 800b870:	2300      	movs	r3, #0
 800b872:	4604      	mov	r4, r0
 800b874:	4608      	mov	r0, r1
 800b876:	602b      	str	r3, [r5, #0]
 800b878:	f7f6 ffd4 	bl	8002824 <_sbrk>
 800b87c:	1c43      	adds	r3, r0, #1
 800b87e:	d102      	bne.n	800b886 <_sbrk_r+0x1a>
 800b880:	682b      	ldr	r3, [r5, #0]
 800b882:	b103      	cbz	r3, 800b886 <_sbrk_r+0x1a>
 800b884:	6023      	str	r3, [r4, #0]
 800b886:	bd38      	pop	{r3, r4, r5, pc}
 800b888:	24000e3c 	.word	0x24000e3c

0800b88c <_realloc_r>:
 800b88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b890:	4607      	mov	r7, r0
 800b892:	4614      	mov	r4, r2
 800b894:	460d      	mov	r5, r1
 800b896:	b921      	cbnz	r1, 800b8a2 <_realloc_r+0x16>
 800b898:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b89c:	4611      	mov	r1, r2
 800b89e:	f7ff bc5b 	b.w	800b158 <_malloc_r>
 800b8a2:	b92a      	cbnz	r2, 800b8b0 <_realloc_r+0x24>
 800b8a4:	f7ff fbec 	bl	800b080 <_free_r>
 800b8a8:	4625      	mov	r5, r4
 800b8aa:	4628      	mov	r0, r5
 800b8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8b0:	f000 f81a 	bl	800b8e8 <_malloc_usable_size_r>
 800b8b4:	4284      	cmp	r4, r0
 800b8b6:	4606      	mov	r6, r0
 800b8b8:	d802      	bhi.n	800b8c0 <_realloc_r+0x34>
 800b8ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b8be:	d8f4      	bhi.n	800b8aa <_realloc_r+0x1e>
 800b8c0:	4621      	mov	r1, r4
 800b8c2:	4638      	mov	r0, r7
 800b8c4:	f7ff fc48 	bl	800b158 <_malloc_r>
 800b8c8:	4680      	mov	r8, r0
 800b8ca:	b908      	cbnz	r0, 800b8d0 <_realloc_r+0x44>
 800b8cc:	4645      	mov	r5, r8
 800b8ce:	e7ec      	b.n	800b8aa <_realloc_r+0x1e>
 800b8d0:	42b4      	cmp	r4, r6
 800b8d2:	4622      	mov	r2, r4
 800b8d4:	4629      	mov	r1, r5
 800b8d6:	bf28      	it	cs
 800b8d8:	4632      	movcs	r2, r6
 800b8da:	f7ff fbc3 	bl	800b064 <memcpy>
 800b8de:	4629      	mov	r1, r5
 800b8e0:	4638      	mov	r0, r7
 800b8e2:	f7ff fbcd 	bl	800b080 <_free_r>
 800b8e6:	e7f1      	b.n	800b8cc <_realloc_r+0x40>

0800b8e8 <_malloc_usable_size_r>:
 800b8e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8ec:	1f18      	subs	r0, r3, #4
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	bfbc      	itt	lt
 800b8f2:	580b      	ldrlt	r3, [r1, r0]
 800b8f4:	18c0      	addlt	r0, r0, r3
 800b8f6:	4770      	bx	lr

0800b8f8 <_init>:
 800b8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8fa:	bf00      	nop
 800b8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8fe:	bc08      	pop	{r3}
 800b900:	469e      	mov	lr, r3
 800b902:	4770      	bx	lr

0800b904 <_fini>:
 800b904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b906:	bf00      	nop
 800b908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b90a:	bc08      	pop	{r3}
 800b90c:	469e      	mov	lr, r3
 800b90e:	4770      	bx	lr
