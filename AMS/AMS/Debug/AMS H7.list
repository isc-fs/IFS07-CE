
AMS H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b198  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  0800b468  0800b468  0000c468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b6b0  0800b6b0  0000c6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800b6b8  0800b6b8  0000c6b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b6c0  0800b6c0  0000c6c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  24000000  0800b6c4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000ddc  24000068  0800b72c  0000d068  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000e44  0800b72c  0000de44  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021801  00000000  00000000  0000d096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000034e3  00000000  00000000  0002e897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001380  00000000  00000000  00031d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f0b  00000000  00000000  00033100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a285  00000000  00000000  0003400b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a6da  00000000  00000000  0006e290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00169c4b  00000000  00000000  0008896a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f25b5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005928  00000000  00000000  001f25f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000042  00000000  00000000  001f7f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000068 	.word	0x24000068
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b450 	.word	0x0800b450

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400006c 	.word	0x2400006c
 800030c:	0800b450 	.word	0x0800b450

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <_ZN7BMS_MODC1Emiiihjii>:
/*********************************************************************************************************
 ** Function name:           BMS_MOD
 ** Descriptions:            Initialization function of teh class
 *********************************************************************************************************/

BMS_MOD::BMS_MOD(uint32_t _ID, int _MAXV, int _MINV, int _MAXT,
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	603b      	str	r3, [r7, #0]
		uint8_t _NUMCELLS, unsigned int _SHUNT, int _LAG_V, int _LAG_T) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800072c:	61da      	str	r2, [r3, #28]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2232      	movs	r2, #50	@ 0x32
 8000732:	621a      	str	r2, [r3, #32]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800073a:	625a      	str	r2, [r3, #36]	@ 0x24
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000742:	629a      	str	r2, [r3, #40]	@ 0x28
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800074a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000752:	631a      	str	r2, [r3, #48]	@ 0x30
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	69da      	ldr	r2, [r3, #28]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	635a      	str	r2, [r3, #52]	@ 0x34
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	2200      	movs	r2, #0
 8000760:	639a      	str	r2, [r3, #56]	@ 0x38
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	63da      	str	r2, [r3, #60]	@ 0x3c
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	641a      	str	r2, [r3, #64]	@ 0x40
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	2200      	movs	r2, #0
 8000776:	645a      	str	r2, [r3, #68]	@ 0x44
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	649a      	str	r2, [r3, #72]	@ 0x48
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2200      	movs	r2, #0
 8000784:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2200      	movs	r2, #0
 800078c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2200      	movs	r2, #0
 8000794:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2200      	movs	r2, #0
 800079c:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	2213      	movs	r2, #19
 80007a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	2203      	movs	r2, #3
 80007ac:	655a      	str	r2, [r3, #84]	@ 0x54
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	3358      	adds	r3, #88	@ 0x58
 80007b2:	2230      	movs	r2, #48	@ 0x30
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f00a f9cc 	bl	800ab54 <memset>
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2200      	movs	r2, #0
 80007c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	2200      	movs	r2, #0
 80007c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	2200      	movs	r2, #0
 80007d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f241 0268 	movw	r2, #4200	@ 0x1068
 80007da:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	2200      	movs	r2, #0
 80007e2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	2200      	movs	r2, #0
 80007ea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	2200      	movs	r2, #0
 80007f2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	33a4      	adds	r3, #164	@ 0xa4
 80007fa:	224c      	movs	r2, #76	@ 0x4c
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f00a f9a8 	bl	800ab54 <memset>
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	33f0      	adds	r3, #240	@ 0xf0
 8000808:	2298      	movs	r2, #152	@ 0x98
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f00a f9a1 	bl	800ab54 <memset>
	CANID = _ID;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	68ba      	ldr	r2, [r7, #8]
 8000816:	601a      	str	r2, [r3, #0]
	LIMIT_MAX_V = _MAXV;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	60da      	str	r2, [r3, #12]
	LIMIT_MIN_V = _MINV;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	683a      	ldr	r2, [r7, #0]
 8000822:	611a      	str	r2, [r3, #16]
	LIMIT_MAX_T = _MAXT;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	69ba      	ldr	r2, [r7, #24]
 8000828:	615a      	str	r2, [r3, #20]
	NUM_CELLS = _NUMCELLS;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	7f3a      	ldrb	r2, [r7, #28]
 800082e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	time_lim_plotted_volts += _LAG_V;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000838:	441a      	add	r2, r3
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	635a      	str	r2, [r3, #52]	@ 0x34
	time_lim_plotted_temps += _LAG_T;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000844:	441a      	add	r2, r3
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	641a      	str	r2, [r3, #64]	@ 0x40

	time_lim_sent_volts += _LAG_V;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800084e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000850:	441a      	add	r2, r3
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	639a      	str	r2, [r3, #56]	@ 0x38
	time_lim_sent_temps += _LAG_T;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800085a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800085c:	441a      	add	r2, r3
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	645a      	str	r2, [r3, #68]	@ 0x44

	time_lim_received_volts += _LAG_V;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000868:	441a      	add	r2, r3
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	63da      	str	r2, [r3, #60]	@ 0x3c
	time_lim_received_temps += _LAG_T;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000874:	441a      	add	r2, r3
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	649a      	str	r2, [r3, #72]	@ 0x48

}
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	4618      	mov	r0, r3
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <_ZN7BMS_MOD5parseEmPhm>:

/*********************************************************************************************************
 ** Function name:           parse
 ** Descriptions:            Function for parsing the received data via CAN protocol
 *********************************************************************************************************/
bool BMS_MOD::parse(uint32_t id, uint8_t *buf, uint32_t t) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	@ 0x28
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
 8000890:	603b      	str	r3, [r7, #0]
	if (id > CANID && id < CANID + 30) {
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	429a      	cmp	r2, r3
 800089a:	f240 813a 	bls.w	8000b12 <_ZN7BMS_MOD5parseEmPhm+0x28e>
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	331e      	adds	r3, #30
 80008a4:	68ba      	ldr	r2, [r7, #8]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	f080 8133 	bcs.w	8000b12 <_ZN7BMS_MOD5parseEmPhm+0x28e>
		int m = id % CANID;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80008b6:	fb01 f202 	mul.w	r2, r1, r2
 80008ba:	1a9b      	subs	r3, r3, r2
 80008bc:	617b      	str	r3, [r7, #20]
		int pos = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
		if (m >= 1 && m <= 5) {
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	f340 80a8 	ble.w	8000a1a <_ZN7BMS_MOD5parseEmPhm+0x196>
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	2b05      	cmp	r3, #5
 80008ce:	f300 80a4 	bgt.w	8000a1a <_ZN7BMS_MOD5parseEmPhm+0x196>
			time_lim_received_volts = t + TIME_LIM_RECV_VOLTS;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	441a      	add	r2, r3
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	63da      	str	r2, [r3, #60]	@ 0x3c


			for (int i = 0; i < 4; i++) {
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80008e2:	e058      	b.n	8000996 <_ZN7BMS_MOD5parseEmPhm+0x112>
				pos = (m - 1) * 4 + i;
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008ec:	4413      	add	r3, r2
 80008ee:	613b      	str	r3, [r7, #16]
				if (pos >= 19)
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	2b12      	cmp	r3, #18
 80008f4:	dc53      	bgt.n	800099e <_ZN7BMS_MOD5parseEmPhm+0x11a>
					break;

				cellVoltagemV[pos] = (buf[2 * i] << 8) | buf[2 * i + 1];
 80008f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	461a      	mov	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4413      	add	r3, r2
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	021b      	lsls	r3, r3, #8
 8000904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000906:	0052      	lsls	r2, r2, #1
 8000908:	3201      	adds	r2, #1
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	440a      	add	r2, r1
 800090e:	7812      	ldrb	r2, [r2, #0]
 8000910:	431a      	orrs	r2, r3
 8000912:	68f9      	ldr	r1, [r7, #12]
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	3328      	adds	r3, #40	@ 0x28
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	440b      	add	r3, r1
 800091c:	605a      	str	r2, [r3, #4]

				if ((cellVoltagemV[pos] > LIMIT_MAX_V
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	3328      	adds	r3, #40	@ 0x28
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	4413      	add	r3, r2
 8000928:	685a      	ldr	r2, [r3, #4]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	68db      	ldr	r3, [r3, #12]
 800092e:	429a      	cmp	r2, r3
 8000930:	dc09      	bgt.n	8000946 <_ZN7BMS_MOD5parseEmPhm+0xc2>
						|| cellVoltagemV[pos] < LIMIT_MIN_V)
 8000932:	68fa      	ldr	r2, [r7, #12]
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	3328      	adds	r3, #40	@ 0x28
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	4413      	add	r3, r2
 800093c:	685a      	ldr	r2, [r3, #4]
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	691b      	ldr	r3, [r3, #16]
 8000942:	429a      	cmp	r2, r3
 8000944:	da1e      	bge.n	8000984 <_ZN7BMS_MOD5parseEmPhm+0x100>
						&& pos < NUM_CELLS) {
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800094c:	461a      	mov	r2, r3
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	4293      	cmp	r3, r2
 8000952:	da17      	bge.n	8000984 <_ZN7BMS_MOD5parseEmPhm+0x100>
					flag_error_volt[pos]++;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	3216      	adds	r2, #22
 800095a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800095e:	1c59      	adds	r1, r3, #1
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	3216      	adds	r2, #22
 8000966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					if (flag_error_volt[pos] >= max_flag)
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	3216      	adds	r2, #22
 8000970:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000978:	429a      	cmp	r2, r3
 800097a:	db09      	blt.n	8000990 <_ZN7BMS_MOD5parseEmPhm+0x10c>
						error_volt = BMS_ERROR_VOLTS;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	2202      	movs	r2, #2
 8000980:	605a      	str	r2, [r3, #4]
					if (flag_error_volt[pos] >= max_flag)
 8000982:	e005      	b.n	8000990 <_ZN7BMS_MOD5parseEmPhm+0x10c>
				} else {
					flag_error_volt[pos] = 0;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	3216      	adds	r2, #22
 800098a:	2100      	movs	r1, #0
 800098c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (int i = 0; i < 4; i++) {
 8000990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000992:	3301      	adds	r3, #1
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
 8000996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000998:	2b03      	cmp	r3, #3
 800099a:	dda3      	ble.n	80008e4 <_ZN7BMS_MOD5parseEmPhm+0x60>
 800099c:	e000      	b.n	80009a0 <_ZN7BMS_MOD5parseEmPhm+0x11c>
					break;
 800099e:	bf00      	nop
				}
			}

			MAX_V = cellVoltagemV[0];
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	619a      	str	r2, [r3, #24]
			MIN_V = cellVoltagemV[0];
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
			for (int i = 1; i < 19; i++) {
 80009b6:	2301      	movs	r3, #1
 80009b8:	623b      	str	r3, [r7, #32]
 80009ba:	e029      	b.n	8000a10 <_ZN7BMS_MOD5parseEmPhm+0x18c>
				if (cellVoltagemV[i] > MAX_V)
 80009bc:	68fa      	ldr	r2, [r7, #12]
 80009be:	6a3b      	ldr	r3, [r7, #32]
 80009c0:	3328      	adds	r3, #40	@ 0x28
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	4413      	add	r3, r2
 80009c6:	685a      	ldr	r2, [r3, #4]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	dd08      	ble.n	80009e2 <_ZN7BMS_MOD5parseEmPhm+0x15e>
					MAX_V = cellVoltagemV[i];
 80009d0:	68fa      	ldr	r2, [r7, #12]
 80009d2:	6a3b      	ldr	r3, [r7, #32]
 80009d4:	3328      	adds	r3, #40	@ 0x28
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	4413      	add	r3, r2
 80009da:	685a      	ldr	r2, [r3, #4]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	619a      	str	r2, [r3, #24]
 80009e0:	e013      	b.n	8000a0a <_ZN7BMS_MOD5parseEmPhm+0x186>
				else if (cellVoltagemV[i] < MIN_V)
 80009e2:	68fa      	ldr	r2, [r7, #12]
 80009e4:	6a3b      	ldr	r3, [r7, #32]
 80009e6:	3328      	adds	r3, #40	@ 0x28
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	4413      	add	r3, r2
 80009ec:	685a      	ldr	r2, [r3, #4]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009f4:	429a      	cmp	r2, r3
 80009f6:	da08      	bge.n	8000a0a <_ZN7BMS_MOD5parseEmPhm+0x186>
					MIN_V = cellVoltagemV[i];
 80009f8:	68fa      	ldr	r2, [r7, #12]
 80009fa:	6a3b      	ldr	r3, [r7, #32]
 80009fc:	3328      	adds	r3, #40	@ 0x28
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	4413      	add	r3, r2
 8000a02:	685a      	ldr	r2, [r3, #4]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
			for (int i = 1; i < 19; i++) {
 8000a0a:	6a3b      	ldr	r3, [r7, #32]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	623b      	str	r3, [r7, #32]
 8000a10:	6a3b      	ldr	r3, [r7, #32]
 8000a12:	2b12      	cmp	r3, #18
 8000a14:	ddd2      	ble.n	80009bc <_ZN7BMS_MOD5parseEmPhm+0x138>
			}

			return true;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e07c      	b.n	8000b14 <_ZN7BMS_MOD5parseEmPhm+0x290>

		} else if (m >= 21 && m <= 25) {
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	2b14      	cmp	r3, #20
 8000a1e:	dd78      	ble.n	8000b12 <_ZN7BMS_MOD5parseEmPhm+0x28e>
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	2b19      	cmp	r3, #25
 8000a24:	dc75      	bgt.n	8000b12 <_ZN7BMS_MOD5parseEmPhm+0x28e>
			// m = 21 → packet 0, m = 25 → packet 4
			time_lim_received_temps = t + TIME_LIM_RECV_TEMPS;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	441a      	add	r2, r3
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	649a      	str	r2, [r3, #72]	@ 0x48
			if (flag_charger == 1)
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d104      	bne.n	8000a46 <_ZN7BMS_MOD5parseEmPhm+0x1c2>
				module_send_message_CAN1(id, buf, 8);
 8000a3c:	2208      	movs	r2, #8
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	68b8      	ldr	r0, [r7, #8]
 8000a42:	f000 ff45 	bl	80018d0 <module_send_message_CAN1>

			for (int i = 0; i < 8; i++) {
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
 8000a4a:	e021      	b.n	8000a90 <_ZN7BMS_MOD5parseEmPhm+0x20c>
				pos = (m - 21) * 8 + i;
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	3b15      	subs	r3, #21
 8000a50:	00db      	lsls	r3, r3, #3
 8000a52:	69fa      	ldr	r2, [r7, #28]
 8000a54:	4413      	add	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
				if (pos >= 38)
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	2b25      	cmp	r3, #37	@ 0x25
 8000a5c:	dc1c      	bgt.n	8000a98 <_ZN7BMS_MOD5parseEmPhm+0x214>
					break;

				cellTemperature[pos] = buf[i];
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	4413      	add	r3, r2
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	4619      	mov	r1, r3
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	323c      	adds	r2, #60	@ 0x3c
 8000a6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				if (cellTemperature[pos] > LIMIT_MAX_T)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	323c      	adds	r2, #60	@ 0x3c
 8000a78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	695b      	ldr	r3, [r3, #20]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	dd02      	ble.n	8000a8a <_ZN7BMS_MOD5parseEmPhm+0x206>
					error_temp = BMS_ERROR_TEMP;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2203      	movs	r2, #3
 8000a88:	609a      	str	r2, [r3, #8]
			for (int i = 0; i < 8; i++) {
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	61fb      	str	r3, [r7, #28]
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	2b07      	cmp	r3, #7
 8000a94:	ddda      	ble.n	8000a4c <_ZN7BMS_MOD5parseEmPhm+0x1c8>
 8000a96:	e000      	b.n	8000a9a <_ZN7BMS_MOD5parseEmPhm+0x216>
					break;
 8000a98:	bf00      	nop
			}

		      MAX_T = cellTemperature[0];
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		      MIN_T = cellTemperature[0];
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
		      for (int i = 0; i < 38; i++)
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61bb      	str	r3, [r7, #24]
 8000ab6:	e027      	b.n	8000b08 <_ZN7BMS_MOD5parseEmPhm+0x284>
		      {
		        if (cellTemperature[i] > MAX_T)
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	323c      	adds	r2, #60	@ 0x3c
 8000abe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	dd08      	ble.n	8000ade <_ZN7BMS_MOD5parseEmPhm+0x25a>
		          MAX_T = cellTemperature[i];
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	69ba      	ldr	r2, [r7, #24]
 8000ad0:	323c      	adds	r2, #60	@ 0x3c
 8000ad2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8000adc:	e011      	b.n	8000b02 <_ZN7BMS_MOD5parseEmPhm+0x27e>
		        else if (cellTemperature[i] < MIN_T)
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	69ba      	ldr	r2, [r7, #24]
 8000ae2:	323c      	adds	r2, #60	@ 0x3c
 8000ae4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000aee:	429a      	cmp	r2, r3
 8000af0:	da07      	bge.n	8000b02 <_ZN7BMS_MOD5parseEmPhm+0x27e>
		          MIN_T = cellTemperature[i];
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	323c      	adds	r2, #60	@ 0x3c
 8000af8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
		      for (int i = 0; i < 38; i++)
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	3301      	adds	r3, #1
 8000b06:	61bb      	str	r3, [r7, #24]
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	2b25      	cmp	r3, #37	@ 0x25
 8000b0c:	ddd4      	ble.n	8000ab8 <_ZN7BMS_MOD5parseEmPhm+0x234>
		      }


			return true;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e000      	b.n	8000b14 <_ZN7BMS_MOD5parseEmPhm+0x290>
		}

	}

	return false;
 8000b12:	2300      	movs	r3, #0
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3728      	adds	r7, #40	@ 0x28
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <_ZN7BMS_MOD13query_voltageEmPc>:

/*********************************************************************************************************
 ** Function name:           query_voltage
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/
int BMS_MOD::query_voltage(uint32_t time, char *buffer) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
	// Shunt voltage in milivolts

	message_balancing[1] = BALANCING_V & 0xFF; // Coment this two lines for disabling the balancing
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
	message_balancing[0] = (BALANCING_V >> 8) & 0xFF; // Coment this two lines for disabling the balancing
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b3c:	121b      	asrs	r3, r3, #8
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

	if (time > time_lim_sent_volts) {
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d91d      	bls.n	8000b8c <_ZN7BMS_MOD13query_voltageEmPc+0x70>
		time_lim_sent_volts += TIME_LIM_SEND_VOLTS;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	6a1b      	ldr	r3, [r3, #32]
 8000b58:	441a      	add	r2, r3
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	639a      	str	r2, [r3, #56]	@ 0x38
		if (CANID != 0x00) { //It keeps sending 0x00 and dont know where
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d012      	beq.n	8000b8c <_ZN7BMS_MOD13query_voltageEmPc+0x70>
			if (module_send_message_CAN2(CANID, message_balancing, 2)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	6818      	ldr	r0, [r3, #0]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	334c      	adds	r3, #76	@ 0x4c
 8000b6e:	2202      	movs	r2, #2
 8000b70:	4619      	mov	r1, r3
 8000b72:	f000 fecf 	bl	8001914 <module_send_message_CAN2>
 8000b76:	4603      	mov	r3, r0
					!= HAL_OK) {
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	bf14      	ite	ne
 8000b7c:	2301      	movne	r3, #1
 8000b7e:	2300      	moveq	r3, #0
 8000b80:	b2db      	uxtb	r3, r3
			if (module_send_message_CAN2(CANID, message_balancing, 2)
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d002      	beq.n	8000b8c <_ZN7BMS_MOD13query_voltageEmPc+0x70>
				error_volt = BMS_ERROR_COMMUNICATION;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	2201      	movs	r2, #1
 8000b8a:	605a      	str	r2, [r3, #4]
		}

	}


	if (time_lim_sent_volts > 0 &&
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d00f      	beq.n	8000bb4 <_ZN7BMS_MOD13query_voltageEmPc+0x98>
	    time > time_lim_received_volts &&
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
	if (time_lim_sent_volts > 0 &&
 8000b98:	68ba      	ldr	r2, [r7, #8]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d90a      	bls.n	8000bb4 <_ZN7BMS_MOD13query_voltageEmPc+0x98>
	    time - time_lim_received_volts > TIME_LIM_RECV_VOLTS) {
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	1ad2      	subs	r2, r2, r3
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	    time > time_lim_received_volts &&
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d902      	bls.n	8000bb4 <_ZN7BMS_MOD13query_voltageEmPc+0x98>
	    error_volt = BMS_ERROR_COMMUNICATION;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	605a      	str	r2, [r3, #4]
	}

	if (TIME_LIM_PLOT_VOLTS > 0 && time > time_lim_plotted_volts) {
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	69db      	ldr	r3, [r3, #28]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d00b      	beq.n	8000bd4 <_ZN7BMS_MOD13query_voltageEmPc+0xb8>
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bc0:	68ba      	ldr	r2, [r7, #8]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d906      	bls.n	8000bd4 <_ZN7BMS_MOD13query_voltageEmPc+0xb8>
		time_lim_plotted_volts += TIME_LIM_PLOT_VOLTS;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	441a      	add	r2, r3
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	635a      	str	r2, [r3, #52]	@ 0x34
		//voltage_info(buffer);
	}

	for (int i = 0; i < NUM_CELLS; i++) {
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	e00f      	b.n	8000bfa <_ZN7BMS_MOD13query_voltageEmPc+0xde>
		voltage_acum += cellVoltagemV[i];
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000be0:	68f9      	ldr	r1, [r7, #12]
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3328      	adds	r3, #40	@ 0x28
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	440b      	add	r3, r1
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	441a      	add	r2, r3
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	for (int i = 0; i < NUM_CELLS; i++) {
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000c00:	461a      	mov	r2, r3
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	4293      	cmp	r3, r2
 8000c06:	dbe8      	blt.n	8000bda <_ZN7BMS_MOD13query_voltageEmPc+0xbe>
	}
	return error_volt;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	685b      	ldr	r3, [r3, #4]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <_ZN7BMS_MOD17query_temperatureEmPc>:
/*********************************************************************************************************
 ** Function name:           query_temperature
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/

int BMS_MOD::query_temperature(uint32_t time, char *buffer) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
// Function for performing a correct behavior
	if (time > time_lim_sent_temps) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE TEMPERATURES
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c24:	68ba      	ldr	r2, [r7, #8]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d91b      	bls.n	8000c62 <_ZN7BMS_MOD17query_temperatureEmPc+0x4e>
		time_lim_sent_temps += TIME_LIM_SEND_TEMPS;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c32:	441a      	add	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	645a      	str	r2, [r3, #68]	@ 0x44

		if (module_send_message_CAN2(CANID + 20, message_temperatures, 2)
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f103 0014 	add.w	r0, r3, #20
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	334e      	adds	r3, #78	@ 0x4e
 8000c44:	2202      	movs	r2, #2
 8000c46:	4619      	mov	r1, r3
 8000c48:	f000 fe64 	bl	8001914 <module_send_message_CAN2>
 8000c4c:	4603      	mov	r3, r0
				!= HAL_OK) {
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	bf14      	ite	ne
 8000c52:	2301      	movne	r3, #1
 8000c54:	2300      	moveq	r3, #0
 8000c56:	b2db      	uxtb	r3, r3
		if (module_send_message_CAN2(CANID + 20, message_temperatures, 2)
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d002      	beq.n	8000c62 <_ZN7BMS_MOD17query_temperatureEmPc+0x4e>
			error_temp = BMS_ERROR_TEMP; // If the message is not sended then, error
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	2203      	movs	r2, #3
 8000c60:	609a      	str	r2, [r3, #8]
		}
	}

	if (time_lim_sent_temps > 0 &&
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d00f      	beq.n	8000c8a <_ZN7BMS_MOD17query_temperatureEmPc+0x76>
	    time > time_lim_received_temps &&
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
	if (time_lim_sent_temps > 0 &&
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d90a      	bls.n	8000c8a <_ZN7BMS_MOD17query_temperatureEmPc+0x76>
	    time - time_lim_received_temps > TIME_LIM_RECV_TEMPS) {
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c78:	68ba      	ldr	r2, [r7, #8]
 8000c7a:	1ad2      	subs	r2, r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
	    time > time_lim_received_temps &&
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d902      	bls.n	8000c8a <_ZN7BMS_MOD17query_temperatureEmPc+0x76>
	    error_temp = BMS_ERROR_COMMUNICATION;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2201      	movs	r2, #1
 8000c88:	609a      	str	r2, [r3, #8]
	}

	if (TIME_LIM_PLOT_TEMPS > 0 && time > time_lim_plotted_temps) {
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d00b      	beq.n	8000caa <_ZN7BMS_MOD17query_temperatureEmPc+0x96>
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d906      	bls.n	8000caa <_ZN7BMS_MOD17query_temperatureEmPc+0x96>
		time_lim_plotted_temps += TIME_LIM_PLOT_TEMPS;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ca4:	441a      	add	r2, r3
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	641a      	str	r2, [r3, #64]	@ 0x40
		//temperature_info(buffer);
	}



	return error_temp;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	689b      	ldr	r3, [r3, #8]

}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <_ZN7CPU_MODC1Emmi>:

// ********************************************************************************************************
// **Function name:           CPU_MOD
// **Descriptions:            Initialization function of teh class
// ********************************************************************************************************
CPU_MOD::CPU_MOD(uint32_t _ID_send, uint32_t _ID_recv, int _LAG) { /////////////////////////Habia un _LAG=0
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2202      	movs	r2, #2
 8000cdc:	731a      	strb	r2, [r3, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2202      	movs	r2, #2
 8000ce2:	611a      	str	r2, [r3, #16]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000cea:	615a      	str	r2, [r3, #20]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	2264      	movs	r2, #100	@ 0x64
 8000cf0:	619a      	str	r2, [r3, #24]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	4a18      	ldr	r2, [pc, #96]	@ (8000d58 <_ZN7CPU_MODC1Emmi+0xa0>)
 8000cf6:	61da      	str	r2, [r3, #28]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	695a      	ldr	r2, [r3, #20]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	621a      	str	r2, [r3, #32]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	@ 0x24
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	69da      	ldr	r2, [r3, #28]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	2200      	movs	r2, #0
 8000d12:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2200      	movs	r2, #0
 8000d18:	631a      	str	r2, [r3, #48]	@ 0x30
    CANID_send = _ID_send;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	68ba      	ldr	r2, [r7, #8]
 8000d1e:	601a      	str	r2, [r3, #0]
    CANID_recv = _ID_recv;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	605a      	str	r2, [r3, #4]

    time_lim_plotted += _LAG;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	6a1a      	ldr	r2, [r3, #32]
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	441a      	add	r2, r3
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	621a      	str	r2, [r3, #32]
    time_lim_sended += _LAG;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	441a      	add	r2, r3
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	625a      	str	r2, [r3, #36]	@ 0x24
    time_lim_received += _LAG;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	441a      	add	r2, r3
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	000f4240 	.word	0x000f4240

08000d5c <_ZN7CPU_MOD5parseEmPhm>:

// ********************************************************************************************************
// **Function name:           parse
// **Descriptions:            Function for parsing the received data via CAN protocl
// ********************************************************************************************************
bool CPU_MOD::parse(uint32_t id, uint8_t* buf, uint32_t t) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	603b      	str	r3, [r7, #0]
    if (id == 0x100) {
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d70:	d131      	bne.n	8000dd6 <_ZN7CPU_MOD5parseEmPhm+0x7a>
        error = CPU_OK;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
        time_lim_received = t + TIME_LIM_RECV;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	69da      	ldr	r2, [r3, #28]
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	441a      	add	r2, r3
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	629a      	str	r2, [r3, #40]	@ 0x28
        DC_BUS = (int)((buf[1]<<8)|buf[0]); // This direction sends the voltage in DC_BUS
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3301      	adds	r3, #1
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	7812      	ldrb	r2, [r2, #0]
 8000d90:	431a      	orrs	r2, r3
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	631a      	str	r2, [r3, #48]	@ 0x30
        if (DC_BUS > 280) { //(DC_BUS>0.9*voltage_acum)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8000d9e:	dd18      	ble.n	8000dd2 <_ZN7CPU_MOD5parseEmPhm+0x76>
            error = CPU_BUS_LINE_OK;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2202      	movs	r2, #2
 8000da4:	609a      	str	r2, [r3, #8]
            if (module_send_message_CAN1(CANID_send, currentState, 1) != HAL_OK){
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	6818      	ldr	r0, [r3, #0]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	330c      	adds	r3, #12
 8000dae:	2201      	movs	r2, #1
 8000db0:	4619      	mov	r1, r3
 8000db2:	f000 fd8d 	bl	80018d0 <module_send_message_CAN1>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	bf14      	ite	ne
 8000dbc:	2301      	movne	r3, #1
 8000dbe:	2300      	moveq	r3, #0
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d005      	beq.n	8000dd2 <_ZN7CPU_MOD5parseEmPhm+0x76>
                error = CPU_ERROR_COMMUNICATION;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	609a      	str	r2, [r3, #8]
                print((char*)"error message");
 8000dcc:	4804      	ldr	r0, [pc, #16]	@ (8000de0 <_ZN7CPU_MOD5parseEmPhm+0x84>)
 8000dce:	f000 fdc1 	bl	8001954 <print>
            }

        }
        return true;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e000      	b.n	8000dd8 <_ZN7CPU_MOD5parseEmPhm+0x7c>
    }
    return false;
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	0800b550 	.word	0x0800b550

08000de4 <_ZN7CPU_MOD11updateStateEi>:
        info(buffer);
    }
    return error;
}

void CPU_MOD::updateState(int s) {
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
    currentState[0] = s & 0xFF;
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	731a      	strb	r2, [r3, #12]
    current_state = s;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	611a      	str	r2, [r3, #16]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <_ZN11Current_MODC1Emi>:

// ********************************************************************************************************
// **Function name:           Current_MOD
// **Descriptions:            Initialization function of current class
// **********************************************************************************************************
Current_MOD::Current_MOD(uint32_t ID, int _C_MAX)
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2200      	movs	r2, #0
 8000e24:	721a      	strb	r2, [r3, #8]
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	725a      	strb	r2, [r3, #9]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f04f 0200 	mov.w	r2, #0
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f04f 0200 	mov.w	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	615a      	str	r2, [r3, #20]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f04f 0200 	mov.w	r2, #0
 8000e48:	619a      	str	r2, [r3, #24]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	621a      	str	r2, [r3, #32]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000e56:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	22fa      	movs	r2, #250	@ 0xfa
 8000e5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	2232      	movs	r2, #50	@ 0x32
 8000e62:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2232      	movs	r2, #50	@ 0x32
 8000e68:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2200      	movs	r2, #0
 8000e74:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	641a      	str	r2, [r3, #64]	@ 0x40
{
    CANID = ID;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	68ba      	ldr	r2, [r7, #8]
 8000e86:	605a      	str	r2, [r3, #4]
    C_MAX = _C_MAX;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	601a      	str	r2, [r3, #0]
    flag_error_current = 1;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	2201      	movs	r2, #1
 8000e92:	621a      	str	r2, [r3, #32]
}
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4618      	mov	r0, r3
 8000e98:	3714      	adds	r7, #20
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
	...

08000ea4 <_ZN11Current_MOD5queryEiPc>:
// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function that transforms the voltage measured by the sensor to its equivalent current
// **********************************************************************************************************
int Current_MOD::query(int time, char* buffer)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
    error = Current_OK;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	635a      	str	r2, [r3, #52]	@ 0x34

    VoltagemV = readAnalogValue();
 8000eb6:	f000 fd89 	bl	80019cc <readAnalogValue>
 8000eba:	eef0 7a40 	vmov.f32	s15, s0
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	edc3 7a04 	vstr	s15, [r3, #16]

    //printValue(VoltagemV);

    if(VoltagemV < 400){
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	edd3 7a04 	vldr	s15, [r3, #16]
 8000eca:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000f0c <_ZN11Current_MOD5queryEiPc+0x68>
 8000ece:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed6:	d509      	bpl.n	8000eec <_ZN11Current_MOD5queryEiPc+0x48>
    	flag_error_current = 1;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2201      	movs	r2, #1
 8000edc:	621a      	str	r2, [r3, #32]
    	flag_current = 1;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	641a      	str	r2, [r3, #64]	@ 0x40
    	error = 1;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000eea:	e008      	b.n	8000efe <_ZN11Current_MOD5queryEiPc+0x5a>
    }
    else{
    	flag_error_current = 0;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	621a      	str	r2, [r3, #32]
    	flag_current = 0;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	641a      	str	r2, [r3, #64]	@ 0x40
    	error = Current_OK;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2200      	movs	r2, #0
 8000efc:	635a      	str	r2, [r3, #52]	@ 0x34
        time_lim_plotted += TIME_LIM_PLOT;

    }
*/
    //info(buffer);
    return error;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	43c80000 	.word	0x43c80000

08000f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f16:	f001 fb1f 	bl	8002558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1a:	f000 f89d 	bl	8001058 <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f1e:	f000 f917 	bl	8001150 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f22:	f000 fbc1 	bl	80016a8 <_ZL12MX_GPIO_Initv>
  MX_FDCAN2_Init();
 8000f26:	f000 fad5 	bl	80014d4 <_ZL14MX_FDCAN2_Initv>
  MX_FDCAN1_Init();
 8000f2a:	f000 fa49 	bl	80013c0 <_ZL14MX_FDCAN1_Initv>
  MX_USART2_UART_Init();
 8000f2e:	f000 fb5b 	bl	80015e8 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 8000f32:	f000 f941 	bl	80011b8 <_ZL12MX_ADC1_Initv>
  MX_ADC3_Init();
 8000f36:	f000 f9c9 	bl	80012cc <_ZL12MX_ADC3_Initv>
  /* USER CODE BEGIN 2 */

  if (HAL_FDCAN_Start(&hfdcan1) == HAL_OK){
 8000f3a:	483d      	ldr	r0, [pc, #244]	@ (8001030 <main+0x120>)
 8000f3c:	f003 fea0 	bl	8004c80 <HAL_FDCAN_Start>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	bf0c      	ite	eq
 8000f46:	2301      	moveq	r3, #1
 8000f48:	2300      	movne	r3, #0
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d002      	beq.n	8000f56 <main+0x46>
	  print((char*)"CAN_ACU iniciado");
 8000f50:	4838      	ldr	r0, [pc, #224]	@ (8001034 <main+0x124>)
 8000f52:	f000 fcff 	bl	8001954 <print>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) == HAL_OK)
 8000f56:	2200      	movs	r2, #0
 8000f58:	2101      	movs	r1, #1
 8000f5a:	4835      	ldr	r0, [pc, #212]	@ (8001030 <main+0x120>)
 8000f5c:	f004 f882 	bl	8005064 <HAL_FDCAN_ActivateNotification>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	bf0c      	ite	eq
 8000f66:	2301      	moveq	r3, #1
 8000f68:	2300      	movne	r3, #0
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d002      	beq.n	8000f76 <main+0x66>
  {
	  print((char*)"CAN_ACU notification");
 8000f70:	4831      	ldr	r0, [pc, #196]	@ (8001038 <main+0x128>)
 8000f72:	f000 fcef 	bl	8001954 <print>
  }

  if (HAL_FDCAN_Start(&hfdcan2) == HAL_OK){
 8000f76:	4831      	ldr	r0, [pc, #196]	@ (800103c <main+0x12c>)
 8000f78:	f003 fe82 	bl	8004c80 <HAL_FDCAN_Start>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	bf0c      	ite	eq
 8000f82:	2301      	moveq	r3, #1
 8000f84:	2300      	movne	r3, #0
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d002      	beq.n	8000f92 <main+0x82>
	  print((char*)"CAN_BMS iniciado");
 8000f8c:	482c      	ldr	r0, [pc, #176]	@ (8001040 <main+0x130>)
 8000f8e:	f000 fce1 	bl	8001954 <print>
  }

  if(HAL_ADC_Start(&hadc3) == HAL_OK){
 8000f92:	482c      	ldr	r0, [pc, #176]	@ (8001044 <main+0x134>)
 8000f94:	f002 f8a0 	bl	80030d8 <HAL_ADC_Start>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	bf0c      	ite	eq
 8000f9e:	2301      	moveq	r3, #1
 8000fa0:	2300      	movne	r3, #0
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d002      	beq.n	8000fae <main+0x9e>
	  print((char*)"ADC iniciado");
 8000fa8:	4827      	ldr	r0, [pc, #156]	@ (8001048 <main+0x138>)
 8000faa:	f000 fcd3 	bl	8001954 <print>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  select_state();
 8000fae:	f000 fd37 	bl	8001a20 <_Z12select_statev>
		  msg_acu.bus = 1;
		  msg_acu.time = HAL_GetTick();
		  parse_state(msg_acu);
	  }*/

	  if (HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader_bms, RxData) == HAL_OK) {
 8000fb2:	4b26      	ldr	r3, [pc, #152]	@ (800104c <main+0x13c>)
 8000fb4:	4a26      	ldr	r2, [pc, #152]	@ (8001050 <main+0x140>)
 8000fb6:	2140      	movs	r1, #64	@ 0x40
 8000fb8:	4820      	ldr	r0, [pc, #128]	@ (800103c <main+0x12c>)
 8000fba:	f003 fee7 	bl	8004d8c <HAL_FDCAN_GetRxMessage>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	bf0c      	ite	eq
 8000fc4:	2301      	moveq	r3, #1
 8000fc6:	2300      	movne	r3, #0
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0ef      	beq.n	8000fae <main+0x9e>

		  msg_bms.id = RxHeader_bms.Identifier;
 8000fce:	4b20      	ldr	r3, [pc, #128]	@ (8001050 <main+0x140>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a20      	ldr	r2, [pc, #128]	@ (8001054 <main+0x144>)
 8000fd4:	6013      	str	r3, [r2, #0]
		  msg_bms.len = RxHeader_bms.DataLength;
 8000fd6:	4b1e      	ldr	r3, [pc, #120]	@ (8001050 <main+0x140>)
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8001054 <main+0x144>)
 8000fde:	711a      	strb	r2, [r3, #4]
		  for (int i = 0; i < 8; i++) {msg_bms.buf[i] = RxData[i];}
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	e00c      	b.n	8001000 <main+0xf0>
 8000fe6:	4a19      	ldr	r2, [pc, #100]	@ (800104c <main+0x13c>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4413      	add	r3, r2
 8000fec:	7819      	ldrb	r1, [r3, #0]
 8000fee:	4a19      	ldr	r2, [pc, #100]	@ (8001054 <main+0x144>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	3305      	adds	r3, #5
 8000ff6:	460a      	mov	r2, r1
 8000ff8:	701a      	strb	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b07      	cmp	r3, #7
 8001004:	ddef      	ble.n	8000fe6 <main+0xd6>
		  msg_bms.bus = 2;
 8001006:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <main+0x144>)
 8001008:	2202      	movs	r2, #2
 800100a:	611a      	str	r2, [r3, #16]
		  msg_bms.time = HAL_GetTick();
 800100c:	f001 fb2a 	bl	8002664 <HAL_GetTick>
 8001010:	4603      	mov	r3, r0
 8001012:	4a10      	ldr	r2, [pc, #64]	@ (8001054 <main+0x144>)
 8001014:	6153      	str	r3, [r2, #20]

		  parse_state(msg_bms);
 8001016:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <main+0x144>)
 8001018:	466c      	mov	r4, sp
 800101a:	f103 0210 	add.w	r2, r3, #16
 800101e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001022:	e884 0003 	stmia.w	r4, {r0, r1}
 8001026:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001028:	f000 feb6 	bl	8001d98 <_Z11parse_state6CANMsg>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800102c:	e7bf      	b.n	8000fae <main+0x9e>
 800102e:	bf00      	nop
 8001030:	24000164 	.word	0x24000164
 8001034:	0800b560 	.word	0x0800b560
 8001038:	0800b574 	.word	0x0800b574
 800103c:	24000204 	.word	0x24000204
 8001040:	0800b58c 	.word	0x0800b58c
 8001044:	240000f4 	.word	0x240000f4
 8001048:	0800b5a0 	.word	0x0800b5a0
 800104c:	240003d0 	.word	0x240003d0
 8001050:	240003a8 	.word	0x240003a8
 8001054:	2400043c 	.word	0x2400043c

08001058 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b09c      	sub	sp, #112	@ 0x70
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001062:	224c      	movs	r2, #76	@ 0x4c
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f009 fd74 	bl	800ab54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	2220      	movs	r2, #32
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f009 fd6e 	bl	800ab54 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001078:	2002      	movs	r0, #2
 800107a:	f004 ff55 	bl	8005f28 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800107e:	2300      	movs	r3, #0
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	4b32      	ldr	r3, [pc, #200]	@ (800114c <_Z18SystemClock_Configv+0xf4>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	4a31      	ldr	r2, [pc, #196]	@ (800114c <_Z18SystemClock_Configv+0xf4>)
 8001088:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800108c:	6193      	str	r3, [r2, #24]
 800108e:	4b2f      	ldr	r3, [pc, #188]	@ (800114c <_Z18SystemClock_Configv+0xf4>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800109a:	bf00      	nop
 800109c:	4b2b      	ldr	r3, [pc, #172]	@ (800114c <_Z18SystemClock_Configv+0xf4>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010a8:	bf14      	ite	ne
 80010aa:	2301      	movne	r3, #1
 80010ac:	2300      	moveq	r3, #0
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1f3      	bne.n	800109c <_Z18SystemClock_Configv+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b4:	2301      	movs	r3, #1
 80010b6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010be:	2302      	movs	r3, #2
 80010c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c2:	2302      	movs	r3, #2
 80010c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80010c6:	2302      	movs	r3, #2
 80010c8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80010ca:	232c      	movs	r3, #44	@ 0x2c
 80010cc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80010ce:	2301      	movs	r3, #1
 80010d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010d2:	2304      	movs	r3, #4
 80010d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010d6:	2302      	movs	r3, #2
 80010d8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010da:	230c      	movs	r3, #12
 80010dc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010de:	2300      	movs	r3, #0
 80010e0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ea:	4618      	mov	r0, r3
 80010ec:	f004 ff56 	bl	8005f9c <HAL_RCC_OscConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	bf14      	ite	ne
 80010f6:	2301      	movne	r3, #1
 80010f8:	2300      	moveq	r3, #0
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8001100:	f000 fc86 	bl	8001a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001104:	233f      	movs	r3, #63	@ 0x3f
 8001106:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001108:	2303      	movs	r3, #3
 800110a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001110:	2308      	movs	r3, #8
 8001112:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001114:	2340      	movs	r3, #64	@ 0x40
 8001116:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001118:	2340      	movs	r3, #64	@ 0x40
 800111a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800111c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001120:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001122:	2340      	movs	r3, #64	@ 0x40
 8001124:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	2103      	movs	r1, #3
 800112a:	4618      	mov	r0, r3
 800112c:	f005 fb10 	bl	8006750 <HAL_RCC_ClockConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	bf14      	ite	ne
 8001136:	2301      	movne	r3, #1
 8001138:	2300      	moveq	r3, #0
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <_Z18SystemClock_Configv+0xec>
  {
    Error_Handler();
 8001140:	f000 fc66 	bl	8001a10 <Error_Handler>
  }
}
 8001144:	bf00      	nop
 8001146:	3770      	adds	r7, #112	@ 0x70
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	58024800 	.word	0x58024800

08001150 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b0ae      	sub	sp, #184	@ 0xb8
 8001154:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001156:	463b      	mov	r3, r7
 8001158:	22b8      	movs	r2, #184	@ 0xb8
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f009 fcf9 	bl	800ab54 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001162:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001166:	f04f 0300 	mov.w	r3, #0
 800116a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800116e:	2302      	movs	r3, #2
 8001170:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8001172:	2310      	movs	r3, #16
 8001174:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001176:	2302      	movs	r3, #2
 8001178:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800117a:	2302      	movs	r3, #2
 800117c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800117e:	2302      	movs	r3, #2
 8001180:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001182:	23c0      	movs	r3, #192	@ 0xc0
 8001184:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001186:	2300      	movs	r3, #0
 8001188:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800118e:	2300      	movs	r3, #0
 8001190:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001194:	463b      	mov	r3, r7
 8001196:	4618      	mov	r0, r3
 8001198:	f005 fe66 	bl	8006e68 <HAL_RCCEx_PeriphCLKConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	bf14      	ite	ne
 80011a2:	2301      	movne	r3, #1
 80011a4:	2300      	moveq	r3, #0
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <_Z24PeriphCommonClock_Configv+0x60>
  {
    Error_Handler();
 80011ac:	f000 fc30 	bl	8001a10 <Error_Handler>
  }
}
 80011b0:	bf00      	nop
 80011b2:	37b8      	adds	r7, #184	@ 0xb8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08c      	sub	sp, #48	@ 0x30
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011ca:	463b      	mov	r3, r7
 80011cc:	2224      	movs	r2, #36	@ 0x24
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f009 fcbf 	bl	800ab54 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011d6:	4b3a      	ldr	r3, [pc, #232]	@ (80012c0 <_ZL12MX_ADC1_Initv+0x108>)
 80011d8:	4a3a      	ldr	r2, [pc, #232]	@ (80012c4 <_ZL12MX_ADC1_Initv+0x10c>)
 80011da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011dc:	4b38      	ldr	r3, [pc, #224]	@ (80012c0 <_ZL12MX_ADC1_Initv+0x108>)
 80011de:	2200      	movs	r2, #0
 80011e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011e2:	4b37      	ldr	r3, [pc, #220]	@ (80012c0 <_ZL12MX_ADC1_Initv+0x108>)
 80011e4:	2208      	movs	r2, #8
 80011e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011e8:	4b35      	ldr	r3, [pc, #212]	@ (80012c0 <_ZL12MX_ADC1_Initv+0x108>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ee:	4b34      	ldr	r3, [pc, #208]	@ (80012c0 <_ZL12MX_ADC1_Initv+0x108>)
 80011f0:	2204      	movs	r2, #4
 80011f2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011f4:	4b32      	ldr	r3, [pc, #200]	@ (80012c0 <_ZL12MX_ADC1_Initv+0x108>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011fa:	4b31      	ldr	r3, [pc, #196]	@ (80012c0 <_ZL12MX_ADC1_Initv+0x108>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001200:	4b2f      	ldr	r3, [pc, #188]	@ (80012c0 <_ZL12MX_ADC1_Initv+0x108>)
 8001202:	2201      	movs	r2, #1
 8001204:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001206:	4b2e      	ldr	r3, [pc, #184]	@ (80012c0 <_ZL12MX_ADC1_Initv+0x108>)
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800120e:	4b2c      	ldr	r3, [pc, #176]	@ (80012c0 <_ZL12MX_ADC1_Initv+0x108>)
 8001210:	2200      	movs	r2, #0
 8001212:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001214:	4b2a      	ldr	r3, [pc, #168]	@ (80012c0 <_ZL12MX_ADC1_Initv+0x108>)
 8001216:	2200      	movs	r2, #0
 8001218:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800121a:	4b29      	ldr	r3, [pc, #164]	@ (80012c0 <_ZL12MX_ADC1_Initv+0x108>)
 800121c:	2200      	movs	r2, #0
 800121e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001220:	4b27      	ldr	r3, [pc, #156]	@ (80012c0 <_ZL12MX_ADC1_Initv+0x108>)
 8001222:	2200      	movs	r2, #0
 8001224:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001226:	4b26      	ldr	r3, [pc, #152]	@ (80012c0 <_ZL12MX_ADC1_Initv+0x108>)
 8001228:	2200      	movs	r2, #0
 800122a:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800122c:	4b24      	ldr	r3, [pc, #144]	@ (80012c0 <_ZL12MX_ADC1_Initv+0x108>)
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8001234:	4b22      	ldr	r3, [pc, #136]	@ (80012c0 <_ZL12MX_ADC1_Initv+0x108>)
 8001236:	2201      	movs	r2, #1
 8001238:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800123a:	4821      	ldr	r0, [pc, #132]	@ (80012c0 <_ZL12MX_ADC1_Initv+0x108>)
 800123c:	f001 fd44 	bl	8002cc8 <HAL_ADC_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	bf14      	ite	ne
 8001246:	2301      	movne	r3, #1
 8001248:	2300      	moveq	r3, #0
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 8001250:	f000 fbde 	bl	8001a10 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001254:	2300      	movs	r3, #0
 8001256:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001258:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800125c:	4619      	mov	r1, r3
 800125e:	4818      	ldr	r0, [pc, #96]	@ (80012c0 <_ZL12MX_ADC1_Initv+0x108>)
 8001260:	f003 f8c8 	bl	80043f4 <HAL_ADCEx_MultiModeConfigChannel>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	bf14      	ite	ne
 800126a:	2301      	movne	r3, #1
 800126c:	2300      	moveq	r3, #0
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 8001274:	f000 fbcc 	bl	8001a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001278:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <_ZL12MX_ADC1_Initv+0x110>)
 800127a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800127c:	2306      	movs	r3, #6
 800127e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001280:	2300      	movs	r3, #0
 8001282:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001284:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001288:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800128a:	2304      	movs	r3, #4
 800128c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001298:	463b      	mov	r3, r7
 800129a:	4619      	mov	r1, r3
 800129c:	4808      	ldr	r0, [pc, #32]	@ (80012c0 <_ZL12MX_ADC1_Initv+0x108>)
 800129e:	f002 f91b 	bl	80034d8 <HAL_ADC_ConfigChannel>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	bf14      	ite	ne
 80012a8:	2301      	movne	r3, #1
 80012aa:	2300      	moveq	r3, #0
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <_ZL12MX_ADC1_Initv+0xfe>
  {
    Error_Handler();
 80012b2:	f000 fbad 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	3730      	adds	r7, #48	@ 0x30
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	24000084 	.word	0x24000084
 80012c4:	40022000 	.word	0x40022000
 80012c8:	08600004 	.word	0x08600004

080012cc <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	@ 0x28
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	2224      	movs	r2, #36	@ 0x24
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f009 fc3b 	bl	800ab54 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80012de:	4b35      	ldr	r3, [pc, #212]	@ (80013b4 <_ZL12MX_ADC3_Initv+0xe8>)
 80012e0:	4a35      	ldr	r2, [pc, #212]	@ (80013b8 <_ZL12MX_ADC3_Initv+0xec>)
 80012e2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012e4:	4b33      	ldr	r3, [pc, #204]	@ (80013b4 <_ZL12MX_ADC3_Initv+0xe8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 80012ea:	4b32      	ldr	r3, [pc, #200]	@ (80013b4 <_ZL12MX_ADC3_Initv+0xe8>)
 80012ec:	220c      	movs	r2, #12
 80012ee:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80012f0:	4b30      	ldr	r3, [pc, #192]	@ (80013b4 <_ZL12MX_ADC3_Initv+0xe8>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012f6:	4b2f      	ldr	r3, [pc, #188]	@ (80013b4 <_ZL12MX_ADC3_Initv+0xe8>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012fc:	4b2d      	ldr	r3, [pc, #180]	@ (80013b4 <_ZL12MX_ADC3_Initv+0xe8>)
 80012fe:	2204      	movs	r2, #4
 8001300:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001302:	4b2c      	ldr	r3, [pc, #176]	@ (80013b4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001304:	2200      	movs	r2, #0
 8001306:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001308:	4b2a      	ldr	r3, [pc, #168]	@ (80013b4 <_ZL12MX_ADC3_Initv+0xe8>)
 800130a:	2200      	movs	r2, #0
 800130c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800130e:	4b29      	ldr	r3, [pc, #164]	@ (80013b4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001310:	2201      	movs	r2, #1
 8001312:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001314:	4b27      	ldr	r3, [pc, #156]	@ (80013b4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800131c:	4b25      	ldr	r3, [pc, #148]	@ (80013b4 <_ZL12MX_ADC3_Initv+0xe8>)
 800131e:	2200      	movs	r2, #0
 8001320:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001322:	4b24      	ldr	r3, [pc, #144]	@ (80013b4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001324:	2200      	movs	r2, #0
 8001326:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001328:	4b22      	ldr	r3, [pc, #136]	@ (80013b4 <_ZL12MX_ADC3_Initv+0xe8>)
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001330:	4b20      	ldr	r3, [pc, #128]	@ (80013b4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001332:	2200      	movs	r2, #0
 8001334:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001336:	4b1f      	ldr	r3, [pc, #124]	@ (80013b4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001338:	2200      	movs	r2, #0
 800133a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800133c:	4b1d      	ldr	r3, [pc, #116]	@ (80013b4 <_ZL12MX_ADC3_Initv+0xe8>)
 800133e:	2200      	movs	r2, #0
 8001340:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001342:	4b1c      	ldr	r3, [pc, #112]	@ (80013b4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001344:	2200      	movs	r2, #0
 8001346:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001348:	4b1a      	ldr	r3, [pc, #104]	@ (80013b4 <_ZL12MX_ADC3_Initv+0xe8>)
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 8001350:	4b18      	ldr	r3, [pc, #96]	@ (80013b4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001352:	2200      	movs	r2, #0
 8001354:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001356:	4817      	ldr	r0, [pc, #92]	@ (80013b4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001358:	f001 fcb6 	bl	8002cc8 <HAL_ADC_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	bf14      	ite	ne
 8001362:	2301      	movne	r3, #1
 8001364:	2300      	moveq	r3, #0
 8001366:	b2db      	uxtb	r3, r3
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 800136c:	f000 fb50 	bl	8001a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001370:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <_ZL12MX_ADC3_Initv+0xf0>)
 8001372:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001374:	2306      	movs	r3, #6
 8001376:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800137c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001380:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001382:	2304      	movs	r3, #4
 8001384:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 800138a:	2300      	movs	r3, #0
 800138c:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	4619      	mov	r1, r3
 8001392:	4808      	ldr	r0, [pc, #32]	@ (80013b4 <_ZL12MX_ADC3_Initv+0xe8>)
 8001394:	f002 f8a0 	bl	80034d8 <HAL_ADC_ConfigChannel>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	bf14      	ite	ne
 800139e:	2301      	movne	r3, #1
 80013a0:	2300      	moveq	r3, #0
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <_ZL12MX_ADC3_Initv+0xe0>
  {
    Error_Handler();
 80013a8:	f000 fb32 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	3728      	adds	r7, #40	@ 0x28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	240000f4 	.word	0x240000f4
 80013b8:	58026000 	.word	0x58026000
 80013bc:	1d500080 	.word	0x1d500080

080013c0 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80013c6:	4b41      	ldr	r3, [pc, #260]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 80013c8:	4a41      	ldr	r2, [pc, #260]	@ (80014d0 <_ZL14MX_FDCAN1_Initv+0x110>)
 80013ca:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80013cc:	4b3f      	ldr	r3, [pc, #252]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 80013ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013d2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80013d4:	4b3d      	ldr	r3, [pc, #244]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80013da:	4b3c      	ldr	r3, [pc, #240]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80013e0:	4b3a      	ldr	r3, [pc, #232]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80013e6:	4b39      	ldr	r3, [pc, #228]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 80013ec:	4b37      	ldr	r3, [pc, #220]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 80013ee:	2203      	movs	r2, #3
 80013f0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80013f2:	4b36      	ldr	r3, [pc, #216]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 80013f8:	4b34      	ldr	r3, [pc, #208]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 80013fa:	220a      	movs	r2, #10
 80013fc:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 80013fe:	4b33      	ldr	r3, [pc, #204]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001400:	2205      	movs	r2, #5
 8001402:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001404:	4b31      	ldr	r3, [pc, #196]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001406:	2201      	movs	r2, #1
 8001408:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800140a:	4b30      	ldr	r3, [pc, #192]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 800140c:	2201      	movs	r2, #1
 800140e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001410:	4b2e      	ldr	r3, [pc, #184]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001412:	2201      	movs	r2, #1
 8001414:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001416:	4b2d      	ldr	r3, [pc, #180]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001418:	2201      	movs	r2, #1
 800141a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800141c:	4b2b      	ldr	r3, [pc, #172]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 800141e:	2200      	movs	r2, #0
 8001420:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001422:	4b2a      	ldr	r3, [pc, #168]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001424:	2200      	movs	r2, #0
 8001426:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 5;
 8001428:	4b28      	ldr	r3, [pc, #160]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 800142a:	2205      	movs	r2, #5
 800142c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 800142e:	4b27      	ldr	r3, [pc, #156]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001430:	2220      	movs	r2, #32
 8001432:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001434:	4b25      	ldr	r3, [pc, #148]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001436:	2204      	movs	r2, #4
 8001438:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 800143a:	4b24      	ldr	r3, [pc, #144]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 800143c:	2220      	movs	r2, #32
 800143e:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001440:	4b22      	ldr	r3, [pc, #136]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001442:	2204      	movs	r2, #4
 8001444:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 8001446:	4b21      	ldr	r3, [pc, #132]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001448:	2201      	movs	r2, #1
 800144a:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800144c:	4b1f      	ldr	r3, [pc, #124]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 800144e:	2204      	movs	r2, #4
 8001450:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 1;
 8001452:	4b1e      	ldr	r3, [pc, #120]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001454:	2201      	movs	r2, #1
 8001456:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 8001458:	4b1c      	ldr	r3, [pc, #112]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 800145a:	2220      	movs	r2, #32
 800145c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 800145e:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001460:	2220      	movs	r2, #32
 8001462:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001464:	4b19      	ldr	r3, [pc, #100]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001466:	2200      	movs	r2, #0
 8001468:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800146a:	4b18      	ldr	r3, [pc, #96]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 800146c:	2204      	movs	r2, #4
 800146e:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001470:	4816      	ldr	r0, [pc, #88]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001472:	f003 f9b1 	bl	80047d8 <HAL_FDCAN_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	bf14      	ite	ne
 800147c:	2301      	movne	r3, #1
 800147e:	2300      	moveq	r3, #0
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <_ZL14MX_FDCAN1_Initv+0xca>
  {
    Error_Handler();
 8001486:	f000 fac3 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800148a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800148e:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001494:	2302      	movs	r3, #2
 8001496:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001498:	2301      	movs	r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0;
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80014a4:	463b      	mov	r3, r7
 80014a6:	4619      	mov	r1, r3
 80014a8:	4808      	ldr	r0, [pc, #32]	@ (80014cc <_ZL14MX_FDCAN1_Initv+0x10c>)
 80014aa:	f003 fb73 	bl	8004b94 <HAL_FDCAN_ConfigFilter>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	bf14      	ite	ne
 80014b4:	2301      	movne	r3, #1
 80014b6:	2300      	moveq	r3, #0
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <_ZL14MX_FDCAN1_Initv+0x102>
  {
    Error_Handler();
 80014be:	f000 faa7 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	3720      	adds	r7, #32
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	24000164 	.word	0x24000164
 80014d0:	4000a000 	.word	0x4000a000

080014d4 <_ZL14MX_FDCAN2_Initv>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80014da:	4b41      	ldr	r3, [pc, #260]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80014dc:	4a41      	ldr	r2, [pc, #260]	@ (80015e4 <_ZL14MX_FDCAN2_Initv+0x110>)
 80014de:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80014e0:	4b3f      	ldr	r3, [pc, #252]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80014e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014e6:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80014e8:	4b3d      	ldr	r3, [pc, #244]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80014ee:	4b3c      	ldr	r3, [pc, #240]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80014f4:	4b3a      	ldr	r3, [pc, #232]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80014fa:	4b39      	ldr	r3, [pc, #228]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 3;
 8001500:	4b37      	ldr	r3, [pc, #220]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001502:	2203      	movs	r2, #3
 8001504:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001506:	4b36      	ldr	r3, [pc, #216]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001508:	2201      	movs	r2, #1
 800150a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 10;
 800150c:	4b34      	ldr	r3, [pc, #208]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800150e:	220a      	movs	r2, #10
 8001510:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8001512:	4b33      	ldr	r3, [pc, #204]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001514:	2205      	movs	r2, #5
 8001516:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001518:	4b31      	ldr	r3, [pc, #196]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800151a:	2201      	movs	r2, #1
 800151c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800151e:	4b30      	ldr	r3, [pc, #192]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001520:	2201      	movs	r2, #1
 8001522:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001524:	4b2e      	ldr	r3, [pc, #184]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001526:	2201      	movs	r2, #1
 8001528:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800152a:	4b2d      	ldr	r3, [pc, #180]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800152c:	2201      	movs	r2, #1
 800152e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8001530:	4b2b      	ldr	r3, [pc, #172]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001532:	2200      	movs	r2, #0
 8001534:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8001536:	4b2a      	ldr	r3, [pc, #168]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001538:	2200      	movs	r2, #0
 800153a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 5;
 800153c:	4b28      	ldr	r3, [pc, #160]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800153e:	2205      	movs	r2, #5
 8001540:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 32;
 8001542:	4b27      	ldr	r3, [pc, #156]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001544:	2220      	movs	r2, #32
 8001546:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001548:	4b25      	ldr	r3, [pc, #148]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800154a:	2204      	movs	r2, #4
 800154c:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 32;
 800154e:	4b24      	ldr	r3, [pc, #144]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001550:	2220      	movs	r2, #32
 8001552:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001554:	4b22      	ldr	r3, [pc, #136]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001556:	2204      	movs	r2, #4
 8001558:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 1;
 800155a:	4b21      	ldr	r3, [pc, #132]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800155c:	2201      	movs	r2, #1
 800155e:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001560:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001562:	2204      	movs	r2, #4
 8001564:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 1;
 8001566:	4b1e      	ldr	r3, [pc, #120]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001568:	2201      	movs	r2, #1
 800156a:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 32;
 800156c:	4b1c      	ldr	r3, [pc, #112]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800156e:	2220      	movs	r2, #32
 8001570:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 32;
 8001572:	4b1b      	ldr	r3, [pc, #108]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001574:	2220      	movs	r2, #32
 8001576:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001578:	4b19      	ldr	r3, [pc, #100]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800157a:	2200      	movs	r2, #0
 800157c:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800157e:	4b18      	ldr	r3, [pc, #96]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001580:	2204      	movs	r2, #4
 8001582:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001584:	4816      	ldr	r0, [pc, #88]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001586:	f003 f927 	bl	80047d8 <HAL_FDCAN_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	bf14      	ite	ne
 8001590:	2301      	movne	r3, #1
 8001592:	2300      	moveq	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <_ZL14MX_FDCAN2_Initv+0xca>
  {
    Error_Handler();
 800159a:	f000 fa39 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800159e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015a2:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80015a8:	2302      	movs	r3, #2
 80015aa:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80015ac:	2301      	movs	r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x10;
 80015b0:	2310      	movs	r3, #16
 80015b2:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x10;
 80015b4:	2310      	movs	r3, #16
 80015b6:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 80015b8:	463b      	mov	r3, r7
 80015ba:	4619      	mov	r1, r3
 80015bc:	4808      	ldr	r0, [pc, #32]	@ (80015e0 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80015be:	f003 fae9 	bl	8004b94 <HAL_FDCAN_ConfigFilter>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	bf14      	ite	ne
 80015c8:	2301      	movne	r3, #1
 80015ca:	2300      	moveq	r3, #0
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <_ZL14MX_FDCAN2_Initv+0x102>
  {
    Error_Handler();
 80015d2:	f000 fa1d 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE END FDCAN2_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	3720      	adds	r7, #32
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	24000204 	.word	0x24000204
 80015e4:	4000a400 	.word	0x4000a400

080015e8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015ec:	4b2c      	ldr	r3, [pc, #176]	@ (80016a0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80015ee:	4a2d      	ldr	r2, [pc, #180]	@ (80016a4 <_ZL19MX_USART2_UART_Initv+0xbc>)
 80015f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015f2:	4b2b      	ldr	r3, [pc, #172]	@ (80016a0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80015f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015fa:	4b29      	ldr	r3, [pc, #164]	@ (80016a0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001600:	4b27      	ldr	r3, [pc, #156]	@ (80016a0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001606:	4b26      	ldr	r3, [pc, #152]	@ (80016a0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800160c:	4b24      	ldr	r3, [pc, #144]	@ (80016a0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800160e:	220c      	movs	r2, #12
 8001610:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001612:	4b23      	ldr	r3, [pc, #140]	@ (80016a0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001618:	4b21      	ldr	r3, [pc, #132]	@ (80016a0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800161e:	4b20      	ldr	r3, [pc, #128]	@ (80016a0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001620:	2200      	movs	r2, #0
 8001622:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001624:	4b1e      	ldr	r3, [pc, #120]	@ (80016a0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001626:	2200      	movs	r2, #0
 8001628:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800162a:	4b1d      	ldr	r3, [pc, #116]	@ (80016a0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800162c:	2200      	movs	r2, #0
 800162e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001630:	481b      	ldr	r0, [pc, #108]	@ (80016a0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001632:	f007 ffff 	bl	8009634 <HAL_UART_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	bf14      	ite	ne
 800163c:	2301      	movne	r3, #1
 800163e:	2300      	moveq	r3, #0
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8001646:	f000 f9e3 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800164a:	2100      	movs	r1, #0
 800164c:	4814      	ldr	r0, [pc, #80]	@ (80016a0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800164e:	f009 f994 	bl	800a97a <HAL_UARTEx_SetTxFifoThreshold>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	bf14      	ite	ne
 8001658:	2301      	movne	r3, #1
 800165a:	2300      	moveq	r3, #0
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8001662:	f000 f9d5 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001666:	2100      	movs	r1, #0
 8001668:	480d      	ldr	r0, [pc, #52]	@ (80016a0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800166a:	f009 f9c4 	bl	800a9f6 <HAL_UARTEx_SetRxFifoThreshold>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	bf14      	ite	ne
 8001674:	2301      	movne	r3, #1
 8001676:	2300      	moveq	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 800167e:	f000 f9c7 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001682:	4807      	ldr	r0, [pc, #28]	@ (80016a0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001684:	f009 f940 	bl	800a908 <HAL_UARTEx_DisableFifoMode>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	bf14      	ite	ne
 800168e:	2301      	movne	r3, #1
 8001690:	2300      	moveq	r3, #0
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8001698:	f000 f9ba 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	240002a4 	.word	0x240002a4
 80016a4:	40004400 	.word	0x40004400

080016a8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08c      	sub	sp, #48	@ 0x30
 80016ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
 80016bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016be:	4b50      	ldr	r3, [pc, #320]	@ (8001800 <_ZL12MX_GPIO_Initv+0x158>)
 80016c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c4:	4a4e      	ldr	r2, [pc, #312]	@ (8001800 <_ZL12MX_GPIO_Initv+0x158>)
 80016c6:	f043 0320 	orr.w	r3, r3, #32
 80016ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016ce:	4b4c      	ldr	r3, [pc, #304]	@ (8001800 <_ZL12MX_GPIO_Initv+0x158>)
 80016d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d4:	f003 0320 	and.w	r3, r3, #32
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016dc:	4b48      	ldr	r3, [pc, #288]	@ (8001800 <_ZL12MX_GPIO_Initv+0x158>)
 80016de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e2:	4a47      	ldr	r2, [pc, #284]	@ (8001800 <_ZL12MX_GPIO_Initv+0x158>)
 80016e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016ec:	4b44      	ldr	r3, [pc, #272]	@ (8001800 <_ZL12MX_GPIO_Initv+0x158>)
 80016ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	4b41      	ldr	r3, [pc, #260]	@ (8001800 <_ZL12MX_GPIO_Initv+0x158>)
 80016fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001700:	4a3f      	ldr	r2, [pc, #252]	@ (8001800 <_ZL12MX_GPIO_Initv+0x158>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800170a:	4b3d      	ldr	r3, [pc, #244]	@ (8001800 <_ZL12MX_GPIO_Initv+0x158>)
 800170c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001718:	4b39      	ldr	r3, [pc, #228]	@ (8001800 <_ZL12MX_GPIO_Initv+0x158>)
 800171a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800171e:	4a38      	ldr	r2, [pc, #224]	@ (8001800 <_ZL12MX_GPIO_Initv+0x158>)
 8001720:	f043 0310 	orr.w	r3, r3, #16
 8001724:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001728:	4b35      	ldr	r3, [pc, #212]	@ (8001800 <_ZL12MX_GPIO_Initv+0x158>)
 800172a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800172e:	f003 0310 	and.w	r3, r3, #16
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001736:	4b32      	ldr	r3, [pc, #200]	@ (8001800 <_ZL12MX_GPIO_Initv+0x158>)
 8001738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800173c:	4a30      	ldr	r2, [pc, #192]	@ (8001800 <_ZL12MX_GPIO_Initv+0x158>)
 800173e:	f043 0302 	orr.w	r3, r3, #2
 8001742:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001746:	4b2e      	ldr	r3, [pc, #184]	@ (8001800 <_ZL12MX_GPIO_Initv+0x158>)
 8001748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001754:	4b2a      	ldr	r3, [pc, #168]	@ (8001800 <_ZL12MX_GPIO_Initv+0x158>)
 8001756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800175a:	4a29      	ldr	r2, [pc, #164]	@ (8001800 <_ZL12MX_GPIO_Initv+0x158>)
 800175c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001760:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001764:	4b26      	ldr	r3, [pc, #152]	@ (8001800 <_ZL12MX_GPIO_Initv+0x158>)
 8001766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800176a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001772:	4b23      	ldr	r3, [pc, #140]	@ (8001800 <_ZL12MX_GPIO_Initv+0x158>)
 8001774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001778:	4a21      	ldr	r2, [pc, #132]	@ (8001800 <_ZL12MX_GPIO_Initv+0x158>)
 800177a:	f043 0308 	orr.w	r3, r3, #8
 800177e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001782:	4b1f      	ldr	r3, [pc, #124]	@ (8001800 <_ZL12MX_GPIO_Initv+0x158>)
 8001784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001788:	f003 0308 	and.w	r3, r3, #8
 800178c:	603b      	str	r3, [r7, #0]
 800178e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, GPIO_PIN_RESET);
 8001790:	2200      	movs	r2, #0
 8001792:	2180      	movs	r1, #128	@ 0x80
 8001794:	481b      	ldr	r0, [pc, #108]	@ (8001804 <_ZL12MX_GPIO_Initv+0x15c>)
 8001796:	f004 fbad 	bl	8005ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	2138      	movs	r1, #56	@ 0x38
 800179e:	481a      	ldr	r0, [pc, #104]	@ (8001808 <_ZL12MX_GPIO_Initv+0x160>)
 80017a0:	f004 fba8 	bl	8005ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIGITAL1_Pin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin;
 80017a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017aa:	2300      	movs	r3, #0
 80017ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIGITAL1_GPIO_Port, &GPIO_InitStruct);
 80017b2:	f107 031c 	add.w	r3, r7, #28
 80017b6:	4619      	mov	r1, r3
 80017b8:	4814      	ldr	r0, [pc, #80]	@ (800180c <_ZL12MX_GPIO_Initv+0x164>)
 80017ba:	f004 f9db 	bl	8005b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : AMS_OK_Pin */
  GPIO_InitStruct.Pin = AMS_OK_Pin;
 80017be:	2380      	movs	r3, #128	@ 0x80
 80017c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c2:	2301      	movs	r3, #1
 80017c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AMS_OK_GPIO_Port, &GPIO_InitStruct);
 80017ce:	f107 031c 	add.w	r3, r7, #28
 80017d2:	4619      	mov	r1, r3
 80017d4:	480b      	ldr	r0, [pc, #44]	@ (8001804 <_ZL12MX_GPIO_Initv+0x15c>)
 80017d6:	f004 f9cd 	bl	8005b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_AIR_N_Pin RELAY_AIR_P_Pin RELAY_PRECHARGE_Pin */
  GPIO_InitStruct.Pin = RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin;
 80017da:	2338      	movs	r3, #56	@ 0x38
 80017dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017de:	2301      	movs	r3, #1
 80017e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ea:	f107 031c 	add.w	r3, r7, #28
 80017ee:	4619      	mov	r1, r3
 80017f0:	4805      	ldr	r0, [pc, #20]	@ (8001808 <_ZL12MX_GPIO_Initv+0x160>)
 80017f2:	f004 f9bf 	bl	8005b74 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80017f6:	bf00      	nop
 80017f8:	3730      	adds	r7, #48	@ 0x30
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	58024400 	.word	0x58024400
 8001804:	58021800 	.word	0x58021800
 8001808:	58020c00 	.word	0x58020c00
 800180c:	58021000 	.word	0x58021000

08001810 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b087      	sub	sp, #28
 8001814:	af02      	add	r7, sp, #8
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b00      	cmp	r3, #0
 8001822:	d04b      	beq.n	80018bc <HAL_FDCAN_RxFifo0Callback+0xac>
	{
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_acu, RxData) == HAL_OK)
 8001824:	4b27      	ldr	r3, [pc, #156]	@ (80018c4 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001826:	4a28      	ldr	r2, [pc, #160]	@ (80018c8 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001828:	2140      	movs	r1, #64	@ 0x40
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f003 faae 	bl	8004d8c <HAL_FDCAN_GetRxMessage>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	bf0c      	ite	eq
 8001836:	2301      	moveq	r3, #1
 8001838:	2300      	movne	r3, #0
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	d02e      	beq.n	800189e <HAL_FDCAN_RxFifo0Callback+0x8e>
    {
		msg_acu.id = RxHeader_acu.Identifier;
 8001840:	4b21      	ldr	r3, [pc, #132]	@ (80018c8 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a21      	ldr	r2, [pc, #132]	@ (80018cc <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001846:	6013      	str	r3, [r2, #0]
		msg_acu.len = RxHeader_acu.DataLength;
 8001848:	4b1f      	ldr	r3, [pc, #124]	@ (80018c8 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4b1f      	ldr	r3, [pc, #124]	@ (80018cc <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001850:	711a      	strb	r2, [r3, #4]
		for (int i = 0; i < 8; i++) {msg_acu.buf[i] = RxData[i];}
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	e00c      	b.n	8001872 <HAL_FDCAN_RxFifo0Callback+0x62>
 8001858:	4a1a      	ldr	r2, [pc, #104]	@ (80018c4 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4413      	add	r3, r2
 800185e:	7819      	ldrb	r1, [r3, #0]
 8001860:	4a1a      	ldr	r2, [pc, #104]	@ (80018cc <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4413      	add	r3, r2
 8001866:	3305      	adds	r3, #5
 8001868:	460a      	mov	r2, r1
 800186a:	701a      	strb	r2, [r3, #0]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	3301      	adds	r3, #1
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2b07      	cmp	r3, #7
 8001876:	ddef      	ble.n	8001858 <HAL_FDCAN_RxFifo0Callback+0x48>
		msg_acu.bus = 1;
 8001878:	4b14      	ldr	r3, [pc, #80]	@ (80018cc <HAL_FDCAN_RxFifo0Callback+0xbc>)
 800187a:	2201      	movs	r2, #1
 800187c:	611a      	str	r2, [r3, #16]
		msg_acu.time = HAL_GetTick();
 800187e:	f000 fef1 	bl	8002664 <HAL_GetTick>
 8001882:	4603      	mov	r3, r0
 8001884:	4a11      	ldr	r2, [pc, #68]	@ (80018cc <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001886:	6153      	str	r3, [r2, #20]
		parse_state(msg_acu);
 8001888:	4b10      	ldr	r3, [pc, #64]	@ (80018cc <HAL_FDCAN_RxFifo0Callback+0xbc>)
 800188a:	466c      	mov	r4, sp
 800188c:	f103 0210 	add.w	r2, r3, #16
 8001890:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001894:	e884 0003 	stmia.w	r4, {r0, r1}
 8001898:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800189a:	f000 fa7d 	bl	8001d98 <_Z11parse_state6CANMsg>

    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800189e:	2200      	movs	r2, #0
 80018a0:	2101      	movs	r1, #1
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f003 fbde 	bl	8005064 <HAL_FDCAN_ActivateNotification>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	bf14      	ite	ne
 80018ae:	2301      	movne	r3, #1
 80018b0:	2300      	moveq	r3, #0
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <HAL_FDCAN_RxFifo0Callback+0xac>
    {
      /* Notification Error */
      Error_Handler();
 80018b8:	f000 f8aa 	bl	8001a10 <Error_Handler>
    }
  }
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd90      	pop	{r4, r7, pc}
 80018c4:	240003d0 	.word	0x240003d0
 80018c8:	24000380 	.word	0x24000380
 80018cc:	24000454 	.word	0x24000454

080018d0 <module_send_message_CAN1>:

//extended ID
HAL_StatusTypeDef module_send_message_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	4613      	mov	r3, r2
 80018dc:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 80018de:	4a0b      	ldr	r2, [pc, #44]	@ (800190c <module_send_message_CAN1+0x3c>)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_EXTENDED_ID;
 80018e4:	4b09      	ldr	r3, [pc, #36]	@ (800190c <module_send_message_CAN1+0x3c>)
 80018e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018ea:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	4a07      	ldr	r2, [pc, #28]	@ (800190c <module_send_message_CAN1+0x3c>)
 80018f0:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	4905      	ldr	r1, [pc, #20]	@ (800190c <module_send_message_CAN1+0x3c>)
 80018f6:	4806      	ldr	r0, [pc, #24]	@ (8001910 <module_send_message_CAN1+0x40>)
 80018f8:	f003 f9ed 	bl	8004cd6 <HAL_FDCAN_AddMessageToTxFifoQ>
 80018fc:	4603      	mov	r3, r0
 80018fe:	75fb      	strb	r3, [r7, #23]

	return status;
 8001900:	7dfb      	ldrb	r3, [r7, #23]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	24000338 	.word	0x24000338
 8001910:	24000164 	.word	0x24000164

08001914 <module_send_message_CAN2>:
	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);

	return status;
}

HAL_StatusTypeDef module_send_message_CAN2(uint32_t id, uint8_t* data, uint8_t length) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	4613      	mov	r3, r2
 8001920:	71fb      	strb	r3, [r7, #7]
	TxHeader_bms.Identifier = id;
 8001922:	4a0a      	ldr	r2, [pc, #40]	@ (800194c <module_send_message_CAN2+0x38>)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6013      	str	r3, [r2, #0]
	TxHeader_bms.IdType = FDCAN_STANDARD_ID;
 8001928:	4b08      	ldr	r3, [pc, #32]	@ (800194c <module_send_message_CAN2+0x38>)
 800192a:	2200      	movs	r2, #0
 800192c:	605a      	str	r2, [r3, #4]
	TxHeader_bms.DataLength = length;
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	4a06      	ldr	r2, [pc, #24]	@ (800194c <module_send_message_CAN2+0x38>)
 8001932:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_bms, data);
 8001934:	68ba      	ldr	r2, [r7, #8]
 8001936:	4905      	ldr	r1, [pc, #20]	@ (800194c <module_send_message_CAN2+0x38>)
 8001938:	4805      	ldr	r0, [pc, #20]	@ (8001950 <module_send_message_CAN2+0x3c>)
 800193a:	f003 f9cc 	bl	8004cd6 <HAL_FDCAN_AddMessageToTxFifoQ>
 800193e:	4603      	mov	r3, r0
 8001940:	75fb      	strb	r3, [r7, #23]

	return status;
 8001942:	7dfb      	ldrb	r3, [r7, #23]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	2400035c 	.word	0x2400035c
 8001950:	24000204 	.word	0x24000204

08001954 <print>:

void print(char uart_buffer[]){
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	4909      	ldr	r1, [pc, #36]	@ (8001984 <print+0x30>)
 8001960:	4809      	ldr	r0, [pc, #36]	@ (8001988 <print+0x34>)
 8001962:	f009 f8d5 	bl	800ab10 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001966:	4808      	ldr	r0, [pc, #32]	@ (8001988 <print+0x34>)
 8001968:	f7fe fcd2 	bl	8000310 <strlen>
 800196c:	4603      	mov	r3, r0
 800196e:	b29a      	uxth	r2, r3
 8001970:	f04f 33ff 	mov.w	r3, #4294967295
 8001974:	4904      	ldr	r1, [pc, #16]	@ (8001988 <print+0x34>)
 8001976:	4805      	ldr	r0, [pc, #20]	@ (800198c <print+0x38>)
 8001978:	f007 feac 	bl	80096d4 <HAL_UART_Transmit>
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	0800b5b0 	.word	0x0800b5b0
 8001988:	240003d8 	.word	0x240003d8
 800198c:	240002a4 	.word	0x240002a4

08001990 <printValue>:
void printnl(char uart_buffer[]){
	sprintf(uart_msg, "%s", uart_buffer);
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
}

void printValue(int value){
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	4909      	ldr	r1, [pc, #36]	@ (80019c0 <printValue+0x30>)
 800199c:	4809      	ldr	r0, [pc, #36]	@ (80019c4 <printValue+0x34>)
 800199e:	f009 f8b7 	bl	800ab10 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 80019a2:	4808      	ldr	r0, [pc, #32]	@ (80019c4 <printValue+0x34>)
 80019a4:	f7fe fcb4 	bl	8000310 <strlen>
 80019a8:	4603      	mov	r3, r0
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	f04f 33ff 	mov.w	r3, #4294967295
 80019b0:	4904      	ldr	r1, [pc, #16]	@ (80019c4 <printValue+0x34>)
 80019b2:	4805      	ldr	r0, [pc, #20]	@ (80019c8 <printValue+0x38>)
 80019b4:	f007 fe8e 	bl	80096d4 <HAL_UART_Transmit>
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	0800b5bc 	.word	0x0800b5bc
 80019c4:	240003d8 	.word	0x240003d8
 80019c8:	240002a4 	.word	0x240002a4

080019cc <readAnalogValue>:

HAL_UART_StateTypeDef getUARTState(){
	return HAL_UART_GetState(&huart2);
}

float readAnalogValue(void){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
	float analogValue;

	HAL_ADC_Start(&hadc3);
 80019d2:	480e      	ldr	r0, [pc, #56]	@ (8001a0c <readAnalogValue+0x40>)
 80019d4:	f001 fb80 	bl	80030d8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 80019d8:	f04f 31ff 	mov.w	r1, #4294967295
 80019dc:	480b      	ldr	r0, [pc, #44]	@ (8001a0c <readAnalogValue+0x40>)
 80019de:	f001 fc79 	bl	80032d4 <HAL_ADC_PollForConversion>
	analogValue = HAL_ADC_GetValue(&hadc3);
 80019e2:	480a      	ldr	r0, [pc, #40]	@ (8001a0c <readAnalogValue+0x40>)
 80019e4:	f001 fd6a 	bl	80034bc <HAL_ADC_GetValue>
 80019e8:	ee07 0a90 	vmov	s15, r0
 80019ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019f0:	edc7 7a01 	vstr	s15, [r7, #4]
	HAL_ADC_Stop(&hadc3);
 80019f4:	4805      	ldr	r0, [pc, #20]	@ (8001a0c <readAnalogValue+0x40>)
 80019f6:	f001 fc39 	bl	800326c <HAL_ADC_Stop>
	return analogValue;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	ee07 3a90 	vmov	s15, r3
}
 8001a00:	eeb0 0a67 	vmov.f32	s0, s15
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	240000f4 	.word	0x240000f4

08001a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a14:	b672      	cpsid	i
}
 8001a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <Error_Handler+0x8>
 8001a1c:	0000      	movs	r0, r0
	...

08001a20 <_Z12select_statev>:

/*********************************************************************************************************
 ** Function name:           select_state
 ** Descriptions:            check what should they do on the state machine
 *********************************************************************************************************/
void select_state() {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	@ 0x28
 8001a24:	af00      	add	r7, sp, #0
	int state_air_n = 0;     // 0 means open, 1 closed     // Turn on SEVCON
 8001a26:	2300      	movs	r3, #0
 8001a28:	627b      	str	r3, [r7, #36]	@ 0x24
	int state_air_p = 0;     // 0 means open, 1 closed     // Energize HV relay
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
	int state_precharge = 0; // 0 means open, 1 closed
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
	int flag_cpu = CPU_ERROR_COMMUNICATION;
 8001a32:	2301      	movs	r3, #1
 8001a34:	613b      	str	r3, [r7, #16]
	int flag_current = Current_ERROR_Comunication;
 8001a36:	2302      	movs	r3, #2
 8001a38:	60fb      	str	r3, [r7, #12]
	 * 1 ms interruption => 1ms * 264MHz = 264000
	 * prescalado 264 (por ejemplo)
	 * timer count = 264000 / 264 = 1000
	 */

	uint32_t time = HAL_GetTick();
 8001a3a:	f000 fe13 	bl	8002664 <HAL_GetTick>
 8001a3e:	60b8      	str	r0, [r7, #8]
	int time_s = HAL_GetTick();
 8001a40:	f000 fe10 	bl	8002664 <HAL_GetTick>
 8001a44:	4603      	mov	r3, r0
 8001a46:	607b      	str	r3, [r7, #4]

	CPU.voltage_acum = 0; // For precharge
 8001a48:	4ba9      	ldr	r3, [pc, #676]	@ (8001cf0 <_Z12select_statev+0x2d0>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	62da      	str	r2, [r3, #44]	@ 0x2c


	MIN_V = 4200; /// I reset the number each cycle cause if the voltages goes up again I wanna has it risen again on telemetry
 8001a4e:	4ba9      	ldr	r3, [pc, #676]	@ (8001cf4 <_Z12select_statev+0x2d4>)
 8001a50:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001a54:	601a      	str	r2, [r3, #0]
	MAX_T = 0;
 8001a56:	4ba8      	ldr	r3, [pc, #672]	@ (8001cf8 <_Z12select_statev+0x2d8>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61bb      	str	r3, [r7, #24]
 8001a60:	e066      	b.n	8001b30 <_Z12select_statev+0x110>
		BMS[i].voltage_acum = 0;// For precharge
 8001a62:	4aa6      	ldr	r2, [pc, #664]	@ (8001cfc <_Z12select_statev+0x2dc>)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001a6a:	fb01 f303 	mul.w	r3, r1, r3
 8001a6e:	4413      	add	r3, r2
 8001a70:	338c      	adds	r3, #140	@ 0x8c
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]


		if (BMS[i].query_voltage(time, buffer) != BMS_OK) //I ask the BMS about voltages and cheking their states
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8001a7c:	fb02 f303 	mul.w	r3, r2, r3
 8001a80:	4a9e      	ldr	r2, [pc, #632]	@ (8001cfc <_Z12select_statev+0x2dc>)
 8001a82:	4413      	add	r3, r2
 8001a84:	4a9e      	ldr	r2, [pc, #632]	@ (8001d00 <_Z12select_statev+0x2e0>)
 8001a86:	68b9      	ldr	r1, [r7, #8]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff f847 	bl	8000b1c <_ZN7BMS_MOD13query_voltageEmPc>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
		{
			//state = error;
		}

		CPU.voltage_acum += BMS[i].voltage_acum; // For precharge
 8001a92:	4b97      	ldr	r3, [pc, #604]	@ (8001cf0 <_Z12select_statev+0x2d0>)
 8001a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a96:	4999      	ldr	r1, [pc, #612]	@ (8001cfc <_Z12select_statev+0x2dc>)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 8001a9e:	fb00 f303 	mul.w	r3, r0, r3
 8001aa2:	440b      	add	r3, r1
 8001aa4:	338c      	adds	r3, #140	@ 0x8c
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4a91      	ldr	r2, [pc, #580]	@ (8001cf0 <_Z12select_statev+0x2d0>)
 8001aac:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if (BMS[i].MIN_V < MIN_V)
 8001aae:	4a93      	ldr	r2, [pc, #588]	@ (8001cfc <_Z12select_statev+0x2dc>)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001ab6:	fb01 f303 	mul.w	r3, r1, r3
 8001aba:	4413      	add	r3, r2
 8001abc:	3390      	adds	r3, #144	@ 0x90
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b8c      	ldr	r3, [pc, #560]	@ (8001cf4 <_Z12select_statev+0x2d4>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	da0a      	bge.n	8001ade <_Z12select_statev+0xbe>
			MIN_V = BMS[i].MIN_V; //Checking the minimun voltage of cell in the whole battery
 8001ac8:	4a8c      	ldr	r2, [pc, #560]	@ (8001cfc <_Z12select_statev+0x2dc>)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001ad0:	fb01 f303 	mul.w	r3, r1, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3390      	adds	r3, #144	@ 0x90
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a86      	ldr	r2, [pc, #536]	@ (8001cf4 <_Z12select_statev+0x2d4>)
 8001adc:	6013      	str	r3, [r2, #0]


		if (BMS[i].query_temperature(time, buffer) != Temperatures_OK){
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8001ae4:	fb02 f303 	mul.w	r3, r2, r3
 8001ae8:	4a84      	ldr	r2, [pc, #528]	@ (8001cfc <_Z12select_statev+0x2dc>)
 8001aea:	4413      	add	r3, r2
 8001aec:	4a84      	ldr	r2, [pc, #528]	@ (8001d00 <_Z12select_statev+0x2e0>)
 8001aee:	68b9      	ldr	r1, [r7, #8]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff f88f 	bl	8000c14 <_ZN7BMS_MOD17query_temperatureEmPc>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
			//state = error;
		}

		if (BMS[i].MAX_T > MAX_T)
 8001afa:	4a80      	ldr	r2, [pc, #512]	@ (8001cfc <_Z12select_statev+0x2dc>)
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001b02:	fb01 f303 	mul.w	r3, r1, r3
 8001b06:	4413      	add	r3, r2
 8001b08:	33a0      	adds	r3, #160	@ 0xa0
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b7a      	ldr	r3, [pc, #488]	@ (8001cf8 <_Z12select_statev+0x2d8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	dd0a      	ble.n	8001b2a <_Z12select_statev+0x10a>
			MAX_T = BMS[i].MAX_T;
 8001b14:	4a79      	ldr	r2, [pc, #484]	@ (8001cfc <_Z12select_statev+0x2dc>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001b1c:	fb01 f303 	mul.w	r3, r1, r3
 8001b20:	4413      	add	r3, r2
 8001b22:	33a0      	adds	r3, #160	@ 0xa0
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a74      	ldr	r2, [pc, #464]	@ (8001cf8 <_Z12select_statev+0x2d8>)
 8001b28:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	61bb      	str	r3, [r7, #24]
 8001b30:	4b74      	ldr	r3, [pc, #464]	@ (8001d04 <_Z12select_statev+0x2e4>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	db93      	blt.n	8001a62 <_Z12select_statev+0x42>
	}

	if (time_s > time_sending_minV + 500) {
 8001b3a:	4b73      	ldr	r3, [pc, #460]	@ (8001d08 <_Z12select_statev+0x2e8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	dd23      	ble.n	8001b90 <_Z12select_statev+0x170>
		message_MINV[1] = MIN_V & 0xFF;
 8001b48:	4b6a      	ldr	r3, [pc, #424]	@ (8001cf4 <_Z12select_statev+0x2d4>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4b6f      	ldr	r3, [pc, #444]	@ (8001d0c <_Z12select_statev+0x2ec>)
 8001b50:	705a      	strb	r2, [r3, #1]
		message_MINV[0] = (MIN_V >> 8) & 0xFF;
 8001b52:	4b68      	ldr	r3, [pc, #416]	@ (8001cf4 <_Z12select_statev+0x2d4>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	121b      	asrs	r3, r3, #8
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4b6c      	ldr	r3, [pc, #432]	@ (8001d0c <_Z12select_statev+0x2ec>)
 8001b5c:	701a      	strb	r2, [r3, #0]
		if (BMS[0].flag_charger != 1) {
 8001b5e:	4b67      	ldr	r3, [pc, #412]	@ (8001cfc <_Z12select_statev+0x2dc>)
 8001b60:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d010      	beq.n	8001b8a <_Z12select_statev+0x16a>
			if (module_send_message_CAN1(BMS_ID, message_MINV, 2) != HAL_OK)
 8001b68:	2202      	movs	r2, #2
 8001b6a:	4968      	ldr	r1, [pc, #416]	@ (8001d0c <_Z12select_statev+0x2ec>)
 8001b6c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001b70:	f7ff feae 	bl	80018d0 <module_send_message_CAN1>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	bf14      	ite	ne
 8001b7a:	2301      	movne	r3, #1
 8001b7c:	2300      	moveq	r3, #0
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d002      	beq.n	8001b8a <_Z12select_statev+0x16a>
				print((char*) "Error al enviar tension minima"); //Sending the message through telemtry each 500 ms
 8001b84:	4862      	ldr	r0, [pc, #392]	@ (8001d10 <_Z12select_statev+0x2f0>)
 8001b86:	f7ff fee5 	bl	8001954 <print>
		}
		time_sending_minV = time_s;
 8001b8a:	4a5f      	ldr	r2, [pc, #380]	@ (8001d08 <_Z12select_statev+0x2e8>)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6013      	str	r3, [r2, #0]
	}
	for (int i = 0; i < BMS_N; i++) {
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	e00d      	b.n	8001bb2 <_Z12select_statev+0x192>
		BMS[i].BALANCING_V = MIN_V; //Here I say I wanna balance all the cells in the battery to the minimun
 8001b96:	4b57      	ldr	r3, [pc, #348]	@ (8001cf4 <_Z12select_statev+0x2d4>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	4958      	ldr	r1, [pc, #352]	@ (8001cfc <_Z12select_statev+0x2dc>)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 8001ba2:	fb00 f303 	mul.w	r3, r0, r3
 8001ba6:	440b      	add	r3, r1
 8001ba8:	3394      	adds	r3, #148	@ 0x94
 8001baa:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	4b54      	ldr	r3, [pc, #336]	@ (8001d04 <_Z12select_statev+0x2e4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	dbec      	blt.n	8001b96 <_Z12select_statev+0x176>

	}


	//flag_cpu = CPU.query(time, buffer); //Asking the rest of the car how is it
	flag_cpu = CPU_OK;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	613b      	str	r3, [r7, #16]

	flag_current = current.query(time, buffer); //asking current how is it
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	4a4f      	ldr	r2, [pc, #316]	@ (8001d00 <_Z12select_statev+0x2e0>)
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4853      	ldr	r0, [pc, #332]	@ (8001d14 <_Z12select_statev+0x2f4>)
 8001bc8:	f7ff f96c 	bl	8000ea4 <_ZN11Current_MOD5queryEiPc>
 8001bcc:	60f8      	str	r0, [r7, #12]
	printValue(state);
	print((char*)"voltage acu");
	printValue(CPU.voltage_acum);
	print((char*)"dc bus");
	printValue(CPU.DC_BUS);*/
	printValue(state);
 8001bce:	4b52      	ldr	r3, [pc, #328]	@ (8001d18 <_Z12select_statev+0x2f8>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fedc 	bl	8001990 <printValue>
	switch (state) {
 8001bd8:	4b4f      	ldr	r3, [pc, #316]	@ (8001d18 <_Z12select_statev+0x2f8>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	f200 80a6 	bhi.w	8001d2e <_Z12select_statev+0x30e>
 8001be2:	a201      	add	r2, pc, #4	@ (adr r2, 8001be8 <_Z12select_statev+0x1c8>)
 8001be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be8:	08001bfd 	.word	0x08001bfd
 8001bec:	08001c1f 	.word	0x08001c1f
 8001bf0:	08001c3b 	.word	0x08001c3b
 8001bf4:	08001c97 	.word	0x08001c97
 8001bf8:	08001ccf 	.word	0x08001ccf
	case start:
		state_air_n = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	623b      	str	r3, [r7, #32]
		state_precharge = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_DISCONNECTED);
 8001c08:	2102      	movs	r1, #2
 8001c0a:	4839      	ldr	r0, [pc, #228]	@ (8001cf0 <_Z12select_statev+0x2d0>)
 8001c0c:	f7ff f8ea 	bl	8000de4 <_ZN7CPU_MOD11updateStateEi>
		if (flag_cpu != CPU_ERROR_COMMUNICATION)
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d066      	beq.n	8001ce4 <_Z12select_statev+0x2c4>
			state = precharge; //If I do comunicate with the rest of the car, I go to precharge
 8001c16:	4b40      	ldr	r3, [pc, #256]	@ (8001d18 <_Z12select_statev+0x2f8>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	701a      	strb	r2, [r3, #0]
		break;
 8001c1c:	e062      	b.n	8001ce4 <_Z12select_statev+0x2c4>
	case precharge:
		state_air_n = 1;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	623b      	str	r3, [r7, #32]
		state_precharge = 1;
 8001c26:	2301      	movs	r3, #1
 8001c28:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_PRECHARGE);
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	4830      	ldr	r0, [pc, #192]	@ (8001cf0 <_Z12select_statev+0x2d0>)
 8001c2e:	f7ff f8d9 	bl	8000de4 <_ZN7CPU_MOD11updateStateEi>
		//if (flag_cpu == CPU_OK) {
			state = transition;
 8001c32:	4b39      	ldr	r3, [pc, #228]	@ (8001d18 <_Z12select_statev+0x2f8>)
 8001c34:	2202      	movs	r2, #2
 8001c36:	701a      	strb	r2, [r3, #0]
		//} else if (flag_cpu == CPU_ERROR_COMMUNICATION)
			//state = error;
		 //else if(flag_current != Current_OK) state = error; //I take this out cause in precharge current can be very high, but probably can be uncommented,
		break;
 8001c38:	e079      	b.n	8001d2e <_Z12select_statev+0x30e>
	case transition:
		state_air_n = 1;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	623b      	str	r3, [r7, #32]
		state_precharge = 1;
 8001c42:	2301      	movs	r3, #1
 8001c44:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_PRECHARGE);
 8001c46:	2101      	movs	r1, #1
 8001c48:	4829      	ldr	r0, [pc, #164]	@ (8001cf0 <_Z12select_statev+0x2d0>)
 8001c4a:	f7ff f8cb 	bl	8000de4 <_ZN7CPU_MOD11updateStateEi>
		if ((((CPU.voltage_acum)/1000) * 0.9 < CPU.DC_BUS) && (CPU.voltage_acum != 0)){
 8001c4e:	4b28      	ldr	r3, [pc, #160]	@ (8001cf0 <_Z12select_statev+0x2d0>)
 8001c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c52:	4a32      	ldr	r2, [pc, #200]	@ (8001d1c <_Z12select_statev+0x2fc>)
 8001c54:	fb82 1203 	smull	r1, r2, r2, r3
 8001c58:	1192      	asrs	r2, r2, #6
 8001c5a:	17db      	asrs	r3, r3, #31
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	ee07 3a90 	vmov	s15, r3
 8001c62:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001c66:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8001ce8 <_Z12select_statev+0x2c8>
 8001c6a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c6e:	4b20      	ldr	r3, [pc, #128]	@ (8001cf0 <_Z12select_statev+0x2d0>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	ee07 3a90 	vmov	s15, r3
 8001c76:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001c7a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c82:	d400      	bmi.n	8001c86 <_Z12select_statev+0x266>
			state = run; //If DC_BUS voltage is higher than 90% of battery voltage, precharge finish
		//}else if((flag_cpu == CPU_ERROR_COMMUNICATION)&&(flag_charger == 1)) state = error;
		 //else if(flag_current != Current_OK) state = error;
		}
		break;
 8001c84:	e052      	b.n	8001d2c <_Z12select_statev+0x30c>
		if ((((CPU.voltage_acum)/1000) * 0.9 < CPU.DC_BUS) && (CPU.voltage_acum != 0)){
 8001c86:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf0 <_Z12select_statev+0x2d0>)
 8001c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d04e      	beq.n	8001d2c <_Z12select_statev+0x30c>
			state = run; //If DC_BUS voltage is higher than 90% of battery voltage, precharge finish
 8001c8e:	4b22      	ldr	r3, [pc, #136]	@ (8001d18 <_Z12select_statev+0x2f8>)
 8001c90:	2203      	movs	r2, #3
 8001c92:	701a      	strb	r2, [r3, #0]
		break;
 8001c94:	e04a      	b.n	8001d2c <_Z12select_statev+0x30c>
	case run:
		state_air_n = 1;
 8001c96:	2301      	movs	r3, #1
 8001c98:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 1;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	623b      	str	r3, [r7, #32]
		state_precharge = 1;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_POWER);
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4812      	ldr	r0, [pc, #72]	@ (8001cf0 <_Z12select_statev+0x2d0>)
 8001ca6:	f7ff f89d 	bl	8000de4 <_ZN7CPU_MOD11updateStateEi>
		if ((flag_cpu == CPU_ERROR_COMMUNICATION) && (flag_charger == 1)){
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d106      	bne.n	8001cbe <_Z12select_statev+0x29e>
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d20 <_Z12select_statev+0x300>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d102      	bne.n	8001cbe <_Z12select_statev+0x29e>
			//state = error; //If I disconnect the charger, error
			print((char*)"CPU");
 8001cb8:	481a      	ldr	r0, [pc, #104]	@ (8001d24 <_Z12select_statev+0x304>)
 8001cba:	f7ff fe4b 	bl	8001954 <print>
		}
		if (flag_current != Current_OK){
			//state = error; //If current is too high, error
		}
		if(HAL_GPIO_ReadPin(DIGITAL1_GPIO_Port, DIGITAL1_Pin) == GPIO_PIN_RESET){ //SDC IO
 8001cbe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cc2:	4819      	ldr	r0, [pc, #100]	@ (8001d28 <_Z12select_statev+0x308>)
 8001cc4:	f004 f8fe 	bl	8005ec4 <HAL_GPIO_ReadPin>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
			//state = error;
			//print((char*)"DIGITAL");
		}
		break;
 8001ccc:	e02f      	b.n	8001d2e <_Z12select_statev+0x30e>
	case error:
		state_air_n = 0; //All relés closed
 8001cce:	2300      	movs	r3, #0
 8001cd0:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	623b      	str	r3, [r7, #32]
		state_precharge = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_ERROR);
 8001cda:	2103      	movs	r1, #3
 8001cdc:	4804      	ldr	r0, [pc, #16]	@ (8001cf0 <_Z12select_statev+0x2d0>)
 8001cde:	f7ff f881 	bl	8000de4 <_ZN7CPU_MOD11updateStateEi>
		break;
 8001ce2:	e024      	b.n	8001d2e <_Z12select_statev+0x30e>
		break;
 8001ce4:	bf00      	nop
 8001ce6:	e022      	b.n	8001d2e <_Z12select_statev+0x30e>
 8001ce8:	cccccccd 	.word	0xcccccccd
 8001cec:	3feccccc 	.word	0x3feccccc
 8001cf0:	24000c20 	.word	0x24000c20
 8001cf4:	24000004 	.word	0x24000004
 8001cf8:	24000c14 	.word	0x24000c14
 8001cfc:	2400046c 	.word	0x2400046c
 8001d00:	24000ca0 	.word	0x24000ca0
 8001d04:	24000000 	.word	0x24000000
 8001d08:	24000c1c 	.word	0x24000c1c
 8001d0c:	24000c18 	.word	0x24000c18
 8001d10:	0800b5c4 	.word	0x0800b5c4
 8001d14:	24000c58 	.word	0x24000c58
 8001d18:	24000c9c 	.word	0x24000c9c
 8001d1c:	10624dd3 	.word	0x10624dd3
 8001d20:	24000c54 	.word	0x24000c54
 8001d24:	0800b5e4 	.word	0x0800b5e4
 8001d28:	58021000 	.word	0x58021000
		break;
 8001d2c:	bf00      	nop
	 print(buffer);
	 sprintf(buffer, " - STATE:     %i\n", state);
	 print(buffer);
	 sprintf(buffer, "***********************\n");
	 print(buffer);*/
	HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin,
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <_Z12select_statev+0x318>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <_Z12select_statev+0x31a>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	2180      	movs	r1, #128	@ 0x80
 8001d3e:	4814      	ldr	r0, [pc, #80]	@ (8001d90 <_Z12select_statev+0x370>)
 8001d40:	f004 f8d8 	bl	8005ef4 <HAL_GPIO_WritePin>
			state_air_n ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_AIR_N_GPIO_Port, RELAY_AIR_N_Pin,
 8001d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <_Z12select_statev+0x32e>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <_Z12select_statev+0x330>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	461a      	mov	r2, r3
 8001d52:	2108      	movs	r1, #8
 8001d54:	480f      	ldr	r0, [pc, #60]	@ (8001d94 <_Z12select_statev+0x374>)
 8001d56:	f004 f8cd 	bl	8005ef4 <HAL_GPIO_WritePin>
			state_air_n ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_AIR_P_GPIO_Port, RELAY_AIR_P_Pin,
 8001d5a:	6a3b      	ldr	r3, [r7, #32]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <_Z12select_statev+0x344>
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <_Z12select_statev+0x346>
 8001d64:	2300      	movs	r3, #0
 8001d66:	461a      	mov	r2, r3
 8001d68:	2110      	movs	r1, #16
 8001d6a:	480a      	ldr	r0, [pc, #40]	@ (8001d94 <_Z12select_statev+0x374>)
 8001d6c:	f004 f8c2 	bl	8005ef4 <HAL_GPIO_WritePin>
			state_air_p ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_PRECHARGE_GPIO_Port, RELAY_PRECHARGE_Pin,
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <_Z12select_statev+0x35a>
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <_Z12select_statev+0x35c>
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	2120      	movs	r1, #32
 8001d80:	4804      	ldr	r0, [pc, #16]	@ (8001d94 <_Z12select_statev+0x374>)
 8001d82:	f004 f8b7 	bl	8005ef4 <HAL_GPIO_WritePin>
	}




}
 8001d86:	bf00      	nop
 8001d88:	3728      	adds	r7, #40	@ 0x28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	58021800 	.word	0x58021800
 8001d94:	58020c00 	.word	0x58020c00

08001d98 <_Z11parse_state6CANMsg>:

/*********************************************************************************************************
 ** Function name:           parse_state
 ** Descriptions:            Function for analysing the data from the CAN
 *********************************************************************************************************/
void parse_state(CANMsg data) {
 8001d98:	b084      	sub	sp, #16
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b084      	sub	sp, #16
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	f107 0c18 	add.w	ip, r7, #24
 8001da4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t time = HAL_GetTick();
 8001da8:	f000 fc5c 	bl	8002664 <HAL_GetTick>
 8001dac:	6038      	str	r0, [r7, #0]
	bool flag_bms = false;
 8001dae:	2300      	movs	r3, #0
 8001db0:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; i < BMS_N; i++) {
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	e017      	b.n	8001de8 <_Z11parse_state6CANMsg+0x50>
		flag_bms = BMS[i].parse(data.id, &data.buf[0], data.time); //Checking if the message received is for  BMS
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8001dbe:	fb02 f303 	mul.w	r3, r2, r3
 8001dc2:	4a25      	ldr	r2, [pc, #148]	@ (8001e58 <_Z11parse_state6CANMsg+0xc0>)
 8001dc4:	1898      	adds	r0, r3, r2
 8001dc6:	69b9      	ldr	r1, [r7, #24]
 8001dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dca:	f107 021d 	add.w	r2, r7, #29
 8001dce:	f7fe fd59 	bl	8000884 <_ZN7BMS_MOD5parseEmPhm>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	73fb      	strb	r3, [r7, #15]
		if (flag_bms)
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <_Z11parse_state6CANMsg+0x4a>
			i = BMS_N;
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e5c <_Z11parse_state6CANMsg+0xc4>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < BMS_N; i++) {
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	3301      	adds	r3, #1
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e5c <_Z11parse_state6CANMsg+0xc4>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	dbe2      	blt.n	8001db8 <_Z11parse_state6CANMsg+0x20>
	}

	if (!flag_bms) {
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	f083 0301 	eor.w	r3, r3, #1
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d025      	beq.n	8001e4a <_Z11parse_state6CANMsg+0xb2>
		if (CPU.parse(data.id, &data.buf[0], time))
 8001dfe:	69b9      	ldr	r1, [r7, #24]
 8001e00:	f107 021d 	add.w	r2, r7, #29
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	4816      	ldr	r0, [pc, #88]	@ (8001e60 <_Z11parse_state6CANMsg+0xc8>)
 8001e08:	f7fe ffa8 	bl	8000d5c <_ZN7CPU_MOD5parseEmPhm>
			;                       //Cheking if message is for CPU
		if (data.id == 419385575) //If message from this direction received, it is because the charger is connected and the accu is for charging
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	4a15      	ldr	r2, [pc, #84]	@ (8001e64 <_Z11parse_state6CANMsg+0xcc>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d11a      	bne.n	8001e4a <_Z11parse_state6CANMsg+0xb2>
				{
			for (int i = 0; i < BMS_N; i++) {
 8001e14:	2300      	movs	r3, #0
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	e00c      	b.n	8001e34 <_Z11parse_state6CANMsg+0x9c>
				BMS[i].flag_charger = 1;
 8001e1a:	4a0f      	ldr	r2, [pc, #60]	@ (8001e58 <_Z11parse_state6CANMsg+0xc0>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001e22:	fb01 f303 	mul.w	r3, r1, r3
 8001e26:	4413      	add	r3, r2
 8001e28:	3398      	adds	r3, #152	@ 0x98
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < BMS_N; i++) {
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3301      	adds	r3, #1
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	4b09      	ldr	r3, [pc, #36]	@ (8001e5c <_Z11parse_state6CANMsg+0xc4>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	dbed      	blt.n	8001e1a <_Z11parse_state6CANMsg+0x82>
			}

			current.flag_charger = 1;
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e68 <_Z11parse_state6CANMsg+0xd0>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	63da      	str	r2, [r3, #60]	@ 0x3c
			flag_charger = 1;
 8001e44:	4b09      	ldr	r3, [pc, #36]	@ (8001e6c <_Z11parse_state6CANMsg+0xd4>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	601a      	str	r2, [r3, #0]
		} else {
			// Serial.print("ID: ");
			// Serial.println(data.id);
		}
	}
}
 8001e4a:	bf00      	nop
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e54:	b004      	add	sp, #16
 8001e56:	4770      	bx	lr
 8001e58:	2400046c 	.word	0x2400046c
 8001e5c:	24000000 	.word	0x24000000
 8001e60:	24000c20 	.word	0x24000c20
 8001e64:	18ff50e7 	.word	0x18ff50e7
 8001e68:	24000c58 	.word	0x24000c58
 8001e6c:	24000c54 	.word	0x24000c54

08001e70 <_Z41__static_initialization_and_destruction_0v>:
 8001e70:	b590      	push	{r4, r7, lr}
 8001e72:	b087      	sub	sp, #28
 8001e74:	af06      	add	r7, sp, #24
		};
 8001e76:	4c40      	ldr	r4, [pc, #256]	@ (8001f78 <_Z41__static_initialization_and_destruction_0v+0x108>)
 8001e78:	2337      	movs	r3, #55	@ 0x37
 8001e7a:	9304      	str	r3, [sp, #16]
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	9303      	str	r3, [sp, #12]
 8001e80:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001e84:	9302      	str	r3, [sp, #8]
 8001e86:	2313      	movs	r3, #19
 8001e88:	9301      	str	r3, [sp, #4]
 8001e8a:	233c      	movs	r3, #60	@ 0x3c
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8001e92:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001e96:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	f7fe fc26 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 8001ea0:	f504 74c4 	add.w	r4, r4, #392	@ 0x188
 8001ea4:	239b      	movs	r3, #155	@ 0x9b
 8001ea6:	9304      	str	r3, [sp, #16]
 8001ea8:	230a      	movs	r3, #10
 8001eaa:	9303      	str	r3, [sp, #12]
 8001eac:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001eb0:	9302      	str	r3, [sp, #8]
 8001eb2:	2313      	movs	r3, #19
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	233c      	movs	r3, #60	@ 0x3c
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8001ebe:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001ec2:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	f7fe fc10 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 8001ecc:	f504 74c4 	add.w	r4, r4, #392	@ 0x188
 8001ed0:	23ff      	movs	r3, #255	@ 0xff
 8001ed2:	9304      	str	r3, [sp, #16]
 8001ed4:	2314      	movs	r3, #20
 8001ed6:	9303      	str	r3, [sp, #12]
 8001ed8:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001edc:	9302      	str	r3, [sp, #8]
 8001ede:	2313      	movs	r3, #19
 8001ee0:	9301      	str	r3, [sp, #4]
 8001ee2:	233c      	movs	r3, #60	@ 0x3c
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8001eea:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001eee:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	f7fe fbfa 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 8001ef8:	f504 74c4 	add.w	r4, r4, #392	@ 0x188
 8001efc:	f240 1363 	movw	r3, #355	@ 0x163
 8001f00:	9304      	str	r3, [sp, #16]
 8001f02:	231e      	movs	r3, #30
 8001f04:	9303      	str	r3, [sp, #12]
 8001f06:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001f0a:	9302      	str	r3, [sp, #8]
 8001f0c:	2313      	movs	r3, #19
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	233c      	movs	r3, #60	@ 0x3c
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8001f18:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001f1c:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 8001f20:	4620      	mov	r0, r4
 8001f22:	f7fe fbe3 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 8001f26:	f504 70c4 	add.w	r0, r4, #392	@ 0x188
 8001f2a:	f240 13c7 	movw	r3, #455	@ 0x1c7
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	2328      	movs	r3, #40	@ 0x28
 8001f32:	9303      	str	r3, [sp, #12]
 8001f34:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001f38:	9302      	str	r3, [sp, #8]
 8001f3a:	2313      	movs	r3, #19
 8001f3c:	9301      	str	r3, [sp, #4]
 8001f3e:	233c      	movs	r3, #60	@ 0x3c
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8001f46:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001f4a:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8001f4e:	f7fe fbcd 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
CPU_MOD CPU(CPU_ID_send, CPU_ID_recv, 500); //Same with CPU, rest of vehicle
 8001f52:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001f56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f5a:	2120      	movs	r1, #32
 8001f5c:	4807      	ldr	r0, [pc, #28]	@ (8001f7c <_Z41__static_initialization_and_destruction_0v+0x10c>)
 8001f5e:	f7fe feab 	bl	8000cb8 <_ZN7CPU_MODC1Emmi>
Current_MOD current(Current_ID, Current_max); //Class for current measurement
 8001f62:	22c8      	movs	r2, #200	@ 0xc8
 8001f64:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8001f68:	4805      	ldr	r0, [pc, #20]	@ (8001f80 <_Z41__static_initialization_and_destruction_0v+0x110>)
 8001f6a:	f7fe ff4d 	bl	8000e08 <_ZN11Current_MODC1Emi>
}
 8001f6e:	bf00      	nop
 8001f70:	3704      	adds	r7, #4
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd90      	pop	{r4, r7, pc}
 8001f76:	bf00      	nop
 8001f78:	2400046c 	.word	0x2400046c
 8001f7c:	24000c20 	.word	0x24000c20
 8001f80:	24000c58 	.word	0x24000c58

08001f84 <_GLOBAL__sub_I_BMS>:
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	f7ff ff72 	bl	8001e70 <_Z41__static_initialization_and_destruction_0v>
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f96:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc0 <HAL_MspInit+0x30>)
 8001f98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f9c:	4a08      	ldr	r2, [pc, #32]	@ (8001fc0 <HAL_MspInit+0x30>)
 8001f9e:	f043 0302 	orr.w	r3, r3, #2
 8001fa2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001fa6:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <HAL_MspInit+0x30>)
 8001fa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	58024400 	.word	0x58024400

08001fc4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08c      	sub	sp, #48	@ 0x30
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	f107 031c 	add.w	r3, r7, #28
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a31      	ldr	r2, [pc, #196]	@ (80020a8 <HAL_ADC_MspInit+0xe4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d12b      	bne.n	800203e <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001fe6:	4b31      	ldr	r3, [pc, #196]	@ (80020ac <HAL_ADC_MspInit+0xe8>)
 8001fe8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fec:	4a2f      	ldr	r2, [pc, #188]	@ (80020ac <HAL_ADC_MspInit+0xe8>)
 8001fee:	f043 0320 	orr.w	r3, r3, #32
 8001ff2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001ff6:	4b2d      	ldr	r3, [pc, #180]	@ (80020ac <HAL_ADC_MspInit+0xe8>)
 8001ff8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001ffc:	f003 0320 	and.w	r3, r3, #32
 8002000:	61bb      	str	r3, [r7, #24]
 8002002:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002004:	4b29      	ldr	r3, [pc, #164]	@ (80020ac <HAL_ADC_MspInit+0xe8>)
 8002006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800200a:	4a28      	ldr	r2, [pc, #160]	@ (80020ac <HAL_ADC_MspInit+0xe8>)
 800200c:	f043 0320 	orr.w	r3, r3, #32
 8002010:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002014:	4b25      	ldr	r3, [pc, #148]	@ (80020ac <HAL_ADC_MspInit+0xe8>)
 8002016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800201a:	f003 0320 	and.w	r3, r3, #32
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002022:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002028:	2303      	movs	r3, #3
 800202a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002030:	f107 031c 	add.w	r3, r7, #28
 8002034:	4619      	mov	r1, r3
 8002036:	481e      	ldr	r0, [pc, #120]	@ (80020b0 <HAL_ADC_MspInit+0xec>)
 8002038:	f003 fd9c 	bl	8005b74 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 800203c:	e02f      	b.n	800209e <HAL_ADC_MspInit+0xda>
  else if(hadc->Instance==ADC3)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a1c      	ldr	r2, [pc, #112]	@ (80020b4 <HAL_ADC_MspInit+0xf0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d12a      	bne.n	800209e <HAL_ADC_MspInit+0xda>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002048:	4b18      	ldr	r3, [pc, #96]	@ (80020ac <HAL_ADC_MspInit+0xe8>)
 800204a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800204e:	4a17      	ldr	r2, [pc, #92]	@ (80020ac <HAL_ADC_MspInit+0xe8>)
 8002050:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002054:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002058:	4b14      	ldr	r3, [pc, #80]	@ (80020ac <HAL_ADC_MspInit+0xe8>)
 800205a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800205e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002066:	4b11      	ldr	r3, [pc, #68]	@ (80020ac <HAL_ADC_MspInit+0xe8>)
 8002068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800206c:	4a0f      	ldr	r2, [pc, #60]	@ (80020ac <HAL_ADC_MspInit+0xe8>)
 800206e:	f043 0320 	orr.w	r3, r3, #32
 8002072:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002076:	4b0d      	ldr	r3, [pc, #52]	@ (80020ac <HAL_ADC_MspInit+0xe8>)
 8002078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800207c:	f003 0320 	and.w	r3, r3, #32
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002084:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800208a:	2303      	movs	r3, #3
 800208c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002092:	f107 031c 	add.w	r3, r7, #28
 8002096:	4619      	mov	r1, r3
 8002098:	4805      	ldr	r0, [pc, #20]	@ (80020b0 <HAL_ADC_MspInit+0xec>)
 800209a:	f003 fd6b 	bl	8005b74 <HAL_GPIO_Init>
}
 800209e:	bf00      	nop
 80020a0:	3730      	adds	r7, #48	@ 0x30
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40022000 	.word	0x40022000
 80020ac:	58024400 	.word	0x58024400
 80020b0:	58021400 	.word	0x58021400
 80020b4:	58026000 	.word	0x58026000

080020b8 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b0ba      	sub	sp, #232	@ 0xe8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020d0:	f107 0318 	add.w	r3, r7, #24
 80020d4:	22b8      	movs	r2, #184	@ 0xb8
 80020d6:	2100      	movs	r1, #0
 80020d8:	4618      	mov	r0, r3
 80020da:	f008 fd3b 	bl	800ab54 <memset>
  if(hfdcan->Instance==FDCAN1)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a5a      	ldr	r2, [pc, #360]	@ (800224c <HAL_FDCAN_MspInit+0x194>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d157      	bne.n	8002198 <HAL_FDCAN_MspInit+0xe0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80020e8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020fa:	f107 0318 	add.w	r3, r7, #24
 80020fe:	4618      	mov	r0, r3
 8002100:	f004 feb2 	bl	8006e68 <HAL_RCCEx_PeriphCLKConfig>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 800210a:	f7ff fc81 	bl	8001a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800210e:	4b50      	ldr	r3, [pc, #320]	@ (8002250 <HAL_FDCAN_MspInit+0x198>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	3301      	adds	r3, #1
 8002114:	4a4e      	ldr	r2, [pc, #312]	@ (8002250 <HAL_FDCAN_MspInit+0x198>)
 8002116:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002118:	4b4d      	ldr	r3, [pc, #308]	@ (8002250 <HAL_FDCAN_MspInit+0x198>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d10e      	bne.n	800213e <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002120:	4b4c      	ldr	r3, [pc, #304]	@ (8002254 <HAL_FDCAN_MspInit+0x19c>)
 8002122:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002126:	4a4b      	ldr	r2, [pc, #300]	@ (8002254 <HAL_FDCAN_MspInit+0x19c>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800212c:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002130:	4b48      	ldr	r3, [pc, #288]	@ (8002254 <HAL_FDCAN_MspInit+0x19c>)
 8002132:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800213e:	4b45      	ldr	r3, [pc, #276]	@ (8002254 <HAL_FDCAN_MspInit+0x19c>)
 8002140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002144:	4a43      	ldr	r2, [pc, #268]	@ (8002254 <HAL_FDCAN_MspInit+0x19c>)
 8002146:	f043 0308 	orr.w	r3, r3, #8
 800214a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800214e:	4b41      	ldr	r3, [pc, #260]	@ (8002254 <HAL_FDCAN_MspInit+0x19c>)
 8002150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800215c:	2303      	movs	r3, #3
 800215e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	2300      	movs	r3, #0
 8002170:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002174:	2309      	movs	r3, #9
 8002176:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800217a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800217e:	4619      	mov	r1, r3
 8002180:	4835      	ldr	r0, [pc, #212]	@ (8002258 <HAL_FDCAN_MspInit+0x1a0>)
 8002182:	f003 fcf7 	bl	8005b74 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002186:	2200      	movs	r2, #0
 8002188:	2100      	movs	r1, #0
 800218a:	2013      	movs	r0, #19
 800218c:	f002 faef 	bl	800476e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002190:	2013      	movs	r0, #19
 8002192:	f002 fb06 	bl	80047a2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN FDCAN2_MspInit 1 */

    /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002196:	e054      	b.n	8002242 <HAL_FDCAN_MspInit+0x18a>
  else if(hfdcan->Instance==FDCAN2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a2f      	ldr	r2, [pc, #188]	@ (800225c <HAL_FDCAN_MspInit+0x1a4>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d14f      	bne.n	8002242 <HAL_FDCAN_MspInit+0x18a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80021a2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80021a6:	f04f 0300 	mov.w	r3, #0
 80021aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021b4:	f107 0318 	add.w	r3, r7, #24
 80021b8:	4618      	mov	r0, r3
 80021ba:	f004 fe55 	bl	8006e68 <HAL_RCCEx_PeriphCLKConfig>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 80021c4:	f7ff fc24 	bl	8001a10 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80021c8:	4b21      	ldr	r3, [pc, #132]	@ (8002250 <HAL_FDCAN_MspInit+0x198>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	3301      	adds	r3, #1
 80021ce:	4a20      	ldr	r2, [pc, #128]	@ (8002250 <HAL_FDCAN_MspInit+0x198>)
 80021d0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80021d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002250 <HAL_FDCAN_MspInit+0x198>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d10e      	bne.n	80021f8 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80021da:	4b1e      	ldr	r3, [pc, #120]	@ (8002254 <HAL_FDCAN_MspInit+0x19c>)
 80021dc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80021e0:	4a1c      	ldr	r2, [pc, #112]	@ (8002254 <HAL_FDCAN_MspInit+0x19c>)
 80021e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021e6:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80021ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002254 <HAL_FDCAN_MspInit+0x19c>)
 80021ec:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80021f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f8:	4b16      	ldr	r3, [pc, #88]	@ (8002254 <HAL_FDCAN_MspInit+0x19c>)
 80021fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021fe:	4a15      	ldr	r2, [pc, #84]	@ (8002254 <HAL_FDCAN_MspInit+0x19c>)
 8002200:	f043 0302 	orr.w	r3, r3, #2
 8002204:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002208:	4b12      	ldr	r3, [pc, #72]	@ (8002254 <HAL_FDCAN_MspInit+0x19c>)
 800220a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002216:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800221a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221e:	2302      	movs	r3, #2
 8002220:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222a:	2300      	movs	r3, #0
 800222c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002230:	2309      	movs	r3, #9
 8002232:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002236:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800223a:	4619      	mov	r1, r3
 800223c:	4808      	ldr	r0, [pc, #32]	@ (8002260 <HAL_FDCAN_MspInit+0x1a8>)
 800223e:	f003 fc99 	bl	8005b74 <HAL_GPIO_Init>
}
 8002242:	bf00      	nop
 8002244:	37e8      	adds	r7, #232	@ 0xe8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	4000a000 	.word	0x4000a000
 8002250:	24000cf0 	.word	0x24000cf0
 8002254:	58024400 	.word	0x58024400
 8002258:	58020c00 	.word	0x58020c00
 800225c:	4000a400 	.word	0x4000a400
 8002260:	58020400 	.word	0x58020400

08002264 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b0b8      	sub	sp, #224	@ 0xe0
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800227c:	f107 0310 	add.w	r3, r7, #16
 8002280:	22b8      	movs	r2, #184	@ 0xb8
 8002282:	2100      	movs	r1, #0
 8002284:	4618      	mov	r0, r3
 8002286:	f008 fc65 	bl	800ab54 <memset>
  if(huart->Instance==USART2)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a26      	ldr	r2, [pc, #152]	@ (8002328 <HAL_UART_MspInit+0xc4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d145      	bne.n	8002320 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002294:	f04f 0202 	mov.w	r2, #2
 8002298:	f04f 0300 	mov.w	r3, #0
 800229c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022a6:	f107 0310 	add.w	r3, r7, #16
 80022aa:	4618      	mov	r0, r3
 80022ac:	f004 fddc 	bl	8006e68 <HAL_RCCEx_PeriphCLKConfig>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80022b6:	f7ff fbab 	bl	8001a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022ba:	4b1c      	ldr	r3, [pc, #112]	@ (800232c <HAL_UART_MspInit+0xc8>)
 80022bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022c0:	4a1a      	ldr	r2, [pc, #104]	@ (800232c <HAL_UART_MspInit+0xc8>)
 80022c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022c6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022ca:	4b18      	ldr	r3, [pc, #96]	@ (800232c <HAL_UART_MspInit+0xc8>)
 80022cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d8:	4b14      	ldr	r3, [pc, #80]	@ (800232c <HAL_UART_MspInit+0xc8>)
 80022da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022de:	4a13      	ldr	r2, [pc, #76]	@ (800232c <HAL_UART_MspInit+0xc8>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022e8:	4b10      	ldr	r3, [pc, #64]	@ (800232c <HAL_UART_MspInit+0xc8>)
 80022ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022f6:	230c      	movs	r3, #12
 80022f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002308:	2300      	movs	r3, #0
 800230a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800230e:	2307      	movs	r3, #7
 8002310:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002314:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002318:	4619      	mov	r1, r3
 800231a:	4805      	ldr	r0, [pc, #20]	@ (8002330 <HAL_UART_MspInit+0xcc>)
 800231c:	f003 fc2a 	bl	8005b74 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002320:	bf00      	nop
 8002322:	37e0      	adds	r7, #224	@ 0xe0
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40004400 	.word	0x40004400
 800232c:	58024400 	.word	0x58024400
 8002330:	58020000 	.word	0x58020000

08002334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002338:	bf00      	nop
 800233a:	e7fd      	b.n	8002338 <NMI_Handler+0x4>

0800233c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002340:	bf00      	nop
 8002342:	e7fd      	b.n	8002340 <HardFault_Handler+0x4>

08002344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002348:	bf00      	nop
 800234a:	e7fd      	b.n	8002348 <MemManage_Handler+0x4>

0800234c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002350:	bf00      	nop
 8002352:	e7fd      	b.n	8002350 <BusFault_Handler+0x4>

08002354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002358:	bf00      	nop
 800235a:	e7fd      	b.n	8002358 <UsageFault_Handler+0x4>

0800235c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800238a:	f000 f957 	bl	800263c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002398:	4802      	ldr	r0, [pc, #8]	@ (80023a4 <FDCAN1_IT0_IRQHandler+0x10>)
 800239a:	f002 fedd 	bl	8005158 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	24000164 	.word	0x24000164

080023a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023b0:	4a14      	ldr	r2, [pc, #80]	@ (8002404 <_sbrk+0x5c>)
 80023b2:	4b15      	ldr	r3, [pc, #84]	@ (8002408 <_sbrk+0x60>)
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023bc:	4b13      	ldr	r3, [pc, #76]	@ (800240c <_sbrk+0x64>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d102      	bne.n	80023ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c4:	4b11      	ldr	r3, [pc, #68]	@ (800240c <_sbrk+0x64>)
 80023c6:	4a12      	ldr	r2, [pc, #72]	@ (8002410 <_sbrk+0x68>)
 80023c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ca:	4b10      	ldr	r3, [pc, #64]	@ (800240c <_sbrk+0x64>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d207      	bcs.n	80023e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d8:	f008 fbc4 	bl	800ab64 <__errno>
 80023dc:	4603      	mov	r3, r0
 80023de:	220c      	movs	r2, #12
 80023e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023e2:	f04f 33ff 	mov.w	r3, #4294967295
 80023e6:	e009      	b.n	80023fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e8:	4b08      	ldr	r3, [pc, #32]	@ (800240c <_sbrk+0x64>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ee:	4b07      	ldr	r3, [pc, #28]	@ (800240c <_sbrk+0x64>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	4a05      	ldr	r2, [pc, #20]	@ (800240c <_sbrk+0x64>)
 80023f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023fa:	68fb      	ldr	r3, [r7, #12]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	24050000 	.word	0x24050000
 8002408:	00000400 	.word	0x00000400
 800240c:	24000cf4 	.word	0x24000cf4
 8002410:	24000e48 	.word	0x24000e48

08002414 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002418:	4b32      	ldr	r3, [pc, #200]	@ (80024e4 <SystemInit+0xd0>)
 800241a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800241e:	4a31      	ldr	r2, [pc, #196]	@ (80024e4 <SystemInit+0xd0>)
 8002420:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002424:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002428:	4b2f      	ldr	r3, [pc, #188]	@ (80024e8 <SystemInit+0xd4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 030f 	and.w	r3, r3, #15
 8002430:	2b06      	cmp	r3, #6
 8002432:	d807      	bhi.n	8002444 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002434:	4b2c      	ldr	r3, [pc, #176]	@ (80024e8 <SystemInit+0xd4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f023 030f 	bic.w	r3, r3, #15
 800243c:	4a2a      	ldr	r2, [pc, #168]	@ (80024e8 <SystemInit+0xd4>)
 800243e:	f043 0307 	orr.w	r3, r3, #7
 8002442:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002444:	4b29      	ldr	r3, [pc, #164]	@ (80024ec <SystemInit+0xd8>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a28      	ldr	r2, [pc, #160]	@ (80024ec <SystemInit+0xd8>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002450:	4b26      	ldr	r3, [pc, #152]	@ (80024ec <SystemInit+0xd8>)
 8002452:	2200      	movs	r2, #0
 8002454:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002456:	4b25      	ldr	r3, [pc, #148]	@ (80024ec <SystemInit+0xd8>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	4924      	ldr	r1, [pc, #144]	@ (80024ec <SystemInit+0xd8>)
 800245c:	4b24      	ldr	r3, [pc, #144]	@ (80024f0 <SystemInit+0xdc>)
 800245e:	4013      	ands	r3, r2
 8002460:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002462:	4b21      	ldr	r3, [pc, #132]	@ (80024e8 <SystemInit+0xd4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d007      	beq.n	800247e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800246e:	4b1e      	ldr	r3, [pc, #120]	@ (80024e8 <SystemInit+0xd4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 030f 	bic.w	r3, r3, #15
 8002476:	4a1c      	ldr	r2, [pc, #112]	@ (80024e8 <SystemInit+0xd4>)
 8002478:	f043 0307 	orr.w	r3, r3, #7
 800247c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800247e:	4b1b      	ldr	r3, [pc, #108]	@ (80024ec <SystemInit+0xd8>)
 8002480:	2200      	movs	r2, #0
 8002482:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002484:	4b19      	ldr	r3, [pc, #100]	@ (80024ec <SystemInit+0xd8>)
 8002486:	2200      	movs	r2, #0
 8002488:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800248a:	4b18      	ldr	r3, [pc, #96]	@ (80024ec <SystemInit+0xd8>)
 800248c:	2200      	movs	r2, #0
 800248e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002490:	4b16      	ldr	r3, [pc, #88]	@ (80024ec <SystemInit+0xd8>)
 8002492:	4a18      	ldr	r2, [pc, #96]	@ (80024f4 <SystemInit+0xe0>)
 8002494:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002496:	4b15      	ldr	r3, [pc, #84]	@ (80024ec <SystemInit+0xd8>)
 8002498:	4a17      	ldr	r2, [pc, #92]	@ (80024f8 <SystemInit+0xe4>)
 800249a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800249c:	4b13      	ldr	r3, [pc, #76]	@ (80024ec <SystemInit+0xd8>)
 800249e:	4a17      	ldr	r2, [pc, #92]	@ (80024fc <SystemInit+0xe8>)
 80024a0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80024a2:	4b12      	ldr	r3, [pc, #72]	@ (80024ec <SystemInit+0xd8>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80024a8:	4b10      	ldr	r3, [pc, #64]	@ (80024ec <SystemInit+0xd8>)
 80024aa:	4a14      	ldr	r2, [pc, #80]	@ (80024fc <SystemInit+0xe8>)
 80024ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80024ae:	4b0f      	ldr	r3, [pc, #60]	@ (80024ec <SystemInit+0xd8>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80024b4:	4b0d      	ldr	r3, [pc, #52]	@ (80024ec <SystemInit+0xd8>)
 80024b6:	4a11      	ldr	r2, [pc, #68]	@ (80024fc <SystemInit+0xe8>)
 80024b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80024ba:	4b0c      	ldr	r3, [pc, #48]	@ (80024ec <SystemInit+0xd8>)
 80024bc:	2200      	movs	r2, #0
 80024be:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024c0:	4b0a      	ldr	r3, [pc, #40]	@ (80024ec <SystemInit+0xd8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a09      	ldr	r2, [pc, #36]	@ (80024ec <SystemInit+0xd8>)
 80024c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80024cc:	4b07      	ldr	r3, [pc, #28]	@ (80024ec <SystemInit+0xd8>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80024d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002500 <SystemInit+0xec>)
 80024d4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80024d8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80024da:	bf00      	nop
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	e000ed00 	.word	0xe000ed00
 80024e8:	52002000 	.word	0x52002000
 80024ec:	58024400 	.word	0x58024400
 80024f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80024f4:	02020200 	.word	0x02020200
 80024f8:	01ff0000 	.word	0x01ff0000
 80024fc:	01010280 	.word	0x01010280
 8002500:	52004000 	.word	0x52004000

08002504 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002504:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800253c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002508:	f7ff ff84 	bl	8002414 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800250c:	480c      	ldr	r0, [pc, #48]	@ (8002540 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800250e:	490d      	ldr	r1, [pc, #52]	@ (8002544 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002510:	4a0d      	ldr	r2, [pc, #52]	@ (8002548 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002514:	e002      	b.n	800251c <LoopCopyDataInit>

08002516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800251a:	3304      	adds	r3, #4

0800251c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800251c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800251e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002520:	d3f9      	bcc.n	8002516 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002522:	4a0a      	ldr	r2, [pc, #40]	@ (800254c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002524:	4c0a      	ldr	r4, [pc, #40]	@ (8002550 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002528:	e001      	b.n	800252e <LoopFillZerobss>

0800252a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800252a:	6013      	str	r3, [r2, #0]
   adds r2, r2, #4
 800252c:	3204      	adds	r2, #4

0800252e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800252e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002530:	d3fb      	bcc.n	800252a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002532:	f008 fb1d 	bl	800ab70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002536:	f7fe fceb 	bl	8000f10 <main>
  bx  lr
 800253a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800253c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002540:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002544:	24000068 	.word	0x24000068
  ldr r2, =_sidata
 8002548:	0800b6c4 	.word	0x0800b6c4
  ldr r2, =_sbss
 800254c:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 8002550:	24000e44 	.word	0x24000e44

08002554 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002554:	e7fe      	b.n	8002554 <ADC3_IRQHandler>
	...

08002558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800255e:	2003      	movs	r0, #3
 8002560:	f002 f8fa 	bl	8004758 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002564:	f004 faaa 	bl	8006abc <HAL_RCC_GetSysClockFreq>
 8002568:	4602      	mov	r2, r0
 800256a:	4b15      	ldr	r3, [pc, #84]	@ (80025c0 <HAL_Init+0x68>)
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	0a1b      	lsrs	r3, r3, #8
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	4913      	ldr	r1, [pc, #76]	@ (80025c4 <HAL_Init+0x6c>)
 8002576:	5ccb      	ldrb	r3, [r1, r3]
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
 8002580:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002582:	4b0f      	ldr	r3, [pc, #60]	@ (80025c0 <HAL_Init+0x68>)
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	4a0e      	ldr	r2, [pc, #56]	@ (80025c4 <HAL_Init+0x6c>)
 800258c:	5cd3      	ldrb	r3, [r2, r3]
 800258e:	f003 031f 	and.w	r3, r3, #31
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	fa22 f303 	lsr.w	r3, r2, r3
 8002598:	4a0b      	ldr	r2, [pc, #44]	@ (80025c8 <HAL_Init+0x70>)
 800259a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800259c:	4a0b      	ldr	r2, [pc, #44]	@ (80025cc <HAL_Init+0x74>)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025a2:	200f      	movs	r0, #15
 80025a4:	f000 f814 	bl	80025d0 <HAL_InitTick>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e002      	b.n	80025b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80025b2:	f7ff fced 	bl	8001f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	58024400 	.word	0x58024400
 80025c4:	0800b634 	.word	0x0800b634
 80025c8:	2400000c 	.word	0x2400000c
 80025cc:	24000008 	.word	0x24000008

080025d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80025d8:	4b15      	ldr	r3, [pc, #84]	@ (8002630 <HAL_InitTick+0x60>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e021      	b.n	8002628 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80025e4:	4b13      	ldr	r3, [pc, #76]	@ (8002634 <HAL_InitTick+0x64>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4b11      	ldr	r3, [pc, #68]	@ (8002630 <HAL_InitTick+0x60>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	4619      	mov	r1, r3
 80025ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fa:	4618      	mov	r0, r3
 80025fc:	f002 f8df 	bl	80047be <HAL_SYSTICK_Config>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e00e      	b.n	8002628 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b0f      	cmp	r3, #15
 800260e:	d80a      	bhi.n	8002626 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002610:	2200      	movs	r2, #0
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	f04f 30ff 	mov.w	r0, #4294967295
 8002618:	f002 f8a9 	bl	800476e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800261c:	4a06      	ldr	r2, [pc, #24]	@ (8002638 <HAL_InitTick+0x68>)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	e000      	b.n	8002628 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	24000014 	.word	0x24000014
 8002634:	24000008 	.word	0x24000008
 8002638:	24000010 	.word	0x24000010

0800263c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002640:	4b06      	ldr	r3, [pc, #24]	@ (800265c <HAL_IncTick+0x20>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	4b06      	ldr	r3, [pc, #24]	@ (8002660 <HAL_IncTick+0x24>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4413      	add	r3, r2
 800264c:	4a04      	ldr	r2, [pc, #16]	@ (8002660 <HAL_IncTick+0x24>)
 800264e:	6013      	str	r3, [r2, #0]
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	24000014 	.word	0x24000014
 8002660:	24000cf8 	.word	0x24000cf8

08002664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return uwTick;
 8002668:	4b03      	ldr	r3, [pc, #12]	@ (8002678 <HAL_GetTick+0x14>)
 800266a:	681b      	ldr	r3, [r3, #0]
}
 800266c:	4618      	mov	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	24000cf8 	.word	0x24000cf8

0800267c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	609a      	str	r2, [r3, #8]
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	609a      	str	r2, [r3, #8]
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80026d8:	4618      	mov	r0, r3
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a18      	ldr	r2, [pc, #96]	@ (8002754 <LL_ADC_SetChannelPreselection+0x70>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d027      	beq.n	8002746 <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d107      	bne.n	8002710 <LL_ADC_SetChannelPreselection+0x2c>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	0e9b      	lsrs	r3, r3, #26
 8002704:	f003 031f 	and.w	r3, r3, #31
 8002708:	2201      	movs	r2, #1
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	e015      	b.n	800273c <LL_ADC_SetChannelPreselection+0x58>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	fa93 f3a3 	rbit	r3, r3
 800271a:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8002726:	2320      	movs	r3, #32
 8002728:	e003      	b.n	8002732 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	fab3 f383 	clz	r3, r3
 8002730:	b2db      	uxtb	r3, r3
 8002732:	f003 031f 	and.w	r3, r3, #31
 8002736:	2201      	movs	r2, #1
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	69d2      	ldr	r2, [r2, #28]
 8002740:	431a      	orrs	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8002746:	bf00      	nop
 8002748:	371c      	adds	r7, #28
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	58026000 	.word	0x58026000

08002758 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
 8002764:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	3360      	adds	r3, #96	@ 0x60
 800276a:	461a      	mov	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4a10      	ldr	r2, [pc, #64]	@ (80027b8 <LL_ADC_SetOffset+0x60>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d10b      	bne.n	8002794 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	4313      	orrs	r3, r2
 800278a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002792:	e00b      	b.n	80027ac <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	430b      	orrs	r3, r1
 80027a6:	431a      	orrs	r2, r3
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	601a      	str	r2, [r3, #0]
}
 80027ac:	bf00      	nop
 80027ae:	371c      	adds	r7, #28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	58026000 	.word	0x58026000

080027bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3360      	adds	r3, #96	@ 0x60
 80027ca:	461a      	mov	r2, r3
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f003 031f 	and.w	r3, r3, #31
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	fa01 f303 	lsl.w	r3, r1, r3
 8002808:	431a      	orrs	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	611a      	str	r2, [r3, #16]
}
 800280e:	bf00      	nop
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800281c:	b480      	push	{r7}
 800281e:	b087      	sub	sp, #28
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4a0c      	ldr	r2, [pc, #48]	@ (800285c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d00e      	beq.n	800284e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	3360      	adds	r3, #96	@ 0x60
 8002834:	461a      	mov	r2, r3
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	431a      	orrs	r2, r3
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	601a      	str	r2, [r3, #0]
  }
}
 800284e:	bf00      	nop
 8002850:	371c      	adds	r7, #28
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	58026000 	.word	0x58026000

08002860 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002860:	b480      	push	{r7}
 8002862:	b087      	sub	sp, #28
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4a0c      	ldr	r2, [pc, #48]	@ (80028a0 <LL_ADC_SetOffsetSaturation+0x40>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d10e      	bne.n	8002892 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	3360      	adds	r3, #96	@ 0x60
 8002878:	461a      	mov	r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	431a      	orrs	r2, r3
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002892:	bf00      	nop
 8002894:	371c      	adds	r7, #28
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	58026000 	.word	0x58026000

080028a4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b087      	sub	sp, #28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4a0c      	ldr	r2, [pc, #48]	@ (80028e4 <LL_ADC_SetOffsetSign+0x40>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d10e      	bne.n	80028d6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	3360      	adds	r3, #96	@ 0x60
 80028bc:	461a      	mov	r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	431a      	orrs	r2, r3
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80028d6:	bf00      	nop
 80028d8:	371c      	adds	r7, #28
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	58026000 	.word	0x58026000

080028e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	3360      	adds	r3, #96	@ 0x60
 80028f8:	461a      	mov	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4a0c      	ldr	r2, [pc, #48]	@ (8002938 <LL_ADC_SetOffsetState+0x50>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d108      	bne.n	800291c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	431a      	orrs	r2, r3
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800291a:	e007      	b.n	800292c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	431a      	orrs	r2, r3
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	601a      	str	r2, [r3, #0]
}
 800292c:	bf00      	nop
 800292e:	371c      	adds	r7, #28
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	58026000 	.word	0x58026000

0800293c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002950:	2301      	movs	r3, #1
 8002952:	e000      	b.n	8002956 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002962:	b480      	push	{r7}
 8002964:	b087      	sub	sp, #28
 8002966:	af00      	add	r7, sp, #0
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	3330      	adds	r3, #48	@ 0x30
 8002972:	461a      	mov	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	4413      	add	r3, r2
 8002980:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	211f      	movs	r1, #31
 800298e:	fa01 f303 	lsl.w	r3, r1, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	401a      	ands	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	0e9b      	lsrs	r3, r3, #26
 800299a:	f003 011f 	and.w	r1, r3, #31
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f003 031f 	and.w	r3, r3, #31
 80029a4:	fa01 f303 	lsl.w	r3, r1, r3
 80029a8:	431a      	orrs	r2, r3
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029ae:	bf00      	nop
 80029b0:	371c      	adds	r7, #28
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b087      	sub	sp, #28
 80029be:	af00      	add	r7, sp, #0
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	3314      	adds	r3, #20
 80029ca:	461a      	mov	r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	0e5b      	lsrs	r3, r3, #25
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	4413      	add	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	0d1b      	lsrs	r3, r3, #20
 80029e2:	f003 031f 	and.w	r3, r3, #31
 80029e6:	2107      	movs	r1, #7
 80029e8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	401a      	ands	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	0d1b      	lsrs	r3, r3, #20
 80029f4:	f003 031f 	and.w	r3, r3, #31
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	fa01 f303 	lsl.w	r3, r1, r3
 80029fe:	431a      	orrs	r2, r3
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a04:	bf00      	nop
 8002a06:	371c      	adds	r7, #28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4a1a      	ldr	r2, [pc, #104]	@ (8002a88 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d115      	bne.n	8002a50 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a30:	43db      	mvns	r3, r3
 8002a32:	401a      	ands	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f003 0318 	and.w	r3, r3, #24
 8002a3a:	4914      	ldr	r1, [pc, #80]	@ (8002a8c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002a3c:	40d9      	lsrs	r1, r3
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	400b      	ands	r3, r1
 8002a42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a46:	431a      	orrs	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002a4e:	e014      	b.n	8002a7a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	401a      	ands	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f003 0318 	and.w	r3, r3, #24
 8002a66:	4909      	ldr	r1, [pc, #36]	@ (8002a8c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002a68:	40d9      	lsrs	r1, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	400b      	ands	r3, r1
 8002a6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a72:	431a      	orrs	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002a7a:	bf00      	nop
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	58026000 	.word	0x58026000
 8002a8c:	000fffff 	.word	0x000fffff

08002a90 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 031f 	and.w	r3, r3, #31
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	4b04      	ldr	r3, [pc, #16]	@ (8002ae8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6093      	str	r3, [r2, #8]
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	5fffffc0 	.word	0x5fffffc0

08002aec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002afc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b00:	d101      	bne.n	8002b06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	4b05      	ldr	r3, [pc, #20]	@ (8002b38 <LL_ADC_EnableInternalRegulator+0x24>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	6fffffc0 	.word	0x6fffffc0

08002b3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b50:	d101      	bne.n	8002b56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	4b05      	ldr	r3, [pc, #20]	@ (8002b88 <LL_ADC_Enable+0x24>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	f043 0201 	orr.w	r2, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	7fffffc0 	.word	0x7fffffc0

08002b8c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	4b05      	ldr	r3, [pc, #20]	@ (8002bb0 <LL_ADC_Disable+0x24>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	f043 0202 	orr.w	r2, r3, #2
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	7fffffc0 	.word	0x7fffffc0

08002bb4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <LL_ADC_IsEnabled+0x18>
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e000      	b.n	8002bce <LL_ADC_IsEnabled+0x1a>
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d101      	bne.n	8002bf2 <LL_ADC_IsDisableOngoing+0x18>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <LL_ADC_IsDisableOngoing+0x1a>
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	4b05      	ldr	r3, [pc, #20]	@ (8002c24 <LL_ADC_REG_StartConversion+0x24>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	f043 0204 	orr.w	r2, r3, #4
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	7fffffc0 	.word	0x7fffffc0

08002c28 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	4b05      	ldr	r3, [pc, #20]	@ (8002c4c <LL_ADC_REG_StopConversion+0x24>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	f043 0210 	orr.w	r2, r3, #16
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	7fffffc0 	.word	0x7fffffc0

08002c50 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d101      	bne.n	8002c68 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c64:	2301      	movs	r3, #1
 8002c66:	e000      	b.n	8002c6a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
	...

08002c78 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	4b05      	ldr	r3, [pc, #20]	@ (8002c9c <LL_ADC_INJ_StopConversion+0x24>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	f043 0220 	orr.w	r2, r3, #32
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	7fffffc0 	.word	0x7fffffc0

08002ca0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 0308 	and.w	r3, r3, #8
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d101      	bne.n	8002cb8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e000      	b.n	8002cba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cc8:	b590      	push	{r4, r7, lr}
 8002cca:	b089      	sub	sp, #36	@ 0x24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e1ee      	b.n	80030c0 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d109      	bne.n	8002d04 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7ff f967 	bl	8001fc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff feef 	bl	8002aec <LL_ADC_IsDeepPowerDownEnabled>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d004      	beq.n	8002d1e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff fed5 	bl	8002ac8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff ff0a 	bl	8002b3c <LL_ADC_IsInternalRegulatorEnabled>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d114      	bne.n	8002d58 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff feee 	bl	8002b14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d38:	4b8e      	ldr	r3, [pc, #568]	@ (8002f74 <HAL_ADC_Init+0x2ac>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	099b      	lsrs	r3, r3, #6
 8002d3e:	4a8e      	ldr	r2, [pc, #568]	@ (8002f78 <HAL_ADC_Init+0x2b0>)
 8002d40:	fba2 2303 	umull	r2, r3, r2, r3
 8002d44:	099b      	lsrs	r3, r3, #6
 8002d46:	3301      	adds	r3, #1
 8002d48:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d4a:	e002      	b.n	8002d52 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f9      	bne.n	8002d4c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff feed 	bl	8002b3c <LL_ADC_IsInternalRegulatorEnabled>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10d      	bne.n	8002d84 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d6c:	f043 0210 	orr.w	r2, r3, #16
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d78:	f043 0201 	orr.w	r2, r3, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff ff61 	bl	8002c50 <LL_ADC_REG_IsConversionOngoing>
 8002d8e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d94:	f003 0310 	and.w	r3, r3, #16
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f040 8188 	bne.w	80030ae <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f040 8184 	bne.w	80030ae <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002daa:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002dae:	f043 0202 	orr.w	r2, r3, #2
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fefa 	bl	8002bb4 <LL_ADC_IsEnabled>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d136      	bne.n	8002e34 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a6c      	ldr	r2, [pc, #432]	@ (8002f7c <HAL_ADC_Init+0x2b4>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d004      	beq.n	8002dda <HAL_ADC_Init+0x112>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a6a      	ldr	r2, [pc, #424]	@ (8002f80 <HAL_ADC_Init+0x2b8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d10e      	bne.n	8002df8 <HAL_ADC_Init+0x130>
 8002dda:	4868      	ldr	r0, [pc, #416]	@ (8002f7c <HAL_ADC_Init+0x2b4>)
 8002ddc:	f7ff feea 	bl	8002bb4 <LL_ADC_IsEnabled>
 8002de0:	4604      	mov	r4, r0
 8002de2:	4867      	ldr	r0, [pc, #412]	@ (8002f80 <HAL_ADC_Init+0x2b8>)
 8002de4:	f7ff fee6 	bl	8002bb4 <LL_ADC_IsEnabled>
 8002de8:	4603      	mov	r3, r0
 8002dea:	4323      	orrs	r3, r4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	bf0c      	ite	eq
 8002df0:	2301      	moveq	r3, #1
 8002df2:	2300      	movne	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	e008      	b.n	8002e0a <HAL_ADC_Init+0x142>
 8002df8:	4862      	ldr	r0, [pc, #392]	@ (8002f84 <HAL_ADC_Init+0x2bc>)
 8002dfa:	f7ff fedb 	bl	8002bb4 <LL_ADC_IsEnabled>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	bf0c      	ite	eq
 8002e04:	2301      	moveq	r3, #1
 8002e06:	2300      	movne	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d012      	beq.n	8002e34 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a5a      	ldr	r2, [pc, #360]	@ (8002f7c <HAL_ADC_Init+0x2b4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d004      	beq.n	8002e22 <HAL_ADC_Init+0x15a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a58      	ldr	r2, [pc, #352]	@ (8002f80 <HAL_ADC_Init+0x2b8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d101      	bne.n	8002e26 <HAL_ADC_Init+0x15e>
 8002e22:	4a59      	ldr	r2, [pc, #356]	@ (8002f88 <HAL_ADC_Init+0x2c0>)
 8002e24:	e000      	b.n	8002e28 <HAL_ADC_Init+0x160>
 8002e26:	4a59      	ldr	r2, [pc, #356]	@ (8002f8c <HAL_ADC_Init+0x2c4>)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4610      	mov	r0, r2
 8002e30:	f7ff fc24 	bl	800267c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a52      	ldr	r2, [pc, #328]	@ (8002f84 <HAL_ADC_Init+0x2bc>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d129      	bne.n	8002e92 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	7e5b      	ldrb	r3, [r3, #25]
 8002e42:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002e48:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002e4e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d013      	beq.n	8002e80 <HAL_ADC_Init+0x1b8>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b0c      	cmp	r3, #12
 8002e5e:	d00d      	beq.n	8002e7c <HAL_ADC_Init+0x1b4>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2b1c      	cmp	r3, #28
 8002e66:	d007      	beq.n	8002e78 <HAL_ADC_Init+0x1b0>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b18      	cmp	r3, #24
 8002e6e:	d101      	bne.n	8002e74 <HAL_ADC_Init+0x1ac>
 8002e70:	2318      	movs	r3, #24
 8002e72:	e006      	b.n	8002e82 <HAL_ADC_Init+0x1ba>
 8002e74:	2300      	movs	r3, #0
 8002e76:	e004      	b.n	8002e82 <HAL_ADC_Init+0x1ba>
 8002e78:	2310      	movs	r3, #16
 8002e7a:	e002      	b.n	8002e82 <HAL_ADC_Init+0x1ba>
 8002e7c:	2308      	movs	r3, #8
 8002e7e:	e000      	b.n	8002e82 <HAL_ADC_Init+0x1ba>
 8002e80:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002e82:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e8a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
 8002e90:	e00e      	b.n	8002eb0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	7e5b      	ldrb	r3, [r3, #25]
 8002e96:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e9c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002ea2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eaa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002eac:	4313      	orrs	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d106      	bne.n	8002ec8 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	045b      	lsls	r3, r3, #17
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d009      	beq.n	8002ee4 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002edc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a26      	ldr	r2, [pc, #152]	@ (8002f84 <HAL_ADC_Init+0x2bc>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d115      	bne.n	8002f1a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	4b26      	ldr	r3, [pc, #152]	@ (8002f90 <HAL_ADC_Init+0x2c8>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	69b9      	ldr	r1, [r7, #24]
 8002efe:	430b      	orrs	r3, r1
 8002f00:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	611a      	str	r2, [r3, #16]
 8002f18:	e009      	b.n	8002f2e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	4b1c      	ldr	r3, [pc, #112]	@ (8002f94 <HAL_ADC_Init+0x2cc>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6812      	ldr	r2, [r2, #0]
 8002f28:	69b9      	ldr	r1, [r7, #24]
 8002f2a:	430b      	orrs	r3, r1
 8002f2c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff fe8c 	bl	8002c50 <LL_ADC_REG_IsConversionOngoing>
 8002f38:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff feae 	bl	8002ca0 <LL_ADC_INJ_IsConversionOngoing>
 8002f44:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f040 808e 	bne.w	800306a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f040 808a 	bne.w	800306a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f84 <HAL_ADC_Init+0x2bc>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d11b      	bne.n	8002f98 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	7e1b      	ldrb	r3, [r3, #24]
 8002f64:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f6c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
 8002f72:	e018      	b.n	8002fa6 <HAL_ADC_Init+0x2de>
 8002f74:	24000008 	.word	0x24000008
 8002f78:	053e2d63 	.word	0x053e2d63
 8002f7c:	40022000 	.word	0x40022000
 8002f80:	40022100 	.word	0x40022100
 8002f84:	58026000 	.word	0x58026000
 8002f88:	40022300 	.word	0x40022300
 8002f8c:	58026300 	.word	0x58026300
 8002f90:	fff04007 	.word	0xfff04007
 8002f94:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	7e1b      	ldrb	r3, [r3, #24]
 8002f9c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	4b46      	ldr	r3, [pc, #280]	@ (80030c8 <HAL_ADC_Init+0x400>)
 8002fae:	4013      	ands	r3, r2
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6812      	ldr	r2, [r2, #0]
 8002fb4:	69b9      	ldr	r1, [r7, #24]
 8002fb6:	430b      	orrs	r3, r1
 8002fb8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d137      	bne.n	8003034 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc8:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a3f      	ldr	r2, [pc, #252]	@ (80030cc <HAL_ADC_Init+0x404>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d116      	bne.n	8003002 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	4b3d      	ldr	r3, [pc, #244]	@ (80030d0 <HAL_ADC_Init+0x408>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002fe6:	4311      	orrs	r1, r2
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002fec:	4311      	orrs	r1, r2
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	611a      	str	r2, [r3, #16]
 8003000:	e020      	b.n	8003044 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	4b32      	ldr	r3, [pc, #200]	@ (80030d4 <HAL_ADC_Init+0x40c>)
 800300a:	4013      	ands	r3, r2
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003010:	3a01      	subs	r2, #1
 8003012:	0411      	lsls	r1, r2, #16
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003018:	4311      	orrs	r1, r2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800301e:	4311      	orrs	r1, r2
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003024:	430a      	orrs	r2, r1
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0201 	orr.w	r2, r2, #1
 8003030:	611a      	str	r2, [r3, #16]
 8003032:	e007      	b.n	8003044 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	691a      	ldr	r2, [r3, #16]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0201 	bic.w	r2, r2, #1
 8003042:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a1b      	ldr	r2, [pc, #108]	@ (80030cc <HAL_ADC_Init+0x404>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d002      	beq.n	800306a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f001 f8b1 	bl	80041cc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d10c      	bne.n	800308c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003078:	f023 010f 	bic.w	r1, r3, #15
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	1e5a      	subs	r2, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	631a      	str	r2, [r3, #48]	@ 0x30
 800308a:	e007      	b.n	800309c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 020f 	bic.w	r2, r2, #15
 800309a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030a0:	f023 0303 	bic.w	r3, r3, #3
 80030a4:	f043 0201 	orr.w	r2, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	661a      	str	r2, [r3, #96]	@ 0x60
 80030ac:	e007      	b.n	80030be <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030b2:	f043 0210 	orr.w	r2, r3, #16
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030be:	7ffb      	ldrb	r3, [r7, #31]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3724      	adds	r7, #36	@ 0x24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd90      	pop	{r4, r7, pc}
 80030c8:	ffffbffc 	.word	0xffffbffc
 80030cc:	58026000 	.word	0x58026000
 80030d0:	fc00f81f 	.word	0xfc00f81f
 80030d4:	fc00f81e 	.word	0xfc00f81e

080030d8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a5c      	ldr	r2, [pc, #368]	@ (8003258 <HAL_ADC_Start+0x180>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d004      	beq.n	80030f4 <HAL_ADC_Start+0x1c>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a5b      	ldr	r2, [pc, #364]	@ (800325c <HAL_ADC_Start+0x184>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d101      	bne.n	80030f8 <HAL_ADC_Start+0x20>
 80030f4:	4b5a      	ldr	r3, [pc, #360]	@ (8003260 <HAL_ADC_Start+0x188>)
 80030f6:	e000      	b.n	80030fa <HAL_ADC_Start+0x22>
 80030f8:	4b5a      	ldr	r3, [pc, #360]	@ (8003264 <HAL_ADC_Start+0x18c>)
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff fcc8 	bl	8002a90 <LL_ADC_GetMultimode>
 8003100:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff fda2 	bl	8002c50 <LL_ADC_REG_IsConversionOngoing>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	f040 809a 	bne.w	8003248 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <HAL_ADC_Start+0x4a>
 800311e:	2302      	movs	r3, #2
 8003120:	e095      	b.n	800324e <HAL_ADC_Start+0x176>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 ff64 	bl	8003ff8 <ADC_Enable>
 8003130:	4603      	mov	r3, r0
 8003132:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003134:	7dfb      	ldrb	r3, [r7, #23]
 8003136:	2b00      	cmp	r3, #0
 8003138:	f040 8081 	bne.w	800323e <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003140:	4b49      	ldr	r3, [pc, #292]	@ (8003268 <HAL_ADC_Start+0x190>)
 8003142:	4013      	ands	r3, r2
 8003144:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a42      	ldr	r2, [pc, #264]	@ (800325c <HAL_ADC_Start+0x184>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d002      	beq.n	800315c <HAL_ADC_Start+0x84>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	e000      	b.n	800315e <HAL_ADC_Start+0x86>
 800315c:	4b3e      	ldr	r3, [pc, #248]	@ (8003258 <HAL_ADC_Start+0x180>)
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6812      	ldr	r2, [r2, #0]
 8003162:	4293      	cmp	r3, r2
 8003164:	d002      	beq.n	800316c <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d105      	bne.n	8003178 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003170:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800317c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003180:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003184:	d106      	bne.n	8003194 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800318a:	f023 0206 	bic.w	r2, r3, #6
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	665a      	str	r2, [r3, #100]	@ 0x64
 8003192:	e002      	b.n	800319a <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	221c      	movs	r2, #28
 80031a0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a2b      	ldr	r2, [pc, #172]	@ (800325c <HAL_ADC_Start+0x184>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d002      	beq.n	80031ba <HAL_ADC_Start+0xe2>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	e000      	b.n	80031bc <HAL_ADC_Start+0xe4>
 80031ba:	4b27      	ldr	r3, [pc, #156]	@ (8003258 <HAL_ADC_Start+0x180>)
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d008      	beq.n	80031d6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	2b05      	cmp	r3, #5
 80031ce:	d002      	beq.n	80031d6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	2b09      	cmp	r3, #9
 80031d4:	d114      	bne.n	8003200 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d007      	beq.n	80031f4 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031e8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80031ec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fd01 	bl	8002c00 <LL_ADC_REG_StartConversion>
 80031fe:	e025      	b.n	800324c <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003204:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a12      	ldr	r2, [pc, #72]	@ (800325c <HAL_ADC_Start+0x184>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d002      	beq.n	800321c <HAL_ADC_Start+0x144>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	e000      	b.n	800321e <HAL_ADC_Start+0x146>
 800321c:	4b0e      	ldr	r3, [pc, #56]	@ (8003258 <HAL_ADC_Start+0x180>)
 800321e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00f      	beq.n	800324c <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003230:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003234:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	661a      	str	r2, [r3, #96]	@ 0x60
 800323c:	e006      	b.n	800324c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003246:	e001      	b.n	800324c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003248:	2302      	movs	r3, #2
 800324a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800324c:	7dfb      	ldrb	r3, [r7, #23]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40022000 	.word	0x40022000
 800325c:	40022100 	.word	0x40022100
 8003260:	40022300 	.word	0x40022300
 8003264:	58026300 	.word	0x58026300
 8003268:	fffff0fe 	.word	0xfffff0fe

0800326c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_ADC_Stop+0x16>
 800327e:	2302      	movs	r3, #2
 8003280:	e021      	b.n	80032c6 <HAL_ADC_Stop+0x5a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800328a:	2103      	movs	r1, #3
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 fdf7 	bl	8003e80 <ADC_ConversionStop>
 8003292:	4603      	mov	r3, r0
 8003294:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10f      	bne.n	80032bc <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 ff35 	bl	800410c <ADC_Disable>
 80032a2:	4603      	mov	r3, r0
 80032a4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d107      	bne.n	80032bc <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80032b0:	4b07      	ldr	r3, [pc, #28]	@ (80032d0 <HAL_ADC_Stop+0x64>)
 80032b2:	4013      	ands	r3, r2
 80032b4:	f043 0201 	orr.w	r2, r3, #1
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	ffffeefe 	.word	0xffffeefe

080032d4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a72      	ldr	r2, [pc, #456]	@ (80034ac <HAL_ADC_PollForConversion+0x1d8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d004      	beq.n	80032f2 <HAL_ADC_PollForConversion+0x1e>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a70      	ldr	r2, [pc, #448]	@ (80034b0 <HAL_ADC_PollForConversion+0x1dc>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d101      	bne.n	80032f6 <HAL_ADC_PollForConversion+0x22>
 80032f2:	4b70      	ldr	r3, [pc, #448]	@ (80034b4 <HAL_ADC_PollForConversion+0x1e0>)
 80032f4:	e000      	b.n	80032f8 <HAL_ADC_PollForConversion+0x24>
 80032f6:	4b70      	ldr	r3, [pc, #448]	@ (80034b8 <HAL_ADC_PollForConversion+0x1e4>)
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff fbc9 	bl	8002a90 <LL_ADC_GetMultimode>
 80032fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	2b08      	cmp	r3, #8
 8003306:	d102      	bne.n	800330e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003308:	2308      	movs	r3, #8
 800330a:	61fb      	str	r3, [r7, #28]
 800330c:	e037      	b.n	800337e <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	2b05      	cmp	r3, #5
 8003318:	d002      	beq.n	8003320 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2b09      	cmp	r3, #9
 800331e:	d111      	bne.n	8003344 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d007      	beq.n	800333e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003332:	f043 0220 	orr.w	r2, r3, #32
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e0b1      	b.n	80034a2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800333e:	2304      	movs	r3, #4
 8003340:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003342:	e01c      	b.n	800337e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a58      	ldr	r2, [pc, #352]	@ (80034ac <HAL_ADC_PollForConversion+0x1d8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d004      	beq.n	8003358 <HAL_ADC_PollForConversion+0x84>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a57      	ldr	r2, [pc, #348]	@ (80034b0 <HAL_ADC_PollForConversion+0x1dc>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d101      	bne.n	800335c <HAL_ADC_PollForConversion+0x88>
 8003358:	4b56      	ldr	r3, [pc, #344]	@ (80034b4 <HAL_ADC_PollForConversion+0x1e0>)
 800335a:	e000      	b.n	800335e <HAL_ADC_PollForConversion+0x8a>
 800335c:	4b56      	ldr	r3, [pc, #344]	@ (80034b8 <HAL_ADC_PollForConversion+0x1e4>)
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff fba4 	bl	8002aac <LL_ADC_GetMultiDMATransfer>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d007      	beq.n	800337a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800336e:	f043 0220 	orr.w	r2, r3, #32
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e093      	b.n	80034a2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800337a:	2304      	movs	r3, #4
 800337c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800337e:	f7ff f971 	bl	8002664 <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003384:	e021      	b.n	80033ca <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338c:	d01d      	beq.n	80033ca <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800338e:	f7ff f969 	bl	8002664 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d302      	bcc.n	80033a4 <HAL_ADC_PollForConversion+0xd0>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d112      	bne.n	80033ca <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	4013      	ands	r3, r2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10b      	bne.n	80033ca <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b6:	f043 0204 	orr.w	r2, r3, #4
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e06b      	b.n	80034a2 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0d6      	beq.n	8003386 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033dc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff faa7 	bl	800293c <LL_ADC_REG_IsTriggerSourceSWStart>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d01c      	beq.n	800342e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	7e5b      	ldrb	r3, [r3, #25]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d118      	bne.n	800342e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b08      	cmp	r3, #8
 8003408:	d111      	bne.n	800342e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800340e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800341a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d105      	bne.n	800342e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003426:	f043 0201 	orr.w	r2, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a1f      	ldr	r2, [pc, #124]	@ (80034b0 <HAL_ADC_PollForConversion+0x1dc>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d002      	beq.n	800343e <HAL_ADC_PollForConversion+0x16a>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	e000      	b.n	8003440 <HAL_ADC_PollForConversion+0x16c>
 800343e:	4b1b      	ldr	r3, [pc, #108]	@ (80034ac <HAL_ADC_PollForConversion+0x1d8>)
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6812      	ldr	r2, [r2, #0]
 8003444:	4293      	cmp	r3, r2
 8003446:	d008      	beq.n	800345a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2b05      	cmp	r3, #5
 8003452:	d002      	beq.n	800345a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	2b09      	cmp	r3, #9
 8003458:	d104      	bne.n	8003464 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	e00c      	b.n	800347e <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a11      	ldr	r2, [pc, #68]	@ (80034b0 <HAL_ADC_PollForConversion+0x1dc>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d002      	beq.n	8003474 <HAL_ADC_PollForConversion+0x1a0>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	e000      	b.n	8003476 <HAL_ADC_PollForConversion+0x1a2>
 8003474:	4b0d      	ldr	r3, [pc, #52]	@ (80034ac <HAL_ADC_PollForConversion+0x1d8>)
 8003476:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	2b08      	cmp	r3, #8
 8003482:	d104      	bne.n	800348e <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2208      	movs	r2, #8
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	e008      	b.n	80034a0 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d103      	bne.n	80034a0 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	220c      	movs	r2, #12
 800349e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3720      	adds	r7, #32
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40022000 	.word	0x40022000
 80034b0:	40022100 	.word	0x40022100
 80034b4:	40022300 	.word	0x40022300
 80034b8:	58026300 	.word	0x58026300

080034bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
	...

080034d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b0a5      	sub	sp, #148	@ 0x94
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034f2:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	4aa4      	ldr	r2, [pc, #656]	@ (800378c <HAL_ADC_ConfigChannel+0x2b4>)
 80034fa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003502:	2b01      	cmp	r3, #1
 8003504:	d102      	bne.n	800350c <HAL_ADC_ConfigChannel+0x34>
 8003506:	2302      	movs	r3, #2
 8003508:	f000 bca2 	b.w	8003e50 <HAL_ADC_ConfigChannel+0x978>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff fb99 	bl	8002c50 <LL_ADC_REG_IsConversionOngoing>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	f040 8486 	bne.w	8003e32 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	db31      	blt.n	8003592 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a97      	ldr	r2, [pc, #604]	@ (8003790 <HAL_ADC_ConfigChannel+0x2b8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d02c      	beq.n	8003592 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003540:	2b00      	cmp	r3, #0
 8003542:	d108      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x7e>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	0e9b      	lsrs	r3, r3, #26
 800354a:	f003 031f 	and.w	r3, r3, #31
 800354e:	2201      	movs	r2, #1
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	e016      	b.n	8003584 <HAL_ADC_ConfigChannel+0xac>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800355e:	fa93 f3a3 	rbit	r3, r3
 8003562:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003564:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003566:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003568:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 800356e:	2320      	movs	r3, #32
 8003570:	e003      	b.n	800357a <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8003572:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003574:	fab3 f383 	clz	r3, r3
 8003578:	b2db      	uxtb	r3, r3
 800357a:	f003 031f 	and.w	r3, r3, #31
 800357e:	2201      	movs	r2, #1
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	6812      	ldr	r2, [r2, #0]
 8003588:	69d1      	ldr	r1, [r2, #28]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6812      	ldr	r2, [r2, #0]
 800358e:	430b      	orrs	r3, r1
 8003590:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6818      	ldr	r0, [r3, #0]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	6859      	ldr	r1, [r3, #4]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	f7ff f9df 	bl	8002962 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff fb51 	bl	8002c50 <LL_ADC_REG_IsConversionOngoing>
 80035ae:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff fb72 	bl	8002ca0 <LL_ADC_INJ_IsConversionOngoing>
 80035bc:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f040 824a 	bne.w	8003a5e <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f040 8245 	bne.w	8003a5e <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6818      	ldr	r0, [r3, #0]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	6819      	ldr	r1, [r3, #0]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	461a      	mov	r2, r3
 80035e2:	f7ff f9ea 	bl	80029ba <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a69      	ldr	r2, [pc, #420]	@ (8003790 <HAL_ADC_ConfigChannel+0x2b8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d10d      	bne.n	800360c <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	695a      	ldr	r2, [r3, #20]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	08db      	lsrs	r3, r3, #3
 80035fc:	f003 0303 	and.w	r3, r3, #3
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800360a:	e032      	b.n	8003672 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800360c:	4b61      	ldr	r3, [pc, #388]	@ (8003794 <HAL_ADC_ConfigChannel+0x2bc>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003614:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003618:	d10b      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x15a>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	695a      	ldr	r2, [r3, #20]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	089b      	lsrs	r3, r3, #2
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	e01d      	b.n	800366e <HAL_ADC_ConfigChannel+0x196>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f003 0310 	and.w	r3, r3, #16
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10b      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x180>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	695a      	ldr	r2, [r3, #20]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	089b      	lsrs	r3, r3, #2
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	e00a      	b.n	800366e <HAL_ADC_ConfigChannel+0x196>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	695a      	ldr	r2, [r3, #20]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	089b      	lsrs	r3, r3, #2
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	2b04      	cmp	r3, #4
 8003678:	d048      	beq.n	800370c <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6818      	ldr	r0, [r3, #0]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	6919      	ldr	r1, [r3, #16]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800368a:	f7ff f865 	bl	8002758 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a3f      	ldr	r2, [pc, #252]	@ (8003790 <HAL_ADC_ConfigChannel+0x2b8>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d119      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	6919      	ldr	r1, [r3, #16]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	461a      	mov	r2, r3
 80036a6:	f7ff f8fd 	bl	80028a4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6818      	ldr	r0, [r3, #0]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	6919      	ldr	r1, [r3, #16]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d102      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x1ea>
 80036bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036c0:	e000      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x1ec>
 80036c2:	2300      	movs	r3, #0
 80036c4:	461a      	mov	r2, r3
 80036c6:	f7ff f8cb 	bl	8002860 <LL_ADC_SetOffsetSaturation>
 80036ca:	e1c8      	b.n	8003a5e <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	6919      	ldr	r1, [r3, #16]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d102      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x20c>
 80036de:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80036e2:	e000      	b.n	80036e6 <HAL_ADC_ConfigChannel+0x20e>
 80036e4:	2300      	movs	r3, #0
 80036e6:	461a      	mov	r2, r3
 80036e8:	f7ff f898 	bl	800281c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6818      	ldr	r0, [r3, #0]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	6919      	ldr	r1, [r3, #16]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	7e1b      	ldrb	r3, [r3, #24]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d102      	bne.n	8003702 <HAL_ADC_ConfigChannel+0x22a>
 80036fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003700:	e000      	b.n	8003704 <HAL_ADC_ConfigChannel+0x22c>
 8003702:	2300      	movs	r3, #0
 8003704:	461a      	mov	r2, r3
 8003706:	f7ff f86f 	bl	80027e8 <LL_ADC_SetDataRightShift>
 800370a:	e1a8      	b.n	8003a5e <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1f      	ldr	r2, [pc, #124]	@ (8003790 <HAL_ADC_ConfigChannel+0x2b8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	f040 815b 	bne.w	80039ce <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2100      	movs	r1, #0
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff f84c 	bl	80027bc <LL_ADC_GetOffsetChannel>
 8003724:	4603      	mov	r3, r0
 8003726:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10a      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x26c>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2100      	movs	r1, #0
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff f841 	bl	80027bc <LL_ADC_GetOffsetChannel>
 800373a:	4603      	mov	r3, r0
 800373c:	0e9b      	lsrs	r3, r3, #26
 800373e:	f003 021f 	and.w	r2, r3, #31
 8003742:	e017      	b.n	8003774 <HAL_ADC_ConfigChannel+0x29c>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2100      	movs	r1, #0
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff f836 	bl	80027bc <LL_ADC_GetOffsetChannel>
 8003750:	4603      	mov	r3, r0
 8003752:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003754:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003756:	fa93 f3a3 	rbit	r3, r3
 800375a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800375c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800375e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003760:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003766:	2320      	movs	r3, #32
 8003768:	e003      	b.n	8003772 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 800376a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800376c:	fab3 f383 	clz	r3, r3
 8003770:	b2db      	uxtb	r3, r3
 8003772:	461a      	mov	r2, r3
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10b      	bne.n	8003798 <HAL_ADC_ConfigChannel+0x2c0>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	0e9b      	lsrs	r3, r3, #26
 8003786:	f003 031f 	and.w	r3, r3, #31
 800378a:	e017      	b.n	80037bc <HAL_ADC_ConfigChannel+0x2e4>
 800378c:	47ff0000 	.word	0x47ff0000
 8003790:	58026000 	.word	0x58026000
 8003794:	5c001000 	.word	0x5c001000
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037a0:	fa93 f3a3 	rbit	r3, r3
 80037a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80037a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037a8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80037aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 80037b0:	2320      	movs	r3, #32
 80037b2:	e003      	b.n	80037bc <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 80037b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037b6:	fab3 f383 	clz	r3, r3
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	429a      	cmp	r2, r3
 80037be:	d106      	bne.n	80037ce <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2200      	movs	r2, #0
 80037c6:	2100      	movs	r1, #0
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff f88d 	bl	80028e8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2101      	movs	r1, #1
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fe fff1 	bl	80027bc <LL_ADC_GetOffsetChannel>
 80037da:	4603      	mov	r3, r0
 80037dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10a      	bne.n	80037fa <HAL_ADC_ConfigChannel+0x322>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2101      	movs	r1, #1
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fe ffe6 	bl	80027bc <LL_ADC_GetOffsetChannel>
 80037f0:	4603      	mov	r3, r0
 80037f2:	0e9b      	lsrs	r3, r3, #26
 80037f4:	f003 021f 	and.w	r2, r3, #31
 80037f8:	e017      	b.n	800382a <HAL_ADC_ConfigChannel+0x352>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2101      	movs	r1, #1
 8003800:	4618      	mov	r0, r3
 8003802:	f7fe ffdb 	bl	80027bc <LL_ADC_GetOffsetChannel>
 8003806:	4603      	mov	r3, r0
 8003808:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800380c:	fa93 f3a3 	rbit	r3, r3
 8003810:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003812:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003814:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003816:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 800381c:	2320      	movs	r3, #32
 800381e:	e003      	b.n	8003828 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8003820:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003822:	fab3 f383 	clz	r3, r3
 8003826:	b2db      	uxtb	r3, r3
 8003828:	461a      	mov	r2, r3
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003832:	2b00      	cmp	r3, #0
 8003834:	d105      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x36a>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	0e9b      	lsrs	r3, r3, #26
 800383c:	f003 031f 	and.w	r3, r3, #31
 8003840:	e011      	b.n	8003866 <HAL_ADC_ConfigChannel+0x38e>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800384a:	fa93 f3a3 	rbit	r3, r3
 800384e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003850:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003852:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003854:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800385a:	2320      	movs	r3, #32
 800385c:	e003      	b.n	8003866 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800385e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003860:	fab3 f383 	clz	r3, r3
 8003864:	b2db      	uxtb	r3, r3
 8003866:	429a      	cmp	r2, r3
 8003868:	d106      	bne.n	8003878 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2200      	movs	r2, #0
 8003870:	2101      	movs	r1, #1
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff f838 	bl	80028e8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2102      	movs	r1, #2
 800387e:	4618      	mov	r0, r3
 8003880:	f7fe ff9c 	bl	80027bc <LL_ADC_GetOffsetChannel>
 8003884:	4603      	mov	r3, r0
 8003886:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10a      	bne.n	80038a4 <HAL_ADC_ConfigChannel+0x3cc>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2102      	movs	r1, #2
 8003894:	4618      	mov	r0, r3
 8003896:	f7fe ff91 	bl	80027bc <LL_ADC_GetOffsetChannel>
 800389a:	4603      	mov	r3, r0
 800389c:	0e9b      	lsrs	r3, r3, #26
 800389e:	f003 021f 	and.w	r2, r3, #31
 80038a2:	e017      	b.n	80038d4 <HAL_ADC_ConfigChannel+0x3fc>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2102      	movs	r1, #2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe ff86 	bl	80027bc <LL_ADC_GetOffsetChannel>
 80038b0:	4603      	mov	r3, r0
 80038b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b6:	fa93 f3a3 	rbit	r3, r3
 80038ba:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80038bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80038c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80038c6:	2320      	movs	r3, #32
 80038c8:	e003      	b.n	80038d2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80038ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038cc:	fab3 f383 	clz	r3, r3
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	461a      	mov	r2, r3
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d105      	bne.n	80038ec <HAL_ADC_ConfigChannel+0x414>
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	0e9b      	lsrs	r3, r3, #26
 80038e6:	f003 031f 	and.w	r3, r3, #31
 80038ea:	e011      	b.n	8003910 <HAL_ADC_ConfigChannel+0x438>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f4:	fa93 f3a3 	rbit	r3, r3
 80038f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80038fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038fc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80038fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003904:	2320      	movs	r3, #32
 8003906:	e003      	b.n	8003910 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390a:	fab3 f383 	clz	r3, r3
 800390e:	b2db      	uxtb	r3, r3
 8003910:	429a      	cmp	r2, r3
 8003912:	d106      	bne.n	8003922 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2200      	movs	r2, #0
 800391a:	2102      	movs	r1, #2
 800391c:	4618      	mov	r0, r3
 800391e:	f7fe ffe3 	bl	80028e8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2103      	movs	r1, #3
 8003928:	4618      	mov	r0, r3
 800392a:	f7fe ff47 	bl	80027bc <LL_ADC_GetOffsetChannel>
 800392e:	4603      	mov	r3, r0
 8003930:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10a      	bne.n	800394e <HAL_ADC_ConfigChannel+0x476>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2103      	movs	r1, #3
 800393e:	4618      	mov	r0, r3
 8003940:	f7fe ff3c 	bl	80027bc <LL_ADC_GetOffsetChannel>
 8003944:	4603      	mov	r3, r0
 8003946:	0e9b      	lsrs	r3, r3, #26
 8003948:	f003 021f 	and.w	r2, r3, #31
 800394c:	e017      	b.n	800397e <HAL_ADC_ConfigChannel+0x4a6>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2103      	movs	r1, #3
 8003954:	4618      	mov	r0, r3
 8003956:	f7fe ff31 	bl	80027bc <LL_ADC_GetOffsetChannel>
 800395a:	4603      	mov	r3, r0
 800395c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	fa93 f3a3 	rbit	r3, r3
 8003964:	61fb      	str	r3, [r7, #28]
  return result;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003970:	2320      	movs	r3, #32
 8003972:	e003      	b.n	800397c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003976:	fab3 f383 	clz	r3, r3
 800397a:	b2db      	uxtb	r3, r3
 800397c:	461a      	mov	r2, r3
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003986:	2b00      	cmp	r3, #0
 8003988:	d105      	bne.n	8003996 <HAL_ADC_ConfigChannel+0x4be>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	0e9b      	lsrs	r3, r3, #26
 8003990:	f003 031f 	and.w	r3, r3, #31
 8003994:	e011      	b.n	80039ba <HAL_ADC_ConfigChannel+0x4e2>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	fa93 f3a3 	rbit	r3, r3
 80039a2:	613b      	str	r3, [r7, #16]
  return result;
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 80039ae:	2320      	movs	r3, #32
 80039b0:	e003      	b.n	80039ba <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	fab3 f383 	clz	r3, r3
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d14f      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2200      	movs	r2, #0
 80039c4:	2103      	movs	r1, #3
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe ff8e 	bl	80028e8 <LL_ADC_SetOffsetState>
 80039cc:	e047      	b.n	8003a5e <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	069b      	lsls	r3, r3, #26
 80039de:	429a      	cmp	r2, r3
 80039e0:	d107      	bne.n	80039f2 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80039f0:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	069b      	lsls	r3, r3, #26
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d107      	bne.n	8003a16 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003a14:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a1c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	069b      	lsls	r3, r3, #26
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d107      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003a38:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a40:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	069b      	lsls	r3, r3, #26
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d107      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003a5c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff f8a6 	bl	8002bb4 <LL_ADC_IsEnabled>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f040 81ea 	bne.w	8003e44 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6818      	ldr	r0, [r3, #0]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	6819      	ldr	r1, [r3, #0]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	f7fe ffc7 	bl	8002a10 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	4a7a      	ldr	r2, [pc, #488]	@ (8003c70 <HAL_ADC_ConfigChannel+0x798>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	f040 80e0 	bne.w	8003c4e <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4977      	ldr	r1, [pc, #476]	@ (8003c74 <HAL_ADC_ConfigChannel+0x79c>)
 8003a98:	428b      	cmp	r3, r1
 8003a9a:	d147      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x654>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4975      	ldr	r1, [pc, #468]	@ (8003c78 <HAL_ADC_ConfigChannel+0x7a0>)
 8003aa2:	428b      	cmp	r3, r1
 8003aa4:	d040      	beq.n	8003b28 <HAL_ADC_ConfigChannel+0x650>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4974      	ldr	r1, [pc, #464]	@ (8003c7c <HAL_ADC_ConfigChannel+0x7a4>)
 8003aac:	428b      	cmp	r3, r1
 8003aae:	d039      	beq.n	8003b24 <HAL_ADC_ConfigChannel+0x64c>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4972      	ldr	r1, [pc, #456]	@ (8003c80 <HAL_ADC_ConfigChannel+0x7a8>)
 8003ab6:	428b      	cmp	r3, r1
 8003ab8:	d032      	beq.n	8003b20 <HAL_ADC_ConfigChannel+0x648>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4971      	ldr	r1, [pc, #452]	@ (8003c84 <HAL_ADC_ConfigChannel+0x7ac>)
 8003ac0:	428b      	cmp	r3, r1
 8003ac2:	d02b      	beq.n	8003b1c <HAL_ADC_ConfigChannel+0x644>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	496f      	ldr	r1, [pc, #444]	@ (8003c88 <HAL_ADC_ConfigChannel+0x7b0>)
 8003aca:	428b      	cmp	r3, r1
 8003acc:	d024      	beq.n	8003b18 <HAL_ADC_ConfigChannel+0x640>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	496e      	ldr	r1, [pc, #440]	@ (8003c8c <HAL_ADC_ConfigChannel+0x7b4>)
 8003ad4:	428b      	cmp	r3, r1
 8003ad6:	d01d      	beq.n	8003b14 <HAL_ADC_ConfigChannel+0x63c>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	496c      	ldr	r1, [pc, #432]	@ (8003c90 <HAL_ADC_ConfigChannel+0x7b8>)
 8003ade:	428b      	cmp	r3, r1
 8003ae0:	d016      	beq.n	8003b10 <HAL_ADC_ConfigChannel+0x638>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	496b      	ldr	r1, [pc, #428]	@ (8003c94 <HAL_ADC_ConfigChannel+0x7bc>)
 8003ae8:	428b      	cmp	r3, r1
 8003aea:	d00f      	beq.n	8003b0c <HAL_ADC_ConfigChannel+0x634>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4969      	ldr	r1, [pc, #420]	@ (8003c98 <HAL_ADC_ConfigChannel+0x7c0>)
 8003af2:	428b      	cmp	r3, r1
 8003af4:	d008      	beq.n	8003b08 <HAL_ADC_ConfigChannel+0x630>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4968      	ldr	r1, [pc, #416]	@ (8003c9c <HAL_ADC_ConfigChannel+0x7c4>)
 8003afc:	428b      	cmp	r3, r1
 8003afe:	d101      	bne.n	8003b04 <HAL_ADC_ConfigChannel+0x62c>
 8003b00:	4b67      	ldr	r3, [pc, #412]	@ (8003ca0 <HAL_ADC_ConfigChannel+0x7c8>)
 8003b02:	e0a0      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003b04:	2300      	movs	r3, #0
 8003b06:	e09e      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003b08:	4b66      	ldr	r3, [pc, #408]	@ (8003ca4 <HAL_ADC_ConfigChannel+0x7cc>)
 8003b0a:	e09c      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003b0c:	4b66      	ldr	r3, [pc, #408]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x7d0>)
 8003b0e:	e09a      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003b10:	4b60      	ldr	r3, [pc, #384]	@ (8003c94 <HAL_ADC_ConfigChannel+0x7bc>)
 8003b12:	e098      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003b14:	4b5e      	ldr	r3, [pc, #376]	@ (8003c90 <HAL_ADC_ConfigChannel+0x7b8>)
 8003b16:	e096      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003b18:	4b64      	ldr	r3, [pc, #400]	@ (8003cac <HAL_ADC_ConfigChannel+0x7d4>)
 8003b1a:	e094      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003b1c:	4b64      	ldr	r3, [pc, #400]	@ (8003cb0 <HAL_ADC_ConfigChannel+0x7d8>)
 8003b1e:	e092      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003b20:	4b64      	ldr	r3, [pc, #400]	@ (8003cb4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003b22:	e090      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003b24:	4b64      	ldr	r3, [pc, #400]	@ (8003cb8 <HAL_ADC_ConfigChannel+0x7e0>)
 8003b26:	e08e      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e08c      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4962      	ldr	r1, [pc, #392]	@ (8003cbc <HAL_ADC_ConfigChannel+0x7e4>)
 8003b32:	428b      	cmp	r3, r1
 8003b34:	d140      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x6e0>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	494f      	ldr	r1, [pc, #316]	@ (8003c78 <HAL_ADC_ConfigChannel+0x7a0>)
 8003b3c:	428b      	cmp	r3, r1
 8003b3e:	d039      	beq.n	8003bb4 <HAL_ADC_ConfigChannel+0x6dc>
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	494d      	ldr	r1, [pc, #308]	@ (8003c7c <HAL_ADC_ConfigChannel+0x7a4>)
 8003b46:	428b      	cmp	r3, r1
 8003b48:	d032      	beq.n	8003bb0 <HAL_ADC_ConfigChannel+0x6d8>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	494c      	ldr	r1, [pc, #304]	@ (8003c80 <HAL_ADC_ConfigChannel+0x7a8>)
 8003b50:	428b      	cmp	r3, r1
 8003b52:	d02b      	beq.n	8003bac <HAL_ADC_ConfigChannel+0x6d4>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	494a      	ldr	r1, [pc, #296]	@ (8003c84 <HAL_ADC_ConfigChannel+0x7ac>)
 8003b5a:	428b      	cmp	r3, r1
 8003b5c:	d024      	beq.n	8003ba8 <HAL_ADC_ConfigChannel+0x6d0>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4949      	ldr	r1, [pc, #292]	@ (8003c88 <HAL_ADC_ConfigChannel+0x7b0>)
 8003b64:	428b      	cmp	r3, r1
 8003b66:	d01d      	beq.n	8003ba4 <HAL_ADC_ConfigChannel+0x6cc>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4947      	ldr	r1, [pc, #284]	@ (8003c8c <HAL_ADC_ConfigChannel+0x7b4>)
 8003b6e:	428b      	cmp	r3, r1
 8003b70:	d016      	beq.n	8003ba0 <HAL_ADC_ConfigChannel+0x6c8>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4946      	ldr	r1, [pc, #280]	@ (8003c90 <HAL_ADC_ConfigChannel+0x7b8>)
 8003b78:	428b      	cmp	r3, r1
 8003b7a:	d00f      	beq.n	8003b9c <HAL_ADC_ConfigChannel+0x6c4>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4944      	ldr	r1, [pc, #272]	@ (8003c94 <HAL_ADC_ConfigChannel+0x7bc>)
 8003b82:	428b      	cmp	r3, r1
 8003b84:	d008      	beq.n	8003b98 <HAL_ADC_ConfigChannel+0x6c0>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4944      	ldr	r1, [pc, #272]	@ (8003c9c <HAL_ADC_ConfigChannel+0x7c4>)
 8003b8c:	428b      	cmp	r3, r1
 8003b8e:	d101      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x6bc>
 8003b90:	4b43      	ldr	r3, [pc, #268]	@ (8003ca0 <HAL_ADC_ConfigChannel+0x7c8>)
 8003b92:	e058      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003b94:	2300      	movs	r3, #0
 8003b96:	e056      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003b98:	4b43      	ldr	r3, [pc, #268]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x7d0>)
 8003b9a:	e054      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003b9c:	4b3d      	ldr	r3, [pc, #244]	@ (8003c94 <HAL_ADC_ConfigChannel+0x7bc>)
 8003b9e:	e052      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003ba0:	4b3b      	ldr	r3, [pc, #236]	@ (8003c90 <HAL_ADC_ConfigChannel+0x7b8>)
 8003ba2:	e050      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003ba4:	4b41      	ldr	r3, [pc, #260]	@ (8003cac <HAL_ADC_ConfigChannel+0x7d4>)
 8003ba6:	e04e      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003ba8:	4b41      	ldr	r3, [pc, #260]	@ (8003cb0 <HAL_ADC_ConfigChannel+0x7d8>)
 8003baa:	e04c      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003bac:	4b41      	ldr	r3, [pc, #260]	@ (8003cb4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003bae:	e04a      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003bb0:	4b41      	ldr	r3, [pc, #260]	@ (8003cb8 <HAL_ADC_ConfigChannel+0x7e0>)
 8003bb2:	e048      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e046      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4940      	ldr	r1, [pc, #256]	@ (8003cc0 <HAL_ADC_ConfigChannel+0x7e8>)
 8003bbe:	428b      	cmp	r3, r1
 8003bc0:	d140      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x76c>
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	492c      	ldr	r1, [pc, #176]	@ (8003c78 <HAL_ADC_ConfigChannel+0x7a0>)
 8003bc8:	428b      	cmp	r3, r1
 8003bca:	d039      	beq.n	8003c40 <HAL_ADC_ConfigChannel+0x768>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	492a      	ldr	r1, [pc, #168]	@ (8003c7c <HAL_ADC_ConfigChannel+0x7a4>)
 8003bd2:	428b      	cmp	r3, r1
 8003bd4:	d032      	beq.n	8003c3c <HAL_ADC_ConfigChannel+0x764>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4929      	ldr	r1, [pc, #164]	@ (8003c80 <HAL_ADC_ConfigChannel+0x7a8>)
 8003bdc:	428b      	cmp	r3, r1
 8003bde:	d02b      	beq.n	8003c38 <HAL_ADC_ConfigChannel+0x760>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4927      	ldr	r1, [pc, #156]	@ (8003c84 <HAL_ADC_ConfigChannel+0x7ac>)
 8003be6:	428b      	cmp	r3, r1
 8003be8:	d024      	beq.n	8003c34 <HAL_ADC_ConfigChannel+0x75c>
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4926      	ldr	r1, [pc, #152]	@ (8003c88 <HAL_ADC_ConfigChannel+0x7b0>)
 8003bf0:	428b      	cmp	r3, r1
 8003bf2:	d01d      	beq.n	8003c30 <HAL_ADC_ConfigChannel+0x758>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4924      	ldr	r1, [pc, #144]	@ (8003c8c <HAL_ADC_ConfigChannel+0x7b4>)
 8003bfa:	428b      	cmp	r3, r1
 8003bfc:	d016      	beq.n	8003c2c <HAL_ADC_ConfigChannel+0x754>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4923      	ldr	r1, [pc, #140]	@ (8003c90 <HAL_ADC_ConfigChannel+0x7b8>)
 8003c04:	428b      	cmp	r3, r1
 8003c06:	d00f      	beq.n	8003c28 <HAL_ADC_ConfigChannel+0x750>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4926      	ldr	r1, [pc, #152]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x7d0>)
 8003c0e:	428b      	cmp	r3, r1
 8003c10:	d008      	beq.n	8003c24 <HAL_ADC_ConfigChannel+0x74c>
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	492b      	ldr	r1, [pc, #172]	@ (8003cc4 <HAL_ADC_ConfigChannel+0x7ec>)
 8003c18:	428b      	cmp	r3, r1
 8003c1a:	d101      	bne.n	8003c20 <HAL_ADC_ConfigChannel+0x748>
 8003c1c:	4b2a      	ldr	r3, [pc, #168]	@ (8003cc8 <HAL_ADC_ConfigChannel+0x7f0>)
 8003c1e:	e012      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003c20:	2300      	movs	r3, #0
 8003c22:	e010      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003c24:	4b27      	ldr	r3, [pc, #156]	@ (8003cc4 <HAL_ADC_ConfigChannel+0x7ec>)
 8003c26:	e00e      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003c28:	4b1a      	ldr	r3, [pc, #104]	@ (8003c94 <HAL_ADC_ConfigChannel+0x7bc>)
 8003c2a:	e00c      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003c2c:	4b18      	ldr	r3, [pc, #96]	@ (8003c90 <HAL_ADC_ConfigChannel+0x7b8>)
 8003c2e:	e00a      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003c30:	4b1e      	ldr	r3, [pc, #120]	@ (8003cac <HAL_ADC_ConfigChannel+0x7d4>)
 8003c32:	e008      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003c34:	4b1e      	ldr	r3, [pc, #120]	@ (8003cb0 <HAL_ADC_ConfigChannel+0x7d8>)
 8003c36:	e006      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003c38:	4b1e      	ldr	r3, [pc, #120]	@ (8003cb4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003c3a:	e004      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8003cb8 <HAL_ADC_ConfigChannel+0x7e0>)
 8003c3e:	e002      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x76e>
 8003c44:	2300      	movs	r3, #0
 8003c46:	4619      	mov	r1, r3
 8003c48:	4610      	mov	r0, r2
 8003c4a:	f7fe fd4b 	bl	80026e4 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f280 80f6 	bge.w	8003e44 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a05      	ldr	r2, [pc, #20]	@ (8003c74 <HAL_ADC_ConfigChannel+0x79c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d004      	beq.n	8003c6c <HAL_ADC_ConfigChannel+0x794>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a15      	ldr	r2, [pc, #84]	@ (8003cbc <HAL_ADC_ConfigChannel+0x7e4>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d131      	bne.n	8003cd0 <HAL_ADC_ConfigChannel+0x7f8>
 8003c6c:	4b17      	ldr	r3, [pc, #92]	@ (8003ccc <HAL_ADC_ConfigChannel+0x7f4>)
 8003c6e:	e030      	b.n	8003cd2 <HAL_ADC_ConfigChannel+0x7fa>
 8003c70:	47ff0000 	.word	0x47ff0000
 8003c74:	40022000 	.word	0x40022000
 8003c78:	04300002 	.word	0x04300002
 8003c7c:	08600004 	.word	0x08600004
 8003c80:	0c900008 	.word	0x0c900008
 8003c84:	10c00010 	.word	0x10c00010
 8003c88:	14f00020 	.word	0x14f00020
 8003c8c:	2a000400 	.word	0x2a000400
 8003c90:	2e300800 	.word	0x2e300800
 8003c94:	32601000 	.word	0x32601000
 8003c98:	43210000 	.word	0x43210000
 8003c9c:	4b840000 	.word	0x4b840000
 8003ca0:	4fb80000 	.word	0x4fb80000
 8003ca4:	47520000 	.word	0x47520000
 8003ca8:	36902000 	.word	0x36902000
 8003cac:	25b00200 	.word	0x25b00200
 8003cb0:	21800100 	.word	0x21800100
 8003cb4:	1d500080 	.word	0x1d500080
 8003cb8:	19200040 	.word	0x19200040
 8003cbc:	40022100 	.word	0x40022100
 8003cc0:	58026000 	.word	0x58026000
 8003cc4:	3ac04000 	.word	0x3ac04000
 8003cc8:	3ef08000 	.word	0x3ef08000
 8003ccc:	40022300 	.word	0x40022300
 8003cd0:	4b61      	ldr	r3, [pc, #388]	@ (8003e58 <HAL_ADC_ConfigChannel+0x980>)
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fe fcf8 	bl	80026c8 <LL_ADC_GetCommonPathInternalCh>
 8003cd8:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a5f      	ldr	r2, [pc, #380]	@ (8003e5c <HAL_ADC_ConfigChannel+0x984>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d004      	beq.n	8003cee <HAL_ADC_ConfigChannel+0x816>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a5d      	ldr	r2, [pc, #372]	@ (8003e60 <HAL_ADC_ConfigChannel+0x988>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d10e      	bne.n	8003d0c <HAL_ADC_ConfigChannel+0x834>
 8003cee:	485b      	ldr	r0, [pc, #364]	@ (8003e5c <HAL_ADC_ConfigChannel+0x984>)
 8003cf0:	f7fe ff60 	bl	8002bb4 <LL_ADC_IsEnabled>
 8003cf4:	4604      	mov	r4, r0
 8003cf6:	485a      	ldr	r0, [pc, #360]	@ (8003e60 <HAL_ADC_ConfigChannel+0x988>)
 8003cf8:	f7fe ff5c 	bl	8002bb4 <LL_ADC_IsEnabled>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	4323      	orrs	r3, r4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	bf0c      	ite	eq
 8003d04:	2301      	moveq	r3, #1
 8003d06:	2300      	movne	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	e008      	b.n	8003d1e <HAL_ADC_ConfigChannel+0x846>
 8003d0c:	4855      	ldr	r0, [pc, #340]	@ (8003e64 <HAL_ADC_ConfigChannel+0x98c>)
 8003d0e:	f7fe ff51 	bl	8002bb4 <LL_ADC_IsEnabled>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	bf0c      	ite	eq
 8003d18:	2301      	moveq	r3, #1
 8003d1a:	2300      	movne	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d07d      	beq.n	8003e1e <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a50      	ldr	r2, [pc, #320]	@ (8003e68 <HAL_ADC_ConfigChannel+0x990>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d130      	bne.n	8003d8e <HAL_ADC_ConfigChannel+0x8b6>
 8003d2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d12b      	bne.n	8003d8e <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a4a      	ldr	r2, [pc, #296]	@ (8003e64 <HAL_ADC_ConfigChannel+0x98c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	f040 8081 	bne.w	8003e44 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a45      	ldr	r2, [pc, #276]	@ (8003e5c <HAL_ADC_ConfigChannel+0x984>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d004      	beq.n	8003d56 <HAL_ADC_ConfigChannel+0x87e>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a43      	ldr	r2, [pc, #268]	@ (8003e60 <HAL_ADC_ConfigChannel+0x988>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d101      	bne.n	8003d5a <HAL_ADC_ConfigChannel+0x882>
 8003d56:	4a45      	ldr	r2, [pc, #276]	@ (8003e6c <HAL_ADC_ConfigChannel+0x994>)
 8003d58:	e000      	b.n	8003d5c <HAL_ADC_ConfigChannel+0x884>
 8003d5a:	4a3f      	ldr	r2, [pc, #252]	@ (8003e58 <HAL_ADC_ConfigChannel+0x980>)
 8003d5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d5e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003d62:	4619      	mov	r1, r3
 8003d64:	4610      	mov	r0, r2
 8003d66:	f7fe fc9c 	bl	80026a2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d6a:	4b41      	ldr	r3, [pc, #260]	@ (8003e70 <HAL_ADC_ConfigChannel+0x998>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	099b      	lsrs	r3, r3, #6
 8003d70:	4a40      	ldr	r2, [pc, #256]	@ (8003e74 <HAL_ADC_ConfigChannel+0x99c>)
 8003d72:	fba2 2303 	umull	r2, r3, r2, r3
 8003d76:	099b      	lsrs	r3, r3, #6
 8003d78:	3301      	adds	r3, #1
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003d7e:	e002      	b.n	8003d86 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1f9      	bne.n	8003d80 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d8c:	e05a      	b.n	8003e44 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a39      	ldr	r2, [pc, #228]	@ (8003e78 <HAL_ADC_ConfigChannel+0x9a0>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d11e      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x8fe>
 8003d98:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d119      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a2f      	ldr	r2, [pc, #188]	@ (8003e64 <HAL_ADC_ConfigChannel+0x98c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d14b      	bne.n	8003e44 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a2a      	ldr	r2, [pc, #168]	@ (8003e5c <HAL_ADC_ConfigChannel+0x984>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d004      	beq.n	8003dc0 <HAL_ADC_ConfigChannel+0x8e8>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a29      	ldr	r2, [pc, #164]	@ (8003e60 <HAL_ADC_ConfigChannel+0x988>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d101      	bne.n	8003dc4 <HAL_ADC_ConfigChannel+0x8ec>
 8003dc0:	4a2a      	ldr	r2, [pc, #168]	@ (8003e6c <HAL_ADC_ConfigChannel+0x994>)
 8003dc2:	e000      	b.n	8003dc6 <HAL_ADC_ConfigChannel+0x8ee>
 8003dc4:	4a24      	ldr	r2, [pc, #144]	@ (8003e58 <HAL_ADC_ConfigChannel+0x980>)
 8003dc6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003dc8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4610      	mov	r0, r2
 8003dd0:	f7fe fc67 	bl	80026a2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003dd4:	e036      	b.n	8003e44 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a28      	ldr	r2, [pc, #160]	@ (8003e7c <HAL_ADC_ConfigChannel+0x9a4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d131      	bne.n	8003e44 <HAL_ADC_ConfigChannel+0x96c>
 8003de0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003de2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d12c      	bne.n	8003e44 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a1d      	ldr	r2, [pc, #116]	@ (8003e64 <HAL_ADC_ConfigChannel+0x98c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d127      	bne.n	8003e44 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a18      	ldr	r2, [pc, #96]	@ (8003e5c <HAL_ADC_ConfigChannel+0x984>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d004      	beq.n	8003e08 <HAL_ADC_ConfigChannel+0x930>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a17      	ldr	r2, [pc, #92]	@ (8003e60 <HAL_ADC_ConfigChannel+0x988>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d101      	bne.n	8003e0c <HAL_ADC_ConfigChannel+0x934>
 8003e08:	4a18      	ldr	r2, [pc, #96]	@ (8003e6c <HAL_ADC_ConfigChannel+0x994>)
 8003e0a:	e000      	b.n	8003e0e <HAL_ADC_ConfigChannel+0x936>
 8003e0c:	4a12      	ldr	r2, [pc, #72]	@ (8003e58 <HAL_ADC_ConfigChannel+0x980>)
 8003e0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e10:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003e14:	4619      	mov	r1, r3
 8003e16:	4610      	mov	r0, r2
 8003e18:	f7fe fc43 	bl	80026a2 <LL_ADC_SetCommonPathInternalCh>
 8003e1c:	e012      	b.n	8003e44 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e22:	f043 0220 	orr.w	r2, r3, #32
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8003e30:	e008      	b.n	8003e44 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e36:	f043 0220 	orr.w	r2, r3, #32
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003e4c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3794      	adds	r7, #148	@ 0x94
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd90      	pop	{r4, r7, pc}
 8003e58:	58026300 	.word	0x58026300
 8003e5c:	40022000 	.word	0x40022000
 8003e60:	40022100 	.word	0x40022100
 8003e64:	58026000 	.word	0x58026000
 8003e68:	c7520000 	.word	0xc7520000
 8003e6c:	40022300 	.word	0x40022300
 8003e70:	24000008 	.word	0x24000008
 8003e74:	053e2d63 	.word	0x053e2d63
 8003e78:	c3210000 	.word	0xc3210000
 8003e7c:	cb840000 	.word	0xcb840000

08003e80 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fe feda 	bl	8002c50 <LL_ADC_REG_IsConversionOngoing>
 8003e9c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fe fefc 	bl	8002ca0 <LL_ADC_INJ_IsConversionOngoing>
 8003ea8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d103      	bne.n	8003eb8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 8098 	beq.w	8003fe8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d02a      	beq.n	8003f1c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	7e5b      	ldrb	r3, [r3, #25]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d126      	bne.n	8003f1c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	7e1b      	ldrb	r3, [r3, #24]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d122      	bne.n	8003f1c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003eda:	e014      	b.n	8003f06 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	4a45      	ldr	r2, [pc, #276]	@ (8003ff4 <ADC_ConversionStop+0x174>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d90d      	bls.n	8003f00 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ee8:	f043 0210 	orr.w	r2, r3, #16
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ef4:	f043 0201 	orr.w	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e074      	b.n	8003fea <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	3301      	adds	r3, #1
 8003f04:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f10:	2b40      	cmp	r3, #64	@ 0x40
 8003f12:	d1e3      	bne.n	8003edc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2240      	movs	r2, #64	@ 0x40
 8003f1a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d014      	beq.n	8003f4c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fe fe92 	bl	8002c50 <LL_ADC_REG_IsConversionOngoing>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00c      	beq.n	8003f4c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fe fe4f 	bl	8002bda <LL_ADC_IsDisableOngoing>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d104      	bne.n	8003f4c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fe fe6e 	bl	8002c28 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d014      	beq.n	8003f7c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fe fea2 	bl	8002ca0 <LL_ADC_INJ_IsConversionOngoing>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00c      	beq.n	8003f7c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fe fe37 	bl	8002bda <LL_ADC_IsDisableOngoing>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d104      	bne.n	8003f7c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fe fe7e 	bl	8002c78 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d005      	beq.n	8003f8e <ADC_ConversionStop+0x10e>
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	2b03      	cmp	r3, #3
 8003f86:	d105      	bne.n	8003f94 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003f88:	230c      	movs	r3, #12
 8003f8a:	617b      	str	r3, [r7, #20]
        break;
 8003f8c:	e005      	b.n	8003f9a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003f8e:	2308      	movs	r3, #8
 8003f90:	617b      	str	r3, [r7, #20]
        break;
 8003f92:	e002      	b.n	8003f9a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003f94:	2304      	movs	r3, #4
 8003f96:	617b      	str	r3, [r7, #20]
        break;
 8003f98:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003f9a:	f7fe fb63 	bl	8002664 <HAL_GetTick>
 8003f9e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003fa0:	e01b      	b.n	8003fda <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003fa2:	f7fe fb5f 	bl	8002664 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b05      	cmp	r3, #5
 8003fae:	d914      	bls.n	8003fda <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00d      	beq.n	8003fda <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fc2:	f043 0210 	orr.w	r2, r3, #16
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fce:	f043 0201 	orr.w	r2, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e007      	b.n	8003fea <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1dc      	bne.n	8003fa2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3720      	adds	r7, #32
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	000cdbff 	.word	0x000cdbff

08003ff8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f7fe fdd5 	bl	8002bb4 <LL_ADC_IsEnabled>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d16e      	bne.n	80040ee <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	4b38      	ldr	r3, [pc, #224]	@ (80040f8 <ADC_Enable+0x100>)
 8004018:	4013      	ands	r3, r2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00d      	beq.n	800403a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004022:	f043 0210 	orr.w	r2, r3, #16
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800402e:	f043 0201 	orr.w	r2, r3, #1
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e05a      	b.n	80040f0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f7fe fd90 	bl	8002b64 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004044:	f7fe fb0e 	bl	8002664 <HAL_GetTick>
 8004048:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a2b      	ldr	r2, [pc, #172]	@ (80040fc <ADC_Enable+0x104>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d004      	beq.n	800405e <ADC_Enable+0x66>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a29      	ldr	r2, [pc, #164]	@ (8004100 <ADC_Enable+0x108>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d101      	bne.n	8004062 <ADC_Enable+0x6a>
 800405e:	4b29      	ldr	r3, [pc, #164]	@ (8004104 <ADC_Enable+0x10c>)
 8004060:	e000      	b.n	8004064 <ADC_Enable+0x6c>
 8004062:	4b29      	ldr	r3, [pc, #164]	@ (8004108 <ADC_Enable+0x110>)
 8004064:	4618      	mov	r0, r3
 8004066:	f7fe fd13 	bl	8002a90 <LL_ADC_GetMultimode>
 800406a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a23      	ldr	r2, [pc, #140]	@ (8004100 <ADC_Enable+0x108>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d002      	beq.n	800407c <ADC_Enable+0x84>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	e000      	b.n	800407e <ADC_Enable+0x86>
 800407c:	4b1f      	ldr	r3, [pc, #124]	@ (80040fc <ADC_Enable+0x104>)
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6812      	ldr	r2, [r2, #0]
 8004082:	4293      	cmp	r3, r2
 8004084:	d02c      	beq.n	80040e0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d130      	bne.n	80040ee <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800408c:	e028      	b.n	80040e0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f7fe fd8e 	bl	8002bb4 <LL_ADC_IsEnabled>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d104      	bne.n	80040a8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fe fd5e 	bl	8002b64 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80040a8:	f7fe fadc 	bl	8002664 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d914      	bls.n	80040e0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d00d      	beq.n	80040e0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040c8:	f043 0210 	orr.w	r2, r3, #16
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040d4:	f043 0201 	orr.w	r2, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e007      	b.n	80040f0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d1cf      	bne.n	800408e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	8000003f 	.word	0x8000003f
 80040fc:	40022000 	.word	0x40022000
 8004100:	40022100 	.word	0x40022100
 8004104:	40022300 	.word	0x40022300
 8004108:	58026300 	.word	0x58026300

0800410c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f7fe fd5e 	bl	8002bda <LL_ADC_IsDisableOngoing>
 800411e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f7fe fd45 	bl	8002bb4 <LL_ADC_IsEnabled>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d047      	beq.n	80041c0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d144      	bne.n	80041c0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 030d 	and.w	r3, r3, #13
 8004140:	2b01      	cmp	r3, #1
 8004142:	d10c      	bne.n	800415e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4618      	mov	r0, r3
 800414a:	f7fe fd1f 	bl	8002b8c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2203      	movs	r2, #3
 8004154:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004156:	f7fe fa85 	bl	8002664 <HAL_GetTick>
 800415a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800415c:	e029      	b.n	80041b2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004162:	f043 0210 	orr.w	r2, r3, #16
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800416e:	f043 0201 	orr.w	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e023      	b.n	80041c2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800417a:	f7fe fa73 	bl	8002664 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d914      	bls.n	80041b2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00d      	beq.n	80041b2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800419a:	f043 0210 	orr.w	r2, r3, #16
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041a6:	f043 0201 	orr.w	r2, r3, #1
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e007      	b.n	80041c2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1dc      	bne.n	800417a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
	...

080041cc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a6c      	ldr	r2, [pc, #432]	@ (800438c <ADC_ConfigureBoostMode+0x1c0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d004      	beq.n	80041e8 <ADC_ConfigureBoostMode+0x1c>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a6b      	ldr	r2, [pc, #428]	@ (8004390 <ADC_ConfigureBoostMode+0x1c4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d109      	bne.n	80041fc <ADC_ConfigureBoostMode+0x30>
 80041e8:	4b6a      	ldr	r3, [pc, #424]	@ (8004394 <ADC_ConfigureBoostMode+0x1c8>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	bf14      	ite	ne
 80041f4:	2301      	movne	r3, #1
 80041f6:	2300      	moveq	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	e008      	b.n	800420e <ADC_ConfigureBoostMode+0x42>
 80041fc:	4b66      	ldr	r3, [pc, #408]	@ (8004398 <ADC_ConfigureBoostMode+0x1cc>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004204:	2b00      	cmp	r3, #0
 8004206:	bf14      	ite	ne
 8004208:	2301      	movne	r3, #1
 800420a:	2300      	moveq	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d01c      	beq.n	800424c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004212:	f002 fdcd 	bl	8006db0 <HAL_RCC_GetHCLKFreq>
 8004216:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004220:	d010      	beq.n	8004244 <ADC_ConfigureBoostMode+0x78>
 8004222:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004226:	d873      	bhi.n	8004310 <ADC_ConfigureBoostMode+0x144>
 8004228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800422c:	d002      	beq.n	8004234 <ADC_ConfigureBoostMode+0x68>
 800422e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004232:	d16d      	bne.n	8004310 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	0c1b      	lsrs	r3, r3, #16
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004240:	60fb      	str	r3, [r7, #12]
        break;
 8004242:	e068      	b.n	8004316 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	089b      	lsrs	r3, r3, #2
 8004248:	60fb      	str	r3, [r7, #12]
        break;
 800424a:	e064      	b.n	8004316 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800424c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004250:	f04f 0100 	mov.w	r1, #0
 8004254:	f003 ffa8 	bl	80081a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004258:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004262:	d051      	beq.n	8004308 <ADC_ConfigureBoostMode+0x13c>
 8004264:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004268:	d854      	bhi.n	8004314 <ADC_ConfigureBoostMode+0x148>
 800426a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800426e:	d047      	beq.n	8004300 <ADC_ConfigureBoostMode+0x134>
 8004270:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004274:	d84e      	bhi.n	8004314 <ADC_ConfigureBoostMode+0x148>
 8004276:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800427a:	d03d      	beq.n	80042f8 <ADC_ConfigureBoostMode+0x12c>
 800427c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004280:	d848      	bhi.n	8004314 <ADC_ConfigureBoostMode+0x148>
 8004282:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004286:	d033      	beq.n	80042f0 <ADC_ConfigureBoostMode+0x124>
 8004288:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800428c:	d842      	bhi.n	8004314 <ADC_ConfigureBoostMode+0x148>
 800428e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004292:	d029      	beq.n	80042e8 <ADC_ConfigureBoostMode+0x11c>
 8004294:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004298:	d83c      	bhi.n	8004314 <ADC_ConfigureBoostMode+0x148>
 800429a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800429e:	d01a      	beq.n	80042d6 <ADC_ConfigureBoostMode+0x10a>
 80042a0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80042a4:	d836      	bhi.n	8004314 <ADC_ConfigureBoostMode+0x148>
 80042a6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80042aa:	d014      	beq.n	80042d6 <ADC_ConfigureBoostMode+0x10a>
 80042ac:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80042b0:	d830      	bhi.n	8004314 <ADC_ConfigureBoostMode+0x148>
 80042b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042b6:	d00e      	beq.n	80042d6 <ADC_ConfigureBoostMode+0x10a>
 80042b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042bc:	d82a      	bhi.n	8004314 <ADC_ConfigureBoostMode+0x148>
 80042be:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80042c2:	d008      	beq.n	80042d6 <ADC_ConfigureBoostMode+0x10a>
 80042c4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80042c8:	d824      	bhi.n	8004314 <ADC_ConfigureBoostMode+0x148>
 80042ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042ce:	d002      	beq.n	80042d6 <ADC_ConfigureBoostMode+0x10a>
 80042d0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80042d4:	d11e      	bne.n	8004314 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	0c9b      	lsrs	r3, r3, #18
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e4:	60fb      	str	r3, [r7, #12]
        break;
 80042e6:	e016      	b.n	8004316 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	091b      	lsrs	r3, r3, #4
 80042ec:	60fb      	str	r3, [r7, #12]
        break;
 80042ee:	e012      	b.n	8004316 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	095b      	lsrs	r3, r3, #5
 80042f4:	60fb      	str	r3, [r7, #12]
        break;
 80042f6:	e00e      	b.n	8004316 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	099b      	lsrs	r3, r3, #6
 80042fc:	60fb      	str	r3, [r7, #12]
        break;
 80042fe:	e00a      	b.n	8004316 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	09db      	lsrs	r3, r3, #7
 8004304:	60fb      	str	r3, [r7, #12]
        break;
 8004306:	e006      	b.n	8004316 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	0a1b      	lsrs	r3, r3, #8
 800430c:	60fb      	str	r3, [r7, #12]
        break;
 800430e:	e002      	b.n	8004316 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004310:	bf00      	nop
 8004312:	e000      	b.n	8004316 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004314:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	085b      	lsrs	r3, r3, #1
 800431a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4a1f      	ldr	r2, [pc, #124]	@ (800439c <ADC_ConfigureBoostMode+0x1d0>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d808      	bhi.n	8004336 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689a      	ldr	r2, [r3, #8]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004332:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004334:	e025      	b.n	8004382 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4a19      	ldr	r2, [pc, #100]	@ (80043a0 <ADC_ConfigureBoostMode+0x1d4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d80a      	bhi.n	8004354 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004350:	609a      	str	r2, [r3, #8]
}
 8004352:	e016      	b.n	8004382 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4a13      	ldr	r2, [pc, #76]	@ (80043a4 <ADC_ConfigureBoostMode+0x1d8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d80a      	bhi.n	8004372 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800436e:	609a      	str	r2, [r3, #8]
}
 8004370:	e007      	b.n	8004382 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004380:	609a      	str	r2, [r3, #8]
}
 8004382:	bf00      	nop
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	40022000 	.word	0x40022000
 8004390:	40022100 	.word	0x40022100
 8004394:	40022300 	.word	0x40022300
 8004398:	58026300 	.word	0x58026300
 800439c:	005f5e10 	.word	0x005f5e10
 80043a0:	00bebc20 	.word	0x00bebc20
 80043a4:	017d7840 	.word	0x017d7840

080043a8 <LL_ADC_IsEnabled>:
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <LL_ADC_IsEnabled+0x18>
 80043bc:	2301      	movs	r3, #1
 80043be:	e000      	b.n	80043c2 <LL_ADC_IsEnabled+0x1a>
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <LL_ADC_REG_IsConversionOngoing>:
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 0304 	and.w	r3, r3, #4
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d101      	bne.n	80043e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80043f4:	b590      	push	{r4, r7, lr}
 80043f6:	b0a3      	sub	sp, #140	@ 0x8c
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800440a:	2b01      	cmp	r3, #1
 800440c:	d101      	bne.n	8004412 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800440e:	2302      	movs	r3, #2
 8004410:	e0c1      	b.n	8004596 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800441a:	2300      	movs	r3, #0
 800441c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800441e:	2300      	movs	r3, #0
 8004420:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a5e      	ldr	r2, [pc, #376]	@ (80045a0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d102      	bne.n	8004432 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800442c:	4b5d      	ldr	r3, [pc, #372]	@ (80045a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	e001      	b.n	8004436 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004432:	2300      	movs	r3, #0
 8004434:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10b      	bne.n	8004454 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004440:	f043 0220 	orr.w	r2, r3, #32
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e0a0      	b.n	8004596 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4618      	mov	r0, r3
 8004458:	f7ff ffb9 	bl	80043ce <LL_ADC_REG_IsConversionOngoing>
 800445c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff ffb2 	bl	80043ce <LL_ADC_REG_IsConversionOngoing>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	f040 8081 	bne.w	8004574 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004472:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004476:	2b00      	cmp	r3, #0
 8004478:	d17c      	bne.n	8004574 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a48      	ldr	r2, [pc, #288]	@ (80045a0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d004      	beq.n	800448e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a46      	ldr	r2, [pc, #280]	@ (80045a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d101      	bne.n	8004492 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800448e:	4b46      	ldr	r3, [pc, #280]	@ (80045a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004490:	e000      	b.n	8004494 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004492:	4b46      	ldr	r3, [pc, #280]	@ (80045ac <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004494:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d039      	beq.n	8004512 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800449e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	431a      	orrs	r2, r3
 80044ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044ae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a3a      	ldr	r2, [pc, #232]	@ (80045a0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d004      	beq.n	80044c4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a39      	ldr	r2, [pc, #228]	@ (80045a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d10e      	bne.n	80044e2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80044c4:	4836      	ldr	r0, [pc, #216]	@ (80045a0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80044c6:	f7ff ff6f 	bl	80043a8 <LL_ADC_IsEnabled>
 80044ca:	4604      	mov	r4, r0
 80044cc:	4835      	ldr	r0, [pc, #212]	@ (80045a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80044ce:	f7ff ff6b 	bl	80043a8 <LL_ADC_IsEnabled>
 80044d2:	4603      	mov	r3, r0
 80044d4:	4323      	orrs	r3, r4
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	bf0c      	ite	eq
 80044da:	2301      	moveq	r3, #1
 80044dc:	2300      	movne	r3, #0
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	e008      	b.n	80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80044e2:	4833      	ldr	r0, [pc, #204]	@ (80045b0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80044e4:	f7ff ff60 	bl	80043a8 <LL_ADC_IsEnabled>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	bf0c      	ite	eq
 80044ee:	2301      	moveq	r3, #1
 80044f0:	2300      	movne	r3, #0
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d047      	beq.n	8004588 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80044f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	4b2d      	ldr	r3, [pc, #180]	@ (80045b4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80044fe:	4013      	ands	r3, r2
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	6811      	ldr	r1, [r2, #0]
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	6892      	ldr	r2, [r2, #8]
 8004508:	430a      	orrs	r2, r1
 800450a:	431a      	orrs	r2, r3
 800450c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800450e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004510:	e03a      	b.n	8004588 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004512:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800451a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800451c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a1f      	ldr	r2, [pc, #124]	@ (80045a0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d004      	beq.n	8004532 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a1d      	ldr	r2, [pc, #116]	@ (80045a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d10e      	bne.n	8004550 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004532:	481b      	ldr	r0, [pc, #108]	@ (80045a0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004534:	f7ff ff38 	bl	80043a8 <LL_ADC_IsEnabled>
 8004538:	4604      	mov	r4, r0
 800453a:	481a      	ldr	r0, [pc, #104]	@ (80045a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800453c:	f7ff ff34 	bl	80043a8 <LL_ADC_IsEnabled>
 8004540:	4603      	mov	r3, r0
 8004542:	4323      	orrs	r3, r4
 8004544:	2b00      	cmp	r3, #0
 8004546:	bf0c      	ite	eq
 8004548:	2301      	moveq	r3, #1
 800454a:	2300      	movne	r3, #0
 800454c:	b2db      	uxtb	r3, r3
 800454e:	e008      	b.n	8004562 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004550:	4817      	ldr	r0, [pc, #92]	@ (80045b0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004552:	f7ff ff29 	bl	80043a8 <LL_ADC_IsEnabled>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	bf0c      	ite	eq
 800455c:	2301      	moveq	r3, #1
 800455e:	2300      	movne	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d010      	beq.n	8004588 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004566:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	4b12      	ldr	r3, [pc, #72]	@ (80045b4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800456c:	4013      	ands	r3, r2
 800456e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004570:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004572:	e009      	b.n	8004588 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004578:	f043 0220 	orr.w	r2, r3, #32
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004586:	e000      	b.n	800458a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004588:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004592:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004596:	4618      	mov	r0, r3
 8004598:	378c      	adds	r7, #140	@ 0x8c
 800459a:	46bd      	mov	sp, r7
 800459c:	bd90      	pop	{r4, r7, pc}
 800459e:	bf00      	nop
 80045a0:	40022000 	.word	0x40022000
 80045a4:	40022100 	.word	0x40022100
 80045a8:	40022300 	.word	0x40022300
 80045ac:	58026300 	.word	0x58026300
 80045b0:	58026000 	.word	0x58026000
 80045b4:	fffff0e0 	.word	0xfffff0e0

080045b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045c8:	4b0b      	ldr	r3, [pc, #44]	@ (80045f8 <__NVIC_SetPriorityGrouping+0x40>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80045d4:	4013      	ands	r3, r2
 80045d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80045e0:	4b06      	ldr	r3, [pc, #24]	@ (80045fc <__NVIC_SetPriorityGrouping+0x44>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045e6:	4a04      	ldr	r2, [pc, #16]	@ (80045f8 <__NVIC_SetPriorityGrouping+0x40>)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	60d3      	str	r3, [r2, #12]
}
 80045ec:	bf00      	nop
 80045ee:	3714      	adds	r7, #20
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	e000ed00 	.word	0xe000ed00
 80045fc:	05fa0000 	.word	0x05fa0000

08004600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004604:	4b04      	ldr	r3, [pc, #16]	@ (8004618 <__NVIC_GetPriorityGrouping+0x18>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	0a1b      	lsrs	r3, r3, #8
 800460a:	f003 0307 	and.w	r3, r3, #7
}
 800460e:	4618      	mov	r0, r3
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	e000ed00 	.word	0xe000ed00

0800461c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	4603      	mov	r3, r0
 8004624:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004626:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800462a:	2b00      	cmp	r3, #0
 800462c:	db0b      	blt.n	8004646 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800462e:	88fb      	ldrh	r3, [r7, #6]
 8004630:	f003 021f 	and.w	r2, r3, #31
 8004634:	4907      	ldr	r1, [pc, #28]	@ (8004654 <__NVIC_EnableIRQ+0x38>)
 8004636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800463a:	095b      	lsrs	r3, r3, #5
 800463c:	2001      	movs	r0, #1
 800463e:	fa00 f202 	lsl.w	r2, r0, r2
 8004642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	e000e100 	.word	0xe000e100

08004658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	6039      	str	r1, [r7, #0]
 8004662:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004664:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004668:	2b00      	cmp	r3, #0
 800466a:	db0a      	blt.n	8004682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	b2da      	uxtb	r2, r3
 8004670:	490c      	ldr	r1, [pc, #48]	@ (80046a4 <__NVIC_SetPriority+0x4c>)
 8004672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004676:	0112      	lsls	r2, r2, #4
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	440b      	add	r3, r1
 800467c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004680:	e00a      	b.n	8004698 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	b2da      	uxtb	r2, r3
 8004686:	4908      	ldr	r1, [pc, #32]	@ (80046a8 <__NVIC_SetPriority+0x50>)
 8004688:	88fb      	ldrh	r3, [r7, #6]
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	3b04      	subs	r3, #4
 8004690:	0112      	lsls	r2, r2, #4
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	440b      	add	r3, r1
 8004696:	761a      	strb	r2, [r3, #24]
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	e000e100 	.word	0xe000e100
 80046a8:	e000ed00 	.word	0xe000ed00

080046ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b089      	sub	sp, #36	@ 0x24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f1c3 0307 	rsb	r3, r3, #7
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	bf28      	it	cs
 80046ca:	2304      	movcs	r3, #4
 80046cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	3304      	adds	r3, #4
 80046d2:	2b06      	cmp	r3, #6
 80046d4:	d902      	bls.n	80046dc <NVIC_EncodePriority+0x30>
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	3b03      	subs	r3, #3
 80046da:	e000      	b.n	80046de <NVIC_EncodePriority+0x32>
 80046dc:	2300      	movs	r3, #0
 80046de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046e0:	f04f 32ff 	mov.w	r2, #4294967295
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	43da      	mvns	r2, r3
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	401a      	ands	r2, r3
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046f4:	f04f 31ff 	mov.w	r1, #4294967295
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	fa01 f303 	lsl.w	r3, r1, r3
 80046fe:	43d9      	mvns	r1, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004704:	4313      	orrs	r3, r2
         );
}
 8004706:	4618      	mov	r0, r3
 8004708:	3724      	adds	r7, #36	@ 0x24
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
	...

08004714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3b01      	subs	r3, #1
 8004720:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004724:	d301      	bcc.n	800472a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004726:	2301      	movs	r3, #1
 8004728:	e00f      	b.n	800474a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800472a:	4a0a      	ldr	r2, [pc, #40]	@ (8004754 <SysTick_Config+0x40>)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3b01      	subs	r3, #1
 8004730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004732:	210f      	movs	r1, #15
 8004734:	f04f 30ff 	mov.w	r0, #4294967295
 8004738:	f7ff ff8e 	bl	8004658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800473c:	4b05      	ldr	r3, [pc, #20]	@ (8004754 <SysTick_Config+0x40>)
 800473e:	2200      	movs	r2, #0
 8004740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004742:	4b04      	ldr	r3, [pc, #16]	@ (8004754 <SysTick_Config+0x40>)
 8004744:	2207      	movs	r2, #7
 8004746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	e000e010 	.word	0xe000e010

08004758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7ff ff29 	bl	80045b8 <__NVIC_SetPriorityGrouping>
}
 8004766:	bf00      	nop
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b086      	sub	sp, #24
 8004772:	af00      	add	r7, sp, #0
 8004774:	4603      	mov	r3, r0
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	607a      	str	r2, [r7, #4]
 800477a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800477c:	f7ff ff40 	bl	8004600 <__NVIC_GetPriorityGrouping>
 8004780:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	68b9      	ldr	r1, [r7, #8]
 8004786:	6978      	ldr	r0, [r7, #20]
 8004788:	f7ff ff90 	bl	80046ac <NVIC_EncodePriority>
 800478c:	4602      	mov	r2, r0
 800478e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004792:	4611      	mov	r1, r2
 8004794:	4618      	mov	r0, r3
 8004796:	f7ff ff5f 	bl	8004658 <__NVIC_SetPriority>
}
 800479a:	bf00      	nop
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b082      	sub	sp, #8
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	4603      	mov	r3, r0
 80047aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7ff ff33 	bl	800461c <__NVIC_EnableIRQ>
}
 80047b6:	bf00      	nop
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b082      	sub	sp, #8
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7ff ffa4 	bl	8004714 <SysTick_Config>
 80047cc:	4603      	mov	r3, r0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
	...

080047d8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b098      	sub	sp, #96	@ 0x60
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80047e0:	4a84      	ldr	r2, [pc, #528]	@ (80049f4 <HAL_FDCAN_Init+0x21c>)
 80047e2:	f107 030c 	add.w	r3, r7, #12
 80047e6:	4611      	mov	r1, r2
 80047e8:	224c      	movs	r2, #76	@ 0x4c
 80047ea:	4618      	mov	r0, r3
 80047ec:	f006 f9e6 	bl	800abbc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e1c6      	b.n	8004b88 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a7e      	ldr	r2, [pc, #504]	@ (80049f8 <HAL_FDCAN_Init+0x220>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d106      	bne.n	8004812 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800480c:	461a      	mov	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d106      	bne.n	800482c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7fd fc46 	bl	80020b8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0210 	bic.w	r2, r2, #16
 800483a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800483c:	f7fd ff12 	bl	8002664 <HAL_GetTick>
 8004840:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004842:	e014      	b.n	800486e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004844:	f7fd ff0e 	bl	8002664 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b0a      	cmp	r3, #10
 8004850:	d90d      	bls.n	800486e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004858:	f043 0201 	orr.w	r2, r3, #1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2203      	movs	r2, #3
 8004866:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e18c      	b.n	8004b88 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b08      	cmp	r3, #8
 800487a:	d0e3      	beq.n	8004844 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699a      	ldr	r2, [r3, #24]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800488c:	f7fd feea 	bl	8002664 <HAL_GetTick>
 8004890:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004892:	e014      	b.n	80048be <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004894:	f7fd fee6 	bl	8002664 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b0a      	cmp	r3, #10
 80048a0:	d90d      	bls.n	80048be <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048a8:	f043 0201 	orr.w	r2, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2203      	movs	r2, #3
 80048b6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e164      	b.n	8004b88 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0e3      	beq.n	8004894 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699a      	ldr	r2, [r3, #24]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0202 	orr.w	r2, r2, #2
 80048da:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	7c1b      	ldrb	r3, [r3, #16]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d108      	bne.n	80048f6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	699a      	ldr	r2, [r3, #24]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048f2:	619a      	str	r2, [r3, #24]
 80048f4:	e007      	b.n	8004906 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	699a      	ldr	r2, [r3, #24]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004904:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	7c5b      	ldrb	r3, [r3, #17]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d108      	bne.n	8004920 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	699a      	ldr	r2, [r3, #24]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800491c:	619a      	str	r2, [r3, #24]
 800491e:	e007      	b.n	8004930 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699a      	ldr	r2, [r3, #24]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800492e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	7c9b      	ldrb	r3, [r3, #18]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d108      	bne.n	800494a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699a      	ldr	r2, [r3, #24]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004946:	619a      	str	r2, [r3, #24]
 8004948:	e007      	b.n	800495a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	699a      	ldr	r2, [r3, #24]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004958:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	699a      	ldr	r2, [r3, #24]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800497e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	691a      	ldr	r2, [r3, #16]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 0210 	bic.w	r2, r2, #16
 800498e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d108      	bne.n	80049aa <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699a      	ldr	r2, [r3, #24]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0204 	orr.w	r2, r2, #4
 80049a6:	619a      	str	r2, [r3, #24]
 80049a8:	e030      	b.n	8004a0c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d02c      	beq.n	8004a0c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d020      	beq.n	80049fc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	699a      	ldr	r2, [r3, #24]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80049c8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f042 0210 	orr.w	r2, r2, #16
 80049d8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	2b03      	cmp	r3, #3
 80049e0:	d114      	bne.n	8004a0c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	699a      	ldr	r2, [r3, #24]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f042 0220 	orr.w	r2, r2, #32
 80049f0:	619a      	str	r2, [r3, #24]
 80049f2:	e00b      	b.n	8004a0c <HAL_FDCAN_Init+0x234>
 80049f4:	0800b5e8 	.word	0x0800b5e8
 80049f8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699a      	ldr	r2, [r3, #24]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 0220 	orr.w	r2, r2, #32
 8004a0a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	3b01      	subs	r3, #1
 8004a12:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a1c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004a24:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004a34:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a36:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a40:	d115      	bne.n	8004a6e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a46:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004a50:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a56:	3b01      	subs	r3, #1
 8004a58:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004a5a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a62:	3b01      	subs	r3, #1
 8004a64:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004a6a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004a6c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00a      	beq.n	8004a8c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a94:	4413      	add	r3, r2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d011      	beq.n	8004abe <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004aa2:	f023 0107 	bic.w	r1, r3, #7
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	3360      	adds	r3, #96	@ 0x60
 8004aae:	443b      	add	r3, r7
 8004ab0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d011      	beq.n	8004aea <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004ace:	f023 0107 	bic.w	r1, r3, #7
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	3360      	adds	r3, #96	@ 0x60
 8004ada:	443b      	add	r3, r7
 8004adc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d012      	beq.n	8004b18 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004afa:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	3360      	adds	r3, #96	@ 0x60
 8004b06:	443b      	add	r3, r7
 8004b08:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004b0c:	011a      	lsls	r2, r3, #4
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d012      	beq.n	8004b46 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004b28:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	3360      	adds	r3, #96	@ 0x60
 8004b34:	443b      	add	r3, r7
 8004b36:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004b3a:	021a      	lsls	r2, r3, #8
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a11      	ldr	r2, [pc, #68]	@ (8004b90 <HAL_FDCAN_Init+0x3b8>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d107      	bne.n	8004b60 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	689a      	ldr	r2, [r3, #8]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f022 0203 	bic.w	r2, r2, #3
 8004b5e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 fdf7 	bl	800576c <FDCAN_CalcultateRamBlockAddresses>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8004b84:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3760      	adds	r7, #96	@ 0x60
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	4000a000 	.word	0x4000a000

08004b94 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b087      	sub	sp, #28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004ba4:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d002      	beq.n	8004bb2 <HAL_FDCAN_ConfigFilter+0x1e>
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d157      	bne.n	8004c62 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d12b      	bne.n	8004c12 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	2b07      	cmp	r3, #7
 8004bc0:	d10d      	bne.n	8004bde <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8004bce:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004bd4:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8004bd6:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	e00e      	b.n	8004bfc <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004bea:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8004bf2:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	e025      	b.n	8004c5e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	075a      	lsls	r2, r3, #29
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	2b07      	cmp	r3, #7
 8004c26:	d103      	bne.n	8004c30 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	613b      	str	r3, [r7, #16]
 8004c2e:	e006      	b.n	8004c3e <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	079a      	lsls	r2, r3, #30
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	4413      	add	r3, r2
 8004c4a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	3304      	adds	r3, #4
 8004c56:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	e008      	b.n	8004c74 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c68:	f043 0202 	orr.w	r2, r3, #2
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
  }
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	371c      	adds	r7, #28
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d111      	bne.n	8004cb8 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699a      	ldr	r2, [r3, #24]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0201 	bic.w	r2, r2, #1
 8004caa:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	e008      	b.n	8004cca <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cbe:	f043 0204 	orr.w	r2, r3, #4
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
  }
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b086      	sub	sp, #24
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d141      	bne.n	8004d72 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004cf6:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d109      	bne.n	8004d12 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d04:	f043 0220 	orr.w	r2, r3, #32
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e038      	b.n	8004d84 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004d1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d009      	beq.n	8004d36 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d28:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e026      	b.n	8004d84 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004d3e:	0c1b      	lsrs	r3, r3, #16
 8004d40:	f003 031f 	and.w	r3, r3, #31
 8004d44:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	68b9      	ldr	r1, [r7, #8]
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 fe93 	bl	8005a78 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2101      	movs	r1, #1
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8004d5e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004d62:	2201      	movs	r2, #1
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	409a      	lsls	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	e008      	b.n	8004d84 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d78:	f043 0208 	orr.w	r2, r3, #8
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
  }
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3718      	adds	r7, #24
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b08b      	sub	sp, #44	@ 0x2c
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
 8004d98:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004da4:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8004da6:	7efb      	ldrb	r3, [r7, #27]
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	f040 8149 	bne.w	8005040 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2b40      	cmp	r3, #64	@ 0x40
 8004db2:	d14c      	bne.n	8004e4e <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004dbc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d109      	bne.n	8004dd8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004dca:	f043 0220 	orr.w	r2, r3, #32
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e13c      	b.n	8005052 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004de0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d109      	bne.n	8004dfc <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004dee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e12a      	b.n	8005052 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e0c:	d10a      	bne.n	8004e24 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004e16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e1e:	d101      	bne.n	8004e24 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004e20:	2301      	movs	r3, #1
 8004e22:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e2c:	0a1b      	lsrs	r3, r3, #8
 8004e2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e32:	69fa      	ldr	r2, [r7, #28]
 8004e34:	4413      	add	r3, r2
 8004e36:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e40:	69f9      	ldr	r1, [r7, #28]
 8004e42:	fb01 f303 	mul.w	r3, r1, r3
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e4c:	e068      	b.n	8004f20 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	2b41      	cmp	r3, #65	@ 0x41
 8004e52:	d14c      	bne.n	8004eee <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e5c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d109      	bne.n	8004e78 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e6a:	f043 0220 	orr.w	r2, r3, #32
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e0ec      	b.n	8005052 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d109      	bne.n	8004e9c <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e8e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e0da      	b.n	8005052 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ea4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ea8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004eac:	d10a      	bne.n	8004ec4 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004eb6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004eba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ebe:	d101      	bne.n	8004ec4 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ecc:	0a1b      	lsrs	r3, r3, #8
 8004ece:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ee0:	69f9      	ldr	r1, [r7, #28]
 8004ee2:	fb01 f303 	mul.w	r3, r1, r3
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eec:	e018      	b.n	8004f20 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d309      	bcc.n	8004f0c <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004efe:	f043 0220 	orr.w	r2, r3, #32
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e0a2      	b.n	8005052 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f14:	68b9      	ldr	r1, [r7, #8]
 8004f16:	fb01 f303 	mul.w	r3, r1, r3
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d107      	bne.n	8004f44 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	0c9b      	lsrs	r3, r3, #18
 8004f3a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	e005      	b.n	8004f50 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8004f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	0c1b      	lsrs	r3, r3, #16
 8004f7e:	f003 020f 	and.w	r2, r3, #15
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	0e1b      	lsrs	r3, r3, #24
 8004fa4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	0fda      	lsrs	r2, r3, #31
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb8:	3304      	adds	r3, #4
 8004fba:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbe:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	623b      	str	r3, [r7, #32]
 8004fc4:	e00a      	b.n	8004fdc <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	441a      	add	r2, r3
 8004fcc:	6839      	ldr	r1, [r7, #0]
 8004fce:	6a3b      	ldr	r3, [r7, #32]
 8004fd0:	440b      	add	r3, r1
 8004fd2:	7812      	ldrb	r2, [r2, #0]
 8004fd4:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	623b      	str	r3, [r7, #32]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	4a1f      	ldr	r2, [pc, #124]	@ (8005060 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8004fe2:	5cd3      	ldrb	r3, [r2, r3]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d3ec      	bcc.n	8004fc6 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2b40      	cmp	r3, #64	@ 0x40
 8004ff0:	d105      	bne.n	8004ffe <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69fa      	ldr	r2, [r7, #28]
 8004ff8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8004ffc:	e01e      	b.n	800503c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2b41      	cmp	r3, #65	@ 0x41
 8005002:	d105      	bne.n	8005010 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	69fa      	ldr	r2, [r7, #28]
 800500a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800500e:	e015      	b.n	800503c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	2b1f      	cmp	r3, #31
 8005014:	d808      	bhi.n	8005028 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2101      	movs	r1, #1
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	fa01 f202 	lsl.w	r2, r1, r2
 8005022:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8005026:	e009      	b.n	800503c <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f003 021f 	and.w	r2, r3, #31
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2101      	movs	r1, #1
 8005034:	fa01 f202 	lsl.w	r2, r1, r2
 8005038:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800503c:	2300      	movs	r3, #0
 800503e:	e008      	b.n	8005052 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005046:	f043 0208 	orr.w	r2, r3, #8
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
  }
}
 8005052:	4618      	mov	r0, r3
 8005054:	372c      	adds	r7, #44	@ 0x2c
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	0800b644 	.word	0x0800b644

08005064 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005076:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005078:	7dfb      	ldrb	r3, [r7, #23]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d002      	beq.n	8005084 <HAL_FDCAN_ActivateNotification+0x20>
 800507e:	7dfb      	ldrb	r3, [r7, #23]
 8005080:	2b02      	cmp	r3, #2
 8005082:	d155      	bne.n	8005130 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	4013      	ands	r3, r2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d108      	bne.n	80050a4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 0201 	orr.w	r2, r2, #1
 80050a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80050a2:	e014      	b.n	80050ce <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	4013      	ands	r3, r2
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d108      	bne.n	80050c6 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0202 	orr.w	r2, r2, #2
 80050c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80050c4:	e003      	b.n	80050ce <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2203      	movs	r2, #3
 80050cc:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d009      	beq.n	80050ec <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d009      	beq.n	800510a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	430a      	orrs	r2, r1
 8005106:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	4b0f      	ldr	r3, [pc, #60]	@ (8005150 <HAL_FDCAN_ActivateNotification+0xec>)
 8005114:	4013      	ands	r3, r2
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	6812      	ldr	r2, [r2, #0]
 800511a:	430b      	orrs	r3, r1
 800511c:	6553      	str	r3, [r2, #84]	@ 0x54
 800511e:	4b0d      	ldr	r3, [pc, #52]	@ (8005154 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005120:	695a      	ldr	r2, [r3, #20]
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	0f9b      	lsrs	r3, r3, #30
 8005126:	490b      	ldr	r1, [pc, #44]	@ (8005154 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005128:	4313      	orrs	r3, r2
 800512a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	e008      	b.n	8005142 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005136:	f043 0202 	orr.w	r2, r3, #2
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
  }
}
 8005142:	4618      	mov	r0, r3
 8005144:	371c      	adds	r7, #28
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	3fcfffff 	.word	0x3fcfffff
 8005154:	4000a800 	.word	0x4000a800

08005158 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b096      	sub	sp, #88	@ 0x58
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005160:	4b9a      	ldr	r3, [pc, #616]	@ (80053cc <HAL_FDCAN_IRQHandler+0x274>)
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	079b      	lsls	r3, r3, #30
 8005166:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005168:	4b98      	ldr	r3, [pc, #608]	@ (80053cc <HAL_FDCAN_IRQHandler+0x274>)
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	079b      	lsls	r3, r3, #30
 800516e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005170:	4013      	ands	r3, r2
 8005172:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800517a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800517e:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005186:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005188:	4013      	ands	r3, r2
 800518a:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005192:	f003 030f 	and.w	r3, r3, #15
 8005196:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800519e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80051a0:	4013      	ands	r3, r2
 80051a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051b8:	4013      	ands	r3, r2
 80051ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051c2:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 80051c6:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051d0:	4013      	ands	r3, r2
 80051d2:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051da:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 80051de:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051e8:	4013      	ands	r3, r2
 80051ea:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051fa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80051fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051fe:	0a1b      	lsrs	r3, r3, #8
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b00      	cmp	r3, #0
 8005206:	d010      	beq.n	800522a <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800520a:	0a1b      	lsrs	r3, r3, #8
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00a      	beq.n	800522a <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800521c:	651a      	str	r2, [r3, #80]	@ 0x50
 800521e:	4b6b      	ldr	r3, [pc, #428]	@ (80053cc <HAL_FDCAN_IRQHandler+0x274>)
 8005220:	2200      	movs	r2, #0
 8005222:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 fa54 	bl	80056d2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800522a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800522c:	0a9b      	lsrs	r3, r3, #10
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d01d      	beq.n	8005272 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005238:	0a9b      	lsrs	r3, r3, #10
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d017      	beq.n	8005272 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800524a:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005254:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005256:	4013      	ands	r3, r2
 8005258:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005262:	651a      	str	r2, [r3, #80]	@ 0x50
 8005264:	4b59      	ldr	r3, [pc, #356]	@ (80053cc <HAL_FDCAN_IRQHandler+0x274>)
 8005266:	2200      	movs	r2, #0
 8005268:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800526a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 fa07 	bl	8005680 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00d      	beq.n	8005294 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800527e:	4b54      	ldr	r3, [pc, #336]	@ (80053d0 <HAL_FDCAN_IRQHandler+0x278>)
 8005280:	400b      	ands	r3, r1
 8005282:	6513      	str	r3, [r2, #80]	@ 0x50
 8005284:	4a51      	ldr	r2, [pc, #324]	@ (80053cc <HAL_FDCAN_IRQHandler+0x274>)
 8005286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005288:	0f9b      	lsrs	r3, r3, #30
 800528a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800528c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f9c0 	bl	8005614 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005294:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00d      	beq.n	80052b6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80052a0:	4b4b      	ldr	r3, [pc, #300]	@ (80053d0 <HAL_FDCAN_IRQHandler+0x278>)
 80052a2:	400b      	ands	r3, r1
 80052a4:	6513      	str	r3, [r2, #80]	@ 0x50
 80052a6:	4a49      	ldr	r2, [pc, #292]	@ (80053cc <HAL_FDCAN_IRQHandler+0x274>)
 80052a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052aa:	0f9b      	lsrs	r3, r3, #30
 80052ac:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80052ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f9ba 	bl	800562a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80052b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00d      	beq.n	80052d8 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80052c2:	4b43      	ldr	r3, [pc, #268]	@ (80053d0 <HAL_FDCAN_IRQHandler+0x278>)
 80052c4:	400b      	ands	r3, r1
 80052c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80052c8:	4a40      	ldr	r2, [pc, #256]	@ (80053cc <HAL_FDCAN_IRQHandler+0x274>)
 80052ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052cc:	0f9b      	lsrs	r3, r3, #30
 80052ce:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80052d0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fc fa9c 	bl	8001810 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80052d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00d      	beq.n	80052fa <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80052e4:	4b3a      	ldr	r3, [pc, #232]	@ (80053d0 <HAL_FDCAN_IRQHandler+0x278>)
 80052e6:	400b      	ands	r3, r1
 80052e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80052ea:	4a38      	ldr	r2, [pc, #224]	@ (80053cc <HAL_FDCAN_IRQHandler+0x274>)
 80052ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052ee:	0f9b      	lsrs	r3, r3, #30
 80052f0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80052f2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f9a3 	bl	8005640 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80052fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052fc:	0adb      	lsrs	r3, r3, #11
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d010      	beq.n	8005328 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005308:	0adb      	lsrs	r3, r3, #11
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00a      	beq.n	8005328 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800531a:	651a      	str	r2, [r3, #80]	@ 0x50
 800531c:	4b2b      	ldr	r3, [pc, #172]	@ (80053cc <HAL_FDCAN_IRQHandler+0x274>)
 800531e:	2200      	movs	r2, #0
 8005320:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f997 	bl	8005656 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8005328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800532a:	0a5b      	lsrs	r3, r3, #9
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01d      	beq.n	8005370 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005336:	0a5b      	lsrs	r3, r3, #9
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b00      	cmp	r3, #0
 800533e:	d017      	beq.n	8005370 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005348:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005354:	4013      	ands	r3, r2
 8005356:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005360:	651a      	str	r2, [r3, #80]	@ 0x50
 8005362:	4b1a      	ldr	r3, [pc, #104]	@ (80053cc <HAL_FDCAN_IRQHandler+0x274>)
 8005364:	2200      	movs	r2, #0
 8005366:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005368:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f97d 	bl	800566a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005372:	0cdb      	lsrs	r3, r3, #19
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d010      	beq.n	800539e <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800537c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800537e:	0cdb      	lsrs	r3, r3, #19
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00a      	beq.n	800539e <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005390:	651a      	str	r2, [r3, #80]	@ 0x50
 8005392:	4b0e      	ldr	r3, [pc, #56]	@ (80053cc <HAL_FDCAN_IRQHandler+0x274>)
 8005394:	2200      	movs	r2, #0
 8005396:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f97c 	bl	8005696 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800539e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053a0:	0c1b      	lsrs	r3, r3, #16
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d016      	beq.n	80053d8 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80053aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ac:	0c1b      	lsrs	r3, r3, #16
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d010      	beq.n	80053d8 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80053be:	651a      	str	r2, [r3, #80]	@ 0x50
 80053c0:	4b02      	ldr	r3, [pc, #8]	@ (80053cc <HAL_FDCAN_IRQHandler+0x274>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	e004      	b.n	80053d4 <HAL_FDCAN_IRQHandler+0x27c>
 80053ca:	bf00      	nop
 80053cc:	4000a800 	.word	0x4000a800
 80053d0:	3fcfffff 	.word	0x3fcfffff
 80053d4:	f000 f969 	bl	80056aa <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80053d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053da:	0c9b      	lsrs	r3, r3, #18
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d010      	beq.n	8005406 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80053e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e6:	0c9b      	lsrs	r3, r3, #18
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00a      	beq.n	8005406 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80053f8:	651a      	str	r2, [r3, #80]	@ 0x50
 80053fa:	4b83      	ldr	r3, [pc, #524]	@ (8005608 <HAL_FDCAN_IRQHandler+0x4b0>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f95c 	bl	80056be <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005408:	0c5b      	lsrs	r3, r3, #17
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d015      	beq.n	800543e <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005414:	0c5b      	lsrs	r3, r3, #17
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00f      	beq.n	800543e <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005426:	651a      	str	r2, [r3, #80]	@ 0x50
 8005428:	4b77      	ldr	r3, [pc, #476]	@ (8005608 <HAL_FDCAN_IRQHandler+0x4b0>)
 800542a:	2200      	movs	r2, #0
 800542c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005434:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800543e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00d      	beq.n	8005460 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800544a:	4b70      	ldr	r3, [pc, #448]	@ (800560c <HAL_FDCAN_IRQHandler+0x4b4>)
 800544c:	400b      	ands	r3, r1
 800544e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005450:	4a6d      	ldr	r2, [pc, #436]	@ (8005608 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005452:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005454:	0f9b      	lsrs	r3, r3, #30
 8005456:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005458:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f94d 	bl	80056fa <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005460:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005462:	2b00      	cmp	r3, #0
 8005464:	d011      	beq.n	800548a <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800546c:	4b67      	ldr	r3, [pc, #412]	@ (800560c <HAL_FDCAN_IRQHandler+0x4b4>)
 800546e:	400b      	ands	r3, r1
 8005470:	6513      	str	r3, [r2, #80]	@ 0x50
 8005472:	4a65      	ldr	r2, [pc, #404]	@ (8005608 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005476:	0f9b      	lsrs	r3, r3, #30
 8005478:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005482:	431a      	orrs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a60      	ldr	r2, [pc, #384]	@ (8005610 <HAL_FDCAN_IRQHandler+0x4b8>)
 8005490:	4293      	cmp	r3, r2
 8005492:	f040 80ac 	bne.w	80055ee <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f003 0303 	and.w	r3, r3, #3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 80a4 	beq.w	80055ee <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	f003 030f 	and.w	r3, r3, #15
 80054b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054ba:	4013      	ands	r3, r2
 80054bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80054c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054d2:	4013      	ands	r3, r2
 80054d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80054e0:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054ea:	4013      	ands	r3, r2
 80054ec:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 80054f8:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005500:	6a3a      	ldr	r2, [r7, #32]
 8005502:	4013      	ands	r3, r2
 8005504:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8005510:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005518:	69fa      	ldr	r2, [r7, #28]
 800551a:	4013      	ands	r3, r2
 800551c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005524:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800552e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005530:	2b00      	cmp	r3, #0
 8005532:	d007      	beq.n	8005544 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800553a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800553c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f8e6 	bl	8005710 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005546:	2b00      	cmp	r3, #0
 8005548:	d007      	beq.n	800555a <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005550:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005552:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f8e6 	bl	8005726 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	099b      	lsrs	r3, r3, #6
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d01a      	beq.n	800559c <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	099b      	lsrs	r3, r3, #6
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d014      	beq.n	800559c <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005578:	0c1b      	lsrs	r3, r3, #16
 800557a:	b29b      	uxth	r3, r3
 800557c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005584:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005588:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2240      	movs	r2, #64	@ 0x40
 8005590:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	6939      	ldr	r1, [r7, #16]
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f8d0 	bl	800573c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800559c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d007      	beq.n	80055b2 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055a8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80055aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f8d1 	bl	8005754 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00b      	beq.n	80055d0 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	6a3a      	ldr	r2, [r7, #32]
 80055be:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	431a      	orrs	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00b      	beq.n	80055ee <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	69fa      	ldr	r2, [r7, #28]
 80055dc:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d002      	beq.n	80055fe <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f874 	bl	80056e6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80055fe:	bf00      	nop
 8005600:	3758      	adds	r7, #88	@ 0x58
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	4000a800 	.word	0x4000a800
 800560c:	3fcfffff 	.word	0x3fcfffff
 8005610:	4000a000 	.word	0x4000a000

08005614 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800564a:	bf00      	nop
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800565e:	bf00      	nop
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800568a:	bf00      	nop
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800569e:	bf00      	nop
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr

080056d2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b083      	sub	sp, #12
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b083      	sub	sp, #12
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80056ee:	bf00      	nop
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b083      	sub	sp, #12
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800571a:	bf00      	nop
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
	...

0800576c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005778:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005782:	4ba7      	ldr	r3, [pc, #668]	@ (8005a20 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005784:	4013      	ands	r3, r2
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	0091      	lsls	r1, r2, #2
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	6812      	ldr	r2, [r2, #0]
 800578e:	430b      	orrs	r3, r1
 8005790:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800579c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a4:	041a      	lsls	r2, r3, #16
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	4413      	add	r3, r2
 80057b8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80057c2:	4b97      	ldr	r3, [pc, #604]	@ (8005a20 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80057c4:	4013      	ands	r3, r2
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	0091      	lsls	r1, r2, #2
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	6812      	ldr	r2, [r2, #0]
 80057ce:	430b      	orrs	r3, r1
 80057d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057dc:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057e4:	041a      	lsls	r2, r3, #16
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	4413      	add	r3, r2
 80057fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005804:	4b86      	ldr	r3, [pc, #536]	@ (8005a20 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005806:	4013      	ands	r3, r2
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	0091      	lsls	r1, r2, #2
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	6812      	ldr	r2, [r2, #0]
 8005810:	430b      	orrs	r3, r1
 8005812:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800581e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005826:	041a      	lsls	r2, r3, #16
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800583a:	fb02 f303 	mul.w	r3, r2, r3
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	4413      	add	r3, r2
 8005842:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800584c:	4b74      	ldr	r3, [pc, #464]	@ (8005a20 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800584e:	4013      	ands	r3, r2
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	0091      	lsls	r1, r2, #2
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	6812      	ldr	r2, [r2, #0]
 8005858:	430b      	orrs	r3, r1
 800585a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005866:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800586e:	041a      	lsls	r2, r3, #16
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	430a      	orrs	r2, r1
 8005876:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005882:	fb02 f303 	mul.w	r3, r2, r3
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	4413      	add	r3, r2
 800588a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005894:	4b62      	ldr	r3, [pc, #392]	@ (8005a20 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005896:	4013      	ands	r3, r2
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	0091      	lsls	r1, r2, #2
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6812      	ldr	r2, [r2, #0]
 80058a0:	430b      	orrs	r3, r1
 80058a2:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80058ae:	fb02 f303 	mul.w	r3, r2, r3
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	4413      	add	r3, r2
 80058b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80058c0:	4b57      	ldr	r3, [pc, #348]	@ (8005a20 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80058c2:	4013      	ands	r3, r2
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	0091      	lsls	r1, r2, #2
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6812      	ldr	r2, [r2, #0]
 80058cc:	430b      	orrs	r3, r1
 80058ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058da:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058e2:	041a      	lsls	r2, r3, #16
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	4413      	add	r3, r2
 80058f8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005902:	4b47      	ldr	r3, [pc, #284]	@ (8005a20 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005904:	4013      	ands	r3, r2
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	0091      	lsls	r1, r2, #2
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	6812      	ldr	r2, [r2, #0]
 800590e:	430b      	orrs	r3, r1
 8005910:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800591c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005924:	041a      	lsls	r2, r3, #16
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005938:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005940:	061a      	lsls	r2, r3, #24
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005950:	4b34      	ldr	r3, [pc, #208]	@ (8005a24 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005952:	4413      	add	r3, r2
 8005954:	009a      	lsls	r2, r3, #2
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	441a      	add	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	441a      	add	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005982:	6879      	ldr	r1, [r7, #4]
 8005984:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8005986:	fb01 f303 	mul.w	r3, r1, r3
 800598a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800598c:	441a      	add	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800599a:	6879      	ldr	r1, [r7, #4]
 800599c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800599e:	fb01 f303 	mul.w	r3, r1, r3
 80059a2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80059a4:	441a      	add	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80059b6:	fb01 f303 	mul.w	r3, r1, r3
 80059ba:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80059bc:	441a      	add	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	441a      	add	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059e2:	6879      	ldr	r1, [r7, #4]
 80059e4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80059e6:	fb01 f303 	mul.w	r3, r1, r3
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	441a      	add	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005a02:	fb01 f303 	mul.w	r3, r1, r3
 8005a06:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005a08:	441a      	add	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a16:	4a04      	ldr	r2, [pc, #16]	@ (8005a28 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d915      	bls.n	8005a48 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005a1c:	e006      	b.n	8005a2c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005a1e:	bf00      	nop
 8005a20:	ffff0003 	.word	0xffff0003
 8005a24:	10002b00 	.word	0x10002b00
 8005a28:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a32:	f043 0220 	orr.w	r2, r3, #32
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2203      	movs	r2, #3
 8005a40:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e010      	b.n	8005a6a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	e005      	b.n	8005a5c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	3304      	adds	r3, #4
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d3f3      	bcc.n	8005a50 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop

08005a78 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b089      	sub	sp, #36	@ 0x24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
 8005a84:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10a      	bne.n	8005aa4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005a96:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	61fb      	str	r3, [r7, #28]
 8005aa2:	e00a      	b.n	8005aba <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005aac:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005ab2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005ab4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ab8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005ac4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005aca:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005ad0:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ae6:	6839      	ldr	r1, [r7, #0]
 8005ae8:	fb01 f303 	mul.w	r3, r1, r3
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	4413      	add	r3, r2
 8005af0:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	69fa      	ldr	r2, [r7, #28]
 8005af6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	3304      	adds	r3, #4
 8005afc:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	3304      	adds	r3, #4
 8005b08:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	617b      	str	r3, [r7, #20]
 8005b0e:	e020      	b.n	8005b52 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	3303      	adds	r3, #3
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	4413      	add	r3, r2
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	3302      	adds	r3, #2
 8005b20:	6879      	ldr	r1, [r7, #4]
 8005b22:	440b      	add	r3, r1
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005b28:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	6879      	ldr	r1, [r7, #4]
 8005b30:	440b      	add	r3, r1
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005b36:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005b38:	6879      	ldr	r1, [r7, #4]
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	440a      	add	r2, r1
 8005b3e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005b40:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	3304      	adds	r3, #4
 8005b4a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	3304      	adds	r3, #4
 8005b50:	617b      	str	r3, [r7, #20]
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	4a06      	ldr	r2, [pc, #24]	@ (8005b70 <FDCAN_CopyMessageToRAM+0xf8>)
 8005b58:	5cd3      	ldrb	r3, [r2, r3]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d3d6      	bcc.n	8005b10 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8005b62:	bf00      	nop
 8005b64:	bf00      	nop
 8005b66:	3724      	adds	r7, #36	@ 0x24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	0800b644 	.word	0x0800b644

08005b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b089      	sub	sp, #36	@ 0x24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005b82:	4b86      	ldr	r3, [pc, #536]	@ (8005d9c <HAL_GPIO_Init+0x228>)
 8005b84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b86:	e18c      	b.n	8005ea2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	fa01 f303 	lsl.w	r3, r1, r3
 8005b94:	4013      	ands	r3, r2
 8005b96:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 817e 	beq.w	8005e9c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f003 0303 	and.w	r3, r3, #3
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d005      	beq.n	8005bb8 <HAL_GPIO_Init+0x44>
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f003 0303 	and.w	r3, r3, #3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d130      	bne.n	8005c1a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	2203      	movs	r2, #3
 8005bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc8:	43db      	mvns	r3, r3
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	4013      	ands	r3, r2
 8005bce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	005b      	lsls	r3, r3, #1
 8005bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bee:	2201      	movs	r2, #1
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf6:	43db      	mvns	r3, r3
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	091b      	lsrs	r3, r3, #4
 8005c04:	f003 0201 	and.w	r2, r3, #1
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f003 0303 	and.w	r3, r3, #3
 8005c22:	2b03      	cmp	r3, #3
 8005c24:	d017      	beq.n	8005c56 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	2203      	movs	r2, #3
 8005c32:	fa02 f303 	lsl.w	r3, r2, r3
 8005c36:	43db      	mvns	r3, r3
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	689a      	ldr	r2, [r3, #8]
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	005b      	lsls	r3, r3, #1
 8005c46:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d123      	bne.n	8005caa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	08da      	lsrs	r2, r3, #3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	3208      	adds	r2, #8
 8005c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	f003 0307 	and.w	r3, r3, #7
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	220f      	movs	r2, #15
 8005c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7e:	43db      	mvns	r3, r3
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	4013      	ands	r3, r2
 8005c84:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	691a      	ldr	r2, [r3, #16]
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	fa02 f303 	lsl.w	r3, r2, r3
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	08da      	lsrs	r2, r3, #3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3208      	adds	r2, #8
 8005ca4:	69b9      	ldr	r1, [r7, #24]
 8005ca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	005b      	lsls	r3, r3, #1
 8005cb4:	2203      	movs	r2, #3
 8005cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cba:	43db      	mvns	r3, r3
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f003 0203 	and.w	r2, r3, #3
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 80d8 	beq.w	8005e9c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cec:	4b2c      	ldr	r3, [pc, #176]	@ (8005da0 <HAL_GPIO_Init+0x22c>)
 8005cee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005cf2:	4a2b      	ldr	r2, [pc, #172]	@ (8005da0 <HAL_GPIO_Init+0x22c>)
 8005cf4:	f043 0302 	orr.w	r3, r3, #2
 8005cf8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005cfc:	4b28      	ldr	r3, [pc, #160]	@ (8005da0 <HAL_GPIO_Init+0x22c>)
 8005cfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d0a:	4a26      	ldr	r2, [pc, #152]	@ (8005da4 <HAL_GPIO_Init+0x230>)
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	089b      	lsrs	r3, r3, #2
 8005d10:	3302      	adds	r3, #2
 8005d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	f003 0303 	and.w	r3, r3, #3
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	220f      	movs	r2, #15
 8005d22:	fa02 f303 	lsl.w	r3, r2, r3
 8005d26:	43db      	mvns	r3, r3
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a1d      	ldr	r2, [pc, #116]	@ (8005da8 <HAL_GPIO_Init+0x234>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d04a      	beq.n	8005dcc <HAL_GPIO_Init+0x258>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a1c      	ldr	r2, [pc, #112]	@ (8005dac <HAL_GPIO_Init+0x238>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d02b      	beq.n	8005d96 <HAL_GPIO_Init+0x222>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a1b      	ldr	r2, [pc, #108]	@ (8005db0 <HAL_GPIO_Init+0x23c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d025      	beq.n	8005d92 <HAL_GPIO_Init+0x21e>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a1a      	ldr	r2, [pc, #104]	@ (8005db4 <HAL_GPIO_Init+0x240>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d01f      	beq.n	8005d8e <HAL_GPIO_Init+0x21a>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a19      	ldr	r2, [pc, #100]	@ (8005db8 <HAL_GPIO_Init+0x244>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d019      	beq.n	8005d8a <HAL_GPIO_Init+0x216>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a18      	ldr	r2, [pc, #96]	@ (8005dbc <HAL_GPIO_Init+0x248>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d013      	beq.n	8005d86 <HAL_GPIO_Init+0x212>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a17      	ldr	r2, [pc, #92]	@ (8005dc0 <HAL_GPIO_Init+0x24c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00d      	beq.n	8005d82 <HAL_GPIO_Init+0x20e>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a16      	ldr	r2, [pc, #88]	@ (8005dc4 <HAL_GPIO_Init+0x250>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d007      	beq.n	8005d7e <HAL_GPIO_Init+0x20a>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a15      	ldr	r2, [pc, #84]	@ (8005dc8 <HAL_GPIO_Init+0x254>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d101      	bne.n	8005d7a <HAL_GPIO_Init+0x206>
 8005d76:	2309      	movs	r3, #9
 8005d78:	e029      	b.n	8005dce <HAL_GPIO_Init+0x25a>
 8005d7a:	230a      	movs	r3, #10
 8005d7c:	e027      	b.n	8005dce <HAL_GPIO_Init+0x25a>
 8005d7e:	2307      	movs	r3, #7
 8005d80:	e025      	b.n	8005dce <HAL_GPIO_Init+0x25a>
 8005d82:	2306      	movs	r3, #6
 8005d84:	e023      	b.n	8005dce <HAL_GPIO_Init+0x25a>
 8005d86:	2305      	movs	r3, #5
 8005d88:	e021      	b.n	8005dce <HAL_GPIO_Init+0x25a>
 8005d8a:	2304      	movs	r3, #4
 8005d8c:	e01f      	b.n	8005dce <HAL_GPIO_Init+0x25a>
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e01d      	b.n	8005dce <HAL_GPIO_Init+0x25a>
 8005d92:	2302      	movs	r3, #2
 8005d94:	e01b      	b.n	8005dce <HAL_GPIO_Init+0x25a>
 8005d96:	2301      	movs	r3, #1
 8005d98:	e019      	b.n	8005dce <HAL_GPIO_Init+0x25a>
 8005d9a:	bf00      	nop
 8005d9c:	58000080 	.word	0x58000080
 8005da0:	58024400 	.word	0x58024400
 8005da4:	58000400 	.word	0x58000400
 8005da8:	58020000 	.word	0x58020000
 8005dac:	58020400 	.word	0x58020400
 8005db0:	58020800 	.word	0x58020800
 8005db4:	58020c00 	.word	0x58020c00
 8005db8:	58021000 	.word	0x58021000
 8005dbc:	58021400 	.word	0x58021400
 8005dc0:	58021800 	.word	0x58021800
 8005dc4:	58021c00 	.word	0x58021c00
 8005dc8:	58022400 	.word	0x58022400
 8005dcc:	2300      	movs	r3, #0
 8005dce:	69fa      	ldr	r2, [r7, #28]
 8005dd0:	f002 0203 	and.w	r2, r2, #3
 8005dd4:	0092      	lsls	r2, r2, #2
 8005dd6:	4093      	lsls	r3, r2
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005dde:	4938      	ldr	r1, [pc, #224]	@ (8005ec0 <HAL_GPIO_Init+0x34c>)
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	089b      	lsrs	r3, r3, #2
 8005de4:	3302      	adds	r3, #2
 8005de6:	69ba      	ldr	r2, [r7, #24]
 8005de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	43db      	mvns	r3, r3
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005e12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	43db      	mvns	r3, r3
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	4013      	ands	r3, r2
 8005e2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005e40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	43db      	mvns	r3, r3
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	4013      	ands	r3, r2
 8005e56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	43db      	mvns	r3, r3
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	4013      	ands	r3, r2
 8005e80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005e8e:	69ba      	ldr	r2, [r7, #24]
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f47f ae6b 	bne.w	8005b88 <HAL_GPIO_Init+0x14>
  }
}
 8005eb2:	bf00      	nop
 8005eb4:	bf00      	nop
 8005eb6:	3724      	adds	r7, #36	@ 0x24
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	58000400 	.word	0x58000400

08005ec4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	460b      	mov	r3, r1
 8005ece:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	691a      	ldr	r2, [r3, #16]
 8005ed4:	887b      	ldrh	r3, [r7, #2]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005edc:	2301      	movs	r3, #1
 8005ede:	73fb      	strb	r3, [r7, #15]
 8005ee0:	e001      	b.n	8005ee6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	460b      	mov	r3, r1
 8005efe:	807b      	strh	r3, [r7, #2]
 8005f00:	4613      	mov	r3, r2
 8005f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f04:	787b      	ldrb	r3, [r7, #1]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f0a:	887a      	ldrh	r2, [r7, #2]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005f10:	e003      	b.n	8005f1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005f12:	887b      	ldrh	r3, [r7, #2]
 8005f14:	041a      	lsls	r2, r3, #16
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	619a      	str	r2, [r3, #24]
}
 8005f1a:	bf00      	nop
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
	...

08005f28 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005f30:	4b19      	ldr	r3, [pc, #100]	@ (8005f98 <HAL_PWREx_ConfigSupply+0x70>)
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b04      	cmp	r3, #4
 8005f3a:	d00a      	beq.n	8005f52 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005f3c:	4b16      	ldr	r3, [pc, #88]	@ (8005f98 <HAL_PWREx_ConfigSupply+0x70>)
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f003 0307 	and.w	r3, r3, #7
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d001      	beq.n	8005f4e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e01f      	b.n	8005f8e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	e01d      	b.n	8005f8e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005f52:	4b11      	ldr	r3, [pc, #68]	@ (8005f98 <HAL_PWREx_ConfigSupply+0x70>)
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	f023 0207 	bic.w	r2, r3, #7
 8005f5a:	490f      	ldr	r1, [pc, #60]	@ (8005f98 <HAL_PWREx_ConfigSupply+0x70>)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005f62:	f7fc fb7f 	bl	8002664 <HAL_GetTick>
 8005f66:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f68:	e009      	b.n	8005f7e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005f6a:	f7fc fb7b 	bl	8002664 <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f78:	d901      	bls.n	8005f7e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e007      	b.n	8005f8e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f7e:	4b06      	ldr	r3, [pc, #24]	@ (8005f98 <HAL_PWREx_ConfigSupply+0x70>)
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f8a:	d1ee      	bne.n	8005f6a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	58024800 	.word	0x58024800

08005f9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b08c      	sub	sp, #48	@ 0x30
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e3c8      	b.n	8006740 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f000 8087 	beq.w	80060ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fbc:	4b88      	ldr	r3, [pc, #544]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005fc6:	4b86      	ldr	r3, [pc, #536]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fca:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fce:	2b10      	cmp	r3, #16
 8005fd0:	d007      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x46>
 8005fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd4:	2b18      	cmp	r3, #24
 8005fd6:	d110      	bne.n	8005ffa <HAL_RCC_OscConfig+0x5e>
 8005fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fda:	f003 0303 	and.w	r3, r3, #3
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d10b      	bne.n	8005ffa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fe2:	4b7f      	ldr	r3, [pc, #508]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d06c      	beq.n	80060c8 <HAL_RCC_OscConfig+0x12c>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d168      	bne.n	80060c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e3a2      	b.n	8006740 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006002:	d106      	bne.n	8006012 <HAL_RCC_OscConfig+0x76>
 8006004:	4b76      	ldr	r3, [pc, #472]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a75      	ldr	r2, [pc, #468]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 800600a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800600e:	6013      	str	r3, [r2, #0]
 8006010:	e02e      	b.n	8006070 <HAL_RCC_OscConfig+0xd4>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10c      	bne.n	8006034 <HAL_RCC_OscConfig+0x98>
 800601a:	4b71      	ldr	r3, [pc, #452]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a70      	ldr	r2, [pc, #448]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 8006020:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006024:	6013      	str	r3, [r2, #0]
 8006026:	4b6e      	ldr	r3, [pc, #440]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a6d      	ldr	r2, [pc, #436]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 800602c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006030:	6013      	str	r3, [r2, #0]
 8006032:	e01d      	b.n	8006070 <HAL_RCC_OscConfig+0xd4>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800603c:	d10c      	bne.n	8006058 <HAL_RCC_OscConfig+0xbc>
 800603e:	4b68      	ldr	r3, [pc, #416]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a67      	ldr	r2, [pc, #412]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 8006044:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006048:	6013      	str	r3, [r2, #0]
 800604a:	4b65      	ldr	r3, [pc, #404]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a64      	ldr	r2, [pc, #400]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 8006050:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006054:	6013      	str	r3, [r2, #0]
 8006056:	e00b      	b.n	8006070 <HAL_RCC_OscConfig+0xd4>
 8006058:	4b61      	ldr	r3, [pc, #388]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a60      	ldr	r2, [pc, #384]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 800605e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006062:	6013      	str	r3, [r2, #0]
 8006064:	4b5e      	ldr	r3, [pc, #376]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a5d      	ldr	r2, [pc, #372]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 800606a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800606e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d013      	beq.n	80060a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006078:	f7fc faf4 	bl	8002664 <HAL_GetTick>
 800607c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800607e:	e008      	b.n	8006092 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006080:	f7fc faf0 	bl	8002664 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b64      	cmp	r3, #100	@ 0x64
 800608c:	d901      	bls.n	8006092 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e356      	b.n	8006740 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006092:	4b53      	ldr	r3, [pc, #332]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0f0      	beq.n	8006080 <HAL_RCC_OscConfig+0xe4>
 800609e:	e014      	b.n	80060ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a0:	f7fc fae0 	bl	8002664 <HAL_GetTick>
 80060a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80060a6:	e008      	b.n	80060ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060a8:	f7fc fadc 	bl	8002664 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b64      	cmp	r3, #100	@ 0x64
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e342      	b.n	8006740 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80060ba:	4b49      	ldr	r3, [pc, #292]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1f0      	bne.n	80060a8 <HAL_RCC_OscConfig+0x10c>
 80060c6:	e000      	b.n	80060ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 808c 	beq.w	80061f0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060d8:	4b41      	ldr	r3, [pc, #260]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060e0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060e2:	4b3f      	ldr	r3, [pc, #252]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 80060e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d007      	beq.n	80060fe <HAL_RCC_OscConfig+0x162>
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	2b18      	cmp	r3, #24
 80060f2:	d137      	bne.n	8006164 <HAL_RCC_OscConfig+0x1c8>
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	f003 0303 	and.w	r3, r3, #3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d132      	bne.n	8006164 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060fe:	4b38      	ldr	r3, [pc, #224]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0304 	and.w	r3, r3, #4
 8006106:	2b00      	cmp	r3, #0
 8006108:	d005      	beq.n	8006116 <HAL_RCC_OscConfig+0x17a>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e314      	b.n	8006740 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006116:	4b32      	ldr	r3, [pc, #200]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f023 0219 	bic.w	r2, r3, #25
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	492f      	ldr	r1, [pc, #188]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 8006124:	4313      	orrs	r3, r2
 8006126:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006128:	f7fc fa9c 	bl	8002664 <HAL_GetTick>
 800612c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800612e:	e008      	b.n	8006142 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006130:	f7fc fa98 	bl	8002664 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	2b02      	cmp	r3, #2
 800613c:	d901      	bls.n	8006142 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e2fe      	b.n	8006740 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006142:	4b27      	ldr	r3, [pc, #156]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0304 	and.w	r3, r3, #4
 800614a:	2b00      	cmp	r3, #0
 800614c:	d0f0      	beq.n	8006130 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800614e:	4b24      	ldr	r3, [pc, #144]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	061b      	lsls	r3, r3, #24
 800615c:	4920      	ldr	r1, [pc, #128]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 800615e:	4313      	orrs	r3, r2
 8006160:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006162:	e045      	b.n	80061f0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d026      	beq.n	80061ba <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800616c:	4b1c      	ldr	r3, [pc, #112]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f023 0219 	bic.w	r2, r3, #25
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	4919      	ldr	r1, [pc, #100]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 800617a:	4313      	orrs	r3, r2
 800617c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800617e:	f7fc fa71 	bl	8002664 <HAL_GetTick>
 8006182:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006184:	e008      	b.n	8006198 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006186:	f7fc fa6d 	bl	8002664 <HAL_GetTick>
 800618a:	4602      	mov	r2, r0
 800618c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	2b02      	cmp	r3, #2
 8006192:	d901      	bls.n	8006198 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e2d3      	b.n	8006740 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006198:	4b11      	ldr	r3, [pc, #68]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0304 	and.w	r3, r3, #4
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d0f0      	beq.n	8006186 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061a4:	4b0e      	ldr	r3, [pc, #56]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	061b      	lsls	r3, r3, #24
 80061b2:	490b      	ldr	r1, [pc, #44]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 80061b4:	4313      	orrs	r3, r2
 80061b6:	604b      	str	r3, [r1, #4]
 80061b8:	e01a      	b.n	80061f0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061ba:	4b09      	ldr	r3, [pc, #36]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a08      	ldr	r2, [pc, #32]	@ (80061e0 <HAL_RCC_OscConfig+0x244>)
 80061c0:	f023 0301 	bic.w	r3, r3, #1
 80061c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c6:	f7fc fa4d 	bl	8002664 <HAL_GetTick>
 80061ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80061cc:	e00a      	b.n	80061e4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061ce:	f7fc fa49 	bl	8002664 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d903      	bls.n	80061e4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e2af      	b.n	8006740 <HAL_RCC_OscConfig+0x7a4>
 80061e0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80061e4:	4b96      	ldr	r3, [pc, #600]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0304 	and.w	r3, r3, #4
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1ee      	bne.n	80061ce <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0310 	and.w	r3, r3, #16
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d06a      	beq.n	80062d2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061fc:	4b90      	ldr	r3, [pc, #576]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006204:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006206:	4b8e      	ldr	r3, [pc, #568]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 8006208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800620a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	2b08      	cmp	r3, #8
 8006210:	d007      	beq.n	8006222 <HAL_RCC_OscConfig+0x286>
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	2b18      	cmp	r3, #24
 8006216:	d11b      	bne.n	8006250 <HAL_RCC_OscConfig+0x2b4>
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f003 0303 	and.w	r3, r3, #3
 800621e:	2b01      	cmp	r3, #1
 8006220:	d116      	bne.n	8006250 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006222:	4b87      	ldr	r3, [pc, #540]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800622a:	2b00      	cmp	r3, #0
 800622c:	d005      	beq.n	800623a <HAL_RCC_OscConfig+0x29e>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	2b80      	cmp	r3, #128	@ 0x80
 8006234:	d001      	beq.n	800623a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e282      	b.n	8006740 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800623a:	4b81      	ldr	r3, [pc, #516]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	061b      	lsls	r3, r3, #24
 8006248:	497d      	ldr	r1, [pc, #500]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 800624a:	4313      	orrs	r3, r2
 800624c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800624e:	e040      	b.n	80062d2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	69db      	ldr	r3, [r3, #28]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d023      	beq.n	80062a0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006258:	4b79      	ldr	r3, [pc, #484]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a78      	ldr	r2, [pc, #480]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 800625e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006264:	f7fc f9fe 	bl	8002664 <HAL_GetTick>
 8006268:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800626a:	e008      	b.n	800627e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800626c:	f7fc f9fa 	bl	8002664 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b02      	cmp	r3, #2
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e260      	b.n	8006740 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800627e:	4b70      	ldr	r3, [pc, #448]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0f0      	beq.n	800626c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800628a:	4b6d      	ldr	r3, [pc, #436]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	061b      	lsls	r3, r3, #24
 8006298:	4969      	ldr	r1, [pc, #420]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 800629a:	4313      	orrs	r3, r2
 800629c:	60cb      	str	r3, [r1, #12]
 800629e:	e018      	b.n	80062d2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80062a0:	4b67      	ldr	r3, [pc, #412]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a66      	ldr	r2, [pc, #408]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 80062a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ac:	f7fc f9da 	bl	8002664 <HAL_GetTick>
 80062b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80062b2:	e008      	b.n	80062c6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80062b4:	f7fc f9d6 	bl	8002664 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e23c      	b.n	8006740 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80062c6:	4b5e      	ldr	r3, [pc, #376]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1f0      	bne.n	80062b4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0308 	and.w	r3, r3, #8
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d036      	beq.n	800634c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d019      	beq.n	800631a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062e6:	4b56      	ldr	r3, [pc, #344]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 80062e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062ea:	4a55      	ldr	r2, [pc, #340]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 80062ec:	f043 0301 	orr.w	r3, r3, #1
 80062f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062f2:	f7fc f9b7 	bl	8002664 <HAL_GetTick>
 80062f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80062f8:	e008      	b.n	800630c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062fa:	f7fc f9b3 	bl	8002664 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	2b02      	cmp	r3, #2
 8006306:	d901      	bls.n	800630c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e219      	b.n	8006740 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800630c:	4b4c      	ldr	r3, [pc, #304]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 800630e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0f0      	beq.n	80062fa <HAL_RCC_OscConfig+0x35e>
 8006318:	e018      	b.n	800634c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800631a:	4b49      	ldr	r3, [pc, #292]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 800631c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800631e:	4a48      	ldr	r2, [pc, #288]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 8006320:	f023 0301 	bic.w	r3, r3, #1
 8006324:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006326:	f7fc f99d 	bl	8002664 <HAL_GetTick>
 800632a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800632c:	e008      	b.n	8006340 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800632e:	f7fc f999 	bl	8002664 <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	2b02      	cmp	r3, #2
 800633a:	d901      	bls.n	8006340 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e1ff      	b.n	8006740 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006340:	4b3f      	ldr	r3, [pc, #252]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 8006342:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006344:	f003 0302 	and.w	r3, r3, #2
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1f0      	bne.n	800632e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0320 	and.w	r3, r3, #32
 8006354:	2b00      	cmp	r3, #0
 8006356:	d036      	beq.n	80063c6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d019      	beq.n	8006394 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006360:	4b37      	ldr	r3, [pc, #220]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a36      	ldr	r2, [pc, #216]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 8006366:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800636a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800636c:	f7fc f97a 	bl	8002664 <HAL_GetTick>
 8006370:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006372:	e008      	b.n	8006386 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006374:	f7fc f976 	bl	8002664 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b02      	cmp	r3, #2
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e1dc      	b.n	8006740 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006386:	4b2e      	ldr	r3, [pc, #184]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d0f0      	beq.n	8006374 <HAL_RCC_OscConfig+0x3d8>
 8006392:	e018      	b.n	80063c6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006394:	4b2a      	ldr	r3, [pc, #168]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a29      	ldr	r2, [pc, #164]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 800639a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800639e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80063a0:	f7fc f960 	bl	8002664 <HAL_GetTick>
 80063a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063a6:	e008      	b.n	80063ba <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063a8:	f7fc f95c 	bl	8002664 <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d901      	bls.n	80063ba <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e1c2      	b.n	8006740 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063ba:	4b21      	ldr	r3, [pc, #132]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1f0      	bne.n	80063a8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0304 	and.w	r3, r3, #4
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f000 8086 	beq.w	80064e0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80063d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006444 <HAL_RCC_OscConfig+0x4a8>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a1a      	ldr	r2, [pc, #104]	@ (8006444 <HAL_RCC_OscConfig+0x4a8>)
 80063da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063e0:	f7fc f940 	bl	8002664 <HAL_GetTick>
 80063e4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063e6:	e008      	b.n	80063fa <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063e8:	f7fc f93c 	bl	8002664 <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	2b64      	cmp	r3, #100	@ 0x64
 80063f4:	d901      	bls.n	80063fa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e1a2      	b.n	8006740 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063fa:	4b12      	ldr	r3, [pc, #72]	@ (8006444 <HAL_RCC_OscConfig+0x4a8>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006402:	2b00      	cmp	r3, #0
 8006404:	d0f0      	beq.n	80063e8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d106      	bne.n	800641c <HAL_RCC_OscConfig+0x480>
 800640e:	4b0c      	ldr	r3, [pc, #48]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 8006410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006412:	4a0b      	ldr	r2, [pc, #44]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 8006414:	f043 0301 	orr.w	r3, r3, #1
 8006418:	6713      	str	r3, [r2, #112]	@ 0x70
 800641a:	e032      	b.n	8006482 <HAL_RCC_OscConfig+0x4e6>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d111      	bne.n	8006448 <HAL_RCC_OscConfig+0x4ac>
 8006424:	4b06      	ldr	r3, [pc, #24]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 8006426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006428:	4a05      	ldr	r2, [pc, #20]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 800642a:	f023 0301 	bic.w	r3, r3, #1
 800642e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006430:	4b03      	ldr	r3, [pc, #12]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 8006432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006434:	4a02      	ldr	r2, [pc, #8]	@ (8006440 <HAL_RCC_OscConfig+0x4a4>)
 8006436:	f023 0304 	bic.w	r3, r3, #4
 800643a:	6713      	str	r3, [r2, #112]	@ 0x70
 800643c:	e021      	b.n	8006482 <HAL_RCC_OscConfig+0x4e6>
 800643e:	bf00      	nop
 8006440:	58024400 	.word	0x58024400
 8006444:	58024800 	.word	0x58024800
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	2b05      	cmp	r3, #5
 800644e:	d10c      	bne.n	800646a <HAL_RCC_OscConfig+0x4ce>
 8006450:	4b83      	ldr	r3, [pc, #524]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 8006452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006454:	4a82      	ldr	r2, [pc, #520]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 8006456:	f043 0304 	orr.w	r3, r3, #4
 800645a:	6713      	str	r3, [r2, #112]	@ 0x70
 800645c:	4b80      	ldr	r3, [pc, #512]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 800645e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006460:	4a7f      	ldr	r2, [pc, #508]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 8006462:	f043 0301 	orr.w	r3, r3, #1
 8006466:	6713      	str	r3, [r2, #112]	@ 0x70
 8006468:	e00b      	b.n	8006482 <HAL_RCC_OscConfig+0x4e6>
 800646a:	4b7d      	ldr	r3, [pc, #500]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 800646c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800646e:	4a7c      	ldr	r2, [pc, #496]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 8006470:	f023 0301 	bic.w	r3, r3, #1
 8006474:	6713      	str	r3, [r2, #112]	@ 0x70
 8006476:	4b7a      	ldr	r3, [pc, #488]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 8006478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800647a:	4a79      	ldr	r2, [pc, #484]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 800647c:	f023 0304 	bic.w	r3, r3, #4
 8006480:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d015      	beq.n	80064b6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800648a:	f7fc f8eb 	bl	8002664 <HAL_GetTick>
 800648e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006490:	e00a      	b.n	80064a8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006492:	f7fc f8e7 	bl	8002664 <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d901      	bls.n	80064a8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e14b      	b.n	8006740 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064a8:	4b6d      	ldr	r3, [pc, #436]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 80064aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d0ee      	beq.n	8006492 <HAL_RCC_OscConfig+0x4f6>
 80064b4:	e014      	b.n	80064e0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064b6:	f7fc f8d5 	bl	8002664 <HAL_GetTick>
 80064ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80064bc:	e00a      	b.n	80064d4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064be:	f7fc f8d1 	bl	8002664 <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d901      	bls.n	80064d4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e135      	b.n	8006740 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80064d4:	4b62      	ldr	r3, [pc, #392]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 80064d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064d8:	f003 0302 	and.w	r3, r3, #2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1ee      	bne.n	80064be <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f000 812a 	beq.w	800673e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80064ea:	4b5d      	ldr	r3, [pc, #372]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064f2:	2b18      	cmp	r3, #24
 80064f4:	f000 80ba 	beq.w	800666c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	f040 8095 	bne.w	800662c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006502:	4b57      	ldr	r3, [pc, #348]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a56      	ldr	r2, [pc, #344]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 8006508:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800650c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800650e:	f7fc f8a9 	bl	8002664 <HAL_GetTick>
 8006512:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006514:	e008      	b.n	8006528 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006516:	f7fc f8a5 	bl	8002664 <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	2b02      	cmp	r3, #2
 8006522:	d901      	bls.n	8006528 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e10b      	b.n	8006740 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006528:	4b4d      	ldr	r3, [pc, #308]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1f0      	bne.n	8006516 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006534:	4b4a      	ldr	r3, [pc, #296]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 8006536:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006538:	4b4a      	ldr	r3, [pc, #296]	@ (8006664 <HAL_RCC_OscConfig+0x6c8>)
 800653a:	4013      	ands	r3, r2
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006544:	0112      	lsls	r2, r2, #4
 8006546:	430a      	orrs	r2, r1
 8006548:	4945      	ldr	r1, [pc, #276]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 800654a:	4313      	orrs	r3, r2
 800654c:	628b      	str	r3, [r1, #40]	@ 0x28
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006552:	3b01      	subs	r3, #1
 8006554:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800655c:	3b01      	subs	r3, #1
 800655e:	025b      	lsls	r3, r3, #9
 8006560:	b29b      	uxth	r3, r3
 8006562:	431a      	orrs	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006568:	3b01      	subs	r3, #1
 800656a:	041b      	lsls	r3, r3, #16
 800656c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006570:	431a      	orrs	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006576:	3b01      	subs	r3, #1
 8006578:	061b      	lsls	r3, r3, #24
 800657a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800657e:	4938      	ldr	r1, [pc, #224]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 8006580:	4313      	orrs	r3, r2
 8006582:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006584:	4b36      	ldr	r3, [pc, #216]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 8006586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006588:	4a35      	ldr	r2, [pc, #212]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 800658a:	f023 0301 	bic.w	r3, r3, #1
 800658e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006590:	4b33      	ldr	r3, [pc, #204]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 8006592:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006594:	4b34      	ldr	r3, [pc, #208]	@ (8006668 <HAL_RCC_OscConfig+0x6cc>)
 8006596:	4013      	ands	r3, r2
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800659c:	00d2      	lsls	r2, r2, #3
 800659e:	4930      	ldr	r1, [pc, #192]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80065a4:	4b2e      	ldr	r3, [pc, #184]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 80065a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a8:	f023 020c 	bic.w	r2, r3, #12
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b0:	492b      	ldr	r1, [pc, #172]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80065b6:	4b2a      	ldr	r3, [pc, #168]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 80065b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ba:	f023 0202 	bic.w	r2, r3, #2
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065c2:	4927      	ldr	r1, [pc, #156]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80065c8:	4b25      	ldr	r3, [pc, #148]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 80065ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065cc:	4a24      	ldr	r2, [pc, #144]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 80065ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065d4:	4b22      	ldr	r3, [pc, #136]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 80065d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d8:	4a21      	ldr	r2, [pc, #132]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 80065da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80065e0:	4b1f      	ldr	r3, [pc, #124]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 80065e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e4:	4a1e      	ldr	r2, [pc, #120]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 80065e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80065ec:	4b1c      	ldr	r3, [pc, #112]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 80065ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 80065f2:	f043 0301 	orr.w	r3, r3, #1
 80065f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065f8:	4b19      	ldr	r3, [pc, #100]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a18      	ldr	r2, [pc, #96]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 80065fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006604:	f7fc f82e 	bl	8002664 <HAL_GetTick>
 8006608:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800660a:	e008      	b.n	800661e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800660c:	f7fc f82a 	bl	8002664 <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	2b02      	cmp	r3, #2
 8006618:	d901      	bls.n	800661e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e090      	b.n	8006740 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800661e:	4b10      	ldr	r3, [pc, #64]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d0f0      	beq.n	800660c <HAL_RCC_OscConfig+0x670>
 800662a:	e088      	b.n	800673e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800662c:	4b0c      	ldr	r3, [pc, #48]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a0b      	ldr	r2, [pc, #44]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 8006632:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006638:	f7fc f814 	bl	8002664 <HAL_GetTick>
 800663c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800663e:	e008      	b.n	8006652 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006640:	f7fc f810 	bl	8002664 <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	2b02      	cmp	r3, #2
 800664c:	d901      	bls.n	8006652 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e076      	b.n	8006740 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006652:	4b03      	ldr	r3, [pc, #12]	@ (8006660 <HAL_RCC_OscConfig+0x6c4>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1f0      	bne.n	8006640 <HAL_RCC_OscConfig+0x6a4>
 800665e:	e06e      	b.n	800673e <HAL_RCC_OscConfig+0x7a2>
 8006660:	58024400 	.word	0x58024400
 8006664:	fffffc0c 	.word	0xfffffc0c
 8006668:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800666c:	4b36      	ldr	r3, [pc, #216]	@ (8006748 <HAL_RCC_OscConfig+0x7ac>)
 800666e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006670:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006672:	4b35      	ldr	r3, [pc, #212]	@ (8006748 <HAL_RCC_OscConfig+0x7ac>)
 8006674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006676:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800667c:	2b01      	cmp	r3, #1
 800667e:	d031      	beq.n	80066e4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f003 0203 	and.w	r2, r3, #3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800668a:	429a      	cmp	r2, r3
 800668c:	d12a      	bne.n	80066e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	091b      	lsrs	r3, r3, #4
 8006692:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800669a:	429a      	cmp	r2, r3
 800669c:	d122      	bne.n	80066e4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d11a      	bne.n	80066e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	0a5b      	lsrs	r3, r3, #9
 80066b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80066bc:	429a      	cmp	r2, r3
 80066be:	d111      	bne.n	80066e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	0c1b      	lsrs	r3, r3, #16
 80066c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d108      	bne.n	80066e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	0e1b      	lsrs	r3, r3, #24
 80066d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066de:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d001      	beq.n	80066e8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e02b      	b.n	8006740 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80066e8:	4b17      	ldr	r3, [pc, #92]	@ (8006748 <HAL_RCC_OscConfig+0x7ac>)
 80066ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ec:	08db      	lsrs	r3, r3, #3
 80066ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066f2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d01f      	beq.n	800673e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80066fe:	4b12      	ldr	r3, [pc, #72]	@ (8006748 <HAL_RCC_OscConfig+0x7ac>)
 8006700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006702:	4a11      	ldr	r2, [pc, #68]	@ (8006748 <HAL_RCC_OscConfig+0x7ac>)
 8006704:	f023 0301 	bic.w	r3, r3, #1
 8006708:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800670a:	f7fb ffab 	bl	8002664 <HAL_GetTick>
 800670e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006710:	bf00      	nop
 8006712:	f7fb ffa7 	bl	8002664 <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671a:	4293      	cmp	r3, r2
 800671c:	d0f9      	beq.n	8006712 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800671e:	4b0a      	ldr	r3, [pc, #40]	@ (8006748 <HAL_RCC_OscConfig+0x7ac>)
 8006720:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006722:	4b0a      	ldr	r3, [pc, #40]	@ (800674c <HAL_RCC_OscConfig+0x7b0>)
 8006724:	4013      	ands	r3, r2
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800672a:	00d2      	lsls	r2, r2, #3
 800672c:	4906      	ldr	r1, [pc, #24]	@ (8006748 <HAL_RCC_OscConfig+0x7ac>)
 800672e:	4313      	orrs	r3, r2
 8006730:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006732:	4b05      	ldr	r3, [pc, #20]	@ (8006748 <HAL_RCC_OscConfig+0x7ac>)
 8006734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006736:	4a04      	ldr	r2, [pc, #16]	@ (8006748 <HAL_RCC_OscConfig+0x7ac>)
 8006738:	f043 0301 	orr.w	r3, r3, #1
 800673c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3730      	adds	r7, #48	@ 0x30
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	58024400 	.word	0x58024400
 800674c:	ffff0007 	.word	0xffff0007

08006750 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e19c      	b.n	8006a9e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006764:	4b8a      	ldr	r3, [pc, #552]	@ (8006990 <HAL_RCC_ClockConfig+0x240>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 030f 	and.w	r3, r3, #15
 800676c:	683a      	ldr	r2, [r7, #0]
 800676e:	429a      	cmp	r2, r3
 8006770:	d910      	bls.n	8006794 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006772:	4b87      	ldr	r3, [pc, #540]	@ (8006990 <HAL_RCC_ClockConfig+0x240>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f023 020f 	bic.w	r2, r3, #15
 800677a:	4985      	ldr	r1, [pc, #532]	@ (8006990 <HAL_RCC_ClockConfig+0x240>)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	4313      	orrs	r3, r2
 8006780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006782:	4b83      	ldr	r3, [pc, #524]	@ (8006990 <HAL_RCC_ClockConfig+0x240>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 030f 	and.w	r3, r3, #15
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	429a      	cmp	r2, r3
 800678e:	d001      	beq.n	8006794 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e184      	b.n	8006a9e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0304 	and.w	r3, r3, #4
 800679c:	2b00      	cmp	r3, #0
 800679e:	d010      	beq.n	80067c2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	691a      	ldr	r2, [r3, #16]
 80067a4:	4b7b      	ldr	r3, [pc, #492]	@ (8006994 <HAL_RCC_ClockConfig+0x244>)
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d908      	bls.n	80067c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80067b0:	4b78      	ldr	r3, [pc, #480]	@ (8006994 <HAL_RCC_ClockConfig+0x244>)
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	4975      	ldr	r1, [pc, #468]	@ (8006994 <HAL_RCC_ClockConfig+0x244>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0308 	and.w	r3, r3, #8
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d010      	beq.n	80067f0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	695a      	ldr	r2, [r3, #20]
 80067d2:	4b70      	ldr	r3, [pc, #448]	@ (8006994 <HAL_RCC_ClockConfig+0x244>)
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067da:	429a      	cmp	r2, r3
 80067dc:	d908      	bls.n	80067f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067de:	4b6d      	ldr	r3, [pc, #436]	@ (8006994 <HAL_RCC_ClockConfig+0x244>)
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	496a      	ldr	r1, [pc, #424]	@ (8006994 <HAL_RCC_ClockConfig+0x244>)
 80067ec:	4313      	orrs	r3, r2
 80067ee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0310 	and.w	r3, r3, #16
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d010      	beq.n	800681e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	699a      	ldr	r2, [r3, #24]
 8006800:	4b64      	ldr	r3, [pc, #400]	@ (8006994 <HAL_RCC_ClockConfig+0x244>)
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006808:	429a      	cmp	r2, r3
 800680a:	d908      	bls.n	800681e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800680c:	4b61      	ldr	r3, [pc, #388]	@ (8006994 <HAL_RCC_ClockConfig+0x244>)
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	495e      	ldr	r1, [pc, #376]	@ (8006994 <HAL_RCC_ClockConfig+0x244>)
 800681a:	4313      	orrs	r3, r2
 800681c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0320 	and.w	r3, r3, #32
 8006826:	2b00      	cmp	r3, #0
 8006828:	d010      	beq.n	800684c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	69da      	ldr	r2, [r3, #28]
 800682e:	4b59      	ldr	r3, [pc, #356]	@ (8006994 <HAL_RCC_ClockConfig+0x244>)
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006836:	429a      	cmp	r2, r3
 8006838:	d908      	bls.n	800684c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800683a:	4b56      	ldr	r3, [pc, #344]	@ (8006994 <HAL_RCC_ClockConfig+0x244>)
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	4953      	ldr	r1, [pc, #332]	@ (8006994 <HAL_RCC_ClockConfig+0x244>)
 8006848:	4313      	orrs	r3, r2
 800684a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d010      	beq.n	800687a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68da      	ldr	r2, [r3, #12]
 800685c:	4b4d      	ldr	r3, [pc, #308]	@ (8006994 <HAL_RCC_ClockConfig+0x244>)
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	f003 030f 	and.w	r3, r3, #15
 8006864:	429a      	cmp	r2, r3
 8006866:	d908      	bls.n	800687a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006868:	4b4a      	ldr	r3, [pc, #296]	@ (8006994 <HAL_RCC_ClockConfig+0x244>)
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	f023 020f 	bic.w	r2, r3, #15
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	4947      	ldr	r1, [pc, #284]	@ (8006994 <HAL_RCC_ClockConfig+0x244>)
 8006876:	4313      	orrs	r3, r2
 8006878:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b00      	cmp	r3, #0
 8006884:	d055      	beq.n	8006932 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006886:	4b43      	ldr	r3, [pc, #268]	@ (8006994 <HAL_RCC_ClockConfig+0x244>)
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	4940      	ldr	r1, [pc, #256]	@ (8006994 <HAL_RCC_ClockConfig+0x244>)
 8006894:	4313      	orrs	r3, r2
 8006896:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	2b02      	cmp	r3, #2
 800689e:	d107      	bne.n	80068b0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80068a0:	4b3c      	ldr	r3, [pc, #240]	@ (8006994 <HAL_RCC_ClockConfig+0x244>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d121      	bne.n	80068f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e0f6      	b.n	8006a9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	2b03      	cmp	r3, #3
 80068b6:	d107      	bne.n	80068c8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068b8:	4b36      	ldr	r3, [pc, #216]	@ (8006994 <HAL_RCC_ClockConfig+0x244>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d115      	bne.n	80068f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e0ea      	b.n	8006a9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d107      	bne.n	80068e0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068d0:	4b30      	ldr	r3, [pc, #192]	@ (8006994 <HAL_RCC_ClockConfig+0x244>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d109      	bne.n	80068f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e0de      	b.n	8006a9e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068e0:	4b2c      	ldr	r3, [pc, #176]	@ (8006994 <HAL_RCC_ClockConfig+0x244>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0304 	and.w	r3, r3, #4
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d101      	bne.n	80068f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e0d6      	b.n	8006a9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80068f0:	4b28      	ldr	r3, [pc, #160]	@ (8006994 <HAL_RCC_ClockConfig+0x244>)
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	f023 0207 	bic.w	r2, r3, #7
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	4925      	ldr	r1, [pc, #148]	@ (8006994 <HAL_RCC_ClockConfig+0x244>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006902:	f7fb feaf 	bl	8002664 <HAL_GetTick>
 8006906:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006908:	e00a      	b.n	8006920 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800690a:	f7fb feab 	bl	8002664 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006918:	4293      	cmp	r3, r2
 800691a:	d901      	bls.n	8006920 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e0be      	b.n	8006a9e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006920:	4b1c      	ldr	r3, [pc, #112]	@ (8006994 <HAL_RCC_ClockConfig+0x244>)
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	00db      	lsls	r3, r3, #3
 800692e:	429a      	cmp	r2, r3
 8006930:	d1eb      	bne.n	800690a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d010      	beq.n	8006960 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	4b14      	ldr	r3, [pc, #80]	@ (8006994 <HAL_RCC_ClockConfig+0x244>)
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	f003 030f 	and.w	r3, r3, #15
 800694a:	429a      	cmp	r2, r3
 800694c:	d208      	bcs.n	8006960 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800694e:	4b11      	ldr	r3, [pc, #68]	@ (8006994 <HAL_RCC_ClockConfig+0x244>)
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	f023 020f 	bic.w	r2, r3, #15
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	490e      	ldr	r1, [pc, #56]	@ (8006994 <HAL_RCC_ClockConfig+0x244>)
 800695c:	4313      	orrs	r3, r2
 800695e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006960:	4b0b      	ldr	r3, [pc, #44]	@ (8006990 <HAL_RCC_ClockConfig+0x240>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 030f 	and.w	r3, r3, #15
 8006968:	683a      	ldr	r2, [r7, #0]
 800696a:	429a      	cmp	r2, r3
 800696c:	d214      	bcs.n	8006998 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800696e:	4b08      	ldr	r3, [pc, #32]	@ (8006990 <HAL_RCC_ClockConfig+0x240>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f023 020f 	bic.w	r2, r3, #15
 8006976:	4906      	ldr	r1, [pc, #24]	@ (8006990 <HAL_RCC_ClockConfig+0x240>)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	4313      	orrs	r3, r2
 800697c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800697e:	4b04      	ldr	r3, [pc, #16]	@ (8006990 <HAL_RCC_ClockConfig+0x240>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 030f 	and.w	r3, r3, #15
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	429a      	cmp	r2, r3
 800698a:	d005      	beq.n	8006998 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e086      	b.n	8006a9e <HAL_RCC_ClockConfig+0x34e>
 8006990:	52002000 	.word	0x52002000
 8006994:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0304 	and.w	r3, r3, #4
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d010      	beq.n	80069c6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	691a      	ldr	r2, [r3, #16]
 80069a8:	4b3f      	ldr	r3, [pc, #252]	@ (8006aa8 <HAL_RCC_ClockConfig+0x358>)
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d208      	bcs.n	80069c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80069b4:	4b3c      	ldr	r3, [pc, #240]	@ (8006aa8 <HAL_RCC_ClockConfig+0x358>)
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	4939      	ldr	r1, [pc, #228]	@ (8006aa8 <HAL_RCC_ClockConfig+0x358>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0308 	and.w	r3, r3, #8
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d010      	beq.n	80069f4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	695a      	ldr	r2, [r3, #20]
 80069d6:	4b34      	ldr	r3, [pc, #208]	@ (8006aa8 <HAL_RCC_ClockConfig+0x358>)
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069de:	429a      	cmp	r2, r3
 80069e0:	d208      	bcs.n	80069f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069e2:	4b31      	ldr	r3, [pc, #196]	@ (8006aa8 <HAL_RCC_ClockConfig+0x358>)
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	492e      	ldr	r1, [pc, #184]	@ (8006aa8 <HAL_RCC_ClockConfig+0x358>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0310 	and.w	r3, r3, #16
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d010      	beq.n	8006a22 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	699a      	ldr	r2, [r3, #24]
 8006a04:	4b28      	ldr	r3, [pc, #160]	@ (8006aa8 <HAL_RCC_ClockConfig+0x358>)
 8006a06:	69db      	ldr	r3, [r3, #28]
 8006a08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d208      	bcs.n	8006a22 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a10:	4b25      	ldr	r3, [pc, #148]	@ (8006aa8 <HAL_RCC_ClockConfig+0x358>)
 8006a12:	69db      	ldr	r3, [r3, #28]
 8006a14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	4922      	ldr	r1, [pc, #136]	@ (8006aa8 <HAL_RCC_ClockConfig+0x358>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0320 	and.w	r3, r3, #32
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d010      	beq.n	8006a50 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	69da      	ldr	r2, [r3, #28]
 8006a32:	4b1d      	ldr	r3, [pc, #116]	@ (8006aa8 <HAL_RCC_ClockConfig+0x358>)
 8006a34:	6a1b      	ldr	r3, [r3, #32]
 8006a36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d208      	bcs.n	8006a50 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8006aa8 <HAL_RCC_ClockConfig+0x358>)
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	4917      	ldr	r1, [pc, #92]	@ (8006aa8 <HAL_RCC_ClockConfig+0x358>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006a50:	f000 f834 	bl	8006abc <HAL_RCC_GetSysClockFreq>
 8006a54:	4602      	mov	r2, r0
 8006a56:	4b14      	ldr	r3, [pc, #80]	@ (8006aa8 <HAL_RCC_ClockConfig+0x358>)
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	0a1b      	lsrs	r3, r3, #8
 8006a5c:	f003 030f 	and.w	r3, r3, #15
 8006a60:	4912      	ldr	r1, [pc, #72]	@ (8006aac <HAL_RCC_ClockConfig+0x35c>)
 8006a62:	5ccb      	ldrb	r3, [r1, r3]
 8006a64:	f003 031f 	and.w	r3, r3, #31
 8006a68:	fa22 f303 	lsr.w	r3, r2, r3
 8006a6c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8006aa8 <HAL_RCC_ClockConfig+0x358>)
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	f003 030f 	and.w	r3, r3, #15
 8006a76:	4a0d      	ldr	r2, [pc, #52]	@ (8006aac <HAL_RCC_ClockConfig+0x35c>)
 8006a78:	5cd3      	ldrb	r3, [r2, r3]
 8006a7a:	f003 031f 	and.w	r3, r3, #31
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	fa22 f303 	lsr.w	r3, r2, r3
 8006a84:	4a0a      	ldr	r2, [pc, #40]	@ (8006ab0 <HAL_RCC_ClockConfig+0x360>)
 8006a86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a88:	4a0a      	ldr	r2, [pc, #40]	@ (8006ab4 <HAL_RCC_ClockConfig+0x364>)
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8006ab8 <HAL_RCC_ClockConfig+0x368>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fb fd9c 	bl	80025d0 <HAL_InitTick>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3718      	adds	r7, #24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	58024400 	.word	0x58024400
 8006aac:	0800b634 	.word	0x0800b634
 8006ab0:	2400000c 	.word	0x2400000c
 8006ab4:	24000008 	.word	0x24000008
 8006ab8:	24000010 	.word	0x24000010

08006abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b089      	sub	sp, #36	@ 0x24
 8006ac0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ac2:	4bb3      	ldr	r3, [pc, #716]	@ (8006d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006aca:	2b18      	cmp	r3, #24
 8006acc:	f200 8155 	bhi.w	8006d7a <HAL_RCC_GetSysClockFreq+0x2be>
 8006ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ad8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad6:	bf00      	nop
 8006ad8:	08006b3d 	.word	0x08006b3d
 8006adc:	08006d7b 	.word	0x08006d7b
 8006ae0:	08006d7b 	.word	0x08006d7b
 8006ae4:	08006d7b 	.word	0x08006d7b
 8006ae8:	08006d7b 	.word	0x08006d7b
 8006aec:	08006d7b 	.word	0x08006d7b
 8006af0:	08006d7b 	.word	0x08006d7b
 8006af4:	08006d7b 	.word	0x08006d7b
 8006af8:	08006b63 	.word	0x08006b63
 8006afc:	08006d7b 	.word	0x08006d7b
 8006b00:	08006d7b 	.word	0x08006d7b
 8006b04:	08006d7b 	.word	0x08006d7b
 8006b08:	08006d7b 	.word	0x08006d7b
 8006b0c:	08006d7b 	.word	0x08006d7b
 8006b10:	08006d7b 	.word	0x08006d7b
 8006b14:	08006d7b 	.word	0x08006d7b
 8006b18:	08006b69 	.word	0x08006b69
 8006b1c:	08006d7b 	.word	0x08006d7b
 8006b20:	08006d7b 	.word	0x08006d7b
 8006b24:	08006d7b 	.word	0x08006d7b
 8006b28:	08006d7b 	.word	0x08006d7b
 8006b2c:	08006d7b 	.word	0x08006d7b
 8006b30:	08006d7b 	.word	0x08006d7b
 8006b34:	08006d7b 	.word	0x08006d7b
 8006b38:	08006b6f 	.word	0x08006b6f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b3c:	4b94      	ldr	r3, [pc, #592]	@ (8006d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0320 	and.w	r3, r3, #32
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d009      	beq.n	8006b5c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b48:	4b91      	ldr	r3, [pc, #580]	@ (8006d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	08db      	lsrs	r3, r3, #3
 8006b4e:	f003 0303 	and.w	r3, r3, #3
 8006b52:	4a90      	ldr	r2, [pc, #576]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b54:	fa22 f303 	lsr.w	r3, r2, r3
 8006b58:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006b5a:	e111      	b.n	8006d80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006b5c:	4b8d      	ldr	r3, [pc, #564]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b5e:	61bb      	str	r3, [r7, #24]
      break;
 8006b60:	e10e      	b.n	8006d80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006b62:	4b8d      	ldr	r3, [pc, #564]	@ (8006d98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b64:	61bb      	str	r3, [r7, #24]
      break;
 8006b66:	e10b      	b.n	8006d80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006b68:	4b8c      	ldr	r3, [pc, #560]	@ (8006d9c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006b6a:	61bb      	str	r3, [r7, #24]
      break;
 8006b6c:	e108      	b.n	8006d80 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b6e:	4b88      	ldr	r3, [pc, #544]	@ (8006d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b72:	f003 0303 	and.w	r3, r3, #3
 8006b76:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006b78:	4b85      	ldr	r3, [pc, #532]	@ (8006d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b7c:	091b      	lsrs	r3, r3, #4
 8006b7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b82:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b84:	4b82      	ldr	r3, [pc, #520]	@ (8006d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006b8e:	4b80      	ldr	r3, [pc, #512]	@ (8006d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b92:	08db      	lsrs	r3, r3, #3
 8006b94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	fb02 f303 	mul.w	r3, r2, r3
 8006b9e:	ee07 3a90 	vmov	s15, r3
 8006ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ba6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f000 80e1 	beq.w	8006d74 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	f000 8083 	beq.w	8006cc0 <HAL_RCC_GetSysClockFreq+0x204>
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	f200 80a1 	bhi.w	8006d04 <HAL_RCC_GetSysClockFreq+0x248>
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d003      	beq.n	8006bd0 <HAL_RCC_GetSysClockFreq+0x114>
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d056      	beq.n	8006c7c <HAL_RCC_GetSysClockFreq+0x1c0>
 8006bce:	e099      	b.n	8006d04 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bd0:	4b6f      	ldr	r3, [pc, #444]	@ (8006d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0320 	and.w	r3, r3, #32
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d02d      	beq.n	8006c38 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bdc:	4b6c      	ldr	r3, [pc, #432]	@ (8006d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	08db      	lsrs	r3, r3, #3
 8006be2:	f003 0303 	and.w	r3, r3, #3
 8006be6:	4a6b      	ldr	r2, [pc, #428]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006be8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	ee07 3a90 	vmov	s15, r3
 8006bf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	ee07 3a90 	vmov	s15, r3
 8006bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c06:	4b62      	ldr	r3, [pc, #392]	@ (8006d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c0e:	ee07 3a90 	vmov	s15, r3
 8006c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c16:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c1a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006da0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c32:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006c36:	e087      	b.n	8006d48 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	ee07 3a90 	vmov	s15, r3
 8006c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c42:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006da4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c4a:	4b51      	ldr	r3, [pc, #324]	@ (8006d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c52:	ee07 3a90 	vmov	s15, r3
 8006c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c5e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006da0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c7a:	e065      	b.n	8006d48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	ee07 3a90 	vmov	s15, r3
 8006c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c86:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006da8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c8e:	4b40      	ldr	r3, [pc, #256]	@ (8006d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c96:	ee07 3a90 	vmov	s15, r3
 8006c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ca2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006da0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006cbe:	e043      	b.n	8006d48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	ee07 3a90 	vmov	s15, r3
 8006cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006dac <HAL_RCC_GetSysClockFreq+0x2f0>
 8006cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cd2:	4b2f      	ldr	r3, [pc, #188]	@ (8006d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cda:	ee07 3a90 	vmov	s15, r3
 8006cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ce2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ce6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006da0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d02:	e021      	b.n	8006d48 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	ee07 3a90 	vmov	s15, r3
 8006d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d0e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006da8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d16:	4b1e      	ldr	r3, [pc, #120]	@ (8006d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d1e:	ee07 3a90 	vmov	s15, r3
 8006d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d26:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d2a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006da0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d46:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006d48:	4b11      	ldr	r3, [pc, #68]	@ (8006d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d4c:	0a5b      	lsrs	r3, r3, #9
 8006d4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d52:	3301      	adds	r3, #1
 8006d54:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	ee07 3a90 	vmov	s15, r3
 8006d5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d60:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d6c:	ee17 3a90 	vmov	r3, s15
 8006d70:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006d72:	e005      	b.n	8006d80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	61bb      	str	r3, [r7, #24]
      break;
 8006d78:	e002      	b.n	8006d80 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006d7a:	4b07      	ldr	r3, [pc, #28]	@ (8006d98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d7c:	61bb      	str	r3, [r7, #24]
      break;
 8006d7e:	bf00      	nop
  }

  return sysclockfreq;
 8006d80:	69bb      	ldr	r3, [r7, #24]
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3724      	adds	r7, #36	@ 0x24
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	58024400 	.word	0x58024400
 8006d94:	03d09000 	.word	0x03d09000
 8006d98:	003d0900 	.word	0x003d0900
 8006d9c:	016e3600 	.word	0x016e3600
 8006da0:	46000000 	.word	0x46000000
 8006da4:	4c742400 	.word	0x4c742400
 8006da8:	4a742400 	.word	0x4a742400
 8006dac:	4bb71b00 	.word	0x4bb71b00

08006db0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006db6:	f7ff fe81 	bl	8006abc <HAL_RCC_GetSysClockFreq>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	4b10      	ldr	r3, [pc, #64]	@ (8006e00 <HAL_RCC_GetHCLKFreq+0x50>)
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	0a1b      	lsrs	r3, r3, #8
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	490f      	ldr	r1, [pc, #60]	@ (8006e04 <HAL_RCC_GetHCLKFreq+0x54>)
 8006dc8:	5ccb      	ldrb	r3, [r1, r3]
 8006dca:	f003 031f 	and.w	r3, r3, #31
 8006dce:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8006e00 <HAL_RCC_GetHCLKFreq+0x50>)
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	f003 030f 	and.w	r3, r3, #15
 8006ddc:	4a09      	ldr	r2, [pc, #36]	@ (8006e04 <HAL_RCC_GetHCLKFreq+0x54>)
 8006dde:	5cd3      	ldrb	r3, [r2, r3]
 8006de0:	f003 031f 	and.w	r3, r3, #31
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dea:	4a07      	ldr	r2, [pc, #28]	@ (8006e08 <HAL_RCC_GetHCLKFreq+0x58>)
 8006dec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006dee:	4a07      	ldr	r2, [pc, #28]	@ (8006e0c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006df4:	4b04      	ldr	r3, [pc, #16]	@ (8006e08 <HAL_RCC_GetHCLKFreq+0x58>)
 8006df6:	681b      	ldr	r3, [r3, #0]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	58024400 	.word	0x58024400
 8006e04:	0800b634 	.word	0x0800b634
 8006e08:	2400000c 	.word	0x2400000c
 8006e0c:	24000008 	.word	0x24000008

08006e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006e14:	f7ff ffcc 	bl	8006db0 <HAL_RCC_GetHCLKFreq>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	4b06      	ldr	r3, [pc, #24]	@ (8006e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	091b      	lsrs	r3, r3, #4
 8006e20:	f003 0307 	and.w	r3, r3, #7
 8006e24:	4904      	ldr	r1, [pc, #16]	@ (8006e38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e26:	5ccb      	ldrb	r3, [r1, r3]
 8006e28:	f003 031f 	and.w	r3, r3, #31
 8006e2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	58024400 	.word	0x58024400
 8006e38:	0800b634 	.word	0x0800b634

08006e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006e40:	f7ff ffb6 	bl	8006db0 <HAL_RCC_GetHCLKFreq>
 8006e44:	4602      	mov	r2, r0
 8006e46:	4b06      	ldr	r3, [pc, #24]	@ (8006e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	0a1b      	lsrs	r3, r3, #8
 8006e4c:	f003 0307 	and.w	r3, r3, #7
 8006e50:	4904      	ldr	r1, [pc, #16]	@ (8006e64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e52:	5ccb      	ldrb	r3, [r1, r3]
 8006e54:	f003 031f 	and.w	r3, r3, #31
 8006e58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	58024400 	.word	0x58024400
 8006e64:	0800b634 	.word	0x0800b634

08006e68 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e6c:	b0c6      	sub	sp, #280	@ 0x118
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e74:	2300      	movs	r3, #0
 8006e76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e88:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006e8c:	2500      	movs	r5, #0
 8006e8e:	ea54 0305 	orrs.w	r3, r4, r5
 8006e92:	d049      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e9e:	d02f      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006ea0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ea4:	d828      	bhi.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006ea6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006eaa:	d01a      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006eac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006eb0:	d822      	bhi.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006eb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006eba:	d007      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006ebc:	e01c      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ebe:	4bab      	ldr	r3, [pc, #684]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec2:	4aaa      	ldr	r2, [pc, #680]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ec8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006eca:	e01a      	b.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ed0:	3308      	adds	r3, #8
 8006ed2:	2102      	movs	r1, #2
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f002 fa49 	bl	800936c <RCCEx_PLL2_Config>
 8006eda:	4603      	mov	r3, r0
 8006edc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ee0:	e00f      	b.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ee6:	3328      	adds	r3, #40	@ 0x28
 8006ee8:	2102      	movs	r1, #2
 8006eea:	4618      	mov	r0, r3
 8006eec:	f002 faf0 	bl	80094d0 <RCCEx_PLL3_Config>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ef6:	e004      	b.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006efe:	e000      	b.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10a      	bne.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006f0a:	4b98      	ldr	r3, [pc, #608]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f0e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f18:	4a94      	ldr	r2, [pc, #592]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f1a:	430b      	orrs	r3, r1
 8006f1c:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f1e:	e003      	b.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f30:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006f34:	f04f 0900 	mov.w	r9, #0
 8006f38:	ea58 0309 	orrs.w	r3, r8, r9
 8006f3c:	d047      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f44:	2b04      	cmp	r3, #4
 8006f46:	d82a      	bhi.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006f48:	a201      	add	r2, pc, #4	@ (adr r2, 8006f50 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4e:	bf00      	nop
 8006f50:	08006f65 	.word	0x08006f65
 8006f54:	08006f73 	.word	0x08006f73
 8006f58:	08006f89 	.word	0x08006f89
 8006f5c:	08006fa7 	.word	0x08006fa7
 8006f60:	08006fa7 	.word	0x08006fa7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f64:	4b81      	ldr	r3, [pc, #516]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f68:	4a80      	ldr	r2, [pc, #512]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f70:	e01a      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f76:	3308      	adds	r3, #8
 8006f78:	2100      	movs	r1, #0
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f002 f9f6 	bl	800936c <RCCEx_PLL2_Config>
 8006f80:	4603      	mov	r3, r0
 8006f82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f86:	e00f      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f8c:	3328      	adds	r3, #40	@ 0x28
 8006f8e:	2100      	movs	r1, #0
 8006f90:	4618      	mov	r0, r3
 8006f92:	f002 fa9d 	bl	80094d0 <RCCEx_PLL3_Config>
 8006f96:	4603      	mov	r3, r0
 8006f98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f9c:	e004      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006fa4:	e000      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006fa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fa8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10a      	bne.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fb0:	4b6e      	ldr	r3, [pc, #440]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006fb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fb4:	f023 0107 	bic.w	r1, r3, #7
 8006fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fbe:	4a6b      	ldr	r2, [pc, #428]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006fc0:	430b      	orrs	r3, r1
 8006fc2:	6513      	str	r3, [r2, #80]	@ 0x50
 8006fc4:	e003      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006fda:	f04f 0b00 	mov.w	fp, #0
 8006fde:	ea5a 030b 	orrs.w	r3, sl, fp
 8006fe2:	d05b      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006fec:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006ff0:	d03b      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006ff2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006ff6:	d834      	bhi.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006ff8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ffc:	d037      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006ffe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007002:	d82e      	bhi.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007004:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007008:	d033      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800700a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800700e:	d828      	bhi.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007010:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007014:	d01a      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007016:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800701a:	d822      	bhi.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800701c:	2b00      	cmp	r3, #0
 800701e:	d003      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007020:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007024:	d007      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8007026:	e01c      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007028:	4b50      	ldr	r3, [pc, #320]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800702a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800702c:	4a4f      	ldr	r2, [pc, #316]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800702e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007032:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007034:	e01e      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800703a:	3308      	adds	r3, #8
 800703c:	2100      	movs	r1, #0
 800703e:	4618      	mov	r0, r3
 8007040:	f002 f994 	bl	800936c <RCCEx_PLL2_Config>
 8007044:	4603      	mov	r3, r0
 8007046:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800704a:	e013      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800704c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007050:	3328      	adds	r3, #40	@ 0x28
 8007052:	2100      	movs	r1, #0
 8007054:	4618      	mov	r0, r3
 8007056:	f002 fa3b 	bl	80094d0 <RCCEx_PLL3_Config>
 800705a:	4603      	mov	r3, r0
 800705c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007060:	e008      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007068:	e004      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800706a:	bf00      	nop
 800706c:	e002      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800706e:	bf00      	nop
 8007070:	e000      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007072:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007074:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10b      	bne.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800707c:	4b3b      	ldr	r3, [pc, #236]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800707e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007080:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007088:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800708c:	4a37      	ldr	r2, [pc, #220]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800708e:	430b      	orrs	r3, r1
 8007090:	6593      	str	r3, [r2, #88]	@ 0x58
 8007092:	e003      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007094:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007098:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800709c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80070a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80070ac:	2300      	movs	r3, #0
 80070ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80070b2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80070b6:	460b      	mov	r3, r1
 80070b8:	4313      	orrs	r3, r2
 80070ba:	d05d      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80070bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80070c4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80070c8:	d03b      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80070ca:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80070ce:	d834      	bhi.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80070d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80070d4:	d037      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80070d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80070da:	d82e      	bhi.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80070dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80070e0:	d033      	beq.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80070e2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80070e6:	d828      	bhi.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80070e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070ec:	d01a      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80070ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070f2:	d822      	bhi.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d003      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80070f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070fc:	d007      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80070fe:	e01c      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007100:	4b1a      	ldr	r3, [pc, #104]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007104:	4a19      	ldr	r2, [pc, #100]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800710a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800710c:	e01e      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800710e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007112:	3308      	adds	r3, #8
 8007114:	2100      	movs	r1, #0
 8007116:	4618      	mov	r0, r3
 8007118:	f002 f928 	bl	800936c <RCCEx_PLL2_Config>
 800711c:	4603      	mov	r3, r0
 800711e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007122:	e013      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007128:	3328      	adds	r3, #40	@ 0x28
 800712a:	2100      	movs	r1, #0
 800712c:	4618      	mov	r0, r3
 800712e:	f002 f9cf 	bl	80094d0 <RCCEx_PLL3_Config>
 8007132:	4603      	mov	r3, r0
 8007134:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007138:	e008      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007140:	e004      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007142:	bf00      	nop
 8007144:	e002      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007146:	bf00      	nop
 8007148:	e000      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800714a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800714c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10d      	bne.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007154:	4b05      	ldr	r3, [pc, #20]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007158:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800715c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007160:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007164:	4a01      	ldr	r2, [pc, #4]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007166:	430b      	orrs	r3, r1
 8007168:	6593      	str	r3, [r2, #88]	@ 0x58
 800716a:	e005      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800716c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007170:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007174:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800717c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007180:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007184:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007188:	2300      	movs	r3, #0
 800718a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800718e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007192:	460b      	mov	r3, r1
 8007194:	4313      	orrs	r3, r2
 8007196:	d03a      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800719c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800719e:	2b30      	cmp	r3, #48	@ 0x30
 80071a0:	d01f      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80071a2:	2b30      	cmp	r3, #48	@ 0x30
 80071a4:	d819      	bhi.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x372>
 80071a6:	2b20      	cmp	r3, #32
 80071a8:	d00c      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80071aa:	2b20      	cmp	r3, #32
 80071ac:	d815      	bhi.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x372>
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d019      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80071b2:	2b10      	cmp	r3, #16
 80071b4:	d111      	bne.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071b6:	4baa      	ldr	r3, [pc, #680]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80071b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ba:	4aa9      	ldr	r2, [pc, #676]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80071bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80071c2:	e011      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c8:	3308      	adds	r3, #8
 80071ca:	2102      	movs	r1, #2
 80071cc:	4618      	mov	r0, r3
 80071ce:	f002 f8cd 	bl	800936c <RCCEx_PLL2_Config>
 80071d2:	4603      	mov	r3, r0
 80071d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80071d8:	e006      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071e0:	e002      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80071e2:	bf00      	nop
 80071e4:	e000      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80071e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d10a      	bne.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80071f0:	4b9b      	ldr	r3, [pc, #620]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80071f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071f4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80071f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071fe:	4a98      	ldr	r2, [pc, #608]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007200:	430b      	orrs	r3, r1
 8007202:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007204:	e003      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007206:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800720a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800720e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007216:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800721a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800721e:	2300      	movs	r3, #0
 8007220:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007224:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007228:	460b      	mov	r3, r1
 800722a:	4313      	orrs	r3, r2
 800722c:	d051      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800722e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007234:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007238:	d035      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800723a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800723e:	d82e      	bhi.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007240:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007244:	d031      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x442>
 8007246:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800724a:	d828      	bhi.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800724c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007250:	d01a      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007252:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007256:	d822      	bhi.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800725c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007260:	d007      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007262:	e01c      	b.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007264:	4b7e      	ldr	r3, [pc, #504]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007268:	4a7d      	ldr	r2, [pc, #500]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800726a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800726e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007270:	e01c      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007276:	3308      	adds	r3, #8
 8007278:	2100      	movs	r1, #0
 800727a:	4618      	mov	r0, r3
 800727c:	f002 f876 	bl	800936c <RCCEx_PLL2_Config>
 8007280:	4603      	mov	r3, r0
 8007282:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007286:	e011      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800728c:	3328      	adds	r3, #40	@ 0x28
 800728e:	2100      	movs	r1, #0
 8007290:	4618      	mov	r0, r3
 8007292:	f002 f91d 	bl	80094d0 <RCCEx_PLL3_Config>
 8007296:	4603      	mov	r3, r0
 8007298:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800729c:	e006      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80072a4:	e002      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80072a6:	bf00      	nop
 80072a8:	e000      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80072aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10a      	bne.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80072b4:	4b6a      	ldr	r3, [pc, #424]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80072b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072b8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80072bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072c2:	4a67      	ldr	r2, [pc, #412]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80072c4:	430b      	orrs	r3, r1
 80072c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80072c8:	e003      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80072d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072da:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80072de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80072e2:	2300      	movs	r3, #0
 80072e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072e8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80072ec:	460b      	mov	r3, r1
 80072ee:	4313      	orrs	r3, r2
 80072f0:	d053      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80072f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80072fc:	d033      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80072fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007302:	d82c      	bhi.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007304:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007308:	d02f      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800730a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800730e:	d826      	bhi.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007310:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007314:	d02b      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007316:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800731a:	d820      	bhi.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800731c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007320:	d012      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8007322:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007326:	d81a      	bhi.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007328:	2b00      	cmp	r3, #0
 800732a:	d022      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800732c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007330:	d115      	bne.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007336:	3308      	adds	r3, #8
 8007338:	2101      	movs	r1, #1
 800733a:	4618      	mov	r0, r3
 800733c:	f002 f816 	bl	800936c <RCCEx_PLL2_Config>
 8007340:	4603      	mov	r3, r0
 8007342:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007346:	e015      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800734c:	3328      	adds	r3, #40	@ 0x28
 800734e:	2101      	movs	r1, #1
 8007350:	4618      	mov	r0, r3
 8007352:	f002 f8bd 	bl	80094d0 <RCCEx_PLL3_Config>
 8007356:	4603      	mov	r3, r0
 8007358:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800735c:	e00a      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007364:	e006      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007366:	bf00      	nop
 8007368:	e004      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800736a:	bf00      	nop
 800736c:	e002      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800736e:	bf00      	nop
 8007370:	e000      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007372:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007374:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10a      	bne.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800737c:	4b38      	ldr	r3, [pc, #224]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800737e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007380:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800738a:	4a35      	ldr	r2, [pc, #212]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800738c:	430b      	orrs	r3, r1
 800738e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007390:	e003      	b.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007392:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007396:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800739a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800739e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80073a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80073aa:	2300      	movs	r3, #0
 80073ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80073b0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80073b4:	460b      	mov	r3, r1
 80073b6:	4313      	orrs	r3, r2
 80073b8:	d058      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80073ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80073c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073c6:	d033      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80073c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073cc:	d82c      	bhi.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80073ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073d2:	d02f      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80073d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073d8:	d826      	bhi.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80073da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80073de:	d02b      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80073e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80073e4:	d820      	bhi.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80073e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073ea:	d012      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80073ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073f0:	d81a      	bhi.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d022      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80073f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073fa:	d115      	bne.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007400:	3308      	adds	r3, #8
 8007402:	2101      	movs	r1, #1
 8007404:	4618      	mov	r0, r3
 8007406:	f001 ffb1 	bl	800936c <RCCEx_PLL2_Config>
 800740a:	4603      	mov	r3, r0
 800740c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007410:	e015      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007416:	3328      	adds	r3, #40	@ 0x28
 8007418:	2101      	movs	r1, #1
 800741a:	4618      	mov	r0, r3
 800741c:	f002 f858 	bl	80094d0 <RCCEx_PLL3_Config>
 8007420:	4603      	mov	r3, r0
 8007422:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007426:	e00a      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800742e:	e006      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007430:	bf00      	nop
 8007432:	e004      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007434:	bf00      	nop
 8007436:	e002      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007438:	bf00      	nop
 800743a:	e000      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800743c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800743e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10e      	bne.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007446:	4b06      	ldr	r3, [pc, #24]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800744a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800744e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007452:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007456:	4a02      	ldr	r2, [pc, #8]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007458:	430b      	orrs	r3, r1
 800745a:	6593      	str	r3, [r2, #88]	@ 0x58
 800745c:	e006      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800745e:	bf00      	nop
 8007460:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007464:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007468:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800746c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007474:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007478:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800747c:	2300      	movs	r3, #0
 800747e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007482:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007486:	460b      	mov	r3, r1
 8007488:	4313      	orrs	r3, r2
 800748a:	d037      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800748c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007490:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007492:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007496:	d00e      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007498:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800749c:	d816      	bhi.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x664>
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d018      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80074a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074a6:	d111      	bne.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074a8:	4bc4      	ldr	r3, [pc, #784]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ac:	4ac3      	ldr	r2, [pc, #780]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074b4:	e00f      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ba:	3308      	adds	r3, #8
 80074bc:	2101      	movs	r1, #1
 80074be:	4618      	mov	r0, r3
 80074c0:	f001 ff54 	bl	800936c <RCCEx_PLL2_Config>
 80074c4:	4603      	mov	r3, r0
 80074c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074ca:	e004      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80074d2:	e000      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80074d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10a      	bne.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80074de:	4bb7      	ldr	r3, [pc, #732]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074e2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80074e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074ec:	4ab3      	ldr	r2, [pc, #716]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074ee:	430b      	orrs	r3, r1
 80074f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80074f2:	e003      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80074fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007504:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007508:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800750c:	2300      	movs	r3, #0
 800750e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007512:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007516:	460b      	mov	r3, r1
 8007518:	4313      	orrs	r3, r2
 800751a:	d039      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800751c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007522:	2b03      	cmp	r3, #3
 8007524:	d81c      	bhi.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007526:	a201      	add	r2, pc, #4	@ (adr r2, 800752c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752c:	08007569 	.word	0x08007569
 8007530:	0800753d 	.word	0x0800753d
 8007534:	0800754b 	.word	0x0800754b
 8007538:	08007569 	.word	0x08007569
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800753c:	4b9f      	ldr	r3, [pc, #636]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800753e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007540:	4a9e      	ldr	r2, [pc, #632]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007542:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007546:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007548:	e00f      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800754a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800754e:	3308      	adds	r3, #8
 8007550:	2102      	movs	r1, #2
 8007552:	4618      	mov	r0, r3
 8007554:	f001 ff0a 	bl	800936c <RCCEx_PLL2_Config>
 8007558:	4603      	mov	r3, r0
 800755a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800755e:	e004      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007566:	e000      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800756a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10a      	bne.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007572:	4b92      	ldr	r3, [pc, #584]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007576:	f023 0103 	bic.w	r1, r3, #3
 800757a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800757e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007580:	4a8e      	ldr	r2, [pc, #568]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007582:	430b      	orrs	r3, r1
 8007584:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007586:	e003      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007588:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800758c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007598:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800759c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80075a0:	2300      	movs	r3, #0
 80075a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80075a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80075aa:	460b      	mov	r3, r1
 80075ac:	4313      	orrs	r3, r2
 80075ae:	f000 8099 	beq.w	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075b2:	4b83      	ldr	r3, [pc, #524]	@ (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a82      	ldr	r2, [pc, #520]	@ (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80075b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075be:	f7fb f851 	bl	8002664 <HAL_GetTick>
 80075c2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075c6:	e00b      	b.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075c8:	f7fb f84c 	bl	8002664 <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	2b64      	cmp	r3, #100	@ 0x64
 80075d6:	d903      	bls.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80075de:	e005      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075e0:	4b77      	ldr	r3, [pc, #476]	@ (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d0ed      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80075ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d173      	bne.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80075f4:	4b71      	ldr	r3, [pc, #452]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80075f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80075f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007600:	4053      	eors	r3, r2
 8007602:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007606:	2b00      	cmp	r3, #0
 8007608:	d015      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800760a:	4b6c      	ldr	r3, [pc, #432]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800760c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800760e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007612:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007616:	4b69      	ldr	r3, [pc, #420]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800761a:	4a68      	ldr	r2, [pc, #416]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800761c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007620:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007622:	4b66      	ldr	r3, [pc, #408]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007626:	4a65      	ldr	r2, [pc, #404]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007628:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800762c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800762e:	4a63      	ldr	r2, [pc, #396]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007630:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007634:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800763a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800763e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007642:	d118      	bne.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007644:	f7fb f80e 	bl	8002664 <HAL_GetTick>
 8007648:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800764c:	e00d      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800764e:	f7fb f809 	bl	8002664 <HAL_GetTick>
 8007652:	4602      	mov	r2, r0
 8007654:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007658:	1ad2      	subs	r2, r2, r3
 800765a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800765e:	429a      	cmp	r2, r3
 8007660:	d903      	bls.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007668:	e005      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800766a:	4b54      	ldr	r3, [pc, #336]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800766c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800766e:	f003 0302 	and.w	r3, r3, #2
 8007672:	2b00      	cmp	r3, #0
 8007674:	d0eb      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007676:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800767a:	2b00      	cmp	r3, #0
 800767c:	d129      	bne.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800767e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007682:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007686:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800768a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800768e:	d10e      	bne.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007690:	4b4a      	ldr	r3, [pc, #296]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800769c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80076a0:	091a      	lsrs	r2, r3, #4
 80076a2:	4b48      	ldr	r3, [pc, #288]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80076a4:	4013      	ands	r3, r2
 80076a6:	4a45      	ldr	r2, [pc, #276]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076a8:	430b      	orrs	r3, r1
 80076aa:	6113      	str	r3, [r2, #16]
 80076ac:	e005      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x852>
 80076ae:	4b43      	ldr	r3, [pc, #268]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	4a42      	ldr	r2, [pc, #264]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80076b8:	6113      	str	r3, [r2, #16]
 80076ba:	4b40      	ldr	r3, [pc, #256]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076bc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80076be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80076c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076ca:	4a3c      	ldr	r2, [pc, #240]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076cc:	430b      	orrs	r3, r1
 80076ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80076d0:	e008      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80076da:	e003      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80076e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ec:	f002 0301 	and.w	r3, r2, #1
 80076f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80076f4:	2300      	movs	r3, #0
 80076f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80076fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80076fe:	460b      	mov	r3, r1
 8007700:	4313      	orrs	r3, r2
 8007702:	f000 808f 	beq.w	8007824 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800770a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800770c:	2b28      	cmp	r3, #40	@ 0x28
 800770e:	d871      	bhi.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007710:	a201      	add	r2, pc, #4	@ (adr r2, 8007718 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007716:	bf00      	nop
 8007718:	080077fd 	.word	0x080077fd
 800771c:	080077f5 	.word	0x080077f5
 8007720:	080077f5 	.word	0x080077f5
 8007724:	080077f5 	.word	0x080077f5
 8007728:	080077f5 	.word	0x080077f5
 800772c:	080077f5 	.word	0x080077f5
 8007730:	080077f5 	.word	0x080077f5
 8007734:	080077f5 	.word	0x080077f5
 8007738:	080077c9 	.word	0x080077c9
 800773c:	080077f5 	.word	0x080077f5
 8007740:	080077f5 	.word	0x080077f5
 8007744:	080077f5 	.word	0x080077f5
 8007748:	080077f5 	.word	0x080077f5
 800774c:	080077f5 	.word	0x080077f5
 8007750:	080077f5 	.word	0x080077f5
 8007754:	080077f5 	.word	0x080077f5
 8007758:	080077df 	.word	0x080077df
 800775c:	080077f5 	.word	0x080077f5
 8007760:	080077f5 	.word	0x080077f5
 8007764:	080077f5 	.word	0x080077f5
 8007768:	080077f5 	.word	0x080077f5
 800776c:	080077f5 	.word	0x080077f5
 8007770:	080077f5 	.word	0x080077f5
 8007774:	080077f5 	.word	0x080077f5
 8007778:	080077fd 	.word	0x080077fd
 800777c:	080077f5 	.word	0x080077f5
 8007780:	080077f5 	.word	0x080077f5
 8007784:	080077f5 	.word	0x080077f5
 8007788:	080077f5 	.word	0x080077f5
 800778c:	080077f5 	.word	0x080077f5
 8007790:	080077f5 	.word	0x080077f5
 8007794:	080077f5 	.word	0x080077f5
 8007798:	080077fd 	.word	0x080077fd
 800779c:	080077f5 	.word	0x080077f5
 80077a0:	080077f5 	.word	0x080077f5
 80077a4:	080077f5 	.word	0x080077f5
 80077a8:	080077f5 	.word	0x080077f5
 80077ac:	080077f5 	.word	0x080077f5
 80077b0:	080077f5 	.word	0x080077f5
 80077b4:	080077f5 	.word	0x080077f5
 80077b8:	080077fd 	.word	0x080077fd
 80077bc:	58024400 	.word	0x58024400
 80077c0:	58024800 	.word	0x58024800
 80077c4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077cc:	3308      	adds	r3, #8
 80077ce:	2101      	movs	r1, #1
 80077d0:	4618      	mov	r0, r3
 80077d2:	f001 fdcb 	bl	800936c <RCCEx_PLL2_Config>
 80077d6:	4603      	mov	r3, r0
 80077d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80077dc:	e00f      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077e2:	3328      	adds	r3, #40	@ 0x28
 80077e4:	2101      	movs	r1, #1
 80077e6:	4618      	mov	r0, r3
 80077e8:	f001 fe72 	bl	80094d0 <RCCEx_PLL3_Config>
 80077ec:	4603      	mov	r3, r0
 80077ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80077f2:	e004      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80077fa:	e000      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80077fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007802:	2b00      	cmp	r3, #0
 8007804:	d10a      	bne.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007806:	4bbf      	ldr	r3, [pc, #764]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800780a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800780e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007812:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007814:	4abb      	ldr	r2, [pc, #748]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007816:	430b      	orrs	r3, r1
 8007818:	6553      	str	r3, [r2, #84]	@ 0x54
 800781a:	e003      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800781c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007820:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782c:	f002 0302 	and.w	r3, r2, #2
 8007830:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007834:	2300      	movs	r3, #0
 8007836:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800783a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800783e:	460b      	mov	r3, r1
 8007840:	4313      	orrs	r3, r2
 8007842:	d041      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800784a:	2b05      	cmp	r3, #5
 800784c:	d824      	bhi.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800784e:	a201      	add	r2, pc, #4	@ (adr r2, 8007854 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007854:	080078a1 	.word	0x080078a1
 8007858:	0800786d 	.word	0x0800786d
 800785c:	08007883 	.word	0x08007883
 8007860:	080078a1 	.word	0x080078a1
 8007864:	080078a1 	.word	0x080078a1
 8007868:	080078a1 	.word	0x080078a1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800786c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007870:	3308      	adds	r3, #8
 8007872:	2101      	movs	r1, #1
 8007874:	4618      	mov	r0, r3
 8007876:	f001 fd79 	bl	800936c <RCCEx_PLL2_Config>
 800787a:	4603      	mov	r3, r0
 800787c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007880:	e00f      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007886:	3328      	adds	r3, #40	@ 0x28
 8007888:	2101      	movs	r1, #1
 800788a:	4618      	mov	r0, r3
 800788c:	f001 fe20 	bl	80094d0 <RCCEx_PLL3_Config>
 8007890:	4603      	mov	r3, r0
 8007892:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007896:	e004      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800789e:	e000      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80078a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10a      	bne.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80078aa:	4b96      	ldr	r3, [pc, #600]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80078ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ae:	f023 0107 	bic.w	r1, r3, #7
 80078b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078b8:	4a92      	ldr	r2, [pc, #584]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80078ba:	430b      	orrs	r3, r1
 80078bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80078be:	e003      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80078c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d0:	f002 0304 	and.w	r3, r2, #4
 80078d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80078d8:	2300      	movs	r3, #0
 80078da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80078de:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80078e2:	460b      	mov	r3, r1
 80078e4:	4313      	orrs	r3, r2
 80078e6:	d044      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80078e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078f0:	2b05      	cmp	r3, #5
 80078f2:	d825      	bhi.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80078f4:	a201      	add	r2, pc, #4	@ (adr r2, 80078fc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80078f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fa:	bf00      	nop
 80078fc:	08007949 	.word	0x08007949
 8007900:	08007915 	.word	0x08007915
 8007904:	0800792b 	.word	0x0800792b
 8007908:	08007949 	.word	0x08007949
 800790c:	08007949 	.word	0x08007949
 8007910:	08007949 	.word	0x08007949
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007918:	3308      	adds	r3, #8
 800791a:	2101      	movs	r1, #1
 800791c:	4618      	mov	r0, r3
 800791e:	f001 fd25 	bl	800936c <RCCEx_PLL2_Config>
 8007922:	4603      	mov	r3, r0
 8007924:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007928:	e00f      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800792a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800792e:	3328      	adds	r3, #40	@ 0x28
 8007930:	2101      	movs	r1, #1
 8007932:	4618      	mov	r0, r3
 8007934:	f001 fdcc 	bl	80094d0 <RCCEx_PLL3_Config>
 8007938:	4603      	mov	r3, r0
 800793a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800793e:	e004      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007946:	e000      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800794a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10b      	bne.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007952:	4b6c      	ldr	r3, [pc, #432]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007956:	f023 0107 	bic.w	r1, r3, #7
 800795a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800795e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007962:	4a68      	ldr	r2, [pc, #416]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007964:	430b      	orrs	r3, r1
 8007966:	6593      	str	r3, [r2, #88]	@ 0x58
 8007968:	e003      	b.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800796a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800796e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797a:	f002 0320 	and.w	r3, r2, #32
 800797e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007982:	2300      	movs	r3, #0
 8007984:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007988:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800798c:	460b      	mov	r3, r1
 800798e:	4313      	orrs	r3, r2
 8007990:	d055      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007996:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800799a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800799e:	d033      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80079a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079a4:	d82c      	bhi.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80079a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079aa:	d02f      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80079ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079b0:	d826      	bhi.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80079b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079b6:	d02b      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80079b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079bc:	d820      	bhi.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80079be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079c2:	d012      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80079c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079c8:	d81a      	bhi.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d022      	beq.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80079ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079d2:	d115      	bne.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079d8:	3308      	adds	r3, #8
 80079da:	2100      	movs	r1, #0
 80079dc:	4618      	mov	r0, r3
 80079de:	f001 fcc5 	bl	800936c <RCCEx_PLL2_Config>
 80079e2:	4603      	mov	r3, r0
 80079e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80079e8:	e015      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ee:	3328      	adds	r3, #40	@ 0x28
 80079f0:	2102      	movs	r1, #2
 80079f2:	4618      	mov	r0, r3
 80079f4:	f001 fd6c 	bl	80094d0 <RCCEx_PLL3_Config>
 80079f8:	4603      	mov	r3, r0
 80079fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80079fe:	e00a      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a06:	e006      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007a08:	bf00      	nop
 8007a0a:	e004      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007a0c:	bf00      	nop
 8007a0e:	e002      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007a10:	bf00      	nop
 8007a12:	e000      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10b      	bne.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a1e:	4b39      	ldr	r3, [pc, #228]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a22:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a2e:	4a35      	ldr	r2, [pc, #212]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a30:	430b      	orrs	r3, r1
 8007a32:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a34:	e003      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a3a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a46:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007a4a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a4e:	2300      	movs	r3, #0
 8007a50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a54:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007a58:	460b      	mov	r3, r1
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	d058      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a66:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007a6a:	d033      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007a6c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007a70:	d82c      	bhi.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007a72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a76:	d02f      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007a78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a7c:	d826      	bhi.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007a7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a82:	d02b      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007a84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a88:	d820      	bhi.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007a8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a8e:	d012      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007a90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a94:	d81a      	bhi.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d022      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007a9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a9e:	d115      	bne.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa4:	3308      	adds	r3, #8
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f001 fc5f 	bl	800936c <RCCEx_PLL2_Config>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007ab4:	e015      	b.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aba:	3328      	adds	r3, #40	@ 0x28
 8007abc:	2102      	movs	r1, #2
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f001 fd06 	bl	80094d0 <RCCEx_PLL3_Config>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007aca:	e00a      	b.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ad2:	e006      	b.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007ad4:	bf00      	nop
 8007ad6:	e004      	b.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007ad8:	bf00      	nop
 8007ada:	e002      	b.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007adc:	bf00      	nop
 8007ade:	e000      	b.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ae2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d10e      	bne.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007aea:	4b06      	ldr	r3, [pc, #24]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007af6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007afa:	4a02      	ldr	r2, [pc, #8]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007afc:	430b      	orrs	r3, r1
 8007afe:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b00:	e006      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007b02:	bf00      	nop
 8007b04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b18:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007b1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b20:	2300      	movs	r3, #0
 8007b22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b26:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	d055      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b38:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007b3c:	d033      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007b3e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007b42:	d82c      	bhi.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007b44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b48:	d02f      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007b4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b4e:	d826      	bhi.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007b50:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007b54:	d02b      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007b56:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007b5a:	d820      	bhi.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007b5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b60:	d012      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007b62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b66:	d81a      	bhi.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d022      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007b6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b70:	d115      	bne.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b76:	3308      	adds	r3, #8
 8007b78:	2100      	movs	r1, #0
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f001 fbf6 	bl	800936c <RCCEx_PLL2_Config>
 8007b80:	4603      	mov	r3, r0
 8007b82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007b86:	e015      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b8c:	3328      	adds	r3, #40	@ 0x28
 8007b8e:	2102      	movs	r1, #2
 8007b90:	4618      	mov	r0, r3
 8007b92:	f001 fc9d 	bl	80094d0 <RCCEx_PLL3_Config>
 8007b96:	4603      	mov	r3, r0
 8007b98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007b9c:	e00a      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ba4:	e006      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007ba6:	bf00      	nop
 8007ba8:	e004      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007baa:	bf00      	nop
 8007bac:	e002      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007bae:	bf00      	nop
 8007bb0:	e000      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007bb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10b      	bne.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007bbc:	4ba0      	ldr	r3, [pc, #640]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bc0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007bcc:	4a9c      	ldr	r2, [pc, #624]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007bce:	430b      	orrs	r3, r1
 8007bd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8007bd2:	e003      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be4:	f002 0308 	and.w	r3, r2, #8
 8007be8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007bec:	2300      	movs	r3, #0
 8007bee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007bf2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	d01e      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c08:	d10c      	bne.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c0e:	3328      	adds	r3, #40	@ 0x28
 8007c10:	2102      	movs	r1, #2
 8007c12:	4618      	mov	r0, r3
 8007c14:	f001 fc5c 	bl	80094d0 <RCCEx_PLL3_Config>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d002      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007c24:	4b86      	ldr	r3, [pc, #536]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c28:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c34:	4a82      	ldr	r2, [pc, #520]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c36:	430b      	orrs	r3, r1
 8007c38:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c42:	f002 0310 	and.w	r3, r2, #16
 8007c46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c50:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007c54:	460b      	mov	r3, r1
 8007c56:	4313      	orrs	r3, r2
 8007c58:	d01e      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c66:	d10c      	bne.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c6c:	3328      	adds	r3, #40	@ 0x28
 8007c6e:	2102      	movs	r1, #2
 8007c70:	4618      	mov	r0, r3
 8007c72:	f001 fc2d 	bl	80094d0 <RCCEx_PLL3_Config>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d002      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c82:	4b6f      	ldr	r3, [pc, #444]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c86:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c92:	4a6b      	ldr	r2, [pc, #428]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c94:	430b      	orrs	r3, r1
 8007c96:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007ca4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007caa:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007cae:	460b      	mov	r3, r1
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	d03e      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007cbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cc0:	d022      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007cc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cc6:	d81b      	bhi.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d003      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cd0:	d00b      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007cd2:	e015      	b.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cd8:	3308      	adds	r3, #8
 8007cda:	2100      	movs	r1, #0
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f001 fb45 	bl	800936c <RCCEx_PLL2_Config>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007ce8:	e00f      	b.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cee:	3328      	adds	r3, #40	@ 0x28
 8007cf0:	2102      	movs	r1, #2
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f001 fbec 	bl	80094d0 <RCCEx_PLL3_Config>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007cfe:	e004      	b.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d06:	e000      	b.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10b      	bne.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d12:	4b4b      	ldr	r3, [pc, #300]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d16:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007d22:	4a47      	ldr	r2, [pc, #284]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d24:	430b      	orrs	r3, r1
 8007d26:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d28:	e003      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007d3e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d40:	2300      	movs	r3, #0
 8007d42:	677b      	str	r3, [r7, #116]	@ 0x74
 8007d44:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007d48:	460b      	mov	r3, r1
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	d03b      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d5a:	d01f      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007d5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d60:	d818      	bhi.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007d62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d66:	d003      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007d68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d6c:	d007      	beq.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007d6e:	e011      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d70:	4b33      	ldr	r3, [pc, #204]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d74:	4a32      	ldr	r2, [pc, #200]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007d7c:	e00f      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d82:	3328      	adds	r3, #40	@ 0x28
 8007d84:	2101      	movs	r1, #1
 8007d86:	4618      	mov	r0, r3
 8007d88:	f001 fba2 	bl	80094d0 <RCCEx_PLL3_Config>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007d92:	e004      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d9a:	e000      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007d9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10b      	bne.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007da6:	4b26      	ldr	r3, [pc, #152]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007daa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007db6:	4a22      	ldr	r2, [pc, #136]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007db8:	430b      	orrs	r3, r1
 8007dba:	6553      	str	r3, [r2, #84]	@ 0x54
 8007dbc:	e003      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dc2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dce:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007dd2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007dd8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4313      	orrs	r3, r2
 8007de0:	d034      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d003      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007dec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007df0:	d007      	beq.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8007df2:	e011      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007df4:	4b12      	ldr	r3, [pc, #72]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007df8:	4a11      	ldr	r2, [pc, #68]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007dfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e00:	e00e      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e06:	3308      	adds	r3, #8
 8007e08:	2102      	movs	r1, #2
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f001 faae 	bl	800936c <RCCEx_PLL2_Config>
 8007e10:	4603      	mov	r3, r0
 8007e12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e16:	e003      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d10d      	bne.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007e28:	4b05      	ldr	r3, [pc, #20]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e2c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e36:	4a02      	ldr	r2, [pc, #8]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e38:	430b      	orrs	r3, r1
 8007e3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007e3c:	e006      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007e3e:	bf00      	nop
 8007e40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e54:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007e58:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8007e5e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007e62:	460b      	mov	r3, r1
 8007e64:	4313      	orrs	r3, r2
 8007e66:	d00c      	beq.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e6c:	3328      	adds	r3, #40	@ 0x28
 8007e6e:	2102      	movs	r1, #2
 8007e70:	4618      	mov	r0, r3
 8007e72:	f001 fb2d 	bl	80094d0 <RCCEx_PLL3_Config>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d002      	beq.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007e8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e90:	2300      	movs	r3, #0
 8007e92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e94:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007e98:	460b      	mov	r3, r1
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	d036      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ea2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ea4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ea8:	d018      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007eaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007eae:	d811      	bhi.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007eb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007eb4:	d014      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007eb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007eba:	d80b      	bhi.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d011      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007ec0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ec4:	d106      	bne.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ec6:	4bb7      	ldr	r3, [pc, #732]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eca:	4ab6      	ldr	r2, [pc, #728]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ecc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ed0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007ed2:	e008      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007eda:	e004      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007edc:	bf00      	nop
 8007ede:	e002      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007ee0:	bf00      	nop
 8007ee2:	e000      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ee6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10a      	bne.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007eee:	4bad      	ldr	r3, [pc, #692]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ef2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007efa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007efc:	4aa9      	ldr	r2, [pc, #676]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007efe:	430b      	orrs	r3, r1
 8007f00:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f02:	e003      	b.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f14:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007f18:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f1e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007f22:	460b      	mov	r3, r1
 8007f24:	4313      	orrs	r3, r2
 8007f26:	d009      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f28:	4b9e      	ldr	r3, [pc, #632]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f2c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f36:	4a9b      	ldr	r2, [pc, #620]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f38:	430b      	orrs	r3, r1
 8007f3a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f44:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007f48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f4e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007f52:	460b      	mov	r3, r1
 8007f54:	4313      	orrs	r3, r2
 8007f56:	d009      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f58:	4b92      	ldr	r3, [pc, #584]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f5c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f66:	4a8f      	ldr	r2, [pc, #572]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f68:	430b      	orrs	r3, r1
 8007f6a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f74:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007f78:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f7e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007f82:	460b      	mov	r3, r1
 8007f84:	4313      	orrs	r3, r2
 8007f86:	d00e      	beq.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007f88:	4b86      	ldr	r3, [pc, #536]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	4a85      	ldr	r2, [pc, #532]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f8e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007f92:	6113      	str	r3, [r2, #16]
 8007f94:	4b83      	ldr	r3, [pc, #524]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f96:	6919      	ldr	r1, [r3, #16]
 8007f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007fa0:	4a80      	ldr	r2, [pc, #512]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007fa2:	430b      	orrs	r3, r1
 8007fa4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fae:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fb8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	d009      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007fc2:	4b78      	ldr	r3, [pc, #480]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fc6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fd0:	4a74      	ldr	r2, [pc, #464]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007fd2:	430b      	orrs	r3, r1
 8007fd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fde:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007fe2:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fe8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007fec:	460b      	mov	r3, r1
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	d00a      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ff2:	4b6c      	ldr	r3, [pc, #432]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ff6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008002:	4a68      	ldr	r2, [pc, #416]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008004:	430b      	orrs	r3, r1
 8008006:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800800c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008010:	2100      	movs	r1, #0
 8008012:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008014:	f003 0301 	and.w	r3, r3, #1
 8008018:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800801a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800801e:	460b      	mov	r3, r1
 8008020:	4313      	orrs	r3, r2
 8008022:	d011      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008028:	3308      	adds	r3, #8
 800802a:	2100      	movs	r1, #0
 800802c:	4618      	mov	r0, r3
 800802e:	f001 f99d 	bl	800936c <RCCEx_PLL2_Config>
 8008032:	4603      	mov	r3, r0
 8008034:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008038:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800803c:	2b00      	cmp	r3, #0
 800803e:	d003      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008040:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008044:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800804c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008050:	2100      	movs	r1, #0
 8008052:	6239      	str	r1, [r7, #32]
 8008054:	f003 0302 	and.w	r3, r3, #2
 8008058:	627b      	str	r3, [r7, #36]	@ 0x24
 800805a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800805e:	460b      	mov	r3, r1
 8008060:	4313      	orrs	r3, r2
 8008062:	d011      	beq.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008068:	3308      	adds	r3, #8
 800806a:	2101      	movs	r1, #1
 800806c:	4618      	mov	r0, r3
 800806e:	f001 f97d 	bl	800936c <RCCEx_PLL2_Config>
 8008072:	4603      	mov	r3, r0
 8008074:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008078:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800807c:	2b00      	cmp	r3, #0
 800807e:	d003      	beq.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008080:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008084:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800808c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008090:	2100      	movs	r1, #0
 8008092:	61b9      	str	r1, [r7, #24]
 8008094:	f003 0304 	and.w	r3, r3, #4
 8008098:	61fb      	str	r3, [r7, #28]
 800809a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800809e:	460b      	mov	r3, r1
 80080a0:	4313      	orrs	r3, r2
 80080a2:	d011      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080a8:	3308      	adds	r3, #8
 80080aa:	2102      	movs	r1, #2
 80080ac:	4618      	mov	r0, r3
 80080ae:	f001 f95d 	bl	800936c <RCCEx_PLL2_Config>
 80080b2:	4603      	mov	r3, r0
 80080b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80080b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d003      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80080c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d0:	2100      	movs	r1, #0
 80080d2:	6139      	str	r1, [r7, #16]
 80080d4:	f003 0308 	and.w	r3, r3, #8
 80080d8:	617b      	str	r3, [r7, #20]
 80080da:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80080de:	460b      	mov	r3, r1
 80080e0:	4313      	orrs	r3, r2
 80080e2:	d011      	beq.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080e8:	3328      	adds	r3, #40	@ 0x28
 80080ea:	2100      	movs	r1, #0
 80080ec:	4618      	mov	r0, r3
 80080ee:	f001 f9ef 	bl	80094d0 <RCCEx_PLL3_Config>
 80080f2:	4603      	mov	r3, r0
 80080f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80080f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d003      	beq.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008100:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008104:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800810c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008110:	2100      	movs	r1, #0
 8008112:	60b9      	str	r1, [r7, #8]
 8008114:	f003 0310 	and.w	r3, r3, #16
 8008118:	60fb      	str	r3, [r7, #12]
 800811a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800811e:	460b      	mov	r3, r1
 8008120:	4313      	orrs	r3, r2
 8008122:	d011      	beq.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008128:	3328      	adds	r3, #40	@ 0x28
 800812a:	2101      	movs	r1, #1
 800812c:	4618      	mov	r0, r3
 800812e:	f001 f9cf 	bl	80094d0 <RCCEx_PLL3_Config>
 8008132:	4603      	mov	r3, r0
 8008134:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008138:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800813c:	2b00      	cmp	r3, #0
 800813e:	d003      	beq.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008140:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008144:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800814c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008150:	2100      	movs	r1, #0
 8008152:	6039      	str	r1, [r7, #0]
 8008154:	f003 0320 	and.w	r3, r3, #32
 8008158:	607b      	str	r3, [r7, #4]
 800815a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800815e:	460b      	mov	r3, r1
 8008160:	4313      	orrs	r3, r2
 8008162:	d011      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008168:	3328      	adds	r3, #40	@ 0x28
 800816a:	2102      	movs	r1, #2
 800816c:	4618      	mov	r0, r3
 800816e:	f001 f9af 	bl	80094d0 <RCCEx_PLL3_Config>
 8008172:	4603      	mov	r3, r0
 8008174:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008178:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800817c:	2b00      	cmp	r3, #0
 800817e:	d003      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008180:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008184:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8008188:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800818c:	2b00      	cmp	r3, #0
 800818e:	d101      	bne.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8008190:	2300      	movs	r3, #0
 8008192:	e000      	b.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
}
 8008196:	4618      	mov	r0, r3
 8008198:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800819c:	46bd      	mov	sp, r7
 800819e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081a2:	bf00      	nop
 80081a4:	58024400 	.word	0x58024400

080081a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b090      	sub	sp, #64	@ 0x40
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80081b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081b6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80081ba:	430b      	orrs	r3, r1
 80081bc:	f040 8094 	bne.w	80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80081c0:	4b9b      	ldr	r3, [pc, #620]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80081c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081c4:	f003 0307 	and.w	r3, r3, #7
 80081c8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80081ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081cc:	2b04      	cmp	r3, #4
 80081ce:	f200 8087 	bhi.w	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80081d2:	a201      	add	r2, pc, #4	@ (adr r2, 80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80081d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d8:	080081ed 	.word	0x080081ed
 80081dc:	08008215 	.word	0x08008215
 80081e0:	0800823d 	.word	0x0800823d
 80081e4:	080082d9 	.word	0x080082d9
 80081e8:	08008265 	.word	0x08008265
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80081ec:	4b90      	ldr	r3, [pc, #576]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081f8:	d108      	bne.n	800820c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80081fe:	4618      	mov	r0, r3
 8008200:	f000 ff62 	bl	80090c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008208:	f000 bc93 	b.w	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800820c:	2300      	movs	r3, #0
 800820e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008210:	f000 bc8f 	b.w	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008214:	4b86      	ldr	r3, [pc, #536]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800821c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008220:	d108      	bne.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008222:	f107 0318 	add.w	r3, r7, #24
 8008226:	4618      	mov	r0, r3
 8008228:	f000 fca6 	bl	8008b78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008230:	f000 bc7f 	b.w	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008234:	2300      	movs	r3, #0
 8008236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008238:	f000 bc7b 	b.w	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800823c:	4b7c      	ldr	r3, [pc, #496]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008244:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008248:	d108      	bne.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800824a:	f107 030c 	add.w	r3, r7, #12
 800824e:	4618      	mov	r0, r3
 8008250:	f000 fde6 	bl	8008e20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008258:	f000 bc6b 	b.w	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800825c:	2300      	movs	r3, #0
 800825e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008260:	f000 bc67 	b.w	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008264:	4b72      	ldr	r3, [pc, #456]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008268:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800826c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800826e:	4b70      	ldr	r3, [pc, #448]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 0304 	and.w	r3, r3, #4
 8008276:	2b04      	cmp	r3, #4
 8008278:	d10c      	bne.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800827a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800827c:	2b00      	cmp	r3, #0
 800827e:	d109      	bne.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008280:	4b6b      	ldr	r3, [pc, #428]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	08db      	lsrs	r3, r3, #3
 8008286:	f003 0303 	and.w	r3, r3, #3
 800828a:	4a6a      	ldr	r2, [pc, #424]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800828c:	fa22 f303 	lsr.w	r3, r2, r3
 8008290:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008292:	e01f      	b.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008294:	4b66      	ldr	r3, [pc, #408]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800829c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082a0:	d106      	bne.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80082a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082a8:	d102      	bne.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80082aa:	4b63      	ldr	r3, [pc, #396]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80082ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082ae:	e011      	b.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082b0:	4b5f      	ldr	r3, [pc, #380]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082bc:	d106      	bne.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80082be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082c4:	d102      	bne.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80082c6:	4b5d      	ldr	r3, [pc, #372]	@ (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082ca:	e003      	b.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80082cc:	2300      	movs	r3, #0
 80082ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80082d0:	f000 bc2f 	b.w	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80082d4:	f000 bc2d 	b.w	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80082d8:	4b59      	ldr	r3, [pc, #356]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80082da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082dc:	f000 bc29 	b.w	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80082e0:	2300      	movs	r3, #0
 80082e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082e4:	f000 bc25 	b.w	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80082e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082ec:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80082f0:	430b      	orrs	r3, r1
 80082f2:	f040 80a7 	bne.w	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80082f6:	4b4e      	ldr	r3, [pc, #312]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80082f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082fa:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80082fe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008302:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008306:	d054      	beq.n	80083b2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800830a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800830e:	f200 808b 	bhi.w	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008314:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008318:	f000 8083 	beq.w	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800831c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800831e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008322:	f200 8081 	bhi.w	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008328:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800832c:	d02f      	beq.n	800838e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800832e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008330:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008334:	d878      	bhi.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008338:	2b00      	cmp	r3, #0
 800833a:	d004      	beq.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800833c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800833e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008342:	d012      	beq.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8008344:	e070      	b.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008346:	4b3a      	ldr	r3, [pc, #232]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800834e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008352:	d107      	bne.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008354:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008358:	4618      	mov	r0, r3
 800835a:	f000 feb5 	bl	80090c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800835e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008362:	e3e6      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008364:	2300      	movs	r3, #0
 8008366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008368:	e3e3      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800836a:	4b31      	ldr	r3, [pc, #196]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008372:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008376:	d107      	bne.n	8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008378:	f107 0318 	add.w	r3, r7, #24
 800837c:	4618      	mov	r0, r3
 800837e:	f000 fbfb 	bl	8008b78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008386:	e3d4      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008388:	2300      	movs	r3, #0
 800838a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800838c:	e3d1      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800838e:	4b28      	ldr	r3, [pc, #160]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008396:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800839a:	d107      	bne.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800839c:	f107 030c 	add.w	r3, r7, #12
 80083a0:	4618      	mov	r0, r3
 80083a2:	f000 fd3d 	bl	8008e20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083aa:	e3c2      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083ac:	2300      	movs	r3, #0
 80083ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083b0:	e3bf      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083b2:	4b1f      	ldr	r3, [pc, #124]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80083b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80083ba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083bc:	4b1c      	ldr	r3, [pc, #112]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 0304 	and.w	r3, r3, #4
 80083c4:	2b04      	cmp	r3, #4
 80083c6:	d10c      	bne.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80083c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d109      	bne.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083ce:	4b18      	ldr	r3, [pc, #96]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	08db      	lsrs	r3, r3, #3
 80083d4:	f003 0303 	and.w	r3, r3, #3
 80083d8:	4a16      	ldr	r2, [pc, #88]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80083da:	fa22 f303 	lsr.w	r3, r2, r3
 80083de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083e0:	e01e      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083e2:	4b13      	ldr	r3, [pc, #76]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083ee:	d106      	bne.n	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80083f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083f6:	d102      	bne.n	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80083f8:	4b0f      	ldr	r3, [pc, #60]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80083fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083fc:	e010      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083fe:	4b0c      	ldr	r3, [pc, #48]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008406:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800840a:	d106      	bne.n	800841a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800840c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800840e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008412:	d102      	bne.n	800841a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008414:	4b09      	ldr	r3, [pc, #36]	@ (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008416:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008418:	e002      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800841a:	2300      	movs	r3, #0
 800841c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800841e:	e388      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008420:	e387      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008422:	4b07      	ldr	r3, [pc, #28]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008426:	e384      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008428:	2300      	movs	r3, #0
 800842a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800842c:	e381      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800842e:	bf00      	nop
 8008430:	58024400 	.word	0x58024400
 8008434:	03d09000 	.word	0x03d09000
 8008438:	003d0900 	.word	0x003d0900
 800843c:	016e3600 	.word	0x016e3600
 8008440:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008444:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008448:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800844c:	430b      	orrs	r3, r1
 800844e:	f040 809c 	bne.w	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008452:	4b9e      	ldr	r3, [pc, #632]	@ (80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008456:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800845a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800845c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008462:	d054      	beq.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008466:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800846a:	f200 808b 	bhi.w	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800846e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008470:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008474:	f000 8083 	beq.w	800857e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8008478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800847e:	f200 8081 	bhi.w	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008484:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008488:	d02f      	beq.n	80084ea <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800848a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008490:	d878      	bhi.n	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008494:	2b00      	cmp	r3, #0
 8008496:	d004      	beq.n	80084a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800849e:	d012      	beq.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80084a0:	e070      	b.n	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084a2:	4b8a      	ldr	r3, [pc, #552]	@ (80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084ae:	d107      	bne.n	80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80084b4:	4618      	mov	r0, r3
 80084b6:	f000 fe07 	bl	80090c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084be:	e338      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084c0:	2300      	movs	r3, #0
 80084c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084c4:	e335      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084c6:	4b81      	ldr	r3, [pc, #516]	@ (80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084d2:	d107      	bne.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084d4:	f107 0318 	add.w	r3, r7, #24
 80084d8:	4618      	mov	r0, r3
 80084da:	f000 fb4d 	bl	8008b78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084e2:	e326      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084e4:	2300      	movs	r3, #0
 80084e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084e8:	e323      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084ea:	4b78      	ldr	r3, [pc, #480]	@ (80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084f6:	d107      	bne.n	8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084f8:	f107 030c 	add.w	r3, r7, #12
 80084fc:	4618      	mov	r0, r3
 80084fe:	f000 fc8f 	bl	8008e20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008506:	e314      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008508:	2300      	movs	r3, #0
 800850a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800850c:	e311      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800850e:	4b6f      	ldr	r3, [pc, #444]	@ (80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008512:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008516:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008518:	4b6c      	ldr	r3, [pc, #432]	@ (80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 0304 	and.w	r3, r3, #4
 8008520:	2b04      	cmp	r3, #4
 8008522:	d10c      	bne.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008526:	2b00      	cmp	r3, #0
 8008528:	d109      	bne.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800852a:	4b68      	ldr	r3, [pc, #416]	@ (80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	08db      	lsrs	r3, r3, #3
 8008530:	f003 0303 	and.w	r3, r3, #3
 8008534:	4a66      	ldr	r2, [pc, #408]	@ (80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008536:	fa22 f303 	lsr.w	r3, r2, r3
 800853a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800853c:	e01e      	b.n	800857c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800853e:	4b63      	ldr	r3, [pc, #396]	@ (80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800854a:	d106      	bne.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800854c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800854e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008552:	d102      	bne.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008554:	4b5f      	ldr	r3, [pc, #380]	@ (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008556:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008558:	e010      	b.n	800857c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800855a:	4b5c      	ldr	r3, [pc, #368]	@ (80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008562:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008566:	d106      	bne.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800856a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800856e:	d102      	bne.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008570:	4b59      	ldr	r3, [pc, #356]	@ (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008572:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008574:	e002      	b.n	800857c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008576:	2300      	movs	r3, #0
 8008578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800857a:	e2da      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800857c:	e2d9      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800857e:	4b57      	ldr	r3, [pc, #348]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008580:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008582:	e2d6      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008584:	2300      	movs	r3, #0
 8008586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008588:	e2d3      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800858a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800858e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008592:	430b      	orrs	r3, r1
 8008594:	f040 80a7 	bne.w	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008598:	4b4c      	ldr	r3, [pc, #304]	@ (80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800859a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800859c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80085a0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80085a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085a8:	d055      	beq.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80085aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085b0:	f200 8096 	bhi.w	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80085b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80085ba:	f000 8084 	beq.w	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80085be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80085c4:	f200 808c 	bhi.w	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80085c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085ce:	d030      	beq.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80085d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085d6:	f200 8083 	bhi.w	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80085da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d004      	beq.n	80085ea <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80085e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085e6:	d012      	beq.n	800860e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80085e8:	e07a      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80085ea:	4b38      	ldr	r3, [pc, #224]	@ (80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085f6:	d107      	bne.n	8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085fc:	4618      	mov	r0, r3
 80085fe:	f000 fd63 	bl	80090c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008604:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008606:	e294      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008608:	2300      	movs	r3, #0
 800860a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800860c:	e291      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800860e:	4b2f      	ldr	r3, [pc, #188]	@ (80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008616:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800861a:	d107      	bne.n	800862c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800861c:	f107 0318 	add.w	r3, r7, #24
 8008620:	4618      	mov	r0, r3
 8008622:	f000 faa9 	bl	8008b78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800862a:	e282      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800862c:	2300      	movs	r3, #0
 800862e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008630:	e27f      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008632:	4b26      	ldr	r3, [pc, #152]	@ (80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800863a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800863e:	d107      	bne.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008640:	f107 030c 	add.w	r3, r7, #12
 8008644:	4618      	mov	r0, r3
 8008646:	f000 fbeb 	bl	8008e20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800864e:	e270      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008650:	2300      	movs	r3, #0
 8008652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008654:	e26d      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008656:	4b1d      	ldr	r3, [pc, #116]	@ (80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800865a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800865e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008660:	4b1a      	ldr	r3, [pc, #104]	@ (80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 0304 	and.w	r3, r3, #4
 8008668:	2b04      	cmp	r3, #4
 800866a:	d10c      	bne.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800866c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800866e:	2b00      	cmp	r3, #0
 8008670:	d109      	bne.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008672:	4b16      	ldr	r3, [pc, #88]	@ (80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	08db      	lsrs	r3, r3, #3
 8008678:	f003 0303 	and.w	r3, r3, #3
 800867c:	4a14      	ldr	r2, [pc, #80]	@ (80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800867e:	fa22 f303 	lsr.w	r3, r2, r3
 8008682:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008684:	e01e      	b.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008686:	4b11      	ldr	r3, [pc, #68]	@ (80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800868e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008692:	d106      	bne.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008696:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800869a:	d102      	bne.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800869c:	4b0d      	ldr	r3, [pc, #52]	@ (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800869e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086a0:	e010      	b.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086a2:	4b0a      	ldr	r3, [pc, #40]	@ (80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086ae:	d106      	bne.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80086b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086b6:	d102      	bne.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80086b8:	4b07      	ldr	r3, [pc, #28]	@ (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086bc:	e002      	b.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80086be:	2300      	movs	r3, #0
 80086c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80086c2:	e236      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80086c4:	e235      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80086c6:	4b05      	ldr	r3, [pc, #20]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80086c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086ca:	e232      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80086cc:	58024400 	.word	0x58024400
 80086d0:	03d09000 	.word	0x03d09000
 80086d4:	003d0900 	.word	0x003d0900
 80086d8:	016e3600 	.word	0x016e3600
 80086dc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80086e0:	2300      	movs	r3, #0
 80086e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086e4:	e225      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80086e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086ea:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80086ee:	430b      	orrs	r3, r1
 80086f0:	f040 8085 	bne.w	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80086f4:	4b9c      	ldr	r3, [pc, #624]	@ (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80086f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086f8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80086fc:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80086fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008700:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008704:	d06b      	beq.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008708:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800870c:	d874      	bhi.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800870e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008710:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008714:	d056      	beq.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8008716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008718:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800871c:	d86c      	bhi.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800871e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008720:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008724:	d03b      	beq.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008728:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800872c:	d864      	bhi.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800872e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008730:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008734:	d021      	beq.n	800877a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008738:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800873c:	d85c      	bhi.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800873e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008740:	2b00      	cmp	r3, #0
 8008742:	d004      	beq.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8008744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008746:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800874a:	d004      	beq.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800874c:	e054      	b.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800874e:	f7fe fb5f 	bl	8006e10 <HAL_RCC_GetPCLK1Freq>
 8008752:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008754:	e1ed      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008756:	4b84      	ldr	r3, [pc, #528]	@ (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800875e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008762:	d107      	bne.n	8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008764:	f107 0318 	add.w	r3, r7, #24
 8008768:	4618      	mov	r0, r3
 800876a:	f000 fa05 	bl	8008b78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008772:	e1de      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008774:	2300      	movs	r3, #0
 8008776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008778:	e1db      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800877a:	4b7b      	ldr	r3, [pc, #492]	@ (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008782:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008786:	d107      	bne.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008788:	f107 030c 	add.w	r3, r7, #12
 800878c:	4618      	mov	r0, r3
 800878e:	f000 fb47 	bl	8008e20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008796:	e1cc      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008798:	2300      	movs	r3, #0
 800879a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800879c:	e1c9      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800879e:	4b72      	ldr	r3, [pc, #456]	@ (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 0304 	and.w	r3, r3, #4
 80087a6:	2b04      	cmp	r3, #4
 80087a8:	d109      	bne.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087aa:	4b6f      	ldr	r3, [pc, #444]	@ (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	08db      	lsrs	r3, r3, #3
 80087b0:	f003 0303 	and.w	r3, r3, #3
 80087b4:	4a6d      	ldr	r2, [pc, #436]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80087b6:	fa22 f303 	lsr.w	r3, r2, r3
 80087ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087bc:	e1b9      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80087be:	2300      	movs	r3, #0
 80087c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087c2:	e1b6      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80087c4:	4b68      	ldr	r3, [pc, #416]	@ (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087d0:	d102      	bne.n	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80087d2:	4b67      	ldr	r3, [pc, #412]	@ (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80087d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087d6:	e1ac      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80087d8:	2300      	movs	r3, #0
 80087da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087dc:	e1a9      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80087de:	4b62      	ldr	r3, [pc, #392]	@ (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087ea:	d102      	bne.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80087ec:	4b61      	ldr	r3, [pc, #388]	@ (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80087ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087f0:	e19f      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80087f2:	2300      	movs	r3, #0
 80087f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087f6:	e19c      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80087f8:	2300      	movs	r3, #0
 80087fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087fc:	e199      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80087fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008802:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008806:	430b      	orrs	r3, r1
 8008808:	d173      	bne.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800880a:	4b57      	ldr	r3, [pc, #348]	@ (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800880c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800880e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008812:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008816:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800881a:	d02f      	beq.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800881c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800881e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008822:	d863      	bhi.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8008824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008826:	2b00      	cmp	r3, #0
 8008828:	d004      	beq.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800882a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800882c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008830:	d012      	beq.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8008832:	e05b      	b.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008834:	4b4c      	ldr	r3, [pc, #304]	@ (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800883c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008840:	d107      	bne.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008842:	f107 0318 	add.w	r3, r7, #24
 8008846:	4618      	mov	r0, r3
 8008848:	f000 f996 	bl	8008b78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008850:	e16f      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008852:	2300      	movs	r3, #0
 8008854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008856:	e16c      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008858:	4b43      	ldr	r3, [pc, #268]	@ (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008860:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008864:	d107      	bne.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008866:	f107 030c 	add.w	r3, r7, #12
 800886a:	4618      	mov	r0, r3
 800886c:	f000 fad8 	bl	8008e20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008874:	e15d      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008876:	2300      	movs	r3, #0
 8008878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800887a:	e15a      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800887c:	4b3a      	ldr	r3, [pc, #232]	@ (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800887e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008880:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008884:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008886:	4b38      	ldr	r3, [pc, #224]	@ (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 0304 	and.w	r3, r3, #4
 800888e:	2b04      	cmp	r3, #4
 8008890:	d10c      	bne.n	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008894:	2b00      	cmp	r3, #0
 8008896:	d109      	bne.n	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008898:	4b33      	ldr	r3, [pc, #204]	@ (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	08db      	lsrs	r3, r3, #3
 800889e:	f003 0303 	and.w	r3, r3, #3
 80088a2:	4a32      	ldr	r2, [pc, #200]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80088a4:	fa22 f303 	lsr.w	r3, r2, r3
 80088a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088aa:	e01e      	b.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088ac:	4b2e      	ldr	r3, [pc, #184]	@ (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088b8:	d106      	bne.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80088ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088c0:	d102      	bne.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80088c2:	4b2b      	ldr	r3, [pc, #172]	@ (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80088c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088c6:	e010      	b.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088c8:	4b27      	ldr	r3, [pc, #156]	@ (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088d4:	d106      	bne.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80088d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088dc:	d102      	bne.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80088de:	4b25      	ldr	r3, [pc, #148]	@ (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80088e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088e2:	e002      	b.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80088e4:	2300      	movs	r3, #0
 80088e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80088e8:	e123      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80088ea:	e122      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80088ec:	2300      	movs	r3, #0
 80088ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088f0:	e11f      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80088f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088f6:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80088fa:	430b      	orrs	r3, r1
 80088fc:	d13c      	bne.n	8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80088fe:	4b1a      	ldr	r3, [pc, #104]	@ (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008902:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008906:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800890a:	2b00      	cmp	r3, #0
 800890c:	d004      	beq.n	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800890e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008914:	d012      	beq.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8008916:	e023      	b.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008918:	4b13      	ldr	r3, [pc, #76]	@ (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008920:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008924:	d107      	bne.n	8008936 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008926:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800892a:	4618      	mov	r0, r3
 800892c:	f000 fbcc 	bl	80090c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008934:	e0fd      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008936:	2300      	movs	r3, #0
 8008938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800893a:	e0fa      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800893c:	4b0a      	ldr	r3, [pc, #40]	@ (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008944:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008948:	d107      	bne.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800894a:	f107 0318 	add.w	r3, r7, #24
 800894e:	4618      	mov	r0, r3
 8008950:	f000 f912 	bl	8008b78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008954:	6a3b      	ldr	r3, [r7, #32]
 8008956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008958:	e0eb      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800895a:	2300      	movs	r3, #0
 800895c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800895e:	e0e8      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008960:	2300      	movs	r3, #0
 8008962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008964:	e0e5      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008966:	bf00      	nop
 8008968:	58024400 	.word	0x58024400
 800896c:	03d09000 	.word	0x03d09000
 8008970:	003d0900 	.word	0x003d0900
 8008974:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008978:	e9d7 2300 	ldrd	r2, r3, [r7]
 800897c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008980:	430b      	orrs	r3, r1
 8008982:	f040 8085 	bne.w	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008986:	4b6d      	ldr	r3, [pc, #436]	@ (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800898a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800898e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008992:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008996:	d06b      	beq.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800899a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800899e:	d874      	bhi.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80089a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089a6:	d056      	beq.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80089a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089ae:	d86c      	bhi.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80089b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80089b6:	d03b      	beq.n	8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 80089b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80089be:	d864      	bhi.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80089c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089c6:	d021      	beq.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80089c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089ce:	d85c      	bhi.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80089d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d004      	beq.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80089d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089dc:	d004      	beq.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80089de:	e054      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80089e0:	f000 f8b4 	bl	8008b4c <HAL_RCCEx_GetD3PCLK1Freq>
 80089e4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80089e6:	e0a4      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089e8:	4b54      	ldr	r3, [pc, #336]	@ (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089f4:	d107      	bne.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089f6:	f107 0318 	add.w	r3, r7, #24
 80089fa:	4618      	mov	r0, r3
 80089fc:	f000 f8bc 	bl	8008b78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a04:	e095      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a06:	2300      	movs	r3, #0
 8008a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a0a:	e092      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a0c:	4b4b      	ldr	r3, [pc, #300]	@ (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a18:	d107      	bne.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a1a:	f107 030c 	add.w	r3, r7, #12
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f000 f9fe 	bl	8008e20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a28:	e083      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a2e:	e080      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a30:	4b42      	ldr	r3, [pc, #264]	@ (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 0304 	and.w	r3, r3, #4
 8008a38:	2b04      	cmp	r3, #4
 8008a3a:	d109      	bne.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a3c:	4b3f      	ldr	r3, [pc, #252]	@ (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	08db      	lsrs	r3, r3, #3
 8008a42:	f003 0303 	and.w	r3, r3, #3
 8008a46:	4a3e      	ldr	r2, [pc, #248]	@ (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008a48:	fa22 f303 	lsr.w	r3, r2, r3
 8008a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a4e:	e070      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a50:	2300      	movs	r3, #0
 8008a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a54:	e06d      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008a56:	4b39      	ldr	r3, [pc, #228]	@ (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a62:	d102      	bne.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008a64:	4b37      	ldr	r3, [pc, #220]	@ (8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a68:	e063      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a6e:	e060      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008a70:	4b32      	ldr	r3, [pc, #200]	@ (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a7c:	d102      	bne.n	8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8008a7e:	4b32      	ldr	r3, [pc, #200]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a82:	e056      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a84:	2300      	movs	r3, #0
 8008a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a88:	e053      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a8e:	e050      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008a90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a94:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008a98:	430b      	orrs	r3, r1
 8008a9a:	d148      	bne.n	8008b2e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008a9c:	4b27      	ldr	r3, [pc, #156]	@ (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008a9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008aa0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008aa4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008aac:	d02a      	beq.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ab4:	d838      	bhi.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d004      	beq.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008abe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ac2:	d00d      	beq.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008ac4:	e030      	b.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ace:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ad2:	d102      	bne.n	8008ada <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8008ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ad8:	e02b      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ada:	2300      	movs	r3, #0
 8008adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ade:	e028      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ae0:	4b16      	ldr	r3, [pc, #88]	@ (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ae8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008aec:	d107      	bne.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008aee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008af2:	4618      	mov	r0, r3
 8008af4:	f000 fae8 	bl	80090c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008afc:	e019      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008afe:	2300      	movs	r3, #0
 8008b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b02:	e016      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b04:	4b0d      	ldr	r3, [pc, #52]	@ (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b10:	d107      	bne.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b12:	f107 0318 	add.w	r3, r7, #24
 8008b16:	4618      	mov	r0, r3
 8008b18:	f000 f82e 	bl	8008b78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b20:	e007      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b22:	2300      	movs	r3, #0
 8008b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b26:	e004      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b2c:	e001      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3740      	adds	r7, #64	@ 0x40
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	58024400 	.word	0x58024400
 8008b40:	03d09000 	.word	0x03d09000
 8008b44:	003d0900 	.word	0x003d0900
 8008b48:	016e3600 	.word	0x016e3600

08008b4c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008b50:	f7fe f92e 	bl	8006db0 <HAL_RCC_GetHCLKFreq>
 8008b54:	4602      	mov	r2, r0
 8008b56:	4b06      	ldr	r3, [pc, #24]	@ (8008b70 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008b58:	6a1b      	ldr	r3, [r3, #32]
 8008b5a:	091b      	lsrs	r3, r3, #4
 8008b5c:	f003 0307 	and.w	r3, r3, #7
 8008b60:	4904      	ldr	r1, [pc, #16]	@ (8008b74 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008b62:	5ccb      	ldrb	r3, [r1, r3]
 8008b64:	f003 031f 	and.w	r3, r3, #31
 8008b68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	58024400 	.word	0x58024400
 8008b74:	0800b634 	.word	0x0800b634

08008b78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b089      	sub	sp, #36	@ 0x24
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b80:	4ba1      	ldr	r3, [pc, #644]	@ (8008e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b84:	f003 0303 	and.w	r3, r3, #3
 8008b88:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008b8a:	4b9f      	ldr	r3, [pc, #636]	@ (8008e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b8e:	0b1b      	lsrs	r3, r3, #12
 8008b90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b94:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008b96:	4b9c      	ldr	r3, [pc, #624]	@ (8008e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b9a:	091b      	lsrs	r3, r3, #4
 8008b9c:	f003 0301 	and.w	r3, r3, #1
 8008ba0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008ba2:	4b99      	ldr	r3, [pc, #612]	@ (8008e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ba6:	08db      	lsrs	r3, r3, #3
 8008ba8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008bac:	693a      	ldr	r2, [r7, #16]
 8008bae:	fb02 f303 	mul.w	r3, r2, r3
 8008bb2:	ee07 3a90 	vmov	s15, r3
 8008bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	f000 8111 	beq.w	8008de8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	f000 8083 	beq.w	8008cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	f200 80a1 	bhi.w	8008d18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d003      	beq.n	8008be4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d056      	beq.n	8008c90 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008be2:	e099      	b.n	8008d18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008be4:	4b88      	ldr	r3, [pc, #544]	@ (8008e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 0320 	and.w	r3, r3, #32
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d02d      	beq.n	8008c4c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bf0:	4b85      	ldr	r3, [pc, #532]	@ (8008e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	08db      	lsrs	r3, r3, #3
 8008bf6:	f003 0303 	and.w	r3, r3, #3
 8008bfa:	4a84      	ldr	r2, [pc, #528]	@ (8008e0c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8008c00:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	ee07 3a90 	vmov	s15, r3
 8008c08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	ee07 3a90 	vmov	s15, r3
 8008c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c1a:	4b7b      	ldr	r3, [pc, #492]	@ (8008e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c22:	ee07 3a90 	vmov	s15, r3
 8008c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c2e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008e10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008c4a:	e087      	b.n	8008d5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	ee07 3a90 	vmov	s15, r3
 8008c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c56:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008e14 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c5e:	4b6a      	ldr	r3, [pc, #424]	@ (8008e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c66:	ee07 3a90 	vmov	s15, r3
 8008c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c72:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008e10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c8e:	e065      	b.n	8008d5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	ee07 3a90 	vmov	s15, r3
 8008c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c9a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008e18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ca2:	4b59      	ldr	r3, [pc, #356]	@ (8008e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008caa:	ee07 3a90 	vmov	s15, r3
 8008cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cb6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008e10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cd2:	e043      	b.n	8008d5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	ee07 3a90 	vmov	s15, r3
 8008cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cde:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ce6:	4b48      	ldr	r3, [pc, #288]	@ (8008e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cee:	ee07 3a90 	vmov	s15, r3
 8008cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cfa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008e10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d16:	e021      	b.n	8008d5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	ee07 3a90 	vmov	s15, r3
 8008d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d22:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008e18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d2a:	4b37      	ldr	r3, [pc, #220]	@ (8008e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d32:	ee07 3a90 	vmov	s15, r3
 8008d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d3e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008e10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d5a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8008e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d60:	0a5b      	lsrs	r3, r3, #9
 8008d62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d66:	ee07 3a90 	vmov	s15, r3
 8008d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d76:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d82:	ee17 2a90 	vmov	r2, s15
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008d8a:	4b1f      	ldr	r3, [pc, #124]	@ (8008e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d8e:	0c1b      	lsrs	r3, r3, #16
 8008d90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d94:	ee07 3a90 	vmov	s15, r3
 8008d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008da0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008da4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008db0:	ee17 2a90 	vmov	r2, s15
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008db8:	4b13      	ldr	r3, [pc, #76]	@ (8008e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dbc:	0e1b      	lsrs	r3, r3, #24
 8008dbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dc2:	ee07 3a90 	vmov	s15, r3
 8008dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008dce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dde:	ee17 2a90 	vmov	r2, s15
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008de6:	e008      	b.n	8008dfa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2200      	movs	r2, #0
 8008df2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	609a      	str	r2, [r3, #8]
}
 8008dfa:	bf00      	nop
 8008dfc:	3724      	adds	r7, #36	@ 0x24
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	58024400 	.word	0x58024400
 8008e0c:	03d09000 	.word	0x03d09000
 8008e10:	46000000 	.word	0x46000000
 8008e14:	4c742400 	.word	0x4c742400
 8008e18:	4a742400 	.word	0x4a742400
 8008e1c:	4bb71b00 	.word	0x4bb71b00

08008e20 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b089      	sub	sp, #36	@ 0x24
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e28:	4ba1      	ldr	r3, [pc, #644]	@ (80090b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e2c:	f003 0303 	and.w	r3, r3, #3
 8008e30:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008e32:	4b9f      	ldr	r3, [pc, #636]	@ (80090b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e36:	0d1b      	lsrs	r3, r3, #20
 8008e38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e3c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008e3e:	4b9c      	ldr	r3, [pc, #624]	@ (80090b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e42:	0a1b      	lsrs	r3, r3, #8
 8008e44:	f003 0301 	and.w	r3, r3, #1
 8008e48:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008e4a:	4b99      	ldr	r3, [pc, #612]	@ (80090b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e4e:	08db      	lsrs	r3, r3, #3
 8008e50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e54:	693a      	ldr	r2, [r7, #16]
 8008e56:	fb02 f303 	mul.w	r3, r2, r3
 8008e5a:	ee07 3a90 	vmov	s15, r3
 8008e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f000 8111 	beq.w	8009090 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	f000 8083 	beq.w	8008f7c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	f200 80a1 	bhi.w	8008fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d003      	beq.n	8008e8c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d056      	beq.n	8008f38 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008e8a:	e099      	b.n	8008fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e8c:	4b88      	ldr	r3, [pc, #544]	@ (80090b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f003 0320 	and.w	r3, r3, #32
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d02d      	beq.n	8008ef4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e98:	4b85      	ldr	r3, [pc, #532]	@ (80090b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	08db      	lsrs	r3, r3, #3
 8008e9e:	f003 0303 	and.w	r3, r3, #3
 8008ea2:	4a84      	ldr	r2, [pc, #528]	@ (80090b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ea8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	ee07 3a90 	vmov	s15, r3
 8008eb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	ee07 3a90 	vmov	s15, r3
 8008eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ec2:	4b7b      	ldr	r3, [pc, #492]	@ (80090b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eca:	ee07 3a90 	vmov	s15, r3
 8008ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ed2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ed6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80090b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ee2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008ef2:	e087      	b.n	8009004 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	ee07 3a90 	vmov	s15, r3
 8008efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008efe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80090bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f06:	4b6a      	ldr	r3, [pc, #424]	@ (80090b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f0e:	ee07 3a90 	vmov	s15, r3
 8008f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f16:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f1a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80090b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f36:	e065      	b.n	8009004 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	ee07 3a90 	vmov	s15, r3
 8008f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f42:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80090c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f4a:	4b59      	ldr	r3, [pc, #356]	@ (80090b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f52:	ee07 3a90 	vmov	s15, r3
 8008f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f5e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80090b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f7a:	e043      	b.n	8009004 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	ee07 3a90 	vmov	s15, r3
 8008f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f86:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80090c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f8e:	4b48      	ldr	r3, [pc, #288]	@ (80090b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f96:	ee07 3a90 	vmov	s15, r3
 8008f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fa2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80090b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fbe:	e021      	b.n	8009004 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	ee07 3a90 	vmov	s15, r3
 8008fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80090c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fd2:	4b37      	ldr	r3, [pc, #220]	@ (80090b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fda:	ee07 3a90 	vmov	s15, r3
 8008fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fe2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fe6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80090b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ff2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ffe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009002:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009004:	4b2a      	ldr	r3, [pc, #168]	@ (80090b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009008:	0a5b      	lsrs	r3, r3, #9
 800900a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800900e:	ee07 3a90 	vmov	s15, r3
 8009012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009016:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800901a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800901e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009022:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800902a:	ee17 2a90 	vmov	r2, s15
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009032:	4b1f      	ldr	r3, [pc, #124]	@ (80090b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009036:	0c1b      	lsrs	r3, r3, #16
 8009038:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800903c:	ee07 3a90 	vmov	s15, r3
 8009040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009044:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009048:	ee37 7a87 	vadd.f32	s14, s15, s14
 800904c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009050:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009054:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009058:	ee17 2a90 	vmov	r2, s15
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009060:	4b13      	ldr	r3, [pc, #76]	@ (80090b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009064:	0e1b      	lsrs	r3, r3, #24
 8009066:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800906a:	ee07 3a90 	vmov	s15, r3
 800906e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009072:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009076:	ee37 7a87 	vadd.f32	s14, s15, s14
 800907a:	edd7 6a07 	vldr	s13, [r7, #28]
 800907e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009086:	ee17 2a90 	vmov	r2, s15
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800908e:	e008      	b.n	80090a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	609a      	str	r2, [r3, #8]
}
 80090a2:	bf00      	nop
 80090a4:	3724      	adds	r7, #36	@ 0x24
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	58024400 	.word	0x58024400
 80090b4:	03d09000 	.word	0x03d09000
 80090b8:	46000000 	.word	0x46000000
 80090bc:	4c742400 	.word	0x4c742400
 80090c0:	4a742400 	.word	0x4a742400
 80090c4:	4bb71b00 	.word	0x4bb71b00

080090c8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b089      	sub	sp, #36	@ 0x24
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090d0:	4ba0      	ldr	r3, [pc, #640]	@ (8009354 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090d4:	f003 0303 	and.w	r3, r3, #3
 80090d8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80090da:	4b9e      	ldr	r3, [pc, #632]	@ (8009354 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090de:	091b      	lsrs	r3, r3, #4
 80090e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80090e4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80090e6:	4b9b      	ldr	r3, [pc, #620]	@ (8009354 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ea:	f003 0301 	and.w	r3, r3, #1
 80090ee:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80090f0:	4b98      	ldr	r3, [pc, #608]	@ (8009354 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090f4:	08db      	lsrs	r3, r3, #3
 80090f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090fa:	693a      	ldr	r2, [r7, #16]
 80090fc:	fb02 f303 	mul.w	r3, r2, r3
 8009100:	ee07 3a90 	vmov	s15, r3
 8009104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009108:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	2b00      	cmp	r3, #0
 8009110:	f000 8111 	beq.w	8009336 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	2b02      	cmp	r3, #2
 8009118:	f000 8083 	beq.w	8009222 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	2b02      	cmp	r3, #2
 8009120:	f200 80a1 	bhi.w	8009266 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d003      	beq.n	8009132 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	2b01      	cmp	r3, #1
 800912e:	d056      	beq.n	80091de <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009130:	e099      	b.n	8009266 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009132:	4b88      	ldr	r3, [pc, #544]	@ (8009354 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 0320 	and.w	r3, r3, #32
 800913a:	2b00      	cmp	r3, #0
 800913c:	d02d      	beq.n	800919a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800913e:	4b85      	ldr	r3, [pc, #532]	@ (8009354 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	08db      	lsrs	r3, r3, #3
 8009144:	f003 0303 	and.w	r3, r3, #3
 8009148:	4a83      	ldr	r2, [pc, #524]	@ (8009358 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800914a:	fa22 f303 	lsr.w	r3, r2, r3
 800914e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	ee07 3a90 	vmov	s15, r3
 8009156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	ee07 3a90 	vmov	s15, r3
 8009160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009164:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009168:	4b7a      	ldr	r3, [pc, #488]	@ (8009354 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800916a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800916c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009170:	ee07 3a90 	vmov	s15, r3
 8009174:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009178:	ed97 6a03 	vldr	s12, [r7, #12]
 800917c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800935c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009180:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009184:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009188:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800918c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009194:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009198:	e087      	b.n	80092aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	ee07 3a90 	vmov	s15, r3
 80091a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091a4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009360 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80091a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091ac:	4b69      	ldr	r3, [pc, #420]	@ (8009354 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091b4:	ee07 3a90 	vmov	s15, r3
 80091b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80091c0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800935c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80091c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091dc:	e065      	b.n	80092aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	ee07 3a90 	vmov	s15, r3
 80091e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091e8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009364 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80091ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091f0:	4b58      	ldr	r3, [pc, #352]	@ (8009354 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091f8:	ee07 3a90 	vmov	s15, r3
 80091fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009200:	ed97 6a03 	vldr	s12, [r7, #12]
 8009204:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800935c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009208:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800920c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009210:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009214:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800921c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009220:	e043      	b.n	80092aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	ee07 3a90 	vmov	s15, r3
 8009228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800922c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009368 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009230:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009234:	4b47      	ldr	r3, [pc, #284]	@ (8009354 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800923c:	ee07 3a90 	vmov	s15, r3
 8009240:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009244:	ed97 6a03 	vldr	s12, [r7, #12]
 8009248:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800935c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800924c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009250:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009254:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009258:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800925c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009260:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009264:	e021      	b.n	80092aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	ee07 3a90 	vmov	s15, r3
 800926c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009270:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009360 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009274:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009278:	4b36      	ldr	r3, [pc, #216]	@ (8009354 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800927a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800927c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009280:	ee07 3a90 	vmov	s15, r3
 8009284:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009288:	ed97 6a03 	vldr	s12, [r7, #12]
 800928c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800935c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009290:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009294:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009298:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800929c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092a8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80092aa:	4b2a      	ldr	r3, [pc, #168]	@ (8009354 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092ae:	0a5b      	lsrs	r3, r3, #9
 80092b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092b4:	ee07 3a90 	vmov	s15, r3
 80092b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80092c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092d0:	ee17 2a90 	vmov	r2, s15
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80092d8:	4b1e      	ldr	r3, [pc, #120]	@ (8009354 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092dc:	0c1b      	lsrs	r3, r3, #16
 80092de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092e2:	ee07 3a90 	vmov	s15, r3
 80092e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80092f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092fe:	ee17 2a90 	vmov	r2, s15
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009306:	4b13      	ldr	r3, [pc, #76]	@ (8009354 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800930a:	0e1b      	lsrs	r3, r3, #24
 800930c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009310:	ee07 3a90 	vmov	s15, r3
 8009314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009318:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800931c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009320:	edd7 6a07 	vldr	s13, [r7, #28]
 8009324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800932c:	ee17 2a90 	vmov	r2, s15
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009334:	e008      	b.n	8009348 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	609a      	str	r2, [r3, #8]
}
 8009348:	bf00      	nop
 800934a:	3724      	adds	r7, #36	@ 0x24
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr
 8009354:	58024400 	.word	0x58024400
 8009358:	03d09000 	.word	0x03d09000
 800935c:	46000000 	.word	0x46000000
 8009360:	4c742400 	.word	0x4c742400
 8009364:	4a742400 	.word	0x4a742400
 8009368:	4bb71b00 	.word	0x4bb71b00

0800936c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009376:	2300      	movs	r3, #0
 8009378:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800937a:	4b53      	ldr	r3, [pc, #332]	@ (80094c8 <RCCEx_PLL2_Config+0x15c>)
 800937c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800937e:	f003 0303 	and.w	r3, r3, #3
 8009382:	2b03      	cmp	r3, #3
 8009384:	d101      	bne.n	800938a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	e099      	b.n	80094be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800938a:	4b4f      	ldr	r3, [pc, #316]	@ (80094c8 <RCCEx_PLL2_Config+0x15c>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a4e      	ldr	r2, [pc, #312]	@ (80094c8 <RCCEx_PLL2_Config+0x15c>)
 8009390:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009394:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009396:	f7f9 f965 	bl	8002664 <HAL_GetTick>
 800939a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800939c:	e008      	b.n	80093b0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800939e:	f7f9 f961 	bl	8002664 <HAL_GetTick>
 80093a2:	4602      	mov	r2, r0
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	1ad3      	subs	r3, r2, r3
 80093a8:	2b02      	cmp	r3, #2
 80093aa:	d901      	bls.n	80093b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80093ac:	2303      	movs	r3, #3
 80093ae:	e086      	b.n	80094be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80093b0:	4b45      	ldr	r3, [pc, #276]	@ (80094c8 <RCCEx_PLL2_Config+0x15c>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1f0      	bne.n	800939e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80093bc:	4b42      	ldr	r3, [pc, #264]	@ (80094c8 <RCCEx_PLL2_Config+0x15c>)
 80093be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093c0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	031b      	lsls	r3, r3, #12
 80093ca:	493f      	ldr	r1, [pc, #252]	@ (80094c8 <RCCEx_PLL2_Config+0x15c>)
 80093cc:	4313      	orrs	r3, r2
 80093ce:	628b      	str	r3, [r1, #40]	@ 0x28
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	3b01      	subs	r3, #1
 80093d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	3b01      	subs	r3, #1
 80093e0:	025b      	lsls	r3, r3, #9
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	431a      	orrs	r2, r3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	3b01      	subs	r3, #1
 80093ec:	041b      	lsls	r3, r3, #16
 80093ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80093f2:	431a      	orrs	r2, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	3b01      	subs	r3, #1
 80093fa:	061b      	lsls	r3, r3, #24
 80093fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009400:	4931      	ldr	r1, [pc, #196]	@ (80094c8 <RCCEx_PLL2_Config+0x15c>)
 8009402:	4313      	orrs	r3, r2
 8009404:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009406:	4b30      	ldr	r3, [pc, #192]	@ (80094c8 <RCCEx_PLL2_Config+0x15c>)
 8009408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800940a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	695b      	ldr	r3, [r3, #20]
 8009412:	492d      	ldr	r1, [pc, #180]	@ (80094c8 <RCCEx_PLL2_Config+0x15c>)
 8009414:	4313      	orrs	r3, r2
 8009416:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009418:	4b2b      	ldr	r3, [pc, #172]	@ (80094c8 <RCCEx_PLL2_Config+0x15c>)
 800941a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800941c:	f023 0220 	bic.w	r2, r3, #32
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	699b      	ldr	r3, [r3, #24]
 8009424:	4928      	ldr	r1, [pc, #160]	@ (80094c8 <RCCEx_PLL2_Config+0x15c>)
 8009426:	4313      	orrs	r3, r2
 8009428:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800942a:	4b27      	ldr	r3, [pc, #156]	@ (80094c8 <RCCEx_PLL2_Config+0x15c>)
 800942c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800942e:	4a26      	ldr	r2, [pc, #152]	@ (80094c8 <RCCEx_PLL2_Config+0x15c>)
 8009430:	f023 0310 	bic.w	r3, r3, #16
 8009434:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009436:	4b24      	ldr	r3, [pc, #144]	@ (80094c8 <RCCEx_PLL2_Config+0x15c>)
 8009438:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800943a:	4b24      	ldr	r3, [pc, #144]	@ (80094cc <RCCEx_PLL2_Config+0x160>)
 800943c:	4013      	ands	r3, r2
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	69d2      	ldr	r2, [r2, #28]
 8009442:	00d2      	lsls	r2, r2, #3
 8009444:	4920      	ldr	r1, [pc, #128]	@ (80094c8 <RCCEx_PLL2_Config+0x15c>)
 8009446:	4313      	orrs	r3, r2
 8009448:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800944a:	4b1f      	ldr	r3, [pc, #124]	@ (80094c8 <RCCEx_PLL2_Config+0x15c>)
 800944c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800944e:	4a1e      	ldr	r2, [pc, #120]	@ (80094c8 <RCCEx_PLL2_Config+0x15c>)
 8009450:	f043 0310 	orr.w	r3, r3, #16
 8009454:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d106      	bne.n	800946a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800945c:	4b1a      	ldr	r3, [pc, #104]	@ (80094c8 <RCCEx_PLL2_Config+0x15c>)
 800945e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009460:	4a19      	ldr	r2, [pc, #100]	@ (80094c8 <RCCEx_PLL2_Config+0x15c>)
 8009462:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009466:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009468:	e00f      	b.n	800948a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	2b01      	cmp	r3, #1
 800946e:	d106      	bne.n	800947e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009470:	4b15      	ldr	r3, [pc, #84]	@ (80094c8 <RCCEx_PLL2_Config+0x15c>)
 8009472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009474:	4a14      	ldr	r2, [pc, #80]	@ (80094c8 <RCCEx_PLL2_Config+0x15c>)
 8009476:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800947a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800947c:	e005      	b.n	800948a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800947e:	4b12      	ldr	r3, [pc, #72]	@ (80094c8 <RCCEx_PLL2_Config+0x15c>)
 8009480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009482:	4a11      	ldr	r2, [pc, #68]	@ (80094c8 <RCCEx_PLL2_Config+0x15c>)
 8009484:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009488:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800948a:	4b0f      	ldr	r3, [pc, #60]	@ (80094c8 <RCCEx_PLL2_Config+0x15c>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a0e      	ldr	r2, [pc, #56]	@ (80094c8 <RCCEx_PLL2_Config+0x15c>)
 8009490:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009494:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009496:	f7f9 f8e5 	bl	8002664 <HAL_GetTick>
 800949a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800949c:	e008      	b.n	80094b0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800949e:	f7f9 f8e1 	bl	8002664 <HAL_GetTick>
 80094a2:	4602      	mov	r2, r0
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	1ad3      	subs	r3, r2, r3
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	d901      	bls.n	80094b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80094ac:	2303      	movs	r3, #3
 80094ae:	e006      	b.n	80094be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80094b0:	4b05      	ldr	r3, [pc, #20]	@ (80094c8 <RCCEx_PLL2_Config+0x15c>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d0f0      	beq.n	800949e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80094bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	58024400 	.word	0x58024400
 80094cc:	ffff0007 	.word	0xffff0007

080094d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80094da:	2300      	movs	r3, #0
 80094dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80094de:	4b53      	ldr	r3, [pc, #332]	@ (800962c <RCCEx_PLL3_Config+0x15c>)
 80094e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094e2:	f003 0303 	and.w	r3, r3, #3
 80094e6:	2b03      	cmp	r3, #3
 80094e8:	d101      	bne.n	80094ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	e099      	b.n	8009622 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80094ee:	4b4f      	ldr	r3, [pc, #316]	@ (800962c <RCCEx_PLL3_Config+0x15c>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a4e      	ldr	r2, [pc, #312]	@ (800962c <RCCEx_PLL3_Config+0x15c>)
 80094f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80094f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094fa:	f7f9 f8b3 	bl	8002664 <HAL_GetTick>
 80094fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009500:	e008      	b.n	8009514 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009502:	f7f9 f8af 	bl	8002664 <HAL_GetTick>
 8009506:	4602      	mov	r2, r0
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	1ad3      	subs	r3, r2, r3
 800950c:	2b02      	cmp	r3, #2
 800950e:	d901      	bls.n	8009514 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009510:	2303      	movs	r3, #3
 8009512:	e086      	b.n	8009622 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009514:	4b45      	ldr	r3, [pc, #276]	@ (800962c <RCCEx_PLL3_Config+0x15c>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1f0      	bne.n	8009502 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009520:	4b42      	ldr	r3, [pc, #264]	@ (800962c <RCCEx_PLL3_Config+0x15c>)
 8009522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009524:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	051b      	lsls	r3, r3, #20
 800952e:	493f      	ldr	r1, [pc, #252]	@ (800962c <RCCEx_PLL3_Config+0x15c>)
 8009530:	4313      	orrs	r3, r2
 8009532:	628b      	str	r3, [r1, #40]	@ 0x28
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	3b01      	subs	r3, #1
 800953a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	3b01      	subs	r3, #1
 8009544:	025b      	lsls	r3, r3, #9
 8009546:	b29b      	uxth	r3, r3
 8009548:	431a      	orrs	r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	3b01      	subs	r3, #1
 8009550:	041b      	lsls	r3, r3, #16
 8009552:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009556:	431a      	orrs	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	3b01      	subs	r3, #1
 800955e:	061b      	lsls	r3, r3, #24
 8009560:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009564:	4931      	ldr	r1, [pc, #196]	@ (800962c <RCCEx_PLL3_Config+0x15c>)
 8009566:	4313      	orrs	r3, r2
 8009568:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800956a:	4b30      	ldr	r3, [pc, #192]	@ (800962c <RCCEx_PLL3_Config+0x15c>)
 800956c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800956e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	695b      	ldr	r3, [r3, #20]
 8009576:	492d      	ldr	r1, [pc, #180]	@ (800962c <RCCEx_PLL3_Config+0x15c>)
 8009578:	4313      	orrs	r3, r2
 800957a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800957c:	4b2b      	ldr	r3, [pc, #172]	@ (800962c <RCCEx_PLL3_Config+0x15c>)
 800957e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009580:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	699b      	ldr	r3, [r3, #24]
 8009588:	4928      	ldr	r1, [pc, #160]	@ (800962c <RCCEx_PLL3_Config+0x15c>)
 800958a:	4313      	orrs	r3, r2
 800958c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800958e:	4b27      	ldr	r3, [pc, #156]	@ (800962c <RCCEx_PLL3_Config+0x15c>)
 8009590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009592:	4a26      	ldr	r2, [pc, #152]	@ (800962c <RCCEx_PLL3_Config+0x15c>)
 8009594:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009598:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800959a:	4b24      	ldr	r3, [pc, #144]	@ (800962c <RCCEx_PLL3_Config+0x15c>)
 800959c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800959e:	4b24      	ldr	r3, [pc, #144]	@ (8009630 <RCCEx_PLL3_Config+0x160>)
 80095a0:	4013      	ands	r3, r2
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	69d2      	ldr	r2, [r2, #28]
 80095a6:	00d2      	lsls	r2, r2, #3
 80095a8:	4920      	ldr	r1, [pc, #128]	@ (800962c <RCCEx_PLL3_Config+0x15c>)
 80095aa:	4313      	orrs	r3, r2
 80095ac:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80095ae:	4b1f      	ldr	r3, [pc, #124]	@ (800962c <RCCEx_PLL3_Config+0x15c>)
 80095b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095b2:	4a1e      	ldr	r2, [pc, #120]	@ (800962c <RCCEx_PLL3_Config+0x15c>)
 80095b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80095b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d106      	bne.n	80095ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80095c0:	4b1a      	ldr	r3, [pc, #104]	@ (800962c <RCCEx_PLL3_Config+0x15c>)
 80095c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095c4:	4a19      	ldr	r2, [pc, #100]	@ (800962c <RCCEx_PLL3_Config+0x15c>)
 80095c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80095ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80095cc:	e00f      	b.n	80095ee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d106      	bne.n	80095e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80095d4:	4b15      	ldr	r3, [pc, #84]	@ (800962c <RCCEx_PLL3_Config+0x15c>)
 80095d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095d8:	4a14      	ldr	r2, [pc, #80]	@ (800962c <RCCEx_PLL3_Config+0x15c>)
 80095da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80095de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80095e0:	e005      	b.n	80095ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80095e2:	4b12      	ldr	r3, [pc, #72]	@ (800962c <RCCEx_PLL3_Config+0x15c>)
 80095e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e6:	4a11      	ldr	r2, [pc, #68]	@ (800962c <RCCEx_PLL3_Config+0x15c>)
 80095e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80095ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80095ee:	4b0f      	ldr	r3, [pc, #60]	@ (800962c <RCCEx_PLL3_Config+0x15c>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a0e      	ldr	r2, [pc, #56]	@ (800962c <RCCEx_PLL3_Config+0x15c>)
 80095f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80095f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095fa:	f7f9 f833 	bl	8002664 <HAL_GetTick>
 80095fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009600:	e008      	b.n	8009614 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009602:	f7f9 f82f 	bl	8002664 <HAL_GetTick>
 8009606:	4602      	mov	r2, r0
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	1ad3      	subs	r3, r2, r3
 800960c:	2b02      	cmp	r3, #2
 800960e:	d901      	bls.n	8009614 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009610:	2303      	movs	r3, #3
 8009612:	e006      	b.n	8009622 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009614:	4b05      	ldr	r3, [pc, #20]	@ (800962c <RCCEx_PLL3_Config+0x15c>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800961c:	2b00      	cmp	r3, #0
 800961e:	d0f0      	beq.n	8009602 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009620:	7bfb      	ldrb	r3, [r7, #15]
}
 8009622:	4618      	mov	r0, r3
 8009624:	3710      	adds	r7, #16
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	58024400 	.word	0x58024400
 8009630:	ffff0007 	.word	0xffff0007

08009634 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d101      	bne.n	8009646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	e042      	b.n	80096cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800964c:	2b00      	cmp	r3, #0
 800964e:	d106      	bne.n	800965e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f7f8 fe03 	bl	8002264 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2224      	movs	r2, #36	@ 0x24
 8009662:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f022 0201 	bic.w	r2, r2, #1
 8009674:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800967a:	2b00      	cmp	r3, #0
 800967c:	d002      	beq.n	8009684 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 ff22 	bl	800a4c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 f8b3 	bl	80097f0 <UART_SetConfig>
 800968a:	4603      	mov	r3, r0
 800968c:	2b01      	cmp	r3, #1
 800968e:	d101      	bne.n	8009694 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	e01b      	b.n	80096cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	685a      	ldr	r2, [r3, #4]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80096a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	689a      	ldr	r2, [r3, #8]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80096b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f042 0201 	orr.w	r2, r2, #1
 80096c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 ffa1 	bl	800a60c <UART_CheckIdleState>
 80096ca:	4603      	mov	r3, r0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3708      	adds	r7, #8
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b08a      	sub	sp, #40	@ 0x28
 80096d8:	af02      	add	r7, sp, #8
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	603b      	str	r3, [r7, #0]
 80096e0:	4613      	mov	r3, r2
 80096e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096ea:	2b20      	cmp	r3, #32
 80096ec:	d17b      	bne.n	80097e6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d002      	beq.n	80096fa <HAL_UART_Transmit+0x26>
 80096f4:	88fb      	ldrh	r3, [r7, #6]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d101      	bne.n	80096fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	e074      	b.n	80097e8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2200      	movs	r2, #0
 8009702:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2221      	movs	r2, #33	@ 0x21
 800970a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800970e:	f7f8 ffa9 	bl	8002664 <HAL_GetTick>
 8009712:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	88fa      	ldrh	r2, [r7, #6]
 8009718:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	88fa      	ldrh	r2, [r7, #6]
 8009720:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800972c:	d108      	bne.n	8009740 <HAL_UART_Transmit+0x6c>
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d104      	bne.n	8009740 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009736:	2300      	movs	r3, #0
 8009738:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	61bb      	str	r3, [r7, #24]
 800973e:	e003      	b.n	8009748 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009744:	2300      	movs	r3, #0
 8009746:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009748:	e030      	b.n	80097ac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	9300      	str	r3, [sp, #0]
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	2200      	movs	r2, #0
 8009752:	2180      	movs	r1, #128	@ 0x80
 8009754:	68f8      	ldr	r0, [r7, #12]
 8009756:	f001 f803 	bl	800a760 <UART_WaitOnFlagUntilTimeout>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d005      	beq.n	800976c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2220      	movs	r2, #32
 8009764:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009768:	2303      	movs	r3, #3
 800976a:	e03d      	b.n	80097e8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10b      	bne.n	800978a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	881b      	ldrh	r3, [r3, #0]
 8009776:	461a      	mov	r2, r3
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009780:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	3302      	adds	r3, #2
 8009786:	61bb      	str	r3, [r7, #24]
 8009788:	e007      	b.n	800979a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	781a      	ldrb	r2, [r3, #0]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	3301      	adds	r3, #1
 8009798:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	3b01      	subs	r3, #1
 80097a4:	b29a      	uxth	r2, r3
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d1c8      	bne.n	800974a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	2200      	movs	r2, #0
 80097c0:	2140      	movs	r1, #64	@ 0x40
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f000 ffcc 	bl	800a760 <UART_WaitOnFlagUntilTimeout>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d005      	beq.n	80097da <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2220      	movs	r2, #32
 80097d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80097d6:	2303      	movs	r3, #3
 80097d8:	e006      	b.n	80097e8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2220      	movs	r2, #32
 80097de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80097e2:	2300      	movs	r3, #0
 80097e4:	e000      	b.n	80097e8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80097e6:	2302      	movs	r3, #2
  }
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3720      	adds	r7, #32
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097f4:	b092      	sub	sp, #72	@ 0x48
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80097fa:	2300      	movs	r3, #0
 80097fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	689a      	ldr	r2, [r3, #8]
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	691b      	ldr	r3, [r3, #16]
 8009808:	431a      	orrs	r2, r3
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	695b      	ldr	r3, [r3, #20]
 800980e:	431a      	orrs	r2, r3
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	69db      	ldr	r3, [r3, #28]
 8009814:	4313      	orrs	r3, r2
 8009816:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	4bbe      	ldr	r3, [pc, #760]	@ (8009b18 <UART_SetConfig+0x328>)
 8009820:	4013      	ands	r3, r2
 8009822:	697a      	ldr	r2, [r7, #20]
 8009824:	6812      	ldr	r2, [r2, #0]
 8009826:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009828:	430b      	orrs	r3, r1
 800982a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	68da      	ldr	r2, [r3, #12]
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	430a      	orrs	r2, r1
 8009840:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	699b      	ldr	r3, [r3, #24]
 8009846:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4ab3      	ldr	r2, [pc, #716]	@ (8009b1c <UART_SetConfig+0x32c>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d004      	beq.n	800985c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	6a1b      	ldr	r3, [r3, #32]
 8009856:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009858:	4313      	orrs	r3, r2
 800985a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	689a      	ldr	r2, [r3, #8]
 8009862:	4baf      	ldr	r3, [pc, #700]	@ (8009b20 <UART_SetConfig+0x330>)
 8009864:	4013      	ands	r3, r2
 8009866:	697a      	ldr	r2, [r7, #20]
 8009868:	6812      	ldr	r2, [r2, #0]
 800986a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800986c:	430b      	orrs	r3, r1
 800986e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009876:	f023 010f 	bic.w	r1, r3, #15
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	430a      	orrs	r2, r1
 8009884:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4aa6      	ldr	r2, [pc, #664]	@ (8009b24 <UART_SetConfig+0x334>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d177      	bne.n	8009980 <UART_SetConfig+0x190>
 8009890:	4ba5      	ldr	r3, [pc, #660]	@ (8009b28 <UART_SetConfig+0x338>)
 8009892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009894:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009898:	2b28      	cmp	r3, #40	@ 0x28
 800989a:	d86d      	bhi.n	8009978 <UART_SetConfig+0x188>
 800989c:	a201      	add	r2, pc, #4	@ (adr r2, 80098a4 <UART_SetConfig+0xb4>)
 800989e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a2:	bf00      	nop
 80098a4:	08009949 	.word	0x08009949
 80098a8:	08009979 	.word	0x08009979
 80098ac:	08009979 	.word	0x08009979
 80098b0:	08009979 	.word	0x08009979
 80098b4:	08009979 	.word	0x08009979
 80098b8:	08009979 	.word	0x08009979
 80098bc:	08009979 	.word	0x08009979
 80098c0:	08009979 	.word	0x08009979
 80098c4:	08009951 	.word	0x08009951
 80098c8:	08009979 	.word	0x08009979
 80098cc:	08009979 	.word	0x08009979
 80098d0:	08009979 	.word	0x08009979
 80098d4:	08009979 	.word	0x08009979
 80098d8:	08009979 	.word	0x08009979
 80098dc:	08009979 	.word	0x08009979
 80098e0:	08009979 	.word	0x08009979
 80098e4:	08009959 	.word	0x08009959
 80098e8:	08009979 	.word	0x08009979
 80098ec:	08009979 	.word	0x08009979
 80098f0:	08009979 	.word	0x08009979
 80098f4:	08009979 	.word	0x08009979
 80098f8:	08009979 	.word	0x08009979
 80098fc:	08009979 	.word	0x08009979
 8009900:	08009979 	.word	0x08009979
 8009904:	08009961 	.word	0x08009961
 8009908:	08009979 	.word	0x08009979
 800990c:	08009979 	.word	0x08009979
 8009910:	08009979 	.word	0x08009979
 8009914:	08009979 	.word	0x08009979
 8009918:	08009979 	.word	0x08009979
 800991c:	08009979 	.word	0x08009979
 8009920:	08009979 	.word	0x08009979
 8009924:	08009969 	.word	0x08009969
 8009928:	08009979 	.word	0x08009979
 800992c:	08009979 	.word	0x08009979
 8009930:	08009979 	.word	0x08009979
 8009934:	08009979 	.word	0x08009979
 8009938:	08009979 	.word	0x08009979
 800993c:	08009979 	.word	0x08009979
 8009940:	08009979 	.word	0x08009979
 8009944:	08009971 	.word	0x08009971
 8009948:	2301      	movs	r3, #1
 800994a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800994e:	e326      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009950:	2304      	movs	r3, #4
 8009952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009956:	e322      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009958:	2308      	movs	r3, #8
 800995a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800995e:	e31e      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009960:	2310      	movs	r3, #16
 8009962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009966:	e31a      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009968:	2320      	movs	r3, #32
 800996a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800996e:	e316      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009970:	2340      	movs	r3, #64	@ 0x40
 8009972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009976:	e312      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009978:	2380      	movs	r3, #128	@ 0x80
 800997a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800997e:	e30e      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a69      	ldr	r2, [pc, #420]	@ (8009b2c <UART_SetConfig+0x33c>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d130      	bne.n	80099ec <UART_SetConfig+0x1fc>
 800998a:	4b67      	ldr	r3, [pc, #412]	@ (8009b28 <UART_SetConfig+0x338>)
 800998c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800998e:	f003 0307 	and.w	r3, r3, #7
 8009992:	2b05      	cmp	r3, #5
 8009994:	d826      	bhi.n	80099e4 <UART_SetConfig+0x1f4>
 8009996:	a201      	add	r2, pc, #4	@ (adr r2, 800999c <UART_SetConfig+0x1ac>)
 8009998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800999c:	080099b5 	.word	0x080099b5
 80099a0:	080099bd 	.word	0x080099bd
 80099a4:	080099c5 	.word	0x080099c5
 80099a8:	080099cd 	.word	0x080099cd
 80099ac:	080099d5 	.word	0x080099d5
 80099b0:	080099dd 	.word	0x080099dd
 80099b4:	2300      	movs	r3, #0
 80099b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ba:	e2f0      	b.n	8009f9e <UART_SetConfig+0x7ae>
 80099bc:	2304      	movs	r3, #4
 80099be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099c2:	e2ec      	b.n	8009f9e <UART_SetConfig+0x7ae>
 80099c4:	2308      	movs	r3, #8
 80099c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ca:	e2e8      	b.n	8009f9e <UART_SetConfig+0x7ae>
 80099cc:	2310      	movs	r3, #16
 80099ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099d2:	e2e4      	b.n	8009f9e <UART_SetConfig+0x7ae>
 80099d4:	2320      	movs	r3, #32
 80099d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099da:	e2e0      	b.n	8009f9e <UART_SetConfig+0x7ae>
 80099dc:	2340      	movs	r3, #64	@ 0x40
 80099de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099e2:	e2dc      	b.n	8009f9e <UART_SetConfig+0x7ae>
 80099e4:	2380      	movs	r3, #128	@ 0x80
 80099e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ea:	e2d8      	b.n	8009f9e <UART_SetConfig+0x7ae>
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a4f      	ldr	r2, [pc, #316]	@ (8009b30 <UART_SetConfig+0x340>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d130      	bne.n	8009a58 <UART_SetConfig+0x268>
 80099f6:	4b4c      	ldr	r3, [pc, #304]	@ (8009b28 <UART_SetConfig+0x338>)
 80099f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099fa:	f003 0307 	and.w	r3, r3, #7
 80099fe:	2b05      	cmp	r3, #5
 8009a00:	d826      	bhi.n	8009a50 <UART_SetConfig+0x260>
 8009a02:	a201      	add	r2, pc, #4	@ (adr r2, 8009a08 <UART_SetConfig+0x218>)
 8009a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a08:	08009a21 	.word	0x08009a21
 8009a0c:	08009a29 	.word	0x08009a29
 8009a10:	08009a31 	.word	0x08009a31
 8009a14:	08009a39 	.word	0x08009a39
 8009a18:	08009a41 	.word	0x08009a41
 8009a1c:	08009a49 	.word	0x08009a49
 8009a20:	2300      	movs	r3, #0
 8009a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a26:	e2ba      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009a28:	2304      	movs	r3, #4
 8009a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a2e:	e2b6      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009a30:	2308      	movs	r3, #8
 8009a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a36:	e2b2      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009a38:	2310      	movs	r3, #16
 8009a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a3e:	e2ae      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009a40:	2320      	movs	r3, #32
 8009a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a46:	e2aa      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009a48:	2340      	movs	r3, #64	@ 0x40
 8009a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a4e:	e2a6      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009a50:	2380      	movs	r3, #128	@ 0x80
 8009a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a56:	e2a2      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a35      	ldr	r2, [pc, #212]	@ (8009b34 <UART_SetConfig+0x344>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d130      	bne.n	8009ac4 <UART_SetConfig+0x2d4>
 8009a62:	4b31      	ldr	r3, [pc, #196]	@ (8009b28 <UART_SetConfig+0x338>)
 8009a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a66:	f003 0307 	and.w	r3, r3, #7
 8009a6a:	2b05      	cmp	r3, #5
 8009a6c:	d826      	bhi.n	8009abc <UART_SetConfig+0x2cc>
 8009a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a74 <UART_SetConfig+0x284>)
 8009a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a74:	08009a8d 	.word	0x08009a8d
 8009a78:	08009a95 	.word	0x08009a95
 8009a7c:	08009a9d 	.word	0x08009a9d
 8009a80:	08009aa5 	.word	0x08009aa5
 8009a84:	08009aad 	.word	0x08009aad
 8009a88:	08009ab5 	.word	0x08009ab5
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a92:	e284      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009a94:	2304      	movs	r3, #4
 8009a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a9a:	e280      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009a9c:	2308      	movs	r3, #8
 8009a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aa2:	e27c      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009aa4:	2310      	movs	r3, #16
 8009aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aaa:	e278      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009aac:	2320      	movs	r3, #32
 8009aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ab2:	e274      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009ab4:	2340      	movs	r3, #64	@ 0x40
 8009ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aba:	e270      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009abc:	2380      	movs	r3, #128	@ 0x80
 8009abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ac2:	e26c      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8009b38 <UART_SetConfig+0x348>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d142      	bne.n	8009b54 <UART_SetConfig+0x364>
 8009ace:	4b16      	ldr	r3, [pc, #88]	@ (8009b28 <UART_SetConfig+0x338>)
 8009ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ad2:	f003 0307 	and.w	r3, r3, #7
 8009ad6:	2b05      	cmp	r3, #5
 8009ad8:	d838      	bhi.n	8009b4c <UART_SetConfig+0x35c>
 8009ada:	a201      	add	r2, pc, #4	@ (adr r2, 8009ae0 <UART_SetConfig+0x2f0>)
 8009adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae0:	08009af9 	.word	0x08009af9
 8009ae4:	08009b01 	.word	0x08009b01
 8009ae8:	08009b09 	.word	0x08009b09
 8009aec:	08009b11 	.word	0x08009b11
 8009af0:	08009b3d 	.word	0x08009b3d
 8009af4:	08009b45 	.word	0x08009b45
 8009af8:	2300      	movs	r3, #0
 8009afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009afe:	e24e      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009b00:	2304      	movs	r3, #4
 8009b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b06:	e24a      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009b08:	2308      	movs	r3, #8
 8009b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b0e:	e246      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009b10:	2310      	movs	r3, #16
 8009b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b16:	e242      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009b18:	cfff69f3 	.word	0xcfff69f3
 8009b1c:	58000c00 	.word	0x58000c00
 8009b20:	11fff4ff 	.word	0x11fff4ff
 8009b24:	40011000 	.word	0x40011000
 8009b28:	58024400 	.word	0x58024400
 8009b2c:	40004400 	.word	0x40004400
 8009b30:	40004800 	.word	0x40004800
 8009b34:	40004c00 	.word	0x40004c00
 8009b38:	40005000 	.word	0x40005000
 8009b3c:	2320      	movs	r3, #32
 8009b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b42:	e22c      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009b44:	2340      	movs	r3, #64	@ 0x40
 8009b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b4a:	e228      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009b4c:	2380      	movs	r3, #128	@ 0x80
 8009b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b52:	e224      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4ab1      	ldr	r2, [pc, #708]	@ (8009e20 <UART_SetConfig+0x630>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d176      	bne.n	8009c4c <UART_SetConfig+0x45c>
 8009b5e:	4bb1      	ldr	r3, [pc, #708]	@ (8009e24 <UART_SetConfig+0x634>)
 8009b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009b66:	2b28      	cmp	r3, #40	@ 0x28
 8009b68:	d86c      	bhi.n	8009c44 <UART_SetConfig+0x454>
 8009b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8009b70 <UART_SetConfig+0x380>)
 8009b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b70:	08009c15 	.word	0x08009c15
 8009b74:	08009c45 	.word	0x08009c45
 8009b78:	08009c45 	.word	0x08009c45
 8009b7c:	08009c45 	.word	0x08009c45
 8009b80:	08009c45 	.word	0x08009c45
 8009b84:	08009c45 	.word	0x08009c45
 8009b88:	08009c45 	.word	0x08009c45
 8009b8c:	08009c45 	.word	0x08009c45
 8009b90:	08009c1d 	.word	0x08009c1d
 8009b94:	08009c45 	.word	0x08009c45
 8009b98:	08009c45 	.word	0x08009c45
 8009b9c:	08009c45 	.word	0x08009c45
 8009ba0:	08009c45 	.word	0x08009c45
 8009ba4:	08009c45 	.word	0x08009c45
 8009ba8:	08009c45 	.word	0x08009c45
 8009bac:	08009c45 	.word	0x08009c45
 8009bb0:	08009c25 	.word	0x08009c25
 8009bb4:	08009c45 	.word	0x08009c45
 8009bb8:	08009c45 	.word	0x08009c45
 8009bbc:	08009c45 	.word	0x08009c45
 8009bc0:	08009c45 	.word	0x08009c45
 8009bc4:	08009c45 	.word	0x08009c45
 8009bc8:	08009c45 	.word	0x08009c45
 8009bcc:	08009c45 	.word	0x08009c45
 8009bd0:	08009c2d 	.word	0x08009c2d
 8009bd4:	08009c45 	.word	0x08009c45
 8009bd8:	08009c45 	.word	0x08009c45
 8009bdc:	08009c45 	.word	0x08009c45
 8009be0:	08009c45 	.word	0x08009c45
 8009be4:	08009c45 	.word	0x08009c45
 8009be8:	08009c45 	.word	0x08009c45
 8009bec:	08009c45 	.word	0x08009c45
 8009bf0:	08009c35 	.word	0x08009c35
 8009bf4:	08009c45 	.word	0x08009c45
 8009bf8:	08009c45 	.word	0x08009c45
 8009bfc:	08009c45 	.word	0x08009c45
 8009c00:	08009c45 	.word	0x08009c45
 8009c04:	08009c45 	.word	0x08009c45
 8009c08:	08009c45 	.word	0x08009c45
 8009c0c:	08009c45 	.word	0x08009c45
 8009c10:	08009c3d 	.word	0x08009c3d
 8009c14:	2301      	movs	r3, #1
 8009c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c1a:	e1c0      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009c1c:	2304      	movs	r3, #4
 8009c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c22:	e1bc      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009c24:	2308      	movs	r3, #8
 8009c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c2a:	e1b8      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009c2c:	2310      	movs	r3, #16
 8009c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c32:	e1b4      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009c34:	2320      	movs	r3, #32
 8009c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c3a:	e1b0      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009c3c:	2340      	movs	r3, #64	@ 0x40
 8009c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c42:	e1ac      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009c44:	2380      	movs	r3, #128	@ 0x80
 8009c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c4a:	e1a8      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a75      	ldr	r2, [pc, #468]	@ (8009e28 <UART_SetConfig+0x638>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d130      	bne.n	8009cb8 <UART_SetConfig+0x4c8>
 8009c56:	4b73      	ldr	r3, [pc, #460]	@ (8009e24 <UART_SetConfig+0x634>)
 8009c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c5a:	f003 0307 	and.w	r3, r3, #7
 8009c5e:	2b05      	cmp	r3, #5
 8009c60:	d826      	bhi.n	8009cb0 <UART_SetConfig+0x4c0>
 8009c62:	a201      	add	r2, pc, #4	@ (adr r2, 8009c68 <UART_SetConfig+0x478>)
 8009c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c68:	08009c81 	.word	0x08009c81
 8009c6c:	08009c89 	.word	0x08009c89
 8009c70:	08009c91 	.word	0x08009c91
 8009c74:	08009c99 	.word	0x08009c99
 8009c78:	08009ca1 	.word	0x08009ca1
 8009c7c:	08009ca9 	.word	0x08009ca9
 8009c80:	2300      	movs	r3, #0
 8009c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c86:	e18a      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009c88:	2304      	movs	r3, #4
 8009c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c8e:	e186      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009c90:	2308      	movs	r3, #8
 8009c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c96:	e182      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009c98:	2310      	movs	r3, #16
 8009c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c9e:	e17e      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009ca0:	2320      	movs	r3, #32
 8009ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ca6:	e17a      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009ca8:	2340      	movs	r3, #64	@ 0x40
 8009caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cae:	e176      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009cb0:	2380      	movs	r3, #128	@ 0x80
 8009cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cb6:	e172      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a5b      	ldr	r2, [pc, #364]	@ (8009e2c <UART_SetConfig+0x63c>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d130      	bne.n	8009d24 <UART_SetConfig+0x534>
 8009cc2:	4b58      	ldr	r3, [pc, #352]	@ (8009e24 <UART_SetConfig+0x634>)
 8009cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cc6:	f003 0307 	and.w	r3, r3, #7
 8009cca:	2b05      	cmp	r3, #5
 8009ccc:	d826      	bhi.n	8009d1c <UART_SetConfig+0x52c>
 8009cce:	a201      	add	r2, pc, #4	@ (adr r2, 8009cd4 <UART_SetConfig+0x4e4>)
 8009cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd4:	08009ced 	.word	0x08009ced
 8009cd8:	08009cf5 	.word	0x08009cf5
 8009cdc:	08009cfd 	.word	0x08009cfd
 8009ce0:	08009d05 	.word	0x08009d05
 8009ce4:	08009d0d 	.word	0x08009d0d
 8009ce8:	08009d15 	.word	0x08009d15
 8009cec:	2300      	movs	r3, #0
 8009cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cf2:	e154      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009cf4:	2304      	movs	r3, #4
 8009cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cfa:	e150      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009cfc:	2308      	movs	r3, #8
 8009cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d02:	e14c      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009d04:	2310      	movs	r3, #16
 8009d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d0a:	e148      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009d0c:	2320      	movs	r3, #32
 8009d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d12:	e144      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009d14:	2340      	movs	r3, #64	@ 0x40
 8009d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d1a:	e140      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009d1c:	2380      	movs	r3, #128	@ 0x80
 8009d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d22:	e13c      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a41      	ldr	r2, [pc, #260]	@ (8009e30 <UART_SetConfig+0x640>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	f040 8082 	bne.w	8009e34 <UART_SetConfig+0x644>
 8009d30:	4b3c      	ldr	r3, [pc, #240]	@ (8009e24 <UART_SetConfig+0x634>)
 8009d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009d38:	2b28      	cmp	r3, #40	@ 0x28
 8009d3a:	d86d      	bhi.n	8009e18 <UART_SetConfig+0x628>
 8009d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8009d44 <UART_SetConfig+0x554>)
 8009d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d42:	bf00      	nop
 8009d44:	08009de9 	.word	0x08009de9
 8009d48:	08009e19 	.word	0x08009e19
 8009d4c:	08009e19 	.word	0x08009e19
 8009d50:	08009e19 	.word	0x08009e19
 8009d54:	08009e19 	.word	0x08009e19
 8009d58:	08009e19 	.word	0x08009e19
 8009d5c:	08009e19 	.word	0x08009e19
 8009d60:	08009e19 	.word	0x08009e19
 8009d64:	08009df1 	.word	0x08009df1
 8009d68:	08009e19 	.word	0x08009e19
 8009d6c:	08009e19 	.word	0x08009e19
 8009d70:	08009e19 	.word	0x08009e19
 8009d74:	08009e19 	.word	0x08009e19
 8009d78:	08009e19 	.word	0x08009e19
 8009d7c:	08009e19 	.word	0x08009e19
 8009d80:	08009e19 	.word	0x08009e19
 8009d84:	08009df9 	.word	0x08009df9
 8009d88:	08009e19 	.word	0x08009e19
 8009d8c:	08009e19 	.word	0x08009e19
 8009d90:	08009e19 	.word	0x08009e19
 8009d94:	08009e19 	.word	0x08009e19
 8009d98:	08009e19 	.word	0x08009e19
 8009d9c:	08009e19 	.word	0x08009e19
 8009da0:	08009e19 	.word	0x08009e19
 8009da4:	08009e01 	.word	0x08009e01
 8009da8:	08009e19 	.word	0x08009e19
 8009dac:	08009e19 	.word	0x08009e19
 8009db0:	08009e19 	.word	0x08009e19
 8009db4:	08009e19 	.word	0x08009e19
 8009db8:	08009e19 	.word	0x08009e19
 8009dbc:	08009e19 	.word	0x08009e19
 8009dc0:	08009e19 	.word	0x08009e19
 8009dc4:	08009e09 	.word	0x08009e09
 8009dc8:	08009e19 	.word	0x08009e19
 8009dcc:	08009e19 	.word	0x08009e19
 8009dd0:	08009e19 	.word	0x08009e19
 8009dd4:	08009e19 	.word	0x08009e19
 8009dd8:	08009e19 	.word	0x08009e19
 8009ddc:	08009e19 	.word	0x08009e19
 8009de0:	08009e19 	.word	0x08009e19
 8009de4:	08009e11 	.word	0x08009e11
 8009de8:	2301      	movs	r3, #1
 8009dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dee:	e0d6      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009df0:	2304      	movs	r3, #4
 8009df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009df6:	e0d2      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009df8:	2308      	movs	r3, #8
 8009dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dfe:	e0ce      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009e00:	2310      	movs	r3, #16
 8009e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e06:	e0ca      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009e08:	2320      	movs	r3, #32
 8009e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e0e:	e0c6      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009e10:	2340      	movs	r3, #64	@ 0x40
 8009e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e16:	e0c2      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009e18:	2380      	movs	r3, #128	@ 0x80
 8009e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e1e:	e0be      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009e20:	40011400 	.word	0x40011400
 8009e24:	58024400 	.word	0x58024400
 8009e28:	40007800 	.word	0x40007800
 8009e2c:	40007c00 	.word	0x40007c00
 8009e30:	40011800 	.word	0x40011800
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4aad      	ldr	r2, [pc, #692]	@ (800a0f0 <UART_SetConfig+0x900>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d176      	bne.n	8009f2c <UART_SetConfig+0x73c>
 8009e3e:	4bad      	ldr	r3, [pc, #692]	@ (800a0f4 <UART_SetConfig+0x904>)
 8009e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009e46:	2b28      	cmp	r3, #40	@ 0x28
 8009e48:	d86c      	bhi.n	8009f24 <UART_SetConfig+0x734>
 8009e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8009e50 <UART_SetConfig+0x660>)
 8009e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e50:	08009ef5 	.word	0x08009ef5
 8009e54:	08009f25 	.word	0x08009f25
 8009e58:	08009f25 	.word	0x08009f25
 8009e5c:	08009f25 	.word	0x08009f25
 8009e60:	08009f25 	.word	0x08009f25
 8009e64:	08009f25 	.word	0x08009f25
 8009e68:	08009f25 	.word	0x08009f25
 8009e6c:	08009f25 	.word	0x08009f25
 8009e70:	08009efd 	.word	0x08009efd
 8009e74:	08009f25 	.word	0x08009f25
 8009e78:	08009f25 	.word	0x08009f25
 8009e7c:	08009f25 	.word	0x08009f25
 8009e80:	08009f25 	.word	0x08009f25
 8009e84:	08009f25 	.word	0x08009f25
 8009e88:	08009f25 	.word	0x08009f25
 8009e8c:	08009f25 	.word	0x08009f25
 8009e90:	08009f05 	.word	0x08009f05
 8009e94:	08009f25 	.word	0x08009f25
 8009e98:	08009f25 	.word	0x08009f25
 8009e9c:	08009f25 	.word	0x08009f25
 8009ea0:	08009f25 	.word	0x08009f25
 8009ea4:	08009f25 	.word	0x08009f25
 8009ea8:	08009f25 	.word	0x08009f25
 8009eac:	08009f25 	.word	0x08009f25
 8009eb0:	08009f0d 	.word	0x08009f0d
 8009eb4:	08009f25 	.word	0x08009f25
 8009eb8:	08009f25 	.word	0x08009f25
 8009ebc:	08009f25 	.word	0x08009f25
 8009ec0:	08009f25 	.word	0x08009f25
 8009ec4:	08009f25 	.word	0x08009f25
 8009ec8:	08009f25 	.word	0x08009f25
 8009ecc:	08009f25 	.word	0x08009f25
 8009ed0:	08009f15 	.word	0x08009f15
 8009ed4:	08009f25 	.word	0x08009f25
 8009ed8:	08009f25 	.word	0x08009f25
 8009edc:	08009f25 	.word	0x08009f25
 8009ee0:	08009f25 	.word	0x08009f25
 8009ee4:	08009f25 	.word	0x08009f25
 8009ee8:	08009f25 	.word	0x08009f25
 8009eec:	08009f25 	.word	0x08009f25
 8009ef0:	08009f1d 	.word	0x08009f1d
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009efa:	e050      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009efc:	2304      	movs	r3, #4
 8009efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f02:	e04c      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009f04:	2308      	movs	r3, #8
 8009f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f0a:	e048      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009f0c:	2310      	movs	r3, #16
 8009f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f12:	e044      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009f14:	2320      	movs	r3, #32
 8009f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f1a:	e040      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009f1c:	2340      	movs	r3, #64	@ 0x40
 8009f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f22:	e03c      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009f24:	2380      	movs	r3, #128	@ 0x80
 8009f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f2a:	e038      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a71      	ldr	r2, [pc, #452]	@ (800a0f8 <UART_SetConfig+0x908>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d130      	bne.n	8009f98 <UART_SetConfig+0x7a8>
 8009f36:	4b6f      	ldr	r3, [pc, #444]	@ (800a0f4 <UART_SetConfig+0x904>)
 8009f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f3a:	f003 0307 	and.w	r3, r3, #7
 8009f3e:	2b05      	cmp	r3, #5
 8009f40:	d826      	bhi.n	8009f90 <UART_SetConfig+0x7a0>
 8009f42:	a201      	add	r2, pc, #4	@ (adr r2, 8009f48 <UART_SetConfig+0x758>)
 8009f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f48:	08009f61 	.word	0x08009f61
 8009f4c:	08009f69 	.word	0x08009f69
 8009f50:	08009f71 	.word	0x08009f71
 8009f54:	08009f79 	.word	0x08009f79
 8009f58:	08009f81 	.word	0x08009f81
 8009f5c:	08009f89 	.word	0x08009f89
 8009f60:	2302      	movs	r3, #2
 8009f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f66:	e01a      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009f68:	2304      	movs	r3, #4
 8009f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f6e:	e016      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009f70:	2308      	movs	r3, #8
 8009f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f76:	e012      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009f78:	2310      	movs	r3, #16
 8009f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f7e:	e00e      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009f80:	2320      	movs	r3, #32
 8009f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f86:	e00a      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009f88:	2340      	movs	r3, #64	@ 0x40
 8009f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f8e:	e006      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009f90:	2380      	movs	r3, #128	@ 0x80
 8009f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f96:	e002      	b.n	8009f9e <UART_SetConfig+0x7ae>
 8009f98:	2380      	movs	r3, #128	@ 0x80
 8009f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a55      	ldr	r2, [pc, #340]	@ (800a0f8 <UART_SetConfig+0x908>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	f040 80f8 	bne.w	800a19a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009faa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009fae:	2b20      	cmp	r3, #32
 8009fb0:	dc46      	bgt.n	800a040 <UART_SetConfig+0x850>
 8009fb2:	2b02      	cmp	r3, #2
 8009fb4:	db75      	blt.n	800a0a2 <UART_SetConfig+0x8b2>
 8009fb6:	3b02      	subs	r3, #2
 8009fb8:	2b1e      	cmp	r3, #30
 8009fba:	d872      	bhi.n	800a0a2 <UART_SetConfig+0x8b2>
 8009fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8009fc4 <UART_SetConfig+0x7d4>)
 8009fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc2:	bf00      	nop
 8009fc4:	0800a047 	.word	0x0800a047
 8009fc8:	0800a0a3 	.word	0x0800a0a3
 8009fcc:	0800a04f 	.word	0x0800a04f
 8009fd0:	0800a0a3 	.word	0x0800a0a3
 8009fd4:	0800a0a3 	.word	0x0800a0a3
 8009fd8:	0800a0a3 	.word	0x0800a0a3
 8009fdc:	0800a05f 	.word	0x0800a05f
 8009fe0:	0800a0a3 	.word	0x0800a0a3
 8009fe4:	0800a0a3 	.word	0x0800a0a3
 8009fe8:	0800a0a3 	.word	0x0800a0a3
 8009fec:	0800a0a3 	.word	0x0800a0a3
 8009ff0:	0800a0a3 	.word	0x0800a0a3
 8009ff4:	0800a0a3 	.word	0x0800a0a3
 8009ff8:	0800a0a3 	.word	0x0800a0a3
 8009ffc:	0800a06f 	.word	0x0800a06f
 800a000:	0800a0a3 	.word	0x0800a0a3
 800a004:	0800a0a3 	.word	0x0800a0a3
 800a008:	0800a0a3 	.word	0x0800a0a3
 800a00c:	0800a0a3 	.word	0x0800a0a3
 800a010:	0800a0a3 	.word	0x0800a0a3
 800a014:	0800a0a3 	.word	0x0800a0a3
 800a018:	0800a0a3 	.word	0x0800a0a3
 800a01c:	0800a0a3 	.word	0x0800a0a3
 800a020:	0800a0a3 	.word	0x0800a0a3
 800a024:	0800a0a3 	.word	0x0800a0a3
 800a028:	0800a0a3 	.word	0x0800a0a3
 800a02c:	0800a0a3 	.word	0x0800a0a3
 800a030:	0800a0a3 	.word	0x0800a0a3
 800a034:	0800a0a3 	.word	0x0800a0a3
 800a038:	0800a0a3 	.word	0x0800a0a3
 800a03c:	0800a095 	.word	0x0800a095
 800a040:	2b40      	cmp	r3, #64	@ 0x40
 800a042:	d02a      	beq.n	800a09a <UART_SetConfig+0x8aa>
 800a044:	e02d      	b.n	800a0a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a046:	f7fe fd81 	bl	8008b4c <HAL_RCCEx_GetD3PCLK1Freq>
 800a04a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a04c:	e02f      	b.n	800a0ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a04e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a052:	4618      	mov	r0, r3
 800a054:	f7fe fd90 	bl	8008b78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a05a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a05c:	e027      	b.n	800a0ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a05e:	f107 0318 	add.w	r3, r7, #24
 800a062:	4618      	mov	r0, r3
 800a064:	f7fe fedc 	bl	8008e20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a06c:	e01f      	b.n	800a0ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a06e:	4b21      	ldr	r3, [pc, #132]	@ (800a0f4 <UART_SetConfig+0x904>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f003 0320 	and.w	r3, r3, #32
 800a076:	2b00      	cmp	r3, #0
 800a078:	d009      	beq.n	800a08e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a07a:	4b1e      	ldr	r3, [pc, #120]	@ (800a0f4 <UART_SetConfig+0x904>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	08db      	lsrs	r3, r3, #3
 800a080:	f003 0303 	and.w	r3, r3, #3
 800a084:	4a1d      	ldr	r2, [pc, #116]	@ (800a0fc <UART_SetConfig+0x90c>)
 800a086:	fa22 f303 	lsr.w	r3, r2, r3
 800a08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a08c:	e00f      	b.n	800a0ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a08e:	4b1b      	ldr	r3, [pc, #108]	@ (800a0fc <UART_SetConfig+0x90c>)
 800a090:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a092:	e00c      	b.n	800a0ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a094:	4b1a      	ldr	r3, [pc, #104]	@ (800a100 <UART_SetConfig+0x910>)
 800a096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a098:	e009      	b.n	800a0ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a09a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a09e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0a0:	e005      	b.n	800a0ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a0ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a0ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	f000 81ee 	beq.w	800a492 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ba:	4a12      	ldr	r2, [pc, #72]	@ (800a104 <UART_SetConfig+0x914>)
 800a0bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0c8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	685a      	ldr	r2, [r3, #4]
 800a0ce:	4613      	mov	r3, r2
 800a0d0:	005b      	lsls	r3, r3, #1
 800a0d2:	4413      	add	r3, r2
 800a0d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d305      	bcc.n	800a0e6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d910      	bls.n	800a108 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a0ec:	e1d1      	b.n	800a492 <UART_SetConfig+0xca2>
 800a0ee:	bf00      	nop
 800a0f0:	40011c00 	.word	0x40011c00
 800a0f4:	58024400 	.word	0x58024400
 800a0f8:	58000c00 	.word	0x58000c00
 800a0fc:	03d09000 	.word	0x03d09000
 800a100:	003d0900 	.word	0x003d0900
 800a104:	0800b654 	.word	0x0800b654
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a10a:	2200      	movs	r2, #0
 800a10c:	60bb      	str	r3, [r7, #8]
 800a10e:	60fa      	str	r2, [r7, #12]
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a114:	4ac0      	ldr	r2, [pc, #768]	@ (800a418 <UART_SetConfig+0xc28>)
 800a116:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	2200      	movs	r2, #0
 800a11e:	603b      	str	r3, [r7, #0]
 800a120:	607a      	str	r2, [r7, #4]
 800a122:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a126:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a12a:	f7f6 f949 	bl	80003c0 <__aeabi_uldivmod>
 800a12e:	4602      	mov	r2, r0
 800a130:	460b      	mov	r3, r1
 800a132:	4610      	mov	r0, r2
 800a134:	4619      	mov	r1, r3
 800a136:	f04f 0200 	mov.w	r2, #0
 800a13a:	f04f 0300 	mov.w	r3, #0
 800a13e:	020b      	lsls	r3, r1, #8
 800a140:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a144:	0202      	lsls	r2, r0, #8
 800a146:	6979      	ldr	r1, [r7, #20]
 800a148:	6849      	ldr	r1, [r1, #4]
 800a14a:	0849      	lsrs	r1, r1, #1
 800a14c:	2000      	movs	r0, #0
 800a14e:	460c      	mov	r4, r1
 800a150:	4605      	mov	r5, r0
 800a152:	eb12 0804 	adds.w	r8, r2, r4
 800a156:	eb43 0905 	adc.w	r9, r3, r5
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	469a      	mov	sl, r3
 800a162:	4693      	mov	fp, r2
 800a164:	4652      	mov	r2, sl
 800a166:	465b      	mov	r3, fp
 800a168:	4640      	mov	r0, r8
 800a16a:	4649      	mov	r1, r9
 800a16c:	f7f6 f928 	bl	80003c0 <__aeabi_uldivmod>
 800a170:	4602      	mov	r2, r0
 800a172:	460b      	mov	r3, r1
 800a174:	4613      	mov	r3, r2
 800a176:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a17a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a17e:	d308      	bcc.n	800a192 <UART_SetConfig+0x9a2>
 800a180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a182:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a186:	d204      	bcs.n	800a192 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a18e:	60da      	str	r2, [r3, #12]
 800a190:	e17f      	b.n	800a492 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a198:	e17b      	b.n	800a492 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	69db      	ldr	r3, [r3, #28]
 800a19e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1a2:	f040 80bd 	bne.w	800a320 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a1a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a1aa:	2b20      	cmp	r3, #32
 800a1ac:	dc48      	bgt.n	800a240 <UART_SetConfig+0xa50>
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	db7b      	blt.n	800a2aa <UART_SetConfig+0xaba>
 800a1b2:	2b20      	cmp	r3, #32
 800a1b4:	d879      	bhi.n	800a2aa <UART_SetConfig+0xaba>
 800a1b6:	a201      	add	r2, pc, #4	@ (adr r2, 800a1bc <UART_SetConfig+0x9cc>)
 800a1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1bc:	0800a247 	.word	0x0800a247
 800a1c0:	0800a24f 	.word	0x0800a24f
 800a1c4:	0800a2ab 	.word	0x0800a2ab
 800a1c8:	0800a2ab 	.word	0x0800a2ab
 800a1cc:	0800a257 	.word	0x0800a257
 800a1d0:	0800a2ab 	.word	0x0800a2ab
 800a1d4:	0800a2ab 	.word	0x0800a2ab
 800a1d8:	0800a2ab 	.word	0x0800a2ab
 800a1dc:	0800a267 	.word	0x0800a267
 800a1e0:	0800a2ab 	.word	0x0800a2ab
 800a1e4:	0800a2ab 	.word	0x0800a2ab
 800a1e8:	0800a2ab 	.word	0x0800a2ab
 800a1ec:	0800a2ab 	.word	0x0800a2ab
 800a1f0:	0800a2ab 	.word	0x0800a2ab
 800a1f4:	0800a2ab 	.word	0x0800a2ab
 800a1f8:	0800a2ab 	.word	0x0800a2ab
 800a1fc:	0800a277 	.word	0x0800a277
 800a200:	0800a2ab 	.word	0x0800a2ab
 800a204:	0800a2ab 	.word	0x0800a2ab
 800a208:	0800a2ab 	.word	0x0800a2ab
 800a20c:	0800a2ab 	.word	0x0800a2ab
 800a210:	0800a2ab 	.word	0x0800a2ab
 800a214:	0800a2ab 	.word	0x0800a2ab
 800a218:	0800a2ab 	.word	0x0800a2ab
 800a21c:	0800a2ab 	.word	0x0800a2ab
 800a220:	0800a2ab 	.word	0x0800a2ab
 800a224:	0800a2ab 	.word	0x0800a2ab
 800a228:	0800a2ab 	.word	0x0800a2ab
 800a22c:	0800a2ab 	.word	0x0800a2ab
 800a230:	0800a2ab 	.word	0x0800a2ab
 800a234:	0800a2ab 	.word	0x0800a2ab
 800a238:	0800a2ab 	.word	0x0800a2ab
 800a23c:	0800a29d 	.word	0x0800a29d
 800a240:	2b40      	cmp	r3, #64	@ 0x40
 800a242:	d02e      	beq.n	800a2a2 <UART_SetConfig+0xab2>
 800a244:	e031      	b.n	800a2aa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a246:	f7fc fde3 	bl	8006e10 <HAL_RCC_GetPCLK1Freq>
 800a24a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a24c:	e033      	b.n	800a2b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a24e:	f7fc fdf5 	bl	8006e3c <HAL_RCC_GetPCLK2Freq>
 800a252:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a254:	e02f      	b.n	800a2b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a256:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7fe fc8c 	bl	8008b78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a264:	e027      	b.n	800a2b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a266:	f107 0318 	add.w	r3, r7, #24
 800a26a:	4618      	mov	r0, r3
 800a26c:	f7fe fdd8 	bl	8008e20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a274:	e01f      	b.n	800a2b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a276:	4b69      	ldr	r3, [pc, #420]	@ (800a41c <UART_SetConfig+0xc2c>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f003 0320 	and.w	r3, r3, #32
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d009      	beq.n	800a296 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a282:	4b66      	ldr	r3, [pc, #408]	@ (800a41c <UART_SetConfig+0xc2c>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	08db      	lsrs	r3, r3, #3
 800a288:	f003 0303 	and.w	r3, r3, #3
 800a28c:	4a64      	ldr	r2, [pc, #400]	@ (800a420 <UART_SetConfig+0xc30>)
 800a28e:	fa22 f303 	lsr.w	r3, r2, r3
 800a292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a294:	e00f      	b.n	800a2b6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a296:	4b62      	ldr	r3, [pc, #392]	@ (800a420 <UART_SetConfig+0xc30>)
 800a298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a29a:	e00c      	b.n	800a2b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a29c:	4b61      	ldr	r3, [pc, #388]	@ (800a424 <UART_SetConfig+0xc34>)
 800a29e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2a0:	e009      	b.n	800a2b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2a8:	e005      	b.n	800a2b6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a2b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a2b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	f000 80ea 	beq.w	800a492 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2c2:	4a55      	ldr	r2, [pc, #340]	@ (800a418 <UART_SetConfig+0xc28>)
 800a2c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2d0:	005a      	lsls	r2, r3, #1
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	085b      	lsrs	r3, r3, #1
 800a2d8:	441a      	add	r2, r3
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2e6:	2b0f      	cmp	r3, #15
 800a2e8:	d916      	bls.n	800a318 <UART_SetConfig+0xb28>
 800a2ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2f0:	d212      	bcs.n	800a318 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	f023 030f 	bic.w	r3, r3, #15
 800a2fa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2fe:	085b      	lsrs	r3, r3, #1
 800a300:	b29b      	uxth	r3, r3
 800a302:	f003 0307 	and.w	r3, r3, #7
 800a306:	b29a      	uxth	r2, r3
 800a308:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a30a:	4313      	orrs	r3, r2
 800a30c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a314:	60da      	str	r2, [r3, #12]
 800a316:	e0bc      	b.n	800a492 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a31e:	e0b8      	b.n	800a492 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a320:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a324:	2b20      	cmp	r3, #32
 800a326:	dc4b      	bgt.n	800a3c0 <UART_SetConfig+0xbd0>
 800a328:	2b00      	cmp	r3, #0
 800a32a:	f2c0 8087 	blt.w	800a43c <UART_SetConfig+0xc4c>
 800a32e:	2b20      	cmp	r3, #32
 800a330:	f200 8084 	bhi.w	800a43c <UART_SetConfig+0xc4c>
 800a334:	a201      	add	r2, pc, #4	@ (adr r2, 800a33c <UART_SetConfig+0xb4c>)
 800a336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a33a:	bf00      	nop
 800a33c:	0800a3c7 	.word	0x0800a3c7
 800a340:	0800a3cf 	.word	0x0800a3cf
 800a344:	0800a43d 	.word	0x0800a43d
 800a348:	0800a43d 	.word	0x0800a43d
 800a34c:	0800a3d7 	.word	0x0800a3d7
 800a350:	0800a43d 	.word	0x0800a43d
 800a354:	0800a43d 	.word	0x0800a43d
 800a358:	0800a43d 	.word	0x0800a43d
 800a35c:	0800a3e7 	.word	0x0800a3e7
 800a360:	0800a43d 	.word	0x0800a43d
 800a364:	0800a43d 	.word	0x0800a43d
 800a368:	0800a43d 	.word	0x0800a43d
 800a36c:	0800a43d 	.word	0x0800a43d
 800a370:	0800a43d 	.word	0x0800a43d
 800a374:	0800a43d 	.word	0x0800a43d
 800a378:	0800a43d 	.word	0x0800a43d
 800a37c:	0800a3f7 	.word	0x0800a3f7
 800a380:	0800a43d 	.word	0x0800a43d
 800a384:	0800a43d 	.word	0x0800a43d
 800a388:	0800a43d 	.word	0x0800a43d
 800a38c:	0800a43d 	.word	0x0800a43d
 800a390:	0800a43d 	.word	0x0800a43d
 800a394:	0800a43d 	.word	0x0800a43d
 800a398:	0800a43d 	.word	0x0800a43d
 800a39c:	0800a43d 	.word	0x0800a43d
 800a3a0:	0800a43d 	.word	0x0800a43d
 800a3a4:	0800a43d 	.word	0x0800a43d
 800a3a8:	0800a43d 	.word	0x0800a43d
 800a3ac:	0800a43d 	.word	0x0800a43d
 800a3b0:	0800a43d 	.word	0x0800a43d
 800a3b4:	0800a43d 	.word	0x0800a43d
 800a3b8:	0800a43d 	.word	0x0800a43d
 800a3bc:	0800a42f 	.word	0x0800a42f
 800a3c0:	2b40      	cmp	r3, #64	@ 0x40
 800a3c2:	d037      	beq.n	800a434 <UART_SetConfig+0xc44>
 800a3c4:	e03a      	b.n	800a43c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3c6:	f7fc fd23 	bl	8006e10 <HAL_RCC_GetPCLK1Freq>
 800a3ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a3cc:	e03c      	b.n	800a448 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3ce:	f7fc fd35 	bl	8006e3c <HAL_RCC_GetPCLK2Freq>
 800a3d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a3d4:	e038      	b.n	800a448 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7fe fbcc 	bl	8008b78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a3e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3e4:	e030      	b.n	800a448 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3e6:	f107 0318 	add.w	r3, r7, #24
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7fe fd18 	bl	8008e20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3f4:	e028      	b.n	800a448 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3f6:	4b09      	ldr	r3, [pc, #36]	@ (800a41c <UART_SetConfig+0xc2c>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f003 0320 	and.w	r3, r3, #32
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d012      	beq.n	800a428 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a402:	4b06      	ldr	r3, [pc, #24]	@ (800a41c <UART_SetConfig+0xc2c>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	08db      	lsrs	r3, r3, #3
 800a408:	f003 0303 	and.w	r3, r3, #3
 800a40c:	4a04      	ldr	r2, [pc, #16]	@ (800a420 <UART_SetConfig+0xc30>)
 800a40e:	fa22 f303 	lsr.w	r3, r2, r3
 800a412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a414:	e018      	b.n	800a448 <UART_SetConfig+0xc58>
 800a416:	bf00      	nop
 800a418:	0800b654 	.word	0x0800b654
 800a41c:	58024400 	.word	0x58024400
 800a420:	03d09000 	.word	0x03d09000
 800a424:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a428:	4b24      	ldr	r3, [pc, #144]	@ (800a4bc <UART_SetConfig+0xccc>)
 800a42a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a42c:	e00c      	b.n	800a448 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a42e:	4b24      	ldr	r3, [pc, #144]	@ (800a4c0 <UART_SetConfig+0xcd0>)
 800a430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a432:	e009      	b.n	800a448 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a434:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a438:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a43a:	e005      	b.n	800a448 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a43c:	2300      	movs	r3, #0
 800a43e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a440:	2301      	movs	r3, #1
 800a442:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a446:	bf00      	nop
    }

    if (pclk != 0U)
 800a448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d021      	beq.n	800a492 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a452:	4a1c      	ldr	r2, [pc, #112]	@ (800a4c4 <UART_SetConfig+0xcd4>)
 800a454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a458:	461a      	mov	r2, r3
 800a45a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a45c:	fbb3 f2f2 	udiv	r2, r3, r2
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	085b      	lsrs	r3, r3, #1
 800a466:	441a      	add	r2, r3
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a470:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a474:	2b0f      	cmp	r3, #15
 800a476:	d909      	bls.n	800a48c <UART_SetConfig+0xc9c>
 800a478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a47a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a47e:	d205      	bcs.n	800a48c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a482:	b29a      	uxth	r2, r3
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	60da      	str	r2, [r3, #12]
 800a48a:	e002      	b.n	800a492 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	2201      	movs	r2, #1
 800a496:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	2201      	movs	r2, #1
 800a49e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a4ae:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3748      	adds	r7, #72	@ 0x48
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a4bc:	03d09000 	.word	0x03d09000
 800a4c0:	003d0900 	.word	0x003d0900
 800a4c4:	0800b654 	.word	0x0800b654

0800a4c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4d4:	f003 0308 	and.w	r3, r3, #8
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d00a      	beq.n	800a4f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	430a      	orrs	r2, r1
 800a4f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4f6:	f003 0301 	and.w	r3, r3, #1
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00a      	beq.n	800a514 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	430a      	orrs	r2, r1
 800a512:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a518:	f003 0302 	and.w	r3, r3, #2
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00a      	beq.n	800a536 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	430a      	orrs	r2, r1
 800a534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a53a:	f003 0304 	and.w	r3, r3, #4
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d00a      	beq.n	800a558 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	430a      	orrs	r2, r1
 800a556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a55c:	f003 0310 	and.w	r3, r3, #16
 800a560:	2b00      	cmp	r3, #0
 800a562:	d00a      	beq.n	800a57a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	689b      	ldr	r3, [r3, #8]
 800a56a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	430a      	orrs	r2, r1
 800a578:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a57e:	f003 0320 	and.w	r3, r3, #32
 800a582:	2b00      	cmp	r3, #0
 800a584:	d00a      	beq.n	800a59c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	430a      	orrs	r2, r1
 800a59a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d01a      	beq.n	800a5de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	430a      	orrs	r2, r1
 800a5bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a5c6:	d10a      	bne.n	800a5de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	430a      	orrs	r2, r1
 800a5dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d00a      	beq.n	800a600 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	430a      	orrs	r2, r1
 800a5fe:	605a      	str	r2, [r3, #4]
  }
}
 800a600:	bf00      	nop
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b098      	sub	sp, #96	@ 0x60
 800a610:	af02      	add	r7, sp, #8
 800a612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2200      	movs	r2, #0
 800a618:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a61c:	f7f8 f822 	bl	8002664 <HAL_GetTick>
 800a620:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f003 0308 	and.w	r3, r3, #8
 800a62c:	2b08      	cmp	r3, #8
 800a62e:	d12f      	bne.n	800a690 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a630:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a634:	9300      	str	r3, [sp, #0]
 800a636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a638:	2200      	movs	r2, #0
 800a63a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 f88e 	bl	800a760 <UART_WaitOnFlagUntilTimeout>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d022      	beq.n	800a690 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a652:	e853 3f00 	ldrex	r3, [r3]
 800a656:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a65a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a65e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	461a      	mov	r2, r3
 800a666:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a668:	647b      	str	r3, [r7, #68]	@ 0x44
 800a66a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a66c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a66e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a670:	e841 2300 	strex	r3, r2, [r1]
 800a674:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d1e6      	bne.n	800a64a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2220      	movs	r2, #32
 800a680:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a68c:	2303      	movs	r3, #3
 800a68e:	e063      	b.n	800a758 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f003 0304 	and.w	r3, r3, #4
 800a69a:	2b04      	cmp	r3, #4
 800a69c:	d149      	bne.n	800a732 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a69e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a6a2:	9300      	str	r3, [sp, #0]
 800a6a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 f857 	bl	800a760 <UART_WaitOnFlagUntilTimeout>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d03c      	beq.n	800a732 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c0:	e853 3f00 	ldrex	r3, [r3]
 800a6c4:	623b      	str	r3, [r7, #32]
   return(result);
 800a6c6:	6a3b      	ldr	r3, [r7, #32]
 800a6c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a6cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6d6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a6d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a6dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6de:	e841 2300 	strex	r3, r2, [r1]
 800a6e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a6e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d1e6      	bne.n	800a6b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	3308      	adds	r3, #8
 800a6f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	e853 3f00 	ldrex	r3, [r3]
 800a6f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f023 0301 	bic.w	r3, r3, #1
 800a700:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	3308      	adds	r3, #8
 800a708:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a70a:	61fa      	str	r2, [r7, #28]
 800a70c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a70e:	69b9      	ldr	r1, [r7, #24]
 800a710:	69fa      	ldr	r2, [r7, #28]
 800a712:	e841 2300 	strex	r3, r2, [r1]
 800a716:	617b      	str	r3, [r7, #20]
   return(result);
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d1e5      	bne.n	800a6ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2220      	movs	r2, #32
 800a722:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2200      	movs	r2, #0
 800a72a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a72e:	2303      	movs	r3, #3
 800a730:	e012      	b.n	800a758 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2220      	movs	r2, #32
 800a736:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2220      	movs	r2, #32
 800a73e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2200      	movs	r2, #0
 800a746:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2200      	movs	r2, #0
 800a74c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a756:	2300      	movs	r3, #0
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3758      	adds	r7, #88	@ 0x58
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	603b      	str	r3, [r7, #0]
 800a76c:	4613      	mov	r3, r2
 800a76e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a770:	e04f      	b.n	800a812 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a772:	69bb      	ldr	r3, [r7, #24]
 800a774:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a778:	d04b      	beq.n	800a812 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a77a:	f7f7 ff73 	bl	8002664 <HAL_GetTick>
 800a77e:	4602      	mov	r2, r0
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	1ad3      	subs	r3, r2, r3
 800a784:	69ba      	ldr	r2, [r7, #24]
 800a786:	429a      	cmp	r2, r3
 800a788:	d302      	bcc.n	800a790 <UART_WaitOnFlagUntilTimeout+0x30>
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d101      	bne.n	800a794 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a790:	2303      	movs	r3, #3
 800a792:	e04e      	b.n	800a832 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f003 0304 	and.w	r3, r3, #4
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d037      	beq.n	800a812 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	2b80      	cmp	r3, #128	@ 0x80
 800a7a6:	d034      	beq.n	800a812 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	2b40      	cmp	r3, #64	@ 0x40
 800a7ac:	d031      	beq.n	800a812 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	69db      	ldr	r3, [r3, #28]
 800a7b4:	f003 0308 	and.w	r3, r3, #8
 800a7b8:	2b08      	cmp	r3, #8
 800a7ba:	d110      	bne.n	800a7de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2208      	movs	r2, #8
 800a7c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a7c4:	68f8      	ldr	r0, [r7, #12]
 800a7c6:	f000 f839 	bl	800a83c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2208      	movs	r2, #8
 800a7ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e029      	b.n	800a832 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	69db      	ldr	r3, [r3, #28]
 800a7e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a7e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a7ec:	d111      	bne.n	800a812 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a7f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a7f8:	68f8      	ldr	r0, [r7, #12]
 800a7fa:	f000 f81f 	bl	800a83c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2220      	movs	r2, #32
 800a802:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2200      	movs	r2, #0
 800a80a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a80e:	2303      	movs	r3, #3
 800a810:	e00f      	b.n	800a832 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	69da      	ldr	r2, [r3, #28]
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	4013      	ands	r3, r2
 800a81c:	68ba      	ldr	r2, [r7, #8]
 800a81e:	429a      	cmp	r2, r3
 800a820:	bf0c      	ite	eq
 800a822:	2301      	moveq	r3, #1
 800a824:	2300      	movne	r3, #0
 800a826:	b2db      	uxtb	r3, r3
 800a828:	461a      	mov	r2, r3
 800a82a:	79fb      	ldrb	r3, [r7, #7]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d0a0      	beq.n	800a772 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a830:	2300      	movs	r3, #0
}
 800a832:	4618      	mov	r0, r3
 800a834:	3710      	adds	r7, #16
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
	...

0800a83c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b095      	sub	sp, #84	@ 0x54
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a84a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a84c:	e853 3f00 	ldrex	r3, [r3]
 800a850:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a854:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a858:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	461a      	mov	r2, r3
 800a860:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a862:	643b      	str	r3, [r7, #64]	@ 0x40
 800a864:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a866:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a868:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a86a:	e841 2300 	strex	r3, r2, [r1]
 800a86e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a872:	2b00      	cmp	r3, #0
 800a874:	d1e6      	bne.n	800a844 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	3308      	adds	r3, #8
 800a87c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a87e:	6a3b      	ldr	r3, [r7, #32]
 800a880:	e853 3f00 	ldrex	r3, [r3]
 800a884:	61fb      	str	r3, [r7, #28]
   return(result);
 800a886:	69fa      	ldr	r2, [r7, #28]
 800a888:	4b1e      	ldr	r3, [pc, #120]	@ (800a904 <UART_EndRxTransfer+0xc8>)
 800a88a:	4013      	ands	r3, r2
 800a88c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	3308      	adds	r3, #8
 800a894:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a896:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a898:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a89a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a89c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a89e:	e841 2300 	strex	r3, r2, [r1]
 800a8a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a8a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d1e5      	bne.n	800a876 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d118      	bne.n	800a8e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	e853 3f00 	ldrex	r3, [r3]
 800a8be:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	f023 0310 	bic.w	r3, r3, #16
 800a8c6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8d0:	61bb      	str	r3, [r7, #24]
 800a8d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8d4:	6979      	ldr	r1, [r7, #20]
 800a8d6:	69ba      	ldr	r2, [r7, #24]
 800a8d8:	e841 2300 	strex	r3, r2, [r1]
 800a8dc:	613b      	str	r3, [r7, #16]
   return(result);
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d1e6      	bne.n	800a8b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2220      	movs	r2, #32
 800a8e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a8f8:	bf00      	nop
 800a8fa:	3754      	adds	r7, #84	@ 0x54
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr
 800a904:	effffffe 	.word	0xeffffffe

0800a908 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a908:	b480      	push	{r7}
 800a90a:	b085      	sub	sp, #20
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a916:	2b01      	cmp	r3, #1
 800a918:	d101      	bne.n	800a91e <HAL_UARTEx_DisableFifoMode+0x16>
 800a91a:	2302      	movs	r3, #2
 800a91c:	e027      	b.n	800a96e <HAL_UARTEx_DisableFifoMode+0x66>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2201      	movs	r2, #1
 800a922:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2224      	movs	r2, #36	@ 0x24
 800a92a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	681a      	ldr	r2, [r3, #0]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f022 0201 	bic.w	r2, r2, #1
 800a944:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a94c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2200      	movs	r2, #0
 800a952:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2220      	movs	r2, #32
 800a960:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a96c:	2300      	movs	r3, #0
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3714      	adds	r7, #20
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr

0800a97a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b084      	sub	sp, #16
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
 800a982:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d101      	bne.n	800a992 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a98e:	2302      	movs	r3, #2
 800a990:	e02d      	b.n	800a9ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2201      	movs	r2, #1
 800a996:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2224      	movs	r2, #36	@ 0x24
 800a99e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f022 0201 	bic.w	r2, r2, #1
 800a9b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	683a      	ldr	r2, [r7, #0]
 800a9ca:	430a      	orrs	r2, r1
 800a9cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 f850 	bl	800aa74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	68fa      	ldr	r2, [r7, #12]
 800a9da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2220      	movs	r2, #32
 800a9e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a9ec:	2300      	movs	r3, #0
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3710      	adds	r7, #16
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}

0800a9f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b084      	sub	sp, #16
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
 800a9fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d101      	bne.n	800aa0e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aa0a:	2302      	movs	r3, #2
 800aa0c:	e02d      	b.n	800aa6a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2201      	movs	r2, #1
 800aa12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2224      	movs	r2, #36	@ 0x24
 800aa1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f022 0201 	bic.w	r2, r2, #1
 800aa34:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	689b      	ldr	r3, [r3, #8]
 800aa3c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	683a      	ldr	r2, [r7, #0]
 800aa46:	430a      	orrs	r2, r1
 800aa48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 f812 	bl	800aa74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	68fa      	ldr	r2, [r7, #12]
 800aa56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2220      	movs	r2, #32
 800aa5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2200      	movs	r2, #0
 800aa64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa68:	2300      	movs	r3, #0
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3710      	adds	r7, #16
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
	...

0800aa74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b085      	sub	sp, #20
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d108      	bne.n	800aa96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa94:	e031      	b.n	800aafa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa96:	2310      	movs	r3, #16
 800aa98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa9a:	2310      	movs	r3, #16
 800aa9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	689b      	ldr	r3, [r3, #8]
 800aaa4:	0e5b      	lsrs	r3, r3, #25
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	f003 0307 	and.w	r3, r3, #7
 800aaac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	689b      	ldr	r3, [r3, #8]
 800aab4:	0f5b      	lsrs	r3, r3, #29
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	f003 0307 	and.w	r3, r3, #7
 800aabc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aabe:	7bbb      	ldrb	r3, [r7, #14]
 800aac0:	7b3a      	ldrb	r2, [r7, #12]
 800aac2:	4911      	ldr	r1, [pc, #68]	@ (800ab08 <UARTEx_SetNbDataToProcess+0x94>)
 800aac4:	5c8a      	ldrb	r2, [r1, r2]
 800aac6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aaca:	7b3a      	ldrb	r2, [r7, #12]
 800aacc:	490f      	ldr	r1, [pc, #60]	@ (800ab0c <UARTEx_SetNbDataToProcess+0x98>)
 800aace:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aad0:	fb93 f3f2 	sdiv	r3, r3, r2
 800aad4:	b29a      	uxth	r2, r3
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aadc:	7bfb      	ldrb	r3, [r7, #15]
 800aade:	7b7a      	ldrb	r2, [r7, #13]
 800aae0:	4909      	ldr	r1, [pc, #36]	@ (800ab08 <UARTEx_SetNbDataToProcess+0x94>)
 800aae2:	5c8a      	ldrb	r2, [r1, r2]
 800aae4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aae8:	7b7a      	ldrb	r2, [r7, #13]
 800aaea:	4908      	ldr	r1, [pc, #32]	@ (800ab0c <UARTEx_SetNbDataToProcess+0x98>)
 800aaec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aaee:	fb93 f3f2 	sdiv	r3, r3, r2
 800aaf2:	b29a      	uxth	r2, r3
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800aafa:	bf00      	nop
 800aafc:	3714      	adds	r7, #20
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr
 800ab06:	bf00      	nop
 800ab08:	0800b66c 	.word	0x0800b66c
 800ab0c:	0800b674 	.word	0x0800b674

0800ab10 <siprintf>:
 800ab10:	b40e      	push	{r1, r2, r3}
 800ab12:	b510      	push	{r4, lr}
 800ab14:	b09d      	sub	sp, #116	@ 0x74
 800ab16:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ab18:	9002      	str	r0, [sp, #8]
 800ab1a:	9006      	str	r0, [sp, #24]
 800ab1c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ab20:	480a      	ldr	r0, [pc, #40]	@ (800ab4c <siprintf+0x3c>)
 800ab22:	9107      	str	r1, [sp, #28]
 800ab24:	9104      	str	r1, [sp, #16]
 800ab26:	490a      	ldr	r1, [pc, #40]	@ (800ab50 <siprintf+0x40>)
 800ab28:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab2c:	9105      	str	r1, [sp, #20]
 800ab2e:	2400      	movs	r4, #0
 800ab30:	a902      	add	r1, sp, #8
 800ab32:	6800      	ldr	r0, [r0, #0]
 800ab34:	9301      	str	r3, [sp, #4]
 800ab36:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ab38:	f000 f9a2 	bl	800ae80 <_svfiprintf_r>
 800ab3c:	9b02      	ldr	r3, [sp, #8]
 800ab3e:	701c      	strb	r4, [r3, #0]
 800ab40:	b01d      	add	sp, #116	@ 0x74
 800ab42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab46:	b003      	add	sp, #12
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop
 800ab4c:	24000018 	.word	0x24000018
 800ab50:	ffff0208 	.word	0xffff0208

0800ab54 <memset>:
 800ab54:	4402      	add	r2, r0
 800ab56:	4603      	mov	r3, r0
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d100      	bne.n	800ab5e <memset+0xa>
 800ab5c:	4770      	bx	lr
 800ab5e:	f803 1b01 	strb.w	r1, [r3], #1
 800ab62:	e7f9      	b.n	800ab58 <memset+0x4>

0800ab64 <__errno>:
 800ab64:	4b01      	ldr	r3, [pc, #4]	@ (800ab6c <__errno+0x8>)
 800ab66:	6818      	ldr	r0, [r3, #0]
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	24000018 	.word	0x24000018

0800ab70 <__libc_init_array>:
 800ab70:	b570      	push	{r4, r5, r6, lr}
 800ab72:	4d0d      	ldr	r5, [pc, #52]	@ (800aba8 <__libc_init_array+0x38>)
 800ab74:	4c0d      	ldr	r4, [pc, #52]	@ (800abac <__libc_init_array+0x3c>)
 800ab76:	1b64      	subs	r4, r4, r5
 800ab78:	10a4      	asrs	r4, r4, #2
 800ab7a:	2600      	movs	r6, #0
 800ab7c:	42a6      	cmp	r6, r4
 800ab7e:	d109      	bne.n	800ab94 <__libc_init_array+0x24>
 800ab80:	4d0b      	ldr	r5, [pc, #44]	@ (800abb0 <__libc_init_array+0x40>)
 800ab82:	4c0c      	ldr	r4, [pc, #48]	@ (800abb4 <__libc_init_array+0x44>)
 800ab84:	f000 fc64 	bl	800b450 <_init>
 800ab88:	1b64      	subs	r4, r4, r5
 800ab8a:	10a4      	asrs	r4, r4, #2
 800ab8c:	2600      	movs	r6, #0
 800ab8e:	42a6      	cmp	r6, r4
 800ab90:	d105      	bne.n	800ab9e <__libc_init_array+0x2e>
 800ab92:	bd70      	pop	{r4, r5, r6, pc}
 800ab94:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab98:	4798      	blx	r3
 800ab9a:	3601      	adds	r6, #1
 800ab9c:	e7ee      	b.n	800ab7c <__libc_init_array+0xc>
 800ab9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aba2:	4798      	blx	r3
 800aba4:	3601      	adds	r6, #1
 800aba6:	e7f2      	b.n	800ab8e <__libc_init_array+0x1e>
 800aba8:	0800b6b8 	.word	0x0800b6b8
 800abac:	0800b6b8 	.word	0x0800b6b8
 800abb0:	0800b6b8 	.word	0x0800b6b8
 800abb4:	0800b6c0 	.word	0x0800b6c0

0800abb8 <__retarget_lock_acquire_recursive>:
 800abb8:	4770      	bx	lr

0800abba <__retarget_lock_release_recursive>:
 800abba:	4770      	bx	lr

0800abbc <memcpy>:
 800abbc:	440a      	add	r2, r1
 800abbe:	4291      	cmp	r1, r2
 800abc0:	f100 33ff 	add.w	r3, r0, #4294967295
 800abc4:	d100      	bne.n	800abc8 <memcpy+0xc>
 800abc6:	4770      	bx	lr
 800abc8:	b510      	push	{r4, lr}
 800abca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abd2:	4291      	cmp	r1, r2
 800abd4:	d1f9      	bne.n	800abca <memcpy+0xe>
 800abd6:	bd10      	pop	{r4, pc}

0800abd8 <_free_r>:
 800abd8:	b538      	push	{r3, r4, r5, lr}
 800abda:	4605      	mov	r5, r0
 800abdc:	2900      	cmp	r1, #0
 800abde:	d041      	beq.n	800ac64 <_free_r+0x8c>
 800abe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abe4:	1f0c      	subs	r4, r1, #4
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	bfb8      	it	lt
 800abea:	18e4      	addlt	r4, r4, r3
 800abec:	f000 f8e0 	bl	800adb0 <__malloc_lock>
 800abf0:	4a1d      	ldr	r2, [pc, #116]	@ (800ac68 <_free_r+0x90>)
 800abf2:	6813      	ldr	r3, [r2, #0]
 800abf4:	b933      	cbnz	r3, 800ac04 <_free_r+0x2c>
 800abf6:	6063      	str	r3, [r4, #4]
 800abf8:	6014      	str	r4, [r2, #0]
 800abfa:	4628      	mov	r0, r5
 800abfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac00:	f000 b8dc 	b.w	800adbc <__malloc_unlock>
 800ac04:	42a3      	cmp	r3, r4
 800ac06:	d908      	bls.n	800ac1a <_free_r+0x42>
 800ac08:	6820      	ldr	r0, [r4, #0]
 800ac0a:	1821      	adds	r1, r4, r0
 800ac0c:	428b      	cmp	r3, r1
 800ac0e:	bf01      	itttt	eq
 800ac10:	6819      	ldreq	r1, [r3, #0]
 800ac12:	685b      	ldreq	r3, [r3, #4]
 800ac14:	1809      	addeq	r1, r1, r0
 800ac16:	6021      	streq	r1, [r4, #0]
 800ac18:	e7ed      	b.n	800abf6 <_free_r+0x1e>
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	b10b      	cbz	r3, 800ac24 <_free_r+0x4c>
 800ac20:	42a3      	cmp	r3, r4
 800ac22:	d9fa      	bls.n	800ac1a <_free_r+0x42>
 800ac24:	6811      	ldr	r1, [r2, #0]
 800ac26:	1850      	adds	r0, r2, r1
 800ac28:	42a0      	cmp	r0, r4
 800ac2a:	d10b      	bne.n	800ac44 <_free_r+0x6c>
 800ac2c:	6820      	ldr	r0, [r4, #0]
 800ac2e:	4401      	add	r1, r0
 800ac30:	1850      	adds	r0, r2, r1
 800ac32:	4283      	cmp	r3, r0
 800ac34:	6011      	str	r1, [r2, #0]
 800ac36:	d1e0      	bne.n	800abfa <_free_r+0x22>
 800ac38:	6818      	ldr	r0, [r3, #0]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	6053      	str	r3, [r2, #4]
 800ac3e:	4408      	add	r0, r1
 800ac40:	6010      	str	r0, [r2, #0]
 800ac42:	e7da      	b.n	800abfa <_free_r+0x22>
 800ac44:	d902      	bls.n	800ac4c <_free_r+0x74>
 800ac46:	230c      	movs	r3, #12
 800ac48:	602b      	str	r3, [r5, #0]
 800ac4a:	e7d6      	b.n	800abfa <_free_r+0x22>
 800ac4c:	6820      	ldr	r0, [r4, #0]
 800ac4e:	1821      	adds	r1, r4, r0
 800ac50:	428b      	cmp	r3, r1
 800ac52:	bf04      	itt	eq
 800ac54:	6819      	ldreq	r1, [r3, #0]
 800ac56:	685b      	ldreq	r3, [r3, #4]
 800ac58:	6063      	str	r3, [r4, #4]
 800ac5a:	bf04      	itt	eq
 800ac5c:	1809      	addeq	r1, r1, r0
 800ac5e:	6021      	streq	r1, [r4, #0]
 800ac60:	6054      	str	r4, [r2, #4]
 800ac62:	e7ca      	b.n	800abfa <_free_r+0x22>
 800ac64:	bd38      	pop	{r3, r4, r5, pc}
 800ac66:	bf00      	nop
 800ac68:	24000e40 	.word	0x24000e40

0800ac6c <sbrk_aligned>:
 800ac6c:	b570      	push	{r4, r5, r6, lr}
 800ac6e:	4e0f      	ldr	r6, [pc, #60]	@ (800acac <sbrk_aligned+0x40>)
 800ac70:	460c      	mov	r4, r1
 800ac72:	6831      	ldr	r1, [r6, #0]
 800ac74:	4605      	mov	r5, r0
 800ac76:	b911      	cbnz	r1, 800ac7e <sbrk_aligned+0x12>
 800ac78:	f000 fba4 	bl	800b3c4 <_sbrk_r>
 800ac7c:	6030      	str	r0, [r6, #0]
 800ac7e:	4621      	mov	r1, r4
 800ac80:	4628      	mov	r0, r5
 800ac82:	f000 fb9f 	bl	800b3c4 <_sbrk_r>
 800ac86:	1c43      	adds	r3, r0, #1
 800ac88:	d103      	bne.n	800ac92 <sbrk_aligned+0x26>
 800ac8a:	f04f 34ff 	mov.w	r4, #4294967295
 800ac8e:	4620      	mov	r0, r4
 800ac90:	bd70      	pop	{r4, r5, r6, pc}
 800ac92:	1cc4      	adds	r4, r0, #3
 800ac94:	f024 0403 	bic.w	r4, r4, #3
 800ac98:	42a0      	cmp	r0, r4
 800ac9a:	d0f8      	beq.n	800ac8e <sbrk_aligned+0x22>
 800ac9c:	1a21      	subs	r1, r4, r0
 800ac9e:	4628      	mov	r0, r5
 800aca0:	f000 fb90 	bl	800b3c4 <_sbrk_r>
 800aca4:	3001      	adds	r0, #1
 800aca6:	d1f2      	bne.n	800ac8e <sbrk_aligned+0x22>
 800aca8:	e7ef      	b.n	800ac8a <sbrk_aligned+0x1e>
 800acaa:	bf00      	nop
 800acac:	24000e3c 	.word	0x24000e3c

0800acb0 <_malloc_r>:
 800acb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acb4:	1ccd      	adds	r5, r1, #3
 800acb6:	f025 0503 	bic.w	r5, r5, #3
 800acba:	3508      	adds	r5, #8
 800acbc:	2d0c      	cmp	r5, #12
 800acbe:	bf38      	it	cc
 800acc0:	250c      	movcc	r5, #12
 800acc2:	2d00      	cmp	r5, #0
 800acc4:	4606      	mov	r6, r0
 800acc6:	db01      	blt.n	800accc <_malloc_r+0x1c>
 800acc8:	42a9      	cmp	r1, r5
 800acca:	d904      	bls.n	800acd6 <_malloc_r+0x26>
 800accc:	230c      	movs	r3, #12
 800acce:	6033      	str	r3, [r6, #0]
 800acd0:	2000      	movs	r0, #0
 800acd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800adac <_malloc_r+0xfc>
 800acda:	f000 f869 	bl	800adb0 <__malloc_lock>
 800acde:	f8d8 3000 	ldr.w	r3, [r8]
 800ace2:	461c      	mov	r4, r3
 800ace4:	bb44      	cbnz	r4, 800ad38 <_malloc_r+0x88>
 800ace6:	4629      	mov	r1, r5
 800ace8:	4630      	mov	r0, r6
 800acea:	f7ff ffbf 	bl	800ac6c <sbrk_aligned>
 800acee:	1c43      	adds	r3, r0, #1
 800acf0:	4604      	mov	r4, r0
 800acf2:	d158      	bne.n	800ada6 <_malloc_r+0xf6>
 800acf4:	f8d8 4000 	ldr.w	r4, [r8]
 800acf8:	4627      	mov	r7, r4
 800acfa:	2f00      	cmp	r7, #0
 800acfc:	d143      	bne.n	800ad86 <_malloc_r+0xd6>
 800acfe:	2c00      	cmp	r4, #0
 800ad00:	d04b      	beq.n	800ad9a <_malloc_r+0xea>
 800ad02:	6823      	ldr	r3, [r4, #0]
 800ad04:	4639      	mov	r1, r7
 800ad06:	4630      	mov	r0, r6
 800ad08:	eb04 0903 	add.w	r9, r4, r3
 800ad0c:	f000 fb5a 	bl	800b3c4 <_sbrk_r>
 800ad10:	4581      	cmp	r9, r0
 800ad12:	d142      	bne.n	800ad9a <_malloc_r+0xea>
 800ad14:	6821      	ldr	r1, [r4, #0]
 800ad16:	1a6d      	subs	r5, r5, r1
 800ad18:	4629      	mov	r1, r5
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	f7ff ffa6 	bl	800ac6c <sbrk_aligned>
 800ad20:	3001      	adds	r0, #1
 800ad22:	d03a      	beq.n	800ad9a <_malloc_r+0xea>
 800ad24:	6823      	ldr	r3, [r4, #0]
 800ad26:	442b      	add	r3, r5
 800ad28:	6023      	str	r3, [r4, #0]
 800ad2a:	f8d8 3000 	ldr.w	r3, [r8]
 800ad2e:	685a      	ldr	r2, [r3, #4]
 800ad30:	bb62      	cbnz	r2, 800ad8c <_malloc_r+0xdc>
 800ad32:	f8c8 7000 	str.w	r7, [r8]
 800ad36:	e00f      	b.n	800ad58 <_malloc_r+0xa8>
 800ad38:	6822      	ldr	r2, [r4, #0]
 800ad3a:	1b52      	subs	r2, r2, r5
 800ad3c:	d420      	bmi.n	800ad80 <_malloc_r+0xd0>
 800ad3e:	2a0b      	cmp	r2, #11
 800ad40:	d917      	bls.n	800ad72 <_malloc_r+0xc2>
 800ad42:	1961      	adds	r1, r4, r5
 800ad44:	42a3      	cmp	r3, r4
 800ad46:	6025      	str	r5, [r4, #0]
 800ad48:	bf18      	it	ne
 800ad4a:	6059      	strne	r1, [r3, #4]
 800ad4c:	6863      	ldr	r3, [r4, #4]
 800ad4e:	bf08      	it	eq
 800ad50:	f8c8 1000 	streq.w	r1, [r8]
 800ad54:	5162      	str	r2, [r4, r5]
 800ad56:	604b      	str	r3, [r1, #4]
 800ad58:	4630      	mov	r0, r6
 800ad5a:	f000 f82f 	bl	800adbc <__malloc_unlock>
 800ad5e:	f104 000b 	add.w	r0, r4, #11
 800ad62:	1d23      	adds	r3, r4, #4
 800ad64:	f020 0007 	bic.w	r0, r0, #7
 800ad68:	1ac2      	subs	r2, r0, r3
 800ad6a:	bf1c      	itt	ne
 800ad6c:	1a1b      	subne	r3, r3, r0
 800ad6e:	50a3      	strne	r3, [r4, r2]
 800ad70:	e7af      	b.n	800acd2 <_malloc_r+0x22>
 800ad72:	6862      	ldr	r2, [r4, #4]
 800ad74:	42a3      	cmp	r3, r4
 800ad76:	bf0c      	ite	eq
 800ad78:	f8c8 2000 	streq.w	r2, [r8]
 800ad7c:	605a      	strne	r2, [r3, #4]
 800ad7e:	e7eb      	b.n	800ad58 <_malloc_r+0xa8>
 800ad80:	4623      	mov	r3, r4
 800ad82:	6864      	ldr	r4, [r4, #4]
 800ad84:	e7ae      	b.n	800ace4 <_malloc_r+0x34>
 800ad86:	463c      	mov	r4, r7
 800ad88:	687f      	ldr	r7, [r7, #4]
 800ad8a:	e7b6      	b.n	800acfa <_malloc_r+0x4a>
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	42a3      	cmp	r3, r4
 800ad92:	d1fb      	bne.n	800ad8c <_malloc_r+0xdc>
 800ad94:	2300      	movs	r3, #0
 800ad96:	6053      	str	r3, [r2, #4]
 800ad98:	e7de      	b.n	800ad58 <_malloc_r+0xa8>
 800ad9a:	230c      	movs	r3, #12
 800ad9c:	6033      	str	r3, [r6, #0]
 800ad9e:	4630      	mov	r0, r6
 800ada0:	f000 f80c 	bl	800adbc <__malloc_unlock>
 800ada4:	e794      	b.n	800acd0 <_malloc_r+0x20>
 800ada6:	6005      	str	r5, [r0, #0]
 800ada8:	e7d6      	b.n	800ad58 <_malloc_r+0xa8>
 800adaa:	bf00      	nop
 800adac:	24000e40 	.word	0x24000e40

0800adb0 <__malloc_lock>:
 800adb0:	4801      	ldr	r0, [pc, #4]	@ (800adb8 <__malloc_lock+0x8>)
 800adb2:	f7ff bf01 	b.w	800abb8 <__retarget_lock_acquire_recursive>
 800adb6:	bf00      	nop
 800adb8:	24000e38 	.word	0x24000e38

0800adbc <__malloc_unlock>:
 800adbc:	4801      	ldr	r0, [pc, #4]	@ (800adc4 <__malloc_unlock+0x8>)
 800adbe:	f7ff befc 	b.w	800abba <__retarget_lock_release_recursive>
 800adc2:	bf00      	nop
 800adc4:	24000e38 	.word	0x24000e38

0800adc8 <__ssputs_r>:
 800adc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adcc:	688e      	ldr	r6, [r1, #8]
 800adce:	461f      	mov	r7, r3
 800add0:	42be      	cmp	r6, r7
 800add2:	680b      	ldr	r3, [r1, #0]
 800add4:	4682      	mov	sl, r0
 800add6:	460c      	mov	r4, r1
 800add8:	4690      	mov	r8, r2
 800adda:	d82d      	bhi.n	800ae38 <__ssputs_r+0x70>
 800addc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ade0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ade4:	d026      	beq.n	800ae34 <__ssputs_r+0x6c>
 800ade6:	6965      	ldr	r5, [r4, #20]
 800ade8:	6909      	ldr	r1, [r1, #16]
 800adea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800adee:	eba3 0901 	sub.w	r9, r3, r1
 800adf2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800adf6:	1c7b      	adds	r3, r7, #1
 800adf8:	444b      	add	r3, r9
 800adfa:	106d      	asrs	r5, r5, #1
 800adfc:	429d      	cmp	r5, r3
 800adfe:	bf38      	it	cc
 800ae00:	461d      	movcc	r5, r3
 800ae02:	0553      	lsls	r3, r2, #21
 800ae04:	d527      	bpl.n	800ae56 <__ssputs_r+0x8e>
 800ae06:	4629      	mov	r1, r5
 800ae08:	f7ff ff52 	bl	800acb0 <_malloc_r>
 800ae0c:	4606      	mov	r6, r0
 800ae0e:	b360      	cbz	r0, 800ae6a <__ssputs_r+0xa2>
 800ae10:	6921      	ldr	r1, [r4, #16]
 800ae12:	464a      	mov	r2, r9
 800ae14:	f7ff fed2 	bl	800abbc <memcpy>
 800ae18:	89a3      	ldrh	r3, [r4, #12]
 800ae1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ae1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae22:	81a3      	strh	r3, [r4, #12]
 800ae24:	6126      	str	r6, [r4, #16]
 800ae26:	6165      	str	r5, [r4, #20]
 800ae28:	444e      	add	r6, r9
 800ae2a:	eba5 0509 	sub.w	r5, r5, r9
 800ae2e:	6026      	str	r6, [r4, #0]
 800ae30:	60a5      	str	r5, [r4, #8]
 800ae32:	463e      	mov	r6, r7
 800ae34:	42be      	cmp	r6, r7
 800ae36:	d900      	bls.n	800ae3a <__ssputs_r+0x72>
 800ae38:	463e      	mov	r6, r7
 800ae3a:	6820      	ldr	r0, [r4, #0]
 800ae3c:	4632      	mov	r2, r6
 800ae3e:	4641      	mov	r1, r8
 800ae40:	f000 faa6 	bl	800b390 <memmove>
 800ae44:	68a3      	ldr	r3, [r4, #8]
 800ae46:	1b9b      	subs	r3, r3, r6
 800ae48:	60a3      	str	r3, [r4, #8]
 800ae4a:	6823      	ldr	r3, [r4, #0]
 800ae4c:	4433      	add	r3, r6
 800ae4e:	6023      	str	r3, [r4, #0]
 800ae50:	2000      	movs	r0, #0
 800ae52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae56:	462a      	mov	r2, r5
 800ae58:	f000 fac4 	bl	800b3e4 <_realloc_r>
 800ae5c:	4606      	mov	r6, r0
 800ae5e:	2800      	cmp	r0, #0
 800ae60:	d1e0      	bne.n	800ae24 <__ssputs_r+0x5c>
 800ae62:	6921      	ldr	r1, [r4, #16]
 800ae64:	4650      	mov	r0, sl
 800ae66:	f7ff feb7 	bl	800abd8 <_free_r>
 800ae6a:	230c      	movs	r3, #12
 800ae6c:	f8ca 3000 	str.w	r3, [sl]
 800ae70:	89a3      	ldrh	r3, [r4, #12]
 800ae72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae76:	81a3      	strh	r3, [r4, #12]
 800ae78:	f04f 30ff 	mov.w	r0, #4294967295
 800ae7c:	e7e9      	b.n	800ae52 <__ssputs_r+0x8a>
	...

0800ae80 <_svfiprintf_r>:
 800ae80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae84:	4698      	mov	r8, r3
 800ae86:	898b      	ldrh	r3, [r1, #12]
 800ae88:	061b      	lsls	r3, r3, #24
 800ae8a:	b09d      	sub	sp, #116	@ 0x74
 800ae8c:	4607      	mov	r7, r0
 800ae8e:	460d      	mov	r5, r1
 800ae90:	4614      	mov	r4, r2
 800ae92:	d510      	bpl.n	800aeb6 <_svfiprintf_r+0x36>
 800ae94:	690b      	ldr	r3, [r1, #16]
 800ae96:	b973      	cbnz	r3, 800aeb6 <_svfiprintf_r+0x36>
 800ae98:	2140      	movs	r1, #64	@ 0x40
 800ae9a:	f7ff ff09 	bl	800acb0 <_malloc_r>
 800ae9e:	6028      	str	r0, [r5, #0]
 800aea0:	6128      	str	r0, [r5, #16]
 800aea2:	b930      	cbnz	r0, 800aeb2 <_svfiprintf_r+0x32>
 800aea4:	230c      	movs	r3, #12
 800aea6:	603b      	str	r3, [r7, #0]
 800aea8:	f04f 30ff 	mov.w	r0, #4294967295
 800aeac:	b01d      	add	sp, #116	@ 0x74
 800aeae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeb2:	2340      	movs	r3, #64	@ 0x40
 800aeb4:	616b      	str	r3, [r5, #20]
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800aeba:	2320      	movs	r3, #32
 800aebc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aec0:	f8cd 800c 	str.w	r8, [sp, #12]
 800aec4:	2330      	movs	r3, #48	@ 0x30
 800aec6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b064 <_svfiprintf_r+0x1e4>
 800aeca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aece:	f04f 0901 	mov.w	r9, #1
 800aed2:	4623      	mov	r3, r4
 800aed4:	469a      	mov	sl, r3
 800aed6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aeda:	b10a      	cbz	r2, 800aee0 <_svfiprintf_r+0x60>
 800aedc:	2a25      	cmp	r2, #37	@ 0x25
 800aede:	d1f9      	bne.n	800aed4 <_svfiprintf_r+0x54>
 800aee0:	ebba 0b04 	subs.w	fp, sl, r4
 800aee4:	d00b      	beq.n	800aefe <_svfiprintf_r+0x7e>
 800aee6:	465b      	mov	r3, fp
 800aee8:	4622      	mov	r2, r4
 800aeea:	4629      	mov	r1, r5
 800aeec:	4638      	mov	r0, r7
 800aeee:	f7ff ff6b 	bl	800adc8 <__ssputs_r>
 800aef2:	3001      	adds	r0, #1
 800aef4:	f000 80a7 	beq.w	800b046 <_svfiprintf_r+0x1c6>
 800aef8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aefa:	445a      	add	r2, fp
 800aefc:	9209      	str	r2, [sp, #36]	@ 0x24
 800aefe:	f89a 3000 	ldrb.w	r3, [sl]
 800af02:	2b00      	cmp	r3, #0
 800af04:	f000 809f 	beq.w	800b046 <_svfiprintf_r+0x1c6>
 800af08:	2300      	movs	r3, #0
 800af0a:	f04f 32ff 	mov.w	r2, #4294967295
 800af0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af12:	f10a 0a01 	add.w	sl, sl, #1
 800af16:	9304      	str	r3, [sp, #16]
 800af18:	9307      	str	r3, [sp, #28]
 800af1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af1e:	931a      	str	r3, [sp, #104]	@ 0x68
 800af20:	4654      	mov	r4, sl
 800af22:	2205      	movs	r2, #5
 800af24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af28:	484e      	ldr	r0, [pc, #312]	@ (800b064 <_svfiprintf_r+0x1e4>)
 800af2a:	f7f5 f9f9 	bl	8000320 <memchr>
 800af2e:	9a04      	ldr	r2, [sp, #16]
 800af30:	b9d8      	cbnz	r0, 800af6a <_svfiprintf_r+0xea>
 800af32:	06d0      	lsls	r0, r2, #27
 800af34:	bf44      	itt	mi
 800af36:	2320      	movmi	r3, #32
 800af38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af3c:	0711      	lsls	r1, r2, #28
 800af3e:	bf44      	itt	mi
 800af40:	232b      	movmi	r3, #43	@ 0x2b
 800af42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af46:	f89a 3000 	ldrb.w	r3, [sl]
 800af4a:	2b2a      	cmp	r3, #42	@ 0x2a
 800af4c:	d015      	beq.n	800af7a <_svfiprintf_r+0xfa>
 800af4e:	9a07      	ldr	r2, [sp, #28]
 800af50:	4654      	mov	r4, sl
 800af52:	2000      	movs	r0, #0
 800af54:	f04f 0c0a 	mov.w	ip, #10
 800af58:	4621      	mov	r1, r4
 800af5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af5e:	3b30      	subs	r3, #48	@ 0x30
 800af60:	2b09      	cmp	r3, #9
 800af62:	d94b      	bls.n	800affc <_svfiprintf_r+0x17c>
 800af64:	b1b0      	cbz	r0, 800af94 <_svfiprintf_r+0x114>
 800af66:	9207      	str	r2, [sp, #28]
 800af68:	e014      	b.n	800af94 <_svfiprintf_r+0x114>
 800af6a:	eba0 0308 	sub.w	r3, r0, r8
 800af6e:	fa09 f303 	lsl.w	r3, r9, r3
 800af72:	4313      	orrs	r3, r2
 800af74:	9304      	str	r3, [sp, #16]
 800af76:	46a2      	mov	sl, r4
 800af78:	e7d2      	b.n	800af20 <_svfiprintf_r+0xa0>
 800af7a:	9b03      	ldr	r3, [sp, #12]
 800af7c:	1d19      	adds	r1, r3, #4
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	9103      	str	r1, [sp, #12]
 800af82:	2b00      	cmp	r3, #0
 800af84:	bfbb      	ittet	lt
 800af86:	425b      	neglt	r3, r3
 800af88:	f042 0202 	orrlt.w	r2, r2, #2
 800af8c:	9307      	strge	r3, [sp, #28]
 800af8e:	9307      	strlt	r3, [sp, #28]
 800af90:	bfb8      	it	lt
 800af92:	9204      	strlt	r2, [sp, #16]
 800af94:	7823      	ldrb	r3, [r4, #0]
 800af96:	2b2e      	cmp	r3, #46	@ 0x2e
 800af98:	d10a      	bne.n	800afb0 <_svfiprintf_r+0x130>
 800af9a:	7863      	ldrb	r3, [r4, #1]
 800af9c:	2b2a      	cmp	r3, #42	@ 0x2a
 800af9e:	d132      	bne.n	800b006 <_svfiprintf_r+0x186>
 800afa0:	9b03      	ldr	r3, [sp, #12]
 800afa2:	1d1a      	adds	r2, r3, #4
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	9203      	str	r2, [sp, #12]
 800afa8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800afac:	3402      	adds	r4, #2
 800afae:	9305      	str	r3, [sp, #20]
 800afb0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b074 <_svfiprintf_r+0x1f4>
 800afb4:	7821      	ldrb	r1, [r4, #0]
 800afb6:	2203      	movs	r2, #3
 800afb8:	4650      	mov	r0, sl
 800afba:	f7f5 f9b1 	bl	8000320 <memchr>
 800afbe:	b138      	cbz	r0, 800afd0 <_svfiprintf_r+0x150>
 800afc0:	9b04      	ldr	r3, [sp, #16]
 800afc2:	eba0 000a 	sub.w	r0, r0, sl
 800afc6:	2240      	movs	r2, #64	@ 0x40
 800afc8:	4082      	lsls	r2, r0
 800afca:	4313      	orrs	r3, r2
 800afcc:	3401      	adds	r4, #1
 800afce:	9304      	str	r3, [sp, #16]
 800afd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afd4:	4824      	ldr	r0, [pc, #144]	@ (800b068 <_svfiprintf_r+0x1e8>)
 800afd6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800afda:	2206      	movs	r2, #6
 800afdc:	f7f5 f9a0 	bl	8000320 <memchr>
 800afe0:	2800      	cmp	r0, #0
 800afe2:	d036      	beq.n	800b052 <_svfiprintf_r+0x1d2>
 800afe4:	4b21      	ldr	r3, [pc, #132]	@ (800b06c <_svfiprintf_r+0x1ec>)
 800afe6:	bb1b      	cbnz	r3, 800b030 <_svfiprintf_r+0x1b0>
 800afe8:	9b03      	ldr	r3, [sp, #12]
 800afea:	3307      	adds	r3, #7
 800afec:	f023 0307 	bic.w	r3, r3, #7
 800aff0:	3308      	adds	r3, #8
 800aff2:	9303      	str	r3, [sp, #12]
 800aff4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aff6:	4433      	add	r3, r6
 800aff8:	9309      	str	r3, [sp, #36]	@ 0x24
 800affa:	e76a      	b.n	800aed2 <_svfiprintf_r+0x52>
 800affc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b000:	460c      	mov	r4, r1
 800b002:	2001      	movs	r0, #1
 800b004:	e7a8      	b.n	800af58 <_svfiprintf_r+0xd8>
 800b006:	2300      	movs	r3, #0
 800b008:	3401      	adds	r4, #1
 800b00a:	9305      	str	r3, [sp, #20]
 800b00c:	4619      	mov	r1, r3
 800b00e:	f04f 0c0a 	mov.w	ip, #10
 800b012:	4620      	mov	r0, r4
 800b014:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b018:	3a30      	subs	r2, #48	@ 0x30
 800b01a:	2a09      	cmp	r2, #9
 800b01c:	d903      	bls.n	800b026 <_svfiprintf_r+0x1a6>
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d0c6      	beq.n	800afb0 <_svfiprintf_r+0x130>
 800b022:	9105      	str	r1, [sp, #20]
 800b024:	e7c4      	b.n	800afb0 <_svfiprintf_r+0x130>
 800b026:	fb0c 2101 	mla	r1, ip, r1, r2
 800b02a:	4604      	mov	r4, r0
 800b02c:	2301      	movs	r3, #1
 800b02e:	e7f0      	b.n	800b012 <_svfiprintf_r+0x192>
 800b030:	ab03      	add	r3, sp, #12
 800b032:	9300      	str	r3, [sp, #0]
 800b034:	462a      	mov	r2, r5
 800b036:	4b0e      	ldr	r3, [pc, #56]	@ (800b070 <_svfiprintf_r+0x1f0>)
 800b038:	a904      	add	r1, sp, #16
 800b03a:	4638      	mov	r0, r7
 800b03c:	f3af 8000 	nop.w
 800b040:	1c42      	adds	r2, r0, #1
 800b042:	4606      	mov	r6, r0
 800b044:	d1d6      	bne.n	800aff4 <_svfiprintf_r+0x174>
 800b046:	89ab      	ldrh	r3, [r5, #12]
 800b048:	065b      	lsls	r3, r3, #25
 800b04a:	f53f af2d 	bmi.w	800aea8 <_svfiprintf_r+0x28>
 800b04e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b050:	e72c      	b.n	800aeac <_svfiprintf_r+0x2c>
 800b052:	ab03      	add	r3, sp, #12
 800b054:	9300      	str	r3, [sp, #0]
 800b056:	462a      	mov	r2, r5
 800b058:	4b05      	ldr	r3, [pc, #20]	@ (800b070 <_svfiprintf_r+0x1f0>)
 800b05a:	a904      	add	r1, sp, #16
 800b05c:	4638      	mov	r0, r7
 800b05e:	f000 f879 	bl	800b154 <_printf_i>
 800b062:	e7ed      	b.n	800b040 <_svfiprintf_r+0x1c0>
 800b064:	0800b67c 	.word	0x0800b67c
 800b068:	0800b686 	.word	0x0800b686
 800b06c:	00000000 	.word	0x00000000
 800b070:	0800adc9 	.word	0x0800adc9
 800b074:	0800b682 	.word	0x0800b682

0800b078 <_printf_common>:
 800b078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b07c:	4616      	mov	r6, r2
 800b07e:	4698      	mov	r8, r3
 800b080:	688a      	ldr	r2, [r1, #8]
 800b082:	690b      	ldr	r3, [r1, #16]
 800b084:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b088:	4293      	cmp	r3, r2
 800b08a:	bfb8      	it	lt
 800b08c:	4613      	movlt	r3, r2
 800b08e:	6033      	str	r3, [r6, #0]
 800b090:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b094:	4607      	mov	r7, r0
 800b096:	460c      	mov	r4, r1
 800b098:	b10a      	cbz	r2, 800b09e <_printf_common+0x26>
 800b09a:	3301      	adds	r3, #1
 800b09c:	6033      	str	r3, [r6, #0]
 800b09e:	6823      	ldr	r3, [r4, #0]
 800b0a0:	0699      	lsls	r1, r3, #26
 800b0a2:	bf42      	ittt	mi
 800b0a4:	6833      	ldrmi	r3, [r6, #0]
 800b0a6:	3302      	addmi	r3, #2
 800b0a8:	6033      	strmi	r3, [r6, #0]
 800b0aa:	6825      	ldr	r5, [r4, #0]
 800b0ac:	f015 0506 	ands.w	r5, r5, #6
 800b0b0:	d106      	bne.n	800b0c0 <_printf_common+0x48>
 800b0b2:	f104 0a19 	add.w	sl, r4, #25
 800b0b6:	68e3      	ldr	r3, [r4, #12]
 800b0b8:	6832      	ldr	r2, [r6, #0]
 800b0ba:	1a9b      	subs	r3, r3, r2
 800b0bc:	42ab      	cmp	r3, r5
 800b0be:	dc26      	bgt.n	800b10e <_printf_common+0x96>
 800b0c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b0c4:	6822      	ldr	r2, [r4, #0]
 800b0c6:	3b00      	subs	r3, #0
 800b0c8:	bf18      	it	ne
 800b0ca:	2301      	movne	r3, #1
 800b0cc:	0692      	lsls	r2, r2, #26
 800b0ce:	d42b      	bmi.n	800b128 <_printf_common+0xb0>
 800b0d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b0d4:	4641      	mov	r1, r8
 800b0d6:	4638      	mov	r0, r7
 800b0d8:	47c8      	blx	r9
 800b0da:	3001      	adds	r0, #1
 800b0dc:	d01e      	beq.n	800b11c <_printf_common+0xa4>
 800b0de:	6823      	ldr	r3, [r4, #0]
 800b0e0:	6922      	ldr	r2, [r4, #16]
 800b0e2:	f003 0306 	and.w	r3, r3, #6
 800b0e6:	2b04      	cmp	r3, #4
 800b0e8:	bf02      	ittt	eq
 800b0ea:	68e5      	ldreq	r5, [r4, #12]
 800b0ec:	6833      	ldreq	r3, [r6, #0]
 800b0ee:	1aed      	subeq	r5, r5, r3
 800b0f0:	68a3      	ldr	r3, [r4, #8]
 800b0f2:	bf0c      	ite	eq
 800b0f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0f8:	2500      	movne	r5, #0
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	bfc4      	itt	gt
 800b0fe:	1a9b      	subgt	r3, r3, r2
 800b100:	18ed      	addgt	r5, r5, r3
 800b102:	2600      	movs	r6, #0
 800b104:	341a      	adds	r4, #26
 800b106:	42b5      	cmp	r5, r6
 800b108:	d11a      	bne.n	800b140 <_printf_common+0xc8>
 800b10a:	2000      	movs	r0, #0
 800b10c:	e008      	b.n	800b120 <_printf_common+0xa8>
 800b10e:	2301      	movs	r3, #1
 800b110:	4652      	mov	r2, sl
 800b112:	4641      	mov	r1, r8
 800b114:	4638      	mov	r0, r7
 800b116:	47c8      	blx	r9
 800b118:	3001      	adds	r0, #1
 800b11a:	d103      	bne.n	800b124 <_printf_common+0xac>
 800b11c:	f04f 30ff 	mov.w	r0, #4294967295
 800b120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b124:	3501      	adds	r5, #1
 800b126:	e7c6      	b.n	800b0b6 <_printf_common+0x3e>
 800b128:	18e1      	adds	r1, r4, r3
 800b12a:	1c5a      	adds	r2, r3, #1
 800b12c:	2030      	movs	r0, #48	@ 0x30
 800b12e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b132:	4422      	add	r2, r4
 800b134:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b138:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b13c:	3302      	adds	r3, #2
 800b13e:	e7c7      	b.n	800b0d0 <_printf_common+0x58>
 800b140:	2301      	movs	r3, #1
 800b142:	4622      	mov	r2, r4
 800b144:	4641      	mov	r1, r8
 800b146:	4638      	mov	r0, r7
 800b148:	47c8      	blx	r9
 800b14a:	3001      	adds	r0, #1
 800b14c:	d0e6      	beq.n	800b11c <_printf_common+0xa4>
 800b14e:	3601      	adds	r6, #1
 800b150:	e7d9      	b.n	800b106 <_printf_common+0x8e>
	...

0800b154 <_printf_i>:
 800b154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b158:	7e0f      	ldrb	r7, [r1, #24]
 800b15a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b15c:	2f78      	cmp	r7, #120	@ 0x78
 800b15e:	4691      	mov	r9, r2
 800b160:	4680      	mov	r8, r0
 800b162:	460c      	mov	r4, r1
 800b164:	469a      	mov	sl, r3
 800b166:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b16a:	d807      	bhi.n	800b17c <_printf_i+0x28>
 800b16c:	2f62      	cmp	r7, #98	@ 0x62
 800b16e:	d80a      	bhi.n	800b186 <_printf_i+0x32>
 800b170:	2f00      	cmp	r7, #0
 800b172:	f000 80d1 	beq.w	800b318 <_printf_i+0x1c4>
 800b176:	2f58      	cmp	r7, #88	@ 0x58
 800b178:	f000 80b8 	beq.w	800b2ec <_printf_i+0x198>
 800b17c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b180:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b184:	e03a      	b.n	800b1fc <_printf_i+0xa8>
 800b186:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b18a:	2b15      	cmp	r3, #21
 800b18c:	d8f6      	bhi.n	800b17c <_printf_i+0x28>
 800b18e:	a101      	add	r1, pc, #4	@ (adr r1, 800b194 <_printf_i+0x40>)
 800b190:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b194:	0800b1ed 	.word	0x0800b1ed
 800b198:	0800b201 	.word	0x0800b201
 800b19c:	0800b17d 	.word	0x0800b17d
 800b1a0:	0800b17d 	.word	0x0800b17d
 800b1a4:	0800b17d 	.word	0x0800b17d
 800b1a8:	0800b17d 	.word	0x0800b17d
 800b1ac:	0800b201 	.word	0x0800b201
 800b1b0:	0800b17d 	.word	0x0800b17d
 800b1b4:	0800b17d 	.word	0x0800b17d
 800b1b8:	0800b17d 	.word	0x0800b17d
 800b1bc:	0800b17d 	.word	0x0800b17d
 800b1c0:	0800b2ff 	.word	0x0800b2ff
 800b1c4:	0800b22b 	.word	0x0800b22b
 800b1c8:	0800b2b9 	.word	0x0800b2b9
 800b1cc:	0800b17d 	.word	0x0800b17d
 800b1d0:	0800b17d 	.word	0x0800b17d
 800b1d4:	0800b321 	.word	0x0800b321
 800b1d8:	0800b17d 	.word	0x0800b17d
 800b1dc:	0800b22b 	.word	0x0800b22b
 800b1e0:	0800b17d 	.word	0x0800b17d
 800b1e4:	0800b17d 	.word	0x0800b17d
 800b1e8:	0800b2c1 	.word	0x0800b2c1
 800b1ec:	6833      	ldr	r3, [r6, #0]
 800b1ee:	1d1a      	adds	r2, r3, #4
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	6032      	str	r2, [r6, #0]
 800b1f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b1f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	e09c      	b.n	800b33a <_printf_i+0x1e6>
 800b200:	6833      	ldr	r3, [r6, #0]
 800b202:	6820      	ldr	r0, [r4, #0]
 800b204:	1d19      	adds	r1, r3, #4
 800b206:	6031      	str	r1, [r6, #0]
 800b208:	0606      	lsls	r6, r0, #24
 800b20a:	d501      	bpl.n	800b210 <_printf_i+0xbc>
 800b20c:	681d      	ldr	r5, [r3, #0]
 800b20e:	e003      	b.n	800b218 <_printf_i+0xc4>
 800b210:	0645      	lsls	r5, r0, #25
 800b212:	d5fb      	bpl.n	800b20c <_printf_i+0xb8>
 800b214:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b218:	2d00      	cmp	r5, #0
 800b21a:	da03      	bge.n	800b224 <_printf_i+0xd0>
 800b21c:	232d      	movs	r3, #45	@ 0x2d
 800b21e:	426d      	negs	r5, r5
 800b220:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b224:	4858      	ldr	r0, [pc, #352]	@ (800b388 <_printf_i+0x234>)
 800b226:	230a      	movs	r3, #10
 800b228:	e011      	b.n	800b24e <_printf_i+0xfa>
 800b22a:	6821      	ldr	r1, [r4, #0]
 800b22c:	6833      	ldr	r3, [r6, #0]
 800b22e:	0608      	lsls	r0, r1, #24
 800b230:	f853 5b04 	ldr.w	r5, [r3], #4
 800b234:	d402      	bmi.n	800b23c <_printf_i+0xe8>
 800b236:	0649      	lsls	r1, r1, #25
 800b238:	bf48      	it	mi
 800b23a:	b2ad      	uxthmi	r5, r5
 800b23c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b23e:	4852      	ldr	r0, [pc, #328]	@ (800b388 <_printf_i+0x234>)
 800b240:	6033      	str	r3, [r6, #0]
 800b242:	bf14      	ite	ne
 800b244:	230a      	movne	r3, #10
 800b246:	2308      	moveq	r3, #8
 800b248:	2100      	movs	r1, #0
 800b24a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b24e:	6866      	ldr	r6, [r4, #4]
 800b250:	60a6      	str	r6, [r4, #8]
 800b252:	2e00      	cmp	r6, #0
 800b254:	db05      	blt.n	800b262 <_printf_i+0x10e>
 800b256:	6821      	ldr	r1, [r4, #0]
 800b258:	432e      	orrs	r6, r5
 800b25a:	f021 0104 	bic.w	r1, r1, #4
 800b25e:	6021      	str	r1, [r4, #0]
 800b260:	d04b      	beq.n	800b2fa <_printf_i+0x1a6>
 800b262:	4616      	mov	r6, r2
 800b264:	fbb5 f1f3 	udiv	r1, r5, r3
 800b268:	fb03 5711 	mls	r7, r3, r1, r5
 800b26c:	5dc7      	ldrb	r7, [r0, r7]
 800b26e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b272:	462f      	mov	r7, r5
 800b274:	42bb      	cmp	r3, r7
 800b276:	460d      	mov	r5, r1
 800b278:	d9f4      	bls.n	800b264 <_printf_i+0x110>
 800b27a:	2b08      	cmp	r3, #8
 800b27c:	d10b      	bne.n	800b296 <_printf_i+0x142>
 800b27e:	6823      	ldr	r3, [r4, #0]
 800b280:	07df      	lsls	r7, r3, #31
 800b282:	d508      	bpl.n	800b296 <_printf_i+0x142>
 800b284:	6923      	ldr	r3, [r4, #16]
 800b286:	6861      	ldr	r1, [r4, #4]
 800b288:	4299      	cmp	r1, r3
 800b28a:	bfde      	ittt	le
 800b28c:	2330      	movle	r3, #48	@ 0x30
 800b28e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b292:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b296:	1b92      	subs	r2, r2, r6
 800b298:	6122      	str	r2, [r4, #16]
 800b29a:	f8cd a000 	str.w	sl, [sp]
 800b29e:	464b      	mov	r3, r9
 800b2a0:	aa03      	add	r2, sp, #12
 800b2a2:	4621      	mov	r1, r4
 800b2a4:	4640      	mov	r0, r8
 800b2a6:	f7ff fee7 	bl	800b078 <_printf_common>
 800b2aa:	3001      	adds	r0, #1
 800b2ac:	d14a      	bne.n	800b344 <_printf_i+0x1f0>
 800b2ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b2b2:	b004      	add	sp, #16
 800b2b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2b8:	6823      	ldr	r3, [r4, #0]
 800b2ba:	f043 0320 	orr.w	r3, r3, #32
 800b2be:	6023      	str	r3, [r4, #0]
 800b2c0:	4832      	ldr	r0, [pc, #200]	@ (800b38c <_printf_i+0x238>)
 800b2c2:	2778      	movs	r7, #120	@ 0x78
 800b2c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b2c8:	6823      	ldr	r3, [r4, #0]
 800b2ca:	6831      	ldr	r1, [r6, #0]
 800b2cc:	061f      	lsls	r7, r3, #24
 800b2ce:	f851 5b04 	ldr.w	r5, [r1], #4
 800b2d2:	d402      	bmi.n	800b2da <_printf_i+0x186>
 800b2d4:	065f      	lsls	r7, r3, #25
 800b2d6:	bf48      	it	mi
 800b2d8:	b2ad      	uxthmi	r5, r5
 800b2da:	6031      	str	r1, [r6, #0]
 800b2dc:	07d9      	lsls	r1, r3, #31
 800b2de:	bf44      	itt	mi
 800b2e0:	f043 0320 	orrmi.w	r3, r3, #32
 800b2e4:	6023      	strmi	r3, [r4, #0]
 800b2e6:	b11d      	cbz	r5, 800b2f0 <_printf_i+0x19c>
 800b2e8:	2310      	movs	r3, #16
 800b2ea:	e7ad      	b.n	800b248 <_printf_i+0xf4>
 800b2ec:	4826      	ldr	r0, [pc, #152]	@ (800b388 <_printf_i+0x234>)
 800b2ee:	e7e9      	b.n	800b2c4 <_printf_i+0x170>
 800b2f0:	6823      	ldr	r3, [r4, #0]
 800b2f2:	f023 0320 	bic.w	r3, r3, #32
 800b2f6:	6023      	str	r3, [r4, #0]
 800b2f8:	e7f6      	b.n	800b2e8 <_printf_i+0x194>
 800b2fa:	4616      	mov	r6, r2
 800b2fc:	e7bd      	b.n	800b27a <_printf_i+0x126>
 800b2fe:	6833      	ldr	r3, [r6, #0]
 800b300:	6825      	ldr	r5, [r4, #0]
 800b302:	6961      	ldr	r1, [r4, #20]
 800b304:	1d18      	adds	r0, r3, #4
 800b306:	6030      	str	r0, [r6, #0]
 800b308:	062e      	lsls	r6, r5, #24
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	d501      	bpl.n	800b312 <_printf_i+0x1be>
 800b30e:	6019      	str	r1, [r3, #0]
 800b310:	e002      	b.n	800b318 <_printf_i+0x1c4>
 800b312:	0668      	lsls	r0, r5, #25
 800b314:	d5fb      	bpl.n	800b30e <_printf_i+0x1ba>
 800b316:	8019      	strh	r1, [r3, #0]
 800b318:	2300      	movs	r3, #0
 800b31a:	6123      	str	r3, [r4, #16]
 800b31c:	4616      	mov	r6, r2
 800b31e:	e7bc      	b.n	800b29a <_printf_i+0x146>
 800b320:	6833      	ldr	r3, [r6, #0]
 800b322:	1d1a      	adds	r2, r3, #4
 800b324:	6032      	str	r2, [r6, #0]
 800b326:	681e      	ldr	r6, [r3, #0]
 800b328:	6862      	ldr	r2, [r4, #4]
 800b32a:	2100      	movs	r1, #0
 800b32c:	4630      	mov	r0, r6
 800b32e:	f7f4 fff7 	bl	8000320 <memchr>
 800b332:	b108      	cbz	r0, 800b338 <_printf_i+0x1e4>
 800b334:	1b80      	subs	r0, r0, r6
 800b336:	6060      	str	r0, [r4, #4]
 800b338:	6863      	ldr	r3, [r4, #4]
 800b33a:	6123      	str	r3, [r4, #16]
 800b33c:	2300      	movs	r3, #0
 800b33e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b342:	e7aa      	b.n	800b29a <_printf_i+0x146>
 800b344:	6923      	ldr	r3, [r4, #16]
 800b346:	4632      	mov	r2, r6
 800b348:	4649      	mov	r1, r9
 800b34a:	4640      	mov	r0, r8
 800b34c:	47d0      	blx	sl
 800b34e:	3001      	adds	r0, #1
 800b350:	d0ad      	beq.n	800b2ae <_printf_i+0x15a>
 800b352:	6823      	ldr	r3, [r4, #0]
 800b354:	079b      	lsls	r3, r3, #30
 800b356:	d413      	bmi.n	800b380 <_printf_i+0x22c>
 800b358:	68e0      	ldr	r0, [r4, #12]
 800b35a:	9b03      	ldr	r3, [sp, #12]
 800b35c:	4298      	cmp	r0, r3
 800b35e:	bfb8      	it	lt
 800b360:	4618      	movlt	r0, r3
 800b362:	e7a6      	b.n	800b2b2 <_printf_i+0x15e>
 800b364:	2301      	movs	r3, #1
 800b366:	4632      	mov	r2, r6
 800b368:	4649      	mov	r1, r9
 800b36a:	4640      	mov	r0, r8
 800b36c:	47d0      	blx	sl
 800b36e:	3001      	adds	r0, #1
 800b370:	d09d      	beq.n	800b2ae <_printf_i+0x15a>
 800b372:	3501      	adds	r5, #1
 800b374:	68e3      	ldr	r3, [r4, #12]
 800b376:	9903      	ldr	r1, [sp, #12]
 800b378:	1a5b      	subs	r3, r3, r1
 800b37a:	42ab      	cmp	r3, r5
 800b37c:	dcf2      	bgt.n	800b364 <_printf_i+0x210>
 800b37e:	e7eb      	b.n	800b358 <_printf_i+0x204>
 800b380:	2500      	movs	r5, #0
 800b382:	f104 0619 	add.w	r6, r4, #25
 800b386:	e7f5      	b.n	800b374 <_printf_i+0x220>
 800b388:	0800b68d 	.word	0x0800b68d
 800b38c:	0800b69e 	.word	0x0800b69e

0800b390 <memmove>:
 800b390:	4288      	cmp	r0, r1
 800b392:	b510      	push	{r4, lr}
 800b394:	eb01 0402 	add.w	r4, r1, r2
 800b398:	d902      	bls.n	800b3a0 <memmove+0x10>
 800b39a:	4284      	cmp	r4, r0
 800b39c:	4623      	mov	r3, r4
 800b39e:	d807      	bhi.n	800b3b0 <memmove+0x20>
 800b3a0:	1e43      	subs	r3, r0, #1
 800b3a2:	42a1      	cmp	r1, r4
 800b3a4:	d008      	beq.n	800b3b8 <memmove+0x28>
 800b3a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3ae:	e7f8      	b.n	800b3a2 <memmove+0x12>
 800b3b0:	4402      	add	r2, r0
 800b3b2:	4601      	mov	r1, r0
 800b3b4:	428a      	cmp	r2, r1
 800b3b6:	d100      	bne.n	800b3ba <memmove+0x2a>
 800b3b8:	bd10      	pop	{r4, pc}
 800b3ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b3be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b3c2:	e7f7      	b.n	800b3b4 <memmove+0x24>

0800b3c4 <_sbrk_r>:
 800b3c4:	b538      	push	{r3, r4, r5, lr}
 800b3c6:	4d06      	ldr	r5, [pc, #24]	@ (800b3e0 <_sbrk_r+0x1c>)
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	4604      	mov	r4, r0
 800b3cc:	4608      	mov	r0, r1
 800b3ce:	602b      	str	r3, [r5, #0]
 800b3d0:	f7f6 ffea 	bl	80023a8 <_sbrk>
 800b3d4:	1c43      	adds	r3, r0, #1
 800b3d6:	d102      	bne.n	800b3de <_sbrk_r+0x1a>
 800b3d8:	682b      	ldr	r3, [r5, #0]
 800b3da:	b103      	cbz	r3, 800b3de <_sbrk_r+0x1a>
 800b3dc:	6023      	str	r3, [r4, #0]
 800b3de:	bd38      	pop	{r3, r4, r5, pc}
 800b3e0:	24000e34 	.word	0x24000e34

0800b3e4 <_realloc_r>:
 800b3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3e8:	4607      	mov	r7, r0
 800b3ea:	4614      	mov	r4, r2
 800b3ec:	460d      	mov	r5, r1
 800b3ee:	b921      	cbnz	r1, 800b3fa <_realloc_r+0x16>
 800b3f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3f4:	4611      	mov	r1, r2
 800b3f6:	f7ff bc5b 	b.w	800acb0 <_malloc_r>
 800b3fa:	b92a      	cbnz	r2, 800b408 <_realloc_r+0x24>
 800b3fc:	f7ff fbec 	bl	800abd8 <_free_r>
 800b400:	4625      	mov	r5, r4
 800b402:	4628      	mov	r0, r5
 800b404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b408:	f000 f81a 	bl	800b440 <_malloc_usable_size_r>
 800b40c:	4284      	cmp	r4, r0
 800b40e:	4606      	mov	r6, r0
 800b410:	d802      	bhi.n	800b418 <_realloc_r+0x34>
 800b412:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b416:	d8f4      	bhi.n	800b402 <_realloc_r+0x1e>
 800b418:	4621      	mov	r1, r4
 800b41a:	4638      	mov	r0, r7
 800b41c:	f7ff fc48 	bl	800acb0 <_malloc_r>
 800b420:	4680      	mov	r8, r0
 800b422:	b908      	cbnz	r0, 800b428 <_realloc_r+0x44>
 800b424:	4645      	mov	r5, r8
 800b426:	e7ec      	b.n	800b402 <_realloc_r+0x1e>
 800b428:	42b4      	cmp	r4, r6
 800b42a:	4622      	mov	r2, r4
 800b42c:	4629      	mov	r1, r5
 800b42e:	bf28      	it	cs
 800b430:	4632      	movcs	r2, r6
 800b432:	f7ff fbc3 	bl	800abbc <memcpy>
 800b436:	4629      	mov	r1, r5
 800b438:	4638      	mov	r0, r7
 800b43a:	f7ff fbcd 	bl	800abd8 <_free_r>
 800b43e:	e7f1      	b.n	800b424 <_realloc_r+0x40>

0800b440 <_malloc_usable_size_r>:
 800b440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b444:	1f18      	subs	r0, r3, #4
 800b446:	2b00      	cmp	r3, #0
 800b448:	bfbc      	itt	lt
 800b44a:	580b      	ldrlt	r3, [r1, r0]
 800b44c:	18c0      	addlt	r0, r0, r3
 800b44e:	4770      	bx	lr

0800b450 <_init>:
 800b450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b452:	bf00      	nop
 800b454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b456:	bc08      	pop	{r3}
 800b458:	469e      	mov	lr, r3
 800b45a:	4770      	bx	lr

0800b45c <_fini>:
 800b45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b45e:	bf00      	nop
 800b460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b462:	bc08      	pop	{r3}
 800b464:	469e      	mov	lr, r3
 800b466:	4770      	bx	lr
