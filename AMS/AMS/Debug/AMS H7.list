
AMS H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c88c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800cb5c  0800cb5c  0000db5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cff4  0800cff4  0000dff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800cffc  0800cffc  0000dffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d004  0800d004  0000e004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  0800d008  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e30  2400006c  0800d074  0000f06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000e9c  0800d074  0000fe9c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026f73  00000000  00000000  0000f09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c16  00000000  00000000  0003600d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001920  00000000  00000000  00039c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000013ae  00000000  00000000  0003b548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b7cc  00000000  00000000  0003c8f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020d27  00000000  00000000  000780c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017621a  00000000  00000000  00098de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020f003  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007324  00000000  00000000  0020f048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000042  00000000  00000000  0021636c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800cb44 	.word	0x0800cb44

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	0800cb44 	.word	0x0800cb44

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <_ZN7BMS_MODC1Emiiihjii>:
/*********************************************************************************************************
 ** Function name:           BMS_MOD
 ** Descriptions:            Initialization function of teh class
 *********************************************************************************************************/

BMS_MOD::BMS_MOD(uint32_t _ID, int _MAXV, int _MINV, int _MAXT,
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	603b      	str	r3, [r7, #0]
		uint8_t _NUMCELLS, unsigned int _SHUNT, int _LAG_V, int _LAG_T) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800072c:	61da      	str	r2, [r3, #28]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	22fa      	movs	r2, #250	@ 0xfa
 8000732:	621a      	str	r2, [r3, #32]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800073a:	625a      	str	r2, [r3, #36]	@ 0x24
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000742:	629a      	str	r2, [r3, #40]	@ 0x28
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800074a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000752:	631a      	str	r2, [r3, #48]	@ 0x30
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	69da      	ldr	r2, [r3, #28]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	635a      	str	r2, [r3, #52]	@ 0x34
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	2200      	movs	r2, #0
 8000760:	639a      	str	r2, [r3, #56]	@ 0x38
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	63da      	str	r2, [r3, #60]	@ 0x3c
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	641a      	str	r2, [r3, #64]	@ 0x40
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	2200      	movs	r2, #0
 8000776:	645a      	str	r2, [r3, #68]	@ 0x44
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	649a      	str	r2, [r3, #72]	@ 0x48
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2200      	movs	r2, #0
 8000784:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2200      	movs	r2, #0
 800078c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2200      	movs	r2, #0
 8000794:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2200      	movs	r2, #0
 800079c:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	2213      	movs	r2, #19
 80007a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	220a      	movs	r2, #10
 80007ac:	655a      	str	r2, [r3, #84]	@ 0x54
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	3358      	adds	r3, #88	@ 0x58
 80007b2:	2230      	movs	r2, #48	@ 0x30
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f00b fd46 	bl	800c248 <memset>
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2200      	movs	r2, #0
 80007c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	2200      	movs	r2, #0
 80007c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	2200      	movs	r2, #0
 80007d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f241 0268 	movw	r2, #4200	@ 0x1068
 80007da:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	2200      	movs	r2, #0
 80007e2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	2200      	movs	r2, #0
 80007ea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	2200      	movs	r2, #0
 80007f2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	33a4      	adds	r3, #164	@ 0xa4
 80007fa:	224c      	movs	r2, #76	@ 0x4c
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f00b fd22 	bl	800c248 <memset>
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	33f0      	adds	r3, #240	@ 0xf0
 8000808:	2298      	movs	r2, #152	@ 0x98
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f00b fd1b 	bl	800c248 <memset>
	CANID = _ID;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	68ba      	ldr	r2, [r7, #8]
 8000816:	601a      	str	r2, [r3, #0]
	LIMIT_MAX_V = _MAXV;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	60da      	str	r2, [r3, #12]
	LIMIT_MIN_V = _MINV;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	683a      	ldr	r2, [r7, #0]
 8000822:	611a      	str	r2, [r3, #16]
	LIMIT_MAX_T = _MAXT;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	6a3a      	ldr	r2, [r7, #32]
 8000828:	615a      	str	r2, [r3, #20]
	NUM_CELLS = _NUMCELLS;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000830:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

	uint32_t now = HAL_GetTick();
 8000834:	f002 fb5e 	bl	8002ef4 <HAL_GetTick>
 8000838:	6178      	str	r0, [r7, #20]

	time_lim_plotted_volts = now + _LAG_V;
 800083a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	441a      	add	r2, r3
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	635a      	str	r2, [r3, #52]	@ 0x34
	time_lim_sent_volts = now + _LAG_V;
 8000844:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	441a      	add	r2, r3
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	639a      	str	r2, [r3, #56]	@ 0x38
	time_lim_received_volts = now + TIME_LIM_RECV_VOLTS + _LAG_V;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	441a      	add	r2, r3
 8000856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000858:	441a      	add	r2, r3
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	63da      	str	r2, [r3, #60]	@ 0x3c

	time_lim_plotted_temps = now + _LAG_T;
 800085e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	441a      	add	r2, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	641a      	str	r2, [r3, #64]	@ 0x40
	time_lim_sent_temps = now + _LAG_T;
 8000868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	441a      	add	r2, r3
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	645a      	str	r2, [r3, #68]	@ 0x44
	time_lim_received_temps = now + TIME_LIM_RECV_TEMPS + _LAG_T;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	441a      	add	r2, r3
 800087a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800087c:	441a      	add	r2, r3
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	4618      	mov	r0, r3
 8000886:	3718      	adds	r7, #24
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <_ZN7BMS_MOD12voltage_infoEPc>:

/*********************************************************************************************************
 ** Function name:           info
 ** Descriptions:            Function for printing the class data
 *********************************************************************************************************/
void BMS_MOD::voltage_info(char *buffer) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]

	if (getUARTState() == HAL_UART_STATE_READY) { // Send the message just if there is a serial por connected
 8000896:	f001 fbdb 	bl	8002050 <getUARTState>
 800089a:	4603      	mov	r3, r0
 800089c:	2b20      	cmp	r3, #32
 800089e:	bf0c      	ite	eq
 80008a0:	2301      	moveq	r3, #1
 80008a2:	2300      	movne	r3, #0
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	f000 8084 	beq.w	80009b4 <_ZN7BMS_MOD12voltage_infoEPc+0x128>
		print((char*) "\n***********************");
 80008ac:	4851      	ldr	r0, [pc, #324]	@ (80009f4 <_ZN7BMS_MOD12voltage_infoEPc+0x168>)
 80008ae:	f001 fb75 	bl	8001f9c <print>
		print((char*) "         BMS");
 80008b2:	4851      	ldr	r0, [pc, #324]	@ (80009f8 <_ZN7BMS_MOD12voltage_infoEPc+0x16c>)
 80008b4:	f001 fb72 	bl	8001f9c <print>
		print((char*) "***********************");
 80008b8:	4850      	ldr	r0, [pc, #320]	@ (80009fc <_ZN7BMS_MOD12voltage_infoEPc+0x170>)
 80008ba:	f001 fb6f 	bl	8001f9c <print>
		sprintf(buffer, " - ERROR:     %i", error_volt);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	461a      	mov	r2, r3
 80008c4:	494e      	ldr	r1, [pc, #312]	@ (8000a00 <_ZN7BMS_MOD12voltage_infoEPc+0x174>)
 80008c6:	6838      	ldr	r0, [r7, #0]
 80008c8:	f00b fc9c 	bl	800c204 <siprintf>
		print(buffer);
 80008cc:	6838      	ldr	r0, [r7, #0]
 80008ce:	f001 fb65 	bl	8001f9c <print>
		sprintf(buffer, " - CAN ID:    0x%lx", CANID);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	461a      	mov	r2, r3
 80008d8:	494a      	ldr	r1, [pc, #296]	@ (8000a04 <_ZN7BMS_MOD12voltage_infoEPc+0x178>)
 80008da:	6838      	ldr	r0, [r7, #0]
 80008dc:	f00b fc92 	bl	800c204 <siprintf>
		print(buffer);
 80008e0:	6838      	ldr	r0, [r7, #0]
 80008e2:	f001 fb5b 	bl	8001f9c <print>
		sprintf(buffer, " - MAX V =    %i mV", MAX_V);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	461a      	mov	r2, r3
 80008ec:	4946      	ldr	r1, [pc, #280]	@ (8000a08 <_ZN7BMS_MOD12voltage_infoEPc+0x17c>)
 80008ee:	6838      	ldr	r0, [r7, #0]
 80008f0:	f00b fc88 	bl	800c204 <siprintf>
		print(buffer);
 80008f4:	6838      	ldr	r0, [r7, #0]
 80008f6:	f001 fb51 	bl	8001f9c <print>
		sprintf(buffer, " - MIN V =    %i mV", MIN_V);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000900:	461a      	mov	r2, r3
 8000902:	4942      	ldr	r1, [pc, #264]	@ (8000a0c <_ZN7BMS_MOD12voltage_infoEPc+0x180>)
 8000904:	6838      	ldr	r0, [r7, #0]
 8000906:	f00b fc7d 	bl	800c204 <siprintf>
		print(buffer);
 800090a:	6838      	ldr	r0, [r7, #0]
 800090c:	f001 fb46 	bl	8001f9c <print>
		print((char*) "-----------------------");
 8000910:	483f      	ldr	r0, [pc, #252]	@ (8000a10 <_ZN7BMS_MOD12voltage_infoEPc+0x184>)
 8000912:	f001 fb43 	bl	8001f9c <print>
		sprintf(buffer, "VOLTS (mV): [%i", cellVoltagemV[0]);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800091c:	461a      	mov	r2, r3
 800091e:	493d      	ldr	r1, [pc, #244]	@ (8000a14 <_ZN7BMS_MOD12voltage_infoEPc+0x188>)
 8000920:	6838      	ldr	r0, [r7, #0]
 8000922:	f00b fc6f 	bl	800c204 <siprintf>
		printnl(buffer);
 8000926:	6838      	ldr	r0, [r7, #0]
 8000928:	f001 fb56 	bl	8001fd8 <printnl>
		for (int i = 0; i < NUM_CELLS; i++) {
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	e010      	b.n	8000954 <_ZN7BMS_MOD12voltage_infoEPc+0xc8>
			sprintf(buffer, ", %i", cellVoltagemV[i]);
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	3328      	adds	r3, #40	@ 0x28
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	4413      	add	r3, r2
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	461a      	mov	r2, r3
 8000940:	4935      	ldr	r1, [pc, #212]	@ (8000a18 <_ZN7BMS_MOD12voltage_infoEPc+0x18c>)
 8000942:	6838      	ldr	r0, [r7, #0]
 8000944:	f00b fc5e 	bl	800c204 <siprintf>
			printnl(buffer);
 8000948:	6838      	ldr	r0, [r7, #0]
 800094a:	f001 fb45 	bl	8001fd8 <printnl>
		for (int i = 0; i < NUM_CELLS; i++) {
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	3301      	adds	r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800095a:	461a      	mov	r2, r3
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	4293      	cmp	r3, r2
 8000960:	dbe7      	blt.n	8000932 <_ZN7BMS_MOD12voltage_infoEPc+0xa6>
		}

		for (int i = 0; i < NUM_CELLS; i++) {
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	e00f      	b.n	8000988 <_ZN7BMS_MOD12voltage_infoEPc+0xfc>
			voltage_acum += cellVoltagemV[i];
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	3328      	adds	r3, #40	@ 0x28
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	440b      	add	r3, r1
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	441a      	add	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
		for (int i = 0; i < NUM_CELLS; i++) {
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	3301      	adds	r3, #1
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800098e:	461a      	mov	r2, r3
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	4293      	cmp	r3, r2
 8000994:	dbe8      	blt.n	8000968 <_ZN7BMS_MOD12voltage_infoEPc+0xdc>
		}

		print((char*) "]");
 8000996:	4821      	ldr	r0, [pc, #132]	@ (8000a1c <_ZN7BMS_MOD12voltage_infoEPc+0x190>)
 8000998:	f001 fb00 	bl	8001f9c <print>
		sprintf(buffer, " - V(max) = %i mV || V(min) = %i", MAX_V, MIN_V);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	699a      	ldr	r2, [r3, #24]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009a6:	491e      	ldr	r1, [pc, #120]	@ (8000a20 <_ZN7BMS_MOD12voltage_infoEPc+0x194>)
 80009a8:	6838      	ldr	r0, [r7, #0]
 80009aa:	f00b fc2b 	bl	800c204 <siprintf>
		print(buffer);
 80009ae:	6838      	ldr	r0, [r7, #0]
 80009b0:	f001 faf4 	bl	8001f9c <print>
	}
	sprintf(buffer, "- BALANCING V = %i mV", BALANCING_V);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80009ba:	461a      	mov	r2, r3
 80009bc:	4919      	ldr	r1, [pc, #100]	@ (8000a24 <_ZN7BMS_MOD12voltage_infoEPc+0x198>)
 80009be:	6838      	ldr	r0, [r7, #0]
 80009c0:	f00b fc20 	bl	800c204 <siprintf>
	print(buffer);
 80009c4:	6838      	ldr	r0, [r7, #0]
 80009c6:	f001 fae9 	bl	8001f9c <print>

	sprintf(buffer, "- STACK VOLTAGE = %i V", voltage_acum / 1000);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009d0:	4a15      	ldr	r2, [pc, #84]	@ (8000a28 <_ZN7BMS_MOD12voltage_infoEPc+0x19c>)
 80009d2:	fb82 1203 	smull	r1, r2, r2, r3
 80009d6:	1192      	asrs	r2, r2, #6
 80009d8:	17db      	asrs	r3, r3, #31
 80009da:	1ad3      	subs	r3, r2, r3
 80009dc:	461a      	mov	r2, r3
 80009de:	4913      	ldr	r1, [pc, #76]	@ (8000a2c <_ZN7BMS_MOD12voltage_infoEPc+0x1a0>)
 80009e0:	6838      	ldr	r0, [r7, #0]
 80009e2:	f00b fc0f 	bl	800c204 <siprintf>
	print(buffer);
 80009e6:	6838      	ldr	r0, [r7, #0]
 80009e8:	f001 fad8 	bl	8001f9c <print>
}
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	0800cb5c 	.word	0x0800cb5c
 80009f8:	0800cb78 	.word	0x0800cb78
 80009fc:	0800cb88 	.word	0x0800cb88
 8000a00:	0800cba0 	.word	0x0800cba0
 8000a04:	0800cbb4 	.word	0x0800cbb4
 8000a08:	0800cbc8 	.word	0x0800cbc8
 8000a0c:	0800cbdc 	.word	0x0800cbdc
 8000a10:	0800cbf0 	.word	0x0800cbf0
 8000a14:	0800cc08 	.word	0x0800cc08
 8000a18:	0800cc18 	.word	0x0800cc18
 8000a1c:	0800cc20 	.word	0x0800cc20
 8000a20:	0800cc24 	.word	0x0800cc24
 8000a24:	0800cc48 	.word	0x0800cc48
 8000a28:	10624dd3 	.word	0x10624dd3
 8000a2c:	0800cc60 	.word	0x0800cc60

08000a30 <_ZN7BMS_MOD16temperature_infoEPc>:

// ********************************************************************************************************
// **Function name:           info
// **Descriptions:            Function for printing the class data
// **********************************************************************************************************
void BMS_MOD::temperature_info(char *buffer) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
	if (getUARTState() == HAL_UART_STATE_READY) //Send the message just if there is a serial por connected
 8000a3a:	f001 fb09 	bl	8002050 <getUARTState>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b20      	cmp	r3, #32
 8000a42:	bf0c      	ite	eq
 8000a44:	2301      	moveq	r3, #1
 8000a46:	2300      	movne	r3, #0
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d061      	beq.n	8000b12 <_ZN7BMS_MOD16temperature_infoEPc+0xe2>
	{
		print((char*) "\n***********************");
 8000a4e:	4833      	ldr	r0, [pc, #204]	@ (8000b1c <_ZN7BMS_MOD16temperature_infoEPc+0xec>)
 8000a50:	f001 faa4 	bl	8001f9c <print>
		print((char*) "     Temperatures");
 8000a54:	4832      	ldr	r0, [pc, #200]	@ (8000b20 <_ZN7BMS_MOD16temperature_infoEPc+0xf0>)
 8000a56:	f001 faa1 	bl	8001f9c <print>
		print((char*) "***********************");
 8000a5a:	4832      	ldr	r0, [pc, #200]	@ (8000b24 <_ZN7BMS_MOD16temperature_infoEPc+0xf4>)
 8000a5c:	f001 fa9e 	bl	8001f9c <print>
		sprintf(buffer, " - ERROR:     %i", error_temp);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4930      	ldr	r1, [pc, #192]	@ (8000b28 <_ZN7BMS_MOD16temperature_infoEPc+0xf8>)
 8000a68:	6838      	ldr	r0, [r7, #0]
 8000a6a:	f00b fbcb 	bl	800c204 <siprintf>
		print(buffer);
 8000a6e:	6838      	ldr	r0, [r7, #0]
 8000a70:	f001 fa94 	bl	8001f9c <print>
		sprintf(buffer, " - CAN ID:    0x%lx", CANID + 20);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	3314      	adds	r3, #20
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	492b      	ldr	r1, [pc, #172]	@ (8000b2c <_ZN7BMS_MOD16temperature_infoEPc+0xfc>)
 8000a7e:	6838      	ldr	r0, [r7, #0]
 8000a80:	f00b fbc0 	bl	800c204 <siprintf>
		print(buffer);
 8000a84:	6838      	ldr	r0, [r7, #0]
 8000a86:	f001 fa89 	bl	8001f9c <print>
		sprintf(buffer, " - MAX T =    %i ºC", MAX_T);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000a90:	461a      	mov	r2, r3
 8000a92:	4927      	ldr	r1, [pc, #156]	@ (8000b30 <_ZN7BMS_MOD16temperature_infoEPc+0x100>)
 8000a94:	6838      	ldr	r0, [r7, #0]
 8000a96:	f00b fbb5 	bl	800c204 <siprintf>
		print(buffer);
 8000a9a:	6838      	ldr	r0, [r7, #0]
 8000a9c:	f001 fa7e 	bl	8001f9c <print>
		sprintf(buffer, " - MIN T =    %i ºC", MIN_T);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	4922      	ldr	r1, [pc, #136]	@ (8000b34 <_ZN7BMS_MOD16temperature_infoEPc+0x104>)
 8000aaa:	6838      	ldr	r0, [r7, #0]
 8000aac:	f00b fbaa 	bl	800c204 <siprintf>
		print(buffer);
 8000ab0:	6838      	ldr	r0, [r7, #0]
 8000ab2:	f001 fa73 	bl	8001f9c <print>
		sprintf(buffer, " - LIM T =    %i ºC", LIMIT_MAX_T);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	461a      	mov	r2, r3
 8000abc:	491e      	ldr	r1, [pc, #120]	@ (8000b38 <_ZN7BMS_MOD16temperature_infoEPc+0x108>)
 8000abe:	6838      	ldr	r0, [r7, #0]
 8000ac0:	f00b fba0 	bl	800c204 <siprintf>
		print((char*) "-----------------------");
 8000ac4:	481d      	ldr	r0, [pc, #116]	@ (8000b3c <_ZN7BMS_MOD16temperature_infoEPc+0x10c>)
 8000ac6:	f001 fa69 	bl	8001f9c <print>
		sprintf(buffer, "Temperatures (ºC): [%i", cellTemperature[0]);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	491b      	ldr	r1, [pc, #108]	@ (8000b40 <_ZN7BMS_MOD16temperature_infoEPc+0x110>)
 8000ad4:	6838      	ldr	r0, [r7, #0]
 8000ad6:	f00b fb95 	bl	800c204 <siprintf>
		printnl(buffer);
 8000ada:	6838      	ldr	r0, [r7, #0]
 8000adc:	f001 fa7c 	bl	8001fd8 <printnl>
		for (int i = 1; i < 38; i++) {
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	e00f      	b.n	8000b06 <_ZN7BMS_MOD16temperature_infoEPc+0xd6>
			sprintf(buffer, ", %i", cellTemperature[i]);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	323c      	adds	r2, #60	@ 0x3c
 8000aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4914      	ldr	r1, [pc, #80]	@ (8000b44 <_ZN7BMS_MOD16temperature_infoEPc+0x114>)
 8000af4:	6838      	ldr	r0, [r7, #0]
 8000af6:	f00b fb85 	bl	800c204 <siprintf>
			printnl(buffer);
 8000afa:	6838      	ldr	r0, [r7, #0]
 8000afc:	f001 fa6c 	bl	8001fd8 <printnl>
		for (int i = 1; i < 38; i++) {
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	3301      	adds	r3, #1
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	2b25      	cmp	r3, #37	@ 0x25
 8000b0a:	ddec      	ble.n	8000ae6 <_ZN7BMS_MOD16temperature_infoEPc+0xb6>
		}
		print((char*) "]");
 8000b0c:	480e      	ldr	r0, [pc, #56]	@ (8000b48 <_ZN7BMS_MOD16temperature_infoEPc+0x118>)
 8000b0e:	f001 fa45 	bl	8001f9c <print>

	}
}
 8000b12:	bf00      	nop
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	0800cb5c 	.word	0x0800cb5c
 8000b20:	0800cc78 	.word	0x0800cc78
 8000b24:	0800cb88 	.word	0x0800cb88
 8000b28:	0800cba0 	.word	0x0800cba0
 8000b2c:	0800cbb4 	.word	0x0800cbb4
 8000b30:	0800cc8c 	.word	0x0800cc8c
 8000b34:	0800cca4 	.word	0x0800cca4
 8000b38:	0800ccbc 	.word	0x0800ccbc
 8000b3c:	0800cbf0 	.word	0x0800cbf0
 8000b40:	0800ccd4 	.word	0x0800ccd4
 8000b44:	0800cc18 	.word	0x0800cc18
 8000b48:	0800cc20 	.word	0x0800cc20

08000b4c <_ZN7BMS_MOD5parseEmPhm>:

/*********************************************************************************************************
 ** Function name:           parse
 ** Descriptions:            Function for parsing the received data via CAN protocol
 *********************************************************************************************************/
bool BMS_MOD::parse(uint32_t id, uint8_t *buf, uint32_t t) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08c      	sub	sp, #48	@ 0x30
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
 8000b58:	603b      	str	r3, [r7, #0]
	if (id > CANID && id < CANID + 30) {
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	f240 8131 	bls.w	8000dc8 <_ZN7BMS_MOD5parseEmPhm+0x27c>
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	331e      	adds	r3, #30
 8000b6c:	68ba      	ldr	r2, [r7, #8]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	f080 812a 	bcs.w	8000dc8 <_ZN7BMS_MOD5parseEmPhm+0x27c>
		int m = id % CANID;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b7e:	fb01 f202 	mul.w	r2, r1, r2
 8000b82:	1a9b      	subs	r3, r3, r2
 8000b84:	61bb      	str	r3, [r7, #24]
		int pos = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
		if (m >= 1 && m <= 5) {
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f340 809e 	ble.w	8000cce <_ZN7BMS_MOD5parseEmPhm+0x182>
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	2b05      	cmp	r3, #5
 8000b96:	f300 809a 	bgt.w	8000cce <_ZN7BMS_MOD5parseEmPhm+0x182>
			time_lim_received_volts = t + TIME_LIM_RECV_VOLTS;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	441a      	add	r2, r3
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	63da      	str	r2, [r3, #60]	@ 0x3c

			for (int i = 0; i < 4; i++) {
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000baa:	e04e      	b.n	8000c4a <_ZN7BMS_MOD5parseEmPhm+0xfe>
				pos = (m - 1) * 4 + i;
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000bb4:	4413      	add	r3, r2
 8000bb6:	617b      	str	r3, [r7, #20]
				if (pos >= 19)
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	2b12      	cmp	r3, #18
 8000bbc:	dc49      	bgt.n	8000c52 <_ZN7BMS_MOD5parseEmPhm+0x106>
					break;

				cellVoltagemV[pos] = (buf[2 * i] << 8) | buf[2 * i + 1];
 8000bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	021b      	lsls	r3, r3, #8
 8000bcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000bce:	0052      	lsls	r2, r2, #1
 8000bd0:	3201      	adds	r2, #1
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	440a      	add	r2, r1
 8000bd6:	7812      	ldrb	r2, [r2, #0]
 8000bd8:	431a      	orrs	r2, r3
 8000bda:	68f9      	ldr	r1, [r7, #12]
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	3328      	adds	r3, #40	@ 0x28
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	440b      	add	r3, r1
 8000be4:	605a      	str	r2, [r3, #4]
				 //error_volt = BMS_OK;
				 } else {
				 flag_error_volt[pos] = 0;
				 }*/

				if ((cellVoltagemV[pos] > LIMIT_MAX_V) && pos < NUM_CELLS) {
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	3328      	adds	r3, #40	@ 0x28
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	4413      	add	r3, r2
 8000bf0:	685a      	ldr	r2, [r3, #4]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	dd1e      	ble.n	8000c38 <_ZN7BMS_MOD5parseEmPhm+0xec>
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000c00:	461a      	mov	r2, r3
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	4293      	cmp	r3, r2
 8000c06:	da17      	bge.n	8000c38 <_ZN7BMS_MOD5parseEmPhm+0xec>
					flag_error_volt[pos]++;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	697a      	ldr	r2, [r7, #20]
 8000c0c:	3216      	adds	r2, #22
 8000c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c12:	1c59      	adds	r1, r3, #1
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	697a      	ldr	r2, [r7, #20]
 8000c18:	3216      	adds	r2, #22
 8000c1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					if (flag_error_volt[pos] >= max_flag)
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	3216      	adds	r2, #22
 8000c24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	db09      	blt.n	8000c44 <_ZN7BMS_MOD5parseEmPhm+0xf8>
						error_volt = BMS_ERROR_VOLTS;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	2202      	movs	r2, #2
 8000c34:	605a      	str	r2, [r3, #4]
					if (flag_error_volt[pos] >= max_flag)
 8000c36:	e005      	b.n	8000c44 <_ZN7BMS_MOD5parseEmPhm+0xf8>
					//error_volt = BMS_OK;
				} else {
					flag_error_volt[pos] = 0;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	697a      	ldr	r2, [r7, #20]
 8000c3c:	3216      	adds	r2, #22
 8000c3e:	2100      	movs	r1, #0
 8000c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (int i = 0; i < 4; i++) {
 8000c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c46:	3301      	adds	r3, #1
 8000c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	ddad      	ble.n	8000bac <_ZN7BMS_MOD5parseEmPhm+0x60>
 8000c50:	e000      	b.n	8000c54 <_ZN7BMS_MOD5parseEmPhm+0x108>
					break;
 8000c52:	bf00      	nop
				}
			}

			MAX_V = cellVoltagemV[0];
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	619a      	str	r2, [r3, #24]
			MIN_V = cellVoltagemV[0];
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
			for (int i = 1; i < 19; i++) {
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c6e:	e029      	b.n	8000cc4 <_ZN7BMS_MOD5parseEmPhm+0x178>
				if (cellVoltagemV[i] > MAX_V)
 8000c70:	68fa      	ldr	r2, [r7, #12]
 8000c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c74:	3328      	adds	r3, #40	@ 0x28
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	4413      	add	r3, r2
 8000c7a:	685a      	ldr	r2, [r3, #4]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	dd08      	ble.n	8000c96 <_ZN7BMS_MOD5parseEmPhm+0x14a>
					MAX_V = cellVoltagemV[i];
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c88:	3328      	adds	r3, #40	@ 0x28
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	4413      	add	r3, r2
 8000c8e:	685a      	ldr	r2, [r3, #4]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	619a      	str	r2, [r3, #24]
 8000c94:	e013      	b.n	8000cbe <_ZN7BMS_MOD5parseEmPhm+0x172>
				else if (cellVoltagemV[i] < MIN_V)
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c9a:	3328      	adds	r3, #40	@ 0x28
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	4413      	add	r3, r2
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	da08      	bge.n	8000cbe <_ZN7BMS_MOD5parseEmPhm+0x172>
					MIN_V = cellVoltagemV[i];
 8000cac:	68fa      	ldr	r2, [r7, #12]
 8000cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cb0:	3328      	adds	r3, #40	@ 0x28
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	4413      	add	r3, r2
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
			for (int i = 1; i < 19; i++) {
 8000cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cc6:	2b12      	cmp	r3, #18
 8000cc8:	ddd2      	ble.n	8000c70 <_ZN7BMS_MOD5parseEmPhm+0x124>
			}

			return true;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e07d      	b.n	8000dca <_ZN7BMS_MOD5parseEmPhm+0x27e>

		} else if (m >= 21 && m <= 25) {
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	2b14      	cmp	r3, #20
 8000cd2:	dd79      	ble.n	8000dc8 <_ZN7BMS_MOD5parseEmPhm+0x27c>
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	2b19      	cmp	r3, #25
 8000cd8:	dc76      	bgt.n	8000dc8 <_ZN7BMS_MOD5parseEmPhm+0x27c>
			// m = 21 → packet 0, m = 25 → packet 4
			time_lim_received_temps = t + TIME_LIM_RECV_TEMPS;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	441a      	add	r2, r3
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	649a      	str	r2, [r3, #72]	@ 0x48
			int contador_ceros = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	627b      	str	r3, [r7, #36]	@ 0x24
			if (flag_charger == 1)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d104      	bne.n	8000cfe <_ZN7BMS_MOD5parseEmPhm+0x1b2>
				module_send_message_CAN1(id, buf, 8);
 8000cf4:	2208      	movs	r2, #8
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	68b8      	ldr	r0, [r7, #8]
 8000cfa:	f001 f8ed 	bl	8001ed8 <module_send_message_CAN1>

			for (int i = 0; i < 8; i++) {
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]
 8000d02:	e015      	b.n	8000d30 <_ZN7BMS_MOD5parseEmPhm+0x1e4>
				pos = (m - 21) * 8 + i;
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	3b15      	subs	r3, #21
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	6a3a      	ldr	r2, [r7, #32]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	617b      	str	r3, [r7, #20]
				if (pos >= 38)
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	2b25      	cmp	r3, #37	@ 0x25
 8000d14:	dc10      	bgt.n	8000d38 <_ZN7BMS_MOD5parseEmPhm+0x1ec>
					break;

				cellTemperature[pos] = buf[i];
 8000d16:	6a3b      	ldr	r3, [r7, #32]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	4619      	mov	r1, r3
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	323c      	adds	r2, #60	@ 0x3c
 8000d26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (int i = 0; i < 8; i++) {
 8000d2a:	6a3b      	ldr	r3, [r7, #32]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	623b      	str	r3, [r7, #32]
 8000d30:	6a3b      	ldr	r3, [r7, #32]
 8000d32:	2b07      	cmp	r3, #7
 8000d34:	dde6      	ble.n	8000d04 <_ZN7BMS_MOD5parseEmPhm+0x1b8>
 8000d36:	e000      	b.n	8000d3a <_ZN7BMS_MOD5parseEmPhm+0x1ee>
					break;
 8000d38:	bf00      	nop
				//if (cellTemperature[pos] > LIMIT_MAX_T)
				//	error_temp = BMS_ERROR_TEMP;

			}

			MAX_T = cellTemperature[0];
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			MIN_T = cellTemperature[0];
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
			for (int i = 0; i < 38; i++) {
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
 8000d56:	e032      	b.n	8000dbe <_ZN7BMS_MOD5parseEmPhm+0x272>
				if (cellTemperature[i] > MAX_T)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	69fa      	ldr	r2, [r7, #28]
 8000d5c:	323c      	adds	r2, #60	@ 0x3c
 8000d5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	dd08      	ble.n	8000d7e <_ZN7BMS_MOD5parseEmPhm+0x232>
					MAX_T = cellTemperature[i];
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	69fa      	ldr	r2, [r7, #28]
 8000d70:	323c      	adds	r2, #60	@ 0x3c
 8000d72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8000d7c:	e01c      	b.n	8000db8 <_ZN7BMS_MOD5parseEmPhm+0x26c>
				else if (cellTemperature[i] < MIN_T)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	69fa      	ldr	r2, [r7, #28]
 8000d82:	323c      	adds	r2, #60	@ 0x3c
 8000d84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	da08      	bge.n	8000da4 <_ZN7BMS_MOD5parseEmPhm+0x258>
					MIN_T = cellTemperature[i];
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	69fa      	ldr	r2, [r7, #28]
 8000d96:	323c      	adds	r2, #60	@ 0x3c
 8000d98:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8000da2:	e009      	b.n	8000db8 <_ZN7BMS_MOD5parseEmPhm+0x26c>
				else if (cellTemperature[i] == 0)
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	69fa      	ldr	r2, [r7, #28]
 8000da8:	323c      	adds	r2, #60	@ 0x3c
 8000daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d102      	bne.n	8000db8 <_ZN7BMS_MOD5parseEmPhm+0x26c>
					contador_ceros++;
 8000db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db4:	3301      	adds	r3, #1
 8000db6:	627b      	str	r3, [r7, #36]	@ 0x24
			for (int i = 0; i < 38; i++) {
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	61fb      	str	r3, [r7, #28]
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	2b25      	cmp	r3, #37	@ 0x25
 8000dc2:	ddc9      	ble.n	8000d58 <_ZN7BMS_MOD5parseEmPhm+0x20c>
			}
			if (contador_ceros > 15){
				//error_temp = BMS_ERROR_TEMP; DESCOMENTA
			}

			return true;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e000      	b.n	8000dca <_ZN7BMS_MOD5parseEmPhm+0x27e>
		}

	}

	return false;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3730      	adds	r7, #48	@ 0x30
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <_ZN7BMS_MOD13query_voltageEmPc>:

/*********************************************************************************************************
 ** Function name:           query_voltage
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/
int BMS_MOD::query_voltage(uint32_t time, char *buffer) {
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	60f8      	str	r0, [r7, #12]
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
	// Shunt voltage in milivolts

	if (get_state() == charge) {
 8000dde:	f001 f98f 	bl	8002100 <_Z9get_statev>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	bf0c      	ite	eq
 8000de8:	2301      	moveq	r3, #1
 8000dea:	2300      	movne	r3, #0
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d00f      	beq.n	8000e12 <_ZN7BMS_MOD13query_voltageEmPc+0x40>
		//Only balance when charging
		message_balancing[1] = BALANCING_V & 0xFF; // Coment this two lines for disabling the balancing
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
		message_balancing[0] = (BALANCING_V >> 8) & 0xFF; // Coment this two lines for disabling the balancing
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e06:	121b      	asrs	r3, r3, #8
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8000e10:	e007      	b.n	8000e22 <_ZN7BMS_MOD13query_voltageEmPc+0x50>

	} else {

		//Don't do anything

		message_balancing[0] = 0;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		message_balancing[1] = 0;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
	}

	if (time > time_lim_sent_volts) {
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d91d      	bls.n	8000e68 <_ZN7BMS_MOD13query_voltageEmPc+0x96>
		time_lim_sent_volts += TIME_LIM_SEND_VOLTS;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	6a1b      	ldr	r3, [r3, #32]
 8000e34:	441a      	add	r2, r3
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	639a      	str	r2, [r3, #56]	@ 0x38
		if (CANID != 0x00) { //It keeps sending 0x00 and dont know where
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d012      	beq.n	8000e68 <_ZN7BMS_MOD13query_voltageEmPc+0x96>
			if (module_send_message_CAN2(CANID, message_balancing, 2)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6818      	ldr	r0, [r3, #0]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	334c      	adds	r3, #76	@ 0x4c
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f001 f885 	bl	8001f5c <module_send_message_CAN2>
 8000e52:	4603      	mov	r3, r0
					!= HAL_OK) {
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	bf14      	ite	ne
 8000e58:	2301      	movne	r3, #1
 8000e5a:	2300      	moveq	r3, #0
 8000e5c:	b2db      	uxtb	r3, r3
			if (module_send_message_CAN2(CANID, message_balancing, 2)
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d002      	beq.n	8000e68 <_ZN7BMS_MOD13query_voltageEmPc+0x96>
				error_volt = BMS_ERROR_COMMUNICATION;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	2201      	movs	r2, #1
 8000e66:	605a      	str	r2, [r3, #4]
	if (time > time_lim_received_volts) {

		//error_volt = BMS_ERROR_COMMUNICATION;
	}

	if (TIME_LIM_PLOT_VOLTS > 0 && time > time_lim_plotted_volts) {
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	69db      	ldr	r3, [r3, #28]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d00f      	beq.n	8000e90 <_ZN7BMS_MOD13query_voltageEmPc+0xbe>
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e74:	68ba      	ldr	r2, [r7, #8]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d90a      	bls.n	8000e90 <_ZN7BMS_MOD13query_voltageEmPc+0xbe>
		time_lim_plotted_volts += TIME_LIM_PLOT_VOLTS;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	441a      	add	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	635a      	str	r2, [r3, #52]	@ 0x34
		voltage_info(buffer);
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	68f8      	ldr	r0, [r7, #12]
 8000e8c:	f7ff fcfe 	bl	800088c <_ZN7BMS_MOD12voltage_infoEPc>
	}

	for (int i = 0; i < NUM_CELLS; i++) {
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	e00f      	b.n	8000eb6 <_ZN7BMS_MOD13query_voltageEmPc+0xe4>
		voltage_acum += cellVoltagemV[i];
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000e9c:	68f9      	ldr	r1, [r7, #12]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	3328      	adds	r3, #40	@ 0x28
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	440b      	add	r3, r1
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	441a      	add	r2, r3
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	for (int i = 0; i < NUM_CELLS; i++) {
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	dbe8      	blt.n	8000e96 <_ZN7BMS_MOD13query_voltageEmPc+0xc4>
	}
	return error_volt;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	685b      	ldr	r3, [r3, #4]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <_ZN7BMS_MOD17query_temperatureEmPc>:
/*********************************************************************************************************
 ** Function name:           query_temperature
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/

int BMS_MOD::query_temperature(uint32_t time, char *buffer) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
// Function for performing a correct behavior
	if (time > time_lim_sent_temps) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE TEMPERATURES
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee0:	68ba      	ldr	r2, [r7, #8]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d912      	bls.n	8000f0c <_ZN7BMS_MOD17query_temperatureEmPc+0x3c>
		time_lim_sent_temps += TIME_LIM_SEND_TEMPS;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eee:	441a      	add	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	645a      	str	r2, [r3, #68]	@ 0x44

		if (module_send_message_CAN2(CANID + 20, message_temperatures, 2)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f103 0014 	add.w	r0, r3, #20
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	334e      	adds	r3, #78	@ 0x4e
 8000f00:	2202      	movs	r2, #2
 8000f02:	4619      	mov	r1, r3
 8000f04:	f001 f82a 	bl	8001f5c <module_send_message_CAN2>
 8000f08:	4603      	mov	r3, r0
				!= HAL_OK) {
 8000f0a:	2b00      	cmp	r3, #0
			//error_temp = BMS_ERROR_TEMP; // If the message is not sended then, error
		}
	}

	if (time_lim_sent_temps > 0 && time > time_lim_received_temps
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d003      	beq.n	8000f1c <_ZN7BMS_MOD17query_temperatureEmPc+0x4c>
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f18:	68ba      	ldr	r2, [r7, #8]
 8000f1a:	429a      	cmp	r2, r3
			&& time - time_lim_received_temps > TIME_LIM_RECV_TEMPS) {
		//error_temp = BMS_ERROR_COMMUNICATION;
	}

	if (TIME_LIM_PLOT_TEMPS > 0 && time > time_lim_plotted_temps) {
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d00f      	beq.n	8000f44 <_ZN7BMS_MOD17query_temperatureEmPc+0x74>
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f28:	68ba      	ldr	r2, [r7, #8]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d90a      	bls.n	8000f44 <_ZN7BMS_MOD17query_temperatureEmPc+0x74>
		time_lim_plotted_temps += TIME_LIM_PLOT_TEMPS;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f36:	441a      	add	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	641a      	str	r2, [r3, #64]	@ 0x40
		temperature_info(buffer);
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	68f8      	ldr	r0, [r7, #12]
 8000f40:	f7ff fd76 	bl	8000a30 <_ZN7BMS_MOD16temperature_infoEPc>
	}

	return error_temp;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	689b      	ldr	r3, [r3, #8]

}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <_ZN7CPU_MODC1Emmi>:

// ********************************************************************************************************
// **Function name:           CPU_MOD
// **Descriptions:            Initialization function of teh class
// ********************************************************************************************************
CPU_MOD::CPU_MOD(uint32_t _ID_send, uint32_t _ID_recv, int _LAG) { /////////////////////////Habia un _LAG=0
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
 8000f5c:	603b      	str	r3, [r7, #0]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2200      	movs	r2, #0
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2202      	movs	r2, #2
 8000f74:	731a      	strb	r2, [r3, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2202      	movs	r2, #2
 8000f7a:	611a      	str	r2, [r3, #16]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f82:	615a      	str	r2, [r3, #20]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2264      	movs	r2, #100	@ 0x64
 8000f88:	619a      	str	r2, [r3, #24]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	4a18      	ldr	r2, [pc, #96]	@ (8000ff0 <_ZN7CPU_MODC1Emmi+0xa0>)
 8000f8e:	61da      	str	r2, [r3, #28]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	695a      	ldr	r2, [r3, #20]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	621a      	str	r2, [r3, #32]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	625a      	str	r2, [r3, #36]	@ 0x24
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	69da      	ldr	r2, [r3, #28]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	629a      	str	r2, [r3, #40]	@ 0x28
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	631a      	str	r2, [r3, #48]	@ 0x30
    CANID_send = _ID_send;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	68ba      	ldr	r2, [r7, #8]
 8000fb6:	601a      	str	r2, [r3, #0]
    CANID_recv = _ID_recv;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	605a      	str	r2, [r3, #4]

    time_lim_plotted += _LAG;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6a1a      	ldr	r2, [r3, #32]
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	441a      	add	r2, r3
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	621a      	str	r2, [r3, #32]
    time_lim_sended += _LAG;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	441a      	add	r2, r3
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	625a      	str	r2, [r3, #36]	@ 0x24
    time_lim_received += _LAG;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	441a      	add	r2, r3
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	000f4240 	.word	0x000f4240

08000ff4 <_ZN7CPU_MOD5parseEmPhm>:

// ********************************************************************************************************
// **Function name:           parse
// **Descriptions:            Function for parsing the received data via CAN protocl
// ********************************************************************************************************
bool CPU_MOD::parse(uint32_t id, uint8_t* buf, uint32_t t) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
 8001000:	603b      	str	r3, [r7, #0]
    if (id == 0x100) {
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001008:	d131      	bne.n	800106e <_ZN7CPU_MOD5parseEmPhm+0x7a>
        error = CPU_OK;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
        time_lim_received = t + TIME_LIM_RECV;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	69da      	ldr	r2, [r3, #28]
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	441a      	add	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	629a      	str	r2, [r3, #40]	@ 0x28
        DC_BUS = (int)((buf[1]<<8)|buf[0]); // This direction sends the voltage in DC_BUS
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3301      	adds	r3, #1
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	7812      	ldrb	r2, [r2, #0]
 8001028:	431a      	orrs	r2, r3
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	631a      	str	r2, [r3, #48]	@ 0x30
        if (DC_BUS > 280) { //(DC_BUS>0.9*voltage_acum)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8001036:	dd18      	ble.n	800106a <_ZN7CPU_MOD5parseEmPhm+0x76>
            error = CPU_BUS_LINE_OK;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2202      	movs	r2, #2
 800103c:	609a      	str	r2, [r3, #8]
            if (module_send_message_CAN1(CANID_send, currentState, 1) != HAL_OK){
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6818      	ldr	r0, [r3, #0]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	330c      	adds	r3, #12
 8001046:	2201      	movs	r2, #1
 8001048:	4619      	mov	r1, r3
 800104a:	f000 ff45 	bl	8001ed8 <module_send_message_CAN1>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	bf14      	ite	ne
 8001054:	2301      	movne	r3, #1
 8001056:	2300      	moveq	r3, #0
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d005      	beq.n	800106a <_ZN7CPU_MOD5parseEmPhm+0x76>
                error = CPU_ERROR_COMMUNICATION;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2201      	movs	r2, #1
 8001062:	609a      	str	r2, [r3, #8]
                print((char*)"error message");
 8001064:	4804      	ldr	r0, [pc, #16]	@ (8001078 <_ZN7CPU_MOD5parseEmPhm+0x84>)
 8001066:	f000 ff99 	bl	8001f9c <print>
            }

        }
        return true;
 800106a:	2301      	movs	r3, #1
 800106c:	e000      	b.n	8001070 <_ZN7CPU_MOD5parseEmPhm+0x7c>
    }
    return false;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	0800cdd4 	.word	0x0800cdd4

0800107c <_ZN7CPU_MOD5queryEmPc>:

// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function to check if i need to send a mesage new mesage and the received mesajes interval are within the limits
// ********************************************************************************************************
int CPU_MOD::query(uint32_t time, char* buffer) {
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
	// Function for performing a correct behaivour
    if (time > time_lim_sended) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE BMS
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	429a      	cmp	r2, r3
 8001090:	d906      	bls.n	80010a0 <_ZN7CPU_MOD5queryEmPc+0x24>
        time_lim_sended += TIME_LIM_SEND;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	441a      	add	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    if (time > time_lim_received)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010a4:	68ba      	ldr	r2, [r7, #8]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d902      	bls.n	80010b0 <_ZN7CPU_MOD5queryEmPc+0x34>
        error = CPU_ERROR_COMMUNICATION; ///////Cheking if everything is alright each time
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2201      	movs	r2, #1
 80010ae:	609a      	str	r2, [r3, #8]

    if (TIME_LIM_PLOT > 0 && time > time_lim_plotted) {
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d00b      	beq.n	80010d0 <_ZN7CPU_MOD5queryEmPc+0x54>
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	6a1b      	ldr	r3, [r3, #32]
 80010bc:	68ba      	ldr	r2, [r7, #8]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d906      	bls.n	80010d0 <_ZN7CPU_MOD5queryEmPc+0x54>
        time_lim_plotted += TIME_LIM_PLOT;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6a1a      	ldr	r2, [r3, #32]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	441a      	add	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	621a      	str	r2, [r3, #32]
        //info(buffer);
    }
    return error;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	689b      	ldr	r3, [r3, #8]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <_ZN7CPU_MOD11updateStateEi>:

void CPU_MOD::updateState(int s) {
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
    currentState[0] = s & 0xFF;
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	731a      	strb	r2, [r3, #12]
    current_state = s;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	611a      	str	r2, [r3, #16]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <_ZN11Current_MODC1Emi>:

// ********************************************************************************************************
// **Function name:           Current_MOD
// **Descriptions:            Initialization function of current class
// **********************************************************************************************************
Current_MOD::Current_MOD(uint32_t ID, int _C_MAX)
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2200      	movs	r2, #0
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2200      	movs	r2, #0
 8001120:	721a      	strb	r2, [r3, #8]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2200      	movs	r2, #0
 8001126:	725a      	strb	r2, [r3, #9]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f04f 0200 	mov.w	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2200      	movs	r2, #0
 8001144:	61da      	str	r2, [r3, #28]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800114c:	621a      	str	r2, [r3, #32]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	22fa      	movs	r2, #250	@ 0xfa
 8001152:	625a      	str	r2, [r3, #36]	@ 0x24
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2232      	movs	r2, #50	@ 0x32
 8001158:	629a      	str	r2, [r3, #40]	@ 0x28
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2232      	movs	r2, #50	@ 0x32
 800115e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2200      	movs	r2, #0
 8001164:	631a      	str	r2, [r3, #48]	@ 0x30
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2200      	movs	r2, #0
 800116a:	635a      	str	r2, [r3, #52]	@ 0x34
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2200      	movs	r2, #0
 8001170:	639a      	str	r2, [r3, #56]	@ 0x38
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2200      	movs	r2, #0
 8001176:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2200      	movs	r2, #0
 800117c:	641a      	str	r2, [r3, #64]	@ 0x40
{
    CANID = ID;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	68ba      	ldr	r2, [r7, #8]
 8001182:	605a      	str	r2, [r3, #4]
    C_MAX = _C_MAX;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	601a      	str	r2, [r3, #0]
    flag_error_current = 1;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2201      	movs	r2, #1
 800118e:	61da      	str	r2, [r3, #28]
}
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4618      	mov	r0, r3
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <_ZN11Current_MOD5queryEiPc>:
// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function that transforms the voltage measured by the sensor to its equivalent current
// **********************************************************************************************************
int Current_MOD::query(int time, char* buffer)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
    error = Current_OK;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2200      	movs	r2, #0
 80011b0:	631a      	str	r2, [r3, #48]	@ 0x30

    //printValue(Current);
    Current=(2.5-VoltageV)/0.0057; //Sensitivity is 5,7 mv/A
    */

    Current = readAnalogValue();
 80011b2:	f000 ff59 	bl	8002068 <readAnalogValue>
 80011b6:	eef0 7a40 	vmov.f32	s15, s0
 80011ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011be:	ee17 2a90 	vmov	r2, s15
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(Current > C_MAX*0.8 && Current < C_MAX)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011ca:	ee07 3a90 	vmov	s15, r3
 80011ce:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	ee07 3a90 	vmov	s15, r3
 80011da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80011de:	ed9f 5b44 	vldr	d5, [pc, #272]	@ 80012f0 <_ZN11Current_MOD5queryEiPc+0x150>
 80011e2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80011e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80011ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ee:	dd11      	ble.n	8001214 <_ZN11Current_MOD5queryEiPc+0x74>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	da0b      	bge.n	8001214 <_ZN11Current_MOD5queryEiPc+0x74>
    {
        if(flag_error_current == 0) module_send_message_NoExtId_CAN1(0x500,message,1); //If current between 80 and 100% of maximun, sends alert
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	69db      	ldr	r3, [r3, #28]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d107      	bne.n	8001214 <_ZN11Current_MOD5queryEiPc+0x74>
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	3308      	adds	r3, #8
 8001208:	2201      	movs	r2, #1
 800120a:	4619      	mov	r1, r3
 800120c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001210:	f000 fe84 	bl	8001f1c <module_send_message_NoExtId_CAN1>
    }

    if (Current > C_MAX)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	429a      	cmp	r2, r3
 800121e:	dd18      	ble.n	8001252 <_ZN11Current_MOD5queryEiPc+0xb2>
    {
        if (flag_error_current == 1) {
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d107      	bne.n	8001238 <_ZN11Current_MOD5queryEiPc+0x98>
        	module_send_message_NoExtId_CAN1(0x501, message, 2); //If current over maximun, sends alert
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	3308      	adds	r3, #8
 800122c:	2202      	movs	r2, #2
 800122e:	4619      	mov	r1, r3
 8001230:	f240 5001 	movw	r0, #1281	@ 0x501
 8001234:	f000 fe72 	bl	8001f1c <module_send_message_NoExtId_CAN1>
        }

        flag_error_current++;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	69db      	ldr	r3, [r3, #28]
 800123c:	1c5a      	adds	r2, r3, #1
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	61da      	str	r2, [r3, #28]

        if (flag_charger != 1 || flag_charger == 1) //Only cut the AMS if accu not connected to charger, during charging the current control is on charger
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001246:	2b01      	cmp	r3, #1
 8001248:	d119      	bne.n	800127e <_ZN11Current_MOD5queryEiPc+0xde>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800124e:	2b01      	cmp	r3, #1
 8001250:	e015      	b.n	800127e <_ZN11Current_MOD5queryEiPc+0xde>
            }
        }
    }
    else
    {
        if (flag_error_current != 0)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00e      	beq.n	8001278 <_ZN11Current_MOD5queryEiPc+0xd8>
		for (int i = 0; i < 5; i++)
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	e008      	b.n	8001272 <_ZN11Current_MOD5queryEiPc+0xd2>
		{
			module_send_message_NoExtId_CAN1(0x502, 0, 2); //If current normal, sends green flag
 8001260:	2202      	movs	r2, #2
 8001262:	2100      	movs	r1, #0
 8001264:	f240 5002 	movw	r0, #1282	@ 0x502
 8001268:	f000 fe58 	bl	8001f1c <module_send_message_NoExtId_CAN1>
		for (int i = 0; i < 5; i++)
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	3301      	adds	r3, #1
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	2b04      	cmp	r3, #4
 8001276:	ddf3      	ble.n	8001260 <_ZN11Current_MOD5queryEiPc+0xc0>
		}
        flag_error_current = 0;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
    }


    if (time > time_lim_sended)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	429a      	cmp	r2, r3
 8001286:	dd16      	ble.n	80012b6 <_ZN11Current_MOD5queryEiPc+0x116>
    {
        time_lim_sended += TIME_LIM_SEND;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001290:	441a      	add	r2, r3
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	62da      	str	r2, [r3, #44]	@ 0x2c
        message[0] = 0;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2200      	movs	r2, #0
 800129a:	721a      	strb	r2, [r3, #8]
        message[1] = Current & 0xFF;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	725a      	strb	r2, [r3, #9]
        module_send_message_NoExtId_CAN1(CANID, message, 2); //Sends current through CAN each interval of ms
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6858      	ldr	r0, [r3, #4]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	3308      	adds	r3, #8
 80012ae:	2202      	movs	r2, #2
 80012b0:	4619      	mov	r1, r3
 80012b2:	f000 fe33 	bl	8001f1c <module_send_message_NoExtId_CAN1>
    }


    if (TIME_LIM_PLOT > 0 && time > time_lim_plotted)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6a1b      	ldr	r3, [r3, #32]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	dd0f      	ble.n	80012de <_ZN11Current_MOD5queryEiPc+0x13e>
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	dd0a      	ble.n	80012de <_ZN11Current_MOD5queryEiPc+0x13e>
    {
        time_lim_plotted += TIME_LIM_PLOT;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	441a      	add	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	629a      	str	r2, [r3, #40]	@ 0x28
        info(buffer);
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	68f8      	ldr	r0, [r7, #12]
 80012da:	f000 f80d 	bl	80012f8 <_ZN11Current_MOD4infoEPc>

    }

    
    return error;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	f3af 8000 	nop.w
 80012f0:	9999999a 	.word	0x9999999a
 80012f4:	3fe99999 	.word	0x3fe99999

080012f8 <_ZN11Current_MOD4infoEPc>:

// ********************************************************************************************************
// **Function name:           info
// **Descriptions:            Function for printing the class data
// **********************************************************************************************************
void Current_MOD::info(char* buffer) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	Current = 0;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	63da      	str	r2, [r3, #60]	@ 0x3c
    if (getUARTState() == HAL_UART_STATE_READY) { // Send the message just if there is a serial por connected
 8001308:	f000 fea2 	bl	8002050 <getUARTState>
 800130c:	4603      	mov	r3, r0
 800130e:	2b20      	cmp	r3, #32
 8001310:	bf0c      	ite	eq
 8001312:	2301      	moveq	r3, #1
 8001314:	2300      	movne	r3, #0
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	d043      	beq.n	80013a4 <_ZN11Current_MOD4infoEPc+0xac>
		sprintf(buffer, "\n***********************\n");
 800131c:	4923      	ldr	r1, [pc, #140]	@ (80013ac <_ZN11Current_MOD4infoEPc+0xb4>)
 800131e:	6838      	ldr	r0, [r7, #0]
 8001320:	f00a ff70 	bl	800c204 <siprintf>
		print(buffer);
 8001324:	6838      	ldr	r0, [r7, #0]
 8001326:	f000 fe39 	bl	8001f9c <print>
		sprintf(buffer, "         Current\n");
 800132a:	4921      	ldr	r1, [pc, #132]	@ (80013b0 <_ZN11Current_MOD4infoEPc+0xb8>)
 800132c:	6838      	ldr	r0, [r7, #0]
 800132e:	f00a ff69 	bl	800c204 <siprintf>
		print(buffer);
 8001332:	6838      	ldr	r0, [r7, #0]
 8001334:	f000 fe32 	bl	8001f9c <print>
		sprintf(buffer, "***********************\n");
 8001338:	491e      	ldr	r1, [pc, #120]	@ (80013b4 <_ZN11Current_MOD4infoEPc+0xbc>)
 800133a:	6838      	ldr	r0, [r7, #0]
 800133c:	f00a ff62 	bl	800c204 <siprintf>
		print(buffer);
 8001340:	6838      	ldr	r0, [r7, #0]
 8001342:	f000 fe2b 	bl	8001f9c <print>
		sprintf(buffer, " - ERROR:     %i\n", error);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	461a      	mov	r2, r3
 800134c:	491a      	ldr	r1, [pc, #104]	@ (80013b8 <_ZN11Current_MOD4infoEPc+0xc0>)
 800134e:	6838      	ldr	r0, [r7, #0]
 8001350:	f00a ff58 	bl	800c204 <siprintf>
		print(buffer);
 8001354:	6838      	ldr	r0, [r7, #0]
 8001356:	f000 fe21 	bl	8001f9c <print>
		sprintf(buffer, " - CAN ID:    0x%lx\n", CANID);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	461a      	mov	r2, r3
 8001360:	4916      	ldr	r1, [pc, #88]	@ (80013bc <_ZN11Current_MOD4infoEPc+0xc4>)
 8001362:	6838      	ldr	r0, [r7, #0]
 8001364:	f00a ff4e 	bl	800c204 <siprintf>
		print(buffer);
 8001368:	6838      	ldr	r0, [r7, #0]
 800136a:	f000 fe17 	bl	8001f9c <print>
		sprintf(buffer, " - LIM C =    %i A\n", C_MAX);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	4912      	ldr	r1, [pc, #72]	@ (80013c0 <_ZN11Current_MOD4infoEPc+0xc8>)
 8001376:	6838      	ldr	r0, [r7, #0]
 8001378:	f00a ff44 	bl	800c204 <siprintf>
		print(buffer);
 800137c:	6838      	ldr	r0, [r7, #0]
 800137e:	f000 fe0d 	bl	8001f9c <print>
		sprintf(buffer, "-----------------------\n");
 8001382:	4910      	ldr	r1, [pc, #64]	@ (80013c4 <_ZN11Current_MOD4infoEPc+0xcc>)
 8001384:	6838      	ldr	r0, [r7, #0]
 8001386:	f00a ff3d 	bl	800c204 <siprintf>
		print(buffer);
 800138a:	6838      	ldr	r0, [r7, #0]
 800138c:	f000 fe06 	bl	8001f9c <print>
		sprintf(buffer, "Current (A): %i\n", Current);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001394:	461a      	mov	r2, r3
 8001396:	490c      	ldr	r1, [pc, #48]	@ (80013c8 <_ZN11Current_MOD4infoEPc+0xd0>)
 8001398:	6838      	ldr	r0, [r7, #0]
 800139a:	f00a ff33 	bl	800c204 <siprintf>
		print(buffer);
 800139e:	6838      	ldr	r0, [r7, #0]
 80013a0:	f000 fdfc 	bl	8001f9c <print>

    }
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	0800cde4 	.word	0x0800cde4
 80013b0:	0800ce00 	.word	0x0800ce00
 80013b4:	0800ce14 	.word	0x0800ce14
 80013b8:	0800ce30 	.word	0x0800ce30
 80013bc:	0800ce44 	.word	0x0800ce44
 80013c0:	0800ce5c 	.word	0x0800ce5c
 80013c4:	0800ce70 	.word	0x0800ce70
 80013c8:	0800ce8c 	.word	0x0800ce8c

080013cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d2:	f001 fd09 	bl	8002de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d6:	f000 f8a5 	bl	8001524 <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80013da:	f000 f91f 	bl	800161c <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013de:	f000 fc57 	bl	8001c90 <_ZL12MX_GPIO_Initv>
  MX_FDCAN2_Init();
 80013e2:	f000 fadd 	bl	80019a0 <_ZL14MX_FDCAN2_Initv>
  MX_FDCAN1_Init();
 80013e6:	f000 fa51 	bl	800188c <_ZL14MX_FDCAN1_Initv>
  MX_USART2_UART_Init();
 80013ea:	f000 fbf1 	bl	8001bd0 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 80013ee:	f000 f949 	bl	8001684 <_ZL12MX_ADC1_Initv>
  MX_ADC3_Init();
 80013f2:	f000 f9d1 	bl	8001798 <_ZL12MX_ADC3_Initv>
  MX_TIM17_Init();
 80013f6:	f000 fb5d 	bl	8001ab4 <_ZL13MX_TIM17_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80013fa:	2100      	movs	r1, #0
 80013fc:	483e      	ldr	r0, [pc, #248]	@ (80014f8 <main+0x12c>)
 80013fe:	f008 fe19 	bl	800a034 <HAL_TIM_PWM_Start>



  if (HAL_FDCAN_Start(&hfdcan1) == HAL_OK){
 8001402:	483e      	ldr	r0, [pc, #248]	@ (80014fc <main+0x130>)
 8001404:	f004 f884 	bl	8005510 <HAL_FDCAN_Start>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	bf0c      	ite	eq
 800140e:	2301      	moveq	r3, #1
 8001410:	2300      	movne	r3, #0
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	d002      	beq.n	800141e <main+0x52>
	  print((char*)"CAN_ACU iniciado");
 8001418:	4839      	ldr	r0, [pc, #228]	@ (8001500 <main+0x134>)
 800141a:	f000 fdbf 	bl	8001f9c <print>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) == HAL_OK)
 800141e:	2200      	movs	r2, #0
 8001420:	2101      	movs	r1, #1
 8001422:	4836      	ldr	r0, [pc, #216]	@ (80014fc <main+0x130>)
 8001424:	f004 fa66 	bl	80058f4 <HAL_FDCAN_ActivateNotification>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	bf0c      	ite	eq
 800142e:	2301      	moveq	r3, #1
 8001430:	2300      	movne	r3, #0
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	d002      	beq.n	800143e <main+0x72>
  {
	  print((char*)"CAN_ACU notification");
 8001438:	4832      	ldr	r0, [pc, #200]	@ (8001504 <main+0x138>)
 800143a:	f000 fdaf 	bl	8001f9c <print>
  }

  if (HAL_FDCAN_Start(&hfdcan2) == HAL_OK){
 800143e:	4832      	ldr	r0, [pc, #200]	@ (8001508 <main+0x13c>)
 8001440:	f004 f866 	bl	8005510 <HAL_FDCAN_Start>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	bf0c      	ite	eq
 800144a:	2301      	moveq	r3, #1
 800144c:	2300      	movne	r3, #0
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d002      	beq.n	800145a <main+0x8e>
	  print((char*)"CAN_BMS iniciado");
 8001454:	482d      	ldr	r0, [pc, #180]	@ (800150c <main+0x140>)
 8001456:	f000 fda1 	bl	8001f9c <print>
  }

  if(HAL_ADC_Start(&hadc3) == HAL_OK){
 800145a:	482d      	ldr	r0, [pc, #180]	@ (8001510 <main+0x144>)
 800145c:	f002 fa84 	bl	8003968 <HAL_ADC_Start>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	bf0c      	ite	eq
 8001466:	2301      	moveq	r3, #1
 8001468:	2300      	movne	r3, #0
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b00      	cmp	r3, #0
 800146e:	d002      	beq.n	8001476 <main+0xaa>
	  print((char*)"ADC iniciado");
 8001470:	4828      	ldr	r0, [pc, #160]	@ (8001514 <main+0x148>)
 8001472:	f000 fd93 	bl	8001f9c <print>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  select_state();
 8001476:	f000 fe4f 	bl	8002118 <_Z12select_statev>
		  msg_acu.bus = 1;
		  msg_acu.time = HAL_GetTick();
		  parse_state(msg_acu);
	  }*/

	  if (HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader_bms, RxData) == HAL_OK) {
 800147a:	4b27      	ldr	r3, [pc, #156]	@ (8001518 <main+0x14c>)
 800147c:	4a27      	ldr	r2, [pc, #156]	@ (800151c <main+0x150>)
 800147e:	2140      	movs	r1, #64	@ 0x40
 8001480:	4821      	ldr	r0, [pc, #132]	@ (8001508 <main+0x13c>)
 8001482:	f004 f8cb 	bl	800561c <HAL_FDCAN_GetRxMessage>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	bf0c      	ite	eq
 800148c:	2301      	moveq	r3, #1
 800148e:	2300      	movne	r3, #0
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0ef      	beq.n	8001476 <main+0xaa>

		  msg_bms.id = RxHeader_bms.Identifier;
 8001496:	4b21      	ldr	r3, [pc, #132]	@ (800151c <main+0x150>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a21      	ldr	r2, [pc, #132]	@ (8001520 <main+0x154>)
 800149c:	6013      	str	r3, [r2, #0]
		  msg_bms.len = RxHeader_bms.DataLength;
 800149e:	4b1f      	ldr	r3, [pc, #124]	@ (800151c <main+0x150>)
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001520 <main+0x154>)
 80014a6:	711a      	strb	r2, [r3, #4]
		  for (int i = 0; i < 8; i++) {msg_bms.buf[i] = RxData[i];}
 80014a8:	2300      	movs	r3, #0
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	e00c      	b.n	80014c8 <main+0xfc>
 80014ae:	4a1a      	ldr	r2, [pc, #104]	@ (8001518 <main+0x14c>)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4413      	add	r3, r2
 80014b4:	7819      	ldrb	r1, [r3, #0]
 80014b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001520 <main+0x154>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4413      	add	r3, r2
 80014bc:	3305      	adds	r3, #5
 80014be:	460a      	mov	r2, r1
 80014c0:	701a      	strb	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3301      	adds	r3, #1
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b07      	cmp	r3, #7
 80014cc:	ddef      	ble.n	80014ae <main+0xe2>
		  msg_bms.bus = 2;
 80014ce:	4b14      	ldr	r3, [pc, #80]	@ (8001520 <main+0x154>)
 80014d0:	2202      	movs	r2, #2
 80014d2:	611a      	str	r2, [r3, #16]
		  msg_bms.time = HAL_GetTick();
 80014d4:	f001 fd0e 	bl	8002ef4 <HAL_GetTick>
 80014d8:	4603      	mov	r3, r0
 80014da:	4a11      	ldr	r2, [pc, #68]	@ (8001520 <main+0x154>)
 80014dc:	6153      	str	r3, [r2, #20]

		  parse_state(msg_bms);
 80014de:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <main+0x154>)
 80014e0:	466c      	mov	r4, sp
 80014e2:	f103 0210 	add.w	r2, r3, #16
 80014e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014ea:	e884 0003 	stmia.w	r4, {r0, r1}
 80014ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014f0:	f001 f83c 	bl	800256c <_Z11parse_state6CANMsg>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80014f4:	e7bf      	b.n	8001476 <main+0xaa>
 80014f6:	bf00      	nop
 80014f8:	240002a8 	.word	0x240002a8
 80014fc:	24000168 	.word	0x24000168
 8001500:	0800cea0 	.word	0x0800cea0
 8001504:	0800ceb4 	.word	0x0800ceb4
 8001508:	24000208 	.word	0x24000208
 800150c:	0800cecc 	.word	0x0800cecc
 8001510:	240000f8 	.word	0x240000f8
 8001514:	0800cee0 	.word	0x0800cee0
 8001518:	24000420 	.word	0x24000420
 800151c:	240003f8 	.word	0x240003f8
 8001520:	2400048c 	.word	0x2400048c

08001524 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b09c      	sub	sp, #112	@ 0x70
 8001528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152e:	224c      	movs	r2, #76	@ 0x4c
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f00a fe88 	bl	800c248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	2220      	movs	r2, #32
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f00a fe82 	bl	800c248 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001544:	2002      	movs	r0, #2
 8001546:	f005 f937 	bl	80067b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800154a:	2300      	movs	r3, #0
 800154c:	603b      	str	r3, [r7, #0]
 800154e:	4b32      	ldr	r3, [pc, #200]	@ (8001618 <_Z18SystemClock_Configv+0xf4>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	4a31      	ldr	r2, [pc, #196]	@ (8001618 <_Z18SystemClock_Configv+0xf4>)
 8001554:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001558:	6193      	str	r3, [r2, #24]
 800155a:	4b2f      	ldr	r3, [pc, #188]	@ (8001618 <_Z18SystemClock_Configv+0xf4>)
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001566:	bf00      	nop
 8001568:	4b2b      	ldr	r3, [pc, #172]	@ (8001618 <_Z18SystemClock_Configv+0xf4>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001570:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001574:	bf14      	ite	ne
 8001576:	2301      	movne	r3, #1
 8001578:	2300      	moveq	r3, #0
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1f3      	bne.n	8001568 <_Z18SystemClock_Configv+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001580:	2301      	movs	r3, #1
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001584:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001588:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800158a:	2302      	movs	r3, #2
 800158c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800158e:	2302      	movs	r3, #2
 8001590:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001592:	2302      	movs	r3, #2
 8001594:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001596:	232c      	movs	r3, #44	@ 0x2c
 8001598:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800159a:	2301      	movs	r3, #1
 800159c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800159e:	2304      	movs	r3, #4
 80015a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015a2:	2302      	movs	r3, #2
 80015a4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80015a6:	230c      	movs	r3, #12
 80015a8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b6:	4618      	mov	r0, r3
 80015b8:	f005 f938 	bl	800682c <HAL_RCC_OscConfig>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	bf14      	ite	ne
 80015c2:	2301      	movne	r3, #1
 80015c4:	2300      	moveq	r3, #0
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 80015cc:	f000 fd92 	bl	80020f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d0:	233f      	movs	r3, #63	@ 0x3f
 80015d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d4:	2303      	movs	r3, #3
 80015d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80015dc:	2308      	movs	r3, #8
 80015de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80015e0:	2340      	movs	r3, #64	@ 0x40
 80015e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80015e4:	2340      	movs	r3, #64	@ 0x40
 80015e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80015e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80015ee:	2340      	movs	r3, #64	@ 0x40
 80015f0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	2103      	movs	r1, #3
 80015f6:	4618      	mov	r0, r3
 80015f8:	f005 fcf2 	bl	8006fe0 <HAL_RCC_ClockConfig>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	bf14      	ite	ne
 8001602:	2301      	movne	r3, #1
 8001604:	2300      	moveq	r3, #0
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <_Z18SystemClock_Configv+0xec>
  {
    Error_Handler();
 800160c:	f000 fd72 	bl	80020f4 <Error_Handler>
  }
}
 8001610:	bf00      	nop
 8001612:	3770      	adds	r7, #112	@ 0x70
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	58024800 	.word	0x58024800

0800161c <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b0ae      	sub	sp, #184	@ 0xb8
 8001620:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001622:	463b      	mov	r3, r7
 8001624:	22b8      	movs	r2, #184	@ 0xb8
 8001626:	2100      	movs	r1, #0
 8001628:	4618      	mov	r0, r3
 800162a:	f00a fe0d 	bl	800c248 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800162e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800163a:	2302      	movs	r3, #2
 800163c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 800163e:	2310      	movs	r3, #16
 8001640:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001642:	2302      	movs	r3, #2
 8001644:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001646:	2302      	movs	r3, #2
 8001648:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800164a:	2302      	movs	r3, #2
 800164c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800164e:	23c0      	movs	r3, #192	@ 0xc0
 8001650:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001652:	2300      	movs	r3, #0
 8001654:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800165a:	2300      	movs	r3, #0
 800165c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001660:	463b      	mov	r3, r7
 8001662:	4618      	mov	r0, r3
 8001664:	f006 f848 	bl	80076f8 <HAL_RCCEx_PeriphCLKConfig>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	bf14      	ite	ne
 800166e:	2301      	movne	r3, #1
 8001670:	2300      	moveq	r3, #0
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <_Z24PeriphCommonClock_Configv+0x60>
  {
    Error_Handler();
 8001678:	f000 fd3c 	bl	80020f4 <Error_Handler>
  }
}
 800167c:	bf00      	nop
 800167e:	37b8      	adds	r7, #184	@ 0xb8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08c      	sub	sp, #48	@ 0x30
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800168a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001696:	463b      	mov	r3, r7
 8001698:	2224      	movs	r2, #36	@ 0x24
 800169a:	2100      	movs	r1, #0
 800169c:	4618      	mov	r0, r3
 800169e:	f00a fdd3 	bl	800c248 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016a2:	4b3a      	ldr	r3, [pc, #232]	@ (800178c <_ZL12MX_ADC1_Initv+0x108>)
 80016a4:	4a3a      	ldr	r2, [pc, #232]	@ (8001790 <_ZL12MX_ADC1_Initv+0x10c>)
 80016a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80016a8:	4b38      	ldr	r3, [pc, #224]	@ (800178c <_ZL12MX_ADC1_Initv+0x108>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016ae:	4b37      	ldr	r3, [pc, #220]	@ (800178c <_ZL12MX_ADC1_Initv+0x108>)
 80016b0:	2208      	movs	r2, #8
 80016b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016b4:	4b35      	ldr	r3, [pc, #212]	@ (800178c <_ZL12MX_ADC1_Initv+0x108>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016ba:	4b34      	ldr	r3, [pc, #208]	@ (800178c <_ZL12MX_ADC1_Initv+0x108>)
 80016bc:	2204      	movs	r2, #4
 80016be:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80016c0:	4b32      	ldr	r3, [pc, #200]	@ (800178c <_ZL12MX_ADC1_Initv+0x108>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016c6:	4b31      	ldr	r3, [pc, #196]	@ (800178c <_ZL12MX_ADC1_Initv+0x108>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80016cc:	4b2f      	ldr	r3, [pc, #188]	@ (800178c <_ZL12MX_ADC1_Initv+0x108>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016d2:	4b2e      	ldr	r3, [pc, #184]	@ (800178c <_ZL12MX_ADC1_Initv+0x108>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016da:	4b2c      	ldr	r3, [pc, #176]	@ (800178c <_ZL12MX_ADC1_Initv+0x108>)
 80016dc:	2200      	movs	r2, #0
 80016de:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016e0:	4b2a      	ldr	r3, [pc, #168]	@ (800178c <_ZL12MX_ADC1_Initv+0x108>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80016e6:	4b29      	ldr	r3, [pc, #164]	@ (800178c <_ZL12MX_ADC1_Initv+0x108>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016ec:	4b27      	ldr	r3, [pc, #156]	@ (800178c <_ZL12MX_ADC1_Initv+0x108>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80016f2:	4b26      	ldr	r3, [pc, #152]	@ (800178c <_ZL12MX_ADC1_Initv+0x108>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80016f8:	4b24      	ldr	r3, [pc, #144]	@ (800178c <_ZL12MX_ADC1_Initv+0x108>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8001700:	4b22      	ldr	r3, [pc, #136]	@ (800178c <_ZL12MX_ADC1_Initv+0x108>)
 8001702:	2201      	movs	r2, #1
 8001704:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001706:	4821      	ldr	r0, [pc, #132]	@ (800178c <_ZL12MX_ADC1_Initv+0x108>)
 8001708:	f001 ff26 	bl	8003558 <HAL_ADC_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	bf14      	ite	ne
 8001712:	2301      	movne	r3, #1
 8001714:	2300      	moveq	r3, #0
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 800171c:	f000 fcea 	bl	80020f4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001720:	2300      	movs	r3, #0
 8001722:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001724:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001728:	4619      	mov	r1, r3
 800172a:	4818      	ldr	r0, [pc, #96]	@ (800178c <_ZL12MX_ADC1_Initv+0x108>)
 800172c:	f003 faaa 	bl	8004c84 <HAL_ADCEx_MultiModeConfigChannel>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	bf14      	ite	ne
 8001736:	2301      	movne	r3, #1
 8001738:	2300      	moveq	r3, #0
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 8001740:	f000 fcd8 	bl	80020f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001744:	4b13      	ldr	r3, [pc, #76]	@ (8001794 <_ZL12MX_ADC1_Initv+0x110>)
 8001746:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001748:	2306      	movs	r3, #6
 800174a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800174c:	2300      	movs	r3, #0
 800174e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001750:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001754:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001756:	2304      	movs	r3, #4
 8001758:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001764:	463b      	mov	r3, r7
 8001766:	4619      	mov	r1, r3
 8001768:	4808      	ldr	r0, [pc, #32]	@ (800178c <_ZL12MX_ADC1_Initv+0x108>)
 800176a:	f002 fafd 	bl	8003d68 <HAL_ADC_ConfigChannel>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	bf14      	ite	ne
 8001774:	2301      	movne	r3, #1
 8001776:	2300      	moveq	r3, #0
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <_ZL12MX_ADC1_Initv+0xfe>
  {
    Error_Handler();
 800177e:	f000 fcb9 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	3730      	adds	r7, #48	@ 0x30
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	24000088 	.word	0x24000088
 8001790:	40022000 	.word	0x40022000
 8001794:	08600004 	.word	0x08600004

08001798 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	@ 0x28
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	2224      	movs	r2, #36	@ 0x24
 80017a2:	2100      	movs	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f00a fd4f 	bl	800c248 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80017aa:	4b35      	ldr	r3, [pc, #212]	@ (8001880 <_ZL12MX_ADC3_Initv+0xe8>)
 80017ac:	4a35      	ldr	r2, [pc, #212]	@ (8001884 <_ZL12MX_ADC3_Initv+0xec>)
 80017ae:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80017b0:	4b33      	ldr	r3, [pc, #204]	@ (8001880 <_ZL12MX_ADC3_Initv+0xe8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 80017b6:	4b32      	ldr	r3, [pc, #200]	@ (8001880 <_ZL12MX_ADC3_Initv+0xe8>)
 80017b8:	220c      	movs	r2, #12
 80017ba:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80017bc:	4b30      	ldr	r3, [pc, #192]	@ (8001880 <_ZL12MX_ADC3_Initv+0xe8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001880 <_ZL12MX_ADC3_Initv+0xe8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001880 <_ZL12MX_ADC3_Initv+0xe8>)
 80017ca:	2204      	movs	r2, #4
 80017cc:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80017ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001880 <_ZL12MX_ADC3_Initv+0xe8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80017d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001880 <_ZL12MX_ADC3_Initv+0xe8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80017da:	4b29      	ldr	r3, [pc, #164]	@ (8001880 <_ZL12MX_ADC3_Initv+0xe8>)
 80017dc:	2201      	movs	r2, #1
 80017de:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80017e0:	4b27      	ldr	r3, [pc, #156]	@ (8001880 <_ZL12MX_ADC3_Initv+0xe8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017e8:	4b25      	ldr	r3, [pc, #148]	@ (8001880 <_ZL12MX_ADC3_Initv+0xe8>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017ee:	4b24      	ldr	r3, [pc, #144]	@ (8001880 <_ZL12MX_ADC3_Initv+0xe8>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80017f4:	4b22      	ldr	r3, [pc, #136]	@ (8001880 <_ZL12MX_ADC3_Initv+0xe8>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80017fc:	4b20      	ldr	r3, [pc, #128]	@ (8001880 <_ZL12MX_ADC3_Initv+0xe8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001802:	4b1f      	ldr	r3, [pc, #124]	@ (8001880 <_ZL12MX_ADC3_Initv+0xe8>)
 8001804:	2200      	movs	r2, #0
 8001806:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001808:	4b1d      	ldr	r3, [pc, #116]	@ (8001880 <_ZL12MX_ADC3_Initv+0xe8>)
 800180a:	2200      	movs	r2, #0
 800180c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800180e:	4b1c      	ldr	r3, [pc, #112]	@ (8001880 <_ZL12MX_ADC3_Initv+0xe8>)
 8001810:	2200      	movs	r2, #0
 8001812:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001814:	4b1a      	ldr	r3, [pc, #104]	@ (8001880 <_ZL12MX_ADC3_Initv+0xe8>)
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 800181c:	4b18      	ldr	r3, [pc, #96]	@ (8001880 <_ZL12MX_ADC3_Initv+0xe8>)
 800181e:	2200      	movs	r2, #0
 8001820:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001822:	4817      	ldr	r0, [pc, #92]	@ (8001880 <_ZL12MX_ADC3_Initv+0xe8>)
 8001824:	f001 fe98 	bl	8003558 <HAL_ADC_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	bf14      	ite	ne
 800182e:	2301      	movne	r3, #1
 8001830:	2300      	moveq	r3, #0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 8001838:	f000 fc5c 	bl	80020f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800183c:	4b12      	ldr	r3, [pc, #72]	@ (8001888 <_ZL12MX_ADC3_Initv+0xf0>)
 800183e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001840:	2306      	movs	r3, #6
 8001842:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001848:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800184c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800184e:	2304      	movs	r3, #4
 8001850:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001856:	2300      	movs	r3, #0
 8001858:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	4619      	mov	r1, r3
 800185e:	4808      	ldr	r0, [pc, #32]	@ (8001880 <_ZL12MX_ADC3_Initv+0xe8>)
 8001860:	f002 fa82 	bl	8003d68 <HAL_ADC_ConfigChannel>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	bf14      	ite	ne
 800186a:	2301      	movne	r3, #1
 800186c:	2300      	moveq	r3, #0
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <_ZL12MX_ADC3_Initv+0xe0>
  {
    Error_Handler();
 8001874:	f000 fc3e 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	3728      	adds	r7, #40	@ 0x28
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	240000f8 	.word	0x240000f8
 8001884:	58026000 	.word	0x58026000
 8001888:	1d500080 	.word	0x1d500080

0800188c <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001892:	4b41      	ldr	r3, [pc, #260]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001894:	4a41      	ldr	r2, [pc, #260]	@ (800199c <_ZL14MX_FDCAN1_Initv+0x110>)
 8001896:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8001898:	4b3f      	ldr	r3, [pc, #252]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800189a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800189e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80018a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80018a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80018ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80018b2:	4b39      	ldr	r3, [pc, #228]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 80018b8:	4b37      	ldr	r3, [pc, #220]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80018ba:	2203      	movs	r2, #3
 80018bc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80018be:	4b36      	ldr	r3, [pc, #216]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 80018c4:	4b34      	ldr	r3, [pc, #208]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80018c6:	220a      	movs	r2, #10
 80018c8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 80018ca:	4b33      	ldr	r3, [pc, #204]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80018cc:	2205      	movs	r2, #5
 80018ce:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80018d0:	4b31      	ldr	r3, [pc, #196]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80018d6:	4b30      	ldr	r3, [pc, #192]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80018d8:	2201      	movs	r2, #1
 80018da:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80018dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80018de:	2201      	movs	r2, #1
 80018e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80018e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80018e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80018ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 5;
 80018f4:	4b28      	ldr	r3, [pc, #160]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80018f6:	2205      	movs	r2, #5
 80018f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 80018fa:	4b27      	ldr	r3, [pc, #156]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80018fc:	2220      	movs	r2, #32
 80018fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001900:	4b25      	ldr	r3, [pc, #148]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001902:	2204      	movs	r2, #4
 8001904:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8001906:	4b24      	ldr	r3, [pc, #144]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001908:	2220      	movs	r2, #32
 800190a:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800190c:	4b22      	ldr	r3, [pc, #136]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800190e:	2204      	movs	r2, #4
 8001910:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 8001912:	4b21      	ldr	r3, [pc, #132]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001914:	2201      	movs	r2, #1
 8001916:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001918:	4b1f      	ldr	r3, [pc, #124]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800191a:	2204      	movs	r2, #4
 800191c:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 1;
 800191e:	4b1e      	ldr	r3, [pc, #120]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001920:	2201      	movs	r2, #1
 8001922:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 8001924:	4b1c      	ldr	r3, [pc, #112]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001926:	2220      	movs	r2, #32
 8001928:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 800192a:	4b1b      	ldr	r3, [pc, #108]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800192c:	2220      	movs	r2, #32
 800192e:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001930:	4b19      	ldr	r3, [pc, #100]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001932:	2200      	movs	r2, #0
 8001934:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001936:	4b18      	ldr	r3, [pc, #96]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001938:	2204      	movs	r2, #4
 800193a:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800193c:	4816      	ldr	r0, [pc, #88]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800193e:	f003 fb93 	bl	8005068 <HAL_FDCAN_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	bf14      	ite	ne
 8001948:	2301      	movne	r3, #1
 800194a:	2300      	moveq	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <_ZL14MX_FDCAN1_Initv+0xca>
  {
    Error_Handler();
 8001952:	f000 fbcf 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8001956:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800195a:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001960:	2302      	movs	r3, #2
 8001962:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001964:	2301      	movs	r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0;
 8001968:	2300      	movs	r3, #0
 800196a:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x0;
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001970:	463b      	mov	r3, r7
 8001972:	4619      	mov	r1, r3
 8001974:	4808      	ldr	r0, [pc, #32]	@ (8001998 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001976:	f003 fd55 	bl	8005424 <HAL_FDCAN_ConfigFilter>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	bf14      	ite	ne
 8001980:	2301      	movne	r3, #1
 8001982:	2300      	moveq	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <_ZL14MX_FDCAN1_Initv+0x102>
  {
    Error_Handler();
 800198a:	f000 fbb3 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 800198e:	bf00      	nop
 8001990:	3720      	adds	r7, #32
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	24000168 	.word	0x24000168
 800199c:	4000a000 	.word	0x4000a000

080019a0 <_ZL14MX_FDCAN2_Initv>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80019a6:	4b41      	ldr	r3, [pc, #260]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 80019a8:	4a41      	ldr	r2, [pc, #260]	@ (8001ab0 <_ZL14MX_FDCAN2_Initv+0x110>)
 80019aa:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80019ac:	4b3f      	ldr	r3, [pc, #252]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 80019ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019b2:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80019b4:	4b3d      	ldr	r3, [pc, #244]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80019ba:	4b3c      	ldr	r3, [pc, #240]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80019c0:	4b3a      	ldr	r3, [pc, #232]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80019c6:	4b39      	ldr	r3, [pc, #228]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 3;
 80019cc:	4b37      	ldr	r3, [pc, #220]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 80019ce:	2203      	movs	r2, #3
 80019d0:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80019d2:	4b36      	ldr	r3, [pc, #216]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 10;
 80019d8:	4b34      	ldr	r3, [pc, #208]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 80019da:	220a      	movs	r2, #10
 80019dc:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 80019de:	4b33      	ldr	r3, [pc, #204]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 80019e0:	2205      	movs	r2, #5
 80019e2:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80019e4:	4b31      	ldr	r3, [pc, #196]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80019ea:	4b30      	ldr	r3, [pc, #192]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80019f0:	4b2e      	ldr	r3, [pc, #184]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80019f6:	4b2d      	ldr	r3, [pc, #180]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80019fc:	4b2b      	ldr	r3, [pc, #172]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8001a02:	4b2a      	ldr	r3, [pc, #168]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 5;
 8001a08:	4b28      	ldr	r3, [pc, #160]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a0a:	2205      	movs	r2, #5
 8001a0c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 32;
 8001a0e:	4b27      	ldr	r3, [pc, #156]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a10:	2220      	movs	r2, #32
 8001a12:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001a14:	4b25      	ldr	r3, [pc, #148]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a16:	2204      	movs	r2, #4
 8001a18:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 32;
 8001a1a:	4b24      	ldr	r3, [pc, #144]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001a20:	4b22      	ldr	r3, [pc, #136]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a22:	2204      	movs	r2, #4
 8001a24:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 1;
 8001a26:	4b21      	ldr	r3, [pc, #132]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a2e:	2204      	movs	r2, #4
 8001a30:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 1;
 8001a32:	4b1e      	ldr	r3, [pc, #120]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 32;
 8001a38:	4b1c      	ldr	r3, [pc, #112]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a3a:	2220      	movs	r2, #32
 8001a3c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 32;
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a40:	2220      	movs	r2, #32
 8001a42:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001a44:	4b19      	ldr	r3, [pc, #100]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001a4a:	4b18      	ldr	r3, [pc, #96]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001a50:	4816      	ldr	r0, [pc, #88]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a52:	f003 fb09 	bl	8005068 <HAL_FDCAN_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	bf14      	ite	ne
 8001a5c:	2301      	movne	r3, #1
 8001a5e:	2300      	moveq	r3, #0
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <_ZL14MX_FDCAN2_Initv+0xca>
  {
    Error_Handler();
 8001a66:	f000 fb45 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8001a6a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a6e:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001a74:	2302      	movs	r3, #2
 8001a76:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x10;
 8001a7c:	2310      	movs	r3, #16
 8001a7e:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x10;
 8001a80:	2310      	movs	r3, #16
 8001a82:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8001a84:	463b      	mov	r3, r7
 8001a86:	4619      	mov	r1, r3
 8001a88:	4808      	ldr	r0, [pc, #32]	@ (8001aac <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a8a:	f003 fccb 	bl	8005424 <HAL_FDCAN_ConfigFilter>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	bf14      	ite	ne
 8001a94:	2301      	movne	r3, #1
 8001a96:	2300      	moveq	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <_ZL14MX_FDCAN2_Initv+0x102>
  {
    Error_Handler();
 8001a9e:	f000 fb29 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE END FDCAN2_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	3720      	adds	r7, #32
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	24000208 	.word	0x24000208
 8001ab0:	4000a400 	.word	0x4000a400

08001ab4 <_ZL13MX_TIM17_Initv>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b094      	sub	sp, #80	@ 0x50
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	60da      	str	r2, [r3, #12]
 8001ac8:	611a      	str	r2, [r3, #16]
 8001aca:	615a      	str	r2, [r3, #20]
 8001acc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ace:	463b      	mov	r3, r7
 8001ad0:	2234      	movs	r2, #52	@ 0x34
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f00a fbb7 	bl	800c248 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001ada:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc8 <_ZL13MX_TIM17_Initv+0x114>)
 8001adc:	4a3b      	ldr	r2, [pc, #236]	@ (8001bcc <_ZL13MX_TIM17_Initv+0x118>)
 8001ade:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001ae0:	4b39      	ldr	r3, [pc, #228]	@ (8001bc8 <_ZL13MX_TIM17_Initv+0x114>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae6:	4b38      	ldr	r3, [pc, #224]	@ (8001bc8 <_ZL13MX_TIM17_Initv+0x114>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10559;
 8001aec:	4b36      	ldr	r3, [pc, #216]	@ (8001bc8 <_ZL13MX_TIM17_Initv+0x114>)
 8001aee:	f642 123f 	movw	r2, #10559	@ 0x293f
 8001af2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af4:	4b34      	ldr	r3, [pc, #208]	@ (8001bc8 <_ZL13MX_TIM17_Initv+0x114>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001afa:	4b33      	ldr	r3, [pc, #204]	@ (8001bc8 <_ZL13MX_TIM17_Initv+0x114>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b00:	4b31      	ldr	r3, [pc, #196]	@ (8001bc8 <_ZL13MX_TIM17_Initv+0x114>)
 8001b02:	2280      	movs	r2, #128	@ 0x80
 8001b04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001b06:	4830      	ldr	r0, [pc, #192]	@ (8001bc8 <_ZL13MX_TIM17_Initv+0x114>)
 8001b08:	f008 f9dc 	bl	8009ec4 <HAL_TIM_Base_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	bf14      	ite	ne
 8001b12:	2301      	movne	r3, #1
 8001b14:	2300      	moveq	r3, #0
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <_ZL13MX_TIM17_Initv+0x6c>
  {
    Error_Handler();
 8001b1c:	f000 faea 	bl	80020f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001b20:	4829      	ldr	r0, [pc, #164]	@ (8001bc8 <_ZL13MX_TIM17_Initv+0x114>)
 8001b22:	f008 fa26 	bl	8009f72 <HAL_TIM_PWM_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	bf14      	ite	ne
 8001b2c:	2301      	movne	r3, #1
 8001b2e:	2300      	moveq	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <_ZL13MX_TIM17_Initv+0x86>
  {
    Error_Handler();
 8001b36:	f000 fadd 	bl	80020f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b3a:	2360      	movs	r3, #96	@ 0x60
 8001b3c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b42:	2300      	movs	r3, #0
 8001b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b46:	2300      	movs	r3, #0
 8001b48:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b52:	2300      	movs	r3, #0
 8001b54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b56:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	481a      	ldr	r0, [pc, #104]	@ (8001bc8 <_ZL13MX_TIM17_Initv+0x114>)
 8001b60:	f008 fb84 	bl	800a26c <HAL_TIM_PWM_ConfigChannel>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	bf14      	ite	ne
 8001b6a:	2301      	movne	r3, #1
 8001b6c:	2300      	moveq	r3, #0
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <_ZL13MX_TIM17_Initv+0xc4>
  {
    Error_Handler();
 8001b74:	f000 fabe 	bl	80020f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b90:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001b9a:	463b      	mov	r3, r7
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	480a      	ldr	r0, [pc, #40]	@ (8001bc8 <_ZL13MX_TIM17_Initv+0x114>)
 8001ba0:	f009 f820 	bl	800abe4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	bf14      	ite	ne
 8001baa:	2301      	movne	r3, #1
 8001bac:	2300      	moveq	r3, #0
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <_ZL13MX_TIM17_Initv+0x104>
  {
    Error_Handler();
 8001bb4:	f000 fa9e 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001bb8:	4803      	ldr	r0, [pc, #12]	@ (8001bc8 <_ZL13MX_TIM17_Initv+0x114>)
 8001bba:	f000 ff5f 	bl	8002a7c <HAL_TIM_MspPostInit>

}
 8001bbe:	bf00      	nop
 8001bc0:	3750      	adds	r7, #80	@ 0x50
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	240002a8 	.word	0x240002a8
 8001bcc:	40014800 	.word	0x40014800

08001bd0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bd4:	4b2c      	ldr	r3, [pc, #176]	@ (8001c88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001bd6:	4a2d      	ldr	r2, [pc, #180]	@ (8001c8c <_ZL19MX_USART2_UART_Initv+0xbc>)
 8001bd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bda:	4b2b      	ldr	r3, [pc, #172]	@ (8001c88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001bdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001be0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001be2:	4b29      	ldr	r3, [pc, #164]	@ (8001c88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001be8:	4b27      	ldr	r3, [pc, #156]	@ (8001c88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bee:	4b26      	ldr	r3, [pc, #152]	@ (8001c88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bf4:	4b24      	ldr	r3, [pc, #144]	@ (8001c88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfa:	4b23      	ldr	r3, [pc, #140]	@ (8001c88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c00:	4b21      	ldr	r3, [pc, #132]	@ (8001c88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c06:	4b20      	ldr	r3, [pc, #128]	@ (8001c88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8001c88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c12:	4b1d      	ldr	r3, [pc, #116]	@ (8001c88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c18:	481b      	ldr	r0, [pc, #108]	@ (8001c88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001c1a:	f009 f86f 	bl	800acfc <HAL_UART_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	bf14      	ite	ne
 8001c24:	2301      	movne	r3, #1
 8001c26:	2300      	moveq	r3, #0
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8001c2e:	f000 fa61 	bl	80020f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c32:	2100      	movs	r1, #0
 8001c34:	4814      	ldr	r0, [pc, #80]	@ (8001c88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001c36:	f00a fa1a 	bl	800c06e <HAL_UARTEx_SetTxFifoThreshold>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	bf14      	ite	ne
 8001c40:	2301      	movne	r3, #1
 8001c42:	2300      	moveq	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8001c4a:	f000 fa53 	bl	80020f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c4e:	2100      	movs	r1, #0
 8001c50:	480d      	ldr	r0, [pc, #52]	@ (8001c88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001c52:	f00a fa4a 	bl	800c0ea <HAL_UARTEx_SetRxFifoThreshold>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	bf14      	ite	ne
 8001c5c:	2301      	movne	r3, #1
 8001c5e:	2300      	moveq	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8001c66:	f000 fa45 	bl	80020f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001c6a:	4807      	ldr	r0, [pc, #28]	@ (8001c88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001c6c:	f00a f9c6 	bl	800bffc <HAL_UARTEx_DisableFifoMode>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	bf14      	ite	ne
 8001c76:	2301      	movne	r3, #1
 8001c78:	2300      	moveq	r3, #0
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8001c80:	f000 fa38 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c84:	bf00      	nop
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	240002f4 	.word	0x240002f4
 8001c8c:	40004400 	.word	0x40004400

08001c90 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08c      	sub	sp, #48	@ 0x30
 8001c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c96:	f107 031c 	add.w	r3, r7, #28
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	60da      	str	r2, [r3, #12]
 8001ca4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ca6:	4b57      	ldr	r3, [pc, #348]	@ (8001e04 <_ZL12MX_GPIO_Initv+0x174>)
 8001ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cac:	4a55      	ldr	r2, [pc, #340]	@ (8001e04 <_ZL12MX_GPIO_Initv+0x174>)
 8001cae:	f043 0320 	orr.w	r3, r3, #32
 8001cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cb6:	4b53      	ldr	r3, [pc, #332]	@ (8001e04 <_ZL12MX_GPIO_Initv+0x174>)
 8001cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cbc:	f003 0320 	and.w	r3, r3, #32
 8001cc0:	61bb      	str	r3, [r7, #24]
 8001cc2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cc4:	4b4f      	ldr	r3, [pc, #316]	@ (8001e04 <_ZL12MX_GPIO_Initv+0x174>)
 8001cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cca:	4a4e      	ldr	r2, [pc, #312]	@ (8001e04 <_ZL12MX_GPIO_Initv+0x174>)
 8001ccc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cd4:	4b4b      	ldr	r3, [pc, #300]	@ (8001e04 <_ZL12MX_GPIO_Initv+0x174>)
 8001cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce2:	4b48      	ldr	r3, [pc, #288]	@ (8001e04 <_ZL12MX_GPIO_Initv+0x174>)
 8001ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ce8:	4a46      	ldr	r2, [pc, #280]	@ (8001e04 <_ZL12MX_GPIO_Initv+0x174>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cf2:	4b44      	ldr	r3, [pc, #272]	@ (8001e04 <_ZL12MX_GPIO_Initv+0x174>)
 8001cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d00:	4b40      	ldr	r3, [pc, #256]	@ (8001e04 <_ZL12MX_GPIO_Initv+0x174>)
 8001d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d06:	4a3f      	ldr	r2, [pc, #252]	@ (8001e04 <_ZL12MX_GPIO_Initv+0x174>)
 8001d08:	f043 0310 	orr.w	r3, r3, #16
 8001d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d10:	4b3c      	ldr	r3, [pc, #240]	@ (8001e04 <_ZL12MX_GPIO_Initv+0x174>)
 8001d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d16:	f003 0310 	and.w	r3, r3, #16
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1e:	4b39      	ldr	r3, [pc, #228]	@ (8001e04 <_ZL12MX_GPIO_Initv+0x174>)
 8001d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d24:	4a37      	ldr	r2, [pc, #220]	@ (8001e04 <_ZL12MX_GPIO_Initv+0x174>)
 8001d26:	f043 0302 	orr.w	r3, r3, #2
 8001d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d2e:	4b35      	ldr	r3, [pc, #212]	@ (8001e04 <_ZL12MX_GPIO_Initv+0x174>)
 8001d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d3c:	4b31      	ldr	r3, [pc, #196]	@ (8001e04 <_ZL12MX_GPIO_Initv+0x174>)
 8001d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d42:	4a30      	ldr	r2, [pc, #192]	@ (8001e04 <_ZL12MX_GPIO_Initv+0x174>)
 8001d44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d4c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e04 <_ZL12MX_GPIO_Initv+0x174>)
 8001d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d56:	607b      	str	r3, [r7, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001e04 <_ZL12MX_GPIO_Initv+0x174>)
 8001d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d60:	4a28      	ldr	r2, [pc, #160]	@ (8001e04 <_ZL12MX_GPIO_Initv+0x174>)
 8001d62:	f043 0308 	orr.w	r3, r3, #8
 8001d66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d6a:	4b26      	ldr	r3, [pc, #152]	@ (8001e04 <_ZL12MX_GPIO_Initv+0x174>)
 8001d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, GPIO_PIN_RESET);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d7e:	4822      	ldr	r0, [pc, #136]	@ (8001e08 <_ZL12MX_GPIO_Initv+0x178>)
 8001d80:	f004 fd00 	bl	8006784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin, GPIO_PIN_RESET);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2138      	movs	r1, #56	@ 0x38
 8001d88:	4820      	ldr	r0, [pc, #128]	@ (8001e0c <_ZL12MX_GPIO_Initv+0x17c>)
 8001d8a:	f004 fcfb 	bl	8006784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AMS_OK_Pin */
  GPIO_InitStruct.Pin = AMS_OK_Pin;
 8001d8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d94:	2301      	movs	r3, #1
 8001d96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AMS_OK_GPIO_Port, &GPIO_InitStruct);
 8001da0:	f107 031c 	add.w	r3, r7, #28
 8001da4:	4619      	mov	r1, r3
 8001da6:	4818      	ldr	r0, [pc, #96]	@ (8001e08 <_ZL12MX_GPIO_Initv+0x178>)
 8001da8:	f004 fb2c 	bl	8006404 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITAL1_Pin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin;
 8001dac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db2:	2300      	movs	r3, #0
 8001db4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIGITAL1_GPIO_Port, &GPIO_InitStruct);
 8001dba:	f107 031c 	add.w	r3, r7, #28
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4813      	ldr	r0, [pc, #76]	@ (8001e10 <_ZL12MX_GPIO_Initv+0x180>)
 8001dc2:	f004 fb1f 	bl	8006404 <HAL_GPIO_Init>

  /*Configure GPIO pin : Charge_Button_Pin */
  GPIO_InitStruct.Pin = Charge_Button_Pin;
 8001dc6:	2380      	movs	r3, #128	@ 0x80
 8001dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Charge_Button_GPIO_Port, &GPIO_InitStruct);
 8001dd2:	f107 031c 	add.w	r3, r7, #28
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	480e      	ldr	r0, [pc, #56]	@ (8001e14 <_ZL12MX_GPIO_Initv+0x184>)
 8001dda:	f004 fb13 	bl	8006404 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_AIR_N_Pin RELAY_AIR_P_Pin RELAY_PRECHARGE_Pin */
  GPIO_InitStruct.Pin = RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin;
 8001dde:	2338      	movs	r3, #56	@ 0x38
 8001de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de2:	2301      	movs	r3, #1
 8001de4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dea:	2300      	movs	r3, #0
 8001dec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dee:	f107 031c 	add.w	r3, r7, #28
 8001df2:	4619      	mov	r1, r3
 8001df4:	4805      	ldr	r0, [pc, #20]	@ (8001e0c <_ZL12MX_GPIO_Initv+0x17c>)
 8001df6:	f004 fb05 	bl	8006404 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001dfa:	bf00      	nop
 8001dfc:	3730      	adds	r7, #48	@ 0x30
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	58024400 	.word	0x58024400
 8001e08:	58021400 	.word	0x58021400
 8001e0c:	58020c00 	.word	0x58020c00
 8001e10:	58021000 	.word	0x58021000
 8001e14:	58021800 	.word	0x58021800

08001e18 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af02      	add	r7, sp, #8
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d04b      	beq.n	8001ec4 <HAL_FDCAN_RxFifo0Callback+0xac>
	{
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_acu, RxData) == HAL_OK)
 8001e2c:	4b27      	ldr	r3, [pc, #156]	@ (8001ecc <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001e2e:	4a28      	ldr	r2, [pc, #160]	@ (8001ed0 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001e30:	2140      	movs	r1, #64	@ 0x40
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f003 fbf2 	bl	800561c <HAL_FDCAN_GetRxMessage>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	bf0c      	ite	eq
 8001e3e:	2301      	moveq	r3, #1
 8001e40:	2300      	movne	r3, #0
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d02e      	beq.n	8001ea6 <HAL_FDCAN_RxFifo0Callback+0x8e>
    {
		msg_acu.id = RxHeader_acu.Identifier;
 8001e48:	4b21      	ldr	r3, [pc, #132]	@ (8001ed0 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a21      	ldr	r2, [pc, #132]	@ (8001ed4 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001e4e:	6013      	str	r3, [r2, #0]
		msg_acu.len = RxHeader_acu.DataLength;
 8001e50:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed0 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed4 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001e58:	711a      	strb	r2, [r3, #4]
		for (int i = 0; i < 8; i++) {msg_acu.buf[i] = RxData[i];}
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	e00c      	b.n	8001e7a <HAL_FDCAN_RxFifo0Callback+0x62>
 8001e60:	4a1a      	ldr	r2, [pc, #104]	@ (8001ecc <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4413      	add	r3, r2
 8001e66:	7819      	ldrb	r1, [r3, #0]
 8001e68:	4a1a      	ldr	r2, [pc, #104]	@ (8001ed4 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3305      	adds	r3, #5
 8001e70:	460a      	mov	r2, r1
 8001e72:	701a      	strb	r2, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	3301      	adds	r3, #1
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2b07      	cmp	r3, #7
 8001e7e:	ddef      	ble.n	8001e60 <HAL_FDCAN_RxFifo0Callback+0x48>
		msg_acu.bus = 1;
 8001e80:	4b14      	ldr	r3, [pc, #80]	@ (8001ed4 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	611a      	str	r2, [r3, #16]
		msg_acu.time = HAL_GetTick();
 8001e86:	f001 f835 	bl	8002ef4 <HAL_GetTick>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	4a11      	ldr	r2, [pc, #68]	@ (8001ed4 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001e8e:	6153      	str	r3, [r2, #20]
		parse_state(msg_acu);
 8001e90:	4b10      	ldr	r3, [pc, #64]	@ (8001ed4 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001e92:	466c      	mov	r4, sp
 8001e94:	f103 0210 	add.w	r2, r3, #16
 8001e98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e9c:	e884 0003 	stmia.w	r4, {r0, r1}
 8001ea0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ea2:	f000 fb63 	bl	800256c <_Z11parse_state6CANMsg>

    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f003 fd22 	bl	80058f4 <HAL_FDCAN_ActivateNotification>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	bf14      	ite	ne
 8001eb6:	2301      	movne	r3, #1
 8001eb8:	2300      	moveq	r3, #0
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <HAL_FDCAN_RxFifo0Callback+0xac>
    {
      /* Notification Error */
      Error_Handler();
 8001ec0:	f000 f918 	bl	80020f4 <Error_Handler>
    }
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd90      	pop	{r4, r7, pc}
 8001ecc:	24000420 	.word	0x24000420
 8001ed0:	240003d0 	.word	0x240003d0
 8001ed4:	240004a4 	.word	0x240004a4

08001ed8 <module_send_message_CAN1>:

//extended ID
HAL_StatusTypeDef module_send_message_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 8001ee6:	4a0b      	ldr	r2, [pc, #44]	@ (8001f14 <module_send_message_CAN1+0x3c>)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_EXTENDED_ID;
 8001eec:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <module_send_message_CAN1+0x3c>)
 8001eee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ef2:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	4a07      	ldr	r2, [pc, #28]	@ (8001f14 <module_send_message_CAN1+0x3c>)
 8001ef8:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	4905      	ldr	r1, [pc, #20]	@ (8001f14 <module_send_message_CAN1+0x3c>)
 8001efe:	4806      	ldr	r0, [pc, #24]	@ (8001f18 <module_send_message_CAN1+0x40>)
 8001f00:	f003 fb31 	bl	8005566 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001f04:	4603      	mov	r3, r0
 8001f06:	75fb      	strb	r3, [r7, #23]

	return status;
 8001f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	24000388 	.word	0x24000388
 8001f18:	24000168 	.word	0x24000168

08001f1c <module_send_message_NoExtId_CAN1>:

//NO extended ID
HAL_StatusTypeDef module_send_message_NoExtId_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	4613      	mov	r3, r2
 8001f28:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f54 <module_send_message_NoExtId_CAN1+0x38>)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_STANDARD_ID;
 8001f30:	4b08      	ldr	r3, [pc, #32]	@ (8001f54 <module_send_message_NoExtId_CAN1+0x38>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	4a06      	ldr	r2, [pc, #24]	@ (8001f54 <module_send_message_NoExtId_CAN1+0x38>)
 8001f3a:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	4905      	ldr	r1, [pc, #20]	@ (8001f54 <module_send_message_NoExtId_CAN1+0x38>)
 8001f40:	4805      	ldr	r0, [pc, #20]	@ (8001f58 <module_send_message_NoExtId_CAN1+0x3c>)
 8001f42:	f003 fb10 	bl	8005566 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001f46:	4603      	mov	r3, r0
 8001f48:	75fb      	strb	r3, [r7, #23]

	return status;
 8001f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	24000388 	.word	0x24000388
 8001f58:	24000168 	.word	0x24000168

08001f5c <module_send_message_CAN2>:

HAL_StatusTypeDef module_send_message_CAN2(uint32_t id, uint8_t* data, uint8_t length) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	4613      	mov	r3, r2
 8001f68:	71fb      	strb	r3, [r7, #7]
	TxHeader_bms.Identifier = id;
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f94 <module_send_message_CAN2+0x38>)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6013      	str	r3, [r2, #0]
	TxHeader_bms.IdType = FDCAN_STANDARD_ID;
 8001f70:	4b08      	ldr	r3, [pc, #32]	@ (8001f94 <module_send_message_CAN2+0x38>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	605a      	str	r2, [r3, #4]
	TxHeader_bms.DataLength = length;
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	4a06      	ldr	r2, [pc, #24]	@ (8001f94 <module_send_message_CAN2+0x38>)
 8001f7a:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_bms, data);
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	4905      	ldr	r1, [pc, #20]	@ (8001f94 <module_send_message_CAN2+0x38>)
 8001f80:	4805      	ldr	r0, [pc, #20]	@ (8001f98 <module_send_message_CAN2+0x3c>)
 8001f82:	f003 faf0 	bl	8005566 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001f86:	4603      	mov	r3, r0
 8001f88:	75fb      	strb	r3, [r7, #23]

	return status;
 8001f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	240003ac 	.word	0x240003ac
 8001f98:	24000208 	.word	0x24000208

08001f9c <print>:

void print(char uart_buffer[]){
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	4909      	ldr	r1, [pc, #36]	@ (8001fcc <print+0x30>)
 8001fa8:	4809      	ldr	r0, [pc, #36]	@ (8001fd0 <print+0x34>)
 8001faa:	f00a f92b 	bl	800c204 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001fae:	4808      	ldr	r0, [pc, #32]	@ (8001fd0 <print+0x34>)
 8001fb0:	f7fe f9ae 	bl	8000310 <strlen>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbc:	4904      	ldr	r1, [pc, #16]	@ (8001fd0 <print+0x34>)
 8001fbe:	4805      	ldr	r0, [pc, #20]	@ (8001fd4 <print+0x38>)
 8001fc0:	f008 feec 	bl	800ad9c <HAL_UART_Transmit>
}
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	0800cef0 	.word	0x0800cef0
 8001fd0:	24000428 	.word	0x24000428
 8001fd4:	240002f4 	.word	0x240002f4

08001fd8 <printnl>:

void printnl(char uart_buffer[]){
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s", uart_buffer);
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	4909      	ldr	r1, [pc, #36]	@ (8002008 <printnl+0x30>)
 8001fe4:	4809      	ldr	r0, [pc, #36]	@ (800200c <printnl+0x34>)
 8001fe6:	f00a f90d 	bl	800c204 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001fea:	4808      	ldr	r0, [pc, #32]	@ (800200c <printnl+0x34>)
 8001fec:	f7fe f990 	bl	8000310 <strlen>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff8:	4904      	ldr	r1, [pc, #16]	@ (800200c <printnl+0x34>)
 8001ffa:	4805      	ldr	r0, [pc, #20]	@ (8002010 <printnl+0x38>)
 8001ffc:	f008 fece 	bl	800ad9c <HAL_UART_Transmit>
}
 8002000:	bf00      	nop
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	0800cef8 	.word	0x0800cef8
 800200c:	24000428 	.word	0x24000428
 8002010:	240002f4 	.word	0x240002f4

08002014 <printValue>:

void printValue(int value){
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	4909      	ldr	r1, [pc, #36]	@ (8002044 <printValue+0x30>)
 8002020:	4809      	ldr	r0, [pc, #36]	@ (8002048 <printValue+0x34>)
 8002022:	f00a f8ef 	bl	800c204 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8002026:	4808      	ldr	r0, [pc, #32]	@ (8002048 <printValue+0x34>)
 8002028:	f7fe f972 	bl	8000310 <strlen>
 800202c:	4603      	mov	r3, r0
 800202e:	b29a      	uxth	r2, r3
 8002030:	f04f 33ff 	mov.w	r3, #4294967295
 8002034:	4904      	ldr	r1, [pc, #16]	@ (8002048 <printValue+0x34>)
 8002036:	4805      	ldr	r0, [pc, #20]	@ (800204c <printValue+0x38>)
 8002038:	f008 feb0 	bl	800ad9c <HAL_UART_Transmit>
}
 800203c:	bf00      	nop
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	0800cefc 	.word	0x0800cefc
 8002048:	24000428 	.word	0x24000428
 800204c:	240002f4 	.word	0x240002f4

08002050 <getUARTState>:

HAL_UART_StateTypeDef getUARTState(){
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
	return HAL_UART_GetState(&huart2);
 8002054:	4802      	ldr	r0, [pc, #8]	@ (8002060 <getUARTState+0x10>)
 8002056:	f008 ff2f 	bl	800aeb8 <HAL_UART_GetState>
 800205a:	4603      	mov	r3, r0
}
 800205c:	4618      	mov	r0, r3
 800205e:	bd80      	pop	{r7, pc}
 8002060:	240002f4 	.word	0x240002f4
 8002064:	00000000 	.word	0x00000000

08002068 <readAnalogValue>:

float readAnalogValue(void){
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
	analogValue = HAL_ADC_GetValue(&hadc3);
	HAL_ADC_Stop(&hadc3);
	return analogValue;*/


	HAL_ADC_Start(&hadc1);
 800206e:	4820      	ldr	r0, [pc, #128]	@ (80020f0 <readAnalogValue+0x88>)
 8002070:	f001 fc7a 	bl	8003968 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002074:	f04f 31ff 	mov.w	r1, #4294967295
 8002078:	481d      	ldr	r0, [pc, #116]	@ (80020f0 <readAnalogValue+0x88>)
 800207a:	f001 fd73 	bl	8003b64 <HAL_ADC_PollForConversion>

	float adc_value;
	int current;

	adc_value = HAL_ADC_GetValue(&hadc1);
 800207e:	481c      	ldr	r0, [pc, #112]	@ (80020f0 <readAnalogValue+0x88>)
 8002080:	f001 fe64 	bl	8003d4c <HAL_ADC_GetValue>
 8002084:	ee07 0a90 	vmov	s15, r0
 8002088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800208c:	edc7 7a01 	vstr	s15, [r7, #4]
	current = ((0.2*adc_value) - 435)*1.15;
 8002090:	edd7 7a01 	vldr	s15, [r7, #4]
 8002094:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002098:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 80020d8 <readAnalogValue+0x70>
 800209c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020a0:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 80020e0 <readAnalogValue+0x78>
 80020a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80020a8:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 80020e8 <readAnalogValue+0x80>
 80020ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020b0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80020b4:	ee17 3a90 	vmov	r3, s15
 80020b8:	603b      	str	r3, [r7, #0]

	HAL_ADC_Stop(&hadc1);
 80020ba:	480d      	ldr	r0, [pc, #52]	@ (80020f0 <readAnalogValue+0x88>)
 80020bc:	f001 fd1e 	bl	8003afc <HAL_ADC_Stop>
	return current;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	ee07 3a90 	vmov	s15, r3
 80020c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80020ca:	eeb0 0a67 	vmov.f32	s0, s15
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	f3af 8000 	nop.w
 80020d8:	9999999a 	.word	0x9999999a
 80020dc:	3fc99999 	.word	0x3fc99999
 80020e0:	00000000 	.word	0x00000000
 80020e4:	407b3000 	.word	0x407b3000
 80020e8:	66666666 	.word	0x66666666
 80020ec:	3ff26666 	.word	0x3ff26666
 80020f0:	24000088 	.word	0x24000088

080020f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020f8:	b672      	cpsid	i
}
 80020fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020fc:	bf00      	nop
 80020fe:	e7fd      	b.n	80020fc <Error_Handler+0x8>

08002100 <_Z9get_statev>:
/*********************************************************************************************************
 ** Function name:           get_state
 ** Descriptions:            get the current state
 *********************************************************************************************************/

STATE get_state() {
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
    return state;
 8002104:	4b03      	ldr	r3, [pc, #12]	@ (8002114 <_Z9get_statev+0x14>)
 8002106:	781b      	ldrb	r3, [r3, #0]
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	24000cf4 	.word	0x24000cf4

08002118 <_Z12select_statev>:

/*********************************************************************************************************
 ** Function name:           select_state
 ** Descriptions:            check what should they do on the state machine
 *********************************************************************************************************/
void select_state() {
 8002118:	b580      	push	{r7, lr}
 800211a:	b08c      	sub	sp, #48	@ 0x30
 800211c:	af00      	add	r7, sp, #0
	int state_air_n = 0;     // 0 means open, 1 closed     // Turn on SEVCON
 800211e:	2300      	movs	r3, #0
 8002120:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int state_air_p = 0;     // 0 means open, 1 closed     // Energize HV relay
 8002122:	2300      	movs	r3, #0
 8002124:	62bb      	str	r3, [r7, #40]	@ 0x28
	int state_precharge = 0; // 0 means open, 1 closed
 8002126:	2300      	movs	r3, #0
 8002128:	627b      	str	r3, [r7, #36]	@ 0x24
	int flag_cpu = CPU_ERROR_COMMUNICATION;
 800212a:	2301      	movs	r3, #1
 800212c:	61bb      	str	r3, [r7, #24]
	int flag_current = Current_ERROR_Comunication;
 800212e:	2302      	movs	r3, #2
 8002130:	617b      	str	r3, [r7, #20]


	int gpio_charge = HAL_GPIO_ReadPin(Charge_Button_GPIO_Port, Charge_Button_Pin); // pull-up: 1 = charge started
 8002132:	2180      	movs	r1, #128	@ 0x80
 8002134:	48a3      	ldr	r0, [pc, #652]	@ (80023c4 <_Z12select_statev+0x2ac>)
 8002136:	f004 fb0d 	bl	8006754 <HAL_GPIO_ReadPin>
 800213a:	4603      	mov	r3, r0
 800213c:	613b      	str	r3, [r7, #16]
	 * 1 ms interruption => 1ms * 264MHz = 264000
	 * prescalado 264 (por ejemplo)
	 * timer count = 264000 / 264 = 1000
	 */

	uint32_t time = HAL_GetTick();
 800213e:	f000 fed9 	bl	8002ef4 <HAL_GetTick>
 8002142:	60f8      	str	r0, [r7, #12]
	int time_s = HAL_GetTick();
 8002144:	f000 fed6 	bl	8002ef4 <HAL_GetTick>
 8002148:	4603      	mov	r3, r0
 800214a:	60bb      	str	r3, [r7, #8]


	CPU.voltage_acum = 0; // For precharge
 800214c:	4b9e      	ldr	r3, [pc, #632]	@ (80023c8 <_Z12select_statev+0x2b0>)
 800214e:	2200      	movs	r2, #0
 8002150:	62da      	str	r2, [r3, #44]	@ 0x2c


	MIN_V = 4200; /// I reset the number each cycle cause if the voltages goes up again I wanna has it risen again on telemetry
 8002152:	4b9e      	ldr	r3, [pc, #632]	@ (80023cc <_Z12select_statev+0x2b4>)
 8002154:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002158:	601a      	str	r2, [r3, #0]
	MAX_T = 0;
 800215a:	4b9d      	ldr	r3, [pc, #628]	@ (80023d0 <_Z12select_statev+0x2b8>)
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 8002160:	2300      	movs	r3, #0
 8002162:	623b      	str	r3, [r7, #32]
 8002164:	e06f      	b.n	8002246 <_Z12select_statev+0x12e>
		BMS[i].voltage_acum = 0;// For precharge
 8002166:	4a9b      	ldr	r2, [pc, #620]	@ (80023d4 <_Z12select_statev+0x2bc>)
 8002168:	6a3b      	ldr	r3, [r7, #32]
 800216a:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 800216e:	fb01 f303 	mul.w	r3, r1, r3
 8002172:	4413      	add	r3, r2
 8002174:	338c      	adds	r3, #140	@ 0x8c
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]


		if (BMS[i].query_voltage(time, buffer) != BMS_OK) //I ask the BMS about voltages and cheking their states
 800217a:	6a3b      	ldr	r3, [r7, #32]
 800217c:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8002180:	fb02 f303 	mul.w	r3, r2, r3
 8002184:	4a93      	ldr	r2, [pc, #588]	@ (80023d4 <_Z12select_statev+0x2bc>)
 8002186:	4413      	add	r3, r2
 8002188:	4a93      	ldr	r2, [pc, #588]	@ (80023d8 <_Z12select_statev+0x2c0>)
 800218a:	68f9      	ldr	r1, [r7, #12]
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe fe20 	bl	8000dd2 <_ZN7BMS_MOD13query_voltageEmPc>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	bf14      	ite	ne
 8002198:	2301      	movne	r3, #1
 800219a:	2300      	moveq	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <_Z12select_statev+0x90>
		{
			//state = error;
			flag_ams_ok = 0;
 80021a2:	4b8e      	ldr	r3, [pc, #568]	@ (80023dc <_Z12select_statev+0x2c4>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
		}

		CPU.voltage_acum += BMS[i].voltage_acum; // For precharge
 80021a8:	4b87      	ldr	r3, [pc, #540]	@ (80023c8 <_Z12select_statev+0x2b0>)
 80021aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021ac:	4989      	ldr	r1, [pc, #548]	@ (80023d4 <_Z12select_statev+0x2bc>)
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 80021b4:	fb00 f303 	mul.w	r3, r0, r3
 80021b8:	440b      	add	r3, r1
 80021ba:	338c      	adds	r3, #140	@ 0x8c
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4413      	add	r3, r2
 80021c0:	4a81      	ldr	r2, [pc, #516]	@ (80023c8 <_Z12select_statev+0x2b0>)
 80021c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if (BMS[i].MIN_V < MIN_V)
 80021c4:	4a83      	ldr	r2, [pc, #524]	@ (80023d4 <_Z12select_statev+0x2bc>)
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 80021cc:	fb01 f303 	mul.w	r3, r1, r3
 80021d0:	4413      	add	r3, r2
 80021d2:	3390      	adds	r3, #144	@ 0x90
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	4b7d      	ldr	r3, [pc, #500]	@ (80023cc <_Z12select_statev+0x2b4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	da0a      	bge.n	80021f4 <_Z12select_statev+0xdc>
			MIN_V = BMS[i].MIN_V; //Checking the minimun voltage of cell in the whole battery
 80021de:	4a7d      	ldr	r2, [pc, #500]	@ (80023d4 <_Z12select_statev+0x2bc>)
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	3390      	adds	r3, #144	@ 0x90
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a76      	ldr	r2, [pc, #472]	@ (80023cc <_Z12select_statev+0x2b4>)
 80021f2:	6013      	str	r3, [r2, #0]


		if (BMS[i].query_temperature(time, buffer) != Temperatures_OK){
 80021f4:	6a3b      	ldr	r3, [r7, #32]
 80021f6:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 80021fa:	fb02 f303 	mul.w	r3, r2, r3
 80021fe:	4a75      	ldr	r2, [pc, #468]	@ (80023d4 <_Z12select_statev+0x2bc>)
 8002200:	4413      	add	r3, r2
 8002202:	4a75      	ldr	r2, [pc, #468]	@ (80023d8 <_Z12select_statev+0x2c0>)
 8002204:	68f9      	ldr	r1, [r7, #12]
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe fe62 	bl	8000ed0 <_ZN7BMS_MOD17query_temperatureEmPc>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
			//state = error; DESCOMENTA
		}

		if (BMS[i].MAX_T > MAX_T)
 8002210:	4a70      	ldr	r2, [pc, #448]	@ (80023d4 <_Z12select_statev+0x2bc>)
 8002212:	6a3b      	ldr	r3, [r7, #32]
 8002214:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8002218:	fb01 f303 	mul.w	r3, r1, r3
 800221c:	4413      	add	r3, r2
 800221e:	33a0      	adds	r3, #160	@ 0xa0
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	4b6b      	ldr	r3, [pc, #428]	@ (80023d0 <_Z12select_statev+0x2b8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	dd0a      	ble.n	8002240 <_Z12select_statev+0x128>
			MAX_T = BMS[i].MAX_T;
 800222a:	4a6a      	ldr	r2, [pc, #424]	@ (80023d4 <_Z12select_statev+0x2bc>)
 800222c:	6a3b      	ldr	r3, [r7, #32]
 800222e:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8002232:	fb01 f303 	mul.w	r3, r1, r3
 8002236:	4413      	add	r3, r2
 8002238:	33a0      	adds	r3, #160	@ 0xa0
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a64      	ldr	r2, [pc, #400]	@ (80023d0 <_Z12select_statev+0x2b8>)
 800223e:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < BMS_N; i++) {
 8002240:	6a3b      	ldr	r3, [r7, #32]
 8002242:	3301      	adds	r3, #1
 8002244:	623b      	str	r3, [r7, #32]
 8002246:	4b66      	ldr	r3, [pc, #408]	@ (80023e0 <_Z12select_statev+0x2c8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6a3a      	ldr	r2, [r7, #32]
 800224c:	429a      	cmp	r2, r3
 800224e:	db8a      	blt.n	8002166 <_Z12select_statev+0x4e>
	}

	if (time_s > time_sending_minV + 500) {
 8002250:	4b64      	ldr	r3, [pc, #400]	@ (80023e4 <_Z12select_statev+0x2cc>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	429a      	cmp	r2, r3
 800225c:	dd23      	ble.n	80022a6 <_Z12select_statev+0x18e>
		message_MINV[1] = MIN_V & 0xFF;
 800225e:	4b5b      	ldr	r3, [pc, #364]	@ (80023cc <_Z12select_statev+0x2b4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	b2da      	uxtb	r2, r3
 8002264:	4b60      	ldr	r3, [pc, #384]	@ (80023e8 <_Z12select_statev+0x2d0>)
 8002266:	705a      	strb	r2, [r3, #1]
		message_MINV[0] = (MIN_V >> 8) & 0xFF;
 8002268:	4b58      	ldr	r3, [pc, #352]	@ (80023cc <_Z12select_statev+0x2b4>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	121b      	asrs	r3, r3, #8
 800226e:	b2da      	uxtb	r2, r3
 8002270:	4b5d      	ldr	r3, [pc, #372]	@ (80023e8 <_Z12select_statev+0x2d0>)
 8002272:	701a      	strb	r2, [r3, #0]
		if (BMS[0].flag_charger != 1) {
 8002274:	4b57      	ldr	r3, [pc, #348]	@ (80023d4 <_Z12select_statev+0x2bc>)
 8002276:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800227a:	2b01      	cmp	r3, #1
 800227c:	d010      	beq.n	80022a0 <_Z12select_statev+0x188>
			if (module_send_message_CAN1(BMS_ID, message_MINV, 2) != HAL_OK)
 800227e:	2202      	movs	r2, #2
 8002280:	4959      	ldr	r1, [pc, #356]	@ (80023e8 <_Z12select_statev+0x2d0>)
 8002282:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002286:	f7ff fe27 	bl	8001ed8 <module_send_message_CAN1>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	bf14      	ite	ne
 8002290:	2301      	movne	r3, #1
 8002292:	2300      	moveq	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <_Z12select_statev+0x188>
				print((char*) "Error al enviar tension minima"); //Sending the message through telemtry each 500 ms
 800229a:	4854      	ldr	r0, [pc, #336]	@ (80023ec <_Z12select_statev+0x2d4>)
 800229c:	f7ff fe7e 	bl	8001f9c <print>
		}
		time_sending_minV = time_s;
 80022a0:	4a50      	ldr	r2, [pc, #320]	@ (80023e4 <_Z12select_statev+0x2cc>)
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	6013      	str	r3, [r2, #0]
	}
	for (int i = 0; i < BMS_N; i++) {
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	e00d      	b.n	80022c8 <_Z12select_statev+0x1b0>
		BMS[i].BALANCING_V = MIN_V; //Here I say I wanna balance all the cells in the battery to the minimun
 80022ac:	4b47      	ldr	r3, [pc, #284]	@ (80023cc <_Z12select_statev+0x2b4>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4948      	ldr	r1, [pc, #288]	@ (80023d4 <_Z12select_statev+0x2bc>)
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 80022b8:	fb00 f303 	mul.w	r3, r0, r3
 80022bc:	440b      	add	r3, r1
 80022be:	3394      	adds	r3, #148	@ 0x94
 80022c0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3301      	adds	r3, #1
 80022c6:	61fb      	str	r3, [r7, #28]
 80022c8:	4b45      	ldr	r3, [pc, #276]	@ (80023e0 <_Z12select_statev+0x2c8>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	69fa      	ldr	r2, [r7, #28]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	dbec      	blt.n	80022ac <_Z12select_statev+0x194>

	}


	flag_cpu = CPU.query(time, buffer); //Asking the rest of the car how is it
 80022d2:	4a41      	ldr	r2, [pc, #260]	@ (80023d8 <_Z12select_statev+0x2c0>)
 80022d4:	68f9      	ldr	r1, [r7, #12]
 80022d6:	483c      	ldr	r0, [pc, #240]	@ (80023c8 <_Z12select_statev+0x2b0>)
 80022d8:	f7fe fed0 	bl	800107c <_ZN7CPU_MOD5queryEmPc>
 80022dc:	61b8      	str	r0, [r7, #24]
	//flag_cpu = CPU_OK;

	flag_current = current.query(time, buffer); //asking current how is it
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4a3d      	ldr	r2, [pc, #244]	@ (80023d8 <_Z12select_statev+0x2c0>)
 80022e2:	4619      	mov	r1, r3
 80022e4:	4842      	ldr	r0, [pc, #264]	@ (80023f0 <_Z12select_statev+0x2d8>)
 80022e6:	f7fe ff5b 	bl	80011a0 <_ZN11Current_MOD5queryEiPc>
 80022ea:	6178      	str	r0, [r7, #20]
	print((char*)"voltage acu");
	printValue(CPU.voltage_acum);
	print((char*)"dc bus");
	printValue(CPU.DC_BUS);
	printValue(state);*/
	switch (state) {
 80022ec:	4b41      	ldr	r3, [pc, #260]	@ (80023f4 <_Z12select_statev+0x2dc>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b05      	cmp	r3, #5
 80022f2:	f200 80ed 	bhi.w	80024d0 <_Z12select_statev+0x3b8>
 80022f6:	a201      	add	r2, pc, #4	@ (adr r2, 80022fc <_Z12select_statev+0x1e4>)
 80022f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fc:	08002315 	.word	0x08002315
 8002300:	08002357 	.word	0x08002357
 8002304:	08002389 	.word	0x08002389
 8002308:	08002401 	.word	0x08002401
 800230c:	08002451 	.word	0x08002451
 8002310:	0800249d 	.word	0x0800249d
	case start:
		state_air_n = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_DISCONNECTED);
 8002320:	2102      	movs	r1, #2
 8002322:	4829      	ldr	r0, [pc, #164]	@ (80023c8 <_Z12select_statev+0x2b0>)
 8002324:	f7fe fedc 	bl	80010e0 <_ZN7CPU_MOD11updateStateEi>
		fan_speed = 0;
 8002328:	4b33      	ldr	r3, [pc, #204]	@ (80023f8 <_Z12select_statev+0x2e0>)
 800232a:	2200      	movs	r2, #0
 800232c:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fan_speed);
 800232e:	4b32      	ldr	r3, [pc, #200]	@ (80023f8 <_Z12select_statev+0x2e0>)
 8002330:	881a      	ldrh	r2, [r3, #0]
 8002332:	4b32      	ldr	r3, [pc, #200]	@ (80023fc <_Z12select_statev+0x2e4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	635a      	str	r2, [r3, #52]	@ 0x34
		if(gpio_charge == GPIO_PIN_SET){
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d103      	bne.n	8002346 <_Z12select_statev+0x22e>
			state = charge;
 800233e:	4b2d      	ldr	r3, [pc, #180]	@ (80023f4 <_Z12select_statev+0x2dc>)
 8002340:	2204      	movs	r2, #4
 8002342:	701a      	strb	r2, [r3, #0]
		}

		else if (flag_cpu != CPU_ERROR_COMMUNICATION)
			state = precharge; //If I do comunicate with the rest of the car, I go to precharge
		break;
 8002344:	e0bd      	b.n	80024c2 <_Z12select_statev+0x3aa>
		else if (flag_cpu != CPU_ERROR_COMMUNICATION)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	2b01      	cmp	r3, #1
 800234a:	f000 80ba 	beq.w	80024c2 <_Z12select_statev+0x3aa>
			state = precharge; //If I do comunicate with the rest of the car, I go to precharge
 800234e:	4b29      	ldr	r3, [pc, #164]	@ (80023f4 <_Z12select_statev+0x2dc>)
 8002350:	2201      	movs	r2, #1
 8002352:	701a      	strb	r2, [r3, #0]
		break;
 8002354:	e0b5      	b.n	80024c2 <_Z12select_statev+0x3aa>
	case precharge:
		state_air_n = 1;
 8002356:	2301      	movs	r3, #1
 8002358:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 1;
 800235e:	2301      	movs	r3, #1
 8002360:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_PRECHARGE);
 8002362:	2101      	movs	r1, #1
 8002364:	4818      	ldr	r0, [pc, #96]	@ (80023c8 <_Z12select_statev+0x2b0>)
 8002366:	f7fe febb 	bl	80010e0 <_ZN7CPU_MOD11updateStateEi>
		if (flag_cpu == CPU_OK) {
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d103      	bne.n	8002378 <_Z12select_statev+0x260>
			state = transition;
 8002370:	4b20      	ldr	r3, [pc, #128]	@ (80023f4 <_Z12select_statev+0x2dc>)
 8002372:	2202      	movs	r2, #2
 8002374:	701a      	strb	r2, [r3, #0]
		} else if (flag_cpu == CPU_ERROR_COMMUNICATION)
			state = error;
		 //else if(flag_current != Current_OK) state = error; //I take this out cause in precharge current can be very high, but probably can be uncommented,
		break;
 8002376:	e0a6      	b.n	80024c6 <_Z12select_statev+0x3ae>
		} else if (flag_cpu == CPU_ERROR_COMMUNICATION)
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	2b01      	cmp	r3, #1
 800237c:	f040 80a3 	bne.w	80024c6 <_Z12select_statev+0x3ae>
			state = error;
 8002380:	4b1c      	ldr	r3, [pc, #112]	@ (80023f4 <_Z12select_statev+0x2dc>)
 8002382:	2205      	movs	r2, #5
 8002384:	701a      	strb	r2, [r3, #0]
		break;
 8002386:	e09e      	b.n	80024c6 <_Z12select_statev+0x3ae>
	case transition:
		state_air_n = 1;
 8002388:	2301      	movs	r3, #1
 800238a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 1;
 8002390:	2301      	movs	r3, #1
 8002392:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_PRECHARGE);
 8002394:	2101      	movs	r1, #1
 8002396:	480c      	ldr	r0, [pc, #48]	@ (80023c8 <_Z12select_statev+0x2b0>)
 8002398:	f7fe fea2 	bl	80010e0 <_ZN7CPU_MOD11updateStateEi>
		//if (((CPU.voltage_acum)) * 0.7 < CPU.DC_BUS){
		printValue(CPU.DC_BUS);
 800239c:	4b0a      	ldr	r3, [pc, #40]	@ (80023c8 <_Z12select_statev+0x2b0>)
 800239e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fe37 	bl	8002014 <printValue>
		if(CPU.DC_BUS > 200 && 	CPU.DC_BUS <500){
 80023a6:	4b08      	ldr	r3, [pc, #32]	@ (80023c8 <_Z12select_statev+0x2b0>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	2bc8      	cmp	r3, #200	@ 0xc8
 80023ac:	f340 808d 	ble.w	80024ca <_Z12select_statev+0x3b2>
 80023b0:	4b05      	ldr	r3, [pc, #20]	@ (80023c8 <_Z12select_statev+0x2b0>)
 80023b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80023b8:	f280 8087 	bge.w	80024ca <_Z12select_statev+0x3b2>
			state = run; //If DC_BUS voltage is higher than 90% of battery voltage, precharge finish
 80023bc:	4b0d      	ldr	r3, [pc, #52]	@ (80023f4 <_Z12select_statev+0x2dc>)
 80023be:	2203      	movs	r2, #3
 80023c0:	701a      	strb	r2, [r3, #0]
		//}else if((flag_cpu == CPU_ERROR_COMMUNICATION)&&(flag_charger == 1)) state = error;
		 //else if(flag_current != Current_OK) state = error;
		}
		break;
 80023c2:	e082      	b.n	80024ca <_Z12select_statev+0x3b2>
 80023c4:	58021800 	.word	0x58021800
 80023c8:	24000c74 	.word	0x24000c74
 80023cc:	24000004 	.word	0x24000004
 80023d0:	24000c64 	.word	0x24000c64
 80023d4:	240004bc 	.word	0x240004bc
 80023d8:	24000cf8 	.word	0x24000cf8
 80023dc:	24000008 	.word	0x24000008
 80023e0:	24000000 	.word	0x24000000
 80023e4:	24000c6c 	.word	0x24000c6c
 80023e8:	24000c68 	.word	0x24000c68
 80023ec:	0800cf04 	.word	0x0800cf04
 80023f0:	24000cb0 	.word	0x24000cb0
 80023f4:	24000cf4 	.word	0x24000cf4
 80023f8:	24000c70 	.word	0x24000c70
 80023fc:	240002a8 	.word	0x240002a8
	case run:
		state_air_n = 1;
 8002400:	2301      	movs	r3, #1
 8002402:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 1;
 8002404:	2301      	movs	r3, #1
 8002406:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 1;
 8002408:	2301      	movs	r3, #1
 800240a:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_POWER);
 800240c:	2100      	movs	r1, #0
 800240e:	4849      	ldr	r0, [pc, #292]	@ (8002534 <_Z12select_statev+0x41c>)
 8002410:	f7fe fe66 	bl	80010e0 <_ZN7CPU_MOD11updateStateEi>
		print((char*)"run");
 8002414:	4848      	ldr	r0, [pc, #288]	@ (8002538 <_Z12select_statev+0x420>)
 8002416:	f7ff fdc1 	bl	8001f9c <print>
		fan_speed = (FAN_TIMER_ARR * 75) / 100;
 800241a:	4b48      	ldr	r3, [pc, #288]	@ (800253c <_Z12select_statev+0x424>)
 800241c:	f641 62ef 	movw	r2, #7919	@ 0x1eef
 8002420:	801a      	strh	r2, [r3, #0]

		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fan_speed);
 8002422:	4b46      	ldr	r3, [pc, #280]	@ (800253c <_Z12select_statev+0x424>)
 8002424:	881a      	ldrh	r2, [r3, #0]
 8002426:	4b46      	ldr	r3, [pc, #280]	@ (8002540 <_Z12select_statev+0x428>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	635a      	str	r2, [r3, #52]	@ 0x34

		if ((flag_cpu == CPU_ERROR_COMMUNICATION) && (flag_charger == 1)){
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d106      	bne.n	8002440 <_Z12select_statev+0x328>
 8002432:	4b44      	ldr	r3, [pc, #272]	@ (8002544 <_Z12select_statev+0x42c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d102      	bne.n	8002440 <_Z12select_statev+0x328>
			//state = error; //If I disconnect the charger, error
			print((char*)"CPU");
 800243a:	4843      	ldr	r0, [pc, #268]	@ (8002548 <_Z12select_statev+0x430>)
 800243c:	f7ff fdae 	bl	8001f9c <print>
		}
		if (flag_current != Current_OK){
			//state = error; //If current is too high, error
		}
		if(HAL_GPIO_ReadPin(DIGITAL1_GPIO_Port, DIGITAL1_Pin) == GPIO_PIN_RESET){ //SDC IO
 8002440:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002444:	4841      	ldr	r0, [pc, #260]	@ (800254c <_Z12select_statev+0x434>)
 8002446:	f004 f985 	bl	8006754 <HAL_GPIO_ReadPin>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
			//state = error;
			//print((char*)"DIGITAL");
		}
		break;
 800244e:	e03f      	b.n	80024d0 <_Z12select_statev+0x3b8>

	case charge: {
		state_air_n = 1;
 8002450:	2301      	movs	r3, #1
 8002452:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 1;
 8002454:	2301      	movs	r3, #1
 8002456:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 1;
 8002458:	2301      	movs	r3, #1
 800245a:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_CHARGING);
 800245c:	2104      	movs	r1, #4
 800245e:	4835      	ldr	r0, [pc, #212]	@ (8002534 <_Z12select_statev+0x41c>)
 8002460:	f7fe fe3e 	bl	80010e0 <_ZN7CPU_MOD11updateStateEi>


		fan_speed = (FAN_TIMER_ARR * 40) / 100;
 8002464:	4b35      	ldr	r3, [pc, #212]	@ (800253c <_Z12select_statev+0x424>)
 8002466:	f241 027f 	movw	r2, #4223	@ 0x107f
 800246a:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fan_speed);
 800246c:	4b33      	ldr	r3, [pc, #204]	@ (800253c <_Z12select_statev+0x424>)
 800246e:	881a      	ldrh	r2, [r3, #0]
 8002470:	4b33      	ldr	r3, [pc, #204]	@ (8002540 <_Z12select_statev+0x428>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	635a      	str	r2, [r3, #52]	@ 0x34


		int32_t current_act = current.Current / 1000; //Actual current in mA to check if it's charging
 8002476:	4b36      	ldr	r3, [pc, #216]	@ (8002550 <_Z12select_statev+0x438>)
 8002478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800247a:	4a36      	ldr	r2, [pc, #216]	@ (8002554 <_Z12select_statev+0x43c>)
 800247c:	fb82 1203 	smull	r1, r2, r2, r3
 8002480:	1192      	asrs	r2, r2, #6
 8002482:	17db      	asrs	r3, r3, #31
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	607b      	str	r3, [r7, #4]
				state = error; //Charge has been interrupted
		} else {
			charge_current_error_counter = 0;
		}*/

		if (gpio_charge == GPIO_PIN_RESET){
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d11f      	bne.n	80024ce <_Z12select_statev+0x3b6>
			state = start;
 800248e:	4b32      	ldr	r3, [pc, #200]	@ (8002558 <_Z12select_statev+0x440>)
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
			charge_current_error_counter = 0;
 8002494:	4b31      	ldr	r3, [pc, #196]	@ (800255c <_Z12select_statev+0x444>)
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
		}


		break;
 800249a:	e018      	b.n	80024ce <_Z12select_statev+0x3b6>
	}

	case error:
		state_air_n = 0; //All relés closed
 800249c:	2300      	movs	r3, #0
 800249e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_ERROR);
 80024a8:	2103      	movs	r1, #3
 80024aa:	4822      	ldr	r0, [pc, #136]	@ (8002534 <_Z12select_statev+0x41c>)
 80024ac:	f7fe fe18 	bl	80010e0 <_ZN7CPU_MOD11updateStateEi>
		fan_speed = 0;
 80024b0:	4b22      	ldr	r3, [pc, #136]	@ (800253c <_Z12select_statev+0x424>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fan_speed);
 80024b6:	4b21      	ldr	r3, [pc, #132]	@ (800253c <_Z12select_statev+0x424>)
 80024b8:	881a      	ldrh	r2, [r3, #0]
 80024ba:	4b21      	ldr	r3, [pc, #132]	@ (8002540 <_Z12select_statev+0x428>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 80024c0:	e006      	b.n	80024d0 <_Z12select_statev+0x3b8>
		break;
 80024c2:	bf00      	nop
 80024c4:	e004      	b.n	80024d0 <_Z12select_statev+0x3b8>
		break;
 80024c6:	bf00      	nop
 80024c8:	e002      	b.n	80024d0 <_Z12select_statev+0x3b8>
		break;
 80024ca:	bf00      	nop
 80024cc:	e000      	b.n	80024d0 <_Z12select_statev+0x3b8>
		break;
 80024ce:	bf00      	nop
	 sprintf(buffer, " - STATE:     %i\n", state);
	 print(buffer);
	 sprintf(buffer, "***********************\n");
	 print(buffer);*/
	HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin,
			flag_ams_ok ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80024d0:	4b23      	ldr	r3, [pc, #140]	@ (8002560 <_Z12select_statev+0x448>)
 80024d2:	681b      	ldr	r3, [r3, #0]
	HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin,
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <_Z12select_statev+0x3c4>
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <_Z12select_statev+0x3c6>
 80024dc:	2300      	movs	r3, #0
 80024de:	461a      	mov	r2, r3
 80024e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024e4:	481f      	ldr	r0, [pc, #124]	@ (8002564 <_Z12select_statev+0x44c>)
 80024e6:	f004 f94d 	bl	8006784 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_AIR_N_GPIO_Port, RELAY_AIR_N_Pin,
 80024ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <_Z12select_statev+0x3dc>
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <_Z12select_statev+0x3de>
 80024f4:	2300      	movs	r3, #0
 80024f6:	461a      	mov	r2, r3
 80024f8:	2108      	movs	r1, #8
 80024fa:	481b      	ldr	r0, [pc, #108]	@ (8002568 <_Z12select_statev+0x450>)
 80024fc:	f004 f942 	bl	8006784 <HAL_GPIO_WritePin>
			state_air_n ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_AIR_P_GPIO_Port, RELAY_AIR_P_Pin,
 8002500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <_Z12select_statev+0x3f2>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <_Z12select_statev+0x3f4>
 800250a:	2300      	movs	r3, #0
 800250c:	461a      	mov	r2, r3
 800250e:	2110      	movs	r1, #16
 8002510:	4815      	ldr	r0, [pc, #84]	@ (8002568 <_Z12select_statev+0x450>)
 8002512:	f004 f937 	bl	8006784 <HAL_GPIO_WritePin>
			state_air_p ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_PRECHARGE_GPIO_Port, RELAY_PRECHARGE_Pin,
 8002516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <_Z12select_statev+0x408>
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <_Z12select_statev+0x40a>
 8002520:	2300      	movs	r3, #0
 8002522:	461a      	mov	r2, r3
 8002524:	2120      	movs	r1, #32
 8002526:	4810      	ldr	r0, [pc, #64]	@ (8002568 <_Z12select_statev+0x450>)
 8002528:	f004 f92c 	bl	8006784 <HAL_GPIO_WritePin>





}
 800252c:	bf00      	nop
 800252e:	3730      	adds	r7, #48	@ 0x30
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	24000c74 	.word	0x24000c74
 8002538:	0800cf24 	.word	0x0800cf24
 800253c:	24000c70 	.word	0x24000c70
 8002540:	240002a8 	.word	0x240002a8
 8002544:	24000ca8 	.word	0x24000ca8
 8002548:	0800cf28 	.word	0x0800cf28
 800254c:	58021000 	.word	0x58021000
 8002550:	24000cb0 	.word	0x24000cb0
 8002554:	10624dd3 	.word	0x10624dd3
 8002558:	24000cf4 	.word	0x24000cf4
 800255c:	24000cac 	.word	0x24000cac
 8002560:	24000008 	.word	0x24000008
 8002564:	58021400 	.word	0x58021400
 8002568:	58020c00 	.word	0x58020c00

0800256c <_Z11parse_state6CANMsg>:

/*********************************************************************************************************
 ** Function name:           parse_state
 ** Descriptions:            Function for analysing the data from the CAN
 *********************************************************************************************************/
void parse_state(CANMsg data) {
 800256c:	b084      	sub	sp, #16
 800256e:	b580      	push	{r7, lr}
 8002570:	b084      	sub	sp, #16
 8002572:	af00      	add	r7, sp, #0
 8002574:	f107 0c18 	add.w	ip, r7, #24
 8002578:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t time = HAL_GetTick();
 800257c:	f000 fcba 	bl	8002ef4 <HAL_GetTick>
 8002580:	6038      	str	r0, [r7, #0]
	bool flag_bms = false;
 8002582:	2300      	movs	r3, #0
 8002584:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; i < BMS_N; i++) {
 8002586:	2300      	movs	r3, #0
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	e017      	b.n	80025bc <_Z11parse_state6CANMsg+0x50>
		flag_bms = BMS[i].parse(data.id, &data.buf[0], time); //Checking if the message received is for  BMS
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8002592:	fb02 f303 	mul.w	r3, r2, r3
 8002596:	4a25      	ldr	r2, [pc, #148]	@ (800262c <_Z11parse_state6CANMsg+0xc0>)
 8002598:	1898      	adds	r0, r3, r2
 800259a:	69b9      	ldr	r1, [r7, #24]
 800259c:	f107 021d 	add.w	r2, r7, #29
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	f7fe fad3 	bl	8000b4c <_ZN7BMS_MOD5parseEmPhm>
 80025a6:	4603      	mov	r3, r0
 80025a8:	73fb      	strb	r3, [r7, #15]
		if (flag_bms)
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d002      	beq.n	80025b6 <_Z11parse_state6CANMsg+0x4a>
			i = BMS_N;
 80025b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002630 <_Z11parse_state6CANMsg+0xc4>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < BMS_N; i++) {
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	3301      	adds	r3, #1
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002630 <_Z11parse_state6CANMsg+0xc4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	dbe2      	blt.n	800258c <_Z11parse_state6CANMsg+0x20>
	}

	if (!flag_bms) {
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
 80025c8:	f083 0301 	eor.w	r3, r3, #1
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d025      	beq.n	800261e <_Z11parse_state6CANMsg+0xb2>
		if (CPU.parse(data.id, &data.buf[0], time))
 80025d2:	69b9      	ldr	r1, [r7, #24]
 80025d4:	f107 021d 	add.w	r2, r7, #29
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	4816      	ldr	r0, [pc, #88]	@ (8002634 <_Z11parse_state6CANMsg+0xc8>)
 80025dc:	f7fe fd0a 	bl	8000ff4 <_ZN7CPU_MOD5parseEmPhm>
			;                       //Cheking if message is for CPU
		if (data.id == 419385575) //If message from this direction received, it is because the charger is connected and the accu is for charging
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	4a15      	ldr	r2, [pc, #84]	@ (8002638 <_Z11parse_state6CANMsg+0xcc>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d11a      	bne.n	800261e <_Z11parse_state6CANMsg+0xb2>
				{
			for (int i = 0; i < BMS_N; i++) {
 80025e8:	2300      	movs	r3, #0
 80025ea:	607b      	str	r3, [r7, #4]
 80025ec:	e00c      	b.n	8002608 <_Z11parse_state6CANMsg+0x9c>
				BMS[i].flag_charger = 1;
 80025ee:	4a0f      	ldr	r2, [pc, #60]	@ (800262c <_Z11parse_state6CANMsg+0xc0>)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	3398      	adds	r3, #152	@ 0x98
 80025fe:	2201      	movs	r2, #1
 8002600:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < BMS_N; i++) {
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3301      	adds	r3, #1
 8002606:	607b      	str	r3, [r7, #4]
 8002608:	4b09      	ldr	r3, [pc, #36]	@ (8002630 <_Z11parse_state6CANMsg+0xc4>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	429a      	cmp	r2, r3
 8002610:	dbed      	blt.n	80025ee <_Z11parse_state6CANMsg+0x82>
			}

			current.flag_charger = 1;
 8002612:	4b0a      	ldr	r3, [pc, #40]	@ (800263c <_Z11parse_state6CANMsg+0xd0>)
 8002614:	2201      	movs	r2, #1
 8002616:	639a      	str	r2, [r3, #56]	@ 0x38
			flag_charger = 1;
 8002618:	4b09      	ldr	r3, [pc, #36]	@ (8002640 <_Z11parse_state6CANMsg+0xd4>)
 800261a:	2201      	movs	r2, #1
 800261c:	601a      	str	r2, [r3, #0]
		} else {
			// Serial.print("ID: ");
			// Serial.println(data.id);
		}
	}
}
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002628:	b004      	add	sp, #16
 800262a:	4770      	bx	lr
 800262c:	240004bc 	.word	0x240004bc
 8002630:	24000000 	.word	0x24000000
 8002634:	24000c74 	.word	0x24000c74
 8002638:	18ff50e7 	.word	0x18ff50e7
 800263c:	24000cb0 	.word	0x24000cb0
 8002640:	24000ca8 	.word	0x24000ca8

08002644 <_Z41__static_initialization_and_destruction_0v>:
 8002644:	b590      	push	{r4, r7, lr}
 8002646:	b087      	sub	sp, #28
 8002648:	af06      	add	r7, sp, #24
		};
 800264a:	4c40      	ldr	r4, [pc, #256]	@ (800274c <_Z41__static_initialization_and_destruction_0v+0x108>)
 800264c:	2369      	movs	r3, #105	@ 0x69
 800264e:	9304      	str	r3, [sp, #16]
 8002650:	2332      	movs	r3, #50	@ 0x32
 8002652:	9303      	str	r3, [sp, #12]
 8002654:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002658:	9302      	str	r3, [sp, #8]
 800265a:	2313      	movs	r3, #19
 800265c:	9301      	str	r3, [sp, #4]
 800265e:	233c      	movs	r3, #60	@ 0x3c
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8002666:	f241 0268 	movw	r2, #4200	@ 0x1068
 800266a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800266e:	4620      	mov	r0, r4
 8002670:	f7fe f83c 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 8002674:	f504 74c4 	add.w	r4, r4, #392	@ 0x188
 8002678:	23cd      	movs	r3, #205	@ 0xcd
 800267a:	9304      	str	r3, [sp, #16]
 800267c:	2364      	movs	r3, #100	@ 0x64
 800267e:	9303      	str	r3, [sp, #12]
 8002680:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002684:	9302      	str	r3, [sp, #8]
 8002686:	2313      	movs	r3, #19
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	233c      	movs	r3, #60	@ 0x3c
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8002692:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002696:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 800269a:	4620      	mov	r0, r4
 800269c:	f7fe f826 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 80026a0:	f504 74c4 	add.w	r4, r4, #392	@ 0x188
 80026a4:	f240 1331 	movw	r3, #305	@ 0x131
 80026a8:	9304      	str	r3, [sp, #16]
 80026aa:	2396      	movs	r3, #150	@ 0x96
 80026ac:	9303      	str	r3, [sp, #12]
 80026ae:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80026b2:	9302      	str	r3, [sp, #8]
 80026b4:	2313      	movs	r3, #19
 80026b6:	9301      	str	r3, [sp, #4]
 80026b8:	233c      	movs	r3, #60	@ 0x3c
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80026c0:	f241 0268 	movw	r2, #4200	@ 0x1068
 80026c4:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 80026c8:	4620      	mov	r0, r4
 80026ca:	f7fe f80f 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 80026ce:	f504 74c4 	add.w	r4, r4, #392	@ 0x188
 80026d2:	f240 1395 	movw	r3, #405	@ 0x195
 80026d6:	9304      	str	r3, [sp, #16]
 80026d8:	23c8      	movs	r3, #200	@ 0xc8
 80026da:	9303      	str	r3, [sp, #12]
 80026dc:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80026e0:	9302      	str	r3, [sp, #8]
 80026e2:	2313      	movs	r3, #19
 80026e4:	9301      	str	r3, [sp, #4]
 80026e6:	233c      	movs	r3, #60	@ 0x3c
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80026ee:	f241 0268 	movw	r2, #4200	@ 0x1068
 80026f2:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 80026f6:	4620      	mov	r0, r4
 80026f8:	f7fd fff8 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 80026fc:	f504 70c4 	add.w	r0, r4, #392	@ 0x188
 8002700:	f240 13f9 	movw	r3, #505	@ 0x1f9
 8002704:	9304      	str	r3, [sp, #16]
 8002706:	23fa      	movs	r3, #250	@ 0xfa
 8002708:	9303      	str	r3, [sp, #12]
 800270a:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800270e:	9302      	str	r3, [sp, #8]
 8002710:	2313      	movs	r3, #19
 8002712:	9301      	str	r3, [sp, #4]
 8002714:	233c      	movs	r3, #60	@ 0x3c
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 800271c:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002720:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8002724:	f7fd ffe2 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
CPU_MOD CPU(CPU_ID_send, CPU_ID_recv, 500); //Same with CPU, rest of vehicle
 8002728:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800272c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002730:	2120      	movs	r1, #32
 8002732:	4807      	ldr	r0, [pc, #28]	@ (8002750 <_Z41__static_initialization_and_destruction_0v+0x10c>)
 8002734:	f7fe fc0c 	bl	8000f50 <_ZN7CPU_MODC1Emmi>
Current_MOD current(Current_ID, Current_max); //Class for current measurement
 8002738:	22c8      	movs	r2, #200	@ 0xc8
 800273a:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 800273e:	4805      	ldr	r0, [pc, #20]	@ (8002754 <_Z41__static_initialization_and_destruction_0v+0x110>)
 8002740:	f7fe fce0 	bl	8001104 <_ZN11Current_MODC1Emi>
}
 8002744:	bf00      	nop
 8002746:	3704      	adds	r7, #4
 8002748:	46bd      	mov	sp, r7
 800274a:	bd90      	pop	{r4, r7, pc}
 800274c:	240004bc 	.word	0x240004bc
 8002750:	24000c74 	.word	0x24000c74
 8002754:	24000cb0 	.word	0x24000cb0

08002758 <_GLOBAL__sub_I_BMS>:
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
 800275c:	f7ff ff72 	bl	8002644 <_Z41__static_initialization_and_destruction_0v>
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276a:	4b0a      	ldr	r3, [pc, #40]	@ (8002794 <HAL_MspInit+0x30>)
 800276c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002770:	4a08      	ldr	r2, [pc, #32]	@ (8002794 <HAL_MspInit+0x30>)
 8002772:	f043 0302 	orr.w	r3, r3, #2
 8002776:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800277a:	4b06      	ldr	r3, [pc, #24]	@ (8002794 <HAL_MspInit+0x30>)
 800277c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	607b      	str	r3, [r7, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	58024400 	.word	0x58024400

08002798 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08c      	sub	sp, #48	@ 0x30
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a0:	f107 031c 	add.w	r3, r7, #28
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a31      	ldr	r2, [pc, #196]	@ (800287c <HAL_ADC_MspInit+0xe4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d12b      	bne.n	8002812 <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80027ba:	4b31      	ldr	r3, [pc, #196]	@ (8002880 <HAL_ADC_MspInit+0xe8>)
 80027bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80027c0:	4a2f      	ldr	r2, [pc, #188]	@ (8002880 <HAL_ADC_MspInit+0xe8>)
 80027c2:	f043 0320 	orr.w	r3, r3, #32
 80027c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80027ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002880 <HAL_ADC_MspInit+0xe8>)
 80027cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80027d0:	f003 0320 	and.w	r3, r3, #32
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80027d8:	4b29      	ldr	r3, [pc, #164]	@ (8002880 <HAL_ADC_MspInit+0xe8>)
 80027da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027de:	4a28      	ldr	r2, [pc, #160]	@ (8002880 <HAL_ADC_MspInit+0xe8>)
 80027e0:	f043 0320 	orr.w	r3, r3, #32
 80027e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027e8:	4b25      	ldr	r3, [pc, #148]	@ (8002880 <HAL_ADC_MspInit+0xe8>)
 80027ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027ee:	f003 0320 	and.w	r3, r3, #32
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80027f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027fc:	2303      	movs	r3, #3
 80027fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002804:	f107 031c 	add.w	r3, r7, #28
 8002808:	4619      	mov	r1, r3
 800280a:	481e      	ldr	r0, [pc, #120]	@ (8002884 <HAL_ADC_MspInit+0xec>)
 800280c:	f003 fdfa 	bl	8006404 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002810:	e02f      	b.n	8002872 <HAL_ADC_MspInit+0xda>
  else if(hadc->Instance==ADC3)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a1c      	ldr	r2, [pc, #112]	@ (8002888 <HAL_ADC_MspInit+0xf0>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d12a      	bne.n	8002872 <HAL_ADC_MspInit+0xda>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800281c:	4b18      	ldr	r3, [pc, #96]	@ (8002880 <HAL_ADC_MspInit+0xe8>)
 800281e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002822:	4a17      	ldr	r2, [pc, #92]	@ (8002880 <HAL_ADC_MspInit+0xe8>)
 8002824:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002828:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800282c:	4b14      	ldr	r3, [pc, #80]	@ (8002880 <HAL_ADC_MspInit+0xe8>)
 800282e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002832:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800283a:	4b11      	ldr	r3, [pc, #68]	@ (8002880 <HAL_ADC_MspInit+0xe8>)
 800283c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002840:	4a0f      	ldr	r2, [pc, #60]	@ (8002880 <HAL_ADC_MspInit+0xe8>)
 8002842:	f043 0320 	orr.w	r3, r3, #32
 8002846:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800284a:	4b0d      	ldr	r3, [pc, #52]	@ (8002880 <HAL_ADC_MspInit+0xe8>)
 800284c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002850:	f003 0320 	and.w	r3, r3, #32
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002858:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800285c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800285e:	2303      	movs	r3, #3
 8002860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002862:	2300      	movs	r3, #0
 8002864:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002866:	f107 031c 	add.w	r3, r7, #28
 800286a:	4619      	mov	r1, r3
 800286c:	4805      	ldr	r0, [pc, #20]	@ (8002884 <HAL_ADC_MspInit+0xec>)
 800286e:	f003 fdc9 	bl	8006404 <HAL_GPIO_Init>
}
 8002872:	bf00      	nop
 8002874:	3730      	adds	r7, #48	@ 0x30
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40022000 	.word	0x40022000
 8002880:	58024400 	.word	0x58024400
 8002884:	58021400 	.word	0x58021400
 8002888:	58026000 	.word	0x58026000

0800288c <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b0ba      	sub	sp, #232	@ 0xe8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002894:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]
 80028a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028a4:	f107 0318 	add.w	r3, r7, #24
 80028a8:	22b8      	movs	r2, #184	@ 0xb8
 80028aa:	2100      	movs	r1, #0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f009 fccb 	bl	800c248 <memset>
  if(hfdcan->Instance==FDCAN1)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a5a      	ldr	r2, [pc, #360]	@ (8002a20 <HAL_FDCAN_MspInit+0x194>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d157      	bne.n	800296c <HAL_FDCAN_MspInit+0xe0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80028bc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80028c8:	2300      	movs	r3, #0
 80028ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028ce:	f107 0318 	add.w	r3, r7, #24
 80028d2:	4618      	mov	r0, r3
 80028d4:	f004 ff10 	bl	80076f8 <HAL_RCCEx_PeriphCLKConfig>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 80028de:	f7ff fc09 	bl	80020f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80028e2:	4b50      	ldr	r3, [pc, #320]	@ (8002a24 <HAL_FDCAN_MspInit+0x198>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	3301      	adds	r3, #1
 80028e8:	4a4e      	ldr	r2, [pc, #312]	@ (8002a24 <HAL_FDCAN_MspInit+0x198>)
 80028ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80028ec:	4b4d      	ldr	r3, [pc, #308]	@ (8002a24 <HAL_FDCAN_MspInit+0x198>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d10e      	bne.n	8002912 <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80028f4:	4b4c      	ldr	r3, [pc, #304]	@ (8002a28 <HAL_FDCAN_MspInit+0x19c>)
 80028f6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80028fa:	4a4b      	ldr	r2, [pc, #300]	@ (8002a28 <HAL_FDCAN_MspInit+0x19c>)
 80028fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002900:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002904:	4b48      	ldr	r3, [pc, #288]	@ (8002a28 <HAL_FDCAN_MspInit+0x19c>)
 8002906:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800290a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002912:	4b45      	ldr	r3, [pc, #276]	@ (8002a28 <HAL_FDCAN_MspInit+0x19c>)
 8002914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002918:	4a43      	ldr	r2, [pc, #268]	@ (8002a28 <HAL_FDCAN_MspInit+0x19c>)
 800291a:	f043 0308 	orr.w	r3, r3, #8
 800291e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002922:	4b41      	ldr	r3, [pc, #260]	@ (8002a28 <HAL_FDCAN_MspInit+0x19c>)
 8002924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002930:	2303      	movs	r3, #3
 8002932:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002936:	2302      	movs	r3, #2
 8002938:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002942:	2300      	movs	r3, #0
 8002944:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002948:	2309      	movs	r3, #9
 800294a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800294e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002952:	4619      	mov	r1, r3
 8002954:	4835      	ldr	r0, [pc, #212]	@ (8002a2c <HAL_FDCAN_MspInit+0x1a0>)
 8002956:	f003 fd55 	bl	8006404 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800295a:	2200      	movs	r2, #0
 800295c:	2100      	movs	r1, #0
 800295e:	2013      	movs	r0, #19
 8002960:	f002 fb4d 	bl	8004ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002964:	2013      	movs	r0, #19
 8002966:	f002 fb64 	bl	8005032 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN FDCAN2_MspInit 1 */

    /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800296a:	e054      	b.n	8002a16 <HAL_FDCAN_MspInit+0x18a>
  else if(hfdcan->Instance==FDCAN2)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a2f      	ldr	r2, [pc, #188]	@ (8002a30 <HAL_FDCAN_MspInit+0x1a4>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d14f      	bne.n	8002a16 <HAL_FDCAN_MspInit+0x18a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002976:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002982:	2300      	movs	r3, #0
 8002984:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002988:	f107 0318 	add.w	r3, r7, #24
 800298c:	4618      	mov	r0, r3
 800298e:	f004 feb3 	bl	80076f8 <HAL_RCCEx_PeriphCLKConfig>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 8002998:	f7ff fbac 	bl	80020f4 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800299c:	4b21      	ldr	r3, [pc, #132]	@ (8002a24 <HAL_FDCAN_MspInit+0x198>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	3301      	adds	r3, #1
 80029a2:	4a20      	ldr	r2, [pc, #128]	@ (8002a24 <HAL_FDCAN_MspInit+0x198>)
 80029a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80029a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002a24 <HAL_FDCAN_MspInit+0x198>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d10e      	bne.n	80029cc <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80029ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002a28 <HAL_FDCAN_MspInit+0x19c>)
 80029b0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80029b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002a28 <HAL_FDCAN_MspInit+0x19c>)
 80029b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ba:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80029be:	4b1a      	ldr	r3, [pc, #104]	@ (8002a28 <HAL_FDCAN_MspInit+0x19c>)
 80029c0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80029c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029cc:	4b16      	ldr	r3, [pc, #88]	@ (8002a28 <HAL_FDCAN_MspInit+0x19c>)
 80029ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029d2:	4a15      	ldr	r2, [pc, #84]	@ (8002a28 <HAL_FDCAN_MspInit+0x19c>)
 80029d4:	f043 0302 	orr.w	r3, r3, #2
 80029d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029dc:	4b12      	ldr	r3, [pc, #72]	@ (8002a28 <HAL_FDCAN_MspInit+0x19c>)
 80029de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80029ea:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80029ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f2:	2302      	movs	r3, #2
 80029f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002a04:	2309      	movs	r3, #9
 8002a06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a0a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4808      	ldr	r0, [pc, #32]	@ (8002a34 <HAL_FDCAN_MspInit+0x1a8>)
 8002a12:	f003 fcf7 	bl	8006404 <HAL_GPIO_Init>
}
 8002a16:	bf00      	nop
 8002a18:	37e8      	adds	r7, #232	@ 0xe8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	4000a000 	.word	0x4000a000
 8002a24:	24000d48 	.word	0x24000d48
 8002a28:	58024400 	.word	0x58024400
 8002a2c:	58020c00 	.word	0x58020c00
 8002a30:	4000a400 	.word	0x4000a400
 8002a34:	58020400 	.word	0x58020400

08002a38 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a0b      	ldr	r2, [pc, #44]	@ (8002a74 <HAL_TIM_Base_MspInit+0x3c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d10e      	bne.n	8002a68 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a78 <HAL_TIM_Base_MspInit+0x40>)
 8002a4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a50:	4a09      	ldr	r2, [pc, #36]	@ (8002a78 <HAL_TIM_Base_MspInit+0x40>)
 8002a52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a56:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002a5a:	4b07      	ldr	r3, [pc, #28]	@ (8002a78 <HAL_TIM_Base_MspInit+0x40>)
 8002a5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	40014800 	.word	0x40014800
 8002a78:	58024400 	.word	0x58024400

08002a7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a84:	f107 030c 	add.w	r3, r7, #12
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a13      	ldr	r2, [pc, #76]	@ (8002ae8 <HAL_TIM_MspPostInit+0x6c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d11f      	bne.n	8002ade <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a9e:	4b13      	ldr	r3, [pc, #76]	@ (8002aec <HAL_TIM_MspPostInit+0x70>)
 8002aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002aa4:	4a11      	ldr	r2, [pc, #68]	@ (8002aec <HAL_TIM_MspPostInit+0x70>)
 8002aa6:	f043 0302 	orr.w	r3, r3, #2
 8002aaa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002aae:	4b0f      	ldr	r3, [pc, #60]	@ (8002aec <HAL_TIM_MspPostInit+0x70>)
 8002ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PB9     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002abc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ac0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad2:	f107 030c 	add.w	r3, r7, #12
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4805      	ldr	r0, [pc, #20]	@ (8002af0 <HAL_TIM_MspPostInit+0x74>)
 8002ada:	f003 fc93 	bl	8006404 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002ade:	bf00      	nop
 8002ae0:	3720      	adds	r7, #32
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40014800 	.word	0x40014800
 8002aec:	58024400 	.word	0x58024400
 8002af0:	58020400 	.word	0x58020400

08002af4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b0b8      	sub	sp, #224	@ 0xe0
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b0c:	f107 0310 	add.w	r3, r7, #16
 8002b10:	22b8      	movs	r2, #184	@ 0xb8
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f009 fb97 	bl	800c248 <memset>
  if(huart->Instance==USART2)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a26      	ldr	r2, [pc, #152]	@ (8002bb8 <HAL_UART_MspInit+0xc4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d145      	bne.n	8002bb0 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b24:	f04f 0202 	mov.w	r2, #2
 8002b28:	f04f 0300 	mov.w	r3, #0
 8002b2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002b30:	2300      	movs	r3, #0
 8002b32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b36:	f107 0310 	add.w	r3, r7, #16
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f004 fddc 	bl	80076f8 <HAL_RCCEx_PeriphCLKConfig>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002b46:	f7ff fad5 	bl	80020f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8002bbc <HAL_UART_MspInit+0xc8>)
 8002b4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b50:	4a1a      	ldr	r2, [pc, #104]	@ (8002bbc <HAL_UART_MspInit+0xc8>)
 8002b52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b56:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002b5a:	4b18      	ldr	r3, [pc, #96]	@ (8002bbc <HAL_UART_MspInit+0xc8>)
 8002b5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b68:	4b14      	ldr	r3, [pc, #80]	@ (8002bbc <HAL_UART_MspInit+0xc8>)
 8002b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b6e:	4a13      	ldr	r2, [pc, #76]	@ (8002bbc <HAL_UART_MspInit+0xc8>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b78:	4b10      	ldr	r3, [pc, #64]	@ (8002bbc <HAL_UART_MspInit+0xc8>)
 8002b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b86:	230c      	movs	r3, #12
 8002b88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b9e:	2307      	movs	r3, #7
 8002ba0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4805      	ldr	r0, [pc, #20]	@ (8002bc0 <HAL_UART_MspInit+0xcc>)
 8002bac:	f003 fc2a 	bl	8006404 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002bb0:	bf00      	nop
 8002bb2:	37e0      	adds	r7, #224	@ 0xe0
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40004400 	.word	0x40004400
 8002bbc:	58024400 	.word	0x58024400
 8002bc0:	58020000 	.word	0x58020000

08002bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bc8:	bf00      	nop
 8002bca:	e7fd      	b.n	8002bc8 <NMI_Handler+0x4>

08002bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bd0:	bf00      	nop
 8002bd2:	e7fd      	b.n	8002bd0 <HardFault_Handler+0x4>

08002bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bd8:	bf00      	nop
 8002bda:	e7fd      	b.n	8002bd8 <MemManage_Handler+0x4>

08002bdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002be0:	bf00      	nop
 8002be2:	e7fd      	b.n	8002be0 <BusFault_Handler+0x4>

08002be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002be8:	bf00      	nop
 8002bea:	e7fd      	b.n	8002be8 <UsageFault_Handler+0x4>

08002bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bf0:	bf00      	nop
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c1a:	f000 f957 	bl	8002ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002c28:	4802      	ldr	r0, [pc, #8]	@ (8002c34 <FDCAN1_IT0_IRQHandler+0x10>)
 8002c2a:	f002 fedd 	bl	80059e8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	24000168 	.word	0x24000168

08002c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c40:	4a14      	ldr	r2, [pc, #80]	@ (8002c94 <_sbrk+0x5c>)
 8002c42:	4b15      	ldr	r3, [pc, #84]	@ (8002c98 <_sbrk+0x60>)
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c4c:	4b13      	ldr	r3, [pc, #76]	@ (8002c9c <_sbrk+0x64>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d102      	bne.n	8002c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c54:	4b11      	ldr	r3, [pc, #68]	@ (8002c9c <_sbrk+0x64>)
 8002c56:	4a12      	ldr	r2, [pc, #72]	@ (8002ca0 <_sbrk+0x68>)
 8002c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c5a:	4b10      	ldr	r3, [pc, #64]	@ (8002c9c <_sbrk+0x64>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4413      	add	r3, r2
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d207      	bcs.n	8002c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c68:	f009 faf6 	bl	800c258 <__errno>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	220c      	movs	r2, #12
 8002c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c72:	f04f 33ff 	mov.w	r3, #4294967295
 8002c76:	e009      	b.n	8002c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c78:	4b08      	ldr	r3, [pc, #32]	@ (8002c9c <_sbrk+0x64>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c7e:	4b07      	ldr	r3, [pc, #28]	@ (8002c9c <_sbrk+0x64>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	4a05      	ldr	r2, [pc, #20]	@ (8002c9c <_sbrk+0x64>)
 8002c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	24050000 	.word	0x24050000
 8002c98:	00000400 	.word	0x00000400
 8002c9c:	24000d4c 	.word	0x24000d4c
 8002ca0:	24000ea0 	.word	0x24000ea0

08002ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ca8:	4b32      	ldr	r3, [pc, #200]	@ (8002d74 <SystemInit+0xd0>)
 8002caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cae:	4a31      	ldr	r2, [pc, #196]	@ (8002d74 <SystemInit+0xd0>)
 8002cb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002cb8:	4b2f      	ldr	r3, [pc, #188]	@ (8002d78 <SystemInit+0xd4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	2b06      	cmp	r3, #6
 8002cc2:	d807      	bhi.n	8002cd4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002cc4:	4b2c      	ldr	r3, [pc, #176]	@ (8002d78 <SystemInit+0xd4>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f023 030f 	bic.w	r3, r3, #15
 8002ccc:	4a2a      	ldr	r2, [pc, #168]	@ (8002d78 <SystemInit+0xd4>)
 8002cce:	f043 0307 	orr.w	r3, r3, #7
 8002cd2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002cd4:	4b29      	ldr	r3, [pc, #164]	@ (8002d7c <SystemInit+0xd8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a28      	ldr	r2, [pc, #160]	@ (8002d7c <SystemInit+0xd8>)
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ce0:	4b26      	ldr	r3, [pc, #152]	@ (8002d7c <SystemInit+0xd8>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002ce6:	4b25      	ldr	r3, [pc, #148]	@ (8002d7c <SystemInit+0xd8>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	4924      	ldr	r1, [pc, #144]	@ (8002d7c <SystemInit+0xd8>)
 8002cec:	4b24      	ldr	r3, [pc, #144]	@ (8002d80 <SystemInit+0xdc>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002cf2:	4b21      	ldr	r3, [pc, #132]	@ (8002d78 <SystemInit+0xd4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0308 	and.w	r3, r3, #8
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d007      	beq.n	8002d0e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8002d78 <SystemInit+0xd4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 030f 	bic.w	r3, r3, #15
 8002d06:	4a1c      	ldr	r2, [pc, #112]	@ (8002d78 <SystemInit+0xd4>)
 8002d08:	f043 0307 	orr.w	r3, r3, #7
 8002d0c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8002d7c <SystemInit+0xd8>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002d14:	4b19      	ldr	r3, [pc, #100]	@ (8002d7c <SystemInit+0xd8>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002d1a:	4b18      	ldr	r3, [pc, #96]	@ (8002d7c <SystemInit+0xd8>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002d20:	4b16      	ldr	r3, [pc, #88]	@ (8002d7c <SystemInit+0xd8>)
 8002d22:	4a18      	ldr	r2, [pc, #96]	@ (8002d84 <SystemInit+0xe0>)
 8002d24:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002d26:	4b15      	ldr	r3, [pc, #84]	@ (8002d7c <SystemInit+0xd8>)
 8002d28:	4a17      	ldr	r2, [pc, #92]	@ (8002d88 <SystemInit+0xe4>)
 8002d2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002d2c:	4b13      	ldr	r3, [pc, #76]	@ (8002d7c <SystemInit+0xd8>)
 8002d2e:	4a17      	ldr	r2, [pc, #92]	@ (8002d8c <SystemInit+0xe8>)
 8002d30:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002d32:	4b12      	ldr	r3, [pc, #72]	@ (8002d7c <SystemInit+0xd8>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002d38:	4b10      	ldr	r3, [pc, #64]	@ (8002d7c <SystemInit+0xd8>)
 8002d3a:	4a14      	ldr	r2, [pc, #80]	@ (8002d8c <SystemInit+0xe8>)
 8002d3c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d7c <SystemInit+0xd8>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002d44:	4b0d      	ldr	r3, [pc, #52]	@ (8002d7c <SystemInit+0xd8>)
 8002d46:	4a11      	ldr	r2, [pc, #68]	@ (8002d8c <SystemInit+0xe8>)
 8002d48:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d7c <SystemInit+0xd8>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d50:	4b0a      	ldr	r3, [pc, #40]	@ (8002d7c <SystemInit+0xd8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a09      	ldr	r2, [pc, #36]	@ (8002d7c <SystemInit+0xd8>)
 8002d56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002d5c:	4b07      	ldr	r3, [pc, #28]	@ (8002d7c <SystemInit+0xd8>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002d62:	4b0b      	ldr	r3, [pc, #44]	@ (8002d90 <SystemInit+0xec>)
 8002d64:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002d68:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002d6a:	bf00      	nop
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	e000ed00 	.word	0xe000ed00
 8002d78:	52002000 	.word	0x52002000
 8002d7c:	58024400 	.word	0x58024400
 8002d80:	eaf6ed7f 	.word	0xeaf6ed7f
 8002d84:	02020200 	.word	0x02020200
 8002d88:	01ff0000 	.word	0x01ff0000
 8002d8c:	01010280 	.word	0x01010280
 8002d90:	52004000 	.word	0x52004000

08002d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002d94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002dcc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d98:	f7ff ff84 	bl	8002ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d9c:	480c      	ldr	r0, [pc, #48]	@ (8002dd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d9e:	490d      	ldr	r1, [pc, #52]	@ (8002dd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002da0:	4a0d      	ldr	r2, [pc, #52]	@ (8002dd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002da4:	e002      	b.n	8002dac <LoopCopyDataInit>

08002da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002daa:	3304      	adds	r3, #4

08002dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002db0:	d3f9      	bcc.n	8002da6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002db2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ddc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002db4:	4c0a      	ldr	r4, [pc, #40]	@ (8002de0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002db8:	e001      	b.n	8002dbe <LoopFillZerobss>

08002dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dba:	6013      	str	r3, [r2, #0]
   adds r2, r2, #4
 8002dbc:	3204      	adds	r2, #4

08002dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dc0:	d3fb      	bcc.n	8002dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dc2:	f009 fa4f 	bl	800c264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dc6:	f7fe fb01 	bl	80013cc <main>
  bx  lr
 8002dca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002dcc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002dd0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002dd4:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8002dd8:	0800d008 	.word	0x0800d008
  ldr r2, =_sbss
 8002ddc:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8002de0:	24000e9c 	.word	0x24000e9c

08002de4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002de4:	e7fe      	b.n	8002de4 <ADC3_IRQHandler>
	...

08002de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dee:	2003      	movs	r0, #3
 8002df0:	f002 f8fa 	bl	8004fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002df4:	f004 faaa 	bl	800734c <HAL_RCC_GetSysClockFreq>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	4b15      	ldr	r3, [pc, #84]	@ (8002e50 <HAL_Init+0x68>)
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	0a1b      	lsrs	r3, r3, #8
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	4913      	ldr	r1, [pc, #76]	@ (8002e54 <HAL_Init+0x6c>)
 8002e06:	5ccb      	ldrb	r3, [r1, r3]
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e12:	4b0f      	ldr	r3, [pc, #60]	@ (8002e50 <HAL_Init+0x68>)
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	4a0e      	ldr	r2, [pc, #56]	@ (8002e54 <HAL_Init+0x6c>)
 8002e1c:	5cd3      	ldrb	r3, [r2, r3]
 8002e1e:	f003 031f 	and.w	r3, r3, #31
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
 8002e28:	4a0b      	ldr	r2, [pc, #44]	@ (8002e58 <HAL_Init+0x70>)
 8002e2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e2c:	4a0b      	ldr	r2, [pc, #44]	@ (8002e5c <HAL_Init+0x74>)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e32:	200f      	movs	r0, #15
 8002e34:	f000 f814 	bl	8002e60 <HAL_InitTick>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e002      	b.n	8002e48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002e42:	f7ff fc8f 	bl	8002764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	58024400 	.word	0x58024400
 8002e54:	0800cf78 	.word	0x0800cf78
 8002e58:	24000010 	.word	0x24000010
 8002e5c:	2400000c 	.word	0x2400000c

08002e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002e68:	4b15      	ldr	r3, [pc, #84]	@ (8002ec0 <HAL_InitTick+0x60>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e021      	b.n	8002eb8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002e74:	4b13      	ldr	r3, [pc, #76]	@ (8002ec4 <HAL_InitTick+0x64>)
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	4b11      	ldr	r3, [pc, #68]	@ (8002ec0 <HAL_InitTick+0x60>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f002 f8df 	bl	800504e <HAL_SYSTICK_Config>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e00e      	b.n	8002eb8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b0f      	cmp	r3, #15
 8002e9e:	d80a      	bhi.n	8002eb6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea8:	f002 f8a9 	bl	8004ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002eac:	4a06      	ldr	r2, [pc, #24]	@ (8002ec8 <HAL_InitTick+0x68>)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	e000      	b.n	8002eb8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	24000018 	.word	0x24000018
 8002ec4:	2400000c 	.word	0x2400000c
 8002ec8:	24000014 	.word	0x24000014

08002ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ed0:	4b06      	ldr	r3, [pc, #24]	@ (8002eec <HAL_IncTick+0x20>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4b06      	ldr	r3, [pc, #24]	@ (8002ef0 <HAL_IncTick+0x24>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4413      	add	r3, r2
 8002edc:	4a04      	ldr	r2, [pc, #16]	@ (8002ef0 <HAL_IncTick+0x24>)
 8002ede:	6013      	str	r3, [r2, #0]
}
 8002ee0:	bf00      	nop
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	24000018 	.word	0x24000018
 8002ef0:	24000d50 	.word	0x24000d50

08002ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ef8:	4b03      	ldr	r3, [pc, #12]	@ (8002f08 <HAL_GetTick+0x14>)
 8002efa:	681b      	ldr	r3, [r3, #0]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	24000d50 	.word	0x24000d50

08002f0c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	609a      	str	r2, [r3, #8]
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	609a      	str	r2, [r3, #8]
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a18      	ldr	r2, [pc, #96]	@ (8002fe4 <LL_ADC_SetChannelPreselection+0x70>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d027      	beq.n	8002fd6 <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d107      	bne.n	8002fa0 <LL_ADC_SetChannelPreselection+0x2c>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	0e9b      	lsrs	r3, r3, #26
 8002f94:	f003 031f 	and.w	r3, r3, #31
 8002f98:	2201      	movs	r2, #1
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	e015      	b.n	8002fcc <LL_ADC_SetChannelPreselection+0x58>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	fa93 f3a3 	rbit	r3, r3
 8002faa:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8002fb6:	2320      	movs	r3, #32
 8002fb8:	e003      	b.n	8002fc2 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	fab3 f383 	clz	r3, r3
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	f003 031f 	and.w	r3, r3, #31
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	69d2      	ldr	r2, [r2, #28]
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8002fd6:	bf00      	nop
 8002fd8:	371c      	adds	r7, #28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	58026000 	.word	0x58026000

08002fe8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	3360      	adds	r3, #96	@ 0x60
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4a10      	ldr	r2, [pc, #64]	@ (8003048 <LL_ADC_SetOffset+0x60>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d10b      	bne.n	8003024 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	4313      	orrs	r3, r2
 800301a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003022:	e00b      	b.n	800303c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	430b      	orrs	r3, r1
 8003036:	431a      	orrs	r2, r3
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	601a      	str	r2, [r3, #0]
}
 800303c:	bf00      	nop
 800303e:	371c      	adds	r7, #28
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	58026000 	.word	0x58026000

0800304c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3360      	adds	r3, #96	@ 0x60
 800305a:	461a      	mov	r2, r3
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800306c:	4618      	mov	r0, r3
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f003 031f 	and.w	r3, r3, #31
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	fa01 f303 	lsl.w	r3, r1, r3
 8003098:	431a      	orrs	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	611a      	str	r2, [r3, #16]
}
 800309e:	bf00      	nop
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
	...

080030ac <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b087      	sub	sp, #28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4a0c      	ldr	r2, [pc, #48]	@ (80030ec <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d00e      	beq.n	80030de <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	3360      	adds	r3, #96	@ 0x60
 80030c4:	461a      	mov	r2, r3
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	431a      	orrs	r2, r3
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	601a      	str	r2, [r3, #0]
  }
}
 80030de:	bf00      	nop
 80030e0:	371c      	adds	r7, #28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	58026000 	.word	0x58026000

080030f0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b087      	sub	sp, #28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4a0c      	ldr	r2, [pc, #48]	@ (8003130 <LL_ADC_SetOffsetSaturation+0x40>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d10e      	bne.n	8003122 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	3360      	adds	r3, #96	@ 0x60
 8003108:	461a      	mov	r2, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	431a      	orrs	r2, r3
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003122:	bf00      	nop
 8003124:	371c      	adds	r7, #28
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	58026000 	.word	0x58026000

08003134 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4a0c      	ldr	r2, [pc, #48]	@ (8003174 <LL_ADC_SetOffsetSign+0x40>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d10e      	bne.n	8003166 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3360      	adds	r3, #96	@ 0x60
 800314c:	461a      	mov	r2, r3
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	431a      	orrs	r2, r3
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003166:	bf00      	nop
 8003168:	371c      	adds	r7, #28
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	58026000 	.word	0x58026000

08003178 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003178:	b480      	push	{r7}
 800317a:	b087      	sub	sp, #28
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	3360      	adds	r3, #96	@ 0x60
 8003188:	461a      	mov	r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4a0c      	ldr	r2, [pc, #48]	@ (80031c8 <LL_ADC_SetOffsetState+0x50>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d108      	bne.n	80031ac <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	431a      	orrs	r2, r3
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80031aa:	e007      	b.n	80031bc <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	601a      	str	r2, [r3, #0]
}
 80031bc:	bf00      	nop
 80031be:	371c      	adds	r7, #28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	58026000 	.word	0x58026000

080031cc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b087      	sub	sp, #28
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	60f8      	str	r0, [r7, #12]
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	3330      	adds	r3, #48	@ 0x30
 8003202:	461a      	mov	r2, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	0a1b      	lsrs	r3, r3, #8
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	4413      	add	r3, r2
 8003210:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	f003 031f 	and.w	r3, r3, #31
 800321c:	211f      	movs	r1, #31
 800321e:	fa01 f303 	lsl.w	r3, r1, r3
 8003222:	43db      	mvns	r3, r3
 8003224:	401a      	ands	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	0e9b      	lsrs	r3, r3, #26
 800322a:	f003 011f 	and.w	r1, r3, #31
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f003 031f 	and.w	r3, r3, #31
 8003234:	fa01 f303 	lsl.w	r3, r1, r3
 8003238:	431a      	orrs	r2, r3
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800323e:	bf00      	nop
 8003240:	371c      	adds	r7, #28
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800324a:	b480      	push	{r7}
 800324c:	b087      	sub	sp, #28
 800324e:	af00      	add	r7, sp, #0
 8003250:	60f8      	str	r0, [r7, #12]
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	3314      	adds	r3, #20
 800325a:	461a      	mov	r2, r3
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	0e5b      	lsrs	r3, r3, #25
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	4413      	add	r3, r2
 8003268:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	0d1b      	lsrs	r3, r3, #20
 8003272:	f003 031f 	and.w	r3, r3, #31
 8003276:	2107      	movs	r1, #7
 8003278:	fa01 f303 	lsl.w	r3, r1, r3
 800327c:	43db      	mvns	r3, r3
 800327e:	401a      	ands	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	0d1b      	lsrs	r3, r3, #20
 8003284:	f003 031f 	and.w	r3, r3, #31
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	fa01 f303 	lsl.w	r3, r1, r3
 800328e:	431a      	orrs	r2, r3
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003294:	bf00      	nop
 8003296:	371c      	adds	r7, #28
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003318 <LL_ADC_SetChannelSingleDiff+0x78>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d115      	bne.n	80032e0 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032c0:	43db      	mvns	r3, r3
 80032c2:	401a      	ands	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f003 0318 	and.w	r3, r3, #24
 80032ca:	4914      	ldr	r1, [pc, #80]	@ (800331c <LL_ADC_SetChannelSingleDiff+0x7c>)
 80032cc:	40d9      	lsrs	r1, r3
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	400b      	ands	r3, r1
 80032d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032d6:	431a      	orrs	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80032de:	e014      	b.n	800330a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032ec:	43db      	mvns	r3, r3
 80032ee:	401a      	ands	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f003 0318 	and.w	r3, r3, #24
 80032f6:	4909      	ldr	r1, [pc, #36]	@ (800331c <LL_ADC_SetChannelSingleDiff+0x7c>)
 80032f8:	40d9      	lsrs	r1, r3
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	400b      	ands	r3, r1
 80032fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003302:	431a      	orrs	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800330a:	bf00      	nop
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	58026000 	.word	0x58026000
 800331c:	000fffff 	.word	0x000fffff

08003320 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 031f 	and.w	r3, r3, #31
}
 8003330:	4618      	mov	r0, r3
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	4b04      	ldr	r3, [pc, #16]	@ (8003378 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003366:	4013      	ands	r3, r2
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6093      	str	r3, [r2, #8]
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	5fffffc0 	.word	0x5fffffc0

0800337c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800338c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003390:	d101      	bne.n	8003396 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	4b05      	ldr	r3, [pc, #20]	@ (80033c8 <LL_ADC_EnableInternalRegulator+0x24>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	6fffffc0 	.word	0x6fffffc0

080033cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033e0:	d101      	bne.n	80033e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	4b05      	ldr	r3, [pc, #20]	@ (8003418 <LL_ADC_Enable+0x24>)
 8003402:	4013      	ands	r3, r2
 8003404:	f043 0201 	orr.w	r2, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	7fffffc0 	.word	0x7fffffc0

0800341c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	4b05      	ldr	r3, [pc, #20]	@ (8003440 <LL_ADC_Disable+0x24>)
 800342a:	4013      	ands	r3, r2
 800342c:	f043 0202 	orr.w	r2, r3, #2
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	7fffffc0 	.word	0x7fffffc0

08003444 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <LL_ADC_IsEnabled+0x18>
 8003458:	2301      	movs	r3, #1
 800345a:	e000      	b.n	800345e <LL_ADC_IsEnabled+0x1a>
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b02      	cmp	r3, #2
 800347c:	d101      	bne.n	8003482 <LL_ADC_IsDisableOngoing+0x18>
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <LL_ADC_IsDisableOngoing+0x1a>
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	4b05      	ldr	r3, [pc, #20]	@ (80034b4 <LL_ADC_REG_StartConversion+0x24>)
 800349e:	4013      	ands	r3, r2
 80034a0:	f043 0204 	orr.w	r2, r3, #4
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	7fffffc0 	.word	0x7fffffc0

080034b8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	4b05      	ldr	r3, [pc, #20]	@ (80034dc <LL_ADC_REG_StopConversion+0x24>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	f043 0210 	orr.w	r2, r3, #16
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	7fffffc0 	.word	0x7fffffc0

080034e0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d101      	bne.n	80034f8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034f4:	2301      	movs	r3, #1
 80034f6:	e000      	b.n	80034fa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
	...

08003508 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	4b05      	ldr	r3, [pc, #20]	@ (800352c <LL_ADC_INJ_StopConversion+0x24>)
 8003516:	4013      	ands	r3, r2
 8003518:	f043 0220 	orr.w	r2, r3, #32
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	7fffffc0 	.word	0x7fffffc0

08003530 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b08      	cmp	r3, #8
 8003542:	d101      	bne.n	8003548 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
	...

08003558 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003558:	b590      	push	{r4, r7, lr}
 800355a:	b089      	sub	sp, #36	@ 0x24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003564:	2300      	movs	r3, #0
 8003566:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e1ee      	b.n	8003950 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800357c:	2b00      	cmp	r3, #0
 800357e:	d109      	bne.n	8003594 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff f909 	bl	8002798 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff feef 	bl	800337c <LL_ADC_IsDeepPowerDownEnabled>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d004      	beq.n	80035ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff fed5 	bl	8003358 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff ff0a 	bl	80033cc <LL_ADC_IsInternalRegulatorEnabled>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d114      	bne.n	80035e8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff feee 	bl	80033a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035c8:	4b8e      	ldr	r3, [pc, #568]	@ (8003804 <HAL_ADC_Init+0x2ac>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	099b      	lsrs	r3, r3, #6
 80035ce:	4a8e      	ldr	r2, [pc, #568]	@ (8003808 <HAL_ADC_Init+0x2b0>)
 80035d0:	fba2 2303 	umull	r2, r3, r2, r3
 80035d4:	099b      	lsrs	r3, r3, #6
 80035d6:	3301      	adds	r3, #1
 80035d8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80035da:	e002      	b.n	80035e2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	3b01      	subs	r3, #1
 80035e0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1f9      	bne.n	80035dc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff feed 	bl	80033cc <LL_ADC_IsInternalRegulatorEnabled>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10d      	bne.n	8003614 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035fc:	f043 0210 	orr.w	r2, r3, #16
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003608:	f043 0201 	orr.w	r2, r3, #1
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff ff61 	bl	80034e0 <LL_ADC_REG_IsConversionOngoing>
 800361e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003624:	f003 0310 	and.w	r3, r3, #16
 8003628:	2b00      	cmp	r3, #0
 800362a:	f040 8188 	bne.w	800393e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2b00      	cmp	r3, #0
 8003632:	f040 8184 	bne.w	800393e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800363a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800363e:	f043 0202 	orr.w	r2, r3, #2
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff fefa 	bl	8003444 <LL_ADC_IsEnabled>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d136      	bne.n	80036c4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a6c      	ldr	r2, [pc, #432]	@ (800380c <HAL_ADC_Init+0x2b4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d004      	beq.n	800366a <HAL_ADC_Init+0x112>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a6a      	ldr	r2, [pc, #424]	@ (8003810 <HAL_ADC_Init+0x2b8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d10e      	bne.n	8003688 <HAL_ADC_Init+0x130>
 800366a:	4868      	ldr	r0, [pc, #416]	@ (800380c <HAL_ADC_Init+0x2b4>)
 800366c:	f7ff feea 	bl	8003444 <LL_ADC_IsEnabled>
 8003670:	4604      	mov	r4, r0
 8003672:	4867      	ldr	r0, [pc, #412]	@ (8003810 <HAL_ADC_Init+0x2b8>)
 8003674:	f7ff fee6 	bl	8003444 <LL_ADC_IsEnabled>
 8003678:	4603      	mov	r3, r0
 800367a:	4323      	orrs	r3, r4
 800367c:	2b00      	cmp	r3, #0
 800367e:	bf0c      	ite	eq
 8003680:	2301      	moveq	r3, #1
 8003682:	2300      	movne	r3, #0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	e008      	b.n	800369a <HAL_ADC_Init+0x142>
 8003688:	4862      	ldr	r0, [pc, #392]	@ (8003814 <HAL_ADC_Init+0x2bc>)
 800368a:	f7ff fedb 	bl	8003444 <LL_ADC_IsEnabled>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	bf0c      	ite	eq
 8003694:	2301      	moveq	r3, #1
 8003696:	2300      	movne	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d012      	beq.n	80036c4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a5a      	ldr	r2, [pc, #360]	@ (800380c <HAL_ADC_Init+0x2b4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d004      	beq.n	80036b2 <HAL_ADC_Init+0x15a>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a58      	ldr	r2, [pc, #352]	@ (8003810 <HAL_ADC_Init+0x2b8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d101      	bne.n	80036b6 <HAL_ADC_Init+0x15e>
 80036b2:	4a59      	ldr	r2, [pc, #356]	@ (8003818 <HAL_ADC_Init+0x2c0>)
 80036b4:	e000      	b.n	80036b8 <HAL_ADC_Init+0x160>
 80036b6:	4a59      	ldr	r2, [pc, #356]	@ (800381c <HAL_ADC_Init+0x2c4>)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	4619      	mov	r1, r3
 80036be:	4610      	mov	r0, r2
 80036c0:	f7ff fc24 	bl	8002f0c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a52      	ldr	r2, [pc, #328]	@ (8003814 <HAL_ADC_Init+0x2bc>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d129      	bne.n	8003722 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	7e5b      	ldrb	r3, [r3, #25]
 80036d2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80036d8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80036de:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d013      	beq.n	8003710 <HAL_ADC_Init+0x1b8>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2b0c      	cmp	r3, #12
 80036ee:	d00d      	beq.n	800370c <HAL_ADC_Init+0x1b4>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2b1c      	cmp	r3, #28
 80036f6:	d007      	beq.n	8003708 <HAL_ADC_Init+0x1b0>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2b18      	cmp	r3, #24
 80036fe:	d101      	bne.n	8003704 <HAL_ADC_Init+0x1ac>
 8003700:	2318      	movs	r3, #24
 8003702:	e006      	b.n	8003712 <HAL_ADC_Init+0x1ba>
 8003704:	2300      	movs	r3, #0
 8003706:	e004      	b.n	8003712 <HAL_ADC_Init+0x1ba>
 8003708:	2310      	movs	r3, #16
 800370a:	e002      	b.n	8003712 <HAL_ADC_Init+0x1ba>
 800370c:	2308      	movs	r3, #8
 800370e:	e000      	b.n	8003712 <HAL_ADC_Init+0x1ba>
 8003710:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003712:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 3020 	ldrb.w	r3, [r3, #32]
 800371a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800371c:	4313      	orrs	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
 8003720:	e00e      	b.n	8003740 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	7e5b      	ldrb	r3, [r3, #25]
 8003726:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800372c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003732:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3020 	ldrb.w	r3, [r3, #32]
 800373a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800373c:	4313      	orrs	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d106      	bne.n	8003758 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374e:	3b01      	subs	r3, #1
 8003750:	045b      	lsls	r3, r3, #17
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4313      	orrs	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375c:	2b00      	cmp	r3, #0
 800375e:	d009      	beq.n	8003774 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003764:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4313      	orrs	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a26      	ldr	r2, [pc, #152]	@ (8003814 <HAL_ADC_Init+0x2bc>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d115      	bne.n	80037aa <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	4b26      	ldr	r3, [pc, #152]	@ (8003820 <HAL_ADC_Init+0x2c8>)
 8003786:	4013      	ands	r3, r2
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6812      	ldr	r2, [r2, #0]
 800378c:	69b9      	ldr	r1, [r7, #24]
 800378e:	430b      	orrs	r3, r1
 8003790:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	611a      	str	r2, [r3, #16]
 80037a8:	e009      	b.n	80037be <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	4b1c      	ldr	r3, [pc, #112]	@ (8003824 <HAL_ADC_Init+0x2cc>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6812      	ldr	r2, [r2, #0]
 80037b8:	69b9      	ldr	r1, [r7, #24]
 80037ba:	430b      	orrs	r3, r1
 80037bc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff fe8c 	bl	80034e0 <LL_ADC_REG_IsConversionOngoing>
 80037c8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff feae 	bl	8003530 <LL_ADC_INJ_IsConversionOngoing>
 80037d4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f040 808e 	bne.w	80038fa <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f040 808a 	bne.w	80038fa <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003814 <HAL_ADC_Init+0x2bc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d11b      	bne.n	8003828 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	7e1b      	ldrb	r3, [r3, #24]
 80037f4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80037fc:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80037fe:	4313      	orrs	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
 8003802:	e018      	b.n	8003836 <HAL_ADC_Init+0x2de>
 8003804:	2400000c 	.word	0x2400000c
 8003808:	053e2d63 	.word	0x053e2d63
 800380c:	40022000 	.word	0x40022000
 8003810:	40022100 	.word	0x40022100
 8003814:	58026000 	.word	0x58026000
 8003818:	40022300 	.word	0x40022300
 800381c:	58026300 	.word	0x58026300
 8003820:	fff04007 	.word	0xfff04007
 8003824:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	7e1b      	ldrb	r3, [r3, #24]
 800382c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8003832:	4313      	orrs	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	4b46      	ldr	r3, [pc, #280]	@ (8003958 <HAL_ADC_Init+0x400>)
 800383e:	4013      	ands	r3, r2
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	69b9      	ldr	r1, [r7, #24]
 8003846:	430b      	orrs	r3, r1
 8003848:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003850:	2b01      	cmp	r3, #1
 8003852:	d137      	bne.n	80038c4 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003858:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a3f      	ldr	r2, [pc, #252]	@ (800395c <HAL_ADC_Init+0x404>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d116      	bne.n	8003892 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691a      	ldr	r2, [r3, #16]
 800386a:	4b3d      	ldr	r3, [pc, #244]	@ (8003960 <HAL_ADC_Init+0x408>)
 800386c:	4013      	ands	r3, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003876:	4311      	orrs	r1, r2
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800387c:	4311      	orrs	r1, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003882:	430a      	orrs	r2, r1
 8003884:	431a      	orrs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0201 	orr.w	r2, r2, #1
 800388e:	611a      	str	r2, [r3, #16]
 8003890:	e020      	b.n	80038d4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	691a      	ldr	r2, [r3, #16]
 8003898:	4b32      	ldr	r3, [pc, #200]	@ (8003964 <HAL_ADC_Init+0x40c>)
 800389a:	4013      	ands	r3, r2
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80038a0:	3a01      	subs	r2, #1
 80038a2:	0411      	lsls	r1, r2, #16
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80038a8:	4311      	orrs	r1, r2
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80038ae:	4311      	orrs	r1, r2
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80038b4:	430a      	orrs	r2, r1
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f042 0201 	orr.w	r2, r2, #1
 80038c0:	611a      	str	r2, [r3, #16]
 80038c2:	e007      	b.n	80038d4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	691a      	ldr	r2, [r3, #16]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0201 	bic.w	r2, r2, #1
 80038d2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a1b      	ldr	r2, [pc, #108]	@ (800395c <HAL_ADC_Init+0x404>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d002      	beq.n	80038fa <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f001 f8b1 	bl	8004a5c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d10c      	bne.n	800391c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003908:	f023 010f 	bic.w	r1, r3, #15
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	1e5a      	subs	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	631a      	str	r2, [r3, #48]	@ 0x30
 800391a:	e007      	b.n	800392c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 020f 	bic.w	r2, r2, #15
 800392a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003930:	f023 0303 	bic.w	r3, r3, #3
 8003934:	f043 0201 	orr.w	r2, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	661a      	str	r2, [r3, #96]	@ 0x60
 800393c:	e007      	b.n	800394e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003942:	f043 0210 	orr.w	r2, r3, #16
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800394e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3724      	adds	r7, #36	@ 0x24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd90      	pop	{r4, r7, pc}
 8003958:	ffffbffc 	.word	0xffffbffc
 800395c:	58026000 	.word	0x58026000
 8003960:	fc00f81f 	.word	0xfc00f81f
 8003964:	fc00f81e 	.word	0xfc00f81e

08003968 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a5c      	ldr	r2, [pc, #368]	@ (8003ae8 <HAL_ADC_Start+0x180>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d004      	beq.n	8003984 <HAL_ADC_Start+0x1c>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a5b      	ldr	r2, [pc, #364]	@ (8003aec <HAL_ADC_Start+0x184>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d101      	bne.n	8003988 <HAL_ADC_Start+0x20>
 8003984:	4b5a      	ldr	r3, [pc, #360]	@ (8003af0 <HAL_ADC_Start+0x188>)
 8003986:	e000      	b.n	800398a <HAL_ADC_Start+0x22>
 8003988:	4b5a      	ldr	r3, [pc, #360]	@ (8003af4 <HAL_ADC_Start+0x18c>)
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff fcc8 	bl	8003320 <LL_ADC_GetMultimode>
 8003990:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff fda2 	bl	80034e0 <LL_ADC_REG_IsConversionOngoing>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f040 809a 	bne.w	8003ad8 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d101      	bne.n	80039b2 <HAL_ADC_Start+0x4a>
 80039ae:	2302      	movs	r3, #2
 80039b0:	e095      	b.n	8003ade <HAL_ADC_Start+0x176>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 ff64 	bl	8004888 <ADC_Enable>
 80039c0:	4603      	mov	r3, r0
 80039c2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80039c4:	7dfb      	ldrb	r3, [r7, #23]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f040 8081 	bne.w	8003ace <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80039d0:	4b49      	ldr	r3, [pc, #292]	@ (8003af8 <HAL_ADC_Start+0x190>)
 80039d2:	4013      	ands	r3, r2
 80039d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a42      	ldr	r2, [pc, #264]	@ (8003aec <HAL_ADC_Start+0x184>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d002      	beq.n	80039ec <HAL_ADC_Start+0x84>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	e000      	b.n	80039ee <HAL_ADC_Start+0x86>
 80039ec:	4b3e      	ldr	r3, [pc, #248]	@ (8003ae8 <HAL_ADC_Start+0x180>)
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6812      	ldr	r2, [r2, #0]
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d002      	beq.n	80039fc <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d105      	bne.n	8003a08 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a00:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a14:	d106      	bne.n	8003a24 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a1a:	f023 0206 	bic.w	r2, r3, #6
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	665a      	str	r2, [r3, #100]	@ 0x64
 8003a22:	e002      	b.n	8003a2a <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	221c      	movs	r2, #28
 8003a30:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a2b      	ldr	r2, [pc, #172]	@ (8003aec <HAL_ADC_Start+0x184>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d002      	beq.n	8003a4a <HAL_ADC_Start+0xe2>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	e000      	b.n	8003a4c <HAL_ADC_Start+0xe4>
 8003a4a:	4b27      	ldr	r3, [pc, #156]	@ (8003ae8 <HAL_ADC_Start+0x180>)
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6812      	ldr	r2, [r2, #0]
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d008      	beq.n	8003a66 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d005      	beq.n	8003a66 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2b05      	cmp	r3, #5
 8003a5e:	d002      	beq.n	8003a66 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	2b09      	cmp	r3, #9
 8003a64:	d114      	bne.n	8003a90 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d007      	beq.n	8003a84 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a78:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003a7c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff fd01 	bl	8003490 <LL_ADC_REG_StartConversion>
 8003a8e:	e025      	b.n	8003adc <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a94:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a12      	ldr	r2, [pc, #72]	@ (8003aec <HAL_ADC_Start+0x184>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d002      	beq.n	8003aac <HAL_ADC_Start+0x144>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	e000      	b.n	8003aae <HAL_ADC_Start+0x146>
 8003aac:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae8 <HAL_ADC_Start+0x180>)
 8003aae:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00f      	beq.n	8003adc <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ac0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003ac4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	661a      	str	r2, [r3, #96]	@ 0x60
 8003acc:	e006      	b.n	8003adc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003ad6:	e001      	b.n	8003adc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003ad8:	2302      	movs	r3, #2
 8003ada:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40022000 	.word	0x40022000
 8003aec:	40022100 	.word	0x40022100
 8003af0:	40022300 	.word	0x40022300
 8003af4:	58026300 	.word	0x58026300
 8003af8:	fffff0fe 	.word	0xfffff0fe

08003afc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_ADC_Stop+0x16>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e021      	b.n	8003b56 <HAL_ADC_Stop+0x5a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003b1a:	2103      	movs	r1, #3
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 fdf7 	bl	8004710 <ADC_ConversionStop>
 8003b22:	4603      	mov	r3, r0
 8003b24:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10f      	bne.n	8003b4c <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 ff35 	bl	800499c <ADC_Disable>
 8003b32:	4603      	mov	r3, r0
 8003b34:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003b36:	7bfb      	ldrb	r3, [r7, #15]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d107      	bne.n	8003b4c <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003b40:	4b07      	ldr	r3, [pc, #28]	@ (8003b60 <HAL_ADC_Stop+0x64>)
 8003b42:	4013      	ands	r3, r2
 8003b44:	f043 0201 	orr.w	r2, r3, #1
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	ffffeefe 	.word	0xffffeefe

08003b64 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b088      	sub	sp, #32
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a72      	ldr	r2, [pc, #456]	@ (8003d3c <HAL_ADC_PollForConversion+0x1d8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d004      	beq.n	8003b82 <HAL_ADC_PollForConversion+0x1e>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a70      	ldr	r2, [pc, #448]	@ (8003d40 <HAL_ADC_PollForConversion+0x1dc>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d101      	bne.n	8003b86 <HAL_ADC_PollForConversion+0x22>
 8003b82:	4b70      	ldr	r3, [pc, #448]	@ (8003d44 <HAL_ADC_PollForConversion+0x1e0>)
 8003b84:	e000      	b.n	8003b88 <HAL_ADC_PollForConversion+0x24>
 8003b86:	4b70      	ldr	r3, [pc, #448]	@ (8003d48 <HAL_ADC_PollForConversion+0x1e4>)
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff fbc9 	bl	8003320 <LL_ADC_GetMultimode>
 8003b8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d102      	bne.n	8003b9e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003b98:	2308      	movs	r3, #8
 8003b9a:	61fb      	str	r3, [r7, #28]
 8003b9c:	e037      	b.n	8003c0e <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	2b05      	cmp	r3, #5
 8003ba8:	d002      	beq.n	8003bb0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2b09      	cmp	r3, #9
 8003bae:	d111      	bne.n	8003bd4 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d007      	beq.n	8003bce <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bc2:	f043 0220 	orr.w	r2, r3, #32
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e0b1      	b.n	8003d32 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003bce:	2304      	movs	r3, #4
 8003bd0:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003bd2:	e01c      	b.n	8003c0e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a58      	ldr	r2, [pc, #352]	@ (8003d3c <HAL_ADC_PollForConversion+0x1d8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d004      	beq.n	8003be8 <HAL_ADC_PollForConversion+0x84>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a57      	ldr	r2, [pc, #348]	@ (8003d40 <HAL_ADC_PollForConversion+0x1dc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d101      	bne.n	8003bec <HAL_ADC_PollForConversion+0x88>
 8003be8:	4b56      	ldr	r3, [pc, #344]	@ (8003d44 <HAL_ADC_PollForConversion+0x1e0>)
 8003bea:	e000      	b.n	8003bee <HAL_ADC_PollForConversion+0x8a>
 8003bec:	4b56      	ldr	r3, [pc, #344]	@ (8003d48 <HAL_ADC_PollForConversion+0x1e4>)
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff fba4 	bl	800333c <LL_ADC_GetMultiDMATransfer>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d007      	beq.n	8003c0a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bfe:	f043 0220 	orr.w	r2, r3, #32
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e093      	b.n	8003d32 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003c0a:	2304      	movs	r3, #4
 8003c0c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003c0e:	f7ff f971 	bl	8002ef4 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003c14:	e021      	b.n	8003c5a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1c:	d01d      	beq.n	8003c5a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003c1e:	f7ff f969 	bl	8002ef4 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d302      	bcc.n	8003c34 <HAL_ADC_PollForConversion+0xd0>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d112      	bne.n	8003c5a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10b      	bne.n	8003c5a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c46:	f043 0204 	orr.w	r2, r3, #4
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e06b      	b.n	8003d32 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0d6      	beq.n	8003c16 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c6c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff faa7 	bl	80031cc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d01c      	beq.n	8003cbe <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	7e5b      	ldrb	r3, [r3, #25]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d118      	bne.n	8003cbe <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d111      	bne.n	8003cbe <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c9e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003caa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d105      	bne.n	8003cbe <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb6:	f043 0201 	orr.w	r2, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a1f      	ldr	r2, [pc, #124]	@ (8003d40 <HAL_ADC_PollForConversion+0x1dc>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d002      	beq.n	8003cce <HAL_ADC_PollForConversion+0x16a>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	e000      	b.n	8003cd0 <HAL_ADC_PollForConversion+0x16c>
 8003cce:	4b1b      	ldr	r3, [pc, #108]	@ (8003d3c <HAL_ADC_PollForConversion+0x1d8>)
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6812      	ldr	r2, [r2, #0]
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d008      	beq.n	8003cea <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d005      	beq.n	8003cea <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2b05      	cmp	r3, #5
 8003ce2:	d002      	beq.n	8003cea <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2b09      	cmp	r3, #9
 8003ce8:	d104      	bne.n	8003cf4 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	61bb      	str	r3, [r7, #24]
 8003cf2:	e00c      	b.n	8003d0e <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a11      	ldr	r2, [pc, #68]	@ (8003d40 <HAL_ADC_PollForConversion+0x1dc>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d002      	beq.n	8003d04 <HAL_ADC_PollForConversion+0x1a0>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	e000      	b.n	8003d06 <HAL_ADC_PollForConversion+0x1a2>
 8003d04:	4b0d      	ldr	r3, [pc, #52]	@ (8003d3c <HAL_ADC_PollForConversion+0x1d8>)
 8003d06:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d104      	bne.n	8003d1e <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2208      	movs	r2, #8
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	e008      	b.n	8003d30 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d103      	bne.n	8003d30 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	220c      	movs	r2, #12
 8003d2e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3720      	adds	r7, #32
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40022000 	.word	0x40022000
 8003d40:	40022100 	.word	0x40022100
 8003d44:	40022300 	.word	0x40022300
 8003d48:	58026300 	.word	0x58026300

08003d4c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
	...

08003d68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d68:	b590      	push	{r4, r7, lr}
 8003d6a:	b0a5      	sub	sp, #148	@ 0x94
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d82:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	4aa4      	ldr	r2, [pc, #656]	@ (800401c <HAL_ADC_ConfigChannel+0x2b4>)
 8003d8a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d102      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x34>
 8003d96:	2302      	movs	r3, #2
 8003d98:	f000 bca2 	b.w	80046e0 <HAL_ADC_ConfigChannel+0x978>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff fb99 	bl	80034e0 <LL_ADC_REG_IsConversionOngoing>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f040 8486 	bne.w	80046c2 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	db31      	blt.n	8003e22 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a97      	ldr	r2, [pc, #604]	@ (8004020 <HAL_ADC_ConfigChannel+0x2b8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d02c      	beq.n	8003e22 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d108      	bne.n	8003de6 <HAL_ADC_ConfigChannel+0x7e>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	0e9b      	lsrs	r3, r3, #26
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	2201      	movs	r2, #1
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	e016      	b.n	8003e14 <HAL_ADC_ConfigChannel+0xac>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dee:	fa93 f3a3 	rbit	r3, r3
 8003df2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003df4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003df6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003df8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 8003dfe:	2320      	movs	r3, #32
 8003e00:	e003      	b.n	8003e0a <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8003e02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e04:	fab3 f383 	clz	r3, r3
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	f003 031f 	and.w	r3, r3, #31
 8003e0e:	2201      	movs	r2, #1
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6812      	ldr	r2, [r2, #0]
 8003e18:	69d1      	ldr	r1, [r2, #28]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6812      	ldr	r2, [r2, #0]
 8003e1e:	430b      	orrs	r3, r1
 8003e20:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	6859      	ldr	r1, [r3, #4]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	f7ff f9df 	bl	80031f2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff fb51 	bl	80034e0 <LL_ADC_REG_IsConversionOngoing>
 8003e3e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff fb72 	bl	8003530 <LL_ADC_INJ_IsConversionOngoing>
 8003e4c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f040 824a 	bne.w	80042ee <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f040 8245 	bne.w	80042ee <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6818      	ldr	r0, [r3, #0]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	6819      	ldr	r1, [r3, #0]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	461a      	mov	r2, r3
 8003e72:	f7ff f9ea 	bl	800324a <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a69      	ldr	r2, [pc, #420]	@ (8004020 <HAL_ADC_ConfigChannel+0x2b8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d10d      	bne.n	8003e9c <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	695a      	ldr	r2, [r3, #20]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	08db      	lsrs	r3, r3, #3
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e9a:	e032      	b.n	8003f02 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003e9c:	4b61      	ldr	r3, [pc, #388]	@ (8004024 <HAL_ADC_ConfigChannel+0x2bc>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003ea4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ea8:	d10b      	bne.n	8003ec2 <HAL_ADC_ConfigChannel+0x15a>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	695a      	ldr	r2, [r3, #20]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	089b      	lsrs	r3, r3, #2
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	e01d      	b.n	8003efe <HAL_ADC_ConfigChannel+0x196>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f003 0310 	and.w	r3, r3, #16
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10b      	bne.n	8003ee8 <HAL_ADC_ConfigChannel+0x180>
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	695a      	ldr	r2, [r3, #20]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	089b      	lsrs	r3, r3, #2
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	e00a      	b.n	8003efe <HAL_ADC_ConfigChannel+0x196>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	695a      	ldr	r2, [r3, #20]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	089b      	lsrs	r3, r3, #2
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d048      	beq.n	8003f9c <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	6919      	ldr	r1, [r3, #16]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f1a:	f7ff f865 	bl	8002fe8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a3f      	ldr	r2, [pc, #252]	@ (8004020 <HAL_ADC_ConfigChannel+0x2b8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d119      	bne.n	8003f5c <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6818      	ldr	r0, [r3, #0]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	6919      	ldr	r1, [r3, #16]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	461a      	mov	r2, r3
 8003f36:	f7ff f8fd 	bl	8003134 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	6919      	ldr	r1, [r3, #16]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d102      	bne.n	8003f52 <HAL_ADC_ConfigChannel+0x1ea>
 8003f4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f50:	e000      	b.n	8003f54 <HAL_ADC_ConfigChannel+0x1ec>
 8003f52:	2300      	movs	r3, #0
 8003f54:	461a      	mov	r2, r3
 8003f56:	f7ff f8cb 	bl	80030f0 <LL_ADC_SetOffsetSaturation>
 8003f5a:	e1c8      	b.n	80042ee <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6818      	ldr	r0, [r3, #0]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	6919      	ldr	r1, [r3, #16]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d102      	bne.n	8003f74 <HAL_ADC_ConfigChannel+0x20c>
 8003f6e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003f72:	e000      	b.n	8003f76 <HAL_ADC_ConfigChannel+0x20e>
 8003f74:	2300      	movs	r3, #0
 8003f76:	461a      	mov	r2, r3
 8003f78:	f7ff f898 	bl	80030ac <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6818      	ldr	r0, [r3, #0]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	6919      	ldr	r1, [r3, #16]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	7e1b      	ldrb	r3, [r3, #24]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d102      	bne.n	8003f92 <HAL_ADC_ConfigChannel+0x22a>
 8003f8c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003f90:	e000      	b.n	8003f94 <HAL_ADC_ConfigChannel+0x22c>
 8003f92:	2300      	movs	r3, #0
 8003f94:	461a      	mov	r2, r3
 8003f96:	f7ff f86f 	bl	8003078 <LL_ADC_SetDataRightShift>
 8003f9a:	e1a8      	b.n	80042ee <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a1f      	ldr	r2, [pc, #124]	@ (8004020 <HAL_ADC_ConfigChannel+0x2b8>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	f040 815b 	bne.w	800425e <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2100      	movs	r1, #0
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff f84c 	bl	800304c <LL_ADC_GetOffsetChannel>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10a      	bne.n	8003fd4 <HAL_ADC_ConfigChannel+0x26c>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff f841 	bl	800304c <LL_ADC_GetOffsetChannel>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	0e9b      	lsrs	r3, r3, #26
 8003fce:	f003 021f 	and.w	r2, r3, #31
 8003fd2:	e017      	b.n	8004004 <HAL_ADC_ConfigChannel+0x29c>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2100      	movs	r1, #0
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff f836 	bl	800304c <LL_ADC_GetOffsetChannel>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fe6:	fa93 f3a3 	rbit	r3, r3
 8003fea:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003fec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003ff0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003ff6:	2320      	movs	r3, #32
 8003ff8:	e003      	b.n	8004002 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8003ffa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ffc:	fab3 f383 	clz	r3, r3
 8004000:	b2db      	uxtb	r3, r3
 8004002:	461a      	mov	r2, r3
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10b      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x2c0>
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	0e9b      	lsrs	r3, r3, #26
 8004016:	f003 031f 	and.w	r3, r3, #31
 800401a:	e017      	b.n	800404c <HAL_ADC_ConfigChannel+0x2e4>
 800401c:	47ff0000 	.word	0x47ff0000
 8004020:	58026000 	.word	0x58026000
 8004024:	5c001000 	.word	0x5c001000
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004030:	fa93 f3a3 	rbit	r3, r3
 8004034:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004036:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004038:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800403a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8004040:	2320      	movs	r3, #32
 8004042:	e003      	b.n	800404c <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8004044:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004046:	fab3 f383 	clz	r3, r3
 800404a:	b2db      	uxtb	r3, r3
 800404c:	429a      	cmp	r2, r3
 800404e:	d106      	bne.n	800405e <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2200      	movs	r2, #0
 8004056:	2100      	movs	r1, #0
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff f88d 	bl	8003178 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2101      	movs	r1, #1
 8004064:	4618      	mov	r0, r3
 8004066:	f7fe fff1 	bl	800304c <LL_ADC_GetOffsetChannel>
 800406a:	4603      	mov	r3, r0
 800406c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10a      	bne.n	800408a <HAL_ADC_ConfigChannel+0x322>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2101      	movs	r1, #1
 800407a:	4618      	mov	r0, r3
 800407c:	f7fe ffe6 	bl	800304c <LL_ADC_GetOffsetChannel>
 8004080:	4603      	mov	r3, r0
 8004082:	0e9b      	lsrs	r3, r3, #26
 8004084:	f003 021f 	and.w	r2, r3, #31
 8004088:	e017      	b.n	80040ba <HAL_ADC_ConfigChannel+0x352>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2101      	movs	r1, #1
 8004090:	4618      	mov	r0, r3
 8004092:	f7fe ffdb 	bl	800304c <LL_ADC_GetOffsetChannel>
 8004096:	4603      	mov	r3, r0
 8004098:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800409c:	fa93 f3a3 	rbit	r3, r3
 80040a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80040a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040a4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80040a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 80040ac:	2320      	movs	r3, #32
 80040ae:	e003      	b.n	80040b8 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 80040b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040b2:	fab3 f383 	clz	r3, r3
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	461a      	mov	r2, r3
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d105      	bne.n	80040d2 <HAL_ADC_ConfigChannel+0x36a>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	0e9b      	lsrs	r3, r3, #26
 80040cc:	f003 031f 	and.w	r3, r3, #31
 80040d0:	e011      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x38e>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040da:	fa93 f3a3 	rbit	r3, r3
 80040de:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80040e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80040e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80040ea:	2320      	movs	r3, #32
 80040ec:	e003      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80040ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040f0:	fab3 f383 	clz	r3, r3
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d106      	bne.n	8004108 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2200      	movs	r2, #0
 8004100:	2101      	movs	r1, #1
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff f838 	bl	8003178 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2102      	movs	r1, #2
 800410e:	4618      	mov	r0, r3
 8004110:	f7fe ff9c 	bl	800304c <LL_ADC_GetOffsetChannel>
 8004114:	4603      	mov	r3, r0
 8004116:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10a      	bne.n	8004134 <HAL_ADC_ConfigChannel+0x3cc>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2102      	movs	r1, #2
 8004124:	4618      	mov	r0, r3
 8004126:	f7fe ff91 	bl	800304c <LL_ADC_GetOffsetChannel>
 800412a:	4603      	mov	r3, r0
 800412c:	0e9b      	lsrs	r3, r3, #26
 800412e:	f003 021f 	and.w	r2, r3, #31
 8004132:	e017      	b.n	8004164 <HAL_ADC_ConfigChannel+0x3fc>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2102      	movs	r1, #2
 800413a:	4618      	mov	r0, r3
 800413c:	f7fe ff86 	bl	800304c <LL_ADC_GetOffsetChannel>
 8004140:	4603      	mov	r3, r0
 8004142:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004146:	fa93 f3a3 	rbit	r3, r3
 800414a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800414c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800414e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8004156:	2320      	movs	r3, #32
 8004158:	e003      	b.n	8004162 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800415a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800415c:	fab3 f383 	clz	r3, r3
 8004160:	b2db      	uxtb	r3, r3
 8004162:	461a      	mov	r2, r3
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800416c:	2b00      	cmp	r3, #0
 800416e:	d105      	bne.n	800417c <HAL_ADC_ConfigChannel+0x414>
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	0e9b      	lsrs	r3, r3, #26
 8004176:	f003 031f 	and.w	r3, r3, #31
 800417a:	e011      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x438>
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004184:	fa93 f3a3 	rbit	r3, r3
 8004188:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800418a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800418c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800418e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8004194:	2320      	movs	r3, #32
 8004196:	e003      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8004198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419a:	fab3 f383 	clz	r3, r3
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d106      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2200      	movs	r2, #0
 80041aa:	2102      	movs	r1, #2
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fe ffe3 	bl	8003178 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2103      	movs	r1, #3
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fe ff47 	bl	800304c <LL_ADC_GetOffsetChannel>
 80041be:	4603      	mov	r3, r0
 80041c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10a      	bne.n	80041de <HAL_ADC_ConfigChannel+0x476>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2103      	movs	r1, #3
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fe ff3c 	bl	800304c <LL_ADC_GetOffsetChannel>
 80041d4:	4603      	mov	r3, r0
 80041d6:	0e9b      	lsrs	r3, r3, #26
 80041d8:	f003 021f 	and.w	r2, r3, #31
 80041dc:	e017      	b.n	800420e <HAL_ADC_ConfigChannel+0x4a6>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2103      	movs	r1, #3
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fe ff31 	bl	800304c <LL_ADC_GetOffsetChannel>
 80041ea:	4603      	mov	r3, r0
 80041ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ee:	6a3b      	ldr	r3, [r7, #32]
 80041f0:	fa93 f3a3 	rbit	r3, r3
 80041f4:	61fb      	str	r3, [r7, #28]
  return result;
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80041fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004200:	2320      	movs	r3, #32
 8004202:	e003      	b.n	800420c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004206:	fab3 f383 	clz	r3, r3
 800420a:	b2db      	uxtb	r3, r3
 800420c:	461a      	mov	r2, r3
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004216:	2b00      	cmp	r3, #0
 8004218:	d105      	bne.n	8004226 <HAL_ADC_ConfigChannel+0x4be>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	0e9b      	lsrs	r3, r3, #26
 8004220:	f003 031f 	and.w	r3, r3, #31
 8004224:	e011      	b.n	800424a <HAL_ADC_ConfigChannel+0x4e2>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	fa93 f3a3 	rbit	r3, r3
 8004232:	613b      	str	r3, [r7, #16]
  return result;
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 800423e:	2320      	movs	r3, #32
 8004240:	e003      	b.n	800424a <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	fab3 f383 	clz	r3, r3
 8004248:	b2db      	uxtb	r3, r3
 800424a:	429a      	cmp	r2, r3
 800424c:	d14f      	bne.n	80042ee <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2200      	movs	r2, #0
 8004254:	2103      	movs	r1, #3
 8004256:	4618      	mov	r0, r3
 8004258:	f7fe ff8e 	bl	8003178 <LL_ADC_SetOffsetState>
 800425c:	e047      	b.n	80042ee <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004264:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	069b      	lsls	r3, r3, #26
 800426e:	429a      	cmp	r2, r3
 8004270:	d107      	bne.n	8004282 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004280:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004288:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	069b      	lsls	r3, r3, #26
 8004292:	429a      	cmp	r2, r3
 8004294:	d107      	bne.n	80042a6 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80042a4:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	069b      	lsls	r3, r3, #26
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d107      	bne.n	80042ca <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80042c8:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	069b      	lsls	r3, r3, #26
 80042da:	429a      	cmp	r2, r3
 80042dc:	d107      	bne.n	80042ee <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80042ec:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff f8a6 	bl	8003444 <LL_ADC_IsEnabled>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f040 81ea 	bne.w	80046d4 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6818      	ldr	r0, [r3, #0]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	6819      	ldr	r1, [r3, #0]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	461a      	mov	r2, r3
 800430e:	f7fe ffc7 	bl	80032a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	4a7a      	ldr	r2, [pc, #488]	@ (8004500 <HAL_ADC_ConfigChannel+0x798>)
 8004318:	4293      	cmp	r3, r2
 800431a:	f040 80e0 	bne.w	80044de <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4977      	ldr	r1, [pc, #476]	@ (8004504 <HAL_ADC_ConfigChannel+0x79c>)
 8004328:	428b      	cmp	r3, r1
 800432a:	d147      	bne.n	80043bc <HAL_ADC_ConfigChannel+0x654>
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4975      	ldr	r1, [pc, #468]	@ (8004508 <HAL_ADC_ConfigChannel+0x7a0>)
 8004332:	428b      	cmp	r3, r1
 8004334:	d040      	beq.n	80043b8 <HAL_ADC_ConfigChannel+0x650>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4974      	ldr	r1, [pc, #464]	@ (800450c <HAL_ADC_ConfigChannel+0x7a4>)
 800433c:	428b      	cmp	r3, r1
 800433e:	d039      	beq.n	80043b4 <HAL_ADC_ConfigChannel+0x64c>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4972      	ldr	r1, [pc, #456]	@ (8004510 <HAL_ADC_ConfigChannel+0x7a8>)
 8004346:	428b      	cmp	r3, r1
 8004348:	d032      	beq.n	80043b0 <HAL_ADC_ConfigChannel+0x648>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4971      	ldr	r1, [pc, #452]	@ (8004514 <HAL_ADC_ConfigChannel+0x7ac>)
 8004350:	428b      	cmp	r3, r1
 8004352:	d02b      	beq.n	80043ac <HAL_ADC_ConfigChannel+0x644>
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	496f      	ldr	r1, [pc, #444]	@ (8004518 <HAL_ADC_ConfigChannel+0x7b0>)
 800435a:	428b      	cmp	r3, r1
 800435c:	d024      	beq.n	80043a8 <HAL_ADC_ConfigChannel+0x640>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	496e      	ldr	r1, [pc, #440]	@ (800451c <HAL_ADC_ConfigChannel+0x7b4>)
 8004364:	428b      	cmp	r3, r1
 8004366:	d01d      	beq.n	80043a4 <HAL_ADC_ConfigChannel+0x63c>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	496c      	ldr	r1, [pc, #432]	@ (8004520 <HAL_ADC_ConfigChannel+0x7b8>)
 800436e:	428b      	cmp	r3, r1
 8004370:	d016      	beq.n	80043a0 <HAL_ADC_ConfigChannel+0x638>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	496b      	ldr	r1, [pc, #428]	@ (8004524 <HAL_ADC_ConfigChannel+0x7bc>)
 8004378:	428b      	cmp	r3, r1
 800437a:	d00f      	beq.n	800439c <HAL_ADC_ConfigChannel+0x634>
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4969      	ldr	r1, [pc, #420]	@ (8004528 <HAL_ADC_ConfigChannel+0x7c0>)
 8004382:	428b      	cmp	r3, r1
 8004384:	d008      	beq.n	8004398 <HAL_ADC_ConfigChannel+0x630>
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4968      	ldr	r1, [pc, #416]	@ (800452c <HAL_ADC_ConfigChannel+0x7c4>)
 800438c:	428b      	cmp	r3, r1
 800438e:	d101      	bne.n	8004394 <HAL_ADC_ConfigChannel+0x62c>
 8004390:	4b67      	ldr	r3, [pc, #412]	@ (8004530 <HAL_ADC_ConfigChannel+0x7c8>)
 8004392:	e0a0      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 8004394:	2300      	movs	r3, #0
 8004396:	e09e      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 8004398:	4b66      	ldr	r3, [pc, #408]	@ (8004534 <HAL_ADC_ConfigChannel+0x7cc>)
 800439a:	e09c      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 800439c:	4b66      	ldr	r3, [pc, #408]	@ (8004538 <HAL_ADC_ConfigChannel+0x7d0>)
 800439e:	e09a      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 80043a0:	4b60      	ldr	r3, [pc, #384]	@ (8004524 <HAL_ADC_ConfigChannel+0x7bc>)
 80043a2:	e098      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 80043a4:	4b5e      	ldr	r3, [pc, #376]	@ (8004520 <HAL_ADC_ConfigChannel+0x7b8>)
 80043a6:	e096      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 80043a8:	4b64      	ldr	r3, [pc, #400]	@ (800453c <HAL_ADC_ConfigChannel+0x7d4>)
 80043aa:	e094      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 80043ac:	4b64      	ldr	r3, [pc, #400]	@ (8004540 <HAL_ADC_ConfigChannel+0x7d8>)
 80043ae:	e092      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 80043b0:	4b64      	ldr	r3, [pc, #400]	@ (8004544 <HAL_ADC_ConfigChannel+0x7dc>)
 80043b2:	e090      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 80043b4:	4b64      	ldr	r3, [pc, #400]	@ (8004548 <HAL_ADC_ConfigChannel+0x7e0>)
 80043b6:	e08e      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 80043b8:	2301      	movs	r3, #1
 80043ba:	e08c      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4962      	ldr	r1, [pc, #392]	@ (800454c <HAL_ADC_ConfigChannel+0x7e4>)
 80043c2:	428b      	cmp	r3, r1
 80043c4:	d140      	bne.n	8004448 <HAL_ADC_ConfigChannel+0x6e0>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	494f      	ldr	r1, [pc, #316]	@ (8004508 <HAL_ADC_ConfigChannel+0x7a0>)
 80043cc:	428b      	cmp	r3, r1
 80043ce:	d039      	beq.n	8004444 <HAL_ADC_ConfigChannel+0x6dc>
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	494d      	ldr	r1, [pc, #308]	@ (800450c <HAL_ADC_ConfigChannel+0x7a4>)
 80043d6:	428b      	cmp	r3, r1
 80043d8:	d032      	beq.n	8004440 <HAL_ADC_ConfigChannel+0x6d8>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	494c      	ldr	r1, [pc, #304]	@ (8004510 <HAL_ADC_ConfigChannel+0x7a8>)
 80043e0:	428b      	cmp	r3, r1
 80043e2:	d02b      	beq.n	800443c <HAL_ADC_ConfigChannel+0x6d4>
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	494a      	ldr	r1, [pc, #296]	@ (8004514 <HAL_ADC_ConfigChannel+0x7ac>)
 80043ea:	428b      	cmp	r3, r1
 80043ec:	d024      	beq.n	8004438 <HAL_ADC_ConfigChannel+0x6d0>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4949      	ldr	r1, [pc, #292]	@ (8004518 <HAL_ADC_ConfigChannel+0x7b0>)
 80043f4:	428b      	cmp	r3, r1
 80043f6:	d01d      	beq.n	8004434 <HAL_ADC_ConfigChannel+0x6cc>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4947      	ldr	r1, [pc, #284]	@ (800451c <HAL_ADC_ConfigChannel+0x7b4>)
 80043fe:	428b      	cmp	r3, r1
 8004400:	d016      	beq.n	8004430 <HAL_ADC_ConfigChannel+0x6c8>
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4946      	ldr	r1, [pc, #280]	@ (8004520 <HAL_ADC_ConfigChannel+0x7b8>)
 8004408:	428b      	cmp	r3, r1
 800440a:	d00f      	beq.n	800442c <HAL_ADC_ConfigChannel+0x6c4>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4944      	ldr	r1, [pc, #272]	@ (8004524 <HAL_ADC_ConfigChannel+0x7bc>)
 8004412:	428b      	cmp	r3, r1
 8004414:	d008      	beq.n	8004428 <HAL_ADC_ConfigChannel+0x6c0>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4944      	ldr	r1, [pc, #272]	@ (800452c <HAL_ADC_ConfigChannel+0x7c4>)
 800441c:	428b      	cmp	r3, r1
 800441e:	d101      	bne.n	8004424 <HAL_ADC_ConfigChannel+0x6bc>
 8004420:	4b43      	ldr	r3, [pc, #268]	@ (8004530 <HAL_ADC_ConfigChannel+0x7c8>)
 8004422:	e058      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 8004424:	2300      	movs	r3, #0
 8004426:	e056      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 8004428:	4b43      	ldr	r3, [pc, #268]	@ (8004538 <HAL_ADC_ConfigChannel+0x7d0>)
 800442a:	e054      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 800442c:	4b3d      	ldr	r3, [pc, #244]	@ (8004524 <HAL_ADC_ConfigChannel+0x7bc>)
 800442e:	e052      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 8004430:	4b3b      	ldr	r3, [pc, #236]	@ (8004520 <HAL_ADC_ConfigChannel+0x7b8>)
 8004432:	e050      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 8004434:	4b41      	ldr	r3, [pc, #260]	@ (800453c <HAL_ADC_ConfigChannel+0x7d4>)
 8004436:	e04e      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 8004438:	4b41      	ldr	r3, [pc, #260]	@ (8004540 <HAL_ADC_ConfigChannel+0x7d8>)
 800443a:	e04c      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 800443c:	4b41      	ldr	r3, [pc, #260]	@ (8004544 <HAL_ADC_ConfigChannel+0x7dc>)
 800443e:	e04a      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 8004440:	4b41      	ldr	r3, [pc, #260]	@ (8004548 <HAL_ADC_ConfigChannel+0x7e0>)
 8004442:	e048      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 8004444:	2301      	movs	r3, #1
 8004446:	e046      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4940      	ldr	r1, [pc, #256]	@ (8004550 <HAL_ADC_ConfigChannel+0x7e8>)
 800444e:	428b      	cmp	r3, r1
 8004450:	d140      	bne.n	80044d4 <HAL_ADC_ConfigChannel+0x76c>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	492c      	ldr	r1, [pc, #176]	@ (8004508 <HAL_ADC_ConfigChannel+0x7a0>)
 8004458:	428b      	cmp	r3, r1
 800445a:	d039      	beq.n	80044d0 <HAL_ADC_ConfigChannel+0x768>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	492a      	ldr	r1, [pc, #168]	@ (800450c <HAL_ADC_ConfigChannel+0x7a4>)
 8004462:	428b      	cmp	r3, r1
 8004464:	d032      	beq.n	80044cc <HAL_ADC_ConfigChannel+0x764>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4929      	ldr	r1, [pc, #164]	@ (8004510 <HAL_ADC_ConfigChannel+0x7a8>)
 800446c:	428b      	cmp	r3, r1
 800446e:	d02b      	beq.n	80044c8 <HAL_ADC_ConfigChannel+0x760>
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4927      	ldr	r1, [pc, #156]	@ (8004514 <HAL_ADC_ConfigChannel+0x7ac>)
 8004476:	428b      	cmp	r3, r1
 8004478:	d024      	beq.n	80044c4 <HAL_ADC_ConfigChannel+0x75c>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4926      	ldr	r1, [pc, #152]	@ (8004518 <HAL_ADC_ConfigChannel+0x7b0>)
 8004480:	428b      	cmp	r3, r1
 8004482:	d01d      	beq.n	80044c0 <HAL_ADC_ConfigChannel+0x758>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4924      	ldr	r1, [pc, #144]	@ (800451c <HAL_ADC_ConfigChannel+0x7b4>)
 800448a:	428b      	cmp	r3, r1
 800448c:	d016      	beq.n	80044bc <HAL_ADC_ConfigChannel+0x754>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4923      	ldr	r1, [pc, #140]	@ (8004520 <HAL_ADC_ConfigChannel+0x7b8>)
 8004494:	428b      	cmp	r3, r1
 8004496:	d00f      	beq.n	80044b8 <HAL_ADC_ConfigChannel+0x750>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4926      	ldr	r1, [pc, #152]	@ (8004538 <HAL_ADC_ConfigChannel+0x7d0>)
 800449e:	428b      	cmp	r3, r1
 80044a0:	d008      	beq.n	80044b4 <HAL_ADC_ConfigChannel+0x74c>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	492b      	ldr	r1, [pc, #172]	@ (8004554 <HAL_ADC_ConfigChannel+0x7ec>)
 80044a8:	428b      	cmp	r3, r1
 80044aa:	d101      	bne.n	80044b0 <HAL_ADC_ConfigChannel+0x748>
 80044ac:	4b2a      	ldr	r3, [pc, #168]	@ (8004558 <HAL_ADC_ConfigChannel+0x7f0>)
 80044ae:	e012      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 80044b0:	2300      	movs	r3, #0
 80044b2:	e010      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 80044b4:	4b27      	ldr	r3, [pc, #156]	@ (8004554 <HAL_ADC_ConfigChannel+0x7ec>)
 80044b6:	e00e      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 80044b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004524 <HAL_ADC_ConfigChannel+0x7bc>)
 80044ba:	e00c      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 80044bc:	4b18      	ldr	r3, [pc, #96]	@ (8004520 <HAL_ADC_ConfigChannel+0x7b8>)
 80044be:	e00a      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 80044c0:	4b1e      	ldr	r3, [pc, #120]	@ (800453c <HAL_ADC_ConfigChannel+0x7d4>)
 80044c2:	e008      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 80044c4:	4b1e      	ldr	r3, [pc, #120]	@ (8004540 <HAL_ADC_ConfigChannel+0x7d8>)
 80044c6:	e006      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 80044c8:	4b1e      	ldr	r3, [pc, #120]	@ (8004544 <HAL_ADC_ConfigChannel+0x7dc>)
 80044ca:	e004      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 80044cc:	4b1e      	ldr	r3, [pc, #120]	@ (8004548 <HAL_ADC_ConfigChannel+0x7e0>)
 80044ce:	e002      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 80044d0:	2301      	movs	r3, #1
 80044d2:	e000      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x76e>
 80044d4:	2300      	movs	r3, #0
 80044d6:	4619      	mov	r1, r3
 80044d8:	4610      	mov	r0, r2
 80044da:	f7fe fd4b 	bl	8002f74 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f280 80f6 	bge.w	80046d4 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a05      	ldr	r2, [pc, #20]	@ (8004504 <HAL_ADC_ConfigChannel+0x79c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d004      	beq.n	80044fc <HAL_ADC_ConfigChannel+0x794>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a15      	ldr	r2, [pc, #84]	@ (800454c <HAL_ADC_ConfigChannel+0x7e4>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d131      	bne.n	8004560 <HAL_ADC_ConfigChannel+0x7f8>
 80044fc:	4b17      	ldr	r3, [pc, #92]	@ (800455c <HAL_ADC_ConfigChannel+0x7f4>)
 80044fe:	e030      	b.n	8004562 <HAL_ADC_ConfigChannel+0x7fa>
 8004500:	47ff0000 	.word	0x47ff0000
 8004504:	40022000 	.word	0x40022000
 8004508:	04300002 	.word	0x04300002
 800450c:	08600004 	.word	0x08600004
 8004510:	0c900008 	.word	0x0c900008
 8004514:	10c00010 	.word	0x10c00010
 8004518:	14f00020 	.word	0x14f00020
 800451c:	2a000400 	.word	0x2a000400
 8004520:	2e300800 	.word	0x2e300800
 8004524:	32601000 	.word	0x32601000
 8004528:	43210000 	.word	0x43210000
 800452c:	4b840000 	.word	0x4b840000
 8004530:	4fb80000 	.word	0x4fb80000
 8004534:	47520000 	.word	0x47520000
 8004538:	36902000 	.word	0x36902000
 800453c:	25b00200 	.word	0x25b00200
 8004540:	21800100 	.word	0x21800100
 8004544:	1d500080 	.word	0x1d500080
 8004548:	19200040 	.word	0x19200040
 800454c:	40022100 	.word	0x40022100
 8004550:	58026000 	.word	0x58026000
 8004554:	3ac04000 	.word	0x3ac04000
 8004558:	3ef08000 	.word	0x3ef08000
 800455c:	40022300 	.word	0x40022300
 8004560:	4b61      	ldr	r3, [pc, #388]	@ (80046e8 <HAL_ADC_ConfigChannel+0x980>)
 8004562:	4618      	mov	r0, r3
 8004564:	f7fe fcf8 	bl	8002f58 <LL_ADC_GetCommonPathInternalCh>
 8004568:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a5f      	ldr	r2, [pc, #380]	@ (80046ec <HAL_ADC_ConfigChannel+0x984>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d004      	beq.n	800457e <HAL_ADC_ConfigChannel+0x816>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a5d      	ldr	r2, [pc, #372]	@ (80046f0 <HAL_ADC_ConfigChannel+0x988>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d10e      	bne.n	800459c <HAL_ADC_ConfigChannel+0x834>
 800457e:	485b      	ldr	r0, [pc, #364]	@ (80046ec <HAL_ADC_ConfigChannel+0x984>)
 8004580:	f7fe ff60 	bl	8003444 <LL_ADC_IsEnabled>
 8004584:	4604      	mov	r4, r0
 8004586:	485a      	ldr	r0, [pc, #360]	@ (80046f0 <HAL_ADC_ConfigChannel+0x988>)
 8004588:	f7fe ff5c 	bl	8003444 <LL_ADC_IsEnabled>
 800458c:	4603      	mov	r3, r0
 800458e:	4323      	orrs	r3, r4
 8004590:	2b00      	cmp	r3, #0
 8004592:	bf0c      	ite	eq
 8004594:	2301      	moveq	r3, #1
 8004596:	2300      	movne	r3, #0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	e008      	b.n	80045ae <HAL_ADC_ConfigChannel+0x846>
 800459c:	4855      	ldr	r0, [pc, #340]	@ (80046f4 <HAL_ADC_ConfigChannel+0x98c>)
 800459e:	f7fe ff51 	bl	8003444 <LL_ADC_IsEnabled>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	bf0c      	ite	eq
 80045a8:	2301      	moveq	r3, #1
 80045aa:	2300      	movne	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d07d      	beq.n	80046ae <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a50      	ldr	r2, [pc, #320]	@ (80046f8 <HAL_ADC_ConfigChannel+0x990>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d130      	bne.n	800461e <HAL_ADC_ConfigChannel+0x8b6>
 80045bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d12b      	bne.n	800461e <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a4a      	ldr	r2, [pc, #296]	@ (80046f4 <HAL_ADC_ConfigChannel+0x98c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	f040 8081 	bne.w	80046d4 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a45      	ldr	r2, [pc, #276]	@ (80046ec <HAL_ADC_ConfigChannel+0x984>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d004      	beq.n	80045e6 <HAL_ADC_ConfigChannel+0x87e>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a43      	ldr	r2, [pc, #268]	@ (80046f0 <HAL_ADC_ConfigChannel+0x988>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d101      	bne.n	80045ea <HAL_ADC_ConfigChannel+0x882>
 80045e6:	4a45      	ldr	r2, [pc, #276]	@ (80046fc <HAL_ADC_ConfigChannel+0x994>)
 80045e8:	e000      	b.n	80045ec <HAL_ADC_ConfigChannel+0x884>
 80045ea:	4a3f      	ldr	r2, [pc, #252]	@ (80046e8 <HAL_ADC_ConfigChannel+0x980>)
 80045ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045f2:	4619      	mov	r1, r3
 80045f4:	4610      	mov	r0, r2
 80045f6:	f7fe fc9c 	bl	8002f32 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045fa:	4b41      	ldr	r3, [pc, #260]	@ (8004700 <HAL_ADC_ConfigChannel+0x998>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	099b      	lsrs	r3, r3, #6
 8004600:	4a40      	ldr	r2, [pc, #256]	@ (8004704 <HAL_ADC_ConfigChannel+0x99c>)
 8004602:	fba2 2303 	umull	r2, r3, r2, r3
 8004606:	099b      	lsrs	r3, r3, #6
 8004608:	3301      	adds	r3, #1
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800460e:	e002      	b.n	8004616 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	3b01      	subs	r3, #1
 8004614:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1f9      	bne.n	8004610 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800461c:	e05a      	b.n	80046d4 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a39      	ldr	r2, [pc, #228]	@ (8004708 <HAL_ADC_ConfigChannel+0x9a0>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d11e      	bne.n	8004666 <HAL_ADC_ConfigChannel+0x8fe>
 8004628:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800462a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d119      	bne.n	8004666 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a2f      	ldr	r2, [pc, #188]	@ (80046f4 <HAL_ADC_ConfigChannel+0x98c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d14b      	bne.n	80046d4 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a2a      	ldr	r2, [pc, #168]	@ (80046ec <HAL_ADC_ConfigChannel+0x984>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d004      	beq.n	8004650 <HAL_ADC_ConfigChannel+0x8e8>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a29      	ldr	r2, [pc, #164]	@ (80046f0 <HAL_ADC_ConfigChannel+0x988>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d101      	bne.n	8004654 <HAL_ADC_ConfigChannel+0x8ec>
 8004650:	4a2a      	ldr	r2, [pc, #168]	@ (80046fc <HAL_ADC_ConfigChannel+0x994>)
 8004652:	e000      	b.n	8004656 <HAL_ADC_ConfigChannel+0x8ee>
 8004654:	4a24      	ldr	r2, [pc, #144]	@ (80046e8 <HAL_ADC_ConfigChannel+0x980>)
 8004656:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004658:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800465c:	4619      	mov	r1, r3
 800465e:	4610      	mov	r0, r2
 8004660:	f7fe fc67 	bl	8002f32 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004664:	e036      	b.n	80046d4 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a28      	ldr	r2, [pc, #160]	@ (800470c <HAL_ADC_ConfigChannel+0x9a4>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d131      	bne.n	80046d4 <HAL_ADC_ConfigChannel+0x96c>
 8004670:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d12c      	bne.n	80046d4 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a1d      	ldr	r2, [pc, #116]	@ (80046f4 <HAL_ADC_ConfigChannel+0x98c>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d127      	bne.n	80046d4 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a18      	ldr	r2, [pc, #96]	@ (80046ec <HAL_ADC_ConfigChannel+0x984>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d004      	beq.n	8004698 <HAL_ADC_ConfigChannel+0x930>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a17      	ldr	r2, [pc, #92]	@ (80046f0 <HAL_ADC_ConfigChannel+0x988>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d101      	bne.n	800469c <HAL_ADC_ConfigChannel+0x934>
 8004698:	4a18      	ldr	r2, [pc, #96]	@ (80046fc <HAL_ADC_ConfigChannel+0x994>)
 800469a:	e000      	b.n	800469e <HAL_ADC_ConfigChannel+0x936>
 800469c:	4a12      	ldr	r2, [pc, #72]	@ (80046e8 <HAL_ADC_ConfigChannel+0x980>)
 800469e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80046a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80046a4:	4619      	mov	r1, r3
 80046a6:	4610      	mov	r0, r2
 80046a8:	f7fe fc43 	bl	8002f32 <LL_ADC_SetCommonPathInternalCh>
 80046ac:	e012      	b.n	80046d4 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046b2:	f043 0220 	orr.w	r2, r3, #32
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80046c0:	e008      	b.n	80046d4 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046c6:	f043 0220 	orr.w	r2, r3, #32
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80046dc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3794      	adds	r7, #148	@ 0x94
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd90      	pop	{r4, r7, pc}
 80046e8:	58026300 	.word	0x58026300
 80046ec:	40022000 	.word	0x40022000
 80046f0:	40022100 	.word	0x40022100
 80046f4:	58026000 	.word	0x58026000
 80046f8:	c7520000 	.word	0xc7520000
 80046fc:	40022300 	.word	0x40022300
 8004700:	2400000c 	.word	0x2400000c
 8004704:	053e2d63 	.word	0x053e2d63
 8004708:	c3210000 	.word	0xc3210000
 800470c:	cb840000 	.word	0xcb840000

08004710 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b088      	sub	sp, #32
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800471a:	2300      	movs	r3, #0
 800471c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f7fe feda 	bl	80034e0 <LL_ADC_REG_IsConversionOngoing>
 800472c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f7fe fefc 	bl	8003530 <LL_ADC_INJ_IsConversionOngoing>
 8004738:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d103      	bne.n	8004748 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 8098 	beq.w	8004878 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d02a      	beq.n	80047ac <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	7e5b      	ldrb	r3, [r3, #25]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d126      	bne.n	80047ac <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	7e1b      	ldrb	r3, [r3, #24]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d122      	bne.n	80047ac <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004766:	2301      	movs	r3, #1
 8004768:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800476a:	e014      	b.n	8004796 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	4a45      	ldr	r2, [pc, #276]	@ (8004884 <ADC_ConversionStop+0x174>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d90d      	bls.n	8004790 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004778:	f043 0210 	orr.w	r2, r3, #16
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004784:	f043 0201 	orr.w	r2, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e074      	b.n	800487a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	3301      	adds	r3, #1
 8004794:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a0:	2b40      	cmp	r3, #64	@ 0x40
 80047a2:	d1e3      	bne.n	800476c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2240      	movs	r2, #64	@ 0x40
 80047aa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d014      	beq.n	80047dc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fe fe92 	bl	80034e0 <LL_ADC_REG_IsConversionOngoing>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00c      	beq.n	80047dc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7fe fe4f 	bl	800346a <LL_ADC_IsDisableOngoing>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d104      	bne.n	80047dc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fe fe6e 	bl	80034b8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d014      	beq.n	800480c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fe fea2 	bl	8003530 <LL_ADC_INJ_IsConversionOngoing>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00c      	beq.n	800480c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fe fe37 	bl	800346a <LL_ADC_IsDisableOngoing>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d104      	bne.n	800480c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f7fe fe7e 	bl	8003508 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	2b02      	cmp	r3, #2
 8004810:	d005      	beq.n	800481e <ADC_ConversionStop+0x10e>
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	2b03      	cmp	r3, #3
 8004816:	d105      	bne.n	8004824 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004818:	230c      	movs	r3, #12
 800481a:	617b      	str	r3, [r7, #20]
        break;
 800481c:	e005      	b.n	800482a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800481e:	2308      	movs	r3, #8
 8004820:	617b      	str	r3, [r7, #20]
        break;
 8004822:	e002      	b.n	800482a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004824:	2304      	movs	r3, #4
 8004826:	617b      	str	r3, [r7, #20]
        break;
 8004828:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800482a:	f7fe fb63 	bl	8002ef4 <HAL_GetTick>
 800482e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004830:	e01b      	b.n	800486a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004832:	f7fe fb5f 	bl	8002ef4 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b05      	cmp	r3, #5
 800483e:	d914      	bls.n	800486a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689a      	ldr	r2, [r3, #8]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	4013      	ands	r3, r2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00d      	beq.n	800486a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004852:	f043 0210 	orr.w	r2, r3, #16
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800485e:	f043 0201 	orr.w	r2, r3, #1
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e007      	b.n	800487a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	4013      	ands	r3, r2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1dc      	bne.n	8004832 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3720      	adds	r7, #32
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	000cdbff 	.word	0x000cdbff

08004888 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4618      	mov	r0, r3
 8004896:	f7fe fdd5 	bl	8003444 <LL_ADC_IsEnabled>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d16e      	bne.n	800497e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689a      	ldr	r2, [r3, #8]
 80048a6:	4b38      	ldr	r3, [pc, #224]	@ (8004988 <ADC_Enable+0x100>)
 80048a8:	4013      	ands	r3, r2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00d      	beq.n	80048ca <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048b2:	f043 0210 	orr.w	r2, r3, #16
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048be:	f043 0201 	orr.w	r2, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e05a      	b.n	8004980 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fe fd90 	bl	80033f4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80048d4:	f7fe fb0e 	bl	8002ef4 <HAL_GetTick>
 80048d8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a2b      	ldr	r2, [pc, #172]	@ (800498c <ADC_Enable+0x104>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d004      	beq.n	80048ee <ADC_Enable+0x66>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a29      	ldr	r2, [pc, #164]	@ (8004990 <ADC_Enable+0x108>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d101      	bne.n	80048f2 <ADC_Enable+0x6a>
 80048ee:	4b29      	ldr	r3, [pc, #164]	@ (8004994 <ADC_Enable+0x10c>)
 80048f0:	e000      	b.n	80048f4 <ADC_Enable+0x6c>
 80048f2:	4b29      	ldr	r3, [pc, #164]	@ (8004998 <ADC_Enable+0x110>)
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7fe fd13 	bl	8003320 <LL_ADC_GetMultimode>
 80048fa:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a23      	ldr	r2, [pc, #140]	@ (8004990 <ADC_Enable+0x108>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d002      	beq.n	800490c <ADC_Enable+0x84>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	e000      	b.n	800490e <ADC_Enable+0x86>
 800490c:	4b1f      	ldr	r3, [pc, #124]	@ (800498c <ADC_Enable+0x104>)
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6812      	ldr	r2, [r2, #0]
 8004912:	4293      	cmp	r3, r2
 8004914:	d02c      	beq.n	8004970 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d130      	bne.n	800497e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800491c:	e028      	b.n	8004970 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	f7fe fd8e 	bl	8003444 <LL_ADC_IsEnabled>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d104      	bne.n	8004938 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f7fe fd5e 	bl	80033f4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004938:	f7fe fadc 	bl	8002ef4 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d914      	bls.n	8004970 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b01      	cmp	r3, #1
 8004952:	d00d      	beq.n	8004970 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004958:	f043 0210 	orr.w	r2, r3, #16
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004964:	f043 0201 	orr.w	r2, r3, #1
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e007      	b.n	8004980 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b01      	cmp	r3, #1
 800497c:	d1cf      	bne.n	800491e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	8000003f 	.word	0x8000003f
 800498c:	40022000 	.word	0x40022000
 8004990:	40022100 	.word	0x40022100
 8004994:	40022300 	.word	0x40022300
 8004998:	58026300 	.word	0x58026300

0800499c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7fe fd5e 	bl	800346a <LL_ADC_IsDisableOngoing>
 80049ae:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7fe fd45 	bl	8003444 <LL_ADC_IsEnabled>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d047      	beq.n	8004a50 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d144      	bne.n	8004a50 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f003 030d 	and.w	r3, r3, #13
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d10c      	bne.n	80049ee <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fe fd1f 	bl	800341c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2203      	movs	r2, #3
 80049e4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80049e6:	f7fe fa85 	bl	8002ef4 <HAL_GetTick>
 80049ea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80049ec:	e029      	b.n	8004a42 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049f2:	f043 0210 	orr.w	r2, r3, #16
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049fe:	f043 0201 	orr.w	r2, r3, #1
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e023      	b.n	8004a52 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004a0a:	f7fe fa73 	bl	8002ef4 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d914      	bls.n	8004a42 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00d      	beq.n	8004a42 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a2a:	f043 0210 	orr.w	r2, r3, #16
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a36:	f043 0201 	orr.w	r2, r3, #1
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e007      	b.n	8004a52 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1dc      	bne.n	8004a0a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a6c      	ldr	r2, [pc, #432]	@ (8004c1c <ADC_ConfigureBoostMode+0x1c0>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d004      	beq.n	8004a78 <ADC_ConfigureBoostMode+0x1c>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a6b      	ldr	r2, [pc, #428]	@ (8004c20 <ADC_ConfigureBoostMode+0x1c4>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d109      	bne.n	8004a8c <ADC_ConfigureBoostMode+0x30>
 8004a78:	4b6a      	ldr	r3, [pc, #424]	@ (8004c24 <ADC_ConfigureBoostMode+0x1c8>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	bf14      	ite	ne
 8004a84:	2301      	movne	r3, #1
 8004a86:	2300      	moveq	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	e008      	b.n	8004a9e <ADC_ConfigureBoostMode+0x42>
 8004a8c:	4b66      	ldr	r3, [pc, #408]	@ (8004c28 <ADC_ConfigureBoostMode+0x1cc>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	bf14      	ite	ne
 8004a98:	2301      	movne	r3, #1
 8004a9a:	2300      	moveq	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d01c      	beq.n	8004adc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004aa2:	f002 fdcd 	bl	8007640 <HAL_RCC_GetHCLKFreq>
 8004aa6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ab0:	d010      	beq.n	8004ad4 <ADC_ConfigureBoostMode+0x78>
 8004ab2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ab6:	d873      	bhi.n	8004ba0 <ADC_ConfigureBoostMode+0x144>
 8004ab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004abc:	d002      	beq.n	8004ac4 <ADC_ConfigureBoostMode+0x68>
 8004abe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ac2:	d16d      	bne.n	8004ba0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	0c1b      	lsrs	r3, r3, #16
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad0:	60fb      	str	r3, [r7, #12]
        break;
 8004ad2:	e068      	b.n	8004ba6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	089b      	lsrs	r3, r3, #2
 8004ad8:	60fb      	str	r3, [r7, #12]
        break;
 8004ada:	e064      	b.n	8004ba6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004adc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004ae0:	f04f 0100 	mov.w	r1, #0
 8004ae4:	f003 ffa8 	bl	8008a38 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ae8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004af2:	d051      	beq.n	8004b98 <ADC_ConfigureBoostMode+0x13c>
 8004af4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004af8:	d854      	bhi.n	8004ba4 <ADC_ConfigureBoostMode+0x148>
 8004afa:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004afe:	d047      	beq.n	8004b90 <ADC_ConfigureBoostMode+0x134>
 8004b00:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004b04:	d84e      	bhi.n	8004ba4 <ADC_ConfigureBoostMode+0x148>
 8004b06:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004b0a:	d03d      	beq.n	8004b88 <ADC_ConfigureBoostMode+0x12c>
 8004b0c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004b10:	d848      	bhi.n	8004ba4 <ADC_ConfigureBoostMode+0x148>
 8004b12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b16:	d033      	beq.n	8004b80 <ADC_ConfigureBoostMode+0x124>
 8004b18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b1c:	d842      	bhi.n	8004ba4 <ADC_ConfigureBoostMode+0x148>
 8004b1e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004b22:	d029      	beq.n	8004b78 <ADC_ConfigureBoostMode+0x11c>
 8004b24:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004b28:	d83c      	bhi.n	8004ba4 <ADC_ConfigureBoostMode+0x148>
 8004b2a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004b2e:	d01a      	beq.n	8004b66 <ADC_ConfigureBoostMode+0x10a>
 8004b30:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004b34:	d836      	bhi.n	8004ba4 <ADC_ConfigureBoostMode+0x148>
 8004b36:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004b3a:	d014      	beq.n	8004b66 <ADC_ConfigureBoostMode+0x10a>
 8004b3c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004b40:	d830      	bhi.n	8004ba4 <ADC_ConfigureBoostMode+0x148>
 8004b42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b46:	d00e      	beq.n	8004b66 <ADC_ConfigureBoostMode+0x10a>
 8004b48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b4c:	d82a      	bhi.n	8004ba4 <ADC_ConfigureBoostMode+0x148>
 8004b4e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004b52:	d008      	beq.n	8004b66 <ADC_ConfigureBoostMode+0x10a>
 8004b54:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004b58:	d824      	bhi.n	8004ba4 <ADC_ConfigureBoostMode+0x148>
 8004b5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b5e:	d002      	beq.n	8004b66 <ADC_ConfigureBoostMode+0x10a>
 8004b60:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004b64:	d11e      	bne.n	8004ba4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	0c9b      	lsrs	r3, r3, #18
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b74:	60fb      	str	r3, [r7, #12]
        break;
 8004b76:	e016      	b.n	8004ba6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	091b      	lsrs	r3, r3, #4
 8004b7c:	60fb      	str	r3, [r7, #12]
        break;
 8004b7e:	e012      	b.n	8004ba6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	095b      	lsrs	r3, r3, #5
 8004b84:	60fb      	str	r3, [r7, #12]
        break;
 8004b86:	e00e      	b.n	8004ba6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	099b      	lsrs	r3, r3, #6
 8004b8c:	60fb      	str	r3, [r7, #12]
        break;
 8004b8e:	e00a      	b.n	8004ba6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	09db      	lsrs	r3, r3, #7
 8004b94:	60fb      	str	r3, [r7, #12]
        break;
 8004b96:	e006      	b.n	8004ba6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	0a1b      	lsrs	r3, r3, #8
 8004b9c:	60fb      	str	r3, [r7, #12]
        break;
 8004b9e:	e002      	b.n	8004ba6 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004ba0:	bf00      	nop
 8004ba2:	e000      	b.n	8004ba6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004ba4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	085b      	lsrs	r3, r3, #1
 8004baa:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4a1f      	ldr	r2, [pc, #124]	@ (8004c2c <ADC_ConfigureBoostMode+0x1d0>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d808      	bhi.n	8004bc6 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004bc2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004bc4:	e025      	b.n	8004c12 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	4a19      	ldr	r2, [pc, #100]	@ (8004c30 <ADC_ConfigureBoostMode+0x1d4>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d80a      	bhi.n	8004be4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004be0:	609a      	str	r2, [r3, #8]
}
 8004be2:	e016      	b.n	8004c12 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4a13      	ldr	r2, [pc, #76]	@ (8004c34 <ADC_ConfigureBoostMode+0x1d8>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d80a      	bhi.n	8004c02 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bfe:	609a      	str	r2, [r3, #8]
}
 8004c00:	e007      	b.n	8004c12 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004c10:	609a      	str	r2, [r3, #8]
}
 8004c12:	bf00      	nop
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	40022000 	.word	0x40022000
 8004c20:	40022100 	.word	0x40022100
 8004c24:	40022300 	.word	0x40022300
 8004c28:	58026300 	.word	0x58026300
 8004c2c:	005f5e10 	.word	0x005f5e10
 8004c30:	00bebc20 	.word	0x00bebc20
 8004c34:	017d7840 	.word	0x017d7840

08004c38 <LL_ADC_IsEnabled>:
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <LL_ADC_IsEnabled+0x18>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e000      	b.n	8004c52 <LL_ADC_IsEnabled+0x1a>
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <LL_ADC_REG_IsConversionOngoing>:
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 0304 	and.w	r3, r3, #4
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d101      	bne.n	8004c76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004c72:	2301      	movs	r3, #1
 8004c74:	e000      	b.n	8004c78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004c84:	b590      	push	{r4, r7, lr}
 8004c86:	b0a3      	sub	sp, #140	@ 0x8c
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d101      	bne.n	8004ca2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	e0c1      	b.n	8004e26 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004caa:	2300      	movs	r3, #0
 8004cac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a5e      	ldr	r2, [pc, #376]	@ (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d102      	bne.n	8004cc2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004cbc:	4b5d      	ldr	r3, [pc, #372]	@ (8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	e001      	b.n	8004cc6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10b      	bne.n	8004ce4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cd0:	f043 0220 	orr.w	r2, r3, #32
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e0a0      	b.n	8004e26 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff ffb9 	bl	8004c5e <LL_ADC_REG_IsConversionOngoing>
 8004cec:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff ffb2 	bl	8004c5e <LL_ADC_REG_IsConversionOngoing>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f040 8081 	bne.w	8004e04 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004d02:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d17c      	bne.n	8004e04 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a48      	ldr	r2, [pc, #288]	@ (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d004      	beq.n	8004d1e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a46      	ldr	r2, [pc, #280]	@ (8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d101      	bne.n	8004d22 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004d1e:	4b46      	ldr	r3, [pc, #280]	@ (8004e38 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004d20:	e000      	b.n	8004d24 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004d22:	4b46      	ldr	r3, [pc, #280]	@ (8004e3c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004d24:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d039      	beq.n	8004da2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004d2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d3e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a3a      	ldr	r2, [pc, #232]	@ (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d004      	beq.n	8004d54 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a39      	ldr	r2, [pc, #228]	@ (8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d10e      	bne.n	8004d72 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004d54:	4836      	ldr	r0, [pc, #216]	@ (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d56:	f7ff ff6f 	bl	8004c38 <LL_ADC_IsEnabled>
 8004d5a:	4604      	mov	r4, r0
 8004d5c:	4835      	ldr	r0, [pc, #212]	@ (8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d5e:	f7ff ff6b 	bl	8004c38 <LL_ADC_IsEnabled>
 8004d62:	4603      	mov	r3, r0
 8004d64:	4323      	orrs	r3, r4
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	bf0c      	ite	eq
 8004d6a:	2301      	moveq	r3, #1
 8004d6c:	2300      	movne	r3, #0
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	e008      	b.n	8004d84 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004d72:	4833      	ldr	r0, [pc, #204]	@ (8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004d74:	f7ff ff60 	bl	8004c38 <LL_ADC_IsEnabled>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	bf0c      	ite	eq
 8004d7e:	2301      	moveq	r3, #1
 8004d80:	2300      	movne	r3, #0
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d047      	beq.n	8004e18 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004d88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004d8e:	4013      	ands	r3, r2
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	6811      	ldr	r1, [r2, #0]
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	6892      	ldr	r2, [r2, #8]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d9e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004da0:	e03a      	b.n	8004e18 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004da2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004daa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004dac:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a1f      	ldr	r2, [pc, #124]	@ (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d004      	beq.n	8004dc2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d10e      	bne.n	8004de0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004dc2:	481b      	ldr	r0, [pc, #108]	@ (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004dc4:	f7ff ff38 	bl	8004c38 <LL_ADC_IsEnabled>
 8004dc8:	4604      	mov	r4, r0
 8004dca:	481a      	ldr	r0, [pc, #104]	@ (8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004dcc:	f7ff ff34 	bl	8004c38 <LL_ADC_IsEnabled>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	4323      	orrs	r3, r4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	bf0c      	ite	eq
 8004dd8:	2301      	moveq	r3, #1
 8004dda:	2300      	movne	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	e008      	b.n	8004df2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004de0:	4817      	ldr	r0, [pc, #92]	@ (8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004de2:	f7ff ff29 	bl	8004c38 <LL_ADC_IsEnabled>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	bf0c      	ite	eq
 8004dec:	2301      	moveq	r3, #1
 8004dee:	2300      	movne	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d010      	beq.n	8004e18 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004df6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004df8:	689a      	ldr	r2, [r3, #8]
 8004dfa:	4b12      	ldr	r3, [pc, #72]	@ (8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004e00:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e02:	e009      	b.n	8004e18 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e08:	f043 0220 	orr.w	r2, r3, #32
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004e16:	e000      	b.n	8004e1a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e18:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004e22:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	378c      	adds	r7, #140	@ 0x8c
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd90      	pop	{r4, r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	40022000 	.word	0x40022000
 8004e34:	40022100 	.word	0x40022100
 8004e38:	40022300 	.word	0x40022300
 8004e3c:	58026300 	.word	0x58026300
 8004e40:	58026000 	.word	0x58026000
 8004e44:	fffff0e0 	.word	0xfffff0e0

08004e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e58:	4b0b      	ldr	r3, [pc, #44]	@ (8004e88 <__NVIC_SetPriorityGrouping+0x40>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e64:	4013      	ands	r3, r2
 8004e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e70:	4b06      	ldr	r3, [pc, #24]	@ (8004e8c <__NVIC_SetPriorityGrouping+0x44>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e76:	4a04      	ldr	r2, [pc, #16]	@ (8004e88 <__NVIC_SetPriorityGrouping+0x40>)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	60d3      	str	r3, [r2, #12]
}
 8004e7c:	bf00      	nop
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	e000ed00 	.word	0xe000ed00
 8004e8c:	05fa0000 	.word	0x05fa0000

08004e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e94:	4b04      	ldr	r3, [pc, #16]	@ (8004ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	0a1b      	lsrs	r3, r3, #8
 8004e9a:	f003 0307 	and.w	r3, r3, #7
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	e000ed00 	.word	0xe000ed00

08004eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004eb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	db0b      	blt.n	8004ed6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ebe:	88fb      	ldrh	r3, [r7, #6]
 8004ec0:	f003 021f 	and.w	r2, r3, #31
 8004ec4:	4907      	ldr	r1, [pc, #28]	@ (8004ee4 <__NVIC_EnableIRQ+0x38>)
 8004ec6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eca:	095b      	lsrs	r3, r3, #5
 8004ecc:	2001      	movs	r0, #1
 8004ece:	fa00 f202 	lsl.w	r2, r0, r2
 8004ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	e000e100 	.word	0xe000e100

08004ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	6039      	str	r1, [r7, #0]
 8004ef2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ef4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	db0a      	blt.n	8004f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	490c      	ldr	r1, [pc, #48]	@ (8004f34 <__NVIC_SetPriority+0x4c>)
 8004f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f06:	0112      	lsls	r2, r2, #4
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	440b      	add	r3, r1
 8004f0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f10:	e00a      	b.n	8004f28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	b2da      	uxtb	r2, r3
 8004f16:	4908      	ldr	r1, [pc, #32]	@ (8004f38 <__NVIC_SetPriority+0x50>)
 8004f18:	88fb      	ldrh	r3, [r7, #6]
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	3b04      	subs	r3, #4
 8004f20:	0112      	lsls	r2, r2, #4
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	440b      	add	r3, r1
 8004f26:	761a      	strb	r2, [r3, #24]
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	e000e100 	.word	0xe000e100
 8004f38:	e000ed00 	.word	0xe000ed00

08004f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b089      	sub	sp, #36	@ 0x24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	f1c3 0307 	rsb	r3, r3, #7
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	bf28      	it	cs
 8004f5a:	2304      	movcs	r3, #4
 8004f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	3304      	adds	r3, #4
 8004f62:	2b06      	cmp	r3, #6
 8004f64:	d902      	bls.n	8004f6c <NVIC_EncodePriority+0x30>
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	3b03      	subs	r3, #3
 8004f6a:	e000      	b.n	8004f6e <NVIC_EncodePriority+0x32>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f70:	f04f 32ff 	mov.w	r2, #4294967295
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7a:	43da      	mvns	r2, r3
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	401a      	ands	r2, r3
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f84:	f04f 31ff 	mov.w	r1, #4294967295
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8e:	43d9      	mvns	r1, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f94:	4313      	orrs	r3, r2
         );
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3724      	adds	r7, #36	@ 0x24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
	...

08004fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fb4:	d301      	bcc.n	8004fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e00f      	b.n	8004fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fba:	4a0a      	ldr	r2, [pc, #40]	@ (8004fe4 <SysTick_Config+0x40>)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fc2:	210f      	movs	r1, #15
 8004fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc8:	f7ff ff8e 	bl	8004ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fcc:	4b05      	ldr	r3, [pc, #20]	@ (8004fe4 <SysTick_Config+0x40>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fd2:	4b04      	ldr	r3, [pc, #16]	@ (8004fe4 <SysTick_Config+0x40>)
 8004fd4:	2207      	movs	r2, #7
 8004fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	e000e010 	.word	0xe000e010

08004fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7ff ff29 	bl	8004e48 <__NVIC_SetPriorityGrouping>
}
 8004ff6:	bf00      	nop
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b086      	sub	sp, #24
 8005002:	af00      	add	r7, sp, #0
 8005004:	4603      	mov	r3, r0
 8005006:	60b9      	str	r1, [r7, #8]
 8005008:	607a      	str	r2, [r7, #4]
 800500a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800500c:	f7ff ff40 	bl	8004e90 <__NVIC_GetPriorityGrouping>
 8005010:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	6978      	ldr	r0, [r7, #20]
 8005018:	f7ff ff90 	bl	8004f3c <NVIC_EncodePriority>
 800501c:	4602      	mov	r2, r0
 800501e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005022:	4611      	mov	r1, r2
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff ff5f 	bl	8004ee8 <__NVIC_SetPriority>
}
 800502a:	bf00      	nop
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b082      	sub	sp, #8
 8005036:	af00      	add	r7, sp, #0
 8005038:	4603      	mov	r3, r0
 800503a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800503c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff ff33 	bl	8004eac <__NVIC_EnableIRQ>
}
 8005046:	bf00      	nop
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b082      	sub	sp, #8
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7ff ffa4 	bl	8004fa4 <SysTick_Config>
 800505c:	4603      	mov	r3, r0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
	...

08005068 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b098      	sub	sp, #96	@ 0x60
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005070:	4a84      	ldr	r2, [pc, #528]	@ (8005284 <HAL_FDCAN_Init+0x21c>)
 8005072:	f107 030c 	add.w	r3, r7, #12
 8005076:	4611      	mov	r1, r2
 8005078:	224c      	movs	r2, #76	@ 0x4c
 800507a:	4618      	mov	r0, r3
 800507c:	f007 f918 	bl	800c2b0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e1c6      	b.n	8005418 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a7e      	ldr	r2, [pc, #504]	@ (8005288 <HAL_FDCAN_Init+0x220>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d106      	bne.n	80050a2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800509c:	461a      	mov	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d106      	bne.n	80050bc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7fd fbe8 	bl	800288c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699a      	ldr	r2, [r3, #24]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0210 	bic.w	r2, r2, #16
 80050ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050cc:	f7fd ff12 	bl	8002ef4 <HAL_GetTick>
 80050d0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80050d2:	e014      	b.n	80050fe <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80050d4:	f7fd ff0e 	bl	8002ef4 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b0a      	cmp	r3, #10
 80050e0:	d90d      	bls.n	80050fe <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050e8:	f043 0201 	orr.w	r2, r3, #1
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2203      	movs	r2, #3
 80050f6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e18c      	b.n	8005418 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	2b08      	cmp	r3, #8
 800510a:	d0e3      	beq.n	80050d4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699a      	ldr	r2, [r3, #24]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0201 	orr.w	r2, r2, #1
 800511a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800511c:	f7fd feea 	bl	8002ef4 <HAL_GetTick>
 8005120:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005122:	e014      	b.n	800514e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005124:	f7fd fee6 	bl	8002ef4 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b0a      	cmp	r3, #10
 8005130:	d90d      	bls.n	800514e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005138:	f043 0201 	orr.w	r2, r3, #1
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2203      	movs	r2, #3
 8005146:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e164      	b.n	8005418 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0e3      	beq.n	8005124 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699a      	ldr	r2, [r3, #24]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0202 	orr.w	r2, r2, #2
 800516a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	7c1b      	ldrb	r3, [r3, #16]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d108      	bne.n	8005186 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699a      	ldr	r2, [r3, #24]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005182:	619a      	str	r2, [r3, #24]
 8005184:	e007      	b.n	8005196 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	699a      	ldr	r2, [r3, #24]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005194:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	7c5b      	ldrb	r3, [r3, #17]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d108      	bne.n	80051b0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	699a      	ldr	r2, [r3, #24]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051ac:	619a      	str	r2, [r3, #24]
 80051ae:	e007      	b.n	80051c0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	699a      	ldr	r2, [r3, #24]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80051be:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	7c9b      	ldrb	r3, [r3, #18]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d108      	bne.n	80051da <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699a      	ldr	r2, [r3, #24]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80051d6:	619a      	str	r2, [r3, #24]
 80051d8:	e007      	b.n	80051ea <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	699a      	ldr	r2, [r3, #24]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80051e8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699a      	ldr	r2, [r3, #24]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800520e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691a      	ldr	r2, [r3, #16]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0210 	bic.w	r2, r2, #16
 800521e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d108      	bne.n	800523a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	699a      	ldr	r2, [r3, #24]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f042 0204 	orr.w	r2, r2, #4
 8005236:	619a      	str	r2, [r3, #24]
 8005238:	e030      	b.n	800529c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d02c      	beq.n	800529c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	2b02      	cmp	r3, #2
 8005248:	d020      	beq.n	800528c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	699a      	ldr	r2, [r3, #24]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005258:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	691a      	ldr	r2, [r3, #16]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f042 0210 	orr.w	r2, r2, #16
 8005268:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	2b03      	cmp	r3, #3
 8005270:	d114      	bne.n	800529c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	699a      	ldr	r2, [r3, #24]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f042 0220 	orr.w	r2, r2, #32
 8005280:	619a      	str	r2, [r3, #24]
 8005282:	e00b      	b.n	800529c <HAL_FDCAN_Init+0x234>
 8005284:	0800cf2c 	.word	0x0800cf2c
 8005288:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	699a      	ldr	r2, [r3, #24]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0220 	orr.w	r2, r2, #32
 800529a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	3b01      	subs	r3, #1
 80052a2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	69db      	ldr	r3, [r3, #28]
 80052a8:	3b01      	subs	r3, #1
 80052aa:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80052ac:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80052b4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	3b01      	subs	r3, #1
 80052be:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80052c4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80052c6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052d0:	d115      	bne.n	80052fe <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052dc:	3b01      	subs	r3, #1
 80052de:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80052e0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e6:	3b01      	subs	r3, #1
 80052e8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80052ea:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f2:	3b01      	subs	r3, #1
 80052f4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80052fa:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80052fc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00a      	beq.n	800531c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005324:	4413      	add	r3, r2
 8005326:	2b00      	cmp	r3, #0
 8005328:	d011      	beq.n	800534e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005332:	f023 0107 	bic.w	r1, r3, #7
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	3360      	adds	r3, #96	@ 0x60
 800533e:	443b      	add	r3, r7
 8005340:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005352:	2b00      	cmp	r3, #0
 8005354:	d011      	beq.n	800537a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800535e:	f023 0107 	bic.w	r1, r3, #7
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	3360      	adds	r3, #96	@ 0x60
 800536a:	443b      	add	r3, r7
 800536c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	430a      	orrs	r2, r1
 8005376:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800537e:	2b00      	cmp	r3, #0
 8005380:	d012      	beq.n	80053a8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800538a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	3360      	adds	r3, #96	@ 0x60
 8005396:	443b      	add	r3, r7
 8005398:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800539c:	011a      	lsls	r2, r3, #4
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d012      	beq.n	80053d6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80053b8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	3360      	adds	r3, #96	@ 0x60
 80053c4:	443b      	add	r3, r7
 80053c6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80053ca:	021a      	lsls	r2, r3, #8
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	430a      	orrs	r2, r1
 80053d2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a11      	ldr	r2, [pc, #68]	@ (8005420 <HAL_FDCAN_Init+0x3b8>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d107      	bne.n	80053f0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	689a      	ldr	r2, [r3, #8]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f022 0203 	bic.w	r2, r2, #3
 80053ee:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 fdf7 	bl	8005ffc <FDCAN_CalcultateRamBlockAddresses>
 800540e:	4603      	mov	r3, r0
 8005410:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8005414:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8005418:	4618      	mov	r0, r3
 800541a:	3760      	adds	r7, #96	@ 0x60
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	4000a000 	.word	0x4000a000

08005424 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8005424:	b480      	push	{r7}
 8005426:	b087      	sub	sp, #28
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005434:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005436:	7bfb      	ldrb	r3, [r7, #15]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d002      	beq.n	8005442 <HAL_FDCAN_ConfigFilter+0x1e>
 800543c:	7bfb      	ldrb	r3, [r7, #15]
 800543e:	2b02      	cmp	r3, #2
 8005440:	d157      	bne.n	80054f2 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d12b      	bne.n	80054a2 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	2b07      	cmp	r3, #7
 8005450:	d10d      	bne.n	800546e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800545e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005464:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8005466:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	e00e      	b.n	800548c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800547a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8005482:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005488:	4313      	orrs	r3, r2
 800548a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	e025      	b.n	80054ee <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	075a      	lsls	r2, r3, #29
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	2b07      	cmp	r3, #7
 80054b6:	d103      	bne.n	80054c0 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	613b      	str	r3, [r7, #16]
 80054be:	e006      	b.n	80054ce <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	079a      	lsls	r2, r3, #30
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	4413      	add	r3, r2
 80054da:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	3304      	adds	r3, #4
 80054e6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	e008      	b.n	8005504 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054f8:	f043 0202 	orr.w	r2, r3, #2
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
  }
}
 8005504:	4618      	mov	r0, r3
 8005506:	371c      	adds	r7, #28
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b01      	cmp	r3, #1
 8005522:	d111      	bne.n	8005548 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	699a      	ldr	r2, [r3, #24]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0201 	bic.w	r2, r2, #1
 800553a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8005544:	2300      	movs	r3, #0
 8005546:	e008      	b.n	800555a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800554e:	f043 0204 	orr.w	r2, r3, #4
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
  }
}
 800555a:	4618      	mov	r0, r3
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b086      	sub	sp, #24
 800556a:	af00      	add	r7, sp, #0
 800556c:	60f8      	str	r0, [r7, #12]
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d141      	bne.n	8005602 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005586:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d109      	bne.n	80055a2 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005594:	f043 0220 	orr.w	r2, r3, #32
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e038      	b.n	8005614 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80055aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d009      	beq.n	80055c6 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055b8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e026      	b.n	8005614 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80055ce:	0c1b      	lsrs	r3, r3, #16
 80055d0:	f003 031f 	and.w	r3, r3, #31
 80055d4:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	68b9      	ldr	r1, [r7, #8]
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f000 fe93 	bl	8006308 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2101      	movs	r1, #1
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	fa01 f202 	lsl.w	r2, r1, r2
 80055ee:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80055f2:	2201      	movs	r2, #1
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	409a      	lsls	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 80055fe:	2300      	movs	r3, #0
 8005600:	e008      	b.n	8005614 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005608:	f043 0208 	orr.w	r2, r3, #8
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
  }
}
 8005614:	4618      	mov	r0, r3
 8005616:	3718      	adds	r7, #24
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800561c:	b480      	push	{r7}
 800561e:	b08b      	sub	sp, #44	@ 0x2c
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
 8005628:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800562a:	2300      	movs	r3, #0
 800562c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005634:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005636:	7efb      	ldrb	r3, [r7, #27]
 8005638:	2b02      	cmp	r3, #2
 800563a:	f040 8149 	bne.w	80058d0 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2b40      	cmp	r3, #64	@ 0x40
 8005642:	d14c      	bne.n	80056de <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800564c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d109      	bne.n	8005668 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800565a:	f043 0220 	orr.w	r2, r3, #32
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e13c      	b.n	80058e2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005670:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005674:	2b00      	cmp	r3, #0
 8005676:	d109      	bne.n	800568c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800567e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e12a      	b.n	80058e2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005694:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005698:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800569c:	d10a      	bne.n	80056b4 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80056a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056ae:	d101      	bne.n	80056b4 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80056b0:	2301      	movs	r3, #1
 80056b2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80056bc:	0a1b      	lsrs	r3, r3, #8
 80056be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056c2:	69fa      	ldr	r2, [r7, #28]
 80056c4:	4413      	add	r3, r2
 80056c6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056d0:	69f9      	ldr	r1, [r7, #28]
 80056d2:	fb01 f303 	mul.w	r3, r1, r3
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	627b      	str	r3, [r7, #36]	@ 0x24
 80056dc:	e068      	b.n	80057b0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2b41      	cmp	r3, #65	@ 0x41
 80056e2:	d14c      	bne.n	800577e <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80056ec:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d109      	bne.n	8005708 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056fa:	f043 0220 	orr.w	r2, r3, #32
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e0ec      	b.n	80058e2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005710:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005714:	2b00      	cmp	r3, #0
 8005716:	d109      	bne.n	800572c <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800571e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e0da      	b.n	80058e2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005734:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005738:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800573c:	d10a      	bne.n	8005754 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005746:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800574a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800574e:	d101      	bne.n	8005754 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005750:	2301      	movs	r3, #1
 8005752:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800575c:	0a1b      	lsrs	r3, r3, #8
 800575e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005762:	69fa      	ldr	r2, [r7, #28]
 8005764:	4413      	add	r3, r2
 8005766:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005770:	69f9      	ldr	r1, [r7, #28]
 8005772:	fb01 f303 	mul.w	r3, r1, r3
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	627b      	str	r3, [r7, #36]	@ 0x24
 800577c:	e018      	b.n	80057b0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	429a      	cmp	r2, r3
 8005786:	d309      	bcc.n	800579c <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800578e:	f043 0220 	orr.w	r2, r3, #32
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e0a2      	b.n	80058e2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a4:	68b9      	ldr	r1, [r7, #8]
 80057a6:	fb01 f303 	mul.w	r3, r1, r3
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80057b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d107      	bne.n	80057d4 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80057c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	0c9b      	lsrs	r3, r3, #18
 80057ca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	e005      	b.n	80057e0 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80057d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80057e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80057ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80057f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fa:	3304      	adds	r3, #4
 80057fc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80057fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	b29a      	uxth	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	0c1b      	lsrs	r3, r3, #16
 800580e:	f003 020f 	and.w	r2, r3, #15
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800582e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	0e1b      	lsrs	r3, r3, #24
 8005834:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800583c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	0fda      	lsrs	r2, r3, #31
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005848:	3304      	adds	r3, #4
 800584a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800584c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005850:	2300      	movs	r3, #0
 8005852:	623b      	str	r3, [r7, #32]
 8005854:	e00a      	b.n	800586c <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	441a      	add	r2, r3
 800585c:	6839      	ldr	r1, [r7, #0]
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	440b      	add	r3, r1
 8005862:	7812      	ldrb	r2, [r2, #0]
 8005864:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	3301      	adds	r3, #1
 800586a:	623b      	str	r3, [r7, #32]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	4a1f      	ldr	r2, [pc, #124]	@ (80058f0 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8005872:	5cd3      	ldrb	r3, [r2, r3]
 8005874:	461a      	mov	r2, r3
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	4293      	cmp	r3, r2
 800587a:	d3ec      	bcc.n	8005856 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2b40      	cmp	r3, #64	@ 0x40
 8005880:	d105      	bne.n	800588e <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	69fa      	ldr	r2, [r7, #28]
 8005888:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800588c:	e01e      	b.n	80058cc <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2b41      	cmp	r3, #65	@ 0x41
 8005892:	d105      	bne.n	80058a0 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69fa      	ldr	r2, [r7, #28]
 800589a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800589e:	e015      	b.n	80058cc <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2b1f      	cmp	r3, #31
 80058a4:	d808      	bhi.n	80058b8 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2101      	movs	r1, #1
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	fa01 f202 	lsl.w	r2, r1, r2
 80058b2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80058b6:	e009      	b.n	80058cc <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f003 021f 	and.w	r2, r3, #31
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2101      	movs	r1, #1
 80058c4:	fa01 f202 	lsl.w	r2, r1, r2
 80058c8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80058cc:	2300      	movs	r3, #0
 80058ce:	e008      	b.n	80058e2 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058d6:	f043 0208 	orr.w	r2, r3, #8
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
  }
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	372c      	adds	r7, #44	@ 0x2c
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	0800cf88 	.word	0x0800cf88

080058f4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005906:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005908:	7dfb      	ldrb	r3, [r7, #23]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d002      	beq.n	8005914 <HAL_FDCAN_ActivateNotification+0x20>
 800590e:	7dfb      	ldrb	r3, [r7, #23]
 8005910:	2b02      	cmp	r3, #2
 8005912:	d155      	bne.n	80059c0 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	4013      	ands	r3, r2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d108      	bne.n	8005934 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f042 0201 	orr.w	r2, r2, #1
 8005930:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005932:	e014      	b.n	800595e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	4013      	ands	r3, r2
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	429a      	cmp	r2, r3
 8005942:	d108      	bne.n	8005956 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f042 0202 	orr.w	r2, r2, #2
 8005952:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005954:	e003      	b.n	800595e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2203      	movs	r2, #3
 800595c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005964:	2b00      	cmp	r3, #0
 8005966:	d009      	beq.n	800597c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	430a      	orrs	r2, r1
 8005978:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005982:	2b00      	cmp	r3, #0
 8005984:	d009      	beq.n	800599a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	430a      	orrs	r2, r1
 8005996:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	4b0f      	ldr	r3, [pc, #60]	@ (80059e0 <HAL_FDCAN_ActivateNotification+0xec>)
 80059a4:	4013      	ands	r3, r2
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	6812      	ldr	r2, [r2, #0]
 80059aa:	430b      	orrs	r3, r1
 80059ac:	6553      	str	r3, [r2, #84]	@ 0x54
 80059ae:	4b0d      	ldr	r3, [pc, #52]	@ (80059e4 <HAL_FDCAN_ActivateNotification+0xf0>)
 80059b0:	695a      	ldr	r2, [r3, #20]
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	0f9b      	lsrs	r3, r3, #30
 80059b6:	490b      	ldr	r1, [pc, #44]	@ (80059e4 <HAL_FDCAN_ActivateNotification+0xf0>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80059bc:	2300      	movs	r3, #0
 80059be:	e008      	b.n	80059d2 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059c6:	f043 0202 	orr.w	r2, r3, #2
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
  }
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	371c      	adds	r7, #28
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	3fcfffff 	.word	0x3fcfffff
 80059e4:	4000a800 	.word	0x4000a800

080059e8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b096      	sub	sp, #88	@ 0x58
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80059f0:	4b9a      	ldr	r3, [pc, #616]	@ (8005c5c <HAL_FDCAN_IRQHandler+0x274>)
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	079b      	lsls	r3, r3, #30
 80059f6:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80059f8:	4b98      	ldr	r3, [pc, #608]	@ (8005c5c <HAL_FDCAN_IRQHandler+0x274>)
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	079b      	lsls	r3, r3, #30
 80059fe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005a00:	4013      	ands	r3, r2
 8005a02:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a0a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005a0e:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a16:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005a18:	4013      	ands	r3, r2
 8005a1a:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a22:	f003 030f 	and.w	r3, r3, #15
 8005a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a30:	4013      	ands	r3, r2
 8005a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a48:	4013      	ands	r3, r2
 8005a4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a52:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8005a56:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a60:	4013      	ands	r3, r2
 8005a62:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a6a:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8005a6e:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a78:	4013      	ands	r3, r2
 8005a7a:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a8a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a8e:	0a1b      	lsrs	r3, r3, #8
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d010      	beq.n	8005aba <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a9a:	0a1b      	lsrs	r3, r3, #8
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00a      	beq.n	8005aba <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005aac:	651a      	str	r2, [r3, #80]	@ 0x50
 8005aae:	4b6b      	ldr	r3, [pc, #428]	@ (8005c5c <HAL_FDCAN_IRQHandler+0x274>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fa54 	bl	8005f62 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005abc:	0a9b      	lsrs	r3, r3, #10
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d01d      	beq.n	8005b02 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac8:	0a9b      	lsrs	r3, r3, #10
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d017      	beq.n	8005b02 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005ada:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ae4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005af2:	651a      	str	r2, [r3, #80]	@ 0x50
 8005af4:	4b59      	ldr	r3, [pc, #356]	@ (8005c5c <HAL_FDCAN_IRQHandler+0x274>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005afa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fa07 	bl	8005f10 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00d      	beq.n	8005b24 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b0e:	4b54      	ldr	r3, [pc, #336]	@ (8005c60 <HAL_FDCAN_IRQHandler+0x278>)
 8005b10:	400b      	ands	r3, r1
 8005b12:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b14:	4a51      	ldr	r2, [pc, #324]	@ (8005c5c <HAL_FDCAN_IRQHandler+0x274>)
 8005b16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b18:	0f9b      	lsrs	r3, r3, #30
 8005b1a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005b1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f9c0 	bl	8005ea4 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005b24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00d      	beq.n	8005b46 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005b30:	4b4b      	ldr	r3, [pc, #300]	@ (8005c60 <HAL_FDCAN_IRQHandler+0x278>)
 8005b32:	400b      	ands	r3, r1
 8005b34:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b36:	4a49      	ldr	r2, [pc, #292]	@ (8005c5c <HAL_FDCAN_IRQHandler+0x274>)
 8005b38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b3a:	0f9b      	lsrs	r3, r3, #30
 8005b3c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005b3e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f9ba 	bl	8005eba <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005b46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00d      	beq.n	8005b68 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005b52:	4b43      	ldr	r3, [pc, #268]	@ (8005c60 <HAL_FDCAN_IRQHandler+0x278>)
 8005b54:	400b      	ands	r3, r1
 8005b56:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b58:	4a40      	ldr	r2, [pc, #256]	@ (8005c5c <HAL_FDCAN_IRQHandler+0x274>)
 8005b5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b5c:	0f9b      	lsrs	r3, r3, #30
 8005b5e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005b60:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7fc f958 	bl	8001e18 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005b68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00d      	beq.n	8005b8a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005b74:	4b3a      	ldr	r3, [pc, #232]	@ (8005c60 <HAL_FDCAN_IRQHandler+0x278>)
 8005b76:	400b      	ands	r3, r1
 8005b78:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b7a:	4a38      	ldr	r2, [pc, #224]	@ (8005c5c <HAL_FDCAN_IRQHandler+0x274>)
 8005b7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b7e:	0f9b      	lsrs	r3, r3, #30
 8005b80:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005b82:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 f9a3 	bl	8005ed0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005b8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b8c:	0adb      	lsrs	r3, r3, #11
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d010      	beq.n	8005bb8 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b98:	0adb      	lsrs	r3, r3, #11
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00a      	beq.n	8005bb8 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005baa:	651a      	str	r2, [r3, #80]	@ 0x50
 8005bac:	4b2b      	ldr	r3, [pc, #172]	@ (8005c5c <HAL_FDCAN_IRQHandler+0x274>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f997 	bl	8005ee6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8005bb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bba:	0a5b      	lsrs	r3, r3, #9
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d01d      	beq.n	8005c00 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc6:	0a5b      	lsrs	r3, r3, #9
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d017      	beq.n	8005c00 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005bd8:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005be4:	4013      	ands	r3, r2
 8005be6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bf0:	651a      	str	r2, [r3, #80]	@ 0x50
 8005bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8005c5c <HAL_FDCAN_IRQHandler+0x274>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005bf8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f97d 	bl	8005efa <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c02:	0cdb      	lsrs	r3, r3, #19
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d010      	beq.n	8005c2e <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c0e:	0cdb      	lsrs	r3, r3, #19
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00a      	beq.n	8005c2e <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005c20:	651a      	str	r2, [r3, #80]	@ 0x50
 8005c22:	4b0e      	ldr	r3, [pc, #56]	@ (8005c5c <HAL_FDCAN_IRQHandler+0x274>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f97c 	bl	8005f26 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c30:	0c1b      	lsrs	r3, r3, #16
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d016      	beq.n	8005c68 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3c:	0c1b      	lsrs	r3, r3, #16
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d010      	beq.n	8005c68 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005c4e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005c50:	4b02      	ldr	r3, [pc, #8]	@ (8005c5c <HAL_FDCAN_IRQHandler+0x274>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	e004      	b.n	8005c64 <HAL_FDCAN_IRQHandler+0x27c>
 8005c5a:	bf00      	nop
 8005c5c:	4000a800 	.word	0x4000a800
 8005c60:	3fcfffff 	.word	0x3fcfffff
 8005c64:	f000 f969 	bl	8005f3a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c6a:	0c9b      	lsrs	r3, r3, #18
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d010      	beq.n	8005c96 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c76:	0c9b      	lsrs	r3, r3, #18
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00a      	beq.n	8005c96 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005c88:	651a      	str	r2, [r3, #80]	@ 0x50
 8005c8a:	4b83      	ldr	r3, [pc, #524]	@ (8005e98 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f95c 	bl	8005f4e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c98:	0c5b      	lsrs	r3, r3, #17
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d015      	beq.n	8005cce <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca4:	0c5b      	lsrs	r3, r3, #17
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00f      	beq.n	8005cce <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005cb6:	651a      	str	r2, [r3, #80]	@ 0x50
 8005cb8:	4b77      	ldr	r3, [pc, #476]	@ (8005e98 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cc4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005cce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00d      	beq.n	8005cf0 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005cda:	4b70      	ldr	r3, [pc, #448]	@ (8005e9c <HAL_FDCAN_IRQHandler+0x4b4>)
 8005cdc:	400b      	ands	r3, r1
 8005cde:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ce0:	4a6d      	ldr	r2, [pc, #436]	@ (8005e98 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005ce2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ce4:	0f9b      	lsrs	r3, r3, #30
 8005ce6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005ce8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f94d 	bl	8005f8a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005cf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d011      	beq.n	8005d1a <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005cfc:	4b67      	ldr	r3, [pc, #412]	@ (8005e9c <HAL_FDCAN_IRQHandler+0x4b4>)
 8005cfe:	400b      	ands	r3, r1
 8005d00:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d02:	4a65      	ldr	r2, [pc, #404]	@ (8005e98 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005d04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d06:	0f9b      	lsrs	r3, r3, #30
 8005d08:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005d10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d12:	431a      	orrs	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a60      	ldr	r2, [pc, #384]	@ (8005ea0 <HAL_FDCAN_IRQHandler+0x4b8>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	f040 80ac 	bne.w	8005e7e <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f003 0303 	and.w	r3, r3, #3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 80a4 	beq.w	8005e7e <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	f003 030f 	and.w	r3, r3, #15
 8005d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d58:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d62:	4013      	ands	r3, r2
 8005d64:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005d70:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8005d88:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d90:	6a3a      	ldr	r2, [r7, #32]
 8005d92:	4013      	ands	r3, r2
 8005d94:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8005da0:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da8:	69fa      	ldr	r2, [r7, #28]
 8005daa:	4013      	ands	r3, r2
 8005dac:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db4:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	6a1b      	ldr	r3, [r3, #32]
 8005dbc:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d007      	beq.n	8005dd4 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dca:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005dcc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f8e6 	bl	8005fa0 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d007      	beq.n	8005dea <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005de0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005de2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f8e6 	bl	8005fb6 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	099b      	lsrs	r3, r3, #6
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d01a      	beq.n	8005e2c <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	099b      	lsrs	r3, r3, #6
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d014      	beq.n	8005e2c <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e08:	0c1b      	lsrs	r3, r3, #16
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e18:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	2240      	movs	r2, #64	@ 0x40
 8005e20:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	6939      	ldr	r1, [r7, #16]
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f8d0 	bl	8005fcc <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d007      	beq.n	8005e42 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e38:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005e3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f8d1 	bl	8005fe4 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005e42:	6a3b      	ldr	r3, [r7, #32]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00b      	beq.n	8005e60 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	6a3a      	ldr	r2, [r7, #32]
 8005e4e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005e56:	6a3b      	ldr	r3, [r7, #32]
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00b      	beq.n	8005e7e <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	69fa      	ldr	r2, [r7, #28]
 8005e6c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	431a      	orrs	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d002      	beq.n	8005e8e <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f874 	bl	8005f76 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005e8e:	bf00      	nop
 8005e90:	3758      	adds	r7, #88	@ 0x58
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	4000a800 	.word	0x4000a800
 8005e9c:	3fcfffff 	.word	0x3fcfffff
 8005ea0:	4000a000 	.word	0x4000a000

08005ea4 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b083      	sub	sp, #12
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
 8005ec2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005eda:	bf00      	nop
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b083      	sub	sp, #12
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005eee:	bf00      	nop
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b083      	sub	sp, #12
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
 8005f02:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005f1a:	bf00      	nop
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b083      	sub	sp, #12
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005f2e:	bf00      	nop
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b083      	sub	sp, #12
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005f42:	bf00      	nop
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b083      	sub	sp, #12
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005f56:	bf00      	nop
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b083      	sub	sp, #12
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005f6a:	bf00      	nop
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b083      	sub	sp, #12
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005f7e:	bf00      	nop
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b083      	sub	sp, #12
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005fd8:	bf00      	nop
 8005fda:	3714      	adds	r7, #20
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8005fee:	bf00      	nop
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
	...

08005ffc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006008:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006012:	4ba7      	ldr	r3, [pc, #668]	@ (80062b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006014:	4013      	ands	r3, r2
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	0091      	lsls	r1, r2, #2
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	6812      	ldr	r2, [r2, #0]
 800601e:	430b      	orrs	r3, r1
 8006020:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800602c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006034:	041a      	lsls	r2, r3, #16
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	4413      	add	r3, r2
 8006048:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006052:	4b97      	ldr	r3, [pc, #604]	@ (80062b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006054:	4013      	ands	r3, r2
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	0091      	lsls	r1, r2, #2
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	6812      	ldr	r2, [r2, #0]
 800605e:	430b      	orrs	r3, r1
 8006060:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800606c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006074:	041a      	lsls	r2, r3, #16
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006084:	005b      	lsls	r3, r3, #1
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	4413      	add	r3, r2
 800608a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006094:	4b86      	ldr	r3, [pc, #536]	@ (80062b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006096:	4013      	ands	r3, r2
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	0091      	lsls	r1, r2, #2
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	6812      	ldr	r2, [r2, #0]
 80060a0:	430b      	orrs	r3, r1
 80060a2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80060ae:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b6:	041a      	lsls	r2, r3, #16
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	430a      	orrs	r2, r1
 80060be:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80060ca:	fb02 f303 	mul.w	r3, r2, r3
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	4413      	add	r3, r2
 80060d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80060dc:	4b74      	ldr	r3, [pc, #464]	@ (80062b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80060de:	4013      	ands	r3, r2
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	0091      	lsls	r1, r2, #2
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	6812      	ldr	r2, [r2, #0]
 80060e8:	430b      	orrs	r3, r1
 80060ea:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80060f6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060fe:	041a      	lsls	r2, r3, #16
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006112:	fb02 f303 	mul.w	r3, r2, r3
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	4413      	add	r3, r2
 800611a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8006124:	4b62      	ldr	r3, [pc, #392]	@ (80062b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006126:	4013      	ands	r3, r2
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	0091      	lsls	r1, r2, #2
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	6812      	ldr	r2, [r2, #0]
 8006130:	430b      	orrs	r3, r1
 8006132:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800613e:	fb02 f303 	mul.w	r3, r2, r3
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	4413      	add	r3, r2
 8006146:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8006150:	4b57      	ldr	r3, [pc, #348]	@ (80062b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006152:	4013      	ands	r3, r2
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	0091      	lsls	r1, r2, #2
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	6812      	ldr	r2, [r2, #0]
 800615c:	430b      	orrs	r3, r1
 800615e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800616a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006172:	041a      	lsls	r2, r3, #16
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006182:	005b      	lsls	r3, r3, #1
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	4413      	add	r3, r2
 8006188:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8006192:	4b47      	ldr	r3, [pc, #284]	@ (80062b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006194:	4013      	ands	r3, r2
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	0091      	lsls	r1, r2, #2
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	6812      	ldr	r2, [r2, #0]
 800619e:	430b      	orrs	r3, r1
 80061a0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80061ac:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061b4:	041a      	lsls	r2, r3, #16
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80061c8:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061d0:	061a      	lsls	r2, r3, #24
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061e0:	4b34      	ldr	r3, [pc, #208]	@ (80062b4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80061e2:	4413      	add	r3, r2
 80061e4:	009a      	lsls	r2, r3, #2
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	441a      	add	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	441a      	add	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006212:	6879      	ldr	r1, [r7, #4]
 8006214:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8006216:	fb01 f303 	mul.w	r3, r1, r3
 800621a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800621c:	441a      	add	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800622a:	6879      	ldr	r1, [r7, #4]
 800622c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800622e:	fb01 f303 	mul.w	r3, r1, r3
 8006232:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006234:	441a      	add	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006242:	6879      	ldr	r1, [r7, #4]
 8006244:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8006246:	fb01 f303 	mul.w	r3, r1, r3
 800624a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800624c:	441a      	add	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800625e:	00db      	lsls	r3, r3, #3
 8006260:	441a      	add	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006272:	6879      	ldr	r1, [r7, #4]
 8006274:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8006276:	fb01 f303 	mul.w	r3, r1, r3
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	441a      	add	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800628e:	6879      	ldr	r1, [r7, #4]
 8006290:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8006292:	fb01 f303 	mul.w	r3, r1, r3
 8006296:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006298:	441a      	add	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062a6:	4a04      	ldr	r2, [pc, #16]	@ (80062b8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d915      	bls.n	80062d8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80062ac:	e006      	b.n	80062bc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80062ae:	bf00      	nop
 80062b0:	ffff0003 	.word	0xffff0003
 80062b4:	10002b00 	.word	0x10002b00
 80062b8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062c2:	f043 0220 	orr.w	r2, r3, #32
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2203      	movs	r2, #3
 80062d0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e010      	b.n	80062fa <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062dc:	60fb      	str	r3, [r7, #12]
 80062de:	e005      	b.n	80062ec <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	3304      	adds	r3, #4
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d3f3      	bcc.n	80062e0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop

08006308 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8006308:	b480      	push	{r7}
 800630a:	b089      	sub	sp, #36	@ 0x24
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
 8006314:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10a      	bne.n	8006334 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006326:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800632e:	4313      	orrs	r3, r2
 8006330:	61fb      	str	r3, [r7, #28]
 8006332:	e00a      	b.n	800634a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800633c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006342:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006344:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006348:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006354:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800635a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006360:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006368:	4313      	orrs	r3, r2
 800636a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006376:	6839      	ldr	r1, [r7, #0]
 8006378:	fb01 f303 	mul.w	r3, r1, r3
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	69fa      	ldr	r2, [r7, #28]
 8006386:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	3304      	adds	r3, #4
 800638c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	3304      	adds	r3, #4
 8006398:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800639a:	2300      	movs	r3, #0
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	e020      	b.n	80063e2 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	3303      	adds	r3, #3
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	4413      	add	r3, r2
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	3302      	adds	r3, #2
 80063b0:	6879      	ldr	r1, [r7, #4]
 80063b2:	440b      	add	r3, r1
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80063b8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	3301      	adds	r3, #1
 80063be:	6879      	ldr	r1, [r7, #4]
 80063c0:	440b      	add	r3, r1
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80063c6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80063c8:	6879      	ldr	r1, [r7, #4]
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	440a      	add	r2, r1
 80063ce:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80063d0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	3304      	adds	r3, #4
 80063da:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	3304      	adds	r3, #4
 80063e0:	617b      	str	r3, [r7, #20]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	4a06      	ldr	r2, [pc, #24]	@ (8006400 <FDCAN_CopyMessageToRAM+0xf8>)
 80063e8:	5cd3      	ldrb	r3, [r2, r3]
 80063ea:	461a      	mov	r2, r3
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d3d6      	bcc.n	80063a0 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 80063f2:	bf00      	nop
 80063f4:	bf00      	nop
 80063f6:	3724      	adds	r7, #36	@ 0x24
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr
 8006400:	0800cf88 	.word	0x0800cf88

08006404 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006404:	b480      	push	{r7}
 8006406:	b089      	sub	sp, #36	@ 0x24
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800640e:	2300      	movs	r3, #0
 8006410:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006412:	4b86      	ldr	r3, [pc, #536]	@ (800662c <HAL_GPIO_Init+0x228>)
 8006414:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006416:	e18c      	b.n	8006732 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	2101      	movs	r1, #1
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	fa01 f303 	lsl.w	r3, r1, r3
 8006424:	4013      	ands	r3, r2
 8006426:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	f000 817e 	beq.w	800672c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f003 0303 	and.w	r3, r3, #3
 8006438:	2b01      	cmp	r3, #1
 800643a:	d005      	beq.n	8006448 <HAL_GPIO_Init+0x44>
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f003 0303 	and.w	r3, r3, #3
 8006444:	2b02      	cmp	r3, #2
 8006446:	d130      	bne.n	80064aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	2203      	movs	r2, #3
 8006454:	fa02 f303 	lsl.w	r3, r2, r3
 8006458:	43db      	mvns	r3, r3
 800645a:	69ba      	ldr	r2, [r7, #24]
 800645c:	4013      	ands	r3, r2
 800645e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	fa02 f303 	lsl.w	r3, r2, r3
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	4313      	orrs	r3, r2
 8006470:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800647e:	2201      	movs	r2, #1
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	fa02 f303 	lsl.w	r3, r2, r3
 8006486:	43db      	mvns	r3, r3
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	4013      	ands	r3, r2
 800648c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	091b      	lsrs	r3, r3, #4
 8006494:	f003 0201 	and.w	r2, r3, #1
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	fa02 f303 	lsl.w	r3, r2, r3
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f003 0303 	and.w	r3, r3, #3
 80064b2:	2b03      	cmp	r3, #3
 80064b4:	d017      	beq.n	80064e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	005b      	lsls	r3, r3, #1
 80064c0:	2203      	movs	r2, #3
 80064c2:	fa02 f303 	lsl.w	r3, r2, r3
 80064c6:	43db      	mvns	r3, r3
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	4013      	ands	r3, r2
 80064cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	689a      	ldr	r2, [r3, #8]
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	fa02 f303 	lsl.w	r3, r2, r3
 80064da:	69ba      	ldr	r2, [r7, #24]
 80064dc:	4313      	orrs	r3, r2
 80064de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	69ba      	ldr	r2, [r7, #24]
 80064e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f003 0303 	and.w	r3, r3, #3
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d123      	bne.n	800653a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	08da      	lsrs	r2, r3, #3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	3208      	adds	r2, #8
 80064fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	f003 0307 	and.w	r3, r3, #7
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	220f      	movs	r2, #15
 800650a:	fa02 f303 	lsl.w	r3, r2, r3
 800650e:	43db      	mvns	r3, r3
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	4013      	ands	r3, r2
 8006514:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	691a      	ldr	r2, [r3, #16]
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	f003 0307 	and.w	r3, r3, #7
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	fa02 f303 	lsl.w	r3, r2, r3
 8006526:	69ba      	ldr	r2, [r7, #24]
 8006528:	4313      	orrs	r3, r2
 800652a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	08da      	lsrs	r2, r3, #3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	3208      	adds	r2, #8
 8006534:	69b9      	ldr	r1, [r7, #24]
 8006536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	005b      	lsls	r3, r3, #1
 8006544:	2203      	movs	r2, #3
 8006546:	fa02 f303 	lsl.w	r3, r2, r3
 800654a:	43db      	mvns	r3, r3
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	4013      	ands	r3, r2
 8006550:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f003 0203 	and.w	r2, r3, #3
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	005b      	lsls	r3, r3, #1
 800655e:	fa02 f303 	lsl.w	r3, r2, r3
 8006562:	69ba      	ldr	r2, [r7, #24]
 8006564:	4313      	orrs	r3, r2
 8006566:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006576:	2b00      	cmp	r3, #0
 8006578:	f000 80d8 	beq.w	800672c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800657c:	4b2c      	ldr	r3, [pc, #176]	@ (8006630 <HAL_GPIO_Init+0x22c>)
 800657e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006582:	4a2b      	ldr	r2, [pc, #172]	@ (8006630 <HAL_GPIO_Init+0x22c>)
 8006584:	f043 0302 	orr.w	r3, r3, #2
 8006588:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800658c:	4b28      	ldr	r3, [pc, #160]	@ (8006630 <HAL_GPIO_Init+0x22c>)
 800658e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006592:	f003 0302 	and.w	r3, r3, #2
 8006596:	60fb      	str	r3, [r7, #12]
 8006598:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800659a:	4a26      	ldr	r2, [pc, #152]	@ (8006634 <HAL_GPIO_Init+0x230>)
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	089b      	lsrs	r3, r3, #2
 80065a0:	3302      	adds	r3, #2
 80065a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	f003 0303 	and.w	r3, r3, #3
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	220f      	movs	r2, #15
 80065b2:	fa02 f303 	lsl.w	r3, r2, r3
 80065b6:	43db      	mvns	r3, r3
 80065b8:	69ba      	ldr	r2, [r7, #24]
 80065ba:	4013      	ands	r3, r2
 80065bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006638 <HAL_GPIO_Init+0x234>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d04a      	beq.n	800665c <HAL_GPIO_Init+0x258>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a1c      	ldr	r2, [pc, #112]	@ (800663c <HAL_GPIO_Init+0x238>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d02b      	beq.n	8006626 <HAL_GPIO_Init+0x222>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a1b      	ldr	r2, [pc, #108]	@ (8006640 <HAL_GPIO_Init+0x23c>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d025      	beq.n	8006622 <HAL_GPIO_Init+0x21e>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a1a      	ldr	r2, [pc, #104]	@ (8006644 <HAL_GPIO_Init+0x240>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d01f      	beq.n	800661e <HAL_GPIO_Init+0x21a>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a19      	ldr	r2, [pc, #100]	@ (8006648 <HAL_GPIO_Init+0x244>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d019      	beq.n	800661a <HAL_GPIO_Init+0x216>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a18      	ldr	r2, [pc, #96]	@ (800664c <HAL_GPIO_Init+0x248>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d013      	beq.n	8006616 <HAL_GPIO_Init+0x212>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a17      	ldr	r2, [pc, #92]	@ (8006650 <HAL_GPIO_Init+0x24c>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d00d      	beq.n	8006612 <HAL_GPIO_Init+0x20e>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a16      	ldr	r2, [pc, #88]	@ (8006654 <HAL_GPIO_Init+0x250>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d007      	beq.n	800660e <HAL_GPIO_Init+0x20a>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a15      	ldr	r2, [pc, #84]	@ (8006658 <HAL_GPIO_Init+0x254>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d101      	bne.n	800660a <HAL_GPIO_Init+0x206>
 8006606:	2309      	movs	r3, #9
 8006608:	e029      	b.n	800665e <HAL_GPIO_Init+0x25a>
 800660a:	230a      	movs	r3, #10
 800660c:	e027      	b.n	800665e <HAL_GPIO_Init+0x25a>
 800660e:	2307      	movs	r3, #7
 8006610:	e025      	b.n	800665e <HAL_GPIO_Init+0x25a>
 8006612:	2306      	movs	r3, #6
 8006614:	e023      	b.n	800665e <HAL_GPIO_Init+0x25a>
 8006616:	2305      	movs	r3, #5
 8006618:	e021      	b.n	800665e <HAL_GPIO_Init+0x25a>
 800661a:	2304      	movs	r3, #4
 800661c:	e01f      	b.n	800665e <HAL_GPIO_Init+0x25a>
 800661e:	2303      	movs	r3, #3
 8006620:	e01d      	b.n	800665e <HAL_GPIO_Init+0x25a>
 8006622:	2302      	movs	r3, #2
 8006624:	e01b      	b.n	800665e <HAL_GPIO_Init+0x25a>
 8006626:	2301      	movs	r3, #1
 8006628:	e019      	b.n	800665e <HAL_GPIO_Init+0x25a>
 800662a:	bf00      	nop
 800662c:	58000080 	.word	0x58000080
 8006630:	58024400 	.word	0x58024400
 8006634:	58000400 	.word	0x58000400
 8006638:	58020000 	.word	0x58020000
 800663c:	58020400 	.word	0x58020400
 8006640:	58020800 	.word	0x58020800
 8006644:	58020c00 	.word	0x58020c00
 8006648:	58021000 	.word	0x58021000
 800664c:	58021400 	.word	0x58021400
 8006650:	58021800 	.word	0x58021800
 8006654:	58021c00 	.word	0x58021c00
 8006658:	58022400 	.word	0x58022400
 800665c:	2300      	movs	r3, #0
 800665e:	69fa      	ldr	r2, [r7, #28]
 8006660:	f002 0203 	and.w	r2, r2, #3
 8006664:	0092      	lsls	r2, r2, #2
 8006666:	4093      	lsls	r3, r2
 8006668:	69ba      	ldr	r2, [r7, #24]
 800666a:	4313      	orrs	r3, r2
 800666c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800666e:	4938      	ldr	r1, [pc, #224]	@ (8006750 <HAL_GPIO_Init+0x34c>)
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	089b      	lsrs	r3, r3, #2
 8006674:	3302      	adds	r3, #2
 8006676:	69ba      	ldr	r2, [r7, #24]
 8006678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800667c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	43db      	mvns	r3, r3
 8006688:	69ba      	ldr	r2, [r7, #24]
 800668a:	4013      	ands	r3, r2
 800668c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	4313      	orrs	r3, r2
 80066a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80066a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80066aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	43db      	mvns	r3, r3
 80066b6:	69ba      	ldr	r2, [r7, #24]
 80066b8:	4013      	ands	r3, r2
 80066ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d003      	beq.n	80066d0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80066c8:	69ba      	ldr	r2, [r7, #24]
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80066d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	43db      	mvns	r3, r3
 80066e2:	69ba      	ldr	r2, [r7, #24]
 80066e4:	4013      	ands	r3, r2
 80066e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d003      	beq.n	80066fc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	43db      	mvns	r3, r3
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	4013      	ands	r3, r2
 8006710:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	4313      	orrs	r3, r2
 8006724:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	69ba      	ldr	r2, [r7, #24]
 800672a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	3301      	adds	r3, #1
 8006730:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	fa22 f303 	lsr.w	r3, r2, r3
 800673c:	2b00      	cmp	r3, #0
 800673e:	f47f ae6b 	bne.w	8006418 <HAL_GPIO_Init+0x14>
  }
}
 8006742:	bf00      	nop
 8006744:	bf00      	nop
 8006746:	3724      	adds	r7, #36	@ 0x24
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	58000400 	.word	0x58000400

08006754 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	460b      	mov	r3, r1
 800675e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	691a      	ldr	r2, [r3, #16]
 8006764:	887b      	ldrh	r3, [r7, #2]
 8006766:	4013      	ands	r3, r2
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800676c:	2301      	movs	r3, #1
 800676e:	73fb      	strb	r3, [r7, #15]
 8006770:	e001      	b.n	8006776 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006772:	2300      	movs	r3, #0
 8006774:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006776:	7bfb      	ldrb	r3, [r7, #15]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3714      	adds	r7, #20
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	460b      	mov	r3, r1
 800678e:	807b      	strh	r3, [r7, #2]
 8006790:	4613      	mov	r3, r2
 8006792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006794:	787b      	ldrb	r3, [r7, #1]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800679a:	887a      	ldrh	r2, [r7, #2]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80067a0:	e003      	b.n	80067aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80067a2:	887b      	ldrh	r3, [r7, #2]
 80067a4:	041a      	lsls	r2, r3, #16
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	619a      	str	r2, [r3, #24]
}
 80067aa:	bf00      	nop
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
	...

080067b8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80067c0:	4b19      	ldr	r3, [pc, #100]	@ (8006828 <HAL_PWREx_ConfigSupply+0x70>)
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f003 0304 	and.w	r3, r3, #4
 80067c8:	2b04      	cmp	r3, #4
 80067ca:	d00a      	beq.n	80067e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80067cc:	4b16      	ldr	r3, [pc, #88]	@ (8006828 <HAL_PWREx_ConfigSupply+0x70>)
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	f003 0307 	and.w	r3, r3, #7
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d001      	beq.n	80067de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e01f      	b.n	800681e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80067de:	2300      	movs	r3, #0
 80067e0:	e01d      	b.n	800681e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80067e2:	4b11      	ldr	r3, [pc, #68]	@ (8006828 <HAL_PWREx_ConfigSupply+0x70>)
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	f023 0207 	bic.w	r2, r3, #7
 80067ea:	490f      	ldr	r1, [pc, #60]	@ (8006828 <HAL_PWREx_ConfigSupply+0x70>)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80067f2:	f7fc fb7f 	bl	8002ef4 <HAL_GetTick>
 80067f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80067f8:	e009      	b.n	800680e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80067fa:	f7fc fb7b 	bl	8002ef4 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006808:	d901      	bls.n	800680e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e007      	b.n	800681e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800680e:	4b06      	ldr	r3, [pc, #24]	@ (8006828 <HAL_PWREx_ConfigSupply+0x70>)
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006816:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800681a:	d1ee      	bne.n	80067fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	58024800 	.word	0x58024800

0800682c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b08c      	sub	sp, #48	@ 0x30
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d101      	bne.n	800683e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e3c8      	b.n	8006fd0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 8087 	beq.w	800695a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800684c:	4b88      	ldr	r3, [pc, #544]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006854:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006856:	4b86      	ldr	r3, [pc, #536]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 8006858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800685a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800685c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800685e:	2b10      	cmp	r3, #16
 8006860:	d007      	beq.n	8006872 <HAL_RCC_OscConfig+0x46>
 8006862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006864:	2b18      	cmp	r3, #24
 8006866:	d110      	bne.n	800688a <HAL_RCC_OscConfig+0x5e>
 8006868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686a:	f003 0303 	and.w	r3, r3, #3
 800686e:	2b02      	cmp	r3, #2
 8006870:	d10b      	bne.n	800688a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006872:	4b7f      	ldr	r3, [pc, #508]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d06c      	beq.n	8006958 <HAL_RCC_OscConfig+0x12c>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d168      	bne.n	8006958 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e3a2      	b.n	8006fd0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006892:	d106      	bne.n	80068a2 <HAL_RCC_OscConfig+0x76>
 8006894:	4b76      	ldr	r3, [pc, #472]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a75      	ldr	r2, [pc, #468]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 800689a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800689e:	6013      	str	r3, [r2, #0]
 80068a0:	e02e      	b.n	8006900 <HAL_RCC_OscConfig+0xd4>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10c      	bne.n	80068c4 <HAL_RCC_OscConfig+0x98>
 80068aa:	4b71      	ldr	r3, [pc, #452]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a70      	ldr	r2, [pc, #448]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 80068b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068b4:	6013      	str	r3, [r2, #0]
 80068b6:	4b6e      	ldr	r3, [pc, #440]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a6d      	ldr	r2, [pc, #436]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 80068bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068c0:	6013      	str	r3, [r2, #0]
 80068c2:	e01d      	b.n	8006900 <HAL_RCC_OscConfig+0xd4>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80068cc:	d10c      	bne.n	80068e8 <HAL_RCC_OscConfig+0xbc>
 80068ce:	4b68      	ldr	r3, [pc, #416]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a67      	ldr	r2, [pc, #412]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 80068d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80068d8:	6013      	str	r3, [r2, #0]
 80068da:	4b65      	ldr	r3, [pc, #404]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a64      	ldr	r2, [pc, #400]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 80068e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068e4:	6013      	str	r3, [r2, #0]
 80068e6:	e00b      	b.n	8006900 <HAL_RCC_OscConfig+0xd4>
 80068e8:	4b61      	ldr	r3, [pc, #388]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a60      	ldr	r2, [pc, #384]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 80068ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068f2:	6013      	str	r3, [r2, #0]
 80068f4:	4b5e      	ldr	r3, [pc, #376]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a5d      	ldr	r2, [pc, #372]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 80068fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d013      	beq.n	8006930 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006908:	f7fc faf4 	bl	8002ef4 <HAL_GetTick>
 800690c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800690e:	e008      	b.n	8006922 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006910:	f7fc faf0 	bl	8002ef4 <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	2b64      	cmp	r3, #100	@ 0x64
 800691c:	d901      	bls.n	8006922 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e356      	b.n	8006fd0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006922:	4b53      	ldr	r3, [pc, #332]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d0f0      	beq.n	8006910 <HAL_RCC_OscConfig+0xe4>
 800692e:	e014      	b.n	800695a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006930:	f7fc fae0 	bl	8002ef4 <HAL_GetTick>
 8006934:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006936:	e008      	b.n	800694a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006938:	f7fc fadc 	bl	8002ef4 <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	2b64      	cmp	r3, #100	@ 0x64
 8006944:	d901      	bls.n	800694a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e342      	b.n	8006fd0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800694a:	4b49      	ldr	r3, [pc, #292]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1f0      	bne.n	8006938 <HAL_RCC_OscConfig+0x10c>
 8006956:	e000      	b.n	800695a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b00      	cmp	r3, #0
 8006964:	f000 808c 	beq.w	8006a80 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006968:	4b41      	ldr	r3, [pc, #260]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006970:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006972:	4b3f      	ldr	r3, [pc, #252]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 8006974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006976:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006978:	6a3b      	ldr	r3, [r7, #32]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d007      	beq.n	800698e <HAL_RCC_OscConfig+0x162>
 800697e:	6a3b      	ldr	r3, [r7, #32]
 8006980:	2b18      	cmp	r3, #24
 8006982:	d137      	bne.n	80069f4 <HAL_RCC_OscConfig+0x1c8>
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	f003 0303 	and.w	r3, r3, #3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d132      	bne.n	80069f4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800698e:	4b38      	ldr	r3, [pc, #224]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0304 	and.w	r3, r3, #4
 8006996:	2b00      	cmp	r3, #0
 8006998:	d005      	beq.n	80069a6 <HAL_RCC_OscConfig+0x17a>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e314      	b.n	8006fd0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80069a6:	4b32      	ldr	r3, [pc, #200]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f023 0219 	bic.w	r2, r3, #25
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	492f      	ldr	r1, [pc, #188]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b8:	f7fc fa9c 	bl	8002ef4 <HAL_GetTick>
 80069bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069be:	e008      	b.n	80069d2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069c0:	f7fc fa98 	bl	8002ef4 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e2fe      	b.n	8006fd0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069d2:	4b27      	ldr	r3, [pc, #156]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0304 	and.w	r3, r3, #4
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d0f0      	beq.n	80069c0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069de:	4b24      	ldr	r3, [pc, #144]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	061b      	lsls	r3, r3, #24
 80069ec:	4920      	ldr	r1, [pc, #128]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069f2:	e045      	b.n	8006a80 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d026      	beq.n	8006a4a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80069fc:	4b1c      	ldr	r3, [pc, #112]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f023 0219 	bic.w	r2, r3, #25
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	4919      	ldr	r1, [pc, #100]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a0e:	f7fc fa71 	bl	8002ef4 <HAL_GetTick>
 8006a12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a14:	e008      	b.n	8006a28 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a16:	f7fc fa6d 	bl	8002ef4 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d901      	bls.n	8006a28 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e2d3      	b.n	8006fd0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a28:	4b11      	ldr	r3, [pc, #68]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0304 	and.w	r3, r3, #4
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d0f0      	beq.n	8006a16 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a34:	4b0e      	ldr	r3, [pc, #56]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	061b      	lsls	r3, r3, #24
 8006a42:	490b      	ldr	r1, [pc, #44]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	604b      	str	r3, [r1, #4]
 8006a48:	e01a      	b.n	8006a80 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a4a:	4b09      	ldr	r3, [pc, #36]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a08      	ldr	r2, [pc, #32]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 8006a50:	f023 0301 	bic.w	r3, r3, #1
 8006a54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a56:	f7fc fa4d 	bl	8002ef4 <HAL_GetTick>
 8006a5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a5c:	e00a      	b.n	8006a74 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a5e:	f7fc fa49 	bl	8002ef4 <HAL_GetTick>
 8006a62:	4602      	mov	r2, r0
 8006a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d903      	bls.n	8006a74 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e2af      	b.n	8006fd0 <HAL_RCC_OscConfig+0x7a4>
 8006a70:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a74:	4b96      	ldr	r3, [pc, #600]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0304 	and.w	r3, r3, #4
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1ee      	bne.n	8006a5e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0310 	and.w	r3, r3, #16
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d06a      	beq.n	8006b62 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a8c:	4b90      	ldr	r3, [pc, #576]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a94:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a96:	4b8e      	ldr	r3, [pc, #568]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a9a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	2b08      	cmp	r3, #8
 8006aa0:	d007      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x286>
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	2b18      	cmp	r3, #24
 8006aa6:	d11b      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x2b4>
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	f003 0303 	and.w	r3, r3, #3
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d116      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ab2:	4b87      	ldr	r3, [pc, #540]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d005      	beq.n	8006aca <HAL_RCC_OscConfig+0x29e>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	2b80      	cmp	r3, #128	@ 0x80
 8006ac4:	d001      	beq.n	8006aca <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e282      	b.n	8006fd0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006aca:	4b81      	ldr	r3, [pc, #516]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	061b      	lsls	r3, r3, #24
 8006ad8:	497d      	ldr	r1, [pc, #500]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ade:	e040      	b.n	8006b62 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d023      	beq.n	8006b30 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006ae8:	4b79      	ldr	r3, [pc, #484]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a78      	ldr	r2, [pc, #480]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006aee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006af2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af4:	f7fc f9fe 	bl	8002ef4 <HAL_GetTick>
 8006af8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006afa:	e008      	b.n	8006b0e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006afc:	f7fc f9fa 	bl	8002ef4 <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d901      	bls.n	8006b0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e260      	b.n	8006fd0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b0e:	4b70      	ldr	r3, [pc, #448]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d0f0      	beq.n	8006afc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b1a:	4b6d      	ldr	r3, [pc, #436]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	061b      	lsls	r3, r3, #24
 8006b28:	4969      	ldr	r1, [pc, #420]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	60cb      	str	r3, [r1, #12]
 8006b2e:	e018      	b.n	8006b62 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006b30:	4b67      	ldr	r3, [pc, #412]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a66      	ldr	r2, [pc, #408]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006b36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b3c:	f7fc f9da 	bl	8002ef4 <HAL_GetTick>
 8006b40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006b42:	e008      	b.n	8006b56 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006b44:	f7fc f9d6 	bl	8002ef4 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e23c      	b.n	8006fd0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006b56:	4b5e      	ldr	r3, [pc, #376]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1f0      	bne.n	8006b44 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0308 	and.w	r3, r3, #8
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d036      	beq.n	8006bdc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d019      	beq.n	8006baa <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b76:	4b56      	ldr	r3, [pc, #344]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006b78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b7a:	4a55      	ldr	r2, [pc, #340]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006b7c:	f043 0301 	orr.w	r3, r3, #1
 8006b80:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b82:	f7fc f9b7 	bl	8002ef4 <HAL_GetTick>
 8006b86:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b88:	e008      	b.n	8006b9c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b8a:	f7fc f9b3 	bl	8002ef4 <HAL_GetTick>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d901      	bls.n	8006b9c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e219      	b.n	8006fd0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b9c:	4b4c      	ldr	r3, [pc, #304]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006b9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ba0:	f003 0302 	and.w	r3, r3, #2
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d0f0      	beq.n	8006b8a <HAL_RCC_OscConfig+0x35e>
 8006ba8:	e018      	b.n	8006bdc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006baa:	4b49      	ldr	r3, [pc, #292]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bae:	4a48      	ldr	r2, [pc, #288]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006bb0:	f023 0301 	bic.w	r3, r3, #1
 8006bb4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bb6:	f7fc f99d 	bl	8002ef4 <HAL_GetTick>
 8006bba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006bbc:	e008      	b.n	8006bd0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bbe:	f7fc f999 	bl	8002ef4 <HAL_GetTick>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d901      	bls.n	8006bd0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e1ff      	b.n	8006fd0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006bd0:	4b3f      	ldr	r3, [pc, #252]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006bd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bd4:	f003 0302 	and.w	r3, r3, #2
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1f0      	bne.n	8006bbe <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0320 	and.w	r3, r3, #32
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d036      	beq.n	8006c56 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d019      	beq.n	8006c24 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006bf0:	4b37      	ldr	r3, [pc, #220]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a36      	ldr	r2, [pc, #216]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006bf6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006bfa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006bfc:	f7fc f97a 	bl	8002ef4 <HAL_GetTick>
 8006c00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c02:	e008      	b.n	8006c16 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c04:	f7fc f976 	bl	8002ef4 <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d901      	bls.n	8006c16 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e1dc      	b.n	8006fd0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c16:	4b2e      	ldr	r3, [pc, #184]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d0f0      	beq.n	8006c04 <HAL_RCC_OscConfig+0x3d8>
 8006c22:	e018      	b.n	8006c56 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006c24:	4b2a      	ldr	r3, [pc, #168]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a29      	ldr	r2, [pc, #164]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006c2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c2e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006c30:	f7fc f960 	bl	8002ef4 <HAL_GetTick>
 8006c34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006c36:	e008      	b.n	8006c4a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c38:	f7fc f95c 	bl	8002ef4 <HAL_GetTick>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d901      	bls.n	8006c4a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e1c2      	b.n	8006fd0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006c4a:	4b21      	ldr	r3, [pc, #132]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1f0      	bne.n	8006c38 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0304 	and.w	r3, r3, #4
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 8086 	beq.w	8006d70 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006c64:	4b1b      	ldr	r3, [pc, #108]	@ (8006cd4 <HAL_RCC_OscConfig+0x4a8>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a1a      	ldr	r2, [pc, #104]	@ (8006cd4 <HAL_RCC_OscConfig+0x4a8>)
 8006c6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c70:	f7fc f940 	bl	8002ef4 <HAL_GetTick>
 8006c74:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c76:	e008      	b.n	8006c8a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c78:	f7fc f93c 	bl	8002ef4 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b64      	cmp	r3, #100	@ 0x64
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e1a2      	b.n	8006fd0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c8a:	4b12      	ldr	r3, [pc, #72]	@ (8006cd4 <HAL_RCC_OscConfig+0x4a8>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d0f0      	beq.n	8006c78 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d106      	bne.n	8006cac <HAL_RCC_OscConfig+0x480>
 8006c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ca2:	4a0b      	ldr	r2, [pc, #44]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006ca4:	f043 0301 	orr.w	r3, r3, #1
 8006ca8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006caa:	e032      	b.n	8006d12 <HAL_RCC_OscConfig+0x4e6>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d111      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x4ac>
 8006cb4:	4b06      	ldr	r3, [pc, #24]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cb8:	4a05      	ldr	r2, [pc, #20]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006cba:	f023 0301 	bic.w	r3, r3, #1
 8006cbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cc0:	4b03      	ldr	r3, [pc, #12]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cc4:	4a02      	ldr	r2, [pc, #8]	@ (8006cd0 <HAL_RCC_OscConfig+0x4a4>)
 8006cc6:	f023 0304 	bic.w	r3, r3, #4
 8006cca:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ccc:	e021      	b.n	8006d12 <HAL_RCC_OscConfig+0x4e6>
 8006cce:	bf00      	nop
 8006cd0:	58024400 	.word	0x58024400
 8006cd4:	58024800 	.word	0x58024800
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	2b05      	cmp	r3, #5
 8006cde:	d10c      	bne.n	8006cfa <HAL_RCC_OscConfig+0x4ce>
 8006ce0:	4b83      	ldr	r3, [pc, #524]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ce4:	4a82      	ldr	r2, [pc, #520]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006ce6:	f043 0304 	orr.w	r3, r3, #4
 8006cea:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cec:	4b80      	ldr	r3, [pc, #512]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cf0:	4a7f      	ldr	r2, [pc, #508]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006cf2:	f043 0301 	orr.w	r3, r3, #1
 8006cf6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cf8:	e00b      	b.n	8006d12 <HAL_RCC_OscConfig+0x4e6>
 8006cfa:	4b7d      	ldr	r3, [pc, #500]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cfe:	4a7c      	ldr	r2, [pc, #496]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006d00:	f023 0301 	bic.w	r3, r3, #1
 8006d04:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d06:	4b7a      	ldr	r3, [pc, #488]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d0a:	4a79      	ldr	r2, [pc, #484]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006d0c:	f023 0304 	bic.w	r3, r3, #4
 8006d10:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d015      	beq.n	8006d46 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d1a:	f7fc f8eb 	bl	8002ef4 <HAL_GetTick>
 8006d1e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d20:	e00a      	b.n	8006d38 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d22:	f7fc f8e7 	bl	8002ef4 <HAL_GetTick>
 8006d26:	4602      	mov	r2, r0
 8006d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d901      	bls.n	8006d38 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e14b      	b.n	8006fd0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d38:	4b6d      	ldr	r3, [pc, #436]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d3c:	f003 0302 	and.w	r3, r3, #2
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d0ee      	beq.n	8006d22 <HAL_RCC_OscConfig+0x4f6>
 8006d44:	e014      	b.n	8006d70 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d46:	f7fc f8d5 	bl	8002ef4 <HAL_GetTick>
 8006d4a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d4c:	e00a      	b.n	8006d64 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d4e:	f7fc f8d1 	bl	8002ef4 <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d901      	bls.n	8006d64 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e135      	b.n	8006fd0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d64:	4b62      	ldr	r3, [pc, #392]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d68:	f003 0302 	and.w	r3, r3, #2
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1ee      	bne.n	8006d4e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 812a 	beq.w	8006fce <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006d7a:	4b5d      	ldr	r3, [pc, #372]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d82:	2b18      	cmp	r3, #24
 8006d84:	f000 80ba 	beq.w	8006efc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	f040 8095 	bne.w	8006ebc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d92:	4b57      	ldr	r3, [pc, #348]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a56      	ldr	r2, [pc, #344]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006d98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d9e:	f7fc f8a9 	bl	8002ef4 <HAL_GetTick>
 8006da2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006da4:	e008      	b.n	8006db8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006da6:	f7fc f8a5 	bl	8002ef4 <HAL_GetTick>
 8006daa:	4602      	mov	r2, r0
 8006dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d901      	bls.n	8006db8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e10b      	b.n	8006fd0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006db8:	4b4d      	ldr	r3, [pc, #308]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1f0      	bne.n	8006da6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006dc4:	4b4a      	ldr	r3, [pc, #296]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006dc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006dc8:	4b4a      	ldr	r3, [pc, #296]	@ (8006ef4 <HAL_RCC_OscConfig+0x6c8>)
 8006dca:	4013      	ands	r3, r2
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006dd4:	0112      	lsls	r2, r2, #4
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	4945      	ldr	r1, [pc, #276]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	628b      	str	r3, [r1, #40]	@ 0x28
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006de2:	3b01      	subs	r3, #1
 8006de4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dec:	3b01      	subs	r3, #1
 8006dee:	025b      	lsls	r3, r3, #9
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	431a      	orrs	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	041b      	lsls	r3, r3, #16
 8006dfc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006e00:	431a      	orrs	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e06:	3b01      	subs	r3, #1
 8006e08:	061b      	lsls	r3, r3, #24
 8006e0a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006e0e:	4938      	ldr	r1, [pc, #224]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006e10:	4313      	orrs	r3, r2
 8006e12:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006e14:	4b36      	ldr	r3, [pc, #216]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e18:	4a35      	ldr	r2, [pc, #212]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006e1a:	f023 0301 	bic.w	r3, r3, #1
 8006e1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006e20:	4b33      	ldr	r3, [pc, #204]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006e22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e24:	4b34      	ldr	r3, [pc, #208]	@ (8006ef8 <HAL_RCC_OscConfig+0x6cc>)
 8006e26:	4013      	ands	r3, r2
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006e2c:	00d2      	lsls	r2, r2, #3
 8006e2e:	4930      	ldr	r1, [pc, #192]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006e34:	4b2e      	ldr	r3, [pc, #184]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e38:	f023 020c 	bic.w	r2, r3, #12
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e40:	492b      	ldr	r1, [pc, #172]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006e46:	4b2a      	ldr	r3, [pc, #168]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e4a:	f023 0202 	bic.w	r2, r3, #2
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e52:	4927      	ldr	r1, [pc, #156]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006e58:	4b25      	ldr	r3, [pc, #148]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e5c:	4a24      	ldr	r2, [pc, #144]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006e5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e64:	4b22      	ldr	r3, [pc, #136]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e68:	4a21      	ldr	r2, [pc, #132]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006e6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006e70:	4b1f      	ldr	r3, [pc, #124]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e74:	4a1e      	ldr	r2, [pc, #120]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006e76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e80:	4a1b      	ldr	r2, [pc, #108]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006e82:	f043 0301 	orr.w	r3, r3, #1
 8006e86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e88:	4b19      	ldr	r3, [pc, #100]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a18      	ldr	r2, [pc, #96]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006e8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e94:	f7fc f82e 	bl	8002ef4 <HAL_GetTick>
 8006e98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e9a:	e008      	b.n	8006eae <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e9c:	f7fc f82a 	bl	8002ef4 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e090      	b.n	8006fd0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006eae:	4b10      	ldr	r3, [pc, #64]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d0f0      	beq.n	8006e9c <HAL_RCC_OscConfig+0x670>
 8006eba:	e088      	b.n	8006fce <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a0b      	ldr	r2, [pc, #44]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006ec2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec8:	f7fc f814 	bl	8002ef4 <HAL_GetTick>
 8006ecc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ece:	e008      	b.n	8006ee2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ed0:	f7fc f810 	bl	8002ef4 <HAL_GetTick>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d901      	bls.n	8006ee2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e076      	b.n	8006fd0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ee2:	4b03      	ldr	r3, [pc, #12]	@ (8006ef0 <HAL_RCC_OscConfig+0x6c4>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1f0      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x6a4>
 8006eee:	e06e      	b.n	8006fce <HAL_RCC_OscConfig+0x7a2>
 8006ef0:	58024400 	.word	0x58024400
 8006ef4:	fffffc0c 	.word	0xfffffc0c
 8006ef8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006efc:	4b36      	ldr	r3, [pc, #216]	@ (8006fd8 <HAL_RCC_OscConfig+0x7ac>)
 8006efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006f02:	4b35      	ldr	r3, [pc, #212]	@ (8006fd8 <HAL_RCC_OscConfig+0x7ac>)
 8006f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f06:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d031      	beq.n	8006f74 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	f003 0203 	and.w	r2, r3, #3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d12a      	bne.n	8006f74 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	091b      	lsrs	r3, r3, #4
 8006f22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d122      	bne.n	8006f74 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f38:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d11a      	bne.n	8006f74 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	0a5b      	lsrs	r3, r3, #9
 8006f42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f4a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d111      	bne.n	8006f74 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	0c1b      	lsrs	r3, r3, #16
 8006f54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d108      	bne.n	8006f74 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	0e1b      	lsrs	r3, r3, #24
 8006f66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f6e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d001      	beq.n	8006f78 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e02b      	b.n	8006fd0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006f78:	4b17      	ldr	r3, [pc, #92]	@ (8006fd8 <HAL_RCC_OscConfig+0x7ac>)
 8006f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f7c:	08db      	lsrs	r3, r3, #3
 8006f7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f82:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d01f      	beq.n	8006fce <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006f8e:	4b12      	ldr	r3, [pc, #72]	@ (8006fd8 <HAL_RCC_OscConfig+0x7ac>)
 8006f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f92:	4a11      	ldr	r2, [pc, #68]	@ (8006fd8 <HAL_RCC_OscConfig+0x7ac>)
 8006f94:	f023 0301 	bic.w	r3, r3, #1
 8006f98:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f9a:	f7fb ffab 	bl	8002ef4 <HAL_GetTick>
 8006f9e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006fa0:	bf00      	nop
 8006fa2:	f7fb ffa7 	bl	8002ef4 <HAL_GetTick>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d0f9      	beq.n	8006fa2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006fae:	4b0a      	ldr	r3, [pc, #40]	@ (8006fd8 <HAL_RCC_OscConfig+0x7ac>)
 8006fb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8006fdc <HAL_RCC_OscConfig+0x7b0>)
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006fba:	00d2      	lsls	r2, r2, #3
 8006fbc:	4906      	ldr	r1, [pc, #24]	@ (8006fd8 <HAL_RCC_OscConfig+0x7ac>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006fc2:	4b05      	ldr	r3, [pc, #20]	@ (8006fd8 <HAL_RCC_OscConfig+0x7ac>)
 8006fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc6:	4a04      	ldr	r2, [pc, #16]	@ (8006fd8 <HAL_RCC_OscConfig+0x7ac>)
 8006fc8:	f043 0301 	orr.w	r3, r3, #1
 8006fcc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3730      	adds	r7, #48	@ 0x30
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	58024400 	.word	0x58024400
 8006fdc:	ffff0007 	.word	0xffff0007

08006fe0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d101      	bne.n	8006ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e19c      	b.n	800732e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ff4:	4b8a      	ldr	r3, [pc, #552]	@ (8007220 <HAL_RCC_ClockConfig+0x240>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 030f 	and.w	r3, r3, #15
 8006ffc:	683a      	ldr	r2, [r7, #0]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d910      	bls.n	8007024 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007002:	4b87      	ldr	r3, [pc, #540]	@ (8007220 <HAL_RCC_ClockConfig+0x240>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f023 020f 	bic.w	r2, r3, #15
 800700a:	4985      	ldr	r1, [pc, #532]	@ (8007220 <HAL_RCC_ClockConfig+0x240>)
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	4313      	orrs	r3, r2
 8007010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007012:	4b83      	ldr	r3, [pc, #524]	@ (8007220 <HAL_RCC_ClockConfig+0x240>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 030f 	and.w	r3, r3, #15
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	429a      	cmp	r2, r3
 800701e:	d001      	beq.n	8007024 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e184      	b.n	800732e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0304 	and.w	r3, r3, #4
 800702c:	2b00      	cmp	r3, #0
 800702e:	d010      	beq.n	8007052 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	691a      	ldr	r2, [r3, #16]
 8007034:	4b7b      	ldr	r3, [pc, #492]	@ (8007224 <HAL_RCC_ClockConfig+0x244>)
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800703c:	429a      	cmp	r2, r3
 800703e:	d908      	bls.n	8007052 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007040:	4b78      	ldr	r3, [pc, #480]	@ (8007224 <HAL_RCC_ClockConfig+0x244>)
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	4975      	ldr	r1, [pc, #468]	@ (8007224 <HAL_RCC_ClockConfig+0x244>)
 800704e:	4313      	orrs	r3, r2
 8007050:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0308 	and.w	r3, r3, #8
 800705a:	2b00      	cmp	r3, #0
 800705c:	d010      	beq.n	8007080 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	695a      	ldr	r2, [r3, #20]
 8007062:	4b70      	ldr	r3, [pc, #448]	@ (8007224 <HAL_RCC_ClockConfig+0x244>)
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800706a:	429a      	cmp	r2, r3
 800706c:	d908      	bls.n	8007080 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800706e:	4b6d      	ldr	r3, [pc, #436]	@ (8007224 <HAL_RCC_ClockConfig+0x244>)
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	496a      	ldr	r1, [pc, #424]	@ (8007224 <HAL_RCC_ClockConfig+0x244>)
 800707c:	4313      	orrs	r3, r2
 800707e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0310 	and.w	r3, r3, #16
 8007088:	2b00      	cmp	r3, #0
 800708a:	d010      	beq.n	80070ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	699a      	ldr	r2, [r3, #24]
 8007090:	4b64      	ldr	r3, [pc, #400]	@ (8007224 <HAL_RCC_ClockConfig+0x244>)
 8007092:	69db      	ldr	r3, [r3, #28]
 8007094:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007098:	429a      	cmp	r2, r3
 800709a:	d908      	bls.n	80070ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800709c:	4b61      	ldr	r3, [pc, #388]	@ (8007224 <HAL_RCC_ClockConfig+0x244>)
 800709e:	69db      	ldr	r3, [r3, #28]
 80070a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	495e      	ldr	r1, [pc, #376]	@ (8007224 <HAL_RCC_ClockConfig+0x244>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 0320 	and.w	r3, r3, #32
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d010      	beq.n	80070dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	69da      	ldr	r2, [r3, #28]
 80070be:	4b59      	ldr	r3, [pc, #356]	@ (8007224 <HAL_RCC_ClockConfig+0x244>)
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d908      	bls.n	80070dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80070ca:	4b56      	ldr	r3, [pc, #344]	@ (8007224 <HAL_RCC_ClockConfig+0x244>)
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	4953      	ldr	r1, [pc, #332]	@ (8007224 <HAL_RCC_ClockConfig+0x244>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0302 	and.w	r3, r3, #2
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d010      	beq.n	800710a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	68da      	ldr	r2, [r3, #12]
 80070ec:	4b4d      	ldr	r3, [pc, #308]	@ (8007224 <HAL_RCC_ClockConfig+0x244>)
 80070ee:	699b      	ldr	r3, [r3, #24]
 80070f0:	f003 030f 	and.w	r3, r3, #15
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d908      	bls.n	800710a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070f8:	4b4a      	ldr	r3, [pc, #296]	@ (8007224 <HAL_RCC_ClockConfig+0x244>)
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	f023 020f 	bic.w	r2, r3, #15
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	4947      	ldr	r1, [pc, #284]	@ (8007224 <HAL_RCC_ClockConfig+0x244>)
 8007106:	4313      	orrs	r3, r2
 8007108:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0301 	and.w	r3, r3, #1
 8007112:	2b00      	cmp	r3, #0
 8007114:	d055      	beq.n	80071c2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007116:	4b43      	ldr	r3, [pc, #268]	@ (8007224 <HAL_RCC_ClockConfig+0x244>)
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	4940      	ldr	r1, [pc, #256]	@ (8007224 <HAL_RCC_ClockConfig+0x244>)
 8007124:	4313      	orrs	r3, r2
 8007126:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	2b02      	cmp	r3, #2
 800712e:	d107      	bne.n	8007140 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007130:	4b3c      	ldr	r3, [pc, #240]	@ (8007224 <HAL_RCC_ClockConfig+0x244>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007138:	2b00      	cmp	r3, #0
 800713a:	d121      	bne.n	8007180 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e0f6      	b.n	800732e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	2b03      	cmp	r3, #3
 8007146:	d107      	bne.n	8007158 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007148:	4b36      	ldr	r3, [pc, #216]	@ (8007224 <HAL_RCC_ClockConfig+0x244>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007150:	2b00      	cmp	r3, #0
 8007152:	d115      	bne.n	8007180 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	e0ea      	b.n	800732e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d107      	bne.n	8007170 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007160:	4b30      	ldr	r3, [pc, #192]	@ (8007224 <HAL_RCC_ClockConfig+0x244>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007168:	2b00      	cmp	r3, #0
 800716a:	d109      	bne.n	8007180 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e0de      	b.n	800732e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007170:	4b2c      	ldr	r3, [pc, #176]	@ (8007224 <HAL_RCC_ClockConfig+0x244>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0304 	and.w	r3, r3, #4
 8007178:	2b00      	cmp	r3, #0
 800717a:	d101      	bne.n	8007180 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e0d6      	b.n	800732e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007180:	4b28      	ldr	r3, [pc, #160]	@ (8007224 <HAL_RCC_ClockConfig+0x244>)
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	f023 0207 	bic.w	r2, r3, #7
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	4925      	ldr	r1, [pc, #148]	@ (8007224 <HAL_RCC_ClockConfig+0x244>)
 800718e:	4313      	orrs	r3, r2
 8007190:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007192:	f7fb feaf 	bl	8002ef4 <HAL_GetTick>
 8007196:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007198:	e00a      	b.n	80071b0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800719a:	f7fb feab 	bl	8002ef4 <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d901      	bls.n	80071b0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	e0be      	b.n	800732e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071b0:	4b1c      	ldr	r3, [pc, #112]	@ (8007224 <HAL_RCC_ClockConfig+0x244>)
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	00db      	lsls	r3, r3, #3
 80071be:	429a      	cmp	r2, r3
 80071c0:	d1eb      	bne.n	800719a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d010      	beq.n	80071f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	68da      	ldr	r2, [r3, #12]
 80071d2:	4b14      	ldr	r3, [pc, #80]	@ (8007224 <HAL_RCC_ClockConfig+0x244>)
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	f003 030f 	and.w	r3, r3, #15
 80071da:	429a      	cmp	r2, r3
 80071dc:	d208      	bcs.n	80071f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071de:	4b11      	ldr	r3, [pc, #68]	@ (8007224 <HAL_RCC_ClockConfig+0x244>)
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	f023 020f 	bic.w	r2, r3, #15
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	490e      	ldr	r1, [pc, #56]	@ (8007224 <HAL_RCC_ClockConfig+0x244>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007220 <HAL_RCC_ClockConfig+0x240>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 030f 	and.w	r3, r3, #15
 80071f8:	683a      	ldr	r2, [r7, #0]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d214      	bcs.n	8007228 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071fe:	4b08      	ldr	r3, [pc, #32]	@ (8007220 <HAL_RCC_ClockConfig+0x240>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f023 020f 	bic.w	r2, r3, #15
 8007206:	4906      	ldr	r1, [pc, #24]	@ (8007220 <HAL_RCC_ClockConfig+0x240>)
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	4313      	orrs	r3, r2
 800720c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800720e:	4b04      	ldr	r3, [pc, #16]	@ (8007220 <HAL_RCC_ClockConfig+0x240>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 030f 	and.w	r3, r3, #15
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	429a      	cmp	r2, r3
 800721a:	d005      	beq.n	8007228 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e086      	b.n	800732e <HAL_RCC_ClockConfig+0x34e>
 8007220:	52002000 	.word	0x52002000
 8007224:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 0304 	and.w	r3, r3, #4
 8007230:	2b00      	cmp	r3, #0
 8007232:	d010      	beq.n	8007256 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	691a      	ldr	r2, [r3, #16]
 8007238:	4b3f      	ldr	r3, [pc, #252]	@ (8007338 <HAL_RCC_ClockConfig+0x358>)
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007240:	429a      	cmp	r2, r3
 8007242:	d208      	bcs.n	8007256 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007244:	4b3c      	ldr	r3, [pc, #240]	@ (8007338 <HAL_RCC_ClockConfig+0x358>)
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	4939      	ldr	r1, [pc, #228]	@ (8007338 <HAL_RCC_ClockConfig+0x358>)
 8007252:	4313      	orrs	r3, r2
 8007254:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 0308 	and.w	r3, r3, #8
 800725e:	2b00      	cmp	r3, #0
 8007260:	d010      	beq.n	8007284 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	695a      	ldr	r2, [r3, #20]
 8007266:	4b34      	ldr	r3, [pc, #208]	@ (8007338 <HAL_RCC_ClockConfig+0x358>)
 8007268:	69db      	ldr	r3, [r3, #28]
 800726a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800726e:	429a      	cmp	r2, r3
 8007270:	d208      	bcs.n	8007284 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007272:	4b31      	ldr	r3, [pc, #196]	@ (8007338 <HAL_RCC_ClockConfig+0x358>)
 8007274:	69db      	ldr	r3, [r3, #28]
 8007276:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	492e      	ldr	r1, [pc, #184]	@ (8007338 <HAL_RCC_ClockConfig+0x358>)
 8007280:	4313      	orrs	r3, r2
 8007282:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0310 	and.w	r3, r3, #16
 800728c:	2b00      	cmp	r3, #0
 800728e:	d010      	beq.n	80072b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	699a      	ldr	r2, [r3, #24]
 8007294:	4b28      	ldr	r3, [pc, #160]	@ (8007338 <HAL_RCC_ClockConfig+0x358>)
 8007296:	69db      	ldr	r3, [r3, #28]
 8007298:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800729c:	429a      	cmp	r2, r3
 800729e:	d208      	bcs.n	80072b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80072a0:	4b25      	ldr	r3, [pc, #148]	@ (8007338 <HAL_RCC_ClockConfig+0x358>)
 80072a2:	69db      	ldr	r3, [r3, #28]
 80072a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	4922      	ldr	r1, [pc, #136]	@ (8007338 <HAL_RCC_ClockConfig+0x358>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0320 	and.w	r3, r3, #32
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d010      	beq.n	80072e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	69da      	ldr	r2, [r3, #28]
 80072c2:	4b1d      	ldr	r3, [pc, #116]	@ (8007338 <HAL_RCC_ClockConfig+0x358>)
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d208      	bcs.n	80072e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80072ce:	4b1a      	ldr	r3, [pc, #104]	@ (8007338 <HAL_RCC_ClockConfig+0x358>)
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	69db      	ldr	r3, [r3, #28]
 80072da:	4917      	ldr	r1, [pc, #92]	@ (8007338 <HAL_RCC_ClockConfig+0x358>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80072e0:	f000 f834 	bl	800734c <HAL_RCC_GetSysClockFreq>
 80072e4:	4602      	mov	r2, r0
 80072e6:	4b14      	ldr	r3, [pc, #80]	@ (8007338 <HAL_RCC_ClockConfig+0x358>)
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	0a1b      	lsrs	r3, r3, #8
 80072ec:	f003 030f 	and.w	r3, r3, #15
 80072f0:	4912      	ldr	r1, [pc, #72]	@ (800733c <HAL_RCC_ClockConfig+0x35c>)
 80072f2:	5ccb      	ldrb	r3, [r1, r3]
 80072f4:	f003 031f 	and.w	r3, r3, #31
 80072f8:	fa22 f303 	lsr.w	r3, r2, r3
 80072fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80072fe:	4b0e      	ldr	r3, [pc, #56]	@ (8007338 <HAL_RCC_ClockConfig+0x358>)
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	f003 030f 	and.w	r3, r3, #15
 8007306:	4a0d      	ldr	r2, [pc, #52]	@ (800733c <HAL_RCC_ClockConfig+0x35c>)
 8007308:	5cd3      	ldrb	r3, [r2, r3]
 800730a:	f003 031f 	and.w	r3, r3, #31
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	fa22 f303 	lsr.w	r3, r2, r3
 8007314:	4a0a      	ldr	r2, [pc, #40]	@ (8007340 <HAL_RCC_ClockConfig+0x360>)
 8007316:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007318:	4a0a      	ldr	r2, [pc, #40]	@ (8007344 <HAL_RCC_ClockConfig+0x364>)
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800731e:	4b0a      	ldr	r3, [pc, #40]	@ (8007348 <HAL_RCC_ClockConfig+0x368>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4618      	mov	r0, r3
 8007324:	f7fb fd9c 	bl	8002e60 <HAL_InitTick>
 8007328:	4603      	mov	r3, r0
 800732a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800732c:	7bfb      	ldrb	r3, [r7, #15]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3718      	adds	r7, #24
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	58024400 	.word	0x58024400
 800733c:	0800cf78 	.word	0x0800cf78
 8007340:	24000010 	.word	0x24000010
 8007344:	2400000c 	.word	0x2400000c
 8007348:	24000014 	.word	0x24000014

0800734c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800734c:	b480      	push	{r7}
 800734e:	b089      	sub	sp, #36	@ 0x24
 8007350:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007352:	4bb3      	ldr	r3, [pc, #716]	@ (8007620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800735a:	2b18      	cmp	r3, #24
 800735c:	f200 8155 	bhi.w	800760a <HAL_RCC_GetSysClockFreq+0x2be>
 8007360:	a201      	add	r2, pc, #4	@ (adr r2, 8007368 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007366:	bf00      	nop
 8007368:	080073cd 	.word	0x080073cd
 800736c:	0800760b 	.word	0x0800760b
 8007370:	0800760b 	.word	0x0800760b
 8007374:	0800760b 	.word	0x0800760b
 8007378:	0800760b 	.word	0x0800760b
 800737c:	0800760b 	.word	0x0800760b
 8007380:	0800760b 	.word	0x0800760b
 8007384:	0800760b 	.word	0x0800760b
 8007388:	080073f3 	.word	0x080073f3
 800738c:	0800760b 	.word	0x0800760b
 8007390:	0800760b 	.word	0x0800760b
 8007394:	0800760b 	.word	0x0800760b
 8007398:	0800760b 	.word	0x0800760b
 800739c:	0800760b 	.word	0x0800760b
 80073a0:	0800760b 	.word	0x0800760b
 80073a4:	0800760b 	.word	0x0800760b
 80073a8:	080073f9 	.word	0x080073f9
 80073ac:	0800760b 	.word	0x0800760b
 80073b0:	0800760b 	.word	0x0800760b
 80073b4:	0800760b 	.word	0x0800760b
 80073b8:	0800760b 	.word	0x0800760b
 80073bc:	0800760b 	.word	0x0800760b
 80073c0:	0800760b 	.word	0x0800760b
 80073c4:	0800760b 	.word	0x0800760b
 80073c8:	080073ff 	.word	0x080073ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073cc:	4b94      	ldr	r3, [pc, #592]	@ (8007620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0320 	and.w	r3, r3, #32
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d009      	beq.n	80073ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073d8:	4b91      	ldr	r3, [pc, #580]	@ (8007620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	08db      	lsrs	r3, r3, #3
 80073de:	f003 0303 	and.w	r3, r3, #3
 80073e2:	4a90      	ldr	r2, [pc, #576]	@ (8007624 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80073e4:	fa22 f303 	lsr.w	r3, r2, r3
 80073e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80073ea:	e111      	b.n	8007610 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80073ec:	4b8d      	ldr	r3, [pc, #564]	@ (8007624 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80073ee:	61bb      	str	r3, [r7, #24]
      break;
 80073f0:	e10e      	b.n	8007610 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80073f2:	4b8d      	ldr	r3, [pc, #564]	@ (8007628 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80073f4:	61bb      	str	r3, [r7, #24]
      break;
 80073f6:	e10b      	b.n	8007610 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80073f8:	4b8c      	ldr	r3, [pc, #560]	@ (800762c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80073fa:	61bb      	str	r3, [r7, #24]
      break;
 80073fc:	e108      	b.n	8007610 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073fe:	4b88      	ldr	r3, [pc, #544]	@ (8007620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007402:	f003 0303 	and.w	r3, r3, #3
 8007406:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007408:	4b85      	ldr	r3, [pc, #532]	@ (8007620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800740a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800740c:	091b      	lsrs	r3, r3, #4
 800740e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007412:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007414:	4b82      	ldr	r3, [pc, #520]	@ (8007620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007418:	f003 0301 	and.w	r3, r3, #1
 800741c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800741e:	4b80      	ldr	r3, [pc, #512]	@ (8007620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007422:	08db      	lsrs	r3, r3, #3
 8007424:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	fb02 f303 	mul.w	r3, r2, r3
 800742e:	ee07 3a90 	vmov	s15, r3
 8007432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007436:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	2b00      	cmp	r3, #0
 800743e:	f000 80e1 	beq.w	8007604 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	2b02      	cmp	r3, #2
 8007446:	f000 8083 	beq.w	8007550 <HAL_RCC_GetSysClockFreq+0x204>
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	2b02      	cmp	r3, #2
 800744e:	f200 80a1 	bhi.w	8007594 <HAL_RCC_GetSysClockFreq+0x248>
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d003      	beq.n	8007460 <HAL_RCC_GetSysClockFreq+0x114>
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d056      	beq.n	800750c <HAL_RCC_GetSysClockFreq+0x1c0>
 800745e:	e099      	b.n	8007594 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007460:	4b6f      	ldr	r3, [pc, #444]	@ (8007620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0320 	and.w	r3, r3, #32
 8007468:	2b00      	cmp	r3, #0
 800746a:	d02d      	beq.n	80074c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800746c:	4b6c      	ldr	r3, [pc, #432]	@ (8007620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	08db      	lsrs	r3, r3, #3
 8007472:	f003 0303 	and.w	r3, r3, #3
 8007476:	4a6b      	ldr	r2, [pc, #428]	@ (8007624 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007478:	fa22 f303 	lsr.w	r3, r2, r3
 800747c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	ee07 3a90 	vmov	s15, r3
 8007484:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	ee07 3a90 	vmov	s15, r3
 800748e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007496:	4b62      	ldr	r3, [pc, #392]	@ (8007620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800749a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800749e:	ee07 3a90 	vmov	s15, r3
 80074a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80074aa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007630 <HAL_RCC_GetSysClockFreq+0x2e4>
 80074ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80074c6:	e087      	b.n	80075d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	ee07 3a90 	vmov	s15, r3
 80074ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007634 <HAL_RCC_GetSysClockFreq+0x2e8>
 80074d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074da:	4b51      	ldr	r3, [pc, #324]	@ (8007620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074e2:	ee07 3a90 	vmov	s15, r3
 80074e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80074ee:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007630 <HAL_RCC_GetSysClockFreq+0x2e4>
 80074f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007506:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800750a:	e065      	b.n	80075d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	ee07 3a90 	vmov	s15, r3
 8007512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007516:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007638 <HAL_RCC_GetSysClockFreq+0x2ec>
 800751a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800751e:	4b40      	ldr	r3, [pc, #256]	@ (8007620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007526:	ee07 3a90 	vmov	s15, r3
 800752a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800752e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007532:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007630 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800753a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800753e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800754a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800754e:	e043      	b.n	80075d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	ee07 3a90 	vmov	s15, r3
 8007556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800755a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800763c <HAL_RCC_GetSysClockFreq+0x2f0>
 800755e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007562:	4b2f      	ldr	r3, [pc, #188]	@ (8007620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800756a:	ee07 3a90 	vmov	s15, r3
 800756e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007572:	ed97 6a02 	vldr	s12, [r7, #8]
 8007576:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007630 <HAL_RCC_GetSysClockFreq+0x2e4>
 800757a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800757e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007582:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800758a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800758e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007592:	e021      	b.n	80075d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	ee07 3a90 	vmov	s15, r3
 800759a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800759e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007638 <HAL_RCC_GetSysClockFreq+0x2ec>
 80075a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075a6:	4b1e      	ldr	r3, [pc, #120]	@ (8007620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ae:	ee07 3a90 	vmov	s15, r3
 80075b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80075ba:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007630 <HAL_RCC_GetSysClockFreq+0x2e4>
 80075be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80075d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80075d8:	4b11      	ldr	r3, [pc, #68]	@ (8007620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075dc:	0a5b      	lsrs	r3, r3, #9
 80075de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075e2:	3301      	adds	r3, #1
 80075e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	ee07 3a90 	vmov	s15, r3
 80075ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80075f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80075f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075fc:	ee17 3a90 	vmov	r3, s15
 8007600:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007602:	e005      	b.n	8007610 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007604:	2300      	movs	r3, #0
 8007606:	61bb      	str	r3, [r7, #24]
      break;
 8007608:	e002      	b.n	8007610 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800760a:	4b07      	ldr	r3, [pc, #28]	@ (8007628 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800760c:	61bb      	str	r3, [r7, #24]
      break;
 800760e:	bf00      	nop
  }

  return sysclockfreq;
 8007610:	69bb      	ldr	r3, [r7, #24]
}
 8007612:	4618      	mov	r0, r3
 8007614:	3724      	adds	r7, #36	@ 0x24
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	58024400 	.word	0x58024400
 8007624:	03d09000 	.word	0x03d09000
 8007628:	003d0900 	.word	0x003d0900
 800762c:	016e3600 	.word	0x016e3600
 8007630:	46000000 	.word	0x46000000
 8007634:	4c742400 	.word	0x4c742400
 8007638:	4a742400 	.word	0x4a742400
 800763c:	4bb71b00 	.word	0x4bb71b00

08007640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007646:	f7ff fe81 	bl	800734c <HAL_RCC_GetSysClockFreq>
 800764a:	4602      	mov	r2, r0
 800764c:	4b10      	ldr	r3, [pc, #64]	@ (8007690 <HAL_RCC_GetHCLKFreq+0x50>)
 800764e:	699b      	ldr	r3, [r3, #24]
 8007650:	0a1b      	lsrs	r3, r3, #8
 8007652:	f003 030f 	and.w	r3, r3, #15
 8007656:	490f      	ldr	r1, [pc, #60]	@ (8007694 <HAL_RCC_GetHCLKFreq+0x54>)
 8007658:	5ccb      	ldrb	r3, [r1, r3]
 800765a:	f003 031f 	and.w	r3, r3, #31
 800765e:	fa22 f303 	lsr.w	r3, r2, r3
 8007662:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007664:	4b0a      	ldr	r3, [pc, #40]	@ (8007690 <HAL_RCC_GetHCLKFreq+0x50>)
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	f003 030f 	and.w	r3, r3, #15
 800766c:	4a09      	ldr	r2, [pc, #36]	@ (8007694 <HAL_RCC_GetHCLKFreq+0x54>)
 800766e:	5cd3      	ldrb	r3, [r2, r3]
 8007670:	f003 031f 	and.w	r3, r3, #31
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	fa22 f303 	lsr.w	r3, r2, r3
 800767a:	4a07      	ldr	r2, [pc, #28]	@ (8007698 <HAL_RCC_GetHCLKFreq+0x58>)
 800767c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800767e:	4a07      	ldr	r2, [pc, #28]	@ (800769c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007684:	4b04      	ldr	r3, [pc, #16]	@ (8007698 <HAL_RCC_GetHCLKFreq+0x58>)
 8007686:	681b      	ldr	r3, [r3, #0]
}
 8007688:	4618      	mov	r0, r3
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	58024400 	.word	0x58024400
 8007694:	0800cf78 	.word	0x0800cf78
 8007698:	24000010 	.word	0x24000010
 800769c:	2400000c 	.word	0x2400000c

080076a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80076a4:	f7ff ffcc 	bl	8007640 <HAL_RCC_GetHCLKFreq>
 80076a8:	4602      	mov	r2, r0
 80076aa:	4b06      	ldr	r3, [pc, #24]	@ (80076c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076ac:	69db      	ldr	r3, [r3, #28]
 80076ae:	091b      	lsrs	r3, r3, #4
 80076b0:	f003 0307 	and.w	r3, r3, #7
 80076b4:	4904      	ldr	r1, [pc, #16]	@ (80076c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80076b6:	5ccb      	ldrb	r3, [r1, r3]
 80076b8:	f003 031f 	and.w	r3, r3, #31
 80076bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	58024400 	.word	0x58024400
 80076c8:	0800cf78 	.word	0x0800cf78

080076cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80076d0:	f7ff ffb6 	bl	8007640 <HAL_RCC_GetHCLKFreq>
 80076d4:	4602      	mov	r2, r0
 80076d6:	4b06      	ldr	r3, [pc, #24]	@ (80076f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076d8:	69db      	ldr	r3, [r3, #28]
 80076da:	0a1b      	lsrs	r3, r3, #8
 80076dc:	f003 0307 	and.w	r3, r3, #7
 80076e0:	4904      	ldr	r1, [pc, #16]	@ (80076f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80076e2:	5ccb      	ldrb	r3, [r1, r3]
 80076e4:	f003 031f 	and.w	r3, r3, #31
 80076e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	58024400 	.word	0x58024400
 80076f4:	0800cf78 	.word	0x0800cf78

080076f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076fc:	b0c6      	sub	sp, #280	@ 0x118
 80076fe:	af00      	add	r7, sp, #0
 8007700:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007704:	2300      	movs	r3, #0
 8007706:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800770a:	2300      	movs	r3, #0
 800770c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007718:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800771c:	2500      	movs	r5, #0
 800771e:	ea54 0305 	orrs.w	r3, r4, r5
 8007722:	d049      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007724:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007728:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800772a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800772e:	d02f      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007730:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007734:	d828      	bhi.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007736:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800773a:	d01a      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800773c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007740:	d822      	bhi.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007742:	2b00      	cmp	r3, #0
 8007744:	d003      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007746:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800774a:	d007      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800774c:	e01c      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800774e:	4bab      	ldr	r3, [pc, #684]	@ (80079fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007752:	4aaa      	ldr	r2, [pc, #680]	@ (80079fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007754:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007758:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800775a:	e01a      	b.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800775c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007760:	3308      	adds	r3, #8
 8007762:	2102      	movs	r1, #2
 8007764:	4618      	mov	r0, r3
 8007766:	f002 fa49 	bl	8009bfc <RCCEx_PLL2_Config>
 800776a:	4603      	mov	r3, r0
 800776c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007770:	e00f      	b.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007776:	3328      	adds	r3, #40	@ 0x28
 8007778:	2102      	movs	r1, #2
 800777a:	4618      	mov	r0, r3
 800777c:	f002 faf0 	bl	8009d60 <RCCEx_PLL3_Config>
 8007780:	4603      	mov	r3, r0
 8007782:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007786:	e004      	b.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800778e:	e000      	b.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007790:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007792:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10a      	bne.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800779a:	4b98      	ldr	r3, [pc, #608]	@ (80079fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800779c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800779e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80077a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077a8:	4a94      	ldr	r2, [pc, #592]	@ (80079fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80077aa:	430b      	orrs	r3, r1
 80077ac:	6513      	str	r3, [r2, #80]	@ 0x50
 80077ae:	e003      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80077b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80077c4:	f04f 0900 	mov.w	r9, #0
 80077c8:	ea58 0309 	orrs.w	r3, r8, r9
 80077cc:	d047      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80077ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077d4:	2b04      	cmp	r3, #4
 80077d6:	d82a      	bhi.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80077d8:	a201      	add	r2, pc, #4	@ (adr r2, 80077e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80077da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077de:	bf00      	nop
 80077e0:	080077f5 	.word	0x080077f5
 80077e4:	08007803 	.word	0x08007803
 80077e8:	08007819 	.word	0x08007819
 80077ec:	08007837 	.word	0x08007837
 80077f0:	08007837 	.word	0x08007837
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077f4:	4b81      	ldr	r3, [pc, #516]	@ (80079fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80077f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f8:	4a80      	ldr	r2, [pc, #512]	@ (80079fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80077fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007800:	e01a      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007806:	3308      	adds	r3, #8
 8007808:	2100      	movs	r1, #0
 800780a:	4618      	mov	r0, r3
 800780c:	f002 f9f6 	bl	8009bfc <RCCEx_PLL2_Config>
 8007810:	4603      	mov	r3, r0
 8007812:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007816:	e00f      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800781c:	3328      	adds	r3, #40	@ 0x28
 800781e:	2100      	movs	r1, #0
 8007820:	4618      	mov	r0, r3
 8007822:	f002 fa9d 	bl	8009d60 <RCCEx_PLL3_Config>
 8007826:	4603      	mov	r3, r0
 8007828:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800782c:	e004      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007834:	e000      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007836:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007838:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10a      	bne.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007840:	4b6e      	ldr	r3, [pc, #440]	@ (80079fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007842:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007844:	f023 0107 	bic.w	r1, r3, #7
 8007848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800784c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800784e:	4a6b      	ldr	r2, [pc, #428]	@ (80079fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007850:	430b      	orrs	r3, r1
 8007852:	6513      	str	r3, [r2, #80]	@ 0x50
 8007854:	e003      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007856:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800785a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800785e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007866:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800786a:	f04f 0b00 	mov.w	fp, #0
 800786e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007872:	d05b      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007878:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800787c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007880:	d03b      	beq.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007882:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007886:	d834      	bhi.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007888:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800788c:	d037      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x206>
 800788e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007892:	d82e      	bhi.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007894:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007898:	d033      	beq.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800789a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800789e:	d828      	bhi.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80078a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078a4:	d01a      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80078a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078aa:	d822      	bhi.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d003      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80078b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078b4:	d007      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80078b6:	e01c      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078b8:	4b50      	ldr	r3, [pc, #320]	@ (80079fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80078ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078bc:	4a4f      	ldr	r2, [pc, #316]	@ (80079fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80078be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80078c4:	e01e      	b.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ca:	3308      	adds	r3, #8
 80078cc:	2100      	movs	r1, #0
 80078ce:	4618      	mov	r0, r3
 80078d0:	f002 f994 	bl	8009bfc <RCCEx_PLL2_Config>
 80078d4:	4603      	mov	r3, r0
 80078d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80078da:	e013      	b.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80078dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078e0:	3328      	adds	r3, #40	@ 0x28
 80078e2:	2100      	movs	r1, #0
 80078e4:	4618      	mov	r0, r3
 80078e6:	f002 fa3b 	bl	8009d60 <RCCEx_PLL3_Config>
 80078ea:	4603      	mov	r3, r0
 80078ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80078f0:	e008      	b.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80078f8:	e004      	b.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80078fa:	bf00      	nop
 80078fc:	e002      	b.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80078fe:	bf00      	nop
 8007900:	e000      	b.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007902:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007904:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007908:	2b00      	cmp	r3, #0
 800790a:	d10b      	bne.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800790c:	4b3b      	ldr	r3, [pc, #236]	@ (80079fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800790e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007910:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007918:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800791c:	4a37      	ldr	r2, [pc, #220]	@ (80079fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800791e:	430b      	orrs	r3, r1
 8007920:	6593      	str	r3, [r2, #88]	@ 0x58
 8007922:	e003      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007924:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007928:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800792c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007934:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007938:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800793c:	2300      	movs	r3, #0
 800793e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007942:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007946:	460b      	mov	r3, r1
 8007948:	4313      	orrs	r3, r2
 800794a:	d05d      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800794c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007950:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007954:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007958:	d03b      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800795a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800795e:	d834      	bhi.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007960:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007964:	d037      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007966:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800796a:	d82e      	bhi.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800796c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007970:	d033      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8007972:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007976:	d828      	bhi.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007978:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800797c:	d01a      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800797e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007982:	d822      	bhi.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007984:	2b00      	cmp	r3, #0
 8007986:	d003      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007988:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800798c:	d007      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800798e:	e01c      	b.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007990:	4b1a      	ldr	r3, [pc, #104]	@ (80079fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007994:	4a19      	ldr	r2, [pc, #100]	@ (80079fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007996:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800799a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800799c:	e01e      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800799e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a2:	3308      	adds	r3, #8
 80079a4:	2100      	movs	r1, #0
 80079a6:	4618      	mov	r0, r3
 80079a8:	f002 f928 	bl	8009bfc <RCCEx_PLL2_Config>
 80079ac:	4603      	mov	r3, r0
 80079ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80079b2:	e013      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079b8:	3328      	adds	r3, #40	@ 0x28
 80079ba:	2100      	movs	r1, #0
 80079bc:	4618      	mov	r0, r3
 80079be:	f002 f9cf 	bl	8009d60 <RCCEx_PLL3_Config>
 80079c2:	4603      	mov	r3, r0
 80079c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079c8:	e008      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80079d0:	e004      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80079d2:	bf00      	nop
 80079d4:	e002      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80079d6:	bf00      	nop
 80079d8:	e000      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80079da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10d      	bne.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80079e4:	4b05      	ldr	r3, [pc, #20]	@ (80079fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80079e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079e8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80079ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80079f4:	4a01      	ldr	r2, [pc, #4]	@ (80079fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80079f6:	430b      	orrs	r3, r1
 80079f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80079fa:	e005      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80079fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a10:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007a14:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007a18:	2300      	movs	r3, #0
 8007a1a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007a1e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007a22:	460b      	mov	r3, r1
 8007a24:	4313      	orrs	r3, r2
 8007a26:	d03a      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a2e:	2b30      	cmp	r3, #48	@ 0x30
 8007a30:	d01f      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8007a32:	2b30      	cmp	r3, #48	@ 0x30
 8007a34:	d819      	bhi.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007a36:	2b20      	cmp	r3, #32
 8007a38:	d00c      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007a3a:	2b20      	cmp	r3, #32
 8007a3c:	d815      	bhi.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d019      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007a42:	2b10      	cmp	r3, #16
 8007a44:	d111      	bne.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a46:	4baa      	ldr	r3, [pc, #680]	@ (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a4a:	4aa9      	ldr	r2, [pc, #676]	@ (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007a4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007a52:	e011      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a58:	3308      	adds	r3, #8
 8007a5a:	2102      	movs	r1, #2
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f002 f8cd 	bl	8009bfc <RCCEx_PLL2_Config>
 8007a62:	4603      	mov	r3, r0
 8007a64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007a68:	e006      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a70:	e002      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007a72:	bf00      	nop
 8007a74:	e000      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007a76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10a      	bne.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007a80:	4b9b      	ldr	r3, [pc, #620]	@ (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a84:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a8e:	4a98      	ldr	r2, [pc, #608]	@ (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007a90:	430b      	orrs	r3, r1
 8007a92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a94:	e003      	b.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a9a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007aaa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007aae:	2300      	movs	r3, #0
 8007ab0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007ab4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007ab8:	460b      	mov	r3, r1
 8007aba:	4313      	orrs	r3, r2
 8007abc:	d051      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ac4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ac8:	d035      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8007aca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ace:	d82e      	bhi.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007ad0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ad4:	d031      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8007ad6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ada:	d828      	bhi.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007adc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ae0:	d01a      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007ae2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ae6:	d822      	bhi.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d003      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007aec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007af0:	d007      	beq.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007af2:	e01c      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007af4:	4b7e      	ldr	r3, [pc, #504]	@ (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af8:	4a7d      	ldr	r2, [pc, #500]	@ (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007afa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007afe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007b00:	e01c      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b06:	3308      	adds	r3, #8
 8007b08:	2100      	movs	r1, #0
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f002 f876 	bl	8009bfc <RCCEx_PLL2_Config>
 8007b10:	4603      	mov	r3, r0
 8007b12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007b16:	e011      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b1c:	3328      	adds	r3, #40	@ 0x28
 8007b1e:	2100      	movs	r1, #0
 8007b20:	4618      	mov	r0, r3
 8007b22:	f002 f91d 	bl	8009d60 <RCCEx_PLL3_Config>
 8007b26:	4603      	mov	r3, r0
 8007b28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007b2c:	e006      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b34:	e002      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007b36:	bf00      	nop
 8007b38:	e000      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007b3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10a      	bne.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007b44:	4b6a      	ldr	r3, [pc, #424]	@ (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007b46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b48:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b52:	4a67      	ldr	r2, [pc, #412]	@ (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007b54:	430b      	orrs	r3, r1
 8007b56:	6513      	str	r3, [r2, #80]	@ 0x50
 8007b58:	e003      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007b6e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007b72:	2300      	movs	r3, #0
 8007b74:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b78:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	d053      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b8c:	d033      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8007b8e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b92:	d82c      	bhi.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007b94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b98:	d02f      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x502>
 8007b9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b9e:	d826      	bhi.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007ba0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007ba4:	d02b      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007ba6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007baa:	d820      	bhi.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007bac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bb0:	d012      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8007bb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bb6:	d81a      	bhi.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d022      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bc0:	d115      	bne.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bc6:	3308      	adds	r3, #8
 8007bc8:	2101      	movs	r1, #1
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f002 f816 	bl	8009bfc <RCCEx_PLL2_Config>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007bd6:	e015      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bdc:	3328      	adds	r3, #40	@ 0x28
 8007bde:	2101      	movs	r1, #1
 8007be0:	4618      	mov	r0, r3
 8007be2:	f002 f8bd 	bl	8009d60 <RCCEx_PLL3_Config>
 8007be6:	4603      	mov	r3, r0
 8007be8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007bec:	e00a      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007bf4:	e006      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007bf6:	bf00      	nop
 8007bf8:	e004      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007bfa:	bf00      	nop
 8007bfc:	e002      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007bfe:	bf00      	nop
 8007c00:	e000      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007c02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10a      	bne.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007c0c:	4b38      	ldr	r3, [pc, #224]	@ (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c10:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c1a:	4a35      	ldr	r2, [pc, #212]	@ (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c1c:	430b      	orrs	r3, r1
 8007c1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c20:	e003      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c26:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c32:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007c36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007c40:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007c44:	460b      	mov	r3, r1
 8007c46:	4313      	orrs	r3, r2
 8007c48:	d058      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007c52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c56:	d033      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007c58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c5c:	d82c      	bhi.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c62:	d02f      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007c64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c68:	d826      	bhi.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007c6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c6e:	d02b      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007c70:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c74:	d820      	bhi.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007c76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c7a:	d012      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007c7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c80:	d81a      	bhi.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d022      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007c86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c8a:	d115      	bne.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c90:	3308      	adds	r3, #8
 8007c92:	2101      	movs	r1, #1
 8007c94:	4618      	mov	r0, r3
 8007c96:	f001 ffb1 	bl	8009bfc <RCCEx_PLL2_Config>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007ca0:	e015      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ca6:	3328      	adds	r3, #40	@ 0x28
 8007ca8:	2101      	movs	r1, #1
 8007caa:	4618      	mov	r0, r3
 8007cac:	f002 f858 	bl	8009d60 <RCCEx_PLL3_Config>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007cb6:	e00a      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007cbe:	e006      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007cc0:	bf00      	nop
 8007cc2:	e004      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007cc4:	bf00      	nop
 8007cc6:	e002      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007cc8:	bf00      	nop
 8007cca:	e000      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007ccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10e      	bne.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007cd6:	4b06      	ldr	r3, [pc, #24]	@ (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cda:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ce2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007ce6:	4a02      	ldr	r2, [pc, #8]	@ (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007ce8:	430b      	orrs	r3, r1
 8007cea:	6593      	str	r3, [r2, #88]	@ 0x58
 8007cec:	e006      	b.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007cee:	bf00      	nop
 8007cf0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cf4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cf8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d04:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007d08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007d12:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007d16:	460b      	mov	r3, r1
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	d037      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d26:	d00e      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007d28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d2c:	d816      	bhi.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d018      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007d32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d36:	d111      	bne.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d38:	4bc4      	ldr	r3, [pc, #784]	@ (800804c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d3c:	4ac3      	ldr	r2, [pc, #780]	@ (800804c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007d44:	e00f      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d4a:	3308      	adds	r3, #8
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f001 ff54 	bl	8009bfc <RCCEx_PLL2_Config>
 8007d54:	4603      	mov	r3, r0
 8007d56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007d5a:	e004      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d62:	e000      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10a      	bne.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007d6e:	4bb7      	ldr	r3, [pc, #732]	@ (800804c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d72:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d7c:	4ab3      	ldr	r2, [pc, #716]	@ (800804c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d7e:	430b      	orrs	r3, r1
 8007d80:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d82:	e003      	b.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d94:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007d98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007da2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007da6:	460b      	mov	r3, r1
 8007da8:	4313      	orrs	r3, r2
 8007daa:	d039      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007db0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	d81c      	bhi.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007db6:	a201      	add	r2, pc, #4	@ (adr r2, 8007dbc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dbc:	08007df9 	.word	0x08007df9
 8007dc0:	08007dcd 	.word	0x08007dcd
 8007dc4:	08007ddb 	.word	0x08007ddb
 8007dc8:	08007df9 	.word	0x08007df9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dcc:	4b9f      	ldr	r3, [pc, #636]	@ (800804c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd0:	4a9e      	ldr	r2, [pc, #632]	@ (800804c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007dd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007dd8:	e00f      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dde:	3308      	adds	r3, #8
 8007de0:	2102      	movs	r1, #2
 8007de2:	4618      	mov	r0, r3
 8007de4:	f001 ff0a 	bl	8009bfc <RCCEx_PLL2_Config>
 8007de8:	4603      	mov	r3, r0
 8007dea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007dee:	e004      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007df6:	e000      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007df8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10a      	bne.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007e02:	4b92      	ldr	r3, [pc, #584]	@ (800804c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e06:	f023 0103 	bic.w	r1, r3, #3
 8007e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e10:	4a8e      	ldr	r2, [pc, #568]	@ (800804c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e12:	430b      	orrs	r3, r1
 8007e14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007e16:	e003      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e28:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007e2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e30:	2300      	movs	r3, #0
 8007e32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e36:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	f000 8099 	beq.w	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e42:	4b83      	ldr	r3, [pc, #524]	@ (8008050 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a82      	ldr	r2, [pc, #520]	@ (8008050 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007e48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e4e:	f7fb f851 	bl	8002ef4 <HAL_GetTick>
 8007e52:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e56:	e00b      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e58:	f7fb f84c 	bl	8002ef4 <HAL_GetTick>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	2b64      	cmp	r3, #100	@ 0x64
 8007e66:	d903      	bls.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e6e:	e005      	b.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e70:	4b77      	ldr	r3, [pc, #476]	@ (8008050 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d0ed      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007e7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d173      	bne.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007e84:	4b71      	ldr	r3, [pc, #452]	@ (800804c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e86:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007e90:	4053      	eors	r3, r2
 8007e92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d015      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007e9a:	4b6c      	ldr	r3, [pc, #432]	@ (800804c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ea2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007ea6:	4b69      	ldr	r3, [pc, #420]	@ (800804c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eaa:	4a68      	ldr	r2, [pc, #416]	@ (800804c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007eb0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007eb2:	4b66      	ldr	r3, [pc, #408]	@ (800804c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eb6:	4a65      	ldr	r2, [pc, #404]	@ (800804c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007eb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ebc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007ebe:	4a63      	ldr	r2, [pc, #396]	@ (800804c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ec4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007ece:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ed2:	d118      	bne.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ed4:	f7fb f80e 	bl	8002ef4 <HAL_GetTick>
 8007ed8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007edc:	e00d      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ede:	f7fb f809 	bl	8002ef4 <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007ee8:	1ad2      	subs	r2, r2, r3
 8007eea:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d903      	bls.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007ef8:	e005      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007efa:	4b54      	ldr	r3, [pc, #336]	@ (800804c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007efe:	f003 0302 	and.w	r3, r3, #2
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d0eb      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007f06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d129      	bne.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007f16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f1e:	d10e      	bne.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007f20:	4b4a      	ldr	r3, [pc, #296]	@ (800804c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007f30:	091a      	lsrs	r2, r3, #4
 8007f32:	4b48      	ldr	r3, [pc, #288]	@ (8008054 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007f34:	4013      	ands	r3, r2
 8007f36:	4a45      	ldr	r2, [pc, #276]	@ (800804c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f38:	430b      	orrs	r3, r1
 8007f3a:	6113      	str	r3, [r2, #16]
 8007f3c:	e005      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007f3e:	4b43      	ldr	r3, [pc, #268]	@ (800804c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	4a42      	ldr	r2, [pc, #264]	@ (800804c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f44:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007f48:	6113      	str	r3, [r2, #16]
 8007f4a:	4b40      	ldr	r3, [pc, #256]	@ (800804c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f4c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007f56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f5a:	4a3c      	ldr	r2, [pc, #240]	@ (800804c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f5c:	430b      	orrs	r3, r1
 8007f5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f60:	e008      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f66:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8007f6a:	e003      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7c:	f002 0301 	and.w	r3, r2, #1
 8007f80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f84:	2300      	movs	r3, #0
 8007f86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007f8a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007f8e:	460b      	mov	r3, r1
 8007f90:	4313      	orrs	r3, r2
 8007f92:	f000 808f 	beq.w	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f9c:	2b28      	cmp	r3, #40	@ 0x28
 8007f9e:	d871      	bhi.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa6:	bf00      	nop
 8007fa8:	0800808d 	.word	0x0800808d
 8007fac:	08008085 	.word	0x08008085
 8007fb0:	08008085 	.word	0x08008085
 8007fb4:	08008085 	.word	0x08008085
 8007fb8:	08008085 	.word	0x08008085
 8007fbc:	08008085 	.word	0x08008085
 8007fc0:	08008085 	.word	0x08008085
 8007fc4:	08008085 	.word	0x08008085
 8007fc8:	08008059 	.word	0x08008059
 8007fcc:	08008085 	.word	0x08008085
 8007fd0:	08008085 	.word	0x08008085
 8007fd4:	08008085 	.word	0x08008085
 8007fd8:	08008085 	.word	0x08008085
 8007fdc:	08008085 	.word	0x08008085
 8007fe0:	08008085 	.word	0x08008085
 8007fe4:	08008085 	.word	0x08008085
 8007fe8:	0800806f 	.word	0x0800806f
 8007fec:	08008085 	.word	0x08008085
 8007ff0:	08008085 	.word	0x08008085
 8007ff4:	08008085 	.word	0x08008085
 8007ff8:	08008085 	.word	0x08008085
 8007ffc:	08008085 	.word	0x08008085
 8008000:	08008085 	.word	0x08008085
 8008004:	08008085 	.word	0x08008085
 8008008:	0800808d 	.word	0x0800808d
 800800c:	08008085 	.word	0x08008085
 8008010:	08008085 	.word	0x08008085
 8008014:	08008085 	.word	0x08008085
 8008018:	08008085 	.word	0x08008085
 800801c:	08008085 	.word	0x08008085
 8008020:	08008085 	.word	0x08008085
 8008024:	08008085 	.word	0x08008085
 8008028:	0800808d 	.word	0x0800808d
 800802c:	08008085 	.word	0x08008085
 8008030:	08008085 	.word	0x08008085
 8008034:	08008085 	.word	0x08008085
 8008038:	08008085 	.word	0x08008085
 800803c:	08008085 	.word	0x08008085
 8008040:	08008085 	.word	0x08008085
 8008044:	08008085 	.word	0x08008085
 8008048:	0800808d 	.word	0x0800808d
 800804c:	58024400 	.word	0x58024400
 8008050:	58024800 	.word	0x58024800
 8008054:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800805c:	3308      	adds	r3, #8
 800805e:	2101      	movs	r1, #1
 8008060:	4618      	mov	r0, r3
 8008062:	f001 fdcb 	bl	8009bfc <RCCEx_PLL2_Config>
 8008066:	4603      	mov	r3, r0
 8008068:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800806c:	e00f      	b.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800806e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008072:	3328      	adds	r3, #40	@ 0x28
 8008074:	2101      	movs	r1, #1
 8008076:	4618      	mov	r0, r3
 8008078:	f001 fe72 	bl	8009d60 <RCCEx_PLL3_Config>
 800807c:	4603      	mov	r3, r0
 800807e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008082:	e004      	b.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800808a:	e000      	b.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800808c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800808e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10a      	bne.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008096:	4bbf      	ldr	r3, [pc, #764]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800809a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800809e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80080a4:	4abb      	ldr	r2, [pc, #748]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80080a6:	430b      	orrs	r3, r1
 80080a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80080aa:	e003      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80080b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080bc:	f002 0302 	and.w	r3, r2, #2
 80080c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80080c4:	2300      	movs	r3, #0
 80080c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080ca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80080ce:	460b      	mov	r3, r1
 80080d0:	4313      	orrs	r3, r2
 80080d2:	d041      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80080d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080da:	2b05      	cmp	r3, #5
 80080dc:	d824      	bhi.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80080de:	a201      	add	r2, pc, #4	@ (adr r2, 80080e4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80080e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e4:	08008131 	.word	0x08008131
 80080e8:	080080fd 	.word	0x080080fd
 80080ec:	08008113 	.word	0x08008113
 80080f0:	08008131 	.word	0x08008131
 80080f4:	08008131 	.word	0x08008131
 80080f8:	08008131 	.word	0x08008131
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008100:	3308      	adds	r3, #8
 8008102:	2101      	movs	r1, #1
 8008104:	4618      	mov	r0, r3
 8008106:	f001 fd79 	bl	8009bfc <RCCEx_PLL2_Config>
 800810a:	4603      	mov	r3, r0
 800810c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008110:	e00f      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008116:	3328      	adds	r3, #40	@ 0x28
 8008118:	2101      	movs	r1, #1
 800811a:	4618      	mov	r0, r3
 800811c:	f001 fe20 	bl	8009d60 <RCCEx_PLL3_Config>
 8008120:	4603      	mov	r3, r0
 8008122:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008126:	e004      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800812e:	e000      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8008130:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008132:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10a      	bne.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800813a:	4b96      	ldr	r3, [pc, #600]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800813c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800813e:	f023 0107 	bic.w	r1, r3, #7
 8008142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008146:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008148:	4a92      	ldr	r2, [pc, #584]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800814a:	430b      	orrs	r3, r1
 800814c:	6553      	str	r3, [r2, #84]	@ 0x54
 800814e:	e003      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008150:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008154:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800815c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008160:	f002 0304 	and.w	r3, r2, #4
 8008164:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008168:	2300      	movs	r3, #0
 800816a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800816e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008172:	460b      	mov	r3, r1
 8008174:	4313      	orrs	r3, r2
 8008176:	d044      	beq.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800817c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008180:	2b05      	cmp	r3, #5
 8008182:	d825      	bhi.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8008184:	a201      	add	r2, pc, #4	@ (adr r2, 800818c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8008186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818a:	bf00      	nop
 800818c:	080081d9 	.word	0x080081d9
 8008190:	080081a5 	.word	0x080081a5
 8008194:	080081bb 	.word	0x080081bb
 8008198:	080081d9 	.word	0x080081d9
 800819c:	080081d9 	.word	0x080081d9
 80081a0:	080081d9 	.word	0x080081d9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081a8:	3308      	adds	r3, #8
 80081aa:	2101      	movs	r1, #1
 80081ac:	4618      	mov	r0, r3
 80081ae:	f001 fd25 	bl	8009bfc <RCCEx_PLL2_Config>
 80081b2:	4603      	mov	r3, r0
 80081b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80081b8:	e00f      	b.n	80081da <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80081ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081be:	3328      	adds	r3, #40	@ 0x28
 80081c0:	2101      	movs	r1, #1
 80081c2:	4618      	mov	r0, r3
 80081c4:	f001 fdcc 	bl	8009d60 <RCCEx_PLL3_Config>
 80081c8:	4603      	mov	r3, r0
 80081ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80081ce:	e004      	b.n	80081da <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80081d6:	e000      	b.n	80081da <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80081d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10b      	bne.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80081e2:	4b6c      	ldr	r3, [pc, #432]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80081e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081e6:	f023 0107 	bic.w	r1, r3, #7
 80081ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081f2:	4a68      	ldr	r2, [pc, #416]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80081f4:	430b      	orrs	r3, r1
 80081f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80081f8:	e003      	b.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820a:	f002 0320 	and.w	r3, r2, #32
 800820e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008212:	2300      	movs	r3, #0
 8008214:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008218:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800821c:	460b      	mov	r3, r1
 800821e:	4313      	orrs	r3, r2
 8008220:	d055      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008226:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800822a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800822e:	d033      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8008230:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008234:	d82c      	bhi.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800823a:	d02f      	beq.n	800829c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800823c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008240:	d826      	bhi.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008242:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008246:	d02b      	beq.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008248:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800824c:	d820      	bhi.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800824e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008252:	d012      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8008254:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008258:	d81a      	bhi.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800825a:	2b00      	cmp	r3, #0
 800825c:	d022      	beq.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800825e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008262:	d115      	bne.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008268:	3308      	adds	r3, #8
 800826a:	2100      	movs	r1, #0
 800826c:	4618      	mov	r0, r3
 800826e:	f001 fcc5 	bl	8009bfc <RCCEx_PLL2_Config>
 8008272:	4603      	mov	r3, r0
 8008274:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008278:	e015      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800827a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800827e:	3328      	adds	r3, #40	@ 0x28
 8008280:	2102      	movs	r1, #2
 8008282:	4618      	mov	r0, r3
 8008284:	f001 fd6c 	bl	8009d60 <RCCEx_PLL3_Config>
 8008288:	4603      	mov	r3, r0
 800828a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800828e:	e00a      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008296:	e006      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008298:	bf00      	nop
 800829a:	e004      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800829c:	bf00      	nop
 800829e:	e002      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80082a0:	bf00      	nop
 80082a2:	e000      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80082a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10b      	bne.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80082ae:	4b39      	ldr	r3, [pc, #228]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80082b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082b2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80082b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082be:	4a35      	ldr	r2, [pc, #212]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80082c0:	430b      	orrs	r3, r1
 80082c2:	6553      	str	r3, [r2, #84]	@ 0x54
 80082c4:	e003      	b.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80082ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80082da:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80082de:	2300      	movs	r3, #0
 80082e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80082e4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80082e8:	460b      	mov	r3, r1
 80082ea:	4313      	orrs	r3, r2
 80082ec:	d058      	beq.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80082ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80082f6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80082fa:	d033      	beq.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80082fc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008300:	d82c      	bhi.n	800835c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008306:	d02f      	beq.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008308:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800830c:	d826      	bhi.n	800835c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800830e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008312:	d02b      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008314:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008318:	d820      	bhi.n	800835c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800831a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800831e:	d012      	beq.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8008320:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008324:	d81a      	bhi.n	800835c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008326:	2b00      	cmp	r3, #0
 8008328:	d022      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800832a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800832e:	d115      	bne.n	800835c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008334:	3308      	adds	r3, #8
 8008336:	2100      	movs	r1, #0
 8008338:	4618      	mov	r0, r3
 800833a:	f001 fc5f 	bl	8009bfc <RCCEx_PLL2_Config>
 800833e:	4603      	mov	r3, r0
 8008340:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008344:	e015      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800834a:	3328      	adds	r3, #40	@ 0x28
 800834c:	2102      	movs	r1, #2
 800834e:	4618      	mov	r0, r3
 8008350:	f001 fd06 	bl	8009d60 <RCCEx_PLL3_Config>
 8008354:	4603      	mov	r3, r0
 8008356:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800835a:	e00a      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008362:	e006      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008364:	bf00      	nop
 8008366:	e004      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008368:	bf00      	nop
 800836a:	e002      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800836c:	bf00      	nop
 800836e:	e000      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008372:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10e      	bne.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800837a:	4b06      	ldr	r3, [pc, #24]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800837c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800837e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008386:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800838a:	4a02      	ldr	r2, [pc, #8]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800838c:	430b      	orrs	r3, r1
 800838e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008390:	e006      	b.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8008392:	bf00      	nop
 8008394:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008398:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800839c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80083a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80083ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80083b0:	2300      	movs	r3, #0
 80083b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80083b6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80083ba:	460b      	mov	r3, r1
 80083bc:	4313      	orrs	r3, r2
 80083be:	d055      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80083c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80083c8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80083cc:	d033      	beq.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80083ce:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80083d2:	d82c      	bhi.n	800842e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80083d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083d8:	d02f      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80083da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083de:	d826      	bhi.n	800842e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80083e0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80083e4:	d02b      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80083e6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80083ea:	d820      	bhi.n	800842e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80083ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80083f0:	d012      	beq.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80083f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80083f6:	d81a      	bhi.n	800842e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d022      	beq.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80083fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008400:	d115      	bne.n	800842e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008406:	3308      	adds	r3, #8
 8008408:	2100      	movs	r1, #0
 800840a:	4618      	mov	r0, r3
 800840c:	f001 fbf6 	bl	8009bfc <RCCEx_PLL2_Config>
 8008410:	4603      	mov	r3, r0
 8008412:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008416:	e015      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800841c:	3328      	adds	r3, #40	@ 0x28
 800841e:	2102      	movs	r1, #2
 8008420:	4618      	mov	r0, r3
 8008422:	f001 fc9d 	bl	8009d60 <RCCEx_PLL3_Config>
 8008426:	4603      	mov	r3, r0
 8008428:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800842c:	e00a      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008434:	e006      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008436:	bf00      	nop
 8008438:	e004      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800843a:	bf00      	nop
 800843c:	e002      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800843e:	bf00      	nop
 8008440:	e000      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008442:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008444:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10b      	bne.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800844c:	4ba0      	ldr	r3, [pc, #640]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800844e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008450:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008458:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800845c:	4a9c      	ldr	r2, [pc, #624]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800845e:	430b      	orrs	r3, r1
 8008460:	6593      	str	r3, [r2, #88]	@ 0x58
 8008462:	e003      	b.n	800846c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008464:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008468:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800846c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008474:	f002 0308 	and.w	r3, r2, #8
 8008478:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800847c:	2300      	movs	r3, #0
 800847e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008482:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008486:	460b      	mov	r3, r1
 8008488:	4313      	orrs	r3, r2
 800848a:	d01e      	beq.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800848c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008490:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008494:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008498:	d10c      	bne.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800849a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800849e:	3328      	adds	r3, #40	@ 0x28
 80084a0:	2102      	movs	r1, #2
 80084a2:	4618      	mov	r0, r3
 80084a4:	f001 fc5c 	bl	8009d60 <RCCEx_PLL3_Config>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d002      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80084b4:	4b86      	ldr	r3, [pc, #536]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80084b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084b8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80084bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084c4:	4a82      	ldr	r2, [pc, #520]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80084c6:	430b      	orrs	r3, r1
 80084c8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80084ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d2:	f002 0310 	and.w	r3, r2, #16
 80084d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80084da:	2300      	movs	r3, #0
 80084dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80084e0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80084e4:	460b      	mov	r3, r1
 80084e6:	4313      	orrs	r3, r2
 80084e8:	d01e      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80084ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80084f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084f6:	d10c      	bne.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80084f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084fc:	3328      	adds	r3, #40	@ 0x28
 80084fe:	2102      	movs	r1, #2
 8008500:	4618      	mov	r0, r3
 8008502:	f001 fc2d 	bl	8009d60 <RCCEx_PLL3_Config>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d002      	beq.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008512:	4b6f      	ldr	r3, [pc, #444]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008516:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800851a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800851e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008522:	4a6b      	ldr	r2, [pc, #428]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008524:	430b      	orrs	r3, r1
 8008526:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800852c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008530:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008534:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008536:	2300      	movs	r3, #0
 8008538:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800853a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800853e:	460b      	mov	r3, r1
 8008540:	4313      	orrs	r3, r2
 8008542:	d03e      	beq.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008548:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800854c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008550:	d022      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008552:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008556:	d81b      	bhi.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8008558:	2b00      	cmp	r3, #0
 800855a:	d003      	beq.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800855c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008560:	d00b      	beq.n	800857a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8008562:	e015      	b.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008568:	3308      	adds	r3, #8
 800856a:	2100      	movs	r1, #0
 800856c:	4618      	mov	r0, r3
 800856e:	f001 fb45 	bl	8009bfc <RCCEx_PLL2_Config>
 8008572:	4603      	mov	r3, r0
 8008574:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008578:	e00f      	b.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800857a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800857e:	3328      	adds	r3, #40	@ 0x28
 8008580:	2102      	movs	r1, #2
 8008582:	4618      	mov	r0, r3
 8008584:	f001 fbec 	bl	8009d60 <RCCEx_PLL3_Config>
 8008588:	4603      	mov	r3, r0
 800858a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800858e:	e004      	b.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008596:	e000      	b.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8008598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800859a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10b      	bne.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80085a2:	4b4b      	ldr	r3, [pc, #300]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80085a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085a6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80085aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80085b2:	4a47      	ldr	r2, [pc, #284]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80085b4:	430b      	orrs	r3, r1
 80085b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80085b8:	e003      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80085c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ca:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80085ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80085d0:	2300      	movs	r3, #0
 80085d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80085d4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80085d8:	460b      	mov	r3, r1
 80085da:	4313      	orrs	r3, r2
 80085dc:	d03b      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80085de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80085ea:	d01f      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80085ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80085f0:	d818      	bhi.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80085f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085f6:	d003      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80085f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80085fc:	d007      	beq.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80085fe:	e011      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008600:	4b33      	ldr	r3, [pc, #204]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008604:	4a32      	ldr	r2, [pc, #200]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008606:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800860a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800860c:	e00f      	b.n	800862e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800860e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008612:	3328      	adds	r3, #40	@ 0x28
 8008614:	2101      	movs	r1, #1
 8008616:	4618      	mov	r0, r3
 8008618:	f001 fba2 	bl	8009d60 <RCCEx_PLL3_Config>
 800861c:	4603      	mov	r3, r0
 800861e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8008622:	e004      	b.n	800862e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800862a:	e000      	b.n	800862e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800862c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800862e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008632:	2b00      	cmp	r3, #0
 8008634:	d10b      	bne.n	800864e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008636:	4b26      	ldr	r3, [pc, #152]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800863a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800863e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008642:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008646:	4a22      	ldr	r2, [pc, #136]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008648:	430b      	orrs	r3, r1
 800864a:	6553      	str	r3, [r2, #84]	@ 0x54
 800864c:	e003      	b.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800864e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008652:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800865a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008662:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008664:	2300      	movs	r3, #0
 8008666:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008668:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800866c:	460b      	mov	r3, r1
 800866e:	4313      	orrs	r3, r2
 8008670:	d034      	beq.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008678:	2b00      	cmp	r3, #0
 800867a:	d003      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800867c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008680:	d007      	beq.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8008682:	e011      	b.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008684:	4b12      	ldr	r3, [pc, #72]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008688:	4a11      	ldr	r2, [pc, #68]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800868a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800868e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008690:	e00e      	b.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008696:	3308      	adds	r3, #8
 8008698:	2102      	movs	r1, #2
 800869a:	4618      	mov	r0, r3
 800869c:	f001 faae 	bl	8009bfc <RCCEx_PLL2_Config>
 80086a0:	4603      	mov	r3, r0
 80086a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80086a6:	e003      	b.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80086ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d10d      	bne.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80086b8:	4b05      	ldr	r3, [pc, #20]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80086ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086bc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80086c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086c6:	4a02      	ldr	r2, [pc, #8]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80086c8:	430b      	orrs	r3, r1
 80086ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80086cc:	e006      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80086ce:	bf00      	nop
 80086d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80086dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80086e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80086ea:	2300      	movs	r3, #0
 80086ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80086ee:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80086f2:	460b      	mov	r3, r1
 80086f4:	4313      	orrs	r3, r2
 80086f6:	d00c      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80086f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086fc:	3328      	adds	r3, #40	@ 0x28
 80086fe:	2102      	movs	r1, #2
 8008700:	4618      	mov	r0, r3
 8008702:	f001 fb2d 	bl	8009d60 <RCCEx_PLL3_Config>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d002      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800871e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008720:	2300      	movs	r3, #0
 8008722:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008724:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008728:	460b      	mov	r3, r1
 800872a:	4313      	orrs	r3, r2
 800872c:	d036      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800872e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008732:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008734:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008738:	d018      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800873a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800873e:	d811      	bhi.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008740:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008744:	d014      	beq.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8008746:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800874a:	d80b      	bhi.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800874c:	2b00      	cmp	r3, #0
 800874e:	d011      	beq.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008750:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008754:	d106      	bne.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008756:	4bb7      	ldr	r3, [pc, #732]	@ (8008a34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800875a:	4ab6      	ldr	r2, [pc, #728]	@ (8008a34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800875c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008760:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008762:	e008      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800876a:	e004      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800876c:	bf00      	nop
 800876e:	e002      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008770:	bf00      	nop
 8008772:	e000      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008776:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800877a:	2b00      	cmp	r3, #0
 800877c:	d10a      	bne.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800877e:	4bad      	ldr	r3, [pc, #692]	@ (8008a34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008782:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008786:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800878a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800878c:	4aa9      	ldr	r2, [pc, #676]	@ (8008a34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800878e:	430b      	orrs	r3, r1
 8008790:	6553      	str	r3, [r2, #84]	@ 0x54
 8008792:	e003      	b.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008794:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008798:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800879c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80087a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80087aa:	2300      	movs	r3, #0
 80087ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80087ae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80087b2:	460b      	mov	r3, r1
 80087b4:	4313      	orrs	r3, r2
 80087b6:	d009      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80087b8:	4b9e      	ldr	r3, [pc, #632]	@ (8008a34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80087ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80087c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087c6:	4a9b      	ldr	r2, [pc, #620]	@ (8008a34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80087c8:	430b      	orrs	r3, r1
 80087ca:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80087cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80087d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087da:	2300      	movs	r3, #0
 80087dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087de:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80087e2:	460b      	mov	r3, r1
 80087e4:	4313      	orrs	r3, r2
 80087e6:	d009      	beq.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80087e8:	4b92      	ldr	r3, [pc, #584]	@ (8008a34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80087ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087ec:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80087f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80087f6:	4a8f      	ldr	r2, [pc, #572]	@ (8008a34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80087f8:	430b      	orrs	r3, r1
 80087fa:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80087fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008804:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008808:	643b      	str	r3, [r7, #64]	@ 0x40
 800880a:	2300      	movs	r3, #0
 800880c:	647b      	str	r3, [r7, #68]	@ 0x44
 800880e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008812:	460b      	mov	r3, r1
 8008814:	4313      	orrs	r3, r2
 8008816:	d00e      	beq.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008818:	4b86      	ldr	r3, [pc, #536]	@ (8008a34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	4a85      	ldr	r2, [pc, #532]	@ (8008a34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800881e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008822:	6113      	str	r3, [r2, #16]
 8008824:	4b83      	ldr	r3, [pc, #524]	@ (8008a34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008826:	6919      	ldr	r1, [r3, #16]
 8008828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800882c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008830:	4a80      	ldr	r2, [pc, #512]	@ (8008a34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008832:	430b      	orrs	r3, r1
 8008834:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800883a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008842:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008844:	2300      	movs	r3, #0
 8008846:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008848:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800884c:	460b      	mov	r3, r1
 800884e:	4313      	orrs	r3, r2
 8008850:	d009      	beq.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008852:	4b78      	ldr	r3, [pc, #480]	@ (8008a34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008856:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800885a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800885e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008860:	4a74      	ldr	r2, [pc, #464]	@ (8008a34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008862:	430b      	orrs	r3, r1
 8008864:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800886a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008872:	633b      	str	r3, [r7, #48]	@ 0x30
 8008874:	2300      	movs	r3, #0
 8008876:	637b      	str	r3, [r7, #52]	@ 0x34
 8008878:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800887c:	460b      	mov	r3, r1
 800887e:	4313      	orrs	r3, r2
 8008880:	d00a      	beq.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008882:	4b6c      	ldr	r3, [pc, #432]	@ (8008a34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008886:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800888a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800888e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008892:	4a68      	ldr	r2, [pc, #416]	@ (8008a34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008894:	430b      	orrs	r3, r1
 8008896:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800889c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a0:	2100      	movs	r1, #0
 80088a2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80088a4:	f003 0301 	and.w	r3, r3, #1
 80088a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80088aa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80088ae:	460b      	mov	r3, r1
 80088b0:	4313      	orrs	r3, r2
 80088b2:	d011      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088b8:	3308      	adds	r3, #8
 80088ba:	2100      	movs	r1, #0
 80088bc:	4618      	mov	r0, r3
 80088be:	f001 f99d 	bl	8009bfc <RCCEx_PLL2_Config>
 80088c2:	4603      	mov	r3, r0
 80088c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80088c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d003      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80088d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80088d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e0:	2100      	movs	r1, #0
 80088e2:	6239      	str	r1, [r7, #32]
 80088e4:	f003 0302 	and.w	r3, r3, #2
 80088e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80088ea:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80088ee:	460b      	mov	r3, r1
 80088f0:	4313      	orrs	r3, r2
 80088f2:	d011      	beq.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80088f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088f8:	3308      	adds	r3, #8
 80088fa:	2101      	movs	r1, #1
 80088fc:	4618      	mov	r0, r3
 80088fe:	f001 f97d 	bl	8009bfc <RCCEx_PLL2_Config>
 8008902:	4603      	mov	r3, r0
 8008904:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008908:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800890c:	2b00      	cmp	r3, #0
 800890e:	d003      	beq.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008910:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008914:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800891c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008920:	2100      	movs	r1, #0
 8008922:	61b9      	str	r1, [r7, #24]
 8008924:	f003 0304 	and.w	r3, r3, #4
 8008928:	61fb      	str	r3, [r7, #28]
 800892a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800892e:	460b      	mov	r3, r1
 8008930:	4313      	orrs	r3, r2
 8008932:	d011      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008938:	3308      	adds	r3, #8
 800893a:	2102      	movs	r1, #2
 800893c:	4618      	mov	r0, r3
 800893e:	f001 f95d 	bl	8009bfc <RCCEx_PLL2_Config>
 8008942:	4603      	mov	r3, r0
 8008944:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008948:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800894c:	2b00      	cmp	r3, #0
 800894e:	d003      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008950:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008954:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800895c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008960:	2100      	movs	r1, #0
 8008962:	6139      	str	r1, [r7, #16]
 8008964:	f003 0308 	and.w	r3, r3, #8
 8008968:	617b      	str	r3, [r7, #20]
 800896a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800896e:	460b      	mov	r3, r1
 8008970:	4313      	orrs	r3, r2
 8008972:	d011      	beq.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008978:	3328      	adds	r3, #40	@ 0x28
 800897a:	2100      	movs	r1, #0
 800897c:	4618      	mov	r0, r3
 800897e:	f001 f9ef 	bl	8009d60 <RCCEx_PLL3_Config>
 8008982:	4603      	mov	r3, r0
 8008984:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8008988:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800898c:	2b00      	cmp	r3, #0
 800898e:	d003      	beq.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008990:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008994:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800899c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a0:	2100      	movs	r1, #0
 80089a2:	60b9      	str	r1, [r7, #8]
 80089a4:	f003 0310 	and.w	r3, r3, #16
 80089a8:	60fb      	str	r3, [r7, #12]
 80089aa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80089ae:	460b      	mov	r3, r1
 80089b0:	4313      	orrs	r3, r2
 80089b2:	d011      	beq.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80089b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089b8:	3328      	adds	r3, #40	@ 0x28
 80089ba:	2101      	movs	r1, #1
 80089bc:	4618      	mov	r0, r3
 80089be:	f001 f9cf 	bl	8009d60 <RCCEx_PLL3_Config>
 80089c2:	4603      	mov	r3, r0
 80089c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80089c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d003      	beq.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80089d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80089d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e0:	2100      	movs	r1, #0
 80089e2:	6039      	str	r1, [r7, #0]
 80089e4:	f003 0320 	and.w	r3, r3, #32
 80089e8:	607b      	str	r3, [r7, #4]
 80089ea:	e9d7 1200 	ldrd	r1, r2, [r7]
 80089ee:	460b      	mov	r3, r1
 80089f0:	4313      	orrs	r3, r2
 80089f2:	d011      	beq.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80089f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089f8:	3328      	adds	r3, #40	@ 0x28
 80089fa:	2102      	movs	r1, #2
 80089fc:	4618      	mov	r0, r3
 80089fe:	f001 f9af 	bl	8009d60 <RCCEx_PLL3_Config>
 8008a02:	4603      	mov	r3, r0
 8008a04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008a08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d003      	beq.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8008a18:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d101      	bne.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	e000      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a32:	bf00      	nop
 8008a34:	58024400 	.word	0x58024400

08008a38 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b090      	sub	sp, #64	@ 0x40
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008a42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a46:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008a4a:	430b      	orrs	r3, r1
 8008a4c:	f040 8094 	bne.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008a50:	4b9b      	ldr	r3, [pc, #620]	@ (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a54:	f003 0307 	and.w	r3, r3, #7
 8008a58:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a5c:	2b04      	cmp	r3, #4
 8008a5e:	f200 8087 	bhi.w	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008a62:	a201      	add	r2, pc, #4	@ (adr r2, 8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a68:	08008a7d 	.word	0x08008a7d
 8008a6c:	08008aa5 	.word	0x08008aa5
 8008a70:	08008acd 	.word	0x08008acd
 8008a74:	08008b69 	.word	0x08008b69
 8008a78:	08008af5 	.word	0x08008af5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a7c:	4b90      	ldr	r3, [pc, #576]	@ (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a88:	d108      	bne.n	8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 ff62 	bl	8009958 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a98:	f000 bc93 	b.w	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aa0:	f000 bc8f 	b.w	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008aa4:	4b86      	ldr	r3, [pc, #536]	@ (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008aac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ab0:	d108      	bne.n	8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ab2:	f107 0318 	add.w	r3, r7, #24
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f000 fca6 	bl	8009408 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ac0:	f000 bc7f 	b.w	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ac8:	f000 bc7b 	b.w	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008acc:	4b7c      	ldr	r3, [pc, #496]	@ (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ad4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ad8:	d108      	bne.n	8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ada:	f107 030c 	add.w	r3, r7, #12
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f000 fde6 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ae8:	f000 bc6b 	b.w	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008aec:	2300      	movs	r3, #0
 8008aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008af0:	f000 bc67 	b.w	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008af4:	4b72      	ldr	r3, [pc, #456]	@ (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008af8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008afc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008afe:	4b70      	ldr	r3, [pc, #448]	@ (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0304 	and.w	r3, r3, #4
 8008b06:	2b04      	cmp	r3, #4
 8008b08:	d10c      	bne.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d109      	bne.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b10:	4b6b      	ldr	r3, [pc, #428]	@ (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	08db      	lsrs	r3, r3, #3
 8008b16:	f003 0303 	and.w	r3, r3, #3
 8008b1a:	4a6a      	ldr	r2, [pc, #424]	@ (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b22:	e01f      	b.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b24:	4b66      	ldr	r3, [pc, #408]	@ (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b30:	d106      	bne.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b38:	d102      	bne.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008b3a:	4b63      	ldr	r3, [pc, #396]	@ (8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b3e:	e011      	b.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b40:	4b5f      	ldr	r3, [pc, #380]	@ (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b4c:	d106      	bne.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b54:	d102      	bne.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b56:	4b5d      	ldr	r3, [pc, #372]	@ (8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b5a:	e003      	b.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008b60:	f000 bc2f 	b.w	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008b64:	f000 bc2d 	b.w	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b68:	4b59      	ldr	r3, [pc, #356]	@ (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b6c:	f000 bc29 	b.w	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008b70:	2300      	movs	r3, #0
 8008b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b74:	f000 bc25 	b.w	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b7c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008b80:	430b      	orrs	r3, r1
 8008b82:	f040 80a7 	bne.w	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008b86:	4b4e      	ldr	r3, [pc, #312]	@ (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b8a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008b8e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008b96:	d054      	beq.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008b9e:	f200 808b 	bhi.w	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008ba8:	f000 8083 	beq.w	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8008bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008bb2:	f200 8081 	bhi.w	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008bbc:	d02f      	beq.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008bc4:	d878      	bhi.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d004      	beq.n	8008bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8008bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008bd2:	d012      	beq.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8008bd4:	e070      	b.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008bd6:	4b3a      	ldr	r3, [pc, #232]	@ (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bde:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008be2:	d107      	bne.n	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008be8:	4618      	mov	r0, r3
 8008bea:	f000 feb5 	bl	8009958 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bf2:	e3e6      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bf8:	e3e3      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bfa:	4b31      	ldr	r3, [pc, #196]	@ (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c06:	d107      	bne.n	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c08:	f107 0318 	add.w	r3, r7, #24
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f000 fbfb 	bl	8009408 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c16:	e3d4      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c1c:	e3d1      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c1e:	4b28      	ldr	r3, [pc, #160]	@ (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c2a:	d107      	bne.n	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c2c:	f107 030c 	add.w	r3, r7, #12
 8008c30:	4618      	mov	r0, r3
 8008c32:	f000 fd3d 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c3a:	e3c2      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c40:	e3bf      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c42:	4b1f      	ldr	r3, [pc, #124]	@ (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008c4a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 0304 	and.w	r3, r3, #4
 8008c54:	2b04      	cmp	r3, #4
 8008c56:	d10c      	bne.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8008c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d109      	bne.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c5e:	4b18      	ldr	r3, [pc, #96]	@ (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	08db      	lsrs	r3, r3, #3
 8008c64:	f003 0303 	and.w	r3, r3, #3
 8008c68:	4a16      	ldr	r2, [pc, #88]	@ (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c70:	e01e      	b.n	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c72:	4b13      	ldr	r3, [pc, #76]	@ (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c7e:	d106      	bne.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c86:	d102      	bne.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c88:	4b0f      	ldr	r3, [pc, #60]	@ (8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c8c:	e010      	b.n	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c9a:	d106      	bne.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ca2:	d102      	bne.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008ca4:	4b09      	ldr	r3, [pc, #36]	@ (8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ca8:	e002      	b.n	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008caa:	2300      	movs	r3, #0
 8008cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008cae:	e388      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008cb0:	e387      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008cb2:	4b07      	ldr	r3, [pc, #28]	@ (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cb6:	e384      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cbc:	e381      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008cbe:	bf00      	nop
 8008cc0:	58024400 	.word	0x58024400
 8008cc4:	03d09000 	.word	0x03d09000
 8008cc8:	003d0900 	.word	0x003d0900
 8008ccc:	016e3600 	.word	0x016e3600
 8008cd0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008cd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cd8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008cdc:	430b      	orrs	r3, r1
 8008cde:	f040 809c 	bne.w	8008e1a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008ce2:	4b9e      	ldr	r3, [pc, #632]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ce6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008cea:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008cf2:	d054      	beq.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008cfa:	f200 808b 	bhi.w	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d00:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008d04:	f000 8083 	beq.w	8008e0e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8008d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d0a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008d0e:	f200 8081 	bhi.w	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d18:	d02f      	beq.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d20:	d878      	bhi.n	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d004      	beq.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d2e:	d012      	beq.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008d30:	e070      	b.n	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d32:	4b8a      	ldr	r3, [pc, #552]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d3e:	d107      	bne.n	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d44:	4618      	mov	r0, r3
 8008d46:	f000 fe07 	bl	8009958 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d4e:	e338      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d50:	2300      	movs	r3, #0
 8008d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d54:	e335      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d56:	4b81      	ldr	r3, [pc, #516]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d62:	d107      	bne.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d64:	f107 0318 	add.w	r3, r7, #24
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f000 fb4d 	bl	8009408 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d72:	e326      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d74:	2300      	movs	r3, #0
 8008d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d78:	e323      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d7a:	4b78      	ldr	r3, [pc, #480]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d86:	d107      	bne.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d88:	f107 030c 	add.w	r3, r7, #12
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 fc8f 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d96:	e314      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d9c:	e311      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d9e:	4b6f      	ldr	r3, [pc, #444]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008da2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008da6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008da8:	4b6c      	ldr	r3, [pc, #432]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 0304 	and.w	r3, r3, #4
 8008db0:	2b04      	cmp	r3, #4
 8008db2:	d10c      	bne.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d109      	bne.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008dba:	4b68      	ldr	r3, [pc, #416]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	08db      	lsrs	r3, r3, #3
 8008dc0:	f003 0303 	and.w	r3, r3, #3
 8008dc4:	4a66      	ldr	r2, [pc, #408]	@ (8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8008dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008dcc:	e01e      	b.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008dce:	4b63      	ldr	r3, [pc, #396]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dda:	d106      	bne.n	8008dea <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008de2:	d102      	bne.n	8008dea <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008de4:	4b5f      	ldr	r3, [pc, #380]	@ (8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008de8:	e010      	b.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008dea:	4b5c      	ldr	r3, [pc, #368]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008df2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008df6:	d106      	bne.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dfe:	d102      	bne.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008e00:	4b59      	ldr	r3, [pc, #356]	@ (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e04:	e002      	b.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008e06:	2300      	movs	r3, #0
 8008e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008e0a:	e2da      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008e0c:	e2d9      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008e0e:	4b57      	ldr	r3, [pc, #348]	@ (8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e12:	e2d6      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008e14:	2300      	movs	r3, #0
 8008e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e18:	e2d3      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008e1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e1e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008e22:	430b      	orrs	r3, r1
 8008e24:	f040 80a7 	bne.w	8008f76 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008e28:	4b4c      	ldr	r3, [pc, #304]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e2c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008e30:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e38:	d055      	beq.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e40:	f200 8096 	bhi.w	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e46:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008e4a:	f000 8084 	beq.w	8008f56 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e50:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008e54:	f200 808c 	bhi.w	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e5e:	d030      	beq.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e66:	f200 8083 	bhi.w	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d004      	beq.n	8008e7a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e76:	d012      	beq.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008e78:	e07a      	b.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e7a:	4b38      	ldr	r3, [pc, #224]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e86:	d107      	bne.n	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f000 fd63 	bl	8009958 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e96:	e294      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e9c:	e291      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ea6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008eaa:	d107      	bne.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eac:	f107 0318 	add.w	r3, r7, #24
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f000 faa9 	bl	8009408 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eba:	e282      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ec0:	e27f      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ec2:	4b26      	ldr	r3, [pc, #152]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008eca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ece:	d107      	bne.n	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ed0:	f107 030c 	add.w	r3, r7, #12
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f000 fbeb 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ede:	e270      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ee4:	e26d      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008eea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008eee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 0304 	and.w	r3, r3, #4
 8008ef8:	2b04      	cmp	r3, #4
 8008efa:	d10c      	bne.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d109      	bne.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f02:	4b16      	ldr	r3, [pc, #88]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	08db      	lsrs	r3, r3, #3
 8008f08:	f003 0303 	and.w	r3, r3, #3
 8008f0c:	4a14      	ldr	r2, [pc, #80]	@ (8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f14:	e01e      	b.n	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f16:	4b11      	ldr	r3, [pc, #68]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f22:	d106      	bne.n	8008f32 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f2a:	d102      	bne.n	8008f32 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f30:	e010      	b.n	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f32:	4b0a      	ldr	r3, [pc, #40]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f3e:	d106      	bne.n	8008f4e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f46:	d102      	bne.n	8008f4e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008f48:	4b07      	ldr	r3, [pc, #28]	@ (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f4c:	e002      	b.n	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008f52:	e236      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008f54:	e235      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008f56:	4b05      	ldr	r3, [pc, #20]	@ (8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f5a:	e232      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008f5c:	58024400 	.word	0x58024400
 8008f60:	03d09000 	.word	0x03d09000
 8008f64:	003d0900 	.word	0x003d0900
 8008f68:	016e3600 	.word	0x016e3600
 8008f6c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008f70:	2300      	movs	r3, #0
 8008f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f74:	e225      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008f76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f7a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008f7e:	430b      	orrs	r3, r1
 8008f80:	f040 8085 	bne.w	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008f84:	4b9c      	ldr	r3, [pc, #624]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f88:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f94:	d06b      	beq.n	800906e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f9c:	d874      	bhi.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fa0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008fa4:	d056      	beq.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8008fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fa8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008fac:	d86c      	bhi.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fb0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008fb4:	d03b      	beq.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fb8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008fbc:	d864      	bhi.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fc4:	d021      	beq.n	800900a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fcc:	d85c      	bhi.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d004      	beq.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8008fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fda:	d004      	beq.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8008fdc:	e054      	b.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008fde:	f7fe fb5f 	bl	80076a0 <HAL_RCC_GetPCLK1Freq>
 8008fe2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008fe4:	e1ed      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fe6:	4b84      	ldr	r3, [pc, #528]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ff2:	d107      	bne.n	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ff4:	f107 0318 	add.w	r3, r7, #24
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f000 fa05 	bl	8009408 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009002:	e1de      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009004:	2300      	movs	r3, #0
 8009006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009008:	e1db      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800900a:	4b7b      	ldr	r3, [pc, #492]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009012:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009016:	d107      	bne.n	8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009018:	f107 030c 	add.w	r3, r7, #12
 800901c:	4618      	mov	r0, r3
 800901e:	f000 fb47 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009026:	e1cc      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009028:	2300      	movs	r3, #0
 800902a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800902c:	e1c9      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800902e:	4b72      	ldr	r3, [pc, #456]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 0304 	and.w	r3, r3, #4
 8009036:	2b04      	cmp	r3, #4
 8009038:	d109      	bne.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800903a:	4b6f      	ldr	r3, [pc, #444]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	08db      	lsrs	r3, r3, #3
 8009040:	f003 0303 	and.w	r3, r3, #3
 8009044:	4a6d      	ldr	r2, [pc, #436]	@ (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8009046:	fa22 f303 	lsr.w	r3, r2, r3
 800904a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800904c:	e1b9      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800904e:	2300      	movs	r3, #0
 8009050:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009052:	e1b6      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009054:	4b68      	ldr	r3, [pc, #416]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800905c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009060:	d102      	bne.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8009062:	4b67      	ldr	r3, [pc, #412]	@ (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8009064:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009066:	e1ac      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009068:	2300      	movs	r3, #0
 800906a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800906c:	e1a9      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800906e:	4b62      	ldr	r3, [pc, #392]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009076:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800907a:	d102      	bne.n	8009082 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800907c:	4b61      	ldr	r3, [pc, #388]	@ (8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800907e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009080:	e19f      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009082:	2300      	movs	r3, #0
 8009084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009086:	e19c      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009088:	2300      	movs	r3, #0
 800908a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800908c:	e199      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800908e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009092:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009096:	430b      	orrs	r3, r1
 8009098:	d173      	bne.n	8009182 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800909a:	4b57      	ldr	r3, [pc, #348]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800909c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800909e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80090a2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80090a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090aa:	d02f      	beq.n	800910c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80090ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090b2:	d863      	bhi.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80090b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d004      	beq.n	80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80090ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090c0:	d012      	beq.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80090c2:	e05b      	b.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090c4:	4b4c      	ldr	r3, [pc, #304]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090d0:	d107      	bne.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090d2:	f107 0318 	add.w	r3, r7, #24
 80090d6:	4618      	mov	r0, r3
 80090d8:	f000 f996 	bl	8009408 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090dc:	69bb      	ldr	r3, [r7, #24]
 80090de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090e0:	e16f      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090e2:	2300      	movs	r3, #0
 80090e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090e6:	e16c      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090e8:	4b43      	ldr	r3, [pc, #268]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090f4:	d107      	bne.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090f6:	f107 030c 	add.w	r3, r7, #12
 80090fa:	4618      	mov	r0, r3
 80090fc:	f000 fad8 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009104:	e15d      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009106:	2300      	movs	r3, #0
 8009108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800910a:	e15a      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800910c:	4b3a      	ldr	r3, [pc, #232]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800910e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009110:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009114:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009116:	4b38      	ldr	r3, [pc, #224]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f003 0304 	and.w	r3, r3, #4
 800911e:	2b04      	cmp	r3, #4
 8009120:	d10c      	bne.n	800913c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8009122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009124:	2b00      	cmp	r3, #0
 8009126:	d109      	bne.n	800913c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009128:	4b33      	ldr	r3, [pc, #204]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	08db      	lsrs	r3, r3, #3
 800912e:	f003 0303 	and.w	r3, r3, #3
 8009132:	4a32      	ldr	r2, [pc, #200]	@ (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8009134:	fa22 f303 	lsr.w	r3, r2, r3
 8009138:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800913a:	e01e      	b.n	800917a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800913c:	4b2e      	ldr	r3, [pc, #184]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009144:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009148:	d106      	bne.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800914a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800914c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009150:	d102      	bne.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009152:	4b2b      	ldr	r3, [pc, #172]	@ (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8009154:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009156:	e010      	b.n	800917a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009158:	4b27      	ldr	r3, [pc, #156]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009160:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009164:	d106      	bne.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8009166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009168:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800916c:	d102      	bne.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800916e:	4b25      	ldr	r3, [pc, #148]	@ (8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8009170:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009172:	e002      	b.n	800917a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009174:	2300      	movs	r3, #0
 8009176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009178:	e123      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800917a:	e122      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800917c:	2300      	movs	r3, #0
 800917e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009180:	e11f      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009182:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009186:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800918a:	430b      	orrs	r3, r1
 800918c:	d13c      	bne.n	8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800918e:	4b1a      	ldr	r3, [pc, #104]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009192:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009196:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800919a:	2b00      	cmp	r3, #0
 800919c:	d004      	beq.n	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800919e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091a4:	d012      	beq.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80091a6:	e023      	b.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091a8:	4b13      	ldr	r3, [pc, #76]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091b4:	d107      	bne.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091ba:	4618      	mov	r0, r3
 80091bc:	f000 fbcc 	bl	8009958 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091c4:	e0fd      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80091c6:	2300      	movs	r3, #0
 80091c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091ca:	e0fa      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091cc:	4b0a      	ldr	r3, [pc, #40]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091d8:	d107      	bne.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091da:	f107 0318 	add.w	r3, r7, #24
 80091de:	4618      	mov	r0, r3
 80091e0:	f000 f912 	bl	8009408 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80091e4:	6a3b      	ldr	r3, [r7, #32]
 80091e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091e8:	e0eb      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80091ea:	2300      	movs	r3, #0
 80091ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091ee:	e0e8      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80091f0:	2300      	movs	r3, #0
 80091f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091f4:	e0e5      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80091f6:	bf00      	nop
 80091f8:	58024400 	.word	0x58024400
 80091fc:	03d09000 	.word	0x03d09000
 8009200:	003d0900 	.word	0x003d0900
 8009204:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009208:	e9d7 2300 	ldrd	r2, r3, [r7]
 800920c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009210:	430b      	orrs	r3, r1
 8009212:	f040 8085 	bne.w	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009216:	4b6d      	ldr	r3, [pc, #436]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800921a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800921e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009222:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009226:	d06b      	beq.n	8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8009228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800922a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800922e:	d874      	bhi.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009236:	d056      	beq.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8009238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800923a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800923e:	d86c      	bhi.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009242:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009246:	d03b      	beq.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8009248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800924a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800924e:	d864      	bhi.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009252:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009256:	d021      	beq.n	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8009258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800925a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800925e:	d85c      	bhi.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009262:	2b00      	cmp	r3, #0
 8009264:	d004      	beq.n	8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8009266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009268:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800926c:	d004      	beq.n	8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800926e:	e054      	b.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009270:	f000 f8b4 	bl	80093dc <HAL_RCCEx_GetD3PCLK1Freq>
 8009274:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009276:	e0a4      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009278:	4b54      	ldr	r3, [pc, #336]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009280:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009284:	d107      	bne.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009286:	f107 0318 	add.w	r3, r7, #24
 800928a:	4618      	mov	r0, r3
 800928c:	f000 f8bc 	bl	8009408 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009294:	e095      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009296:	2300      	movs	r3, #0
 8009298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800929a:	e092      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800929c:	4b4b      	ldr	r3, [pc, #300]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80092a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092a8:	d107      	bne.n	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092aa:	f107 030c 	add.w	r3, r7, #12
 80092ae:	4618      	mov	r0, r3
 80092b0:	f000 f9fe 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092b8:	e083      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80092ba:	2300      	movs	r3, #0
 80092bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092be:	e080      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80092c0:	4b42      	ldr	r3, [pc, #264]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f003 0304 	and.w	r3, r3, #4
 80092c8:	2b04      	cmp	r3, #4
 80092ca:	d109      	bne.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092cc:	4b3f      	ldr	r3, [pc, #252]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	08db      	lsrs	r3, r3, #3
 80092d2:	f003 0303 	and.w	r3, r3, #3
 80092d6:	4a3e      	ldr	r2, [pc, #248]	@ (80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80092d8:	fa22 f303 	lsr.w	r3, r2, r3
 80092dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092de:	e070      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80092e0:	2300      	movs	r3, #0
 80092e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092e4:	e06d      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80092e6:	4b39      	ldr	r3, [pc, #228]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092f2:	d102      	bne.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 80092f4:	4b37      	ldr	r3, [pc, #220]	@ (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80092f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092f8:	e063      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80092fa:	2300      	movs	r3, #0
 80092fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092fe:	e060      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009300:	4b32      	ldr	r3, [pc, #200]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009308:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800930c:	d102      	bne.n	8009314 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800930e:	4b32      	ldr	r3, [pc, #200]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009312:	e056      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009314:	2300      	movs	r3, #0
 8009316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009318:	e053      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800931a:	2300      	movs	r3, #0
 800931c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800931e:	e050      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009320:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009324:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009328:	430b      	orrs	r3, r1
 800932a:	d148      	bne.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800932c:	4b27      	ldr	r3, [pc, #156]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800932e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009330:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009334:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009338:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800933c:	d02a      	beq.n	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800933e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009340:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009344:	d838      	bhi.n	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8009346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009348:	2b00      	cmp	r3, #0
 800934a:	d004      	beq.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800934c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800934e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009352:	d00d      	beq.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8009354:	e030      	b.n	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009356:	4b1d      	ldr	r3, [pc, #116]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800935e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009362:	d102      	bne.n	800936a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8009364:	4b1c      	ldr	r3, [pc, #112]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009368:	e02b      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800936a:	2300      	movs	r3, #0
 800936c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800936e:	e028      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009370:	4b16      	ldr	r3, [pc, #88]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009378:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800937c:	d107      	bne.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800937e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009382:	4618      	mov	r0, r3
 8009384:	f000 fae8 	bl	8009958 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800938a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800938c:	e019      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800938e:	2300      	movs	r3, #0
 8009390:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009392:	e016      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009394:	4b0d      	ldr	r3, [pc, #52]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800939c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093a0:	d107      	bne.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093a2:	f107 0318 	add.w	r3, r7, #24
 80093a6:	4618      	mov	r0, r3
 80093a8:	f000 f82e 	bl	8009408 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093b0:	e007      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80093b2:	2300      	movs	r3, #0
 80093b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093b6:	e004      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80093b8:	2300      	movs	r3, #0
 80093ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093bc:	e001      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80093be:	2300      	movs	r3, #0
 80093c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80093c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3740      	adds	r7, #64	@ 0x40
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	58024400 	.word	0x58024400
 80093d0:	03d09000 	.word	0x03d09000
 80093d4:	003d0900 	.word	0x003d0900
 80093d8:	016e3600 	.word	0x016e3600

080093dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80093e0:	f7fe f92e 	bl	8007640 <HAL_RCC_GetHCLKFreq>
 80093e4:	4602      	mov	r2, r0
 80093e6:	4b06      	ldr	r3, [pc, #24]	@ (8009400 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80093e8:	6a1b      	ldr	r3, [r3, #32]
 80093ea:	091b      	lsrs	r3, r3, #4
 80093ec:	f003 0307 	and.w	r3, r3, #7
 80093f0:	4904      	ldr	r1, [pc, #16]	@ (8009404 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80093f2:	5ccb      	ldrb	r3, [r1, r3]
 80093f4:	f003 031f 	and.w	r3, r3, #31
 80093f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	58024400 	.word	0x58024400
 8009404:	0800cf78 	.word	0x0800cf78

08009408 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009408:	b480      	push	{r7}
 800940a:	b089      	sub	sp, #36	@ 0x24
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009410:	4ba1      	ldr	r3, [pc, #644]	@ (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009414:	f003 0303 	and.w	r3, r3, #3
 8009418:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800941a:	4b9f      	ldr	r3, [pc, #636]	@ (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800941c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800941e:	0b1b      	lsrs	r3, r3, #12
 8009420:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009424:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009426:	4b9c      	ldr	r3, [pc, #624]	@ (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800942a:	091b      	lsrs	r3, r3, #4
 800942c:	f003 0301 	and.w	r3, r3, #1
 8009430:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009432:	4b99      	ldr	r3, [pc, #612]	@ (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009436:	08db      	lsrs	r3, r3, #3
 8009438:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800943c:	693a      	ldr	r2, [r7, #16]
 800943e:	fb02 f303 	mul.w	r3, r2, r3
 8009442:	ee07 3a90 	vmov	s15, r3
 8009446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800944a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	2b00      	cmp	r3, #0
 8009452:	f000 8111 	beq.w	8009678 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	2b02      	cmp	r3, #2
 800945a:	f000 8083 	beq.w	8009564 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	2b02      	cmp	r3, #2
 8009462:	f200 80a1 	bhi.w	80095a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d003      	beq.n	8009474 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	2b01      	cmp	r3, #1
 8009470:	d056      	beq.n	8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009472:	e099      	b.n	80095a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009474:	4b88      	ldr	r3, [pc, #544]	@ (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 0320 	and.w	r3, r3, #32
 800947c:	2b00      	cmp	r3, #0
 800947e:	d02d      	beq.n	80094dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009480:	4b85      	ldr	r3, [pc, #532]	@ (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	08db      	lsrs	r3, r3, #3
 8009486:	f003 0303 	and.w	r3, r3, #3
 800948a:	4a84      	ldr	r2, [pc, #528]	@ (800969c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800948c:	fa22 f303 	lsr.w	r3, r2, r3
 8009490:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	ee07 3a90 	vmov	s15, r3
 8009498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	ee07 3a90 	vmov	s15, r3
 80094a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094aa:	4b7b      	ldr	r3, [pc, #492]	@ (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094b2:	ee07 3a90 	vmov	s15, r3
 80094b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80094be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80096a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80094c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80094da:	e087      	b.n	80095ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	ee07 3a90 	vmov	s15, r3
 80094e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094e6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80096a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80094ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ee:	4b6a      	ldr	r3, [pc, #424]	@ (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094f6:	ee07 3a90 	vmov	s15, r3
 80094fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009502:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80096a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800950a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800950e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800951a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800951e:	e065      	b.n	80095ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	ee07 3a90 	vmov	s15, r3
 8009526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800952a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800952e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009532:	4b59      	ldr	r3, [pc, #356]	@ (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800953a:	ee07 3a90 	vmov	s15, r3
 800953e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009542:	ed97 6a03 	vldr	s12, [r7, #12]
 8009546:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80096a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800954a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800954e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009552:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800955a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800955e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009562:	e043      	b.n	80095ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	ee07 3a90 	vmov	s15, r3
 800956a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800956e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80096ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009576:	4b48      	ldr	r3, [pc, #288]	@ (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800957a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800957e:	ee07 3a90 	vmov	s15, r3
 8009582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009586:	ed97 6a03 	vldr	s12, [r7, #12]
 800958a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80096a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800958e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009596:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800959a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800959e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095a6:	e021      	b.n	80095ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	ee07 3a90 	vmov	s15, r3
 80095ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80095b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095ba:	4b37      	ldr	r3, [pc, #220]	@ (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095c2:	ee07 3a90 	vmov	s15, r3
 80095c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80095ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80096a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80095d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80095ec:	4b2a      	ldr	r3, [pc, #168]	@ (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095f0:	0a5b      	lsrs	r3, r3, #9
 80095f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095f6:	ee07 3a90 	vmov	s15, r3
 80095fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009602:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009606:	edd7 6a07 	vldr	s13, [r7, #28]
 800960a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800960e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009612:	ee17 2a90 	vmov	r2, s15
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800961a:	4b1f      	ldr	r3, [pc, #124]	@ (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800961c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800961e:	0c1b      	lsrs	r3, r3, #16
 8009620:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009624:	ee07 3a90 	vmov	s15, r3
 8009628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800962c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009630:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009634:	edd7 6a07 	vldr	s13, [r7, #28]
 8009638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800963c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009640:	ee17 2a90 	vmov	r2, s15
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009648:	4b13      	ldr	r3, [pc, #76]	@ (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800964a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800964c:	0e1b      	lsrs	r3, r3, #24
 800964e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009652:	ee07 3a90 	vmov	s15, r3
 8009656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800965a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800965e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009662:	edd7 6a07 	vldr	s13, [r7, #28]
 8009666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800966a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800966e:	ee17 2a90 	vmov	r2, s15
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009676:	e008      	b.n	800968a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	609a      	str	r2, [r3, #8]
}
 800968a:	bf00      	nop
 800968c:	3724      	adds	r7, #36	@ 0x24
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop
 8009698:	58024400 	.word	0x58024400
 800969c:	03d09000 	.word	0x03d09000
 80096a0:	46000000 	.word	0x46000000
 80096a4:	4c742400 	.word	0x4c742400
 80096a8:	4a742400 	.word	0x4a742400
 80096ac:	4bb71b00 	.word	0x4bb71b00

080096b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b089      	sub	sp, #36	@ 0x24
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80096b8:	4ba1      	ldr	r3, [pc, #644]	@ (8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096bc:	f003 0303 	and.w	r3, r3, #3
 80096c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80096c2:	4b9f      	ldr	r3, [pc, #636]	@ (8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096c6:	0d1b      	lsrs	r3, r3, #20
 80096c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80096cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80096ce:	4b9c      	ldr	r3, [pc, #624]	@ (8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096d2:	0a1b      	lsrs	r3, r3, #8
 80096d4:	f003 0301 	and.w	r3, r3, #1
 80096d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80096da:	4b99      	ldr	r3, [pc, #612]	@ (8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096de:	08db      	lsrs	r3, r3, #3
 80096e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80096e4:	693a      	ldr	r2, [r7, #16]
 80096e6:	fb02 f303 	mul.w	r3, r2, r3
 80096ea:	ee07 3a90 	vmov	s15, r3
 80096ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	f000 8111 	beq.w	8009920 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	2b02      	cmp	r3, #2
 8009702:	f000 8083 	beq.w	800980c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	2b02      	cmp	r3, #2
 800970a:	f200 80a1 	bhi.w	8009850 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d003      	beq.n	800971c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	2b01      	cmp	r3, #1
 8009718:	d056      	beq.n	80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800971a:	e099      	b.n	8009850 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800971c:	4b88      	ldr	r3, [pc, #544]	@ (8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f003 0320 	and.w	r3, r3, #32
 8009724:	2b00      	cmp	r3, #0
 8009726:	d02d      	beq.n	8009784 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009728:	4b85      	ldr	r3, [pc, #532]	@ (8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	08db      	lsrs	r3, r3, #3
 800972e:	f003 0303 	and.w	r3, r3, #3
 8009732:	4a84      	ldr	r2, [pc, #528]	@ (8009944 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009734:	fa22 f303 	lsr.w	r3, r2, r3
 8009738:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	ee07 3a90 	vmov	s15, r3
 8009740:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	ee07 3a90 	vmov	s15, r3
 800974a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800974e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009752:	4b7b      	ldr	r3, [pc, #492]	@ (8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800975a:	ee07 3a90 	vmov	s15, r3
 800975e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009762:	ed97 6a03 	vldr	s12, [r7, #12]
 8009766:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009948 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800976a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800976e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009772:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800977a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800977e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009782:	e087      	b.n	8009894 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	ee07 3a90 	vmov	s15, r3
 800978a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800978e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800994c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009796:	4b6a      	ldr	r3, [pc, #424]	@ (8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800979a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800979e:	ee07 3a90 	vmov	s15, r3
 80097a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80097aa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009948 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80097ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097c6:	e065      	b.n	8009894 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	ee07 3a90 	vmov	s15, r3
 80097ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097d2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80097d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097da:	4b59      	ldr	r3, [pc, #356]	@ (8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097e2:	ee07 3a90 	vmov	s15, r3
 80097e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80097ee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009948 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80097f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800980a:	e043      	b.n	8009894 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	ee07 3a90 	vmov	s15, r3
 8009812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009816:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009954 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800981a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800981e:	4b48      	ldr	r3, [pc, #288]	@ (8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009826:	ee07 3a90 	vmov	s15, r3
 800982a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800982e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009832:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009948 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800983a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800983e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800984a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800984e:	e021      	b.n	8009894 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	ee07 3a90 	vmov	s15, r3
 8009856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800985a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800985e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009862:	4b37      	ldr	r3, [pc, #220]	@ (8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800986a:	ee07 3a90 	vmov	s15, r3
 800986e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009872:	ed97 6a03 	vldr	s12, [r7, #12]
 8009876:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009948 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800987a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800987e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009882:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800988a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800988e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009892:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009894:	4b2a      	ldr	r3, [pc, #168]	@ (8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009898:	0a5b      	lsrs	r3, r3, #9
 800989a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800989e:	ee07 3a90 	vmov	s15, r3
 80098a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80098aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80098b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098ba:	ee17 2a90 	vmov	r2, s15
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80098c2:	4b1f      	ldr	r3, [pc, #124]	@ (8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098c6:	0c1b      	lsrs	r3, r3, #16
 80098c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098cc:	ee07 3a90 	vmov	s15, r3
 80098d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80098d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80098e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098e8:	ee17 2a90 	vmov	r2, s15
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80098f0:	4b13      	ldr	r3, [pc, #76]	@ (8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098f4:	0e1b      	lsrs	r3, r3, #24
 80098f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098fa:	ee07 3a90 	vmov	s15, r3
 80098fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009902:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009906:	ee37 7a87 	vadd.f32	s14, s15, s14
 800990a:	edd7 6a07 	vldr	s13, [r7, #28]
 800990e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009916:	ee17 2a90 	vmov	r2, s15
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800991e:	e008      	b.n	8009932 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	609a      	str	r2, [r3, #8]
}
 8009932:	bf00      	nop
 8009934:	3724      	adds	r7, #36	@ 0x24
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr
 800993e:	bf00      	nop
 8009940:	58024400 	.word	0x58024400
 8009944:	03d09000 	.word	0x03d09000
 8009948:	46000000 	.word	0x46000000
 800994c:	4c742400 	.word	0x4c742400
 8009950:	4a742400 	.word	0x4a742400
 8009954:	4bb71b00 	.word	0x4bb71b00

08009958 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009958:	b480      	push	{r7}
 800995a:	b089      	sub	sp, #36	@ 0x24
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009960:	4ba0      	ldr	r3, [pc, #640]	@ (8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009964:	f003 0303 	and.w	r3, r3, #3
 8009968:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800996a:	4b9e      	ldr	r3, [pc, #632]	@ (8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800996c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800996e:	091b      	lsrs	r3, r3, #4
 8009970:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009974:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009976:	4b9b      	ldr	r3, [pc, #620]	@ (8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800997a:	f003 0301 	and.w	r3, r3, #1
 800997e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009980:	4b98      	ldr	r3, [pc, #608]	@ (8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009984:	08db      	lsrs	r3, r3, #3
 8009986:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800998a:	693a      	ldr	r2, [r7, #16]
 800998c:	fb02 f303 	mul.w	r3, r2, r3
 8009990:	ee07 3a90 	vmov	s15, r3
 8009994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009998:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	f000 8111 	beq.w	8009bc6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	2b02      	cmp	r3, #2
 80099a8:	f000 8083 	beq.w	8009ab2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	2b02      	cmp	r3, #2
 80099b0:	f200 80a1 	bhi.w	8009af6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d003      	beq.n	80099c2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d056      	beq.n	8009a6e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80099c0:	e099      	b.n	8009af6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099c2:	4b88      	ldr	r3, [pc, #544]	@ (8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f003 0320 	and.w	r3, r3, #32
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d02d      	beq.n	8009a2a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099ce:	4b85      	ldr	r3, [pc, #532]	@ (8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	08db      	lsrs	r3, r3, #3
 80099d4:	f003 0303 	and.w	r3, r3, #3
 80099d8:	4a83      	ldr	r2, [pc, #524]	@ (8009be8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80099da:	fa22 f303 	lsr.w	r3, r2, r3
 80099de:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	ee07 3a90 	vmov	s15, r3
 80099e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	ee07 3a90 	vmov	s15, r3
 80099f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099f8:	4b7a      	ldr	r3, [pc, #488]	@ (8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a00:	ee07 3a90 	vmov	s15, r3
 8009a04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a08:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a0c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009bec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009a10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a24:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009a28:	e087      	b.n	8009b3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	ee07 3a90 	vmov	s15, r3
 8009a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a34:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009a38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a3c:	4b69      	ldr	r3, [pc, #420]	@ (8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a44:	ee07 3a90 	vmov	s15, r3
 8009a48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a50:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009bec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009a54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a6c:	e065      	b.n	8009b3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	ee07 3a90 	vmov	s15, r3
 8009a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a78:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009a7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a80:	4b58      	ldr	r3, [pc, #352]	@ (8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a88:	ee07 3a90 	vmov	s15, r3
 8009a8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a90:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a94:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009bec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009a98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aa0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009aa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ab0:	e043      	b.n	8009b3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	ee07 3a90 	vmov	s15, r3
 8009ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009abc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009ac0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ac4:	4b47      	ldr	r3, [pc, #284]	@ (8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009acc:	ee07 3a90 	vmov	s15, r3
 8009ad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ad4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ad8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009bec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009adc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ae0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ae4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ae8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009af0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009af4:	e021      	b.n	8009b3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	ee07 3a90 	vmov	s15, r3
 8009afc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b00:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009b04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b08:	4b36      	ldr	r3, [pc, #216]	@ (8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b10:	ee07 3a90 	vmov	s15, r3
 8009b14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b18:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b1c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009bec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009b20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b38:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009b3a:	4b2a      	ldr	r3, [pc, #168]	@ (8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b3e:	0a5b      	lsrs	r3, r3, #9
 8009b40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b44:	ee07 3a90 	vmov	s15, r3
 8009b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009b50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b54:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b60:	ee17 2a90 	vmov	r2, s15
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009b68:	4b1e      	ldr	r3, [pc, #120]	@ (8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b6c:	0c1b      	lsrs	r3, r3, #16
 8009b6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b72:	ee07 3a90 	vmov	s15, r3
 8009b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009b7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b82:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b8e:	ee17 2a90 	vmov	r2, s15
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009b96:	4b13      	ldr	r3, [pc, #76]	@ (8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b9a:	0e1b      	lsrs	r3, r3, #24
 8009b9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ba0:	ee07 3a90 	vmov	s15, r3
 8009ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ba8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009bac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bbc:	ee17 2a90 	vmov	r2, s15
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009bc4:	e008      	b.n	8009bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	609a      	str	r2, [r3, #8]
}
 8009bd8:	bf00      	nop
 8009bda:	3724      	adds	r7, #36	@ 0x24
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr
 8009be4:	58024400 	.word	0x58024400
 8009be8:	03d09000 	.word	0x03d09000
 8009bec:	46000000 	.word	0x46000000
 8009bf0:	4c742400 	.word	0x4c742400
 8009bf4:	4a742400 	.word	0x4a742400
 8009bf8:	4bb71b00 	.word	0x4bb71b00

08009bfc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009c0a:	4b53      	ldr	r3, [pc, #332]	@ (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c0e:	f003 0303 	and.w	r3, r3, #3
 8009c12:	2b03      	cmp	r3, #3
 8009c14:	d101      	bne.n	8009c1a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	e099      	b.n	8009d4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009c1a:	4b4f      	ldr	r3, [pc, #316]	@ (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a4e      	ldr	r2, [pc, #312]	@ (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009c20:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009c24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c26:	f7f9 f965 	bl	8002ef4 <HAL_GetTick>
 8009c2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009c2c:	e008      	b.n	8009c40 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009c2e:	f7f9 f961 	bl	8002ef4 <HAL_GetTick>
 8009c32:	4602      	mov	r2, r0
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	1ad3      	subs	r3, r2, r3
 8009c38:	2b02      	cmp	r3, #2
 8009c3a:	d901      	bls.n	8009c40 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009c3c:	2303      	movs	r3, #3
 8009c3e:	e086      	b.n	8009d4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009c40:	4b45      	ldr	r3, [pc, #276]	@ (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d1f0      	bne.n	8009c2e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009c4c:	4b42      	ldr	r3, [pc, #264]	@ (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c50:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	031b      	lsls	r3, r3, #12
 8009c5a:	493f      	ldr	r1, [pc, #252]	@ (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	3b01      	subs	r3, #1
 8009c66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	3b01      	subs	r3, #1
 8009c70:	025b      	lsls	r3, r3, #9
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	431a      	orrs	r2, r3
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	041b      	lsls	r3, r3, #16
 8009c7e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009c82:	431a      	orrs	r2, r3
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	3b01      	subs	r3, #1
 8009c8a:	061b      	lsls	r3, r3, #24
 8009c8c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009c90:	4931      	ldr	r1, [pc, #196]	@ (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009c92:	4313      	orrs	r3, r2
 8009c94:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009c96:	4b30      	ldr	r3, [pc, #192]	@ (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	695b      	ldr	r3, [r3, #20]
 8009ca2:	492d      	ldr	r1, [pc, #180]	@ (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cac:	f023 0220 	bic.w	r2, r3, #32
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	699b      	ldr	r3, [r3, #24]
 8009cb4:	4928      	ldr	r1, [pc, #160]	@ (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009cba:	4b27      	ldr	r3, [pc, #156]	@ (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cbe:	4a26      	ldr	r2, [pc, #152]	@ (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009cc0:	f023 0310 	bic.w	r3, r3, #16
 8009cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009cc6:	4b24      	ldr	r3, [pc, #144]	@ (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009cc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009cca:	4b24      	ldr	r3, [pc, #144]	@ (8009d5c <RCCEx_PLL2_Config+0x160>)
 8009ccc:	4013      	ands	r3, r2
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	69d2      	ldr	r2, [r2, #28]
 8009cd2:	00d2      	lsls	r2, r2, #3
 8009cd4:	4920      	ldr	r1, [pc, #128]	@ (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009cda:	4b1f      	ldr	r3, [pc, #124]	@ (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cde:	4a1e      	ldr	r2, [pc, #120]	@ (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009ce0:	f043 0310 	orr.w	r3, r3, #16
 8009ce4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d106      	bne.n	8009cfa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009cec:	4b1a      	ldr	r3, [pc, #104]	@ (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cf0:	4a19      	ldr	r2, [pc, #100]	@ (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009cf2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009cf6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009cf8:	e00f      	b.n	8009d1a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d106      	bne.n	8009d0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009d00:	4b15      	ldr	r3, [pc, #84]	@ (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d04:	4a14      	ldr	r2, [pc, #80]	@ (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009d06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009d0c:	e005      	b.n	8009d1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009d0e:	4b12      	ldr	r3, [pc, #72]	@ (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d12:	4a11      	ldr	r2, [pc, #68]	@ (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009d14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009d18:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009d20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009d24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d26:	f7f9 f8e5 	bl	8002ef4 <HAL_GetTick>
 8009d2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009d2c:	e008      	b.n	8009d40 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009d2e:	f7f9 f8e1 	bl	8002ef4 <HAL_GetTick>
 8009d32:	4602      	mov	r2, r0
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	d901      	bls.n	8009d40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	e006      	b.n	8009d4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009d40:	4b05      	ldr	r3, [pc, #20]	@ (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d0f0      	beq.n	8009d2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	58024400 	.word	0x58024400
 8009d5c:	ffff0007 	.word	0xffff0007

08009d60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009d6e:	4b53      	ldr	r3, [pc, #332]	@ (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d72:	f003 0303 	and.w	r3, r3, #3
 8009d76:	2b03      	cmp	r3, #3
 8009d78:	d101      	bne.n	8009d7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e099      	b.n	8009eb2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009d7e:	4b4f      	ldr	r3, [pc, #316]	@ (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a4e      	ldr	r2, [pc, #312]	@ (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009d84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d8a:	f7f9 f8b3 	bl	8002ef4 <HAL_GetTick>
 8009d8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009d90:	e008      	b.n	8009da4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009d92:	f7f9 f8af 	bl	8002ef4 <HAL_GetTick>
 8009d96:	4602      	mov	r2, r0
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	1ad3      	subs	r3, r2, r3
 8009d9c:	2b02      	cmp	r3, #2
 8009d9e:	d901      	bls.n	8009da4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009da0:	2303      	movs	r3, #3
 8009da2:	e086      	b.n	8009eb2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009da4:	4b45      	ldr	r3, [pc, #276]	@ (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d1f0      	bne.n	8009d92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009db0:	4b42      	ldr	r3, [pc, #264]	@ (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009db4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	051b      	lsls	r3, r3, #20
 8009dbe:	493f      	ldr	r1, [pc, #252]	@ (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	628b      	str	r3, [r1, #40]	@ 0x28
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	3b01      	subs	r3, #1
 8009dd4:	025b      	lsls	r3, r3, #9
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	431a      	orrs	r2, r3
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	68db      	ldr	r3, [r3, #12]
 8009dde:	3b01      	subs	r3, #1
 8009de0:	041b      	lsls	r3, r3, #16
 8009de2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009de6:	431a      	orrs	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	3b01      	subs	r3, #1
 8009dee:	061b      	lsls	r3, r3, #24
 8009df0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009df4:	4931      	ldr	r1, [pc, #196]	@ (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009df6:	4313      	orrs	r3, r2
 8009df8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009dfa:	4b30      	ldr	r3, [pc, #192]	@ (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dfe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	695b      	ldr	r3, [r3, #20]
 8009e06:	492d      	ldr	r1, [pc, #180]	@ (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e10:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	699b      	ldr	r3, [r3, #24]
 8009e18:	4928      	ldr	r1, [pc, #160]	@ (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009e1e:	4b27      	ldr	r3, [pc, #156]	@ (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e22:	4a26      	ldr	r2, [pc, #152]	@ (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009e2a:	4b24      	ldr	r3, [pc, #144]	@ (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e2e:	4b24      	ldr	r3, [pc, #144]	@ (8009ec0 <RCCEx_PLL3_Config+0x160>)
 8009e30:	4013      	ands	r3, r2
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	69d2      	ldr	r2, [r2, #28]
 8009e36:	00d2      	lsls	r2, r2, #3
 8009e38:	4920      	ldr	r1, [pc, #128]	@ (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e42:	4a1e      	ldr	r2, [pc, #120]	@ (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d106      	bne.n	8009e5e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009e50:	4b1a      	ldr	r3, [pc, #104]	@ (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e54:	4a19      	ldr	r2, [pc, #100]	@ (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e56:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009e5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009e5c:	e00f      	b.n	8009e7e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d106      	bne.n	8009e72 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009e64:	4b15      	ldr	r3, [pc, #84]	@ (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e68:	4a14      	ldr	r2, [pc, #80]	@ (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e6a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009e6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009e70:	e005      	b.n	8009e7e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009e72:	4b12      	ldr	r3, [pc, #72]	@ (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e76:	4a11      	ldr	r2, [pc, #68]	@ (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009e7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a0e      	ldr	r2, [pc, #56]	@ (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e8a:	f7f9 f833 	bl	8002ef4 <HAL_GetTick>
 8009e8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009e90:	e008      	b.n	8009ea4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009e92:	f7f9 f82f 	bl	8002ef4 <HAL_GetTick>
 8009e96:	4602      	mov	r2, r0
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	1ad3      	subs	r3, r2, r3
 8009e9c:	2b02      	cmp	r3, #2
 8009e9e:	d901      	bls.n	8009ea4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ea0:	2303      	movs	r3, #3
 8009ea2:	e006      	b.n	8009eb2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ea4:	4b05      	ldr	r3, [pc, #20]	@ (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d0f0      	beq.n	8009e92 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3710      	adds	r7, #16
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	58024400 	.word	0x58024400
 8009ec0:	ffff0007 	.word	0xffff0007

08009ec4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d101      	bne.n	8009ed6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e049      	b.n	8009f6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d106      	bne.n	8009ef0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f7f8 fda4 	bl	8002a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2202      	movs	r2, #2
 8009ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	3304      	adds	r3, #4
 8009f00:	4619      	mov	r1, r3
 8009f02:	4610      	mov	r0, r2
 8009f04:	f000 fac6 	bl	800a494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2201      	movs	r2, #1
 8009f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2201      	movs	r2, #1
 8009f34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2201      	movs	r2, #1
 8009f44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2201      	movs	r2, #1
 8009f54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009f68:	2300      	movs	r3, #0
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3708      	adds	r7, #8
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}

08009f72 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009f72:	b580      	push	{r7, lr}
 8009f74:	b082      	sub	sp, #8
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d101      	bne.n	8009f84 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	e049      	b.n	800a018 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d106      	bne.n	8009f9e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 f841 	bl	800a020 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2202      	movs	r2, #2
 8009fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	3304      	adds	r3, #4
 8009fae:	4619      	mov	r1, r3
 8009fb0:	4610      	mov	r0, r2
 8009fb2:	f000 fa6f 	bl	800a494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2201      	movs	r2, #1
 8009fba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2201      	movs	r2, #1
 8009fca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2201      	movs	r2, #1
 8009fea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2201      	movs	r2, #1
 800a002:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2201      	movs	r2, #1
 800a00a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2201      	movs	r2, #1
 800a012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a016:	2300      	movs	r3, #0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3708      	adds	r7, #8
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a028:	bf00      	nop
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d109      	bne.n	800a058 <HAL_TIM_PWM_Start+0x24>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	bf14      	ite	ne
 800a050:	2301      	movne	r3, #1
 800a052:	2300      	moveq	r3, #0
 800a054:	b2db      	uxtb	r3, r3
 800a056:	e03c      	b.n	800a0d2 <HAL_TIM_PWM_Start+0x9e>
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	2b04      	cmp	r3, #4
 800a05c:	d109      	bne.n	800a072 <HAL_TIM_PWM_Start+0x3e>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a064:	b2db      	uxtb	r3, r3
 800a066:	2b01      	cmp	r3, #1
 800a068:	bf14      	ite	ne
 800a06a:	2301      	movne	r3, #1
 800a06c:	2300      	moveq	r3, #0
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	e02f      	b.n	800a0d2 <HAL_TIM_PWM_Start+0x9e>
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	2b08      	cmp	r3, #8
 800a076:	d109      	bne.n	800a08c <HAL_TIM_PWM_Start+0x58>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	2b01      	cmp	r3, #1
 800a082:	bf14      	ite	ne
 800a084:	2301      	movne	r3, #1
 800a086:	2300      	moveq	r3, #0
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	e022      	b.n	800a0d2 <HAL_TIM_PWM_Start+0x9e>
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	2b0c      	cmp	r3, #12
 800a090:	d109      	bne.n	800a0a6 <HAL_TIM_PWM_Start+0x72>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	bf14      	ite	ne
 800a09e:	2301      	movne	r3, #1
 800a0a0:	2300      	moveq	r3, #0
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	e015      	b.n	800a0d2 <HAL_TIM_PWM_Start+0x9e>
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	2b10      	cmp	r3, #16
 800a0aa:	d109      	bne.n	800a0c0 <HAL_TIM_PWM_Start+0x8c>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	bf14      	ite	ne
 800a0b8:	2301      	movne	r3, #1
 800a0ba:	2300      	moveq	r3, #0
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	e008      	b.n	800a0d2 <HAL_TIM_PWM_Start+0x9e>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	bf14      	ite	ne
 800a0cc:	2301      	movne	r3, #1
 800a0ce:	2300      	moveq	r3, #0
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d001      	beq.n	800a0da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e0ab      	b.n	800a232 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d104      	bne.n	800a0ea <HAL_TIM_PWM_Start+0xb6>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2202      	movs	r2, #2
 800a0e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0e8:	e023      	b.n	800a132 <HAL_TIM_PWM_Start+0xfe>
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	2b04      	cmp	r3, #4
 800a0ee:	d104      	bne.n	800a0fa <HAL_TIM_PWM_Start+0xc6>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2202      	movs	r2, #2
 800a0f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0f8:	e01b      	b.n	800a132 <HAL_TIM_PWM_Start+0xfe>
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	2b08      	cmp	r3, #8
 800a0fe:	d104      	bne.n	800a10a <HAL_TIM_PWM_Start+0xd6>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2202      	movs	r2, #2
 800a104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a108:	e013      	b.n	800a132 <HAL_TIM_PWM_Start+0xfe>
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	2b0c      	cmp	r3, #12
 800a10e:	d104      	bne.n	800a11a <HAL_TIM_PWM_Start+0xe6>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2202      	movs	r2, #2
 800a114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a118:	e00b      	b.n	800a132 <HAL_TIM_PWM_Start+0xfe>
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	2b10      	cmp	r3, #16
 800a11e:	d104      	bne.n	800a12a <HAL_TIM_PWM_Start+0xf6>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2202      	movs	r2, #2
 800a124:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a128:	e003      	b.n	800a132 <HAL_TIM_PWM_Start+0xfe>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2202      	movs	r2, #2
 800a12e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2201      	movs	r2, #1
 800a138:	6839      	ldr	r1, [r7, #0]
 800a13a:	4618      	mov	r0, r3
 800a13c:	f000 fd2c 	bl	800ab98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a3d      	ldr	r2, [pc, #244]	@ (800a23c <HAL_TIM_PWM_Start+0x208>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d013      	beq.n	800a172 <HAL_TIM_PWM_Start+0x13e>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a3c      	ldr	r2, [pc, #240]	@ (800a240 <HAL_TIM_PWM_Start+0x20c>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d00e      	beq.n	800a172 <HAL_TIM_PWM_Start+0x13e>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a3a      	ldr	r2, [pc, #232]	@ (800a244 <HAL_TIM_PWM_Start+0x210>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d009      	beq.n	800a172 <HAL_TIM_PWM_Start+0x13e>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a39      	ldr	r2, [pc, #228]	@ (800a248 <HAL_TIM_PWM_Start+0x214>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d004      	beq.n	800a172 <HAL_TIM_PWM_Start+0x13e>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a37      	ldr	r2, [pc, #220]	@ (800a24c <HAL_TIM_PWM_Start+0x218>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d101      	bne.n	800a176 <HAL_TIM_PWM_Start+0x142>
 800a172:	2301      	movs	r3, #1
 800a174:	e000      	b.n	800a178 <HAL_TIM_PWM_Start+0x144>
 800a176:	2300      	movs	r3, #0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d007      	beq.n	800a18c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a18a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a2a      	ldr	r2, [pc, #168]	@ (800a23c <HAL_TIM_PWM_Start+0x208>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d02c      	beq.n	800a1f0 <HAL_TIM_PWM_Start+0x1bc>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a19e:	d027      	beq.n	800a1f0 <HAL_TIM_PWM_Start+0x1bc>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a2a      	ldr	r2, [pc, #168]	@ (800a250 <HAL_TIM_PWM_Start+0x21c>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d022      	beq.n	800a1f0 <HAL_TIM_PWM_Start+0x1bc>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a29      	ldr	r2, [pc, #164]	@ (800a254 <HAL_TIM_PWM_Start+0x220>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d01d      	beq.n	800a1f0 <HAL_TIM_PWM_Start+0x1bc>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a27      	ldr	r2, [pc, #156]	@ (800a258 <HAL_TIM_PWM_Start+0x224>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d018      	beq.n	800a1f0 <HAL_TIM_PWM_Start+0x1bc>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a1f      	ldr	r2, [pc, #124]	@ (800a240 <HAL_TIM_PWM_Start+0x20c>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d013      	beq.n	800a1f0 <HAL_TIM_PWM_Start+0x1bc>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a23      	ldr	r2, [pc, #140]	@ (800a25c <HAL_TIM_PWM_Start+0x228>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d00e      	beq.n	800a1f0 <HAL_TIM_PWM_Start+0x1bc>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a1b      	ldr	r2, [pc, #108]	@ (800a244 <HAL_TIM_PWM_Start+0x210>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d009      	beq.n	800a1f0 <HAL_TIM_PWM_Start+0x1bc>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a1f      	ldr	r2, [pc, #124]	@ (800a260 <HAL_TIM_PWM_Start+0x22c>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d004      	beq.n	800a1f0 <HAL_TIM_PWM_Start+0x1bc>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a1e      	ldr	r2, [pc, #120]	@ (800a264 <HAL_TIM_PWM_Start+0x230>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d115      	bne.n	800a21c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	689a      	ldr	r2, [r3, #8]
 800a1f6:	4b1c      	ldr	r3, [pc, #112]	@ (800a268 <HAL_TIM_PWM_Start+0x234>)
 800a1f8:	4013      	ands	r3, r2
 800a1fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2b06      	cmp	r3, #6
 800a200:	d015      	beq.n	800a22e <HAL_TIM_PWM_Start+0x1fa>
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a208:	d011      	beq.n	800a22e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f042 0201 	orr.w	r2, r2, #1
 800a218:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a21a:	e008      	b.n	800a22e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f042 0201 	orr.w	r2, r2, #1
 800a22a:	601a      	str	r2, [r3, #0]
 800a22c:	e000      	b.n	800a230 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a22e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a230:	2300      	movs	r3, #0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	40010000 	.word	0x40010000
 800a240:	40010400 	.word	0x40010400
 800a244:	40014000 	.word	0x40014000
 800a248:	40014400 	.word	0x40014400
 800a24c:	40014800 	.word	0x40014800
 800a250:	40000400 	.word	0x40000400
 800a254:	40000800 	.word	0x40000800
 800a258:	40000c00 	.word	0x40000c00
 800a25c:	40001800 	.word	0x40001800
 800a260:	4000e000 	.word	0x4000e000
 800a264:	4000e400 	.word	0x4000e400
 800a268:	00010007 	.word	0x00010007

0800a26c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b086      	sub	sp, #24
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a278:	2300      	movs	r3, #0
 800a27a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a282:	2b01      	cmp	r3, #1
 800a284:	d101      	bne.n	800a28a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a286:	2302      	movs	r3, #2
 800a288:	e0ff      	b.n	800a48a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2201      	movs	r2, #1
 800a28e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2b14      	cmp	r3, #20
 800a296:	f200 80f0 	bhi.w	800a47a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a29a:	a201      	add	r2, pc, #4	@ (adr r2, 800a2a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a0:	0800a2f5 	.word	0x0800a2f5
 800a2a4:	0800a47b 	.word	0x0800a47b
 800a2a8:	0800a47b 	.word	0x0800a47b
 800a2ac:	0800a47b 	.word	0x0800a47b
 800a2b0:	0800a335 	.word	0x0800a335
 800a2b4:	0800a47b 	.word	0x0800a47b
 800a2b8:	0800a47b 	.word	0x0800a47b
 800a2bc:	0800a47b 	.word	0x0800a47b
 800a2c0:	0800a377 	.word	0x0800a377
 800a2c4:	0800a47b 	.word	0x0800a47b
 800a2c8:	0800a47b 	.word	0x0800a47b
 800a2cc:	0800a47b 	.word	0x0800a47b
 800a2d0:	0800a3b7 	.word	0x0800a3b7
 800a2d4:	0800a47b 	.word	0x0800a47b
 800a2d8:	0800a47b 	.word	0x0800a47b
 800a2dc:	0800a47b 	.word	0x0800a47b
 800a2e0:	0800a3f9 	.word	0x0800a3f9
 800a2e4:	0800a47b 	.word	0x0800a47b
 800a2e8:	0800a47b 	.word	0x0800a47b
 800a2ec:	0800a47b 	.word	0x0800a47b
 800a2f0:	0800a439 	.word	0x0800a439
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	68b9      	ldr	r1, [r7, #8]
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f000 f976 	bl	800a5ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	699a      	ldr	r2, [r3, #24]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f042 0208 	orr.w	r2, r2, #8
 800a30e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	699a      	ldr	r2, [r3, #24]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f022 0204 	bic.w	r2, r2, #4
 800a31e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	6999      	ldr	r1, [r3, #24]
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	691a      	ldr	r2, [r3, #16]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	430a      	orrs	r2, r1
 800a330:	619a      	str	r2, [r3, #24]
      break;
 800a332:	e0a5      	b.n	800a480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	68b9      	ldr	r1, [r7, #8]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f000 f9e6 	bl	800a70c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	699a      	ldr	r2, [r3, #24]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a34e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	699a      	ldr	r2, [r3, #24]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a35e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	6999      	ldr	r1, [r3, #24]
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	691b      	ldr	r3, [r3, #16]
 800a36a:	021a      	lsls	r2, r3, #8
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	430a      	orrs	r2, r1
 800a372:	619a      	str	r2, [r3, #24]
      break;
 800a374:	e084      	b.n	800a480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	68b9      	ldr	r1, [r7, #8]
 800a37c:	4618      	mov	r0, r3
 800a37e:	f000 fa4f 	bl	800a820 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	69da      	ldr	r2, [r3, #28]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f042 0208 	orr.w	r2, r2, #8
 800a390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	69da      	ldr	r2, [r3, #28]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f022 0204 	bic.w	r2, r2, #4
 800a3a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	69d9      	ldr	r1, [r3, #28]
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	691a      	ldr	r2, [r3, #16]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	430a      	orrs	r2, r1
 800a3b2:	61da      	str	r2, [r3, #28]
      break;
 800a3b4:	e064      	b.n	800a480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	68b9      	ldr	r1, [r7, #8]
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f000 fab7 	bl	800a930 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	69da      	ldr	r2, [r3, #28]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a3d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	69da      	ldr	r2, [r3, #28]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a3e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	69d9      	ldr	r1, [r3, #28]
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	021a      	lsls	r2, r3, #8
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	430a      	orrs	r2, r1
 800a3f4:	61da      	str	r2, [r3, #28]
      break;
 800a3f6:	e043      	b.n	800a480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	68b9      	ldr	r1, [r7, #8]
 800a3fe:	4618      	mov	r0, r3
 800a400:	f000 fb00 	bl	800aa04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f042 0208 	orr.w	r2, r2, #8
 800a412:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f022 0204 	bic.w	r2, r2, #4
 800a422:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	691a      	ldr	r2, [r3, #16]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	430a      	orrs	r2, r1
 800a434:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a436:	e023      	b.n	800a480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	68b9      	ldr	r1, [r7, #8]
 800a43e:	4618      	mov	r0, r3
 800a440:	f000 fb44 	bl	800aacc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a452:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a462:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	691b      	ldr	r3, [r3, #16]
 800a46e:	021a      	lsls	r2, r3, #8
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	430a      	orrs	r2, r1
 800a476:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a478:	e002      	b.n	800a480 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a47a:	2301      	movs	r3, #1
 800a47c:	75fb      	strb	r3, [r7, #23]
      break;
 800a47e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2200      	movs	r2, #0
 800a484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a488:	7dfb      	ldrb	r3, [r7, #23]
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3718      	adds	r7, #24
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop

0800a494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a494:	b480      	push	{r7}
 800a496:	b085      	sub	sp, #20
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4a47      	ldr	r2, [pc, #284]	@ (800a5c4 <TIM_Base_SetConfig+0x130>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d013      	beq.n	800a4d4 <TIM_Base_SetConfig+0x40>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4b2:	d00f      	beq.n	800a4d4 <TIM_Base_SetConfig+0x40>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	4a44      	ldr	r2, [pc, #272]	@ (800a5c8 <TIM_Base_SetConfig+0x134>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d00b      	beq.n	800a4d4 <TIM_Base_SetConfig+0x40>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	4a43      	ldr	r2, [pc, #268]	@ (800a5cc <TIM_Base_SetConfig+0x138>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d007      	beq.n	800a4d4 <TIM_Base_SetConfig+0x40>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	4a42      	ldr	r2, [pc, #264]	@ (800a5d0 <TIM_Base_SetConfig+0x13c>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d003      	beq.n	800a4d4 <TIM_Base_SetConfig+0x40>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	4a41      	ldr	r2, [pc, #260]	@ (800a5d4 <TIM_Base_SetConfig+0x140>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d108      	bne.n	800a4e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4a36      	ldr	r2, [pc, #216]	@ (800a5c4 <TIM_Base_SetConfig+0x130>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d027      	beq.n	800a53e <TIM_Base_SetConfig+0xaa>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4f4:	d023      	beq.n	800a53e <TIM_Base_SetConfig+0xaa>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4a33      	ldr	r2, [pc, #204]	@ (800a5c8 <TIM_Base_SetConfig+0x134>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d01f      	beq.n	800a53e <TIM_Base_SetConfig+0xaa>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	4a32      	ldr	r2, [pc, #200]	@ (800a5cc <TIM_Base_SetConfig+0x138>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d01b      	beq.n	800a53e <TIM_Base_SetConfig+0xaa>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	4a31      	ldr	r2, [pc, #196]	@ (800a5d0 <TIM_Base_SetConfig+0x13c>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d017      	beq.n	800a53e <TIM_Base_SetConfig+0xaa>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	4a30      	ldr	r2, [pc, #192]	@ (800a5d4 <TIM_Base_SetConfig+0x140>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d013      	beq.n	800a53e <TIM_Base_SetConfig+0xaa>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4a2f      	ldr	r2, [pc, #188]	@ (800a5d8 <TIM_Base_SetConfig+0x144>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d00f      	beq.n	800a53e <TIM_Base_SetConfig+0xaa>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	4a2e      	ldr	r2, [pc, #184]	@ (800a5dc <TIM_Base_SetConfig+0x148>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d00b      	beq.n	800a53e <TIM_Base_SetConfig+0xaa>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4a2d      	ldr	r2, [pc, #180]	@ (800a5e0 <TIM_Base_SetConfig+0x14c>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d007      	beq.n	800a53e <TIM_Base_SetConfig+0xaa>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	4a2c      	ldr	r2, [pc, #176]	@ (800a5e4 <TIM_Base_SetConfig+0x150>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d003      	beq.n	800a53e <TIM_Base_SetConfig+0xaa>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4a2b      	ldr	r2, [pc, #172]	@ (800a5e8 <TIM_Base_SetConfig+0x154>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d108      	bne.n	800a550 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	68fa      	ldr	r2, [r7, #12]
 800a54c:	4313      	orrs	r3, r2
 800a54e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	695b      	ldr	r3, [r3, #20]
 800a55a:	4313      	orrs	r3, r2
 800a55c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	689a      	ldr	r2, [r3, #8]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	4a14      	ldr	r2, [pc, #80]	@ (800a5c4 <TIM_Base_SetConfig+0x130>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d00f      	beq.n	800a596 <TIM_Base_SetConfig+0x102>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	4a16      	ldr	r2, [pc, #88]	@ (800a5d4 <TIM_Base_SetConfig+0x140>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d00b      	beq.n	800a596 <TIM_Base_SetConfig+0x102>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	4a15      	ldr	r2, [pc, #84]	@ (800a5d8 <TIM_Base_SetConfig+0x144>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d007      	beq.n	800a596 <TIM_Base_SetConfig+0x102>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	4a14      	ldr	r2, [pc, #80]	@ (800a5dc <TIM_Base_SetConfig+0x148>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d003      	beq.n	800a596 <TIM_Base_SetConfig+0x102>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4a13      	ldr	r2, [pc, #76]	@ (800a5e0 <TIM_Base_SetConfig+0x14c>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d103      	bne.n	800a59e <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	691a      	ldr	r2, [r3, #16]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f043 0204 	orr.w	r2, r3, #4
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	68fa      	ldr	r2, [r7, #12]
 800a5b4:	601a      	str	r2, [r3, #0]
}
 800a5b6:	bf00      	nop
 800a5b8:	3714      	adds	r7, #20
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	40010000 	.word	0x40010000
 800a5c8:	40000400 	.word	0x40000400
 800a5cc:	40000800 	.word	0x40000800
 800a5d0:	40000c00 	.word	0x40000c00
 800a5d4:	40010400 	.word	0x40010400
 800a5d8:	40014000 	.word	0x40014000
 800a5dc:	40014400 	.word	0x40014400
 800a5e0:	40014800 	.word	0x40014800
 800a5e4:	4000e000 	.word	0x4000e000
 800a5e8:	4000e400 	.word	0x4000e400

0800a5ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b087      	sub	sp, #28
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6a1b      	ldr	r3, [r3, #32]
 800a5fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6a1b      	ldr	r3, [r3, #32]
 800a600:	f023 0201 	bic.w	r2, r3, #1
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	699b      	ldr	r3, [r3, #24]
 800a612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	4b37      	ldr	r3, [pc, #220]	@ (800a6f4 <TIM_OC1_SetConfig+0x108>)
 800a618:	4013      	ands	r3, r2
 800a61a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f023 0303 	bic.w	r3, r3, #3
 800a622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	68fa      	ldr	r2, [r7, #12]
 800a62a:	4313      	orrs	r3, r2
 800a62c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	f023 0302 	bic.w	r3, r3, #2
 800a634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	697a      	ldr	r2, [r7, #20]
 800a63c:	4313      	orrs	r3, r2
 800a63e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	4a2d      	ldr	r2, [pc, #180]	@ (800a6f8 <TIM_OC1_SetConfig+0x10c>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d00f      	beq.n	800a668 <TIM_OC1_SetConfig+0x7c>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	4a2c      	ldr	r2, [pc, #176]	@ (800a6fc <TIM_OC1_SetConfig+0x110>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d00b      	beq.n	800a668 <TIM_OC1_SetConfig+0x7c>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	4a2b      	ldr	r2, [pc, #172]	@ (800a700 <TIM_OC1_SetConfig+0x114>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d007      	beq.n	800a668 <TIM_OC1_SetConfig+0x7c>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	4a2a      	ldr	r2, [pc, #168]	@ (800a704 <TIM_OC1_SetConfig+0x118>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d003      	beq.n	800a668 <TIM_OC1_SetConfig+0x7c>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	4a29      	ldr	r2, [pc, #164]	@ (800a708 <TIM_OC1_SetConfig+0x11c>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d10c      	bne.n	800a682 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	f023 0308 	bic.w	r3, r3, #8
 800a66e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	697a      	ldr	r2, [r7, #20]
 800a676:	4313      	orrs	r3, r2
 800a678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	f023 0304 	bic.w	r3, r3, #4
 800a680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	4a1c      	ldr	r2, [pc, #112]	@ (800a6f8 <TIM_OC1_SetConfig+0x10c>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d00f      	beq.n	800a6aa <TIM_OC1_SetConfig+0xbe>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4a1b      	ldr	r2, [pc, #108]	@ (800a6fc <TIM_OC1_SetConfig+0x110>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d00b      	beq.n	800a6aa <TIM_OC1_SetConfig+0xbe>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4a1a      	ldr	r2, [pc, #104]	@ (800a700 <TIM_OC1_SetConfig+0x114>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d007      	beq.n	800a6aa <TIM_OC1_SetConfig+0xbe>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	4a19      	ldr	r2, [pc, #100]	@ (800a704 <TIM_OC1_SetConfig+0x118>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d003      	beq.n	800a6aa <TIM_OC1_SetConfig+0xbe>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4a18      	ldr	r2, [pc, #96]	@ (800a708 <TIM_OC1_SetConfig+0x11c>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d111      	bne.n	800a6ce <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a6b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	695b      	ldr	r3, [r3, #20]
 800a6be:	693a      	ldr	r2, [r7, #16]
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	699b      	ldr	r3, [r3, #24]
 800a6c8:	693a      	ldr	r2, [r7, #16]
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	693a      	ldr	r2, [r7, #16]
 800a6d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	68fa      	ldr	r2, [r7, #12]
 800a6d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	685a      	ldr	r2, [r3, #4]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	697a      	ldr	r2, [r7, #20]
 800a6e6:	621a      	str	r2, [r3, #32]
}
 800a6e8:	bf00      	nop
 800a6ea:	371c      	adds	r7, #28
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr
 800a6f4:	fffeff8f 	.word	0xfffeff8f
 800a6f8:	40010000 	.word	0x40010000
 800a6fc:	40010400 	.word	0x40010400
 800a700:	40014000 	.word	0x40014000
 800a704:	40014400 	.word	0x40014400
 800a708:	40014800 	.word	0x40014800

0800a70c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b087      	sub	sp, #28
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6a1b      	ldr	r3, [r3, #32]
 800a71a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6a1b      	ldr	r3, [r3, #32]
 800a720:	f023 0210 	bic.w	r2, r3, #16
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	699b      	ldr	r3, [r3, #24]
 800a732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a734:	68fa      	ldr	r2, [r7, #12]
 800a736:	4b34      	ldr	r3, [pc, #208]	@ (800a808 <TIM_OC2_SetConfig+0xfc>)
 800a738:	4013      	ands	r3, r2
 800a73a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	021b      	lsls	r3, r3, #8
 800a74a:	68fa      	ldr	r2, [r7, #12]
 800a74c:	4313      	orrs	r3, r2
 800a74e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	f023 0320 	bic.w	r3, r3, #32
 800a756:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	011b      	lsls	r3, r3, #4
 800a75e:	697a      	ldr	r2, [r7, #20]
 800a760:	4313      	orrs	r3, r2
 800a762:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	4a29      	ldr	r2, [pc, #164]	@ (800a80c <TIM_OC2_SetConfig+0x100>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d003      	beq.n	800a774 <TIM_OC2_SetConfig+0x68>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	4a28      	ldr	r2, [pc, #160]	@ (800a810 <TIM_OC2_SetConfig+0x104>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d10d      	bne.n	800a790 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a77a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	68db      	ldr	r3, [r3, #12]
 800a780:	011b      	lsls	r3, r3, #4
 800a782:	697a      	ldr	r2, [r7, #20]
 800a784:	4313      	orrs	r3, r2
 800a786:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a78e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	4a1e      	ldr	r2, [pc, #120]	@ (800a80c <TIM_OC2_SetConfig+0x100>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d00f      	beq.n	800a7b8 <TIM_OC2_SetConfig+0xac>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	4a1d      	ldr	r2, [pc, #116]	@ (800a810 <TIM_OC2_SetConfig+0x104>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d00b      	beq.n	800a7b8 <TIM_OC2_SetConfig+0xac>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	4a1c      	ldr	r2, [pc, #112]	@ (800a814 <TIM_OC2_SetConfig+0x108>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d007      	beq.n	800a7b8 <TIM_OC2_SetConfig+0xac>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	4a1b      	ldr	r2, [pc, #108]	@ (800a818 <TIM_OC2_SetConfig+0x10c>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d003      	beq.n	800a7b8 <TIM_OC2_SetConfig+0xac>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a1a      	ldr	r2, [pc, #104]	@ (800a81c <TIM_OC2_SetConfig+0x110>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d113      	bne.n	800a7e0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a7be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a7c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	695b      	ldr	r3, [r3, #20]
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	693a      	ldr	r2, [r7, #16]
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	699b      	ldr	r3, [r3, #24]
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	693a      	ldr	r2, [r7, #16]
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	693a      	ldr	r2, [r7, #16]
 800a7e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	685a      	ldr	r2, [r3, #4]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	697a      	ldr	r2, [r7, #20]
 800a7f8:	621a      	str	r2, [r3, #32]
}
 800a7fa:	bf00      	nop
 800a7fc:	371c      	adds	r7, #28
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr
 800a806:	bf00      	nop
 800a808:	feff8fff 	.word	0xfeff8fff
 800a80c:	40010000 	.word	0x40010000
 800a810:	40010400 	.word	0x40010400
 800a814:	40014000 	.word	0x40014000
 800a818:	40014400 	.word	0x40014400
 800a81c:	40014800 	.word	0x40014800

0800a820 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a820:	b480      	push	{r7}
 800a822:	b087      	sub	sp, #28
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6a1b      	ldr	r3, [r3, #32]
 800a82e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6a1b      	ldr	r3, [r3, #32]
 800a834:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	69db      	ldr	r3, [r3, #28]
 800a846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a848:	68fa      	ldr	r2, [r7, #12]
 800a84a:	4b33      	ldr	r3, [pc, #204]	@ (800a918 <TIM_OC3_SetConfig+0xf8>)
 800a84c:	4013      	ands	r3, r2
 800a84e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f023 0303 	bic.w	r3, r3, #3
 800a856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	68fa      	ldr	r2, [r7, #12]
 800a85e:	4313      	orrs	r3, r2
 800a860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	689b      	ldr	r3, [r3, #8]
 800a86e:	021b      	lsls	r3, r3, #8
 800a870:	697a      	ldr	r2, [r7, #20]
 800a872:	4313      	orrs	r3, r2
 800a874:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	4a28      	ldr	r2, [pc, #160]	@ (800a91c <TIM_OC3_SetConfig+0xfc>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d003      	beq.n	800a886 <TIM_OC3_SetConfig+0x66>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	4a27      	ldr	r2, [pc, #156]	@ (800a920 <TIM_OC3_SetConfig+0x100>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d10d      	bne.n	800a8a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a88c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	021b      	lsls	r3, r3, #8
 800a894:	697a      	ldr	r2, [r7, #20]
 800a896:	4313      	orrs	r3, r2
 800a898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a8a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	4a1d      	ldr	r2, [pc, #116]	@ (800a91c <TIM_OC3_SetConfig+0xfc>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d00f      	beq.n	800a8ca <TIM_OC3_SetConfig+0xaa>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	4a1c      	ldr	r2, [pc, #112]	@ (800a920 <TIM_OC3_SetConfig+0x100>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d00b      	beq.n	800a8ca <TIM_OC3_SetConfig+0xaa>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	4a1b      	ldr	r2, [pc, #108]	@ (800a924 <TIM_OC3_SetConfig+0x104>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d007      	beq.n	800a8ca <TIM_OC3_SetConfig+0xaa>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	4a1a      	ldr	r2, [pc, #104]	@ (800a928 <TIM_OC3_SetConfig+0x108>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d003      	beq.n	800a8ca <TIM_OC3_SetConfig+0xaa>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	4a19      	ldr	r2, [pc, #100]	@ (800a92c <TIM_OC3_SetConfig+0x10c>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d113      	bne.n	800a8f2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a8d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a8d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	695b      	ldr	r3, [r3, #20]
 800a8de:	011b      	lsls	r3, r3, #4
 800a8e0:	693a      	ldr	r2, [r7, #16]
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	699b      	ldr	r3, [r3, #24]
 800a8ea:	011b      	lsls	r3, r3, #4
 800a8ec:	693a      	ldr	r2, [r7, #16]
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	693a      	ldr	r2, [r7, #16]
 800a8f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	685a      	ldr	r2, [r3, #4]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	697a      	ldr	r2, [r7, #20]
 800a90a:	621a      	str	r2, [r3, #32]
}
 800a90c:	bf00      	nop
 800a90e:	371c      	adds	r7, #28
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr
 800a918:	fffeff8f 	.word	0xfffeff8f
 800a91c:	40010000 	.word	0x40010000
 800a920:	40010400 	.word	0x40010400
 800a924:	40014000 	.word	0x40014000
 800a928:	40014400 	.word	0x40014400
 800a92c:	40014800 	.word	0x40014800

0800a930 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a930:	b480      	push	{r7}
 800a932:	b087      	sub	sp, #28
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6a1b      	ldr	r3, [r3, #32]
 800a93e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6a1b      	ldr	r3, [r3, #32]
 800a944:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	69db      	ldr	r3, [r3, #28]
 800a956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	4b24      	ldr	r3, [pc, #144]	@ (800a9ec <TIM_OC4_SetConfig+0xbc>)
 800a95c:	4013      	ands	r3, r2
 800a95e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	021b      	lsls	r3, r3, #8
 800a96e:	68fa      	ldr	r2, [r7, #12]
 800a970:	4313      	orrs	r3, r2
 800a972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a97a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	689b      	ldr	r3, [r3, #8]
 800a980:	031b      	lsls	r3, r3, #12
 800a982:	693a      	ldr	r2, [r7, #16]
 800a984:	4313      	orrs	r3, r2
 800a986:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	4a19      	ldr	r2, [pc, #100]	@ (800a9f0 <TIM_OC4_SetConfig+0xc0>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d00f      	beq.n	800a9b0 <TIM_OC4_SetConfig+0x80>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	4a18      	ldr	r2, [pc, #96]	@ (800a9f4 <TIM_OC4_SetConfig+0xc4>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d00b      	beq.n	800a9b0 <TIM_OC4_SetConfig+0x80>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	4a17      	ldr	r2, [pc, #92]	@ (800a9f8 <TIM_OC4_SetConfig+0xc8>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d007      	beq.n	800a9b0 <TIM_OC4_SetConfig+0x80>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	4a16      	ldr	r2, [pc, #88]	@ (800a9fc <TIM_OC4_SetConfig+0xcc>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d003      	beq.n	800a9b0 <TIM_OC4_SetConfig+0x80>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	4a15      	ldr	r2, [pc, #84]	@ (800aa00 <TIM_OC4_SetConfig+0xd0>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d109      	bne.n	800a9c4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a9b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	695b      	ldr	r3, [r3, #20]
 800a9bc:	019b      	lsls	r3, r3, #6
 800a9be:	697a      	ldr	r2, [r7, #20]
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	697a      	ldr	r2, [r7, #20]
 800a9c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	685a      	ldr	r2, [r3, #4]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	693a      	ldr	r2, [r7, #16]
 800a9dc:	621a      	str	r2, [r3, #32]
}
 800a9de:	bf00      	nop
 800a9e0:	371c      	adds	r7, #28
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop
 800a9ec:	feff8fff 	.word	0xfeff8fff
 800a9f0:	40010000 	.word	0x40010000
 800a9f4:	40010400 	.word	0x40010400
 800a9f8:	40014000 	.word	0x40014000
 800a9fc:	40014400 	.word	0x40014400
 800aa00:	40014800 	.word	0x40014800

0800aa04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b087      	sub	sp, #28
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6a1b      	ldr	r3, [r3, #32]
 800aa12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6a1b      	ldr	r3, [r3, #32]
 800aa18:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	4b21      	ldr	r3, [pc, #132]	@ (800aab4 <TIM_OC5_SetConfig+0xb0>)
 800aa30:	4013      	ands	r3, r2
 800aa32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	68fa      	ldr	r2, [r7, #12]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800aa44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	689b      	ldr	r3, [r3, #8]
 800aa4a:	041b      	lsls	r3, r3, #16
 800aa4c:	693a      	ldr	r2, [r7, #16]
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	4a18      	ldr	r2, [pc, #96]	@ (800aab8 <TIM_OC5_SetConfig+0xb4>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d00f      	beq.n	800aa7a <TIM_OC5_SetConfig+0x76>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	4a17      	ldr	r2, [pc, #92]	@ (800aabc <TIM_OC5_SetConfig+0xb8>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d00b      	beq.n	800aa7a <TIM_OC5_SetConfig+0x76>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	4a16      	ldr	r2, [pc, #88]	@ (800aac0 <TIM_OC5_SetConfig+0xbc>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d007      	beq.n	800aa7a <TIM_OC5_SetConfig+0x76>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4a15      	ldr	r2, [pc, #84]	@ (800aac4 <TIM_OC5_SetConfig+0xc0>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d003      	beq.n	800aa7a <TIM_OC5_SetConfig+0x76>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	4a14      	ldr	r2, [pc, #80]	@ (800aac8 <TIM_OC5_SetConfig+0xc4>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d109      	bne.n	800aa8e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	695b      	ldr	r3, [r3, #20]
 800aa86:	021b      	lsls	r3, r3, #8
 800aa88:	697a      	ldr	r2, [r7, #20]
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	697a      	ldr	r2, [r7, #20]
 800aa92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	68fa      	ldr	r2, [r7, #12]
 800aa98:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	685a      	ldr	r2, [r3, #4]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	693a      	ldr	r2, [r7, #16]
 800aaa6:	621a      	str	r2, [r3, #32]
}
 800aaa8:	bf00      	nop
 800aaaa:	371c      	adds	r7, #28
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr
 800aab4:	fffeff8f 	.word	0xfffeff8f
 800aab8:	40010000 	.word	0x40010000
 800aabc:	40010400 	.word	0x40010400
 800aac0:	40014000 	.word	0x40014000
 800aac4:	40014400 	.word	0x40014400
 800aac8:	40014800 	.word	0x40014800

0800aacc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aacc:	b480      	push	{r7}
 800aace:	b087      	sub	sp, #28
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6a1b      	ldr	r3, [r3, #32]
 800aada:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6a1b      	ldr	r3, [r3, #32]
 800aae0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	685b      	ldr	r3, [r3, #4]
 800aaec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aaf4:	68fa      	ldr	r2, [r7, #12]
 800aaf6:	4b22      	ldr	r3, [pc, #136]	@ (800ab80 <TIM_OC6_SetConfig+0xb4>)
 800aaf8:	4013      	ands	r3, r2
 800aafa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	021b      	lsls	r3, r3, #8
 800ab02:	68fa      	ldr	r2, [r7, #12]
 800ab04:	4313      	orrs	r3, r2
 800ab06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ab0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	689b      	ldr	r3, [r3, #8]
 800ab14:	051b      	lsls	r3, r3, #20
 800ab16:	693a      	ldr	r2, [r7, #16]
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4a19      	ldr	r2, [pc, #100]	@ (800ab84 <TIM_OC6_SetConfig+0xb8>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d00f      	beq.n	800ab44 <TIM_OC6_SetConfig+0x78>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4a18      	ldr	r2, [pc, #96]	@ (800ab88 <TIM_OC6_SetConfig+0xbc>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d00b      	beq.n	800ab44 <TIM_OC6_SetConfig+0x78>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4a17      	ldr	r2, [pc, #92]	@ (800ab8c <TIM_OC6_SetConfig+0xc0>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d007      	beq.n	800ab44 <TIM_OC6_SetConfig+0x78>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4a16      	ldr	r2, [pc, #88]	@ (800ab90 <TIM_OC6_SetConfig+0xc4>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d003      	beq.n	800ab44 <TIM_OC6_SetConfig+0x78>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4a15      	ldr	r2, [pc, #84]	@ (800ab94 <TIM_OC6_SetConfig+0xc8>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d109      	bne.n	800ab58 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ab4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	695b      	ldr	r3, [r3, #20]
 800ab50:	029b      	lsls	r3, r3, #10
 800ab52:	697a      	ldr	r2, [r7, #20]
 800ab54:	4313      	orrs	r3, r2
 800ab56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	697a      	ldr	r2, [r7, #20]
 800ab5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	68fa      	ldr	r2, [r7, #12]
 800ab62:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	685a      	ldr	r2, [r3, #4]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	693a      	ldr	r2, [r7, #16]
 800ab70:	621a      	str	r2, [r3, #32]
}
 800ab72:	bf00      	nop
 800ab74:	371c      	adds	r7, #28
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr
 800ab7e:	bf00      	nop
 800ab80:	feff8fff 	.word	0xfeff8fff
 800ab84:	40010000 	.word	0x40010000
 800ab88:	40010400 	.word	0x40010400
 800ab8c:	40014000 	.word	0x40014000
 800ab90:	40014400 	.word	0x40014400
 800ab94:	40014800 	.word	0x40014800

0800ab98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b087      	sub	sp, #28
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	f003 031f 	and.w	r3, r3, #31
 800abaa:	2201      	movs	r2, #1
 800abac:	fa02 f303 	lsl.w	r3, r2, r3
 800abb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	6a1a      	ldr	r2, [r3, #32]
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	43db      	mvns	r3, r3
 800abba:	401a      	ands	r2, r3
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	6a1a      	ldr	r2, [r3, #32]
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	f003 031f 	and.w	r3, r3, #31
 800abca:	6879      	ldr	r1, [r7, #4]
 800abcc:	fa01 f303 	lsl.w	r3, r1, r3
 800abd0:	431a      	orrs	r2, r3
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	621a      	str	r2, [r3, #32]
}
 800abd6:	bf00      	nop
 800abd8:	371c      	adds	r7, #28
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr
	...

0800abe4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b085      	sub	sp, #20
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800abee:	2300      	movs	r3, #0
 800abf0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d101      	bne.n	800ac00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800abfc:	2302      	movs	r3, #2
 800abfe:	e073      	b.n	800ace8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2201      	movs	r2, #1
 800ac04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	68db      	ldr	r3, [r3, #12]
 800ac12:	4313      	orrs	r3, r2
 800ac14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	4313      	orrs	r3, r2
 800ac22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	691b      	ldr	r3, [r3, #16]
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	695b      	ldr	r3, [r3, #20]
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac66:	4313      	orrs	r3, r2
 800ac68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	699b      	ldr	r3, [r3, #24]
 800ac74:	041b      	lsls	r3, r3, #16
 800ac76:	4313      	orrs	r3, r2
 800ac78:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	69db      	ldr	r3, [r3, #28]
 800ac84:	4313      	orrs	r3, r2
 800ac86:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a19      	ldr	r2, [pc, #100]	@ (800acf4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d004      	beq.n	800ac9c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a18      	ldr	r2, [pc, #96]	@ (800acf8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d11c      	bne.n	800acd6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aca6:	051b      	lsls	r3, r3, #20
 800aca8:	4313      	orrs	r3, r2
 800acaa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	6a1b      	ldr	r3, [r3, #32]
 800acb6:	4313      	orrs	r3, r2
 800acb8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acc4:	4313      	orrs	r3, r2
 800acc6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acd2:	4313      	orrs	r3, r2
 800acd4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	68fa      	ldr	r2, [r7, #12]
 800acdc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2200      	movs	r2, #0
 800ace2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ace6:	2300      	movs	r3, #0
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3714      	adds	r7, #20
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr
 800acf4:	40010000 	.word	0x40010000
 800acf8:	40010400 	.word	0x40010400

0800acfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d101      	bne.n	800ad0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e042      	b.n	800ad94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d106      	bne.n	800ad26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f7f7 fee7 	bl	8002af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2224      	movs	r2, #36	@ 0x24
 800ad2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f022 0201 	bic.w	r2, r2, #1
 800ad3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d002      	beq.n	800ad4c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 ff38 	bl	800bbbc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f000 f8c9 	bl	800aee4 <UART_SetConfig>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d101      	bne.n	800ad5c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	e01b      	b.n	800ad94 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	685a      	ldr	r2, [r3, #4]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ad6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	689a      	ldr	r2, [r3, #8]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ad7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f042 0201 	orr.w	r2, r2, #1
 800ad8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 ffb7 	bl	800bd00 <UART_CheckIdleState>
 800ad92:	4603      	mov	r3, r0
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3708      	adds	r7, #8
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b08a      	sub	sp, #40	@ 0x28
 800ada0:	af02      	add	r7, sp, #8
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	603b      	str	r3, [r7, #0]
 800ada8:	4613      	mov	r3, r2
 800adaa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adb2:	2b20      	cmp	r3, #32
 800adb4:	d17b      	bne.n	800aeae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d002      	beq.n	800adc2 <HAL_UART_Transmit+0x26>
 800adbc:	88fb      	ldrh	r3, [r7, #6]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d101      	bne.n	800adc6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800adc2:	2301      	movs	r3, #1
 800adc4:	e074      	b.n	800aeb0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2200      	movs	r2, #0
 800adca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2221      	movs	r2, #33	@ 0x21
 800add2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800add6:	f7f8 f88d 	bl	8002ef4 <HAL_GetTick>
 800adda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	88fa      	ldrh	r2, [r7, #6]
 800ade0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	88fa      	ldrh	r2, [r7, #6]
 800ade8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800adf4:	d108      	bne.n	800ae08 <HAL_UART_Transmit+0x6c>
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	691b      	ldr	r3, [r3, #16]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d104      	bne.n	800ae08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800adfe:	2300      	movs	r3, #0
 800ae00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	61bb      	str	r3, [r7, #24]
 800ae06:	e003      	b.n	800ae10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ae10:	e030      	b.n	800ae74 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	9300      	str	r3, [sp, #0]
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	2180      	movs	r1, #128	@ 0x80
 800ae1c:	68f8      	ldr	r0, [r7, #12]
 800ae1e:	f001 f819 	bl	800be54 <UART_WaitOnFlagUntilTimeout>
 800ae22:	4603      	mov	r3, r0
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d005      	beq.n	800ae34 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2220      	movs	r2, #32
 800ae2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ae30:	2303      	movs	r3, #3
 800ae32:	e03d      	b.n	800aeb0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ae34:	69fb      	ldr	r3, [r7, #28]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d10b      	bne.n	800ae52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	881b      	ldrh	r3, [r3, #0]
 800ae3e:	461a      	mov	r2, r3
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae48:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	3302      	adds	r3, #2
 800ae4e:	61bb      	str	r3, [r7, #24]
 800ae50:	e007      	b.n	800ae62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ae52:	69fb      	ldr	r3, [r7, #28]
 800ae54:	781a      	ldrb	r2, [r3, #0]
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ae5c:	69fb      	ldr	r3, [r7, #28]
 800ae5e:	3301      	adds	r3, #1
 800ae60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	3b01      	subs	r3, #1
 800ae6c:	b29a      	uxth	r2, r3
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d1c8      	bne.n	800ae12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	9300      	str	r3, [sp, #0]
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	2200      	movs	r2, #0
 800ae88:	2140      	movs	r1, #64	@ 0x40
 800ae8a:	68f8      	ldr	r0, [r7, #12]
 800ae8c:	f000 ffe2 	bl	800be54 <UART_WaitOnFlagUntilTimeout>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d005      	beq.n	800aea2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2220      	movs	r2, #32
 800ae9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ae9e:	2303      	movs	r3, #3
 800aea0:	e006      	b.n	800aeb0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2220      	movs	r2, #32
 800aea6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	e000      	b.n	800aeb0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800aeae:	2302      	movs	r3, #2
  }
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3720      	adds	r7, #32
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aec6:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aece:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800aed0:	68fa      	ldr	r2, [r7, #12]
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	4313      	orrs	r3, r2
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3714      	adds	r7, #20
 800aeda:	46bd      	mov	sp, r7
 800aedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee0:	4770      	bx	lr
	...

0800aee4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aee8:	b092      	sub	sp, #72	@ 0x48
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aeee:	2300      	movs	r3, #0
 800aef0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	689a      	ldr	r2, [r3, #8]
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	691b      	ldr	r3, [r3, #16]
 800aefc:	431a      	orrs	r2, r3
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	695b      	ldr	r3, [r3, #20]
 800af02:	431a      	orrs	r2, r3
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	69db      	ldr	r3, [r3, #28]
 800af08:	4313      	orrs	r3, r2
 800af0a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	4bbe      	ldr	r3, [pc, #760]	@ (800b20c <UART_SetConfig+0x328>)
 800af14:	4013      	ands	r3, r2
 800af16:	697a      	ldr	r2, [r7, #20]
 800af18:	6812      	ldr	r2, [r2, #0]
 800af1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800af1c:	430b      	orrs	r3, r1
 800af1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	68da      	ldr	r2, [r3, #12]
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	430a      	orrs	r2, r1
 800af34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	699b      	ldr	r3, [r3, #24]
 800af3a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4ab3      	ldr	r2, [pc, #716]	@ (800b210 <UART_SetConfig+0x32c>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d004      	beq.n	800af50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	6a1b      	ldr	r3, [r3, #32]
 800af4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af4c:	4313      	orrs	r3, r2
 800af4e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	689a      	ldr	r2, [r3, #8]
 800af56:	4baf      	ldr	r3, [pc, #700]	@ (800b214 <UART_SetConfig+0x330>)
 800af58:	4013      	ands	r3, r2
 800af5a:	697a      	ldr	r2, [r7, #20]
 800af5c:	6812      	ldr	r2, [r2, #0]
 800af5e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800af60:	430b      	orrs	r3, r1
 800af62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af6a:	f023 010f 	bic.w	r1, r3, #15
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	430a      	orrs	r2, r1
 800af78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4aa6      	ldr	r2, [pc, #664]	@ (800b218 <UART_SetConfig+0x334>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d177      	bne.n	800b074 <UART_SetConfig+0x190>
 800af84:	4ba5      	ldr	r3, [pc, #660]	@ (800b21c <UART_SetConfig+0x338>)
 800af86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800af8c:	2b28      	cmp	r3, #40	@ 0x28
 800af8e:	d86d      	bhi.n	800b06c <UART_SetConfig+0x188>
 800af90:	a201      	add	r2, pc, #4	@ (adr r2, 800af98 <UART_SetConfig+0xb4>)
 800af92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af96:	bf00      	nop
 800af98:	0800b03d 	.word	0x0800b03d
 800af9c:	0800b06d 	.word	0x0800b06d
 800afa0:	0800b06d 	.word	0x0800b06d
 800afa4:	0800b06d 	.word	0x0800b06d
 800afa8:	0800b06d 	.word	0x0800b06d
 800afac:	0800b06d 	.word	0x0800b06d
 800afb0:	0800b06d 	.word	0x0800b06d
 800afb4:	0800b06d 	.word	0x0800b06d
 800afb8:	0800b045 	.word	0x0800b045
 800afbc:	0800b06d 	.word	0x0800b06d
 800afc0:	0800b06d 	.word	0x0800b06d
 800afc4:	0800b06d 	.word	0x0800b06d
 800afc8:	0800b06d 	.word	0x0800b06d
 800afcc:	0800b06d 	.word	0x0800b06d
 800afd0:	0800b06d 	.word	0x0800b06d
 800afd4:	0800b06d 	.word	0x0800b06d
 800afd8:	0800b04d 	.word	0x0800b04d
 800afdc:	0800b06d 	.word	0x0800b06d
 800afe0:	0800b06d 	.word	0x0800b06d
 800afe4:	0800b06d 	.word	0x0800b06d
 800afe8:	0800b06d 	.word	0x0800b06d
 800afec:	0800b06d 	.word	0x0800b06d
 800aff0:	0800b06d 	.word	0x0800b06d
 800aff4:	0800b06d 	.word	0x0800b06d
 800aff8:	0800b055 	.word	0x0800b055
 800affc:	0800b06d 	.word	0x0800b06d
 800b000:	0800b06d 	.word	0x0800b06d
 800b004:	0800b06d 	.word	0x0800b06d
 800b008:	0800b06d 	.word	0x0800b06d
 800b00c:	0800b06d 	.word	0x0800b06d
 800b010:	0800b06d 	.word	0x0800b06d
 800b014:	0800b06d 	.word	0x0800b06d
 800b018:	0800b05d 	.word	0x0800b05d
 800b01c:	0800b06d 	.word	0x0800b06d
 800b020:	0800b06d 	.word	0x0800b06d
 800b024:	0800b06d 	.word	0x0800b06d
 800b028:	0800b06d 	.word	0x0800b06d
 800b02c:	0800b06d 	.word	0x0800b06d
 800b030:	0800b06d 	.word	0x0800b06d
 800b034:	0800b06d 	.word	0x0800b06d
 800b038:	0800b065 	.word	0x0800b065
 800b03c:	2301      	movs	r3, #1
 800b03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b042:	e326      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b044:	2304      	movs	r3, #4
 800b046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b04a:	e322      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b04c:	2308      	movs	r3, #8
 800b04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b052:	e31e      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b054:	2310      	movs	r3, #16
 800b056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b05a:	e31a      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b05c:	2320      	movs	r3, #32
 800b05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b062:	e316      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b064:	2340      	movs	r3, #64	@ 0x40
 800b066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b06a:	e312      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b06c:	2380      	movs	r3, #128	@ 0x80
 800b06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b072:	e30e      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4a69      	ldr	r2, [pc, #420]	@ (800b220 <UART_SetConfig+0x33c>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d130      	bne.n	800b0e0 <UART_SetConfig+0x1fc>
 800b07e:	4b67      	ldr	r3, [pc, #412]	@ (800b21c <UART_SetConfig+0x338>)
 800b080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b082:	f003 0307 	and.w	r3, r3, #7
 800b086:	2b05      	cmp	r3, #5
 800b088:	d826      	bhi.n	800b0d8 <UART_SetConfig+0x1f4>
 800b08a:	a201      	add	r2, pc, #4	@ (adr r2, 800b090 <UART_SetConfig+0x1ac>)
 800b08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b090:	0800b0a9 	.word	0x0800b0a9
 800b094:	0800b0b1 	.word	0x0800b0b1
 800b098:	0800b0b9 	.word	0x0800b0b9
 800b09c:	0800b0c1 	.word	0x0800b0c1
 800b0a0:	0800b0c9 	.word	0x0800b0c9
 800b0a4:	0800b0d1 	.word	0x0800b0d1
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ae:	e2f0      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b0b0:	2304      	movs	r3, #4
 800b0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0b6:	e2ec      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b0b8:	2308      	movs	r3, #8
 800b0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0be:	e2e8      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b0c0:	2310      	movs	r3, #16
 800b0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0c6:	e2e4      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b0c8:	2320      	movs	r3, #32
 800b0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ce:	e2e0      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b0d0:	2340      	movs	r3, #64	@ 0x40
 800b0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0d6:	e2dc      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b0d8:	2380      	movs	r3, #128	@ 0x80
 800b0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0de:	e2d8      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4a4f      	ldr	r2, [pc, #316]	@ (800b224 <UART_SetConfig+0x340>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d130      	bne.n	800b14c <UART_SetConfig+0x268>
 800b0ea:	4b4c      	ldr	r3, [pc, #304]	@ (800b21c <UART_SetConfig+0x338>)
 800b0ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0ee:	f003 0307 	and.w	r3, r3, #7
 800b0f2:	2b05      	cmp	r3, #5
 800b0f4:	d826      	bhi.n	800b144 <UART_SetConfig+0x260>
 800b0f6:	a201      	add	r2, pc, #4	@ (adr r2, 800b0fc <UART_SetConfig+0x218>)
 800b0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0fc:	0800b115 	.word	0x0800b115
 800b100:	0800b11d 	.word	0x0800b11d
 800b104:	0800b125 	.word	0x0800b125
 800b108:	0800b12d 	.word	0x0800b12d
 800b10c:	0800b135 	.word	0x0800b135
 800b110:	0800b13d 	.word	0x0800b13d
 800b114:	2300      	movs	r3, #0
 800b116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b11a:	e2ba      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b11c:	2304      	movs	r3, #4
 800b11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b122:	e2b6      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b124:	2308      	movs	r3, #8
 800b126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b12a:	e2b2      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b12c:	2310      	movs	r3, #16
 800b12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b132:	e2ae      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b134:	2320      	movs	r3, #32
 800b136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b13a:	e2aa      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b13c:	2340      	movs	r3, #64	@ 0x40
 800b13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b142:	e2a6      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b144:	2380      	movs	r3, #128	@ 0x80
 800b146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b14a:	e2a2      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4a35      	ldr	r2, [pc, #212]	@ (800b228 <UART_SetConfig+0x344>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d130      	bne.n	800b1b8 <UART_SetConfig+0x2d4>
 800b156:	4b31      	ldr	r3, [pc, #196]	@ (800b21c <UART_SetConfig+0x338>)
 800b158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b15a:	f003 0307 	and.w	r3, r3, #7
 800b15e:	2b05      	cmp	r3, #5
 800b160:	d826      	bhi.n	800b1b0 <UART_SetConfig+0x2cc>
 800b162:	a201      	add	r2, pc, #4	@ (adr r2, 800b168 <UART_SetConfig+0x284>)
 800b164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b168:	0800b181 	.word	0x0800b181
 800b16c:	0800b189 	.word	0x0800b189
 800b170:	0800b191 	.word	0x0800b191
 800b174:	0800b199 	.word	0x0800b199
 800b178:	0800b1a1 	.word	0x0800b1a1
 800b17c:	0800b1a9 	.word	0x0800b1a9
 800b180:	2300      	movs	r3, #0
 800b182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b186:	e284      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b188:	2304      	movs	r3, #4
 800b18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b18e:	e280      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b190:	2308      	movs	r3, #8
 800b192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b196:	e27c      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b198:	2310      	movs	r3, #16
 800b19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b19e:	e278      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b1a0:	2320      	movs	r3, #32
 800b1a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1a6:	e274      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b1a8:	2340      	movs	r3, #64	@ 0x40
 800b1aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1ae:	e270      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b1b0:	2380      	movs	r3, #128	@ 0x80
 800b1b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1b6:	e26c      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4a1b      	ldr	r2, [pc, #108]	@ (800b22c <UART_SetConfig+0x348>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d142      	bne.n	800b248 <UART_SetConfig+0x364>
 800b1c2:	4b16      	ldr	r3, [pc, #88]	@ (800b21c <UART_SetConfig+0x338>)
 800b1c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1c6:	f003 0307 	and.w	r3, r3, #7
 800b1ca:	2b05      	cmp	r3, #5
 800b1cc:	d838      	bhi.n	800b240 <UART_SetConfig+0x35c>
 800b1ce:	a201      	add	r2, pc, #4	@ (adr r2, 800b1d4 <UART_SetConfig+0x2f0>)
 800b1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d4:	0800b1ed 	.word	0x0800b1ed
 800b1d8:	0800b1f5 	.word	0x0800b1f5
 800b1dc:	0800b1fd 	.word	0x0800b1fd
 800b1e0:	0800b205 	.word	0x0800b205
 800b1e4:	0800b231 	.word	0x0800b231
 800b1e8:	0800b239 	.word	0x0800b239
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1f2:	e24e      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b1f4:	2304      	movs	r3, #4
 800b1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1fa:	e24a      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b1fc:	2308      	movs	r3, #8
 800b1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b202:	e246      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b204:	2310      	movs	r3, #16
 800b206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b20a:	e242      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b20c:	cfff69f3 	.word	0xcfff69f3
 800b210:	58000c00 	.word	0x58000c00
 800b214:	11fff4ff 	.word	0x11fff4ff
 800b218:	40011000 	.word	0x40011000
 800b21c:	58024400 	.word	0x58024400
 800b220:	40004400 	.word	0x40004400
 800b224:	40004800 	.word	0x40004800
 800b228:	40004c00 	.word	0x40004c00
 800b22c:	40005000 	.word	0x40005000
 800b230:	2320      	movs	r3, #32
 800b232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b236:	e22c      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b238:	2340      	movs	r3, #64	@ 0x40
 800b23a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b23e:	e228      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b240:	2380      	movs	r3, #128	@ 0x80
 800b242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b246:	e224      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4ab1      	ldr	r2, [pc, #708]	@ (800b514 <UART_SetConfig+0x630>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d176      	bne.n	800b340 <UART_SetConfig+0x45c>
 800b252:	4bb1      	ldr	r3, [pc, #708]	@ (800b518 <UART_SetConfig+0x634>)
 800b254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b256:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b25a:	2b28      	cmp	r3, #40	@ 0x28
 800b25c:	d86c      	bhi.n	800b338 <UART_SetConfig+0x454>
 800b25e:	a201      	add	r2, pc, #4	@ (adr r2, 800b264 <UART_SetConfig+0x380>)
 800b260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b264:	0800b309 	.word	0x0800b309
 800b268:	0800b339 	.word	0x0800b339
 800b26c:	0800b339 	.word	0x0800b339
 800b270:	0800b339 	.word	0x0800b339
 800b274:	0800b339 	.word	0x0800b339
 800b278:	0800b339 	.word	0x0800b339
 800b27c:	0800b339 	.word	0x0800b339
 800b280:	0800b339 	.word	0x0800b339
 800b284:	0800b311 	.word	0x0800b311
 800b288:	0800b339 	.word	0x0800b339
 800b28c:	0800b339 	.word	0x0800b339
 800b290:	0800b339 	.word	0x0800b339
 800b294:	0800b339 	.word	0x0800b339
 800b298:	0800b339 	.word	0x0800b339
 800b29c:	0800b339 	.word	0x0800b339
 800b2a0:	0800b339 	.word	0x0800b339
 800b2a4:	0800b319 	.word	0x0800b319
 800b2a8:	0800b339 	.word	0x0800b339
 800b2ac:	0800b339 	.word	0x0800b339
 800b2b0:	0800b339 	.word	0x0800b339
 800b2b4:	0800b339 	.word	0x0800b339
 800b2b8:	0800b339 	.word	0x0800b339
 800b2bc:	0800b339 	.word	0x0800b339
 800b2c0:	0800b339 	.word	0x0800b339
 800b2c4:	0800b321 	.word	0x0800b321
 800b2c8:	0800b339 	.word	0x0800b339
 800b2cc:	0800b339 	.word	0x0800b339
 800b2d0:	0800b339 	.word	0x0800b339
 800b2d4:	0800b339 	.word	0x0800b339
 800b2d8:	0800b339 	.word	0x0800b339
 800b2dc:	0800b339 	.word	0x0800b339
 800b2e0:	0800b339 	.word	0x0800b339
 800b2e4:	0800b329 	.word	0x0800b329
 800b2e8:	0800b339 	.word	0x0800b339
 800b2ec:	0800b339 	.word	0x0800b339
 800b2f0:	0800b339 	.word	0x0800b339
 800b2f4:	0800b339 	.word	0x0800b339
 800b2f8:	0800b339 	.word	0x0800b339
 800b2fc:	0800b339 	.word	0x0800b339
 800b300:	0800b339 	.word	0x0800b339
 800b304:	0800b331 	.word	0x0800b331
 800b308:	2301      	movs	r3, #1
 800b30a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b30e:	e1c0      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b310:	2304      	movs	r3, #4
 800b312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b316:	e1bc      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b318:	2308      	movs	r3, #8
 800b31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b31e:	e1b8      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b320:	2310      	movs	r3, #16
 800b322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b326:	e1b4      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b328:	2320      	movs	r3, #32
 800b32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b32e:	e1b0      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b330:	2340      	movs	r3, #64	@ 0x40
 800b332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b336:	e1ac      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b338:	2380      	movs	r3, #128	@ 0x80
 800b33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b33e:	e1a8      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4a75      	ldr	r2, [pc, #468]	@ (800b51c <UART_SetConfig+0x638>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d130      	bne.n	800b3ac <UART_SetConfig+0x4c8>
 800b34a:	4b73      	ldr	r3, [pc, #460]	@ (800b518 <UART_SetConfig+0x634>)
 800b34c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b34e:	f003 0307 	and.w	r3, r3, #7
 800b352:	2b05      	cmp	r3, #5
 800b354:	d826      	bhi.n	800b3a4 <UART_SetConfig+0x4c0>
 800b356:	a201      	add	r2, pc, #4	@ (adr r2, 800b35c <UART_SetConfig+0x478>)
 800b358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b35c:	0800b375 	.word	0x0800b375
 800b360:	0800b37d 	.word	0x0800b37d
 800b364:	0800b385 	.word	0x0800b385
 800b368:	0800b38d 	.word	0x0800b38d
 800b36c:	0800b395 	.word	0x0800b395
 800b370:	0800b39d 	.word	0x0800b39d
 800b374:	2300      	movs	r3, #0
 800b376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b37a:	e18a      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b37c:	2304      	movs	r3, #4
 800b37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b382:	e186      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b384:	2308      	movs	r3, #8
 800b386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b38a:	e182      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b38c:	2310      	movs	r3, #16
 800b38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b392:	e17e      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b394:	2320      	movs	r3, #32
 800b396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b39a:	e17a      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b39c:	2340      	movs	r3, #64	@ 0x40
 800b39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3a2:	e176      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b3a4:	2380      	movs	r3, #128	@ 0x80
 800b3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3aa:	e172      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4a5b      	ldr	r2, [pc, #364]	@ (800b520 <UART_SetConfig+0x63c>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d130      	bne.n	800b418 <UART_SetConfig+0x534>
 800b3b6:	4b58      	ldr	r3, [pc, #352]	@ (800b518 <UART_SetConfig+0x634>)
 800b3b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3ba:	f003 0307 	and.w	r3, r3, #7
 800b3be:	2b05      	cmp	r3, #5
 800b3c0:	d826      	bhi.n	800b410 <UART_SetConfig+0x52c>
 800b3c2:	a201      	add	r2, pc, #4	@ (adr r2, 800b3c8 <UART_SetConfig+0x4e4>)
 800b3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c8:	0800b3e1 	.word	0x0800b3e1
 800b3cc:	0800b3e9 	.word	0x0800b3e9
 800b3d0:	0800b3f1 	.word	0x0800b3f1
 800b3d4:	0800b3f9 	.word	0x0800b3f9
 800b3d8:	0800b401 	.word	0x0800b401
 800b3dc:	0800b409 	.word	0x0800b409
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3e6:	e154      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b3e8:	2304      	movs	r3, #4
 800b3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3ee:	e150      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b3f0:	2308      	movs	r3, #8
 800b3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3f6:	e14c      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b3f8:	2310      	movs	r3, #16
 800b3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3fe:	e148      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b400:	2320      	movs	r3, #32
 800b402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b406:	e144      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b408:	2340      	movs	r3, #64	@ 0x40
 800b40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b40e:	e140      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b410:	2380      	movs	r3, #128	@ 0x80
 800b412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b416:	e13c      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4a41      	ldr	r2, [pc, #260]	@ (800b524 <UART_SetConfig+0x640>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	f040 8082 	bne.w	800b528 <UART_SetConfig+0x644>
 800b424:	4b3c      	ldr	r3, [pc, #240]	@ (800b518 <UART_SetConfig+0x634>)
 800b426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b428:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b42c:	2b28      	cmp	r3, #40	@ 0x28
 800b42e:	d86d      	bhi.n	800b50c <UART_SetConfig+0x628>
 800b430:	a201      	add	r2, pc, #4	@ (adr r2, 800b438 <UART_SetConfig+0x554>)
 800b432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b436:	bf00      	nop
 800b438:	0800b4dd 	.word	0x0800b4dd
 800b43c:	0800b50d 	.word	0x0800b50d
 800b440:	0800b50d 	.word	0x0800b50d
 800b444:	0800b50d 	.word	0x0800b50d
 800b448:	0800b50d 	.word	0x0800b50d
 800b44c:	0800b50d 	.word	0x0800b50d
 800b450:	0800b50d 	.word	0x0800b50d
 800b454:	0800b50d 	.word	0x0800b50d
 800b458:	0800b4e5 	.word	0x0800b4e5
 800b45c:	0800b50d 	.word	0x0800b50d
 800b460:	0800b50d 	.word	0x0800b50d
 800b464:	0800b50d 	.word	0x0800b50d
 800b468:	0800b50d 	.word	0x0800b50d
 800b46c:	0800b50d 	.word	0x0800b50d
 800b470:	0800b50d 	.word	0x0800b50d
 800b474:	0800b50d 	.word	0x0800b50d
 800b478:	0800b4ed 	.word	0x0800b4ed
 800b47c:	0800b50d 	.word	0x0800b50d
 800b480:	0800b50d 	.word	0x0800b50d
 800b484:	0800b50d 	.word	0x0800b50d
 800b488:	0800b50d 	.word	0x0800b50d
 800b48c:	0800b50d 	.word	0x0800b50d
 800b490:	0800b50d 	.word	0x0800b50d
 800b494:	0800b50d 	.word	0x0800b50d
 800b498:	0800b4f5 	.word	0x0800b4f5
 800b49c:	0800b50d 	.word	0x0800b50d
 800b4a0:	0800b50d 	.word	0x0800b50d
 800b4a4:	0800b50d 	.word	0x0800b50d
 800b4a8:	0800b50d 	.word	0x0800b50d
 800b4ac:	0800b50d 	.word	0x0800b50d
 800b4b0:	0800b50d 	.word	0x0800b50d
 800b4b4:	0800b50d 	.word	0x0800b50d
 800b4b8:	0800b4fd 	.word	0x0800b4fd
 800b4bc:	0800b50d 	.word	0x0800b50d
 800b4c0:	0800b50d 	.word	0x0800b50d
 800b4c4:	0800b50d 	.word	0x0800b50d
 800b4c8:	0800b50d 	.word	0x0800b50d
 800b4cc:	0800b50d 	.word	0x0800b50d
 800b4d0:	0800b50d 	.word	0x0800b50d
 800b4d4:	0800b50d 	.word	0x0800b50d
 800b4d8:	0800b505 	.word	0x0800b505
 800b4dc:	2301      	movs	r3, #1
 800b4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4e2:	e0d6      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b4e4:	2304      	movs	r3, #4
 800b4e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4ea:	e0d2      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b4ec:	2308      	movs	r3, #8
 800b4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4f2:	e0ce      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b4f4:	2310      	movs	r3, #16
 800b4f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4fa:	e0ca      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b4fc:	2320      	movs	r3, #32
 800b4fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b502:	e0c6      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b504:	2340      	movs	r3, #64	@ 0x40
 800b506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b50a:	e0c2      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b50c:	2380      	movs	r3, #128	@ 0x80
 800b50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b512:	e0be      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b514:	40011400 	.word	0x40011400
 800b518:	58024400 	.word	0x58024400
 800b51c:	40007800 	.word	0x40007800
 800b520:	40007c00 	.word	0x40007c00
 800b524:	40011800 	.word	0x40011800
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4aad      	ldr	r2, [pc, #692]	@ (800b7e4 <UART_SetConfig+0x900>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d176      	bne.n	800b620 <UART_SetConfig+0x73c>
 800b532:	4bad      	ldr	r3, [pc, #692]	@ (800b7e8 <UART_SetConfig+0x904>)
 800b534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b536:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b53a:	2b28      	cmp	r3, #40	@ 0x28
 800b53c:	d86c      	bhi.n	800b618 <UART_SetConfig+0x734>
 800b53e:	a201      	add	r2, pc, #4	@ (adr r2, 800b544 <UART_SetConfig+0x660>)
 800b540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b544:	0800b5e9 	.word	0x0800b5e9
 800b548:	0800b619 	.word	0x0800b619
 800b54c:	0800b619 	.word	0x0800b619
 800b550:	0800b619 	.word	0x0800b619
 800b554:	0800b619 	.word	0x0800b619
 800b558:	0800b619 	.word	0x0800b619
 800b55c:	0800b619 	.word	0x0800b619
 800b560:	0800b619 	.word	0x0800b619
 800b564:	0800b5f1 	.word	0x0800b5f1
 800b568:	0800b619 	.word	0x0800b619
 800b56c:	0800b619 	.word	0x0800b619
 800b570:	0800b619 	.word	0x0800b619
 800b574:	0800b619 	.word	0x0800b619
 800b578:	0800b619 	.word	0x0800b619
 800b57c:	0800b619 	.word	0x0800b619
 800b580:	0800b619 	.word	0x0800b619
 800b584:	0800b5f9 	.word	0x0800b5f9
 800b588:	0800b619 	.word	0x0800b619
 800b58c:	0800b619 	.word	0x0800b619
 800b590:	0800b619 	.word	0x0800b619
 800b594:	0800b619 	.word	0x0800b619
 800b598:	0800b619 	.word	0x0800b619
 800b59c:	0800b619 	.word	0x0800b619
 800b5a0:	0800b619 	.word	0x0800b619
 800b5a4:	0800b601 	.word	0x0800b601
 800b5a8:	0800b619 	.word	0x0800b619
 800b5ac:	0800b619 	.word	0x0800b619
 800b5b0:	0800b619 	.word	0x0800b619
 800b5b4:	0800b619 	.word	0x0800b619
 800b5b8:	0800b619 	.word	0x0800b619
 800b5bc:	0800b619 	.word	0x0800b619
 800b5c0:	0800b619 	.word	0x0800b619
 800b5c4:	0800b609 	.word	0x0800b609
 800b5c8:	0800b619 	.word	0x0800b619
 800b5cc:	0800b619 	.word	0x0800b619
 800b5d0:	0800b619 	.word	0x0800b619
 800b5d4:	0800b619 	.word	0x0800b619
 800b5d8:	0800b619 	.word	0x0800b619
 800b5dc:	0800b619 	.word	0x0800b619
 800b5e0:	0800b619 	.word	0x0800b619
 800b5e4:	0800b611 	.word	0x0800b611
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5ee:	e050      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b5f0:	2304      	movs	r3, #4
 800b5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5f6:	e04c      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b5f8:	2308      	movs	r3, #8
 800b5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5fe:	e048      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b600:	2310      	movs	r3, #16
 800b602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b606:	e044      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b608:	2320      	movs	r3, #32
 800b60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b60e:	e040      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b610:	2340      	movs	r3, #64	@ 0x40
 800b612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b616:	e03c      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b618:	2380      	movs	r3, #128	@ 0x80
 800b61a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b61e:	e038      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	4a71      	ldr	r2, [pc, #452]	@ (800b7ec <UART_SetConfig+0x908>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d130      	bne.n	800b68c <UART_SetConfig+0x7a8>
 800b62a:	4b6f      	ldr	r3, [pc, #444]	@ (800b7e8 <UART_SetConfig+0x904>)
 800b62c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b62e:	f003 0307 	and.w	r3, r3, #7
 800b632:	2b05      	cmp	r3, #5
 800b634:	d826      	bhi.n	800b684 <UART_SetConfig+0x7a0>
 800b636:	a201      	add	r2, pc, #4	@ (adr r2, 800b63c <UART_SetConfig+0x758>)
 800b638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b63c:	0800b655 	.word	0x0800b655
 800b640:	0800b65d 	.word	0x0800b65d
 800b644:	0800b665 	.word	0x0800b665
 800b648:	0800b66d 	.word	0x0800b66d
 800b64c:	0800b675 	.word	0x0800b675
 800b650:	0800b67d 	.word	0x0800b67d
 800b654:	2302      	movs	r3, #2
 800b656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b65a:	e01a      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b65c:	2304      	movs	r3, #4
 800b65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b662:	e016      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b664:	2308      	movs	r3, #8
 800b666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b66a:	e012      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b66c:	2310      	movs	r3, #16
 800b66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b672:	e00e      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b674:	2320      	movs	r3, #32
 800b676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b67a:	e00a      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b67c:	2340      	movs	r3, #64	@ 0x40
 800b67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b682:	e006      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b684:	2380      	movs	r3, #128	@ 0x80
 800b686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b68a:	e002      	b.n	800b692 <UART_SetConfig+0x7ae>
 800b68c:	2380      	movs	r3, #128	@ 0x80
 800b68e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4a55      	ldr	r2, [pc, #340]	@ (800b7ec <UART_SetConfig+0x908>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	f040 80f8 	bne.w	800b88e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b69e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b6a2:	2b20      	cmp	r3, #32
 800b6a4:	dc46      	bgt.n	800b734 <UART_SetConfig+0x850>
 800b6a6:	2b02      	cmp	r3, #2
 800b6a8:	db75      	blt.n	800b796 <UART_SetConfig+0x8b2>
 800b6aa:	3b02      	subs	r3, #2
 800b6ac:	2b1e      	cmp	r3, #30
 800b6ae:	d872      	bhi.n	800b796 <UART_SetConfig+0x8b2>
 800b6b0:	a201      	add	r2, pc, #4	@ (adr r2, 800b6b8 <UART_SetConfig+0x7d4>)
 800b6b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b6:	bf00      	nop
 800b6b8:	0800b73b 	.word	0x0800b73b
 800b6bc:	0800b797 	.word	0x0800b797
 800b6c0:	0800b743 	.word	0x0800b743
 800b6c4:	0800b797 	.word	0x0800b797
 800b6c8:	0800b797 	.word	0x0800b797
 800b6cc:	0800b797 	.word	0x0800b797
 800b6d0:	0800b753 	.word	0x0800b753
 800b6d4:	0800b797 	.word	0x0800b797
 800b6d8:	0800b797 	.word	0x0800b797
 800b6dc:	0800b797 	.word	0x0800b797
 800b6e0:	0800b797 	.word	0x0800b797
 800b6e4:	0800b797 	.word	0x0800b797
 800b6e8:	0800b797 	.word	0x0800b797
 800b6ec:	0800b797 	.word	0x0800b797
 800b6f0:	0800b763 	.word	0x0800b763
 800b6f4:	0800b797 	.word	0x0800b797
 800b6f8:	0800b797 	.word	0x0800b797
 800b6fc:	0800b797 	.word	0x0800b797
 800b700:	0800b797 	.word	0x0800b797
 800b704:	0800b797 	.word	0x0800b797
 800b708:	0800b797 	.word	0x0800b797
 800b70c:	0800b797 	.word	0x0800b797
 800b710:	0800b797 	.word	0x0800b797
 800b714:	0800b797 	.word	0x0800b797
 800b718:	0800b797 	.word	0x0800b797
 800b71c:	0800b797 	.word	0x0800b797
 800b720:	0800b797 	.word	0x0800b797
 800b724:	0800b797 	.word	0x0800b797
 800b728:	0800b797 	.word	0x0800b797
 800b72c:	0800b797 	.word	0x0800b797
 800b730:	0800b789 	.word	0x0800b789
 800b734:	2b40      	cmp	r3, #64	@ 0x40
 800b736:	d02a      	beq.n	800b78e <UART_SetConfig+0x8aa>
 800b738:	e02d      	b.n	800b796 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b73a:	f7fd fe4f 	bl	80093dc <HAL_RCCEx_GetD3PCLK1Freq>
 800b73e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b740:	e02f      	b.n	800b7a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b742:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b746:	4618      	mov	r0, r3
 800b748:	f7fd fe5e 	bl	8009408 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b74c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b74e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b750:	e027      	b.n	800b7a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b752:	f107 0318 	add.w	r3, r7, #24
 800b756:	4618      	mov	r0, r3
 800b758:	f7fd ffaa 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b75c:	69fb      	ldr	r3, [r7, #28]
 800b75e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b760:	e01f      	b.n	800b7a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b762:	4b21      	ldr	r3, [pc, #132]	@ (800b7e8 <UART_SetConfig+0x904>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f003 0320 	and.w	r3, r3, #32
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d009      	beq.n	800b782 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b76e:	4b1e      	ldr	r3, [pc, #120]	@ (800b7e8 <UART_SetConfig+0x904>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	08db      	lsrs	r3, r3, #3
 800b774:	f003 0303 	and.w	r3, r3, #3
 800b778:	4a1d      	ldr	r2, [pc, #116]	@ (800b7f0 <UART_SetConfig+0x90c>)
 800b77a:	fa22 f303 	lsr.w	r3, r2, r3
 800b77e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b780:	e00f      	b.n	800b7a2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b782:	4b1b      	ldr	r3, [pc, #108]	@ (800b7f0 <UART_SetConfig+0x90c>)
 800b784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b786:	e00c      	b.n	800b7a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b788:	4b1a      	ldr	r3, [pc, #104]	@ (800b7f4 <UART_SetConfig+0x910>)
 800b78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b78c:	e009      	b.n	800b7a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b78e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b794:	e005      	b.n	800b7a2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b796:	2300      	movs	r3, #0
 800b798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b79a:	2301      	movs	r3, #1
 800b79c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b7a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b7a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	f000 81ee 	beq.w	800bb86 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7ae:	4a12      	ldr	r2, [pc, #72]	@ (800b7f8 <UART_SetConfig+0x914>)
 800b7b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7bc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	685a      	ldr	r2, [r3, #4]
 800b7c2:	4613      	mov	r3, r2
 800b7c4:	005b      	lsls	r3, r3, #1
 800b7c6:	4413      	add	r3, r2
 800b7c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	d305      	bcc.n	800b7da <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b7d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d910      	bls.n	800b7fc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b7e0:	e1d1      	b.n	800bb86 <UART_SetConfig+0xca2>
 800b7e2:	bf00      	nop
 800b7e4:	40011c00 	.word	0x40011c00
 800b7e8:	58024400 	.word	0x58024400
 800b7ec:	58000c00 	.word	0x58000c00
 800b7f0:	03d09000 	.word	0x03d09000
 800b7f4:	003d0900 	.word	0x003d0900
 800b7f8:	0800cf98 	.word	0x0800cf98
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7fe:	2200      	movs	r2, #0
 800b800:	60bb      	str	r3, [r7, #8]
 800b802:	60fa      	str	r2, [r7, #12]
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b808:	4ac0      	ldr	r2, [pc, #768]	@ (800bb0c <UART_SetConfig+0xc28>)
 800b80a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b80e:	b29b      	uxth	r3, r3
 800b810:	2200      	movs	r2, #0
 800b812:	603b      	str	r3, [r7, #0]
 800b814:	607a      	str	r2, [r7, #4]
 800b816:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b81a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b81e:	f7f4 fdcf 	bl	80003c0 <__aeabi_uldivmod>
 800b822:	4602      	mov	r2, r0
 800b824:	460b      	mov	r3, r1
 800b826:	4610      	mov	r0, r2
 800b828:	4619      	mov	r1, r3
 800b82a:	f04f 0200 	mov.w	r2, #0
 800b82e:	f04f 0300 	mov.w	r3, #0
 800b832:	020b      	lsls	r3, r1, #8
 800b834:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b838:	0202      	lsls	r2, r0, #8
 800b83a:	6979      	ldr	r1, [r7, #20]
 800b83c:	6849      	ldr	r1, [r1, #4]
 800b83e:	0849      	lsrs	r1, r1, #1
 800b840:	2000      	movs	r0, #0
 800b842:	460c      	mov	r4, r1
 800b844:	4605      	mov	r5, r0
 800b846:	eb12 0804 	adds.w	r8, r2, r4
 800b84a:	eb43 0905 	adc.w	r9, r3, r5
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	2200      	movs	r2, #0
 800b854:	469a      	mov	sl, r3
 800b856:	4693      	mov	fp, r2
 800b858:	4652      	mov	r2, sl
 800b85a:	465b      	mov	r3, fp
 800b85c:	4640      	mov	r0, r8
 800b85e:	4649      	mov	r1, r9
 800b860:	f7f4 fdae 	bl	80003c0 <__aeabi_uldivmod>
 800b864:	4602      	mov	r2, r0
 800b866:	460b      	mov	r3, r1
 800b868:	4613      	mov	r3, r2
 800b86a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b86c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b86e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b872:	d308      	bcc.n	800b886 <UART_SetConfig+0x9a2>
 800b874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b876:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b87a:	d204      	bcs.n	800b886 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b882:	60da      	str	r2, [r3, #12]
 800b884:	e17f      	b.n	800bb86 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b886:	2301      	movs	r3, #1
 800b888:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b88c:	e17b      	b.n	800bb86 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	69db      	ldr	r3, [r3, #28]
 800b892:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b896:	f040 80bd 	bne.w	800ba14 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b89a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b89e:	2b20      	cmp	r3, #32
 800b8a0:	dc48      	bgt.n	800b934 <UART_SetConfig+0xa50>
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	db7b      	blt.n	800b99e <UART_SetConfig+0xaba>
 800b8a6:	2b20      	cmp	r3, #32
 800b8a8:	d879      	bhi.n	800b99e <UART_SetConfig+0xaba>
 800b8aa:	a201      	add	r2, pc, #4	@ (adr r2, 800b8b0 <UART_SetConfig+0x9cc>)
 800b8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8b0:	0800b93b 	.word	0x0800b93b
 800b8b4:	0800b943 	.word	0x0800b943
 800b8b8:	0800b99f 	.word	0x0800b99f
 800b8bc:	0800b99f 	.word	0x0800b99f
 800b8c0:	0800b94b 	.word	0x0800b94b
 800b8c4:	0800b99f 	.word	0x0800b99f
 800b8c8:	0800b99f 	.word	0x0800b99f
 800b8cc:	0800b99f 	.word	0x0800b99f
 800b8d0:	0800b95b 	.word	0x0800b95b
 800b8d4:	0800b99f 	.word	0x0800b99f
 800b8d8:	0800b99f 	.word	0x0800b99f
 800b8dc:	0800b99f 	.word	0x0800b99f
 800b8e0:	0800b99f 	.word	0x0800b99f
 800b8e4:	0800b99f 	.word	0x0800b99f
 800b8e8:	0800b99f 	.word	0x0800b99f
 800b8ec:	0800b99f 	.word	0x0800b99f
 800b8f0:	0800b96b 	.word	0x0800b96b
 800b8f4:	0800b99f 	.word	0x0800b99f
 800b8f8:	0800b99f 	.word	0x0800b99f
 800b8fc:	0800b99f 	.word	0x0800b99f
 800b900:	0800b99f 	.word	0x0800b99f
 800b904:	0800b99f 	.word	0x0800b99f
 800b908:	0800b99f 	.word	0x0800b99f
 800b90c:	0800b99f 	.word	0x0800b99f
 800b910:	0800b99f 	.word	0x0800b99f
 800b914:	0800b99f 	.word	0x0800b99f
 800b918:	0800b99f 	.word	0x0800b99f
 800b91c:	0800b99f 	.word	0x0800b99f
 800b920:	0800b99f 	.word	0x0800b99f
 800b924:	0800b99f 	.word	0x0800b99f
 800b928:	0800b99f 	.word	0x0800b99f
 800b92c:	0800b99f 	.word	0x0800b99f
 800b930:	0800b991 	.word	0x0800b991
 800b934:	2b40      	cmp	r3, #64	@ 0x40
 800b936:	d02e      	beq.n	800b996 <UART_SetConfig+0xab2>
 800b938:	e031      	b.n	800b99e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b93a:	f7fb feb1 	bl	80076a0 <HAL_RCC_GetPCLK1Freq>
 800b93e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b940:	e033      	b.n	800b9aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b942:	f7fb fec3 	bl	80076cc <HAL_RCC_GetPCLK2Freq>
 800b946:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b948:	e02f      	b.n	800b9aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b94a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b94e:	4618      	mov	r0, r3
 800b950:	f7fd fd5a 	bl	8009408 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b958:	e027      	b.n	800b9aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b95a:	f107 0318 	add.w	r3, r7, #24
 800b95e:	4618      	mov	r0, r3
 800b960:	f7fd fea6 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b964:	69fb      	ldr	r3, [r7, #28]
 800b966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b968:	e01f      	b.n	800b9aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b96a:	4b69      	ldr	r3, [pc, #420]	@ (800bb10 <UART_SetConfig+0xc2c>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f003 0320 	and.w	r3, r3, #32
 800b972:	2b00      	cmp	r3, #0
 800b974:	d009      	beq.n	800b98a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b976:	4b66      	ldr	r3, [pc, #408]	@ (800bb10 <UART_SetConfig+0xc2c>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	08db      	lsrs	r3, r3, #3
 800b97c:	f003 0303 	and.w	r3, r3, #3
 800b980:	4a64      	ldr	r2, [pc, #400]	@ (800bb14 <UART_SetConfig+0xc30>)
 800b982:	fa22 f303 	lsr.w	r3, r2, r3
 800b986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b988:	e00f      	b.n	800b9aa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b98a:	4b62      	ldr	r3, [pc, #392]	@ (800bb14 <UART_SetConfig+0xc30>)
 800b98c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b98e:	e00c      	b.n	800b9aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b990:	4b61      	ldr	r3, [pc, #388]	@ (800bb18 <UART_SetConfig+0xc34>)
 800b992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b994:	e009      	b.n	800b9aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b996:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b99a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b99c:	e005      	b.n	800b9aa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b9a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b9aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f000 80ea 	beq.w	800bb86 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9b6:	4a55      	ldr	r2, [pc, #340]	@ (800bb0c <UART_SetConfig+0xc28>)
 800b9b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9bc:	461a      	mov	r2, r3
 800b9be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9c4:	005a      	lsls	r2, r3, #1
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	085b      	lsrs	r3, r3, #1
 800b9cc:	441a      	add	r2, r3
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	685b      	ldr	r3, [r3, #4]
 800b9d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b9d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9da:	2b0f      	cmp	r3, #15
 800b9dc:	d916      	bls.n	800ba0c <UART_SetConfig+0xb28>
 800b9de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9e4:	d212      	bcs.n	800ba0c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b9e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	f023 030f 	bic.w	r3, r3, #15
 800b9ee:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b9f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9f2:	085b      	lsrs	r3, r3, #1
 800b9f4:	b29b      	uxth	r3, r3
 800b9f6:	f003 0307 	and.w	r3, r3, #7
 800b9fa:	b29a      	uxth	r2, r3
 800b9fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ba08:	60da      	str	r2, [r3, #12]
 800ba0a:	e0bc      	b.n	800bb86 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ba12:	e0b8      	b.n	800bb86 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ba14:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ba18:	2b20      	cmp	r3, #32
 800ba1a:	dc4b      	bgt.n	800bab4 <UART_SetConfig+0xbd0>
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	f2c0 8087 	blt.w	800bb30 <UART_SetConfig+0xc4c>
 800ba22:	2b20      	cmp	r3, #32
 800ba24:	f200 8084 	bhi.w	800bb30 <UART_SetConfig+0xc4c>
 800ba28:	a201      	add	r2, pc, #4	@ (adr r2, 800ba30 <UART_SetConfig+0xb4c>)
 800ba2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba2e:	bf00      	nop
 800ba30:	0800babb 	.word	0x0800babb
 800ba34:	0800bac3 	.word	0x0800bac3
 800ba38:	0800bb31 	.word	0x0800bb31
 800ba3c:	0800bb31 	.word	0x0800bb31
 800ba40:	0800bacb 	.word	0x0800bacb
 800ba44:	0800bb31 	.word	0x0800bb31
 800ba48:	0800bb31 	.word	0x0800bb31
 800ba4c:	0800bb31 	.word	0x0800bb31
 800ba50:	0800badb 	.word	0x0800badb
 800ba54:	0800bb31 	.word	0x0800bb31
 800ba58:	0800bb31 	.word	0x0800bb31
 800ba5c:	0800bb31 	.word	0x0800bb31
 800ba60:	0800bb31 	.word	0x0800bb31
 800ba64:	0800bb31 	.word	0x0800bb31
 800ba68:	0800bb31 	.word	0x0800bb31
 800ba6c:	0800bb31 	.word	0x0800bb31
 800ba70:	0800baeb 	.word	0x0800baeb
 800ba74:	0800bb31 	.word	0x0800bb31
 800ba78:	0800bb31 	.word	0x0800bb31
 800ba7c:	0800bb31 	.word	0x0800bb31
 800ba80:	0800bb31 	.word	0x0800bb31
 800ba84:	0800bb31 	.word	0x0800bb31
 800ba88:	0800bb31 	.word	0x0800bb31
 800ba8c:	0800bb31 	.word	0x0800bb31
 800ba90:	0800bb31 	.word	0x0800bb31
 800ba94:	0800bb31 	.word	0x0800bb31
 800ba98:	0800bb31 	.word	0x0800bb31
 800ba9c:	0800bb31 	.word	0x0800bb31
 800baa0:	0800bb31 	.word	0x0800bb31
 800baa4:	0800bb31 	.word	0x0800bb31
 800baa8:	0800bb31 	.word	0x0800bb31
 800baac:	0800bb31 	.word	0x0800bb31
 800bab0:	0800bb23 	.word	0x0800bb23
 800bab4:	2b40      	cmp	r3, #64	@ 0x40
 800bab6:	d037      	beq.n	800bb28 <UART_SetConfig+0xc44>
 800bab8:	e03a      	b.n	800bb30 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800baba:	f7fb fdf1 	bl	80076a0 <HAL_RCC_GetPCLK1Freq>
 800babe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bac0:	e03c      	b.n	800bb3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bac2:	f7fb fe03 	bl	80076cc <HAL_RCC_GetPCLK2Freq>
 800bac6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bac8:	e038      	b.n	800bb3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800baca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bace:	4618      	mov	r0, r3
 800bad0:	f7fd fc9a 	bl	8009408 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bad8:	e030      	b.n	800bb3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bada:	f107 0318 	add.w	r3, r7, #24
 800bade:	4618      	mov	r0, r3
 800bae0:	f7fd fde6 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bae4:	69fb      	ldr	r3, [r7, #28]
 800bae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bae8:	e028      	b.n	800bb3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800baea:	4b09      	ldr	r3, [pc, #36]	@ (800bb10 <UART_SetConfig+0xc2c>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f003 0320 	and.w	r3, r3, #32
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d012      	beq.n	800bb1c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800baf6:	4b06      	ldr	r3, [pc, #24]	@ (800bb10 <UART_SetConfig+0xc2c>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	08db      	lsrs	r3, r3, #3
 800bafc:	f003 0303 	and.w	r3, r3, #3
 800bb00:	4a04      	ldr	r2, [pc, #16]	@ (800bb14 <UART_SetConfig+0xc30>)
 800bb02:	fa22 f303 	lsr.w	r3, r2, r3
 800bb06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bb08:	e018      	b.n	800bb3c <UART_SetConfig+0xc58>
 800bb0a:	bf00      	nop
 800bb0c:	0800cf98 	.word	0x0800cf98
 800bb10:	58024400 	.word	0x58024400
 800bb14:	03d09000 	.word	0x03d09000
 800bb18:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800bb1c:	4b24      	ldr	r3, [pc, #144]	@ (800bbb0 <UART_SetConfig+0xccc>)
 800bb1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb20:	e00c      	b.n	800bb3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bb22:	4b24      	ldr	r3, [pc, #144]	@ (800bbb4 <UART_SetConfig+0xcd0>)
 800bb24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb26:	e009      	b.n	800bb3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb2e:	e005      	b.n	800bb3c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800bb30:	2300      	movs	r3, #0
 800bb32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bb34:	2301      	movs	r3, #1
 800bb36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bb3a:	bf00      	nop
    }

    if (pclk != 0U)
 800bb3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d021      	beq.n	800bb86 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb46:	4a1c      	ldr	r2, [pc, #112]	@ (800bbb8 <UART_SetConfig+0xcd4>)
 800bb48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb50:	fbb3 f2f2 	udiv	r2, r3, r2
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	085b      	lsrs	r3, r3, #1
 800bb5a:	441a      	add	r2, r3
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb64:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb68:	2b0f      	cmp	r3, #15
 800bb6a:	d909      	bls.n	800bb80 <UART_SetConfig+0xc9c>
 800bb6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb72:	d205      	bcs.n	800bb80 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bb74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb76:	b29a      	uxth	r2, r3
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	60da      	str	r2, [r3, #12]
 800bb7e:	e002      	b.n	800bb86 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800bb80:	2301      	movs	r3, #1
 800bb82:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	2201      	movs	r2, #1
 800bb8a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	2201      	movs	r2, #1
 800bb92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bba2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3748      	adds	r7, #72	@ 0x48
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bbb0:	03d09000 	.word	0x03d09000
 800bbb4:	003d0900 	.word	0x003d0900
 800bbb8:	0800cf98 	.word	0x0800cf98

0800bbbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b083      	sub	sp, #12
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbc8:	f003 0308 	and.w	r3, r3, #8
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d00a      	beq.n	800bbe6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	685b      	ldr	r3, [r3, #4]
 800bbd6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	430a      	orrs	r2, r1
 800bbe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbea:	f003 0301 	and.w	r3, r3, #1
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d00a      	beq.n	800bc08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	685b      	ldr	r3, [r3, #4]
 800bbf8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	430a      	orrs	r2, r1
 800bc06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc0c:	f003 0302 	and.w	r3, r3, #2
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d00a      	beq.n	800bc2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	430a      	orrs	r2, r1
 800bc28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc2e:	f003 0304 	and.w	r3, r3, #4
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d00a      	beq.n	800bc4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	430a      	orrs	r2, r1
 800bc4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc50:	f003 0310 	and.w	r3, r3, #16
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d00a      	beq.n	800bc6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	689b      	ldr	r3, [r3, #8]
 800bc5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	430a      	orrs	r2, r1
 800bc6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc72:	f003 0320 	and.w	r3, r3, #32
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d00a      	beq.n	800bc90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	430a      	orrs	r2, r1
 800bc8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d01a      	beq.n	800bcd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	430a      	orrs	r2, r1
 800bcb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bcba:	d10a      	bne.n	800bcd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	430a      	orrs	r2, r1
 800bcd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d00a      	beq.n	800bcf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	430a      	orrs	r2, r1
 800bcf2:	605a      	str	r2, [r3, #4]
  }
}
 800bcf4:	bf00      	nop
 800bcf6:	370c      	adds	r7, #12
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr

0800bd00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b098      	sub	sp, #96	@ 0x60
 800bd04:	af02      	add	r7, sp, #8
 800bd06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bd10:	f7f7 f8f0 	bl	8002ef4 <HAL_GetTick>
 800bd14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f003 0308 	and.w	r3, r3, #8
 800bd20:	2b08      	cmp	r3, #8
 800bd22:	d12f      	bne.n	800bd84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bd28:	9300      	str	r3, [sp, #0]
 800bd2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f000 f88e 	bl	800be54 <UART_WaitOnFlagUntilTimeout>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d022      	beq.n	800bd84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd46:	e853 3f00 	ldrex	r3, [r3]
 800bd4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bd4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd52:	653b      	str	r3, [r7, #80]	@ 0x50
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	461a      	mov	r2, r3
 800bd5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd5c:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd5e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bd62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd64:	e841 2300 	strex	r3, r2, [r1]
 800bd68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bd6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d1e6      	bne.n	800bd3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2220      	movs	r2, #32
 800bd74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd80:	2303      	movs	r3, #3
 800bd82:	e063      	b.n	800be4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f003 0304 	and.w	r3, r3, #4
 800bd8e:	2b04      	cmp	r3, #4
 800bd90:	d149      	bne.n	800be26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd92:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bd96:	9300      	str	r3, [sp, #0]
 800bd98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 f857 	bl	800be54 <UART_WaitOnFlagUntilTimeout>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d03c      	beq.n	800be26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdb4:	e853 3f00 	ldrex	r3, [r3]
 800bdb8:	623b      	str	r3, [r7, #32]
   return(result);
 800bdba:	6a3b      	ldr	r3, [r7, #32]
 800bdbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bdc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bdca:	633b      	str	r3, [r7, #48]	@ 0x30
 800bdcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bdd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bdd2:	e841 2300 	strex	r3, r2, [r1]
 800bdd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bdd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d1e6      	bne.n	800bdac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	3308      	adds	r3, #8
 800bde4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	e853 3f00 	ldrex	r3, [r3]
 800bdec:	60fb      	str	r3, [r7, #12]
   return(result);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	f023 0301 	bic.w	r3, r3, #1
 800bdf4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	3308      	adds	r3, #8
 800bdfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bdfe:	61fa      	str	r2, [r7, #28]
 800be00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be02:	69b9      	ldr	r1, [r7, #24]
 800be04:	69fa      	ldr	r2, [r7, #28]
 800be06:	e841 2300 	strex	r3, r2, [r1]
 800be0a:	617b      	str	r3, [r7, #20]
   return(result);
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d1e5      	bne.n	800bdde <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2220      	movs	r2, #32
 800be16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2200      	movs	r2, #0
 800be1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be22:	2303      	movs	r3, #3
 800be24:	e012      	b.n	800be4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2220      	movs	r2, #32
 800be2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2220      	movs	r2, #32
 800be32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2200      	movs	r2, #0
 800be40:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2200      	movs	r2, #0
 800be46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800be4a:	2300      	movs	r3, #0
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3758      	adds	r7, #88	@ 0x58
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b084      	sub	sp, #16
 800be58:	af00      	add	r7, sp, #0
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	60b9      	str	r1, [r7, #8]
 800be5e:	603b      	str	r3, [r7, #0]
 800be60:	4613      	mov	r3, r2
 800be62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be64:	e04f      	b.n	800bf06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be66:	69bb      	ldr	r3, [r7, #24]
 800be68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be6c:	d04b      	beq.n	800bf06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be6e:	f7f7 f841 	bl	8002ef4 <HAL_GetTick>
 800be72:	4602      	mov	r2, r0
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	1ad3      	subs	r3, r2, r3
 800be78:	69ba      	ldr	r2, [r7, #24]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d302      	bcc.n	800be84 <UART_WaitOnFlagUntilTimeout+0x30>
 800be7e:	69bb      	ldr	r3, [r7, #24]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d101      	bne.n	800be88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800be84:	2303      	movs	r3, #3
 800be86:	e04e      	b.n	800bf26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f003 0304 	and.w	r3, r3, #4
 800be92:	2b00      	cmp	r3, #0
 800be94:	d037      	beq.n	800bf06 <UART_WaitOnFlagUntilTimeout+0xb2>
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	2b80      	cmp	r3, #128	@ 0x80
 800be9a:	d034      	beq.n	800bf06 <UART_WaitOnFlagUntilTimeout+0xb2>
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	2b40      	cmp	r3, #64	@ 0x40
 800bea0:	d031      	beq.n	800bf06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	69db      	ldr	r3, [r3, #28]
 800bea8:	f003 0308 	and.w	r3, r3, #8
 800beac:	2b08      	cmp	r3, #8
 800beae:	d110      	bne.n	800bed2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	2208      	movs	r2, #8
 800beb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800beb8:	68f8      	ldr	r0, [r7, #12]
 800beba:	f000 f839 	bl	800bf30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	2208      	movs	r2, #8
 800bec2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2200      	movs	r2, #0
 800beca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bece:	2301      	movs	r3, #1
 800bed0:	e029      	b.n	800bf26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	69db      	ldr	r3, [r3, #28]
 800bed8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bedc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bee0:	d111      	bne.n	800bf06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800beea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800beec:	68f8      	ldr	r0, [r7, #12]
 800beee:	f000 f81f 	bl	800bf30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	2220      	movs	r2, #32
 800bef6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2200      	movs	r2, #0
 800befe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bf02:	2303      	movs	r3, #3
 800bf04:	e00f      	b.n	800bf26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	69da      	ldr	r2, [r3, #28]
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	4013      	ands	r3, r2
 800bf10:	68ba      	ldr	r2, [r7, #8]
 800bf12:	429a      	cmp	r2, r3
 800bf14:	bf0c      	ite	eq
 800bf16:	2301      	moveq	r3, #1
 800bf18:	2300      	movne	r3, #0
 800bf1a:	b2db      	uxtb	r3, r3
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	79fb      	ldrb	r3, [r7, #7]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d0a0      	beq.n	800be66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bf24:	2300      	movs	r3, #0
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3710      	adds	r7, #16
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
	...

0800bf30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b095      	sub	sp, #84	@ 0x54
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf40:	e853 3f00 	ldrex	r3, [r3]
 800bf44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bf46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	461a      	mov	r2, r3
 800bf54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf56:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf58:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bf5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bf5e:	e841 2300 	strex	r3, r2, [r1]
 800bf62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bf64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d1e6      	bne.n	800bf38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	3308      	adds	r3, #8
 800bf70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf72:	6a3b      	ldr	r3, [r7, #32]
 800bf74:	e853 3f00 	ldrex	r3, [r3]
 800bf78:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf7a:	69fa      	ldr	r2, [r7, #28]
 800bf7c:	4b1e      	ldr	r3, [pc, #120]	@ (800bff8 <UART_EndRxTransfer+0xc8>)
 800bf7e:	4013      	ands	r3, r2
 800bf80:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	3308      	adds	r3, #8
 800bf88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bf8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bf8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf92:	e841 2300 	strex	r3, r2, [r1]
 800bf96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bf98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d1e5      	bne.n	800bf6a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d118      	bne.n	800bfd8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	e853 3f00 	ldrex	r3, [r3]
 800bfb2:	60bb      	str	r3, [r7, #8]
   return(result);
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	f023 0310 	bic.w	r3, r3, #16
 800bfba:	647b      	str	r3, [r7, #68]	@ 0x44
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bfc4:	61bb      	str	r3, [r7, #24]
 800bfc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc8:	6979      	ldr	r1, [r7, #20]
 800bfca:	69ba      	ldr	r2, [r7, #24]
 800bfcc:	e841 2300 	strex	r3, r2, [r1]
 800bfd0:	613b      	str	r3, [r7, #16]
   return(result);
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d1e6      	bne.n	800bfa6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2220      	movs	r2, #32
 800bfdc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bfec:	bf00      	nop
 800bfee:	3754      	adds	r7, #84	@ 0x54
 800bff0:	46bd      	mov	sp, r7
 800bff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff6:	4770      	bx	lr
 800bff8:	effffffe 	.word	0xeffffffe

0800bffc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b085      	sub	sp, #20
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	d101      	bne.n	800c012 <HAL_UARTEx_DisableFifoMode+0x16>
 800c00e:	2302      	movs	r3, #2
 800c010:	e027      	b.n	800c062 <HAL_UARTEx_DisableFifoMode+0x66>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2201      	movs	r2, #1
 800c016:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2224      	movs	r2, #36	@ 0x24
 800c01e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	681a      	ldr	r2, [r3, #0]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f022 0201 	bic.w	r2, r2, #1
 800c038:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c040:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	68fa      	ldr	r2, [r7, #12]
 800c04e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2220      	movs	r2, #32
 800c054:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2200      	movs	r2, #0
 800c05c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c060:	2300      	movs	r3, #0
}
 800c062:	4618      	mov	r0, r3
 800c064:	3714      	adds	r7, #20
 800c066:	46bd      	mov	sp, r7
 800c068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06c:	4770      	bx	lr

0800c06e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c06e:	b580      	push	{r7, lr}
 800c070:	b084      	sub	sp, #16
 800c072:	af00      	add	r7, sp, #0
 800c074:	6078      	str	r0, [r7, #4]
 800c076:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d101      	bne.n	800c086 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c082:	2302      	movs	r3, #2
 800c084:	e02d      	b.n	800c0e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2201      	movs	r2, #1
 800c08a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2224      	movs	r2, #36	@ 0x24
 800c092:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f022 0201 	bic.w	r2, r2, #1
 800c0ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	689b      	ldr	r3, [r3, #8]
 800c0b4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	683a      	ldr	r2, [r7, #0]
 800c0be:	430a      	orrs	r2, r1
 800c0c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f000 f850 	bl	800c168 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	68fa      	ldr	r2, [r7, #12]
 800c0ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2220      	movs	r2, #32
 800c0d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c0e0:	2300      	movs	r3, #0
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3710      	adds	r7, #16
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}

0800c0ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c0ea:	b580      	push	{r7, lr}
 800c0ec:	b084      	sub	sp, #16
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
 800c0f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d101      	bne.n	800c102 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c0fe:	2302      	movs	r3, #2
 800c100:	e02d      	b.n	800c15e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2201      	movs	r2, #1
 800c106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2224      	movs	r2, #36	@ 0x24
 800c10e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	681a      	ldr	r2, [r3, #0]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f022 0201 	bic.w	r2, r2, #1
 800c128:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	689b      	ldr	r3, [r3, #8]
 800c130:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	683a      	ldr	r2, [r7, #0]
 800c13a:	430a      	orrs	r2, r1
 800c13c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f000 f812 	bl	800c168 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	68fa      	ldr	r2, [r7, #12]
 800c14a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2220      	movs	r2, #32
 800c150:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2200      	movs	r2, #0
 800c158:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c15c:	2300      	movs	r3, #0
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3710      	adds	r7, #16
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
	...

0800c168 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c168:	b480      	push	{r7}
 800c16a:	b085      	sub	sp, #20
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c174:	2b00      	cmp	r3, #0
 800c176:	d108      	bne.n	800c18a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2201      	movs	r2, #1
 800c17c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2201      	movs	r2, #1
 800c184:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c188:	e031      	b.n	800c1ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c18a:	2310      	movs	r3, #16
 800c18c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c18e:	2310      	movs	r3, #16
 800c190:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	689b      	ldr	r3, [r3, #8]
 800c198:	0e5b      	lsrs	r3, r3, #25
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	f003 0307 	and.w	r3, r3, #7
 800c1a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	689b      	ldr	r3, [r3, #8]
 800c1a8:	0f5b      	lsrs	r3, r3, #29
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	f003 0307 	and.w	r3, r3, #7
 800c1b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c1b2:	7bbb      	ldrb	r3, [r7, #14]
 800c1b4:	7b3a      	ldrb	r2, [r7, #12]
 800c1b6:	4911      	ldr	r1, [pc, #68]	@ (800c1fc <UARTEx_SetNbDataToProcess+0x94>)
 800c1b8:	5c8a      	ldrb	r2, [r1, r2]
 800c1ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c1be:	7b3a      	ldrb	r2, [r7, #12]
 800c1c0:	490f      	ldr	r1, [pc, #60]	@ (800c200 <UARTEx_SetNbDataToProcess+0x98>)
 800c1c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c1c4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1c8:	b29a      	uxth	r2, r3
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c1d0:	7bfb      	ldrb	r3, [r7, #15]
 800c1d2:	7b7a      	ldrb	r2, [r7, #13]
 800c1d4:	4909      	ldr	r1, [pc, #36]	@ (800c1fc <UARTEx_SetNbDataToProcess+0x94>)
 800c1d6:	5c8a      	ldrb	r2, [r1, r2]
 800c1d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c1dc:	7b7a      	ldrb	r2, [r7, #13]
 800c1de:	4908      	ldr	r1, [pc, #32]	@ (800c200 <UARTEx_SetNbDataToProcess+0x98>)
 800c1e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c1e2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1e6:	b29a      	uxth	r2, r3
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c1ee:	bf00      	nop
 800c1f0:	3714      	adds	r7, #20
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr
 800c1fa:	bf00      	nop
 800c1fc:	0800cfb0 	.word	0x0800cfb0
 800c200:	0800cfb8 	.word	0x0800cfb8

0800c204 <siprintf>:
 800c204:	b40e      	push	{r1, r2, r3}
 800c206:	b510      	push	{r4, lr}
 800c208:	b09d      	sub	sp, #116	@ 0x74
 800c20a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c20c:	9002      	str	r0, [sp, #8]
 800c20e:	9006      	str	r0, [sp, #24]
 800c210:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c214:	480a      	ldr	r0, [pc, #40]	@ (800c240 <siprintf+0x3c>)
 800c216:	9107      	str	r1, [sp, #28]
 800c218:	9104      	str	r1, [sp, #16]
 800c21a:	490a      	ldr	r1, [pc, #40]	@ (800c244 <siprintf+0x40>)
 800c21c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c220:	9105      	str	r1, [sp, #20]
 800c222:	2400      	movs	r4, #0
 800c224:	a902      	add	r1, sp, #8
 800c226:	6800      	ldr	r0, [r0, #0]
 800c228:	9301      	str	r3, [sp, #4]
 800c22a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c22c:	f000 f9a2 	bl	800c574 <_svfiprintf_r>
 800c230:	9b02      	ldr	r3, [sp, #8]
 800c232:	701c      	strb	r4, [r3, #0]
 800c234:	b01d      	add	sp, #116	@ 0x74
 800c236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c23a:	b003      	add	sp, #12
 800c23c:	4770      	bx	lr
 800c23e:	bf00      	nop
 800c240:	2400001c 	.word	0x2400001c
 800c244:	ffff0208 	.word	0xffff0208

0800c248 <memset>:
 800c248:	4402      	add	r2, r0
 800c24a:	4603      	mov	r3, r0
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d100      	bne.n	800c252 <memset+0xa>
 800c250:	4770      	bx	lr
 800c252:	f803 1b01 	strb.w	r1, [r3], #1
 800c256:	e7f9      	b.n	800c24c <memset+0x4>

0800c258 <__errno>:
 800c258:	4b01      	ldr	r3, [pc, #4]	@ (800c260 <__errno+0x8>)
 800c25a:	6818      	ldr	r0, [r3, #0]
 800c25c:	4770      	bx	lr
 800c25e:	bf00      	nop
 800c260:	2400001c 	.word	0x2400001c

0800c264 <__libc_init_array>:
 800c264:	b570      	push	{r4, r5, r6, lr}
 800c266:	4d0d      	ldr	r5, [pc, #52]	@ (800c29c <__libc_init_array+0x38>)
 800c268:	4c0d      	ldr	r4, [pc, #52]	@ (800c2a0 <__libc_init_array+0x3c>)
 800c26a:	1b64      	subs	r4, r4, r5
 800c26c:	10a4      	asrs	r4, r4, #2
 800c26e:	2600      	movs	r6, #0
 800c270:	42a6      	cmp	r6, r4
 800c272:	d109      	bne.n	800c288 <__libc_init_array+0x24>
 800c274:	4d0b      	ldr	r5, [pc, #44]	@ (800c2a4 <__libc_init_array+0x40>)
 800c276:	4c0c      	ldr	r4, [pc, #48]	@ (800c2a8 <__libc_init_array+0x44>)
 800c278:	f000 fc64 	bl	800cb44 <_init>
 800c27c:	1b64      	subs	r4, r4, r5
 800c27e:	10a4      	asrs	r4, r4, #2
 800c280:	2600      	movs	r6, #0
 800c282:	42a6      	cmp	r6, r4
 800c284:	d105      	bne.n	800c292 <__libc_init_array+0x2e>
 800c286:	bd70      	pop	{r4, r5, r6, pc}
 800c288:	f855 3b04 	ldr.w	r3, [r5], #4
 800c28c:	4798      	blx	r3
 800c28e:	3601      	adds	r6, #1
 800c290:	e7ee      	b.n	800c270 <__libc_init_array+0xc>
 800c292:	f855 3b04 	ldr.w	r3, [r5], #4
 800c296:	4798      	blx	r3
 800c298:	3601      	adds	r6, #1
 800c29a:	e7f2      	b.n	800c282 <__libc_init_array+0x1e>
 800c29c:	0800cffc 	.word	0x0800cffc
 800c2a0:	0800cffc 	.word	0x0800cffc
 800c2a4:	0800cffc 	.word	0x0800cffc
 800c2a8:	0800d004 	.word	0x0800d004

0800c2ac <__retarget_lock_acquire_recursive>:
 800c2ac:	4770      	bx	lr

0800c2ae <__retarget_lock_release_recursive>:
 800c2ae:	4770      	bx	lr

0800c2b0 <memcpy>:
 800c2b0:	440a      	add	r2, r1
 800c2b2:	4291      	cmp	r1, r2
 800c2b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2b8:	d100      	bne.n	800c2bc <memcpy+0xc>
 800c2ba:	4770      	bx	lr
 800c2bc:	b510      	push	{r4, lr}
 800c2be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2c6:	4291      	cmp	r1, r2
 800c2c8:	d1f9      	bne.n	800c2be <memcpy+0xe>
 800c2ca:	bd10      	pop	{r4, pc}

0800c2cc <_free_r>:
 800c2cc:	b538      	push	{r3, r4, r5, lr}
 800c2ce:	4605      	mov	r5, r0
 800c2d0:	2900      	cmp	r1, #0
 800c2d2:	d041      	beq.n	800c358 <_free_r+0x8c>
 800c2d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2d8:	1f0c      	subs	r4, r1, #4
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	bfb8      	it	lt
 800c2de:	18e4      	addlt	r4, r4, r3
 800c2e0:	f000 f8e0 	bl	800c4a4 <__malloc_lock>
 800c2e4:	4a1d      	ldr	r2, [pc, #116]	@ (800c35c <_free_r+0x90>)
 800c2e6:	6813      	ldr	r3, [r2, #0]
 800c2e8:	b933      	cbnz	r3, 800c2f8 <_free_r+0x2c>
 800c2ea:	6063      	str	r3, [r4, #4]
 800c2ec:	6014      	str	r4, [r2, #0]
 800c2ee:	4628      	mov	r0, r5
 800c2f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2f4:	f000 b8dc 	b.w	800c4b0 <__malloc_unlock>
 800c2f8:	42a3      	cmp	r3, r4
 800c2fa:	d908      	bls.n	800c30e <_free_r+0x42>
 800c2fc:	6820      	ldr	r0, [r4, #0]
 800c2fe:	1821      	adds	r1, r4, r0
 800c300:	428b      	cmp	r3, r1
 800c302:	bf01      	itttt	eq
 800c304:	6819      	ldreq	r1, [r3, #0]
 800c306:	685b      	ldreq	r3, [r3, #4]
 800c308:	1809      	addeq	r1, r1, r0
 800c30a:	6021      	streq	r1, [r4, #0]
 800c30c:	e7ed      	b.n	800c2ea <_free_r+0x1e>
 800c30e:	461a      	mov	r2, r3
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	b10b      	cbz	r3, 800c318 <_free_r+0x4c>
 800c314:	42a3      	cmp	r3, r4
 800c316:	d9fa      	bls.n	800c30e <_free_r+0x42>
 800c318:	6811      	ldr	r1, [r2, #0]
 800c31a:	1850      	adds	r0, r2, r1
 800c31c:	42a0      	cmp	r0, r4
 800c31e:	d10b      	bne.n	800c338 <_free_r+0x6c>
 800c320:	6820      	ldr	r0, [r4, #0]
 800c322:	4401      	add	r1, r0
 800c324:	1850      	adds	r0, r2, r1
 800c326:	4283      	cmp	r3, r0
 800c328:	6011      	str	r1, [r2, #0]
 800c32a:	d1e0      	bne.n	800c2ee <_free_r+0x22>
 800c32c:	6818      	ldr	r0, [r3, #0]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	6053      	str	r3, [r2, #4]
 800c332:	4408      	add	r0, r1
 800c334:	6010      	str	r0, [r2, #0]
 800c336:	e7da      	b.n	800c2ee <_free_r+0x22>
 800c338:	d902      	bls.n	800c340 <_free_r+0x74>
 800c33a:	230c      	movs	r3, #12
 800c33c:	602b      	str	r3, [r5, #0]
 800c33e:	e7d6      	b.n	800c2ee <_free_r+0x22>
 800c340:	6820      	ldr	r0, [r4, #0]
 800c342:	1821      	adds	r1, r4, r0
 800c344:	428b      	cmp	r3, r1
 800c346:	bf04      	itt	eq
 800c348:	6819      	ldreq	r1, [r3, #0]
 800c34a:	685b      	ldreq	r3, [r3, #4]
 800c34c:	6063      	str	r3, [r4, #4]
 800c34e:	bf04      	itt	eq
 800c350:	1809      	addeq	r1, r1, r0
 800c352:	6021      	streq	r1, [r4, #0]
 800c354:	6054      	str	r4, [r2, #4]
 800c356:	e7ca      	b.n	800c2ee <_free_r+0x22>
 800c358:	bd38      	pop	{r3, r4, r5, pc}
 800c35a:	bf00      	nop
 800c35c:	24000e98 	.word	0x24000e98

0800c360 <sbrk_aligned>:
 800c360:	b570      	push	{r4, r5, r6, lr}
 800c362:	4e0f      	ldr	r6, [pc, #60]	@ (800c3a0 <sbrk_aligned+0x40>)
 800c364:	460c      	mov	r4, r1
 800c366:	6831      	ldr	r1, [r6, #0]
 800c368:	4605      	mov	r5, r0
 800c36a:	b911      	cbnz	r1, 800c372 <sbrk_aligned+0x12>
 800c36c:	f000 fba4 	bl	800cab8 <_sbrk_r>
 800c370:	6030      	str	r0, [r6, #0]
 800c372:	4621      	mov	r1, r4
 800c374:	4628      	mov	r0, r5
 800c376:	f000 fb9f 	bl	800cab8 <_sbrk_r>
 800c37a:	1c43      	adds	r3, r0, #1
 800c37c:	d103      	bne.n	800c386 <sbrk_aligned+0x26>
 800c37e:	f04f 34ff 	mov.w	r4, #4294967295
 800c382:	4620      	mov	r0, r4
 800c384:	bd70      	pop	{r4, r5, r6, pc}
 800c386:	1cc4      	adds	r4, r0, #3
 800c388:	f024 0403 	bic.w	r4, r4, #3
 800c38c:	42a0      	cmp	r0, r4
 800c38e:	d0f8      	beq.n	800c382 <sbrk_aligned+0x22>
 800c390:	1a21      	subs	r1, r4, r0
 800c392:	4628      	mov	r0, r5
 800c394:	f000 fb90 	bl	800cab8 <_sbrk_r>
 800c398:	3001      	adds	r0, #1
 800c39a:	d1f2      	bne.n	800c382 <sbrk_aligned+0x22>
 800c39c:	e7ef      	b.n	800c37e <sbrk_aligned+0x1e>
 800c39e:	bf00      	nop
 800c3a0:	24000e94 	.word	0x24000e94

0800c3a4 <_malloc_r>:
 800c3a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3a8:	1ccd      	adds	r5, r1, #3
 800c3aa:	f025 0503 	bic.w	r5, r5, #3
 800c3ae:	3508      	adds	r5, #8
 800c3b0:	2d0c      	cmp	r5, #12
 800c3b2:	bf38      	it	cc
 800c3b4:	250c      	movcc	r5, #12
 800c3b6:	2d00      	cmp	r5, #0
 800c3b8:	4606      	mov	r6, r0
 800c3ba:	db01      	blt.n	800c3c0 <_malloc_r+0x1c>
 800c3bc:	42a9      	cmp	r1, r5
 800c3be:	d904      	bls.n	800c3ca <_malloc_r+0x26>
 800c3c0:	230c      	movs	r3, #12
 800c3c2:	6033      	str	r3, [r6, #0]
 800c3c4:	2000      	movs	r0, #0
 800c3c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c4a0 <_malloc_r+0xfc>
 800c3ce:	f000 f869 	bl	800c4a4 <__malloc_lock>
 800c3d2:	f8d8 3000 	ldr.w	r3, [r8]
 800c3d6:	461c      	mov	r4, r3
 800c3d8:	bb44      	cbnz	r4, 800c42c <_malloc_r+0x88>
 800c3da:	4629      	mov	r1, r5
 800c3dc:	4630      	mov	r0, r6
 800c3de:	f7ff ffbf 	bl	800c360 <sbrk_aligned>
 800c3e2:	1c43      	adds	r3, r0, #1
 800c3e4:	4604      	mov	r4, r0
 800c3e6:	d158      	bne.n	800c49a <_malloc_r+0xf6>
 800c3e8:	f8d8 4000 	ldr.w	r4, [r8]
 800c3ec:	4627      	mov	r7, r4
 800c3ee:	2f00      	cmp	r7, #0
 800c3f0:	d143      	bne.n	800c47a <_malloc_r+0xd6>
 800c3f2:	2c00      	cmp	r4, #0
 800c3f4:	d04b      	beq.n	800c48e <_malloc_r+0xea>
 800c3f6:	6823      	ldr	r3, [r4, #0]
 800c3f8:	4639      	mov	r1, r7
 800c3fa:	4630      	mov	r0, r6
 800c3fc:	eb04 0903 	add.w	r9, r4, r3
 800c400:	f000 fb5a 	bl	800cab8 <_sbrk_r>
 800c404:	4581      	cmp	r9, r0
 800c406:	d142      	bne.n	800c48e <_malloc_r+0xea>
 800c408:	6821      	ldr	r1, [r4, #0]
 800c40a:	1a6d      	subs	r5, r5, r1
 800c40c:	4629      	mov	r1, r5
 800c40e:	4630      	mov	r0, r6
 800c410:	f7ff ffa6 	bl	800c360 <sbrk_aligned>
 800c414:	3001      	adds	r0, #1
 800c416:	d03a      	beq.n	800c48e <_malloc_r+0xea>
 800c418:	6823      	ldr	r3, [r4, #0]
 800c41a:	442b      	add	r3, r5
 800c41c:	6023      	str	r3, [r4, #0]
 800c41e:	f8d8 3000 	ldr.w	r3, [r8]
 800c422:	685a      	ldr	r2, [r3, #4]
 800c424:	bb62      	cbnz	r2, 800c480 <_malloc_r+0xdc>
 800c426:	f8c8 7000 	str.w	r7, [r8]
 800c42a:	e00f      	b.n	800c44c <_malloc_r+0xa8>
 800c42c:	6822      	ldr	r2, [r4, #0]
 800c42e:	1b52      	subs	r2, r2, r5
 800c430:	d420      	bmi.n	800c474 <_malloc_r+0xd0>
 800c432:	2a0b      	cmp	r2, #11
 800c434:	d917      	bls.n	800c466 <_malloc_r+0xc2>
 800c436:	1961      	adds	r1, r4, r5
 800c438:	42a3      	cmp	r3, r4
 800c43a:	6025      	str	r5, [r4, #0]
 800c43c:	bf18      	it	ne
 800c43e:	6059      	strne	r1, [r3, #4]
 800c440:	6863      	ldr	r3, [r4, #4]
 800c442:	bf08      	it	eq
 800c444:	f8c8 1000 	streq.w	r1, [r8]
 800c448:	5162      	str	r2, [r4, r5]
 800c44a:	604b      	str	r3, [r1, #4]
 800c44c:	4630      	mov	r0, r6
 800c44e:	f000 f82f 	bl	800c4b0 <__malloc_unlock>
 800c452:	f104 000b 	add.w	r0, r4, #11
 800c456:	1d23      	adds	r3, r4, #4
 800c458:	f020 0007 	bic.w	r0, r0, #7
 800c45c:	1ac2      	subs	r2, r0, r3
 800c45e:	bf1c      	itt	ne
 800c460:	1a1b      	subne	r3, r3, r0
 800c462:	50a3      	strne	r3, [r4, r2]
 800c464:	e7af      	b.n	800c3c6 <_malloc_r+0x22>
 800c466:	6862      	ldr	r2, [r4, #4]
 800c468:	42a3      	cmp	r3, r4
 800c46a:	bf0c      	ite	eq
 800c46c:	f8c8 2000 	streq.w	r2, [r8]
 800c470:	605a      	strne	r2, [r3, #4]
 800c472:	e7eb      	b.n	800c44c <_malloc_r+0xa8>
 800c474:	4623      	mov	r3, r4
 800c476:	6864      	ldr	r4, [r4, #4]
 800c478:	e7ae      	b.n	800c3d8 <_malloc_r+0x34>
 800c47a:	463c      	mov	r4, r7
 800c47c:	687f      	ldr	r7, [r7, #4]
 800c47e:	e7b6      	b.n	800c3ee <_malloc_r+0x4a>
 800c480:	461a      	mov	r2, r3
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	42a3      	cmp	r3, r4
 800c486:	d1fb      	bne.n	800c480 <_malloc_r+0xdc>
 800c488:	2300      	movs	r3, #0
 800c48a:	6053      	str	r3, [r2, #4]
 800c48c:	e7de      	b.n	800c44c <_malloc_r+0xa8>
 800c48e:	230c      	movs	r3, #12
 800c490:	6033      	str	r3, [r6, #0]
 800c492:	4630      	mov	r0, r6
 800c494:	f000 f80c 	bl	800c4b0 <__malloc_unlock>
 800c498:	e794      	b.n	800c3c4 <_malloc_r+0x20>
 800c49a:	6005      	str	r5, [r0, #0]
 800c49c:	e7d6      	b.n	800c44c <_malloc_r+0xa8>
 800c49e:	bf00      	nop
 800c4a0:	24000e98 	.word	0x24000e98

0800c4a4 <__malloc_lock>:
 800c4a4:	4801      	ldr	r0, [pc, #4]	@ (800c4ac <__malloc_lock+0x8>)
 800c4a6:	f7ff bf01 	b.w	800c2ac <__retarget_lock_acquire_recursive>
 800c4aa:	bf00      	nop
 800c4ac:	24000e90 	.word	0x24000e90

0800c4b0 <__malloc_unlock>:
 800c4b0:	4801      	ldr	r0, [pc, #4]	@ (800c4b8 <__malloc_unlock+0x8>)
 800c4b2:	f7ff befc 	b.w	800c2ae <__retarget_lock_release_recursive>
 800c4b6:	bf00      	nop
 800c4b8:	24000e90 	.word	0x24000e90

0800c4bc <__ssputs_r>:
 800c4bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4c0:	688e      	ldr	r6, [r1, #8]
 800c4c2:	461f      	mov	r7, r3
 800c4c4:	42be      	cmp	r6, r7
 800c4c6:	680b      	ldr	r3, [r1, #0]
 800c4c8:	4682      	mov	sl, r0
 800c4ca:	460c      	mov	r4, r1
 800c4cc:	4690      	mov	r8, r2
 800c4ce:	d82d      	bhi.n	800c52c <__ssputs_r+0x70>
 800c4d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c4d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c4d8:	d026      	beq.n	800c528 <__ssputs_r+0x6c>
 800c4da:	6965      	ldr	r5, [r4, #20]
 800c4dc:	6909      	ldr	r1, [r1, #16]
 800c4de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4e2:	eba3 0901 	sub.w	r9, r3, r1
 800c4e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c4ea:	1c7b      	adds	r3, r7, #1
 800c4ec:	444b      	add	r3, r9
 800c4ee:	106d      	asrs	r5, r5, #1
 800c4f0:	429d      	cmp	r5, r3
 800c4f2:	bf38      	it	cc
 800c4f4:	461d      	movcc	r5, r3
 800c4f6:	0553      	lsls	r3, r2, #21
 800c4f8:	d527      	bpl.n	800c54a <__ssputs_r+0x8e>
 800c4fa:	4629      	mov	r1, r5
 800c4fc:	f7ff ff52 	bl	800c3a4 <_malloc_r>
 800c500:	4606      	mov	r6, r0
 800c502:	b360      	cbz	r0, 800c55e <__ssputs_r+0xa2>
 800c504:	6921      	ldr	r1, [r4, #16]
 800c506:	464a      	mov	r2, r9
 800c508:	f7ff fed2 	bl	800c2b0 <memcpy>
 800c50c:	89a3      	ldrh	r3, [r4, #12]
 800c50e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c516:	81a3      	strh	r3, [r4, #12]
 800c518:	6126      	str	r6, [r4, #16]
 800c51a:	6165      	str	r5, [r4, #20]
 800c51c:	444e      	add	r6, r9
 800c51e:	eba5 0509 	sub.w	r5, r5, r9
 800c522:	6026      	str	r6, [r4, #0]
 800c524:	60a5      	str	r5, [r4, #8]
 800c526:	463e      	mov	r6, r7
 800c528:	42be      	cmp	r6, r7
 800c52a:	d900      	bls.n	800c52e <__ssputs_r+0x72>
 800c52c:	463e      	mov	r6, r7
 800c52e:	6820      	ldr	r0, [r4, #0]
 800c530:	4632      	mov	r2, r6
 800c532:	4641      	mov	r1, r8
 800c534:	f000 faa6 	bl	800ca84 <memmove>
 800c538:	68a3      	ldr	r3, [r4, #8]
 800c53a:	1b9b      	subs	r3, r3, r6
 800c53c:	60a3      	str	r3, [r4, #8]
 800c53e:	6823      	ldr	r3, [r4, #0]
 800c540:	4433      	add	r3, r6
 800c542:	6023      	str	r3, [r4, #0]
 800c544:	2000      	movs	r0, #0
 800c546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c54a:	462a      	mov	r2, r5
 800c54c:	f000 fac4 	bl	800cad8 <_realloc_r>
 800c550:	4606      	mov	r6, r0
 800c552:	2800      	cmp	r0, #0
 800c554:	d1e0      	bne.n	800c518 <__ssputs_r+0x5c>
 800c556:	6921      	ldr	r1, [r4, #16]
 800c558:	4650      	mov	r0, sl
 800c55a:	f7ff feb7 	bl	800c2cc <_free_r>
 800c55e:	230c      	movs	r3, #12
 800c560:	f8ca 3000 	str.w	r3, [sl]
 800c564:	89a3      	ldrh	r3, [r4, #12]
 800c566:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c56a:	81a3      	strh	r3, [r4, #12]
 800c56c:	f04f 30ff 	mov.w	r0, #4294967295
 800c570:	e7e9      	b.n	800c546 <__ssputs_r+0x8a>
	...

0800c574 <_svfiprintf_r>:
 800c574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c578:	4698      	mov	r8, r3
 800c57a:	898b      	ldrh	r3, [r1, #12]
 800c57c:	061b      	lsls	r3, r3, #24
 800c57e:	b09d      	sub	sp, #116	@ 0x74
 800c580:	4607      	mov	r7, r0
 800c582:	460d      	mov	r5, r1
 800c584:	4614      	mov	r4, r2
 800c586:	d510      	bpl.n	800c5aa <_svfiprintf_r+0x36>
 800c588:	690b      	ldr	r3, [r1, #16]
 800c58a:	b973      	cbnz	r3, 800c5aa <_svfiprintf_r+0x36>
 800c58c:	2140      	movs	r1, #64	@ 0x40
 800c58e:	f7ff ff09 	bl	800c3a4 <_malloc_r>
 800c592:	6028      	str	r0, [r5, #0]
 800c594:	6128      	str	r0, [r5, #16]
 800c596:	b930      	cbnz	r0, 800c5a6 <_svfiprintf_r+0x32>
 800c598:	230c      	movs	r3, #12
 800c59a:	603b      	str	r3, [r7, #0]
 800c59c:	f04f 30ff 	mov.w	r0, #4294967295
 800c5a0:	b01d      	add	sp, #116	@ 0x74
 800c5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5a6:	2340      	movs	r3, #64	@ 0x40
 800c5a8:	616b      	str	r3, [r5, #20]
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5ae:	2320      	movs	r3, #32
 800c5b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c5b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5b8:	2330      	movs	r3, #48	@ 0x30
 800c5ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c758 <_svfiprintf_r+0x1e4>
 800c5be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c5c2:	f04f 0901 	mov.w	r9, #1
 800c5c6:	4623      	mov	r3, r4
 800c5c8:	469a      	mov	sl, r3
 800c5ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5ce:	b10a      	cbz	r2, 800c5d4 <_svfiprintf_r+0x60>
 800c5d0:	2a25      	cmp	r2, #37	@ 0x25
 800c5d2:	d1f9      	bne.n	800c5c8 <_svfiprintf_r+0x54>
 800c5d4:	ebba 0b04 	subs.w	fp, sl, r4
 800c5d8:	d00b      	beq.n	800c5f2 <_svfiprintf_r+0x7e>
 800c5da:	465b      	mov	r3, fp
 800c5dc:	4622      	mov	r2, r4
 800c5de:	4629      	mov	r1, r5
 800c5e0:	4638      	mov	r0, r7
 800c5e2:	f7ff ff6b 	bl	800c4bc <__ssputs_r>
 800c5e6:	3001      	adds	r0, #1
 800c5e8:	f000 80a7 	beq.w	800c73a <_svfiprintf_r+0x1c6>
 800c5ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5ee:	445a      	add	r2, fp
 800c5f0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c5f2:	f89a 3000 	ldrb.w	r3, [sl]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	f000 809f 	beq.w	800c73a <_svfiprintf_r+0x1c6>
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c606:	f10a 0a01 	add.w	sl, sl, #1
 800c60a:	9304      	str	r3, [sp, #16]
 800c60c:	9307      	str	r3, [sp, #28]
 800c60e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c612:	931a      	str	r3, [sp, #104]	@ 0x68
 800c614:	4654      	mov	r4, sl
 800c616:	2205      	movs	r2, #5
 800c618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c61c:	484e      	ldr	r0, [pc, #312]	@ (800c758 <_svfiprintf_r+0x1e4>)
 800c61e:	f7f3 fe7f 	bl	8000320 <memchr>
 800c622:	9a04      	ldr	r2, [sp, #16]
 800c624:	b9d8      	cbnz	r0, 800c65e <_svfiprintf_r+0xea>
 800c626:	06d0      	lsls	r0, r2, #27
 800c628:	bf44      	itt	mi
 800c62a:	2320      	movmi	r3, #32
 800c62c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c630:	0711      	lsls	r1, r2, #28
 800c632:	bf44      	itt	mi
 800c634:	232b      	movmi	r3, #43	@ 0x2b
 800c636:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c63a:	f89a 3000 	ldrb.w	r3, [sl]
 800c63e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c640:	d015      	beq.n	800c66e <_svfiprintf_r+0xfa>
 800c642:	9a07      	ldr	r2, [sp, #28]
 800c644:	4654      	mov	r4, sl
 800c646:	2000      	movs	r0, #0
 800c648:	f04f 0c0a 	mov.w	ip, #10
 800c64c:	4621      	mov	r1, r4
 800c64e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c652:	3b30      	subs	r3, #48	@ 0x30
 800c654:	2b09      	cmp	r3, #9
 800c656:	d94b      	bls.n	800c6f0 <_svfiprintf_r+0x17c>
 800c658:	b1b0      	cbz	r0, 800c688 <_svfiprintf_r+0x114>
 800c65a:	9207      	str	r2, [sp, #28]
 800c65c:	e014      	b.n	800c688 <_svfiprintf_r+0x114>
 800c65e:	eba0 0308 	sub.w	r3, r0, r8
 800c662:	fa09 f303 	lsl.w	r3, r9, r3
 800c666:	4313      	orrs	r3, r2
 800c668:	9304      	str	r3, [sp, #16]
 800c66a:	46a2      	mov	sl, r4
 800c66c:	e7d2      	b.n	800c614 <_svfiprintf_r+0xa0>
 800c66e:	9b03      	ldr	r3, [sp, #12]
 800c670:	1d19      	adds	r1, r3, #4
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	9103      	str	r1, [sp, #12]
 800c676:	2b00      	cmp	r3, #0
 800c678:	bfbb      	ittet	lt
 800c67a:	425b      	neglt	r3, r3
 800c67c:	f042 0202 	orrlt.w	r2, r2, #2
 800c680:	9307      	strge	r3, [sp, #28]
 800c682:	9307      	strlt	r3, [sp, #28]
 800c684:	bfb8      	it	lt
 800c686:	9204      	strlt	r2, [sp, #16]
 800c688:	7823      	ldrb	r3, [r4, #0]
 800c68a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c68c:	d10a      	bne.n	800c6a4 <_svfiprintf_r+0x130>
 800c68e:	7863      	ldrb	r3, [r4, #1]
 800c690:	2b2a      	cmp	r3, #42	@ 0x2a
 800c692:	d132      	bne.n	800c6fa <_svfiprintf_r+0x186>
 800c694:	9b03      	ldr	r3, [sp, #12]
 800c696:	1d1a      	adds	r2, r3, #4
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	9203      	str	r2, [sp, #12]
 800c69c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c6a0:	3402      	adds	r4, #2
 800c6a2:	9305      	str	r3, [sp, #20]
 800c6a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c768 <_svfiprintf_r+0x1f4>
 800c6a8:	7821      	ldrb	r1, [r4, #0]
 800c6aa:	2203      	movs	r2, #3
 800c6ac:	4650      	mov	r0, sl
 800c6ae:	f7f3 fe37 	bl	8000320 <memchr>
 800c6b2:	b138      	cbz	r0, 800c6c4 <_svfiprintf_r+0x150>
 800c6b4:	9b04      	ldr	r3, [sp, #16]
 800c6b6:	eba0 000a 	sub.w	r0, r0, sl
 800c6ba:	2240      	movs	r2, #64	@ 0x40
 800c6bc:	4082      	lsls	r2, r0
 800c6be:	4313      	orrs	r3, r2
 800c6c0:	3401      	adds	r4, #1
 800c6c2:	9304      	str	r3, [sp, #16]
 800c6c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6c8:	4824      	ldr	r0, [pc, #144]	@ (800c75c <_svfiprintf_r+0x1e8>)
 800c6ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c6ce:	2206      	movs	r2, #6
 800c6d0:	f7f3 fe26 	bl	8000320 <memchr>
 800c6d4:	2800      	cmp	r0, #0
 800c6d6:	d036      	beq.n	800c746 <_svfiprintf_r+0x1d2>
 800c6d8:	4b21      	ldr	r3, [pc, #132]	@ (800c760 <_svfiprintf_r+0x1ec>)
 800c6da:	bb1b      	cbnz	r3, 800c724 <_svfiprintf_r+0x1b0>
 800c6dc:	9b03      	ldr	r3, [sp, #12]
 800c6de:	3307      	adds	r3, #7
 800c6e0:	f023 0307 	bic.w	r3, r3, #7
 800c6e4:	3308      	adds	r3, #8
 800c6e6:	9303      	str	r3, [sp, #12]
 800c6e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6ea:	4433      	add	r3, r6
 800c6ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6ee:	e76a      	b.n	800c5c6 <_svfiprintf_r+0x52>
 800c6f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6f4:	460c      	mov	r4, r1
 800c6f6:	2001      	movs	r0, #1
 800c6f8:	e7a8      	b.n	800c64c <_svfiprintf_r+0xd8>
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	3401      	adds	r4, #1
 800c6fe:	9305      	str	r3, [sp, #20]
 800c700:	4619      	mov	r1, r3
 800c702:	f04f 0c0a 	mov.w	ip, #10
 800c706:	4620      	mov	r0, r4
 800c708:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c70c:	3a30      	subs	r2, #48	@ 0x30
 800c70e:	2a09      	cmp	r2, #9
 800c710:	d903      	bls.n	800c71a <_svfiprintf_r+0x1a6>
 800c712:	2b00      	cmp	r3, #0
 800c714:	d0c6      	beq.n	800c6a4 <_svfiprintf_r+0x130>
 800c716:	9105      	str	r1, [sp, #20]
 800c718:	e7c4      	b.n	800c6a4 <_svfiprintf_r+0x130>
 800c71a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c71e:	4604      	mov	r4, r0
 800c720:	2301      	movs	r3, #1
 800c722:	e7f0      	b.n	800c706 <_svfiprintf_r+0x192>
 800c724:	ab03      	add	r3, sp, #12
 800c726:	9300      	str	r3, [sp, #0]
 800c728:	462a      	mov	r2, r5
 800c72a:	4b0e      	ldr	r3, [pc, #56]	@ (800c764 <_svfiprintf_r+0x1f0>)
 800c72c:	a904      	add	r1, sp, #16
 800c72e:	4638      	mov	r0, r7
 800c730:	f3af 8000 	nop.w
 800c734:	1c42      	adds	r2, r0, #1
 800c736:	4606      	mov	r6, r0
 800c738:	d1d6      	bne.n	800c6e8 <_svfiprintf_r+0x174>
 800c73a:	89ab      	ldrh	r3, [r5, #12]
 800c73c:	065b      	lsls	r3, r3, #25
 800c73e:	f53f af2d 	bmi.w	800c59c <_svfiprintf_r+0x28>
 800c742:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c744:	e72c      	b.n	800c5a0 <_svfiprintf_r+0x2c>
 800c746:	ab03      	add	r3, sp, #12
 800c748:	9300      	str	r3, [sp, #0]
 800c74a:	462a      	mov	r2, r5
 800c74c:	4b05      	ldr	r3, [pc, #20]	@ (800c764 <_svfiprintf_r+0x1f0>)
 800c74e:	a904      	add	r1, sp, #16
 800c750:	4638      	mov	r0, r7
 800c752:	f000 f879 	bl	800c848 <_printf_i>
 800c756:	e7ed      	b.n	800c734 <_svfiprintf_r+0x1c0>
 800c758:	0800cfc0 	.word	0x0800cfc0
 800c75c:	0800cfca 	.word	0x0800cfca
 800c760:	00000000 	.word	0x00000000
 800c764:	0800c4bd 	.word	0x0800c4bd
 800c768:	0800cfc6 	.word	0x0800cfc6

0800c76c <_printf_common>:
 800c76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c770:	4616      	mov	r6, r2
 800c772:	4698      	mov	r8, r3
 800c774:	688a      	ldr	r2, [r1, #8]
 800c776:	690b      	ldr	r3, [r1, #16]
 800c778:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c77c:	4293      	cmp	r3, r2
 800c77e:	bfb8      	it	lt
 800c780:	4613      	movlt	r3, r2
 800c782:	6033      	str	r3, [r6, #0]
 800c784:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c788:	4607      	mov	r7, r0
 800c78a:	460c      	mov	r4, r1
 800c78c:	b10a      	cbz	r2, 800c792 <_printf_common+0x26>
 800c78e:	3301      	adds	r3, #1
 800c790:	6033      	str	r3, [r6, #0]
 800c792:	6823      	ldr	r3, [r4, #0]
 800c794:	0699      	lsls	r1, r3, #26
 800c796:	bf42      	ittt	mi
 800c798:	6833      	ldrmi	r3, [r6, #0]
 800c79a:	3302      	addmi	r3, #2
 800c79c:	6033      	strmi	r3, [r6, #0]
 800c79e:	6825      	ldr	r5, [r4, #0]
 800c7a0:	f015 0506 	ands.w	r5, r5, #6
 800c7a4:	d106      	bne.n	800c7b4 <_printf_common+0x48>
 800c7a6:	f104 0a19 	add.w	sl, r4, #25
 800c7aa:	68e3      	ldr	r3, [r4, #12]
 800c7ac:	6832      	ldr	r2, [r6, #0]
 800c7ae:	1a9b      	subs	r3, r3, r2
 800c7b0:	42ab      	cmp	r3, r5
 800c7b2:	dc26      	bgt.n	800c802 <_printf_common+0x96>
 800c7b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c7b8:	6822      	ldr	r2, [r4, #0]
 800c7ba:	3b00      	subs	r3, #0
 800c7bc:	bf18      	it	ne
 800c7be:	2301      	movne	r3, #1
 800c7c0:	0692      	lsls	r2, r2, #26
 800c7c2:	d42b      	bmi.n	800c81c <_printf_common+0xb0>
 800c7c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c7c8:	4641      	mov	r1, r8
 800c7ca:	4638      	mov	r0, r7
 800c7cc:	47c8      	blx	r9
 800c7ce:	3001      	adds	r0, #1
 800c7d0:	d01e      	beq.n	800c810 <_printf_common+0xa4>
 800c7d2:	6823      	ldr	r3, [r4, #0]
 800c7d4:	6922      	ldr	r2, [r4, #16]
 800c7d6:	f003 0306 	and.w	r3, r3, #6
 800c7da:	2b04      	cmp	r3, #4
 800c7dc:	bf02      	ittt	eq
 800c7de:	68e5      	ldreq	r5, [r4, #12]
 800c7e0:	6833      	ldreq	r3, [r6, #0]
 800c7e2:	1aed      	subeq	r5, r5, r3
 800c7e4:	68a3      	ldr	r3, [r4, #8]
 800c7e6:	bf0c      	ite	eq
 800c7e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c7ec:	2500      	movne	r5, #0
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	bfc4      	itt	gt
 800c7f2:	1a9b      	subgt	r3, r3, r2
 800c7f4:	18ed      	addgt	r5, r5, r3
 800c7f6:	2600      	movs	r6, #0
 800c7f8:	341a      	adds	r4, #26
 800c7fa:	42b5      	cmp	r5, r6
 800c7fc:	d11a      	bne.n	800c834 <_printf_common+0xc8>
 800c7fe:	2000      	movs	r0, #0
 800c800:	e008      	b.n	800c814 <_printf_common+0xa8>
 800c802:	2301      	movs	r3, #1
 800c804:	4652      	mov	r2, sl
 800c806:	4641      	mov	r1, r8
 800c808:	4638      	mov	r0, r7
 800c80a:	47c8      	blx	r9
 800c80c:	3001      	adds	r0, #1
 800c80e:	d103      	bne.n	800c818 <_printf_common+0xac>
 800c810:	f04f 30ff 	mov.w	r0, #4294967295
 800c814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c818:	3501      	adds	r5, #1
 800c81a:	e7c6      	b.n	800c7aa <_printf_common+0x3e>
 800c81c:	18e1      	adds	r1, r4, r3
 800c81e:	1c5a      	adds	r2, r3, #1
 800c820:	2030      	movs	r0, #48	@ 0x30
 800c822:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c826:	4422      	add	r2, r4
 800c828:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c82c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c830:	3302      	adds	r3, #2
 800c832:	e7c7      	b.n	800c7c4 <_printf_common+0x58>
 800c834:	2301      	movs	r3, #1
 800c836:	4622      	mov	r2, r4
 800c838:	4641      	mov	r1, r8
 800c83a:	4638      	mov	r0, r7
 800c83c:	47c8      	blx	r9
 800c83e:	3001      	adds	r0, #1
 800c840:	d0e6      	beq.n	800c810 <_printf_common+0xa4>
 800c842:	3601      	adds	r6, #1
 800c844:	e7d9      	b.n	800c7fa <_printf_common+0x8e>
	...

0800c848 <_printf_i>:
 800c848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c84c:	7e0f      	ldrb	r7, [r1, #24]
 800c84e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c850:	2f78      	cmp	r7, #120	@ 0x78
 800c852:	4691      	mov	r9, r2
 800c854:	4680      	mov	r8, r0
 800c856:	460c      	mov	r4, r1
 800c858:	469a      	mov	sl, r3
 800c85a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c85e:	d807      	bhi.n	800c870 <_printf_i+0x28>
 800c860:	2f62      	cmp	r7, #98	@ 0x62
 800c862:	d80a      	bhi.n	800c87a <_printf_i+0x32>
 800c864:	2f00      	cmp	r7, #0
 800c866:	f000 80d1 	beq.w	800ca0c <_printf_i+0x1c4>
 800c86a:	2f58      	cmp	r7, #88	@ 0x58
 800c86c:	f000 80b8 	beq.w	800c9e0 <_printf_i+0x198>
 800c870:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c874:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c878:	e03a      	b.n	800c8f0 <_printf_i+0xa8>
 800c87a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c87e:	2b15      	cmp	r3, #21
 800c880:	d8f6      	bhi.n	800c870 <_printf_i+0x28>
 800c882:	a101      	add	r1, pc, #4	@ (adr r1, 800c888 <_printf_i+0x40>)
 800c884:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c888:	0800c8e1 	.word	0x0800c8e1
 800c88c:	0800c8f5 	.word	0x0800c8f5
 800c890:	0800c871 	.word	0x0800c871
 800c894:	0800c871 	.word	0x0800c871
 800c898:	0800c871 	.word	0x0800c871
 800c89c:	0800c871 	.word	0x0800c871
 800c8a0:	0800c8f5 	.word	0x0800c8f5
 800c8a4:	0800c871 	.word	0x0800c871
 800c8a8:	0800c871 	.word	0x0800c871
 800c8ac:	0800c871 	.word	0x0800c871
 800c8b0:	0800c871 	.word	0x0800c871
 800c8b4:	0800c9f3 	.word	0x0800c9f3
 800c8b8:	0800c91f 	.word	0x0800c91f
 800c8bc:	0800c9ad 	.word	0x0800c9ad
 800c8c0:	0800c871 	.word	0x0800c871
 800c8c4:	0800c871 	.word	0x0800c871
 800c8c8:	0800ca15 	.word	0x0800ca15
 800c8cc:	0800c871 	.word	0x0800c871
 800c8d0:	0800c91f 	.word	0x0800c91f
 800c8d4:	0800c871 	.word	0x0800c871
 800c8d8:	0800c871 	.word	0x0800c871
 800c8dc:	0800c9b5 	.word	0x0800c9b5
 800c8e0:	6833      	ldr	r3, [r6, #0]
 800c8e2:	1d1a      	adds	r2, r3, #4
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	6032      	str	r2, [r6, #0]
 800c8e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c8ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	e09c      	b.n	800ca2e <_printf_i+0x1e6>
 800c8f4:	6833      	ldr	r3, [r6, #0]
 800c8f6:	6820      	ldr	r0, [r4, #0]
 800c8f8:	1d19      	adds	r1, r3, #4
 800c8fa:	6031      	str	r1, [r6, #0]
 800c8fc:	0606      	lsls	r6, r0, #24
 800c8fe:	d501      	bpl.n	800c904 <_printf_i+0xbc>
 800c900:	681d      	ldr	r5, [r3, #0]
 800c902:	e003      	b.n	800c90c <_printf_i+0xc4>
 800c904:	0645      	lsls	r5, r0, #25
 800c906:	d5fb      	bpl.n	800c900 <_printf_i+0xb8>
 800c908:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c90c:	2d00      	cmp	r5, #0
 800c90e:	da03      	bge.n	800c918 <_printf_i+0xd0>
 800c910:	232d      	movs	r3, #45	@ 0x2d
 800c912:	426d      	negs	r5, r5
 800c914:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c918:	4858      	ldr	r0, [pc, #352]	@ (800ca7c <_printf_i+0x234>)
 800c91a:	230a      	movs	r3, #10
 800c91c:	e011      	b.n	800c942 <_printf_i+0xfa>
 800c91e:	6821      	ldr	r1, [r4, #0]
 800c920:	6833      	ldr	r3, [r6, #0]
 800c922:	0608      	lsls	r0, r1, #24
 800c924:	f853 5b04 	ldr.w	r5, [r3], #4
 800c928:	d402      	bmi.n	800c930 <_printf_i+0xe8>
 800c92a:	0649      	lsls	r1, r1, #25
 800c92c:	bf48      	it	mi
 800c92e:	b2ad      	uxthmi	r5, r5
 800c930:	2f6f      	cmp	r7, #111	@ 0x6f
 800c932:	4852      	ldr	r0, [pc, #328]	@ (800ca7c <_printf_i+0x234>)
 800c934:	6033      	str	r3, [r6, #0]
 800c936:	bf14      	ite	ne
 800c938:	230a      	movne	r3, #10
 800c93a:	2308      	moveq	r3, #8
 800c93c:	2100      	movs	r1, #0
 800c93e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c942:	6866      	ldr	r6, [r4, #4]
 800c944:	60a6      	str	r6, [r4, #8]
 800c946:	2e00      	cmp	r6, #0
 800c948:	db05      	blt.n	800c956 <_printf_i+0x10e>
 800c94a:	6821      	ldr	r1, [r4, #0]
 800c94c:	432e      	orrs	r6, r5
 800c94e:	f021 0104 	bic.w	r1, r1, #4
 800c952:	6021      	str	r1, [r4, #0]
 800c954:	d04b      	beq.n	800c9ee <_printf_i+0x1a6>
 800c956:	4616      	mov	r6, r2
 800c958:	fbb5 f1f3 	udiv	r1, r5, r3
 800c95c:	fb03 5711 	mls	r7, r3, r1, r5
 800c960:	5dc7      	ldrb	r7, [r0, r7]
 800c962:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c966:	462f      	mov	r7, r5
 800c968:	42bb      	cmp	r3, r7
 800c96a:	460d      	mov	r5, r1
 800c96c:	d9f4      	bls.n	800c958 <_printf_i+0x110>
 800c96e:	2b08      	cmp	r3, #8
 800c970:	d10b      	bne.n	800c98a <_printf_i+0x142>
 800c972:	6823      	ldr	r3, [r4, #0]
 800c974:	07df      	lsls	r7, r3, #31
 800c976:	d508      	bpl.n	800c98a <_printf_i+0x142>
 800c978:	6923      	ldr	r3, [r4, #16]
 800c97a:	6861      	ldr	r1, [r4, #4]
 800c97c:	4299      	cmp	r1, r3
 800c97e:	bfde      	ittt	le
 800c980:	2330      	movle	r3, #48	@ 0x30
 800c982:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c986:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c98a:	1b92      	subs	r2, r2, r6
 800c98c:	6122      	str	r2, [r4, #16]
 800c98e:	f8cd a000 	str.w	sl, [sp]
 800c992:	464b      	mov	r3, r9
 800c994:	aa03      	add	r2, sp, #12
 800c996:	4621      	mov	r1, r4
 800c998:	4640      	mov	r0, r8
 800c99a:	f7ff fee7 	bl	800c76c <_printf_common>
 800c99e:	3001      	adds	r0, #1
 800c9a0:	d14a      	bne.n	800ca38 <_printf_i+0x1f0>
 800c9a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c9a6:	b004      	add	sp, #16
 800c9a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9ac:	6823      	ldr	r3, [r4, #0]
 800c9ae:	f043 0320 	orr.w	r3, r3, #32
 800c9b2:	6023      	str	r3, [r4, #0]
 800c9b4:	4832      	ldr	r0, [pc, #200]	@ (800ca80 <_printf_i+0x238>)
 800c9b6:	2778      	movs	r7, #120	@ 0x78
 800c9b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c9bc:	6823      	ldr	r3, [r4, #0]
 800c9be:	6831      	ldr	r1, [r6, #0]
 800c9c0:	061f      	lsls	r7, r3, #24
 800c9c2:	f851 5b04 	ldr.w	r5, [r1], #4
 800c9c6:	d402      	bmi.n	800c9ce <_printf_i+0x186>
 800c9c8:	065f      	lsls	r7, r3, #25
 800c9ca:	bf48      	it	mi
 800c9cc:	b2ad      	uxthmi	r5, r5
 800c9ce:	6031      	str	r1, [r6, #0]
 800c9d0:	07d9      	lsls	r1, r3, #31
 800c9d2:	bf44      	itt	mi
 800c9d4:	f043 0320 	orrmi.w	r3, r3, #32
 800c9d8:	6023      	strmi	r3, [r4, #0]
 800c9da:	b11d      	cbz	r5, 800c9e4 <_printf_i+0x19c>
 800c9dc:	2310      	movs	r3, #16
 800c9de:	e7ad      	b.n	800c93c <_printf_i+0xf4>
 800c9e0:	4826      	ldr	r0, [pc, #152]	@ (800ca7c <_printf_i+0x234>)
 800c9e2:	e7e9      	b.n	800c9b8 <_printf_i+0x170>
 800c9e4:	6823      	ldr	r3, [r4, #0]
 800c9e6:	f023 0320 	bic.w	r3, r3, #32
 800c9ea:	6023      	str	r3, [r4, #0]
 800c9ec:	e7f6      	b.n	800c9dc <_printf_i+0x194>
 800c9ee:	4616      	mov	r6, r2
 800c9f0:	e7bd      	b.n	800c96e <_printf_i+0x126>
 800c9f2:	6833      	ldr	r3, [r6, #0]
 800c9f4:	6825      	ldr	r5, [r4, #0]
 800c9f6:	6961      	ldr	r1, [r4, #20]
 800c9f8:	1d18      	adds	r0, r3, #4
 800c9fa:	6030      	str	r0, [r6, #0]
 800c9fc:	062e      	lsls	r6, r5, #24
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	d501      	bpl.n	800ca06 <_printf_i+0x1be>
 800ca02:	6019      	str	r1, [r3, #0]
 800ca04:	e002      	b.n	800ca0c <_printf_i+0x1c4>
 800ca06:	0668      	lsls	r0, r5, #25
 800ca08:	d5fb      	bpl.n	800ca02 <_printf_i+0x1ba>
 800ca0a:	8019      	strh	r1, [r3, #0]
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	6123      	str	r3, [r4, #16]
 800ca10:	4616      	mov	r6, r2
 800ca12:	e7bc      	b.n	800c98e <_printf_i+0x146>
 800ca14:	6833      	ldr	r3, [r6, #0]
 800ca16:	1d1a      	adds	r2, r3, #4
 800ca18:	6032      	str	r2, [r6, #0]
 800ca1a:	681e      	ldr	r6, [r3, #0]
 800ca1c:	6862      	ldr	r2, [r4, #4]
 800ca1e:	2100      	movs	r1, #0
 800ca20:	4630      	mov	r0, r6
 800ca22:	f7f3 fc7d 	bl	8000320 <memchr>
 800ca26:	b108      	cbz	r0, 800ca2c <_printf_i+0x1e4>
 800ca28:	1b80      	subs	r0, r0, r6
 800ca2a:	6060      	str	r0, [r4, #4]
 800ca2c:	6863      	ldr	r3, [r4, #4]
 800ca2e:	6123      	str	r3, [r4, #16]
 800ca30:	2300      	movs	r3, #0
 800ca32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca36:	e7aa      	b.n	800c98e <_printf_i+0x146>
 800ca38:	6923      	ldr	r3, [r4, #16]
 800ca3a:	4632      	mov	r2, r6
 800ca3c:	4649      	mov	r1, r9
 800ca3e:	4640      	mov	r0, r8
 800ca40:	47d0      	blx	sl
 800ca42:	3001      	adds	r0, #1
 800ca44:	d0ad      	beq.n	800c9a2 <_printf_i+0x15a>
 800ca46:	6823      	ldr	r3, [r4, #0]
 800ca48:	079b      	lsls	r3, r3, #30
 800ca4a:	d413      	bmi.n	800ca74 <_printf_i+0x22c>
 800ca4c:	68e0      	ldr	r0, [r4, #12]
 800ca4e:	9b03      	ldr	r3, [sp, #12]
 800ca50:	4298      	cmp	r0, r3
 800ca52:	bfb8      	it	lt
 800ca54:	4618      	movlt	r0, r3
 800ca56:	e7a6      	b.n	800c9a6 <_printf_i+0x15e>
 800ca58:	2301      	movs	r3, #1
 800ca5a:	4632      	mov	r2, r6
 800ca5c:	4649      	mov	r1, r9
 800ca5e:	4640      	mov	r0, r8
 800ca60:	47d0      	blx	sl
 800ca62:	3001      	adds	r0, #1
 800ca64:	d09d      	beq.n	800c9a2 <_printf_i+0x15a>
 800ca66:	3501      	adds	r5, #1
 800ca68:	68e3      	ldr	r3, [r4, #12]
 800ca6a:	9903      	ldr	r1, [sp, #12]
 800ca6c:	1a5b      	subs	r3, r3, r1
 800ca6e:	42ab      	cmp	r3, r5
 800ca70:	dcf2      	bgt.n	800ca58 <_printf_i+0x210>
 800ca72:	e7eb      	b.n	800ca4c <_printf_i+0x204>
 800ca74:	2500      	movs	r5, #0
 800ca76:	f104 0619 	add.w	r6, r4, #25
 800ca7a:	e7f5      	b.n	800ca68 <_printf_i+0x220>
 800ca7c:	0800cfd1 	.word	0x0800cfd1
 800ca80:	0800cfe2 	.word	0x0800cfe2

0800ca84 <memmove>:
 800ca84:	4288      	cmp	r0, r1
 800ca86:	b510      	push	{r4, lr}
 800ca88:	eb01 0402 	add.w	r4, r1, r2
 800ca8c:	d902      	bls.n	800ca94 <memmove+0x10>
 800ca8e:	4284      	cmp	r4, r0
 800ca90:	4623      	mov	r3, r4
 800ca92:	d807      	bhi.n	800caa4 <memmove+0x20>
 800ca94:	1e43      	subs	r3, r0, #1
 800ca96:	42a1      	cmp	r1, r4
 800ca98:	d008      	beq.n	800caac <memmove+0x28>
 800ca9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800caa2:	e7f8      	b.n	800ca96 <memmove+0x12>
 800caa4:	4402      	add	r2, r0
 800caa6:	4601      	mov	r1, r0
 800caa8:	428a      	cmp	r2, r1
 800caaa:	d100      	bne.n	800caae <memmove+0x2a>
 800caac:	bd10      	pop	{r4, pc}
 800caae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cab2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cab6:	e7f7      	b.n	800caa8 <memmove+0x24>

0800cab8 <_sbrk_r>:
 800cab8:	b538      	push	{r3, r4, r5, lr}
 800caba:	4d06      	ldr	r5, [pc, #24]	@ (800cad4 <_sbrk_r+0x1c>)
 800cabc:	2300      	movs	r3, #0
 800cabe:	4604      	mov	r4, r0
 800cac0:	4608      	mov	r0, r1
 800cac2:	602b      	str	r3, [r5, #0]
 800cac4:	f7f6 f8b8 	bl	8002c38 <_sbrk>
 800cac8:	1c43      	adds	r3, r0, #1
 800caca:	d102      	bne.n	800cad2 <_sbrk_r+0x1a>
 800cacc:	682b      	ldr	r3, [r5, #0]
 800cace:	b103      	cbz	r3, 800cad2 <_sbrk_r+0x1a>
 800cad0:	6023      	str	r3, [r4, #0]
 800cad2:	bd38      	pop	{r3, r4, r5, pc}
 800cad4:	24000e8c 	.word	0x24000e8c

0800cad8 <_realloc_r>:
 800cad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cadc:	4607      	mov	r7, r0
 800cade:	4614      	mov	r4, r2
 800cae0:	460d      	mov	r5, r1
 800cae2:	b921      	cbnz	r1, 800caee <_realloc_r+0x16>
 800cae4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cae8:	4611      	mov	r1, r2
 800caea:	f7ff bc5b 	b.w	800c3a4 <_malloc_r>
 800caee:	b92a      	cbnz	r2, 800cafc <_realloc_r+0x24>
 800caf0:	f7ff fbec 	bl	800c2cc <_free_r>
 800caf4:	4625      	mov	r5, r4
 800caf6:	4628      	mov	r0, r5
 800caf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cafc:	f000 f81a 	bl	800cb34 <_malloc_usable_size_r>
 800cb00:	4284      	cmp	r4, r0
 800cb02:	4606      	mov	r6, r0
 800cb04:	d802      	bhi.n	800cb0c <_realloc_r+0x34>
 800cb06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cb0a:	d8f4      	bhi.n	800caf6 <_realloc_r+0x1e>
 800cb0c:	4621      	mov	r1, r4
 800cb0e:	4638      	mov	r0, r7
 800cb10:	f7ff fc48 	bl	800c3a4 <_malloc_r>
 800cb14:	4680      	mov	r8, r0
 800cb16:	b908      	cbnz	r0, 800cb1c <_realloc_r+0x44>
 800cb18:	4645      	mov	r5, r8
 800cb1a:	e7ec      	b.n	800caf6 <_realloc_r+0x1e>
 800cb1c:	42b4      	cmp	r4, r6
 800cb1e:	4622      	mov	r2, r4
 800cb20:	4629      	mov	r1, r5
 800cb22:	bf28      	it	cs
 800cb24:	4632      	movcs	r2, r6
 800cb26:	f7ff fbc3 	bl	800c2b0 <memcpy>
 800cb2a:	4629      	mov	r1, r5
 800cb2c:	4638      	mov	r0, r7
 800cb2e:	f7ff fbcd 	bl	800c2cc <_free_r>
 800cb32:	e7f1      	b.n	800cb18 <_realloc_r+0x40>

0800cb34 <_malloc_usable_size_r>:
 800cb34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb38:	1f18      	subs	r0, r3, #4
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	bfbc      	itt	lt
 800cb3e:	580b      	ldrlt	r3, [r1, r0]
 800cb40:	18c0      	addlt	r0, r0, r3
 800cb42:	4770      	bx	lr

0800cb44 <_init>:
 800cb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb46:	bf00      	nop
 800cb48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb4a:	bc08      	pop	{r3}
 800cb4c:	469e      	mov	lr, r3
 800cb4e:	4770      	bx	lr

0800cb50 <_fini>:
 800cb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb52:	bf00      	nop
 800cb54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb56:	bc08      	pop	{r3}
 800cb58:	469e      	mov	lr, r3
 800cb5a:	4770      	bx	lr
