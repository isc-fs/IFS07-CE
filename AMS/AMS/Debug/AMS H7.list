
AMS H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b560  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  0800b830  0800b830  0000c830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bc10  0800bc10  0000cc10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800bc18  0800bc18  0000cc18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bc20  0800bc20  0000cc20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  24000000  0800bc24  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007a0  24000068  0800bc8c  0000d068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000808  0800bc8c  0000d808  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021966  00000000  00000000  0000d096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003529  00000000  00000000  0002e9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001370  00000000  00000000  00031f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000efe  00000000  00000000  00033298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039e13  00000000  00000000  00034196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a594  00000000  00000000  0006dfa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167dbd  00000000  00000000  0008853d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f02fa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000058d8  00000000  00000000  001f0340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005d  00000000  00000000  001f5c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000068 	.word	0x24000068
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b818 	.word	0x0800b818

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400006c 	.word	0x2400006c
 800030c:	0800b818 	.word	0x0800b818

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <_ZN7BMS_MODC1Emiiihji>:
/*********************************************************************************************************
 ** Function name:           BMS_MOD
 ** Descriptions:            Initialization function of teh class
 *********************************************************************************************************/

BMS_MOD::BMS_MOD(uint32_t _ID, int _MAXV, int _MINV, int _MAXT,
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	603b      	str	r3, [r7, #0]
		uint8_t _NUMCELLS, unsigned int _SHUNT, int _LAG) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	3308      	adds	r3, #8
 800070c:	224c      	movs	r2, #76	@ 0x4c
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f00a fc03 	bl	800af1c <memset>
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	3354      	adds	r3, #84	@ 0x54
 800071a:	2298      	movs	r2, #152	@ 0x98
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f00a fbfc 	bl	800af1c <memset>
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2200      	movs	r2, #0
 8000728:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2200      	movs	r2, #0
 8000730:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2200      	movs	r2, #0
 8000738:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	2200      	movs	r2, #0
 8000740:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800074a:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000754:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800075e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	2200      	movs	r2, #0
 8000772:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	2200      	movs	r2, #0
 800078e:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	2200      	movs	r2, #0
 8000796:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	2200      	movs	r2, #0
 800079e:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	2213      	movs	r2, #19
 80007a6:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	2203      	movs	r2, #3
 80007ae:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80007b8:	2230      	movs	r2, #48	@ 0x30
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f00a fbad 	bl	800af1c <memset>
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	2200      	movs	r2, #0
 80007c6:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	2200      	movs	r2, #0
 80007ce:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	2200      	movs	r2, #0
 80007d6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	f241 0268 	movw	r2, #4200	@ 0x1068
 80007e0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	2200      	movs	r2, #0
 80007e8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	2200      	movs	r2, #0
 80007f0:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	2200      	movs	r2, #0
 80007f8:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
	CANID = _ID;
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	68ba      	ldr	r2, [r7, #8]
 8000800:	601a      	str	r2, [r3, #0]
	LIMIT_MAX_V = _MAXV;
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	LIMIT_MIN_V = _MINV;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	683a      	ldr	r2, [r7, #0]
 800080e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	LIMIT_MAX_T = _MAXT;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	69ba      	ldr	r2, [r7, #24]
 8000816:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
	NUM_CELLS = _NUMCELLS;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	7f3a      	ldrb	r2, [r7, #28]
 800081e:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
	time_lim_plotted += _LAG;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8000828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800082a:	441a      	add	r2, r3
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
	time_lim_sended += _LAG;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8000838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800083a:	441a      	add	r2, r3
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
	time_lim_received += _LAG;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8000848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800084a:	441a      	add	r2, r3
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
}
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	4618      	mov	r0, r3
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <_ZN7BMS_MOD12voltage_infoEPc>:

/*********************************************************************************************************
 ** Function name:           info
 ** Descriptions:            Function for printing the class data
 *********************************************************************************************************/
void BMS_MOD::voltage_info(char *buffer) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]

	if (getUARTState() == HAL_UART_STATE_READY) { // Send the message just if there is a serial por connected
 8000866:	f001 fa73 	bl	8001d50 <getUARTState>
 800086a:	4603      	mov	r3, r0
 800086c:	2b20      	cmp	r3, #32
 800086e:	bf0c      	ite	eq
 8000870:	2301      	moveq	r3, #1
 8000872:	2300      	movne	r3, #0
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	f000 8083 	beq.w	8000982 <_ZN7BMS_MOD12voltage_infoEPc+0x126>
		print((char*) "\n***********************");
 800087c:	4851      	ldr	r0, [pc, #324]	@ (80009c4 <_ZN7BMS_MOD12voltage_infoEPc+0x168>)
 800087e:	f001 fa2b 	bl	8001cd8 <print>
		print((char*) "         BMS");
 8000882:	4851      	ldr	r0, [pc, #324]	@ (80009c8 <_ZN7BMS_MOD12voltage_infoEPc+0x16c>)
 8000884:	f001 fa28 	bl	8001cd8 <print>
		print((char*) "***********************");
 8000888:	4850      	ldr	r0, [pc, #320]	@ (80009cc <_ZN7BMS_MOD12voltage_infoEPc+0x170>)
 800088a:	f001 fa25 	bl	8001cd8 <print>
		sprintf(buffer, " - ERROR:     %i", error);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	461a      	mov	r2, r3
 8000894:	494e      	ldr	r1, [pc, #312]	@ (80009d0 <_ZN7BMS_MOD12voltage_infoEPc+0x174>)
 8000896:	6838      	ldr	r0, [r7, #0]
 8000898:	f00a fb1e 	bl	800aed8 <siprintf>
		print(buffer);
 800089c:	6838      	ldr	r0, [r7, #0]
 800089e:	f001 fa1b 	bl	8001cd8 <print>
		sprintf(buffer, " - CAN ID:    0x%lx", CANID);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	461a      	mov	r2, r3
 80008a8:	494a      	ldr	r1, [pc, #296]	@ (80009d4 <_ZN7BMS_MOD12voltage_infoEPc+0x178>)
 80008aa:	6838      	ldr	r0, [r7, #0]
 80008ac:	f00a fb14 	bl	800aed8 <siprintf>
		print(buffer);
 80008b0:	6838      	ldr	r0, [r7, #0]
 80008b2:	f001 fa11 	bl	8001cd8 <print>
		sprintf(buffer, " - MAX V =    %i mV", MAX_V);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80008bc:	461a      	mov	r2, r3
 80008be:	4946      	ldr	r1, [pc, #280]	@ (80009d8 <_ZN7BMS_MOD12voltage_infoEPc+0x17c>)
 80008c0:	6838      	ldr	r0, [r7, #0]
 80008c2:	f00a fb09 	bl	800aed8 <siprintf>
		print(buffer);
 80008c6:	6838      	ldr	r0, [r7, #0]
 80008c8:	f001 fa06 	bl	8001cd8 <print>
		sprintf(buffer, " - MIN V =    %i mV", MIN_V);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 80008d2:	461a      	mov	r2, r3
 80008d4:	4941      	ldr	r1, [pc, #260]	@ (80009dc <_ZN7BMS_MOD12voltage_infoEPc+0x180>)
 80008d6:	6838      	ldr	r0, [r7, #0]
 80008d8:	f00a fafe 	bl	800aed8 <siprintf>
		print(buffer);
 80008dc:	6838      	ldr	r0, [r7, #0]
 80008de:	f001 f9fb 	bl	8001cd8 <print>
		print((char*) "-----------------------");
 80008e2:	483f      	ldr	r0, [pc, #252]	@ (80009e0 <_ZN7BMS_MOD12voltage_infoEPc+0x184>)
 80008e4:	f001 f9f8 	bl	8001cd8 <print>
		sprintf(buffer, "VOLTS (mV): [%i", cellVoltagemV[0]);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	461a      	mov	r2, r3
 80008ee:	493d      	ldr	r1, [pc, #244]	@ (80009e4 <_ZN7BMS_MOD12voltage_infoEPc+0x188>)
 80008f0:	6838      	ldr	r0, [r7, #0]
 80008f2:	f00a faf1 	bl	800aed8 <siprintf>
		printnl(buffer);
 80008f6:	6838      	ldr	r0, [r7, #0]
 80008f8:	f001 fa0c 	bl	8001d14 <printnl>
		for (int i = 1; i < NUM_CELLS; i++) {
 80008fc:	2301      	movs	r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	e00f      	b.n	8000922 <_ZN7BMS_MOD12voltage_infoEPc+0xc6>
			sprintf(buffer, ", %i", cellVoltagemV[i]);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	68fa      	ldr	r2, [r7, #12]
 8000906:	3202      	adds	r2, #2
 8000908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800090c:	461a      	mov	r2, r3
 800090e:	4936      	ldr	r1, [pc, #216]	@ (80009e8 <_ZN7BMS_MOD12voltage_infoEPc+0x18c>)
 8000910:	6838      	ldr	r0, [r7, #0]
 8000912:	f00a fae1 	bl	800aed8 <siprintf>
			printnl(buffer);
 8000916:	6838      	ldr	r0, [r7, #0]
 8000918:	f001 f9fc 	bl	8001d14 <printnl>
		for (int i = 1; i < NUM_CELLS; i++) {
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	3301      	adds	r3, #1
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8000928:	461a      	mov	r2, r3
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	4293      	cmp	r3, r2
 800092e:	dbe8      	blt.n	8000902 <_ZN7BMS_MOD12voltage_infoEPc+0xa6>
		}

		for (int i = 0; i < NUM_CELLS; i++) {
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	e00e      	b.n	8000954 <_ZN7BMS_MOD12voltage_infoEPc+0xf8>
			voltage_acum += cellVoltagemV[i];
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	68b9      	ldr	r1, [r7, #8]
 8000940:	3102      	adds	r1, #2
 8000942:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000946:	441a      	add	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
		for (int i = 0; i < NUM_CELLS; i++) {
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	3301      	adds	r3, #1
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800095a:	461a      	mov	r2, r3
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	4293      	cmp	r3, r2
 8000960:	dbe9      	blt.n	8000936 <_ZN7BMS_MOD12voltage_infoEPc+0xda>
		}

		print((char*) "]");
 8000962:	4822      	ldr	r0, [pc, #136]	@ (80009ec <_ZN7BMS_MOD12voltage_infoEPc+0x190>)
 8000964:	f001 f9b8 	bl	8001cd8 <print>
		sprintf(buffer, " - V(max) = %i mV || V(min) = %i", MAX_V, MIN_V);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8000974:	491e      	ldr	r1, [pc, #120]	@ (80009f0 <_ZN7BMS_MOD12voltage_infoEPc+0x194>)
 8000976:	6838      	ldr	r0, [r7, #0]
 8000978:	f00a faae 	bl	800aed8 <siprintf>
		print(buffer);
 800097c:	6838      	ldr	r0, [r7, #0]
 800097e:	f001 f9ab 	bl	8001cd8 <print>
	}
	sprintf(buffer, "- BALANCING V = %i mV", BALANCING_V);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8000988:	461a      	mov	r2, r3
 800098a:	491a      	ldr	r1, [pc, #104]	@ (80009f4 <_ZN7BMS_MOD12voltage_infoEPc+0x198>)
 800098c:	6838      	ldr	r0, [r7, #0]
 800098e:	f00a faa3 	bl	800aed8 <siprintf>
	print(buffer);
 8000992:	6838      	ldr	r0, [r7, #0]
 8000994:	f001 f9a0 	bl	8001cd8 <print>

	sprintf(buffer, "- STACK VOLTAGE = %i V", voltage_acum / 1000);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800099e:	4a16      	ldr	r2, [pc, #88]	@ (80009f8 <_ZN7BMS_MOD12voltage_infoEPc+0x19c>)
 80009a0:	fb82 1203 	smull	r1, r2, r2, r3
 80009a4:	1192      	asrs	r2, r2, #6
 80009a6:	17db      	asrs	r3, r3, #31
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	461a      	mov	r2, r3
 80009ac:	4913      	ldr	r1, [pc, #76]	@ (80009fc <_ZN7BMS_MOD12voltage_infoEPc+0x1a0>)
 80009ae:	6838      	ldr	r0, [r7, #0]
 80009b0:	f00a fa92 	bl	800aed8 <siprintf>
	print(buffer);
 80009b4:	6838      	ldr	r0, [r7, #0]
 80009b6:	f001 f98f 	bl	8001cd8 <print>
}
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	0800b830 	.word	0x0800b830
 80009c8:	0800b84c 	.word	0x0800b84c
 80009cc:	0800b85c 	.word	0x0800b85c
 80009d0:	0800b874 	.word	0x0800b874
 80009d4:	0800b888 	.word	0x0800b888
 80009d8:	0800b89c 	.word	0x0800b89c
 80009dc:	0800b8b0 	.word	0x0800b8b0
 80009e0:	0800b8c4 	.word	0x0800b8c4
 80009e4:	0800b8dc 	.word	0x0800b8dc
 80009e8:	0800b8ec 	.word	0x0800b8ec
 80009ec:	0800b8f4 	.word	0x0800b8f4
 80009f0:	0800b8f8 	.word	0x0800b8f8
 80009f4:	0800b91c 	.word	0x0800b91c
 80009f8:	10624dd3 	.word	0x10624dd3
 80009fc:	0800b934 	.word	0x0800b934

08000a00 <_ZN7BMS_MOD16temperature_infoEPc>:

// ********************************************************************************************************
// **Function name:           info
// **Descriptions:            Function for printing the class data
// **********************************************************************************************************
void BMS_MOD::temperature_info(char *buffer) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
	if (getUARTState() == HAL_UART_STATE_READY) //Send the message just if there is a serial por connected
 8000a0a:	f001 f9a1 	bl	8001d50 <getUARTState>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b20      	cmp	r3, #32
 8000a12:	bf0c      	ite	eq
 8000a14:	2301      	moveq	r3, #1
 8000a16:	2300      	movne	r3, #0
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d061      	beq.n	8000ae2 <_ZN7BMS_MOD16temperature_infoEPc+0xe2>
	{
		print((char*) "\n***********************");
 8000a1e:	4833      	ldr	r0, [pc, #204]	@ (8000aec <_ZN7BMS_MOD16temperature_infoEPc+0xec>)
 8000a20:	f001 f95a 	bl	8001cd8 <print>
		print((char*) "     Temperatures");
 8000a24:	4832      	ldr	r0, [pc, #200]	@ (8000af0 <_ZN7BMS_MOD16temperature_infoEPc+0xf0>)
 8000a26:	f001 f957 	bl	8001cd8 <print>
		print((char*) "***********************");
 8000a2a:	4832      	ldr	r0, [pc, #200]	@ (8000af4 <_ZN7BMS_MOD16temperature_infoEPc+0xf4>)
 8000a2c:	f001 f954 	bl	8001cd8 <print>
		sprintf(buffer, " - ERROR:     %i", error);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4930      	ldr	r1, [pc, #192]	@ (8000af8 <_ZN7BMS_MOD16temperature_infoEPc+0xf8>)
 8000a38:	6838      	ldr	r0, [r7, #0]
 8000a3a:	f00a fa4d 	bl	800aed8 <siprintf>
		print(buffer);
 8000a3e:	6838      	ldr	r0, [r7, #0]
 8000a40:	f001 f94a 	bl	8001cd8 <print>
		sprintf(buffer, " - CAN ID:    0x%lx", CANID);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	492c      	ldr	r1, [pc, #176]	@ (8000afc <_ZN7BMS_MOD16temperature_infoEPc+0xfc>)
 8000a4c:	6838      	ldr	r0, [r7, #0]
 8000a4e:	f00a fa43 	bl	800aed8 <siprintf>
		print(buffer);
 8000a52:	6838      	ldr	r0, [r7, #0]
 8000a54:	f001 f940 	bl	8001cd8 <print>
		sprintf(buffer, " - MAX T =    %i ºC", MAX_T);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4927      	ldr	r1, [pc, #156]	@ (8000b00 <_ZN7BMS_MOD16temperature_infoEPc+0x100>)
 8000a62:	6838      	ldr	r0, [r7, #0]
 8000a64:	f00a fa38 	bl	800aed8 <siprintf>
		print(buffer);
 8000a68:	6838      	ldr	r0, [r7, #0]
 8000a6a:	f001 f935 	bl	8001cd8 <print>
		sprintf(buffer, " - MIN T =    %i ºC", MIN_T);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8000a74:	461a      	mov	r2, r3
 8000a76:	4923      	ldr	r1, [pc, #140]	@ (8000b04 <_ZN7BMS_MOD16temperature_infoEPc+0x104>)
 8000a78:	6838      	ldr	r0, [r7, #0]
 8000a7a:	f00a fa2d 	bl	800aed8 <siprintf>
		print(buffer);
 8000a7e:	6838      	ldr	r0, [r7, #0]
 8000a80:	f001 f92a 	bl	8001cd8 <print>
		sprintf(buffer, " - LIM T =    %i ºC", LIMIT_MAX_T);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	491e      	ldr	r1, [pc, #120]	@ (8000b08 <_ZN7BMS_MOD16temperature_infoEPc+0x108>)
 8000a8e:	6838      	ldr	r0, [r7, #0]
 8000a90:	f00a fa22 	bl	800aed8 <siprintf>
		print((char*) "-----------------------");
 8000a94:	481d      	ldr	r0, [pc, #116]	@ (8000b0c <_ZN7BMS_MOD16temperature_infoEPc+0x10c>)
 8000a96:	f001 f91f 	bl	8001cd8 <print>
		sprintf(buffer, "Temperatures (ºC): [%i", cellTemperature[0]);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	491b      	ldr	r1, [pc, #108]	@ (8000b10 <_ZN7BMS_MOD16temperature_infoEPc+0x110>)
 8000aa2:	6838      	ldr	r0, [r7, #0]
 8000aa4:	f00a fa18 	bl	800aed8 <siprintf>
		printnl(buffer);
 8000aa8:	6838      	ldr	r0, [r7, #0]
 8000aaa:	f001 f933 	bl	8001d14 <printnl>
		for (int i = 1; i < 38; i++) {
 8000aae:	2301      	movs	r3, #1
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	e010      	b.n	8000ad6 <_ZN7BMS_MOD16temperature_infoEPc+0xd6>
			sprintf(buffer, ", %i", cellTemperature[i]);
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	3314      	adds	r3, #20
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	4413      	add	r3, r2
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4914      	ldr	r1, [pc, #80]	@ (8000b14 <_ZN7BMS_MOD16temperature_infoEPc+0x114>)
 8000ac4:	6838      	ldr	r0, [r7, #0]
 8000ac6:	f00a fa07 	bl	800aed8 <siprintf>
			printnl(buffer);
 8000aca:	6838      	ldr	r0, [r7, #0]
 8000acc:	f001 f922 	bl	8001d14 <printnl>
		for (int i = 1; i < 38; i++) {
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	2b25      	cmp	r3, #37	@ 0x25
 8000ada:	ddeb      	ble.n	8000ab4 <_ZN7BMS_MOD16temperature_infoEPc+0xb4>
		}
		print((char*) "]");
 8000adc:	480e      	ldr	r0, [pc, #56]	@ (8000b18 <_ZN7BMS_MOD16temperature_infoEPc+0x118>)
 8000ade:	f001 f8fb 	bl	8001cd8 <print>

	}
}
 8000ae2:	bf00      	nop
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	0800b830 	.word	0x0800b830
 8000af0:	0800b94c 	.word	0x0800b94c
 8000af4:	0800b85c 	.word	0x0800b85c
 8000af8:	0800b874 	.word	0x0800b874
 8000afc:	0800b888 	.word	0x0800b888
 8000b00:	0800b960 	.word	0x0800b960
 8000b04:	0800b978 	.word	0x0800b978
 8000b08:	0800b990 	.word	0x0800b990
 8000b0c:	0800b8c4 	.word	0x0800b8c4
 8000b10:	0800b9a8 	.word	0x0800b9a8
 8000b14:	0800b8ec 	.word	0x0800b8ec
 8000b18:	0800b8f4 	.word	0x0800b8f4

08000b1c <_ZN7BMS_MOD5parseEmPhm>:

/*********************************************************************************************************
 ** Function name:           parse
 ** Descriptions:            Function for parsing the received data via CAN protocl
 *********************************************************************************************************/
bool BMS_MOD::parse(uint32_t id, uint8_t *buf, uint32_t t) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08c      	sub	sp, #48	@ 0x30
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
 8000b28:	603b      	str	r3, [r7, #0]

	if (id > CANID && id < CANID + 30) {
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	f240 817b 	bls.w	8000e2c <_ZN7BMS_MOD5parseEmPhm+0x310>
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	331e      	adds	r3, #30
 8000b3c:	68ba      	ldr	r2, [r7, #8]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	f080 8174 	bcs.w	8000e2c <_ZN7BMS_MOD5parseEmPhm+0x310>
		int m = id % CANID;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b4e:	fb01 f202 	mul.w	r2, r1, r2
 8000b52:	1a9b      	subs	r3, r3, r2
 8000b54:	61fb      	str	r3, [r7, #28]
		int pos = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61bb      	str	r3, [r7, #24]
		if ((m > 0 && m < 5) || (m > 10 && m < 15)) {
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	dd02      	ble.n	8000b66 <_ZN7BMS_MOD5parseEmPhm+0x4a>
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	2b04      	cmp	r3, #4
 8000b64:	dd07      	ble.n	8000b76 <_ZN7BMS_MOD5parseEmPhm+0x5a>
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	2b0a      	cmp	r3, #10
 8000b6a:	f340 815f 	ble.w	8000e2c <_ZN7BMS_MOD5parseEmPhm+0x310>
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	2b0e      	cmp	r3, #14
 8000b72:	f300 815b 	bgt.w	8000e2c <_ZN7BMS_MOD5parseEmPhm+0x310>
			time_lim_received = t + TIME_LIM_RECV; // Reset the timer flag for checking if the data is received
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	441a      	add	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
			if (m < 14) {
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	2b0d      	cmp	r3, #13
 8000b8a:	f300 80ae 	bgt.w	8000cea <_ZN7BMS_MOD5parseEmPhm+0x1ce>
				if (flag_charger == 1) { // New charger doesn't have CAN bus
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d10f      	bne.n	8000bb8 <_ZN7BMS_MOD5parseEmPhm+0x9c>
					if (module_send_message_CAN1(id, buf, 8) != HAL_OK)
 8000b98:	2208      	movs	r2, #8
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	68b8      	ldr	r0, [r7, #8]
 8000b9e:	f001 f857 	bl	8001c50 <module_send_message_CAN1>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	bf14      	ite	ne
 8000ba8:	2301      	movne	r3, #1
 8000baa:	2300      	moveq	r3, #0
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d002      	beq.n	8000bb8 <_ZN7BMS_MOD5parseEmPhm+0x9c>
						error = BMS_ERROR_COMMUNICATION;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	605a      	str	r2, [r3, #4]
				}
				for (int i = 0; i < 14; i++) // i = number of cell within message
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000bbc:	e055      	b.n	8000c6a <_ZN7BMS_MOD5parseEmPhm+0x14e>
						{
					pos = (m - 1) * 4 + i;
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000bc6:	4413      	add	r3, r2
 8000bc8:	61bb      	str	r3, [r7, #24]
					cellVoltagemV[pos] = (buf[2 * i] << 8) + buf[2 * i + 1];
 8000bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	461a      	mov	r2, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	021b      	lsls	r3, r3, #8
 8000bd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000bda:	0052      	lsls	r2, r2, #1
 8000bdc:	3201      	adds	r2, #1
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	440a      	add	r2, r1
 8000be2:	7812      	ldrb	r2, [r2, #0]
 8000be4:	1899      	adds	r1, r3, r2
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	3202      	adds	r2, #2
 8000bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					if ((cellVoltagemV[pos] > LIMIT_MAX_V
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	69ba      	ldr	r2, [r7, #24]
 8000bf4:	3202      	adds	r2, #2
 8000bf6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000c00:	429a      	cmp	r2, r3
 8000c02:	dc09      	bgt.n	8000c18 <_ZN7BMS_MOD5parseEmPhm+0xfc>
							|| cellVoltagemV[pos] < LIMIT_MIN_V)
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	3202      	adds	r2, #2
 8000c0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000c14:	429a      	cmp	r2, r3
 8000c16:	da1f      	bge.n	8000c58 <_ZN7BMS_MOD5parseEmPhm+0x13c>
							&& pos < NUM_CELLS) {
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8000c1e:	461a      	mov	r2, r3
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	4293      	cmp	r3, r2
 8000c24:	da18      	bge.n	8000c58 <_ZN7BMS_MOD5parseEmPhm+0x13c>
						flag_error_volt[pos] = flag_error_volt[pos] + 1;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	3248      	adds	r2, #72	@ 0x48
 8000c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c30:	1c59      	adds	r1, r3, #1
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	3248      	adds	r2, #72	@ 0x48
 8000c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						if (flag_error_volt[pos] >= max_flag)
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	3248      	adds	r2, #72	@ 0x48
 8000c42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	db09      	blt.n	8000c64 <_ZN7BMS_MOD5parseEmPhm+0x148>
							error = BMS_ERROR_VOLTS;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	2202      	movs	r2, #2
 8000c54:	605a      	str	r2, [r3, #4]
						if (flag_error_volt[pos] >= max_flag)
 8000c56:	e005      	b.n	8000c64 <_ZN7BMS_MOD5parseEmPhm+0x148>
					} else
						flag_error_volt[pos] = 0;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	3248      	adds	r2, #72	@ 0x48
 8000c5e:	2100      	movs	r1, #0
 8000c60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (int i = 0; i < 14; i++) // i = number of cell within message
 8000c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c66:	3301      	adds	r3, #1
 8000c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c6c:	2b0d      	cmp	r3, #13
 8000c6e:	dda6      	ble.n	8000bbe <_ZN7BMS_MOD5parseEmPhm+0xa2>
				}
				MAX_V = cellVoltagemV[0];
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	689a      	ldr	r2, [r3, #8]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
				MIN_V = cellVoltagemV[0];
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	689a      	ldr	r2, [r3, #8]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
				for (int i = 0; i < NUM_CELLS; i++) // i = number of cell within message
 8000c84:	2300      	movs	r3, #0
 8000c86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c88:	e027      	b.n	8000cda <_ZN7BMS_MOD5parseEmPhm+0x1be>
						{
					if (cellVoltagemV[i] > MAX_V)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c8e:	3202      	adds	r2, #2
 8000c90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	dd08      	ble.n	8000cb0 <_ZN7BMS_MOD5parseEmPhm+0x194>
						MAX_V = cellVoltagemV[i];
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ca2:	3202      	adds	r2, #2
 8000ca4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 8000cae:	e011      	b.n	8000cd4 <_ZN7BMS_MOD5parseEmPhm+0x1b8>
					else if (cellVoltagemV[i] < MIN_V)
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cb4:	3202      	adds	r2, #2
 8000cb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	da07      	bge.n	8000cd4 <_ZN7BMS_MOD5parseEmPhm+0x1b8>
						MIN_V = cellVoltagemV[i];
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cc8:	3202      	adds	r2, #2
 8000cca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
				for (int i = 0; i < NUM_CELLS; i++) // i = number of cell within message
 8000cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	dbd0      	blt.n	8000c8a <_ZN7BMS_MOD5parseEmPhm+0x16e>
 8000ce8:	e0a0      	b.n	8000e2c <_ZN7BMS_MOD5parseEmPhm+0x310>
				}
				//message_balancing[1] = BALANCING_V & 0xFF;           // Coment this two lines for disabling the balancing
				//message_balancing[0] = (BALANCING_V >> 8) & 0xFF;    // Coment this two lines for disabling the balancing

			} else if (m > 20 && m < 27) { //New BMS send temeratures at 21, 22, 23, 24, 25, 26
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	2b14      	cmp	r3, #20
 8000cee:	f340 809d 	ble.w	8000e2c <_ZN7BMS_MOD5parseEmPhm+0x310>
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	2b1a      	cmp	r3, #26
 8000cf6:	f300 8099 	bgt.w	8000e2c <_ZN7BMS_MOD5parseEmPhm+0x310>

				if (flag_charger == 1) {
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d104      	bne.n	8000d0e <_ZN7BMS_MOD5parseEmPhm+0x1f2>
					module_send_message_CAN1(id, buf, 8); //Reenviar temperaturas por CAN1 tanto en cargador como en coche
 8000d04:	2208      	movs	r2, #8
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	68b8      	ldr	r0, [r7, #8]
 8000d0a:	f000 ffa1 	bl	8001c50 <module_send_message_CAN1>
				}

				if (m < 26) {
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	2b19      	cmp	r3, #25
 8000d12:	dc28      	bgt.n	8000d66 <_ZN7BMS_MOD5parseEmPhm+0x24a>
					for (int i = 0; i < 8; i++) {
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d18:	e021      	b.n	8000d5e <_ZN7BMS_MOD5parseEmPhm+0x242>
						pos = (m - 1) * 8 + i;
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	00db      	lsls	r3, r3, #3
 8000d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d22:	4413      	add	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
						cellTemperature[pos] = buf[i];
 8000d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	4619      	mov	r1, r3
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	3314      	adds	r3, #20
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	6059      	str	r1, [r3, #4]
						if (cellTemperature[pos] > LIMIT_MAX_T)
 8000d3c:	68fa      	ldr	r2, [r7, #12]
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	3314      	adds	r3, #20
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	685a      	ldr	r2, [r3, #4]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	dd02      	ble.n	8000d58 <_ZN7BMS_MOD5parseEmPhm+0x23c>
							error = BMS_ERROR_TEMP;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	2203      	movs	r2, #3
 8000d56:	605a      	str	r2, [r3, #4]
					for (int i = 0; i < 8; i++) {
 8000d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d60:	2b07      	cmp	r3, #7
 8000d62:	ddda      	ble.n	8000d1a <_ZN7BMS_MOD5parseEmPhm+0x1fe>
 8000d64:	e01f      	b.n	8000da6 <_ZN7BMS_MOD5parseEmPhm+0x28a>

					}
				} else if (m == 26) {
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	2b1a      	cmp	r3, #26
 8000d6a:	d11c      	bne.n	8000da6 <_ZN7BMS_MOD5parseEmPhm+0x28a>

					for (int i = 0; i < 3; i++) {
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	623b      	str	r3, [r7, #32]
 8000d70:	e016      	b.n	8000da0 <_ZN7BMS_MOD5parseEmPhm+0x284>
						pos = (m - 1) * 8 + i;
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3b01      	subs	r3, #1
 8000d76:	00db      	lsls	r3, r3, #3
 8000d78:	6a3a      	ldr	r2, [r7, #32]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
						if (cellTemperature[pos] > LIMIT_MAX_T)
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	3314      	adds	r3, #20
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	685a      	ldr	r2, [r3, #4]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d90:	429a      	cmp	r2, r3
 8000d92:	dd02      	ble.n	8000d9a <_ZN7BMS_MOD5parseEmPhm+0x27e>
							error = BMS_ERROR_TEMP;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2203      	movs	r2, #3
 8000d98:	605a      	str	r2, [r3, #4]
					for (int i = 0; i < 3; i++) {
 8000d9a:	6a3b      	ldr	r3, [r7, #32]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	623b      	str	r3, [r7, #32]
 8000da0:	6a3b      	ldr	r3, [r7, #32]
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	dde5      	ble.n	8000d72 <_ZN7BMS_MOD5parseEmPhm+0x256>

					}

				}

				MAX_T = cellTemperature[0];
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
				MIN_T = cellTemperature[0];
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
				for (int i = 0; i < 38; i++) {
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	bf00      	nop
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	2b25      	cmp	r3, #37	@ 0x25
 8000dc4:	dc32      	bgt.n	8000e2c <_ZN7BMS_MOD5parseEmPhm+0x310>
					if (cellTemperature[i] > MAX_T)
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	3314      	adds	r3, #20
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	dd09      	ble.n	8000df0 <_ZN7BMS_MOD5parseEmPhm+0x2d4>
						MAX_T = cellTemperature[i];
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	3314      	adds	r3, #20
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	4413      	add	r3, r2
 8000de6:	685a      	ldr	r2, [r3, #4]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
 8000dee:	e01b      	b.n	8000e28 <_ZN7BMS_MOD5parseEmPhm+0x30c>
					else if (cellTemperature[i] < MIN_T
 8000df0:	68fa      	ldr	r2, [r7, #12]
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	3314      	adds	r3, #20
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	4413      	add	r3, r2
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8000e02:	429a      	cmp	r2, r3
 8000e04:	da10      	bge.n	8000e28 <_ZN7BMS_MOD5parseEmPhm+0x30c>
							&& cellTemperature[i] != 0) {
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	3314      	adds	r3, #20
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	4413      	add	r3, r2
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d008      	beq.n	8000e28 <_ZN7BMS_MOD5parseEmPhm+0x30c>
						MIN_T = cellTemperature[i];
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	3314      	adds	r3, #20
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	4413      	add	r3, r2
 8000e20:	685a      	ldr	r2, [r3, #4]
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

					}
					return true;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e000      	b.n	8000e2e <_ZN7BMS_MOD5parseEmPhm+0x312>
				}
			}
		}
	}
	return false;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3730      	adds	r7, #48	@ 0x30
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <_ZN7BMS_MOD13query_voltageEmPc>:

/*********************************************************************************************************
 ** Function name:           query_voltage
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/
int BMS_MOD::query_voltage(uint32_t time, char *buffer) {
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b086      	sub	sp, #24
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	60f8      	str	r0, [r7, #12]
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
	//INT8U message_balancing[2] = {0,0}; // Voltage in mV
// Function for performing a correct behavior
	if (time > time_lim_sended) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE BMS
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8000e48:	68ba      	ldr	r2, [r7, #8]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d921      	bls.n	8000e92 <_ZN7BMS_MOD13query_voltageEmPc+0x5c>
		time_lim_sended += TIME_LIM_SEND;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000e5a:	441a      	add	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

		// Two messages (one per LTC in the BMS) -> to evaluate if its better to group everything into one message
		if (module_send_message_CAN2(CANID, message_balancing, 2) != HAL_OK) {
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	6818      	ldr	r0, [r3, #0]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f000 ff10 	bl	8001c94 <module_send_message_CAN2>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
			//error = BMS_ERROR_COMMUNICATION; // If the message is not sent then, error
		}

		if (module_send_message_CAN2(CANID + 10, message_balancing, 2)
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f103 000a 	add.w	r0, r3, #10
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8000e86:	2202      	movs	r2, #2
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f000 ff03 	bl	8001c94 <module_send_message_CAN2>
 8000e8e:	4603      	mov	r3, r0
				!= HAL_OK) {
 8000e90:	2b00      	cmp	r3, #0
			//error = BMS_ERROR_COMMUNICATION; // If the message is not sent then, error
		}
	}
	if (time > time_lim_received) {
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8000e98:	68ba      	ldr	r2, [r7, #8]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d902      	bls.n	8000ea4 <_ZN7BMS_MOD13query_voltageEmPc+0x6e>
		error = BMS_ERROR_COMMUNICATION;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	605a      	str	r2, [r3, #4]
	}
	if (TIME_LIM_PLOT > 0 && time > time_lim_plotted) {
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d013      	beq.n	8000ed6 <_ZN7BMS_MOD13query_voltageEmPc+0xa0>
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8000eb4:	68ba      	ldr	r2, [r7, #8]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d90d      	bls.n	8000ed6 <_ZN7BMS_MOD13query_voltageEmPc+0xa0>
		time_lim_plotted += TIME_LIM_PLOT;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8000ec6:	441a      	add	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
		voltage_info(buffer);
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	68f8      	ldr	r0, [r7, #12]
 8000ed2:	f7ff fcc3 	bl	800085c <_ZN7BMS_MOD12voltage_infoEPc>
	}

	for (int i = 0; i < NUM_CELLS; i++) {
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	e00e      	b.n	8000efa <_ZN7BMS_MOD13query_voltageEmPc+0xc4>
		voltage_acum += cellVoltagemV[i];
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	6979      	ldr	r1, [r7, #20]
 8000ee6:	3102      	adds	r1, #2
 8000ee8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000eec:	441a      	add	r2, r3
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
	for (int i = 0; i < NUM_CELLS; i++) {
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8000f00:	461a      	mov	r2, r3
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	4293      	cmp	r3, r2
 8000f06:	dbe9      	blt.n	8000edc <_ZN7BMS_MOD13query_voltageEmPc+0xa6>
	}
	return error;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	685b      	ldr	r3, [r3, #4]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <_ZN7BMS_MOD17query_temperatureEmPc>:
/*********************************************************************************************************
 ** Function name:           query_temperature
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/

int BMS_MOD::query_temperature(uint32_t time, char *buffer) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
// Function for performing a correct behavior
if (time > time_lim_sended) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE TEMPERATURES
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d933      	bls.n	8000f94 <_ZN7BMS_MOD17query_temperatureEmPc+0x80>
	time_lim_sended += TIME_LIM_SEND;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000f38:	441a      	add	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

	if (module_send_message_CAN2(CANID + 20, message_temperatures, 2)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f103 0014 	add.w	r0, r3, #20
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f503 738b 	add.w	r3, r3, #278	@ 0x116
 8000f4e:	2202      	movs	r2, #2
 8000f50:	4619      	mov	r1, r3
 8000f52:	f000 fe9f 	bl	8001c94 <module_send_message_CAN2>
 8000f56:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	bf14      	ite	ne
 8000f5c:	2301      	movne	r3, #1
 8000f5e:	2300      	moveq	r3, #0
 8000f60:	b2db      	uxtb	r3, r3
	if (module_send_message_CAN2(CANID + 20, message_temperatures, 2)
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d002      	beq.n	8000f6c <_ZN7BMS_MOD17query_temperatureEmPc+0x58>
		error = BMS_ERROR_TEMP; // If the message is not sended then, error
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2203      	movs	r2, #3
 8000f6a:	605a      	str	r2, [r3, #4]
	} else {
		/*       Serial.print("Ennvado solicitud a: ");
		 Serial.println(MODULEID,HEX); */
	}

	for (int i = 0; i < 38; i++) {
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	e00d      	b.n	8000f8e <_ZN7BMS_MOD17query_temperatureEmPc+0x7a>
		if (cellTemperature[i] > 55) {
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	3314      	adds	r3, #20
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b37      	cmp	r3, #55	@ 0x37
 8000f80:	dd02      	ble.n	8000f88 <_ZN7BMS_MOD17query_temperatureEmPc+0x74>
			error = 2;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2202      	movs	r2, #2
 8000f86:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 38; i++) {
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	2b25      	cmp	r3, #37	@ 0x25
 8000f92:	ddee      	ble.n	8000f72 <_ZN7BMS_MOD17query_temperatureEmPc+0x5e>
	// time_lim_sended += TIME_LIM_SEND; //Si actualizas dos veces, el mensaje se envía en la mitad del periodo
}
if (time > time_lim_received) {
	//error = Temperatures_ERROR_COMMUNICATION;
}
if (TIME_LIM_PLOT > 0 && time > time_lim_plotted) {
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d013      	beq.n	8000fc6 <_ZN7BMS_MOD17query_temperatureEmPc+0xb2>
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8000fa4:	68ba      	ldr	r2, [r7, #8]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d90d      	bls.n	8000fc6 <_ZN7BMS_MOD17query_temperatureEmPc+0xb2>
	time_lim_plotted += TIME_LIM_PLOT;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8000fb6:	441a      	add	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
	temperature_info(buffer);
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	68f8      	ldr	r0, [r7, #12]
 8000fc2:	f7ff fd1d 	bl	8000a00 <_ZN7BMS_MOD16temperature_infoEPc>
 message_temperatures[0] = 0;
 message_temperatures[1] = MAX_T & 0xFF;
 module_send_message_CAN1(CANIDTEL, 0, 2, message_temperatures);
 } */

return error;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	685b      	ldr	r3, [r3, #4]

}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <_ZN7CPU_MODC1Emmi>:

// ********************************************************************************************************
// **Function name:           CPU_MOD
// **Descriptions:            Initialization function of teh class
// ********************************************************************************************************
CPU_MOD::CPU_MOD(uint32_t _ID_send, uint32_t _ID_recv, int _LAG) { /////////////////////////Habia un _LAG=0
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
 8000fe0:	603b      	str	r3, [r7, #0]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2200      	movs	r2, #0
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	731a      	strb	r2, [r3, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	611a      	str	r2, [r3, #16]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001006:	615a      	str	r2, [r3, #20]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2264      	movs	r2, #100	@ 0x64
 800100c:	619a      	str	r2, [r3, #24]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4a18      	ldr	r2, [pc, #96]	@ (8001074 <_ZN7CPU_MODC1Emmi+0xa0>)
 8001012:	61da      	str	r2, [r3, #28]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	695a      	ldr	r2, [r3, #20]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	621a      	str	r2, [r3, #32]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2200      	movs	r2, #0
 8001020:	625a      	str	r2, [r3, #36]	@ 0x24
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	69da      	ldr	r2, [r3, #28]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	629a      	str	r2, [r3, #40]	@ 0x28
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2200      	movs	r2, #0
 800102e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2200      	movs	r2, #0
 8001034:	631a      	str	r2, [r3, #48]	@ 0x30
    CANID_send = _ID_send;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	68ba      	ldr	r2, [r7, #8]
 800103a:	601a      	str	r2, [r3, #0]
    CANID_recv = _ID_recv;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	605a      	str	r2, [r3, #4]

    time_lim_plotted += _LAG;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6a1a      	ldr	r2, [r3, #32]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	441a      	add	r2, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	621a      	str	r2, [r3, #32]
    time_lim_sended += _LAG;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	441a      	add	r2, r3
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	625a      	str	r2, [r3, #36]	@ 0x24
    time_lim_received += _LAG;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	441a      	add	r2, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4618      	mov	r0, r3
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	000f4240 	.word	0x000f4240

08001078 <_ZN7CPU_MOD5parseEmPhm>:

// ********************************************************************************************************
// **Function name:           parse
// **Descriptions:            Function for parsing the received data via CAN protocl
// ********************************************************************************************************
bool CPU_MOD::parse(uint32_t id, uint8_t* buf, uint32_t t) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	603b      	str	r3, [r7, #0]
    if (id == 0x100) {
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800108c:	d131      	bne.n	80010f2 <_ZN7CPU_MOD5parseEmPhm+0x7a>
        error = CPU_OK;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
        time_lim_received = t + TIME_LIM_RECV;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	69da      	ldr	r2, [r3, #28]
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	441a      	add	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	629a      	str	r2, [r3, #40]	@ 0x28
        DC_BUS = (int)((buf[1]<<8)|buf[0]); // This direction sends the voltage in DC_BUS
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3301      	adds	r3, #1
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	7812      	ldrb	r2, [r2, #0]
 80010ac:	431a      	orrs	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	631a      	str	r2, [r3, #48]	@ 0x30
        if (DC_BUS > 280) { //(DC_BUS>0.9*voltage_acum)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80010ba:	dd18      	ble.n	80010ee <_ZN7CPU_MOD5parseEmPhm+0x76>
            error = CPU_BUS_LINE_OK;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2202      	movs	r2, #2
 80010c0:	609a      	str	r2, [r3, #8]
            if (module_send_message_CAN1(CANID_send, currentState, 1) != HAL_OK){
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6818      	ldr	r0, [r3, #0]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	330c      	adds	r3, #12
 80010ca:	2201      	movs	r2, #1
 80010cc:	4619      	mov	r1, r3
 80010ce:	f000 fdbf 	bl	8001c50 <module_send_message_CAN1>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	bf14      	ite	ne
 80010d8:	2301      	movne	r3, #1
 80010da:	2300      	moveq	r3, #0
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d005      	beq.n	80010ee <_ZN7CPU_MOD5parseEmPhm+0x76>
                error = CPU_ERROR_COMMUNICATION;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2201      	movs	r2, #1
 80010e6:	609a      	str	r2, [r3, #8]
                print((char*)"error message");
 80010e8:	4804      	ldr	r0, [pc, #16]	@ (80010fc <_ZN7CPU_MOD5parseEmPhm+0x84>)
 80010ea:	f000 fdf5 	bl	8001cd8 <print>
            }

        }
        return true;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <_ZN7CPU_MOD5parseEmPhm+0x7c>
    }
    return false;
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	0800baa8 	.word	0x0800baa8

08001100 <_ZN7CPU_MOD5queryEmPc>:

// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function to check if i need to send a mesage new mesage and the received mesajes interval are within the limits
// ********************************************************************************************************
int CPU_MOD::query(uint32_t time, char* buffer) {
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
	// Function for performing a correct behaivour
    if (time > time_lim_sended) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE BMS
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001110:	68ba      	ldr	r2, [r7, #8]
 8001112:	429a      	cmp	r2, r3
 8001114:	d906      	bls.n	8001124 <_ZN7CPU_MOD5queryEmPc+0x24>
        time_lim_sended += TIME_LIM_SEND;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	441a      	add	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    if (time > time_lim_received)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001128:	68ba      	ldr	r2, [r7, #8]
 800112a:	429a      	cmp	r2, r3
 800112c:	d902      	bls.n	8001134 <_ZN7CPU_MOD5queryEmPc+0x34>
        error = CPU_ERROR_COMMUNICATION; ///////Cheking if everything is alright each time
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2201      	movs	r2, #1
 8001132:	609a      	str	r2, [r3, #8]

    if (TIME_LIM_PLOT > 0 && time > time_lim_plotted) {
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d00b      	beq.n	8001154 <_ZN7CPU_MOD5queryEmPc+0x54>
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6a1b      	ldr	r3, [r3, #32]
 8001140:	68ba      	ldr	r2, [r7, #8]
 8001142:	429a      	cmp	r2, r3
 8001144:	d906      	bls.n	8001154 <_ZN7CPU_MOD5queryEmPc+0x54>
        time_lim_plotted += TIME_LIM_PLOT;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6a1a      	ldr	r2, [r3, #32]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	441a      	add	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	621a      	str	r2, [r3, #32]
        //info(buffer);
    }
    return error;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	689b      	ldr	r3, [r3, #8]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <_ZN7CPU_MOD11updateStateEi>:

void CPU_MOD::updateState(int s) {
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
    currentState[0] = s & 0xFF;
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	731a      	strb	r2, [r3, #12]
    current_state = s;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	611a      	str	r2, [r3, #16]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <_ZN11Current_MODC1Emi>:

// ********************************************************************************************************
// **Function name:           Current_MOD
// **Descriptions:            Initialization function of current class
// **********************************************************************************************************
Current_MOD::Current_MOD(uint32_t ID, int _C_MAX)
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2200      	movs	r2, #0
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2200      	movs	r2, #0
 80011a4:	721a      	strb	r2, [r3, #8]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2200      	movs	r2, #0
 80011aa:	725a      	strb	r2, [r3, #9]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2200      	movs	r2, #0
 80011c0:	615a      	str	r2, [r3, #20]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2200      	movs	r2, #0
 80011ce:	621a      	str	r2, [r3, #32]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80011d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	22fa      	movs	r2, #250	@ 0xfa
 80011dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2232      	movs	r2, #50	@ 0x32
 80011e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2232      	movs	r2, #50	@ 0x32
 80011e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2200      	movs	r2, #0
 80011ee:	635a      	str	r2, [r3, #52]	@ 0x34
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2200      	movs	r2, #0
 80011f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2200      	movs	r2, #0
 80011fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2200      	movs	r2, #0
 8001200:	641a      	str	r2, [r3, #64]	@ 0x40
{
    CANID = ID;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	68ba      	ldr	r2, [r7, #8]
 8001206:	605a      	str	r2, [r3, #4]
    C_MAX = _C_MAX;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	601a      	str	r2, [r3, #0]
    flag_error_current = 1;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2201      	movs	r2, #1
 8001212:	621a      	str	r2, [r3, #32]
}
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4618      	mov	r0, r3
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <_ZN11Current_MOD5queryEiPc>:
// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function that transforms the voltage measured by the sensor to its equivalent current
// **********************************************************************************************************
int Current_MOD::query(int time, char* buffer)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
    error = Current_OK;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2200      	movs	r2, #0
 8001234:	635a      	str	r2, [r3, #52]	@ 0x34

    VoltagemV = readAnalogValue();
 8001236:	f000 fd95 	bl	8001d64 <readAnalogValue>
 800123a:	eef0 7a40 	vmov.f32	s15, s0
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	edc3 7a04 	vstr	s15, [r3, #16]

    //printValue(VoltagemV);

    if(VoltagemV < 400){
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	edd3 7a04 	vldr	s15, [r3, #16]
 800124a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800128c <_ZN11Current_MOD5queryEiPc+0x68>
 800124e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	d509      	bpl.n	800126c <_ZN11Current_MOD5queryEiPc+0x48>
    	flag_error_current = 1;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2201      	movs	r2, #1
 800125c:	621a      	str	r2, [r3, #32]
    	flag_current = 1;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2201      	movs	r2, #1
 8001262:	641a      	str	r2, [r3, #64]	@ 0x40
    	error = 1;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2201      	movs	r2, #1
 8001268:	635a      	str	r2, [r3, #52]	@ 0x34
 800126a:	e008      	b.n	800127e <_ZN11Current_MOD5queryEiPc+0x5a>
    }
    else{
    	flag_error_current = 0;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2200      	movs	r2, #0
 8001270:	621a      	str	r2, [r3, #32]
    	flag_current = 0;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2200      	movs	r2, #0
 8001276:	641a      	str	r2, [r3, #64]	@ 0x40
    	error = Current_OK;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2200      	movs	r2, #0
 800127c:	635a      	str	r2, [r3, #52]	@ 0x34
        time_lim_plotted += TIME_LIM_PLOT;

    }
*/
    //info(buffer);
    return error;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	43c80000 	.word	0x43c80000

08001290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b085      	sub	sp, #20
 8001294:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001296:	f001 fb0b 	bl	80028b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800129a:	f000 f89d 	bl	80013d8 <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800129e:	f000 f917 	bl	80014d0 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a2:	f000 fbc1 	bl	8001a28 <_ZL12MX_GPIO_Initv>
  MX_FDCAN2_Init();
 80012a6:	f000 fad5 	bl	8001854 <_ZL14MX_FDCAN2_Initv>
  MX_FDCAN1_Init();
 80012aa:	f000 fa49 	bl	8001740 <_ZL14MX_FDCAN1_Initv>
  MX_USART2_UART_Init();
 80012ae:	f000 fb5b 	bl	8001968 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 80012b2:	f000 f941 	bl	8001538 <_ZL12MX_ADC1_Initv>
  MX_ADC3_Init();
 80012b6:	f000 f9c9 	bl	800164c <_ZL12MX_ADC3_Initv>
  /* USER CODE BEGIN 2 */

  if (HAL_FDCAN_Start(&hfdcan1) == HAL_OK){
 80012ba:	483d      	ldr	r0, [pc, #244]	@ (80013b0 <main+0x120>)
 80012bc:	f003 feae 	bl	800501c <HAL_FDCAN_Start>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	bf0c      	ite	eq
 80012c6:	2301      	moveq	r3, #1
 80012c8:	2300      	movne	r3, #0
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d002      	beq.n	80012d6 <main+0x46>
	  print((char*)"CAN_ACU iniciado");
 80012d0:	4838      	ldr	r0, [pc, #224]	@ (80013b4 <main+0x124>)
 80012d2:	f000 fd01 	bl	8001cd8 <print>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) == HAL_OK)
 80012d6:	2200      	movs	r2, #0
 80012d8:	2101      	movs	r1, #1
 80012da:	4835      	ldr	r0, [pc, #212]	@ (80013b0 <main+0x120>)
 80012dc:	f004 f890 	bl	8005400 <HAL_FDCAN_ActivateNotification>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	bf0c      	ite	eq
 80012e6:	2301      	moveq	r3, #1
 80012e8:	2300      	movne	r3, #0
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d002      	beq.n	80012f6 <main+0x66>
  {
	  print((char*)"CAN_ACU notification");
 80012f0:	4831      	ldr	r0, [pc, #196]	@ (80013b8 <main+0x128>)
 80012f2:	f000 fcf1 	bl	8001cd8 <print>
  }

  if (HAL_FDCAN_Start(&hfdcan2) == HAL_OK){
 80012f6:	4831      	ldr	r0, [pc, #196]	@ (80013bc <main+0x12c>)
 80012f8:	f003 fe90 	bl	800501c <HAL_FDCAN_Start>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	bf0c      	ite	eq
 8001302:	2301      	moveq	r3, #1
 8001304:	2300      	movne	r3, #0
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2b00      	cmp	r3, #0
 800130a:	d002      	beq.n	8001312 <main+0x82>
	  print((char*)"CAN_BMS iniciado");
 800130c:	482c      	ldr	r0, [pc, #176]	@ (80013c0 <main+0x130>)
 800130e:	f000 fce3 	bl	8001cd8 <print>
  }

  if(HAL_ADC_Start(&hadc3) == HAL_OK){
 8001312:	482c      	ldr	r0, [pc, #176]	@ (80013c4 <main+0x134>)
 8001314:	f002 f852 	bl	80033bc <HAL_ADC_Start>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	bf0c      	ite	eq
 800131e:	2301      	moveq	r3, #1
 8001320:	2300      	movne	r3, #0
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <main+0x9e>
	  print((char*)"ADC iniciado");
 8001328:	4827      	ldr	r0, [pc, #156]	@ (80013c8 <main+0x138>)
 800132a:	f000 fcd5 	bl	8001cd8 <print>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  select_state();
 800132e:	f000 fd43 	bl	8001db8 <_Z12select_statev>
		  msg_acu.bus = 1;
		  msg_acu.time = HAL_GetTick();
		  parse_state(msg_acu);
	  }*/

	  if (HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader_bms, RxData) == HAL_OK) {
 8001332:	4b26      	ldr	r3, [pc, #152]	@ (80013cc <main+0x13c>)
 8001334:	4a26      	ldr	r2, [pc, #152]	@ (80013d0 <main+0x140>)
 8001336:	2140      	movs	r1, #64	@ 0x40
 8001338:	4820      	ldr	r0, [pc, #128]	@ (80013bc <main+0x12c>)
 800133a:	f003 fef5 	bl	8005128 <HAL_FDCAN_GetRxMessage>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	bf0c      	ite	eq
 8001344:	2301      	moveq	r3, #1
 8001346:	2300      	movne	r3, #0
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0ef      	beq.n	800132e <main+0x9e>

		  msg_bms.id = RxHeader_bms.Identifier;
 800134e:	4b20      	ldr	r3, [pc, #128]	@ (80013d0 <main+0x140>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a20      	ldr	r2, [pc, #128]	@ (80013d4 <main+0x144>)
 8001354:	6013      	str	r3, [r2, #0]
		  msg_bms.len = RxHeader_bms.DataLength;
 8001356:	4b1e      	ldr	r3, [pc, #120]	@ (80013d0 <main+0x140>)
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	4b1d      	ldr	r3, [pc, #116]	@ (80013d4 <main+0x144>)
 800135e:	711a      	strb	r2, [r3, #4]
		  for (int i = 0; i < 8; i++) {msg_bms.buf[i] = RxData[i];}
 8001360:	2300      	movs	r3, #0
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	e00c      	b.n	8001380 <main+0xf0>
 8001366:	4a19      	ldr	r2, [pc, #100]	@ (80013cc <main+0x13c>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4413      	add	r3, r2
 800136c:	7819      	ldrb	r1, [r3, #0]
 800136e:	4a19      	ldr	r2, [pc, #100]	@ (80013d4 <main+0x144>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4413      	add	r3, r2
 8001374:	3305      	adds	r3, #5
 8001376:	460a      	mov	r2, r1
 8001378:	701a      	strb	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3301      	adds	r3, #1
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b07      	cmp	r3, #7
 8001384:	ddef      	ble.n	8001366 <main+0xd6>
		  msg_bms.bus = 2;
 8001386:	4b13      	ldr	r3, [pc, #76]	@ (80013d4 <main+0x144>)
 8001388:	2202      	movs	r2, #2
 800138a:	611a      	str	r2, [r3, #16]
		  msg_bms.time = HAL_GetTick();
 800138c:	f001 fb16 	bl	80029bc <HAL_GetTick>
 8001390:	4603      	mov	r3, r0
 8001392:	4a10      	ldr	r2, [pc, #64]	@ (80013d4 <main+0x144>)
 8001394:	6153      	str	r3, [r2, #20]

		  parse_state(msg_bms);
 8001396:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <main+0x144>)
 8001398:	466c      	mov	r4, sp
 800139a:	f103 0210 	add.w	r2, r3, #16
 800139e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013a2:	e884 0003 	stmia.w	r4, {r0, r1}
 80013a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013a8:	f000 fefe 	bl	80021a8 <_Z11parse_state6CANMsg>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80013ac:	e7bf      	b.n	800132e <main+0x9e>
 80013ae:	bf00      	nop
 80013b0:	24000164 	.word	0x24000164
 80013b4:	0800bab8 	.word	0x0800bab8
 80013b8:	0800bacc 	.word	0x0800bacc
 80013bc:	24000204 	.word	0x24000204
 80013c0:	0800bae4 	.word	0x0800bae4
 80013c4:	240000f4 	.word	0x240000f4
 80013c8:	0800baf8 	.word	0x0800baf8
 80013cc:	240003d0 	.word	0x240003d0
 80013d0:	240003a8 	.word	0x240003a8
 80013d4:	2400043c 	.word	0x2400043c

080013d8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b09c      	sub	sp, #112	@ 0x70
 80013dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e2:	224c      	movs	r2, #76	@ 0x4c
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f009 fd98 	bl	800af1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	2220      	movs	r2, #32
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f009 fd92 	bl	800af1c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013f8:	2002      	movs	r0, #2
 80013fa:	f004 ff63 	bl	80062c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80013fe:	2300      	movs	r3, #0
 8001400:	603b      	str	r3, [r7, #0]
 8001402:	4b32      	ldr	r3, [pc, #200]	@ (80014cc <_Z18SystemClock_Configv+0xf4>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	4a31      	ldr	r2, [pc, #196]	@ (80014cc <_Z18SystemClock_Configv+0xf4>)
 8001408:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800140c:	6193      	str	r3, [r2, #24]
 800140e:	4b2f      	ldr	r3, [pc, #188]	@ (80014cc <_Z18SystemClock_Configv+0xf4>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800141a:	bf00      	nop
 800141c:	4b2b      	ldr	r3, [pc, #172]	@ (80014cc <_Z18SystemClock_Configv+0xf4>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001424:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001428:	bf14      	ite	ne
 800142a:	2301      	movne	r3, #1
 800142c:	2300      	moveq	r3, #0
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1f3      	bne.n	800141c <_Z18SystemClock_Configv+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001434:	2301      	movs	r3, #1
 8001436:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001438:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800143c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143e:	2302      	movs	r3, #2
 8001440:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001442:	2302      	movs	r3, #2
 8001444:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001446:	2302      	movs	r3, #2
 8001448:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 800144a:	232c      	movs	r3, #44	@ 0x2c
 800144c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800144e:	2301      	movs	r3, #1
 8001450:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001452:	2304      	movs	r3, #4
 8001454:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001456:	2302      	movs	r3, #2
 8001458:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800145a:	230c      	movs	r3, #12
 800145c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800145e:	2300      	movs	r3, #0
 8001460:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001466:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800146a:	4618      	mov	r0, r3
 800146c:	f004 ff64 	bl	8006338 <HAL_RCC_OscConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	bf14      	ite	ne
 8001476:	2301      	movne	r3, #1
 8001478:	2300      	moveq	r3, #0
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8001480:	f000 fc92 	bl	8001da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001484:	233f      	movs	r3, #63	@ 0x3f
 8001486:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001488:	2303      	movs	r3, #3
 800148a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001490:	2308      	movs	r3, #8
 8001492:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001494:	2340      	movs	r3, #64	@ 0x40
 8001496:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001498:	2340      	movs	r3, #64	@ 0x40
 800149a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800149c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80014a2:	2340      	movs	r3, #64	@ 0x40
 80014a4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	2103      	movs	r1, #3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f005 fb1e 	bl	8006aec <HAL_RCC_ClockConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	bf14      	ite	ne
 80014b6:	2301      	movne	r3, #1
 80014b8:	2300      	moveq	r3, #0
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <_Z18SystemClock_Configv+0xec>
  {
    Error_Handler();
 80014c0:	f000 fc72 	bl	8001da8 <Error_Handler>
  }
}
 80014c4:	bf00      	nop
 80014c6:	3770      	adds	r7, #112	@ 0x70
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	58024800 	.word	0x58024800

080014d0 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b0ae      	sub	sp, #184	@ 0xb8
 80014d4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d6:	463b      	mov	r3, r7
 80014d8:	22b8      	movs	r2, #184	@ 0xb8
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f009 fd1d 	bl	800af1c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014e2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80014e6:	f04f 0300 	mov.w	r3, #0
 80014ea:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80014ee:	2302      	movs	r3, #2
 80014f0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80014f2:	2310      	movs	r3, #16
 80014f4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80014f6:	2302      	movs	r3, #2
 80014f8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80014fa:	2302      	movs	r3, #2
 80014fc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80014fe:	2302      	movs	r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001502:	23c0      	movs	r3, #192	@ 0xc0
 8001504:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800150e:	2300      	movs	r3, #0
 8001510:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001514:	463b      	mov	r3, r7
 8001516:	4618      	mov	r0, r3
 8001518:	f005 fe74 	bl	8007204 <HAL_RCCEx_PeriphCLKConfig>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	bf14      	ite	ne
 8001522:	2301      	movne	r3, #1
 8001524:	2300      	moveq	r3, #0
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <_Z24PeriphCommonClock_Configv+0x60>
  {
    Error_Handler();
 800152c:	f000 fc3c 	bl	8001da8 <Error_Handler>
  }
}
 8001530:	bf00      	nop
 8001532:	37b8      	adds	r7, #184	@ 0xb8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08c      	sub	sp, #48	@ 0x30
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800153e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800154a:	463b      	mov	r3, r7
 800154c:	2224      	movs	r2, #36	@ 0x24
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f009 fce3 	bl	800af1c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001556:	4b3a      	ldr	r3, [pc, #232]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 8001558:	4a3a      	ldr	r2, [pc, #232]	@ (8001644 <_ZL12MX_ADC1_Initv+0x10c>)
 800155a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800155c:	4b38      	ldr	r3, [pc, #224]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 800155e:	2200      	movs	r2, #0
 8001560:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001562:	4b37      	ldr	r3, [pc, #220]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 8001564:	2208      	movs	r2, #8
 8001566:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001568:	4b35      	ldr	r3, [pc, #212]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 800156a:	2200      	movs	r2, #0
 800156c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800156e:	4b34      	ldr	r3, [pc, #208]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 8001570:	2204      	movs	r2, #4
 8001572:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001574:	4b32      	ldr	r3, [pc, #200]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 8001576:	2200      	movs	r2, #0
 8001578:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800157a:	4b31      	ldr	r3, [pc, #196]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 800157c:	2200      	movs	r2, #0
 800157e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001580:	4b2f      	ldr	r3, [pc, #188]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 8001582:	2201      	movs	r2, #1
 8001584:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001586:	4b2e      	ldr	r3, [pc, #184]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800158e:	4b2c      	ldr	r3, [pc, #176]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 8001590:	2200      	movs	r2, #0
 8001592:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001594:	4b2a      	ldr	r3, [pc, #168]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 8001596:	2200      	movs	r2, #0
 8001598:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800159a:	4b29      	ldr	r3, [pc, #164]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 800159c:	2200      	movs	r2, #0
 800159e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015a0:	4b27      	ldr	r3, [pc, #156]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80015a6:	4b26      	ldr	r3, [pc, #152]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80015ac:	4b24      	ldr	r3, [pc, #144]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 80015b4:	4b22      	ldr	r3, [pc, #136]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015ba:	4821      	ldr	r0, [pc, #132]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 80015bc:	f001 fcf6 	bl	8002fac <HAL_ADC_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	bf14      	ite	ne
 80015c6:	2301      	movne	r3, #1
 80015c8:	2300      	moveq	r3, #0
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 80015d0:	f000 fbea 	bl	8001da8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015d4:	2300      	movs	r3, #0
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015dc:	4619      	mov	r1, r3
 80015de:	4818      	ldr	r0, [pc, #96]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 80015e0:	f003 f8d6 	bl	8004790 <HAL_ADCEx_MultiModeConfigChannel>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	bf14      	ite	ne
 80015ea:	2301      	movne	r3, #1
 80015ec:	2300      	moveq	r3, #0
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 80015f4:	f000 fbd8 	bl	8001da8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80015f8:	4b13      	ldr	r3, [pc, #76]	@ (8001648 <_ZL12MX_ADC1_Initv+0x110>)
 80015fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015fc:	2306      	movs	r3, #6
 80015fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001604:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001608:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800160a:	2304      	movs	r3, #4
 800160c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001618:	463b      	mov	r3, r7
 800161a:	4619      	mov	r1, r3
 800161c:	4808      	ldr	r0, [pc, #32]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 800161e:	f002 f8cd 	bl	80037bc <HAL_ADC_ConfigChannel>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	bf14      	ite	ne
 8001628:	2301      	movne	r3, #1
 800162a:	2300      	moveq	r3, #0
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <_ZL12MX_ADC1_Initv+0xfe>
  {
    Error_Handler();
 8001632:	f000 fbb9 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	3730      	adds	r7, #48	@ 0x30
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	24000084 	.word	0x24000084
 8001644:	40022000 	.word	0x40022000
 8001648:	08600004 	.word	0x08600004

0800164c <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	@ 0x28
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2224      	movs	r2, #36	@ 0x24
 8001656:	2100      	movs	r1, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f009 fc5f 	bl	800af1c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800165e:	4b35      	ldr	r3, [pc, #212]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 8001660:	4a35      	ldr	r2, [pc, #212]	@ (8001738 <_ZL12MX_ADC3_Initv+0xec>)
 8001662:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001664:	4b33      	ldr	r3, [pc, #204]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 8001666:	2200      	movs	r2, #0
 8001668:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 800166a:	4b32      	ldr	r3, [pc, #200]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 800166c:	220c      	movs	r2, #12
 800166e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001670:	4b30      	ldr	r3, [pc, #192]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001676:	4b2f      	ldr	r3, [pc, #188]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800167c:	4b2d      	ldr	r3, [pc, #180]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 800167e:	2204      	movs	r2, #4
 8001680:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001682:	4b2c      	ldr	r3, [pc, #176]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 8001684:	2200      	movs	r2, #0
 8001686:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001688:	4b2a      	ldr	r3, [pc, #168]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 800168a:	2200      	movs	r2, #0
 800168c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800168e:	4b29      	ldr	r3, [pc, #164]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 8001690:	2201      	movs	r2, #1
 8001692:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001694:	4b27      	ldr	r3, [pc, #156]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800169c:	4b25      	ldr	r3, [pc, #148]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 800169e:	2200      	movs	r2, #0
 80016a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016a2:	4b24      	ldr	r3, [pc, #144]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80016a8:	4b22      	ldr	r3, [pc, #136]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80016b0:	4b20      	ldr	r3, [pc, #128]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80016b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 80016be:	2200      	movs	r2, #0
 80016c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80016c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80016c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 80016d0:	4b18      	ldr	r3, [pc, #96]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80016d6:	4817      	ldr	r0, [pc, #92]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 80016d8:	f001 fc68 	bl	8002fac <HAL_ADC_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	bf14      	ite	ne
 80016e2:	2301      	movne	r3, #1
 80016e4:	2300      	moveq	r3, #0
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 80016ec:	f000 fb5c 	bl	8001da8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80016f0:	4b12      	ldr	r3, [pc, #72]	@ (800173c <_ZL12MX_ADC3_Initv+0xf0>)
 80016f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016f4:	2306      	movs	r3, #6
 80016f6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016fc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001700:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001702:	2304      	movs	r3, #4
 8001704:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 800170a:	2300      	movs	r3, #0
 800170c:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	4619      	mov	r1, r3
 8001712:	4808      	ldr	r0, [pc, #32]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 8001714:	f002 f852 	bl	80037bc <HAL_ADC_ConfigChannel>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	bf14      	ite	ne
 800171e:	2301      	movne	r3, #1
 8001720:	2300      	moveq	r3, #0
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <_ZL12MX_ADC3_Initv+0xe0>
  {
    Error_Handler();
 8001728:	f000 fb3e 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	3728      	adds	r7, #40	@ 0x28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	240000f4 	.word	0x240000f4
 8001738:	58026000 	.word	0x58026000
 800173c:	1d500080 	.word	0x1d500080

08001740 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001746:	4b41      	ldr	r3, [pc, #260]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001748:	4a41      	ldr	r2, [pc, #260]	@ (8001850 <_ZL14MX_FDCAN1_Initv+0x110>)
 800174a:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 800174c:	4b3f      	ldr	r3, [pc, #252]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 800174e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001752:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001754:	4b3d      	ldr	r3, [pc, #244]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001756:	2200      	movs	r2, #0
 8001758:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800175a:	4b3c      	ldr	r3, [pc, #240]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 800175c:	2200      	movs	r2, #0
 800175e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001760:	4b3a      	ldr	r3, [pc, #232]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001762:	2200      	movs	r2, #0
 8001764:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001766:	4b39      	ldr	r3, [pc, #228]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001768:	2200      	movs	r2, #0
 800176a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 800176c:	4b37      	ldr	r3, [pc, #220]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 800176e:	2206      	movs	r2, #6
 8001770:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001772:	4b36      	ldr	r3, [pc, #216]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001774:	2201      	movs	r2, #1
 8001776:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 8001778:	4b34      	ldr	r3, [pc, #208]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 800177a:	220a      	movs	r2, #10
 800177c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 800177e:	4b33      	ldr	r3, [pc, #204]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001780:	2205      	movs	r2, #5
 8001782:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001784:	4b31      	ldr	r3, [pc, #196]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001786:	2201      	movs	r2, #1
 8001788:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800178a:	4b30      	ldr	r3, [pc, #192]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 800178c:	2201      	movs	r2, #1
 800178e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001790:	4b2e      	ldr	r3, [pc, #184]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001792:	2201      	movs	r2, #1
 8001794:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001796:	4b2d      	ldr	r3, [pc, #180]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001798:	2201      	movs	r2, #1
 800179a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800179c:	4b2b      	ldr	r3, [pc, #172]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80017a2:	4b2a      	ldr	r3, [pc, #168]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 5;
 80017a8:	4b28      	ldr	r3, [pc, #160]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017aa:	2205      	movs	r2, #5
 80017ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 80017ae:	4b27      	ldr	r3, [pc, #156]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017b0:	2220      	movs	r2, #32
 80017b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80017b4:	4b25      	ldr	r3, [pc, #148]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017b6:	2204      	movs	r2, #4
 80017b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 80017ba:	4b24      	ldr	r3, [pc, #144]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017bc:	2220      	movs	r2, #32
 80017be:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80017c0:	4b22      	ldr	r3, [pc, #136]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017c2:	2204      	movs	r2, #4
 80017c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 80017c6:	4b21      	ldr	r3, [pc, #132]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80017cc:	4b1f      	ldr	r3, [pc, #124]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017ce:	2204      	movs	r2, #4
 80017d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 1;
 80017d2:	4b1e      	ldr	r3, [pc, #120]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 80017d8:	4b1c      	ldr	r3, [pc, #112]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017da:	2220      	movs	r2, #32
 80017dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 80017de:	4b1b      	ldr	r3, [pc, #108]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017e0:	2220      	movs	r2, #32
 80017e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80017e4:	4b19      	ldr	r3, [pc, #100]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80017ea:	4b18      	ldr	r3, [pc, #96]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017ec:	2204      	movs	r2, #4
 80017ee:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80017f0:	4816      	ldr	r0, [pc, #88]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017f2:	f003 f9bf 	bl	8004b74 <HAL_FDCAN_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf14      	ite	ne
 80017fc:	2301      	movne	r3, #1
 80017fe:	2300      	moveq	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <_ZL14MX_FDCAN1_Initv+0xca>
  {
    Error_Handler();
 8001806:	f000 facf 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800180a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800180e:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001814:	2302      	movs	r3, #2
 8001816:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001818:	2301      	movs	r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0;
 800181c:	2300      	movs	r3, #0
 800181e:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x0;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001824:	463b      	mov	r3, r7
 8001826:	4619      	mov	r1, r3
 8001828:	4808      	ldr	r0, [pc, #32]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 800182a:	f003 fb81 	bl	8004f30 <HAL_FDCAN_ConfigFilter>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	bf14      	ite	ne
 8001834:	2301      	movne	r3, #1
 8001836:	2300      	moveq	r3, #0
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <_ZL14MX_FDCAN1_Initv+0x102>
  {
    Error_Handler();
 800183e:	f000 fab3 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	3720      	adds	r7, #32
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	24000164 	.word	0x24000164
 8001850:	4000a000 	.word	0x4000a000

08001854 <_ZL14MX_FDCAN2_Initv>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800185a:	4b41      	ldr	r3, [pc, #260]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800185c:	4a41      	ldr	r2, [pc, #260]	@ (8001964 <_ZL14MX_FDCAN2_Initv+0x110>)
 800185e:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8001860:	4b3f      	ldr	r3, [pc, #252]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001862:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001866:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001868:	4b3d      	ldr	r3, [pc, #244]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800186e:	4b3c      	ldr	r3, [pc, #240]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001870:	2200      	movs	r2, #0
 8001872:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001874:	4b3a      	ldr	r3, [pc, #232]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001876:	2200      	movs	r2, #0
 8001878:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800187a:	4b39      	ldr	r3, [pc, #228]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800187c:	2200      	movs	r2, #0
 800187e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 8001880:	4b37      	ldr	r3, [pc, #220]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001882:	2206      	movs	r2, #6
 8001884:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001886:	4b36      	ldr	r3, [pc, #216]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001888:	2201      	movs	r2, #1
 800188a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 10;
 800188c:	4b34      	ldr	r3, [pc, #208]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800188e:	220a      	movs	r2, #10
 8001890:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8001892:	4b33      	ldr	r3, [pc, #204]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001894:	2205      	movs	r2, #5
 8001896:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001898:	4b31      	ldr	r3, [pc, #196]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800189a:	2201      	movs	r2, #1
 800189c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800189e:	4b30      	ldr	r3, [pc, #192]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80018a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80018aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80018b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 80018b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 5;
 80018bc:	4b28      	ldr	r3, [pc, #160]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018be:	2205      	movs	r2, #5
 80018c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 32;
 80018c2:	4b27      	ldr	r3, [pc, #156]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018c4:	2220      	movs	r2, #32
 80018c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80018c8:	4b25      	ldr	r3, [pc, #148]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018ca:	2204      	movs	r2, #4
 80018cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 32;
 80018ce:	4b24      	ldr	r3, [pc, #144]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018d0:	2220      	movs	r2, #32
 80018d2:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80018d4:	4b22      	ldr	r3, [pc, #136]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018d6:	2204      	movs	r2, #4
 80018d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 1;
 80018da:	4b21      	ldr	r3, [pc, #132]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018dc:	2201      	movs	r2, #1
 80018de:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80018e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018e2:	2204      	movs	r2, #4
 80018e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 1;
 80018e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 32;
 80018ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018ee:	2220      	movs	r2, #32
 80018f0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 32;
 80018f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018f4:	2220      	movs	r2, #32
 80018f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80018f8:	4b19      	ldr	r3, [pc, #100]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80018fe:	4b18      	ldr	r3, [pc, #96]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001900:	2204      	movs	r2, #4
 8001902:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001904:	4816      	ldr	r0, [pc, #88]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001906:	f003 f935 	bl	8004b74 <HAL_FDCAN_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	bf14      	ite	ne
 8001910:	2301      	movne	r3, #1
 8001912:	2300      	moveq	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <_ZL14MX_FDCAN2_Initv+0xca>
  {
    Error_Handler();
 800191a:	f000 fa45 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800191e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001922:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001928:	2302      	movs	r3, #2
 800192a:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800192c:	2301      	movs	r3, #1
 800192e:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x10;
 8001930:	2310      	movs	r3, #16
 8001932:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x10;
 8001934:	2310      	movs	r3, #16
 8001936:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8001938:	463b      	mov	r3, r7
 800193a:	4619      	mov	r1, r3
 800193c:	4808      	ldr	r0, [pc, #32]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800193e:	f003 faf7 	bl	8004f30 <HAL_FDCAN_ConfigFilter>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	bf14      	ite	ne
 8001948:	2301      	movne	r3, #1
 800194a:	2300      	moveq	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <_ZL14MX_FDCAN2_Initv+0x102>
  {
    Error_Handler();
 8001952:	f000 fa29 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE END FDCAN2_Init 2 */

}
 8001956:	bf00      	nop
 8001958:	3720      	adds	r7, #32
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	24000204 	.word	0x24000204
 8001964:	4000a400 	.word	0x4000a400

08001968 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800196c:	4b2c      	ldr	r3, [pc, #176]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800196e:	4a2d      	ldr	r2, [pc, #180]	@ (8001a24 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8001970:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001972:	4b2b      	ldr	r3, [pc, #172]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001974:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001978:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800197a:	4b29      	ldr	r3, [pc, #164]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001980:	4b27      	ldr	r3, [pc, #156]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001982:	2200      	movs	r2, #0
 8001984:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001986:	4b26      	ldr	r3, [pc, #152]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800198c:	4b24      	ldr	r3, [pc, #144]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800198e:	220c      	movs	r2, #12
 8001990:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001992:	4b23      	ldr	r3, [pc, #140]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001998:	4b21      	ldr	r3, [pc, #132]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800199a:	2200      	movs	r2, #0
 800199c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800199e:	4b20      	ldr	r3, [pc, #128]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019b0:	481b      	ldr	r0, [pc, #108]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80019b2:	f008 f80d 	bl	80099d0 <HAL_UART_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	bf14      	ite	ne
 80019bc:	2301      	movne	r3, #1
 80019be:	2300      	moveq	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 80019c6:	f000 f9ef 	bl	8001da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ca:	2100      	movs	r1, #0
 80019cc:	4814      	ldr	r0, [pc, #80]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80019ce:	f009 f9b8 	bl	800ad42 <HAL_UARTEx_SetTxFifoThreshold>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	bf14      	ite	ne
 80019d8:	2301      	movne	r3, #1
 80019da:	2300      	moveq	r3, #0
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 80019e2:	f000 f9e1 	bl	8001da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019e6:	2100      	movs	r1, #0
 80019e8:	480d      	ldr	r0, [pc, #52]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80019ea:	f009 f9e8 	bl	800adbe <HAL_UARTEx_SetRxFifoThreshold>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	bf14      	ite	ne
 80019f4:	2301      	movne	r3, #1
 80019f6:	2300      	moveq	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 80019fe:	f000 f9d3 	bl	8001da8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a02:	4807      	ldr	r0, [pc, #28]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001a04:	f009 f964 	bl	800acd0 <HAL_UARTEx_DisableFifoMode>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	bf14      	ite	ne
 8001a0e:	2301      	movne	r3, #1
 8001a10:	2300      	moveq	r3, #0
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8001a18:	f000 f9c6 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	240002a4 	.word	0x240002a4
 8001a24:	40004400 	.word	0x40004400

08001a28 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08c      	sub	sp, #48	@ 0x30
 8001a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
 8001a3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a3e:	4b50      	ldr	r3, [pc, #320]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a44:	4a4e      	ldr	r2, [pc, #312]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001a46:	f043 0320 	orr.w	r3, r3, #32
 8001a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a4e:	4b4c      	ldr	r3, [pc, #304]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a54:	f003 0320 	and.w	r3, r3, #32
 8001a58:	61bb      	str	r3, [r7, #24]
 8001a5a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a5c:	4b48      	ldr	r3, [pc, #288]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a62:	4a47      	ldr	r2, [pc, #284]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a6c:	4b44      	ldr	r3, [pc, #272]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7a:	4b41      	ldr	r3, [pc, #260]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a80:	4a3f      	ldr	r2, [pc, #252]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a8a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a98:	4b39      	ldr	r3, [pc, #228]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a9e:	4a38      	ldr	r2, [pc, #224]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001aa0:	f043 0310 	orr.w	r3, r3, #16
 8001aa4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aa8:	4b35      	ldr	r3, [pc, #212]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aae:	f003 0310 	and.w	r3, r3, #16
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab6:	4b32      	ldr	r3, [pc, #200]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001abc:	4a30      	ldr	r2, [pc, #192]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001abe:	f043 0302 	orr.w	r3, r3, #2
 8001ac2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ac6:	4b2e      	ldr	r3, [pc, #184]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ada:	4a29      	ldr	r2, [pc, #164]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001adc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ae4:	4b26      	ldr	r3, [pc, #152]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af2:	4b23      	ldr	r3, [pc, #140]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001af8:	4a21      	ldr	r2, [pc, #132]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001afa:	f043 0308 	orr.w	r3, r3, #8
 8001afe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b02:	4b1f      	ldr	r3, [pc, #124]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	603b      	str	r3, [r7, #0]
 8001b0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, GPIO_PIN_RESET);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2180      	movs	r1, #128	@ 0x80
 8001b14:	481b      	ldr	r0, [pc, #108]	@ (8001b84 <_ZL12MX_GPIO_Initv+0x15c>)
 8001b16:	f004 fbbb 	bl	8006290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin, GPIO_PIN_RESET);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2138      	movs	r1, #56	@ 0x38
 8001b1e:	481a      	ldr	r0, [pc, #104]	@ (8001b88 <_ZL12MX_GPIO_Initv+0x160>)
 8001b20:	f004 fbb6 	bl	8006290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIGITAL1_Pin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin;
 8001b24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIGITAL1_GPIO_Port, &GPIO_InitStruct);
 8001b32:	f107 031c 	add.w	r3, r7, #28
 8001b36:	4619      	mov	r1, r3
 8001b38:	4814      	ldr	r0, [pc, #80]	@ (8001b8c <_ZL12MX_GPIO_Initv+0x164>)
 8001b3a:	f004 f9e9 	bl	8005f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : AMS_OK_Pin */
  GPIO_InitStruct.Pin = AMS_OK_Pin;
 8001b3e:	2380      	movs	r3, #128	@ 0x80
 8001b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b42:	2301      	movs	r3, #1
 8001b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AMS_OK_GPIO_Port, &GPIO_InitStruct);
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	4619      	mov	r1, r3
 8001b54:	480b      	ldr	r0, [pc, #44]	@ (8001b84 <_ZL12MX_GPIO_Initv+0x15c>)
 8001b56:	f004 f9db 	bl	8005f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_AIR_N_Pin RELAY_AIR_P_Pin RELAY_PRECHARGE_Pin */
  GPIO_InitStruct.Pin = RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin;
 8001b5a:	2338      	movs	r3, #56	@ 0x38
 8001b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b6a:	f107 031c 	add.w	r3, r7, #28
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4805      	ldr	r0, [pc, #20]	@ (8001b88 <_ZL12MX_GPIO_Initv+0x160>)
 8001b72:	f004 f9cd 	bl	8005f10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b76:	bf00      	nop
 8001b78:	3730      	adds	r7, #48	@ 0x30
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	58024400 	.word	0x58024400
 8001b84:	58021800 	.word	0x58021800
 8001b88:	58020c00 	.word	0x58020c00
 8001b8c:	58021000 	.word	0x58021000

08001b90 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af02      	add	r7, sp, #8
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d04b      	beq.n	8001c3c <HAL_FDCAN_RxFifo0Callback+0xac>
	{
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_acu, RxData) == HAL_OK)
 8001ba4:	4b27      	ldr	r3, [pc, #156]	@ (8001c44 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001ba6:	4a28      	ldr	r2, [pc, #160]	@ (8001c48 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001ba8:	2140      	movs	r1, #64	@ 0x40
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f003 fabc 	bl	8005128 <HAL_FDCAN_GetRxMessage>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	bf0c      	ite	eq
 8001bb6:	2301      	moveq	r3, #1
 8001bb8:	2300      	movne	r3, #0
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d02e      	beq.n	8001c1e <HAL_FDCAN_RxFifo0Callback+0x8e>
    {
		msg_acu.id = RxHeader_acu.Identifier;
 8001bc0:	4b21      	ldr	r3, [pc, #132]	@ (8001c48 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a21      	ldr	r2, [pc, #132]	@ (8001c4c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001bc6:	6013      	str	r3, [r2, #0]
		msg_acu.len = RxHeader_acu.DataLength;
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c48 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	4b1f      	ldr	r3, [pc, #124]	@ (8001c4c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001bd0:	711a      	strb	r2, [r3, #4]
		for (int i = 0; i < 8; i++) {msg_acu.buf[i] = RxData[i];}
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	e00c      	b.n	8001bf2 <HAL_FDCAN_RxFifo0Callback+0x62>
 8001bd8:	4a1a      	ldr	r2, [pc, #104]	@ (8001c44 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	4413      	add	r3, r2
 8001bde:	7819      	ldrb	r1, [r3, #0]
 8001be0:	4a1a      	ldr	r2, [pc, #104]	@ (8001c4c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4413      	add	r3, r2
 8001be6:	3305      	adds	r3, #5
 8001be8:	460a      	mov	r2, r1
 8001bea:	701a      	strb	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2b07      	cmp	r3, #7
 8001bf6:	ddef      	ble.n	8001bd8 <HAL_FDCAN_RxFifo0Callback+0x48>
		msg_acu.bus = 1;
 8001bf8:	4b14      	ldr	r3, [pc, #80]	@ (8001c4c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	611a      	str	r2, [r3, #16]
		msg_acu.time = HAL_GetTick();
 8001bfe:	f000 fedd 	bl	80029bc <HAL_GetTick>
 8001c02:	4603      	mov	r3, r0
 8001c04:	4a11      	ldr	r2, [pc, #68]	@ (8001c4c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001c06:	6153      	str	r3, [r2, #20]
		parse_state(msg_acu);
 8001c08:	4b10      	ldr	r3, [pc, #64]	@ (8001c4c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001c0a:	466c      	mov	r4, sp
 8001c0c:	f103 0210 	add.w	r2, r3, #16
 8001c10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c14:	e884 0003 	stmia.w	r4, {r0, r1}
 8001c18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c1a:	f000 fac5 	bl	80021a8 <_Z11parse_state6CANMsg>

    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2101      	movs	r1, #1
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f003 fbec 	bl	8005400 <HAL_FDCAN_ActivateNotification>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	bf14      	ite	ne
 8001c2e:	2301      	movne	r3, #1
 8001c30:	2300      	moveq	r3, #0
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <HAL_FDCAN_RxFifo0Callback+0xac>
    {
      /* Notification Error */
      Error_Handler();
 8001c38:	f000 f8b6 	bl	8001da8 <Error_Handler>
    }
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd90      	pop	{r4, r7, pc}
 8001c44:	240003d0 	.word	0x240003d0
 8001c48:	24000380 	.word	0x24000380
 8001c4c:	24000454 	.word	0x24000454

08001c50 <module_send_message_CAN1>:

//extended ID
HAL_StatusTypeDef module_send_message_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 8001c5e:	4a0b      	ldr	r2, [pc, #44]	@ (8001c8c <module_send_message_CAN1+0x3c>)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_EXTENDED_ID;
 8001c64:	4b09      	ldr	r3, [pc, #36]	@ (8001c8c <module_send_message_CAN1+0x3c>)
 8001c66:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c6a:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	4a07      	ldr	r2, [pc, #28]	@ (8001c8c <module_send_message_CAN1+0x3c>)
 8001c70:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	4905      	ldr	r1, [pc, #20]	@ (8001c8c <module_send_message_CAN1+0x3c>)
 8001c76:	4806      	ldr	r0, [pc, #24]	@ (8001c90 <module_send_message_CAN1+0x40>)
 8001c78:	f003 f9fb 	bl	8005072 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	75fb      	strb	r3, [r7, #23]

	return status;
 8001c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	24000338 	.word	0x24000338
 8001c90:	24000164 	.word	0x24000164

08001c94 <module_send_message_CAN2>:
	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);

	return status;
}

HAL_StatusTypeDef module_send_message_CAN2(uint32_t id, uint8_t* data, uint8_t length) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	71fb      	strb	r3, [r7, #7]
	TxHeader_bms.Identifier = id;
 8001ca2:	4a0b      	ldr	r2, [pc, #44]	@ (8001cd0 <module_send_message_CAN2+0x3c>)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6013      	str	r3, [r2, #0]
	TxHeader_bms.IdType = FDCAN_EXTENDED_ID;
 8001ca8:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <module_send_message_CAN2+0x3c>)
 8001caa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cae:	605a      	str	r2, [r3, #4]
	TxHeader_bms.DataLength = length;
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	4a07      	ldr	r2, [pc, #28]	@ (8001cd0 <module_send_message_CAN2+0x3c>)
 8001cb4:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_bms, data);
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	4905      	ldr	r1, [pc, #20]	@ (8001cd0 <module_send_message_CAN2+0x3c>)
 8001cba:	4806      	ldr	r0, [pc, #24]	@ (8001cd4 <module_send_message_CAN2+0x40>)
 8001cbc:	f003 f9d9 	bl	8005072 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	75fb      	strb	r3, [r7, #23]

	return status;
 8001cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	2400035c 	.word	0x2400035c
 8001cd4:	24000204 	.word	0x24000204

08001cd8 <print>:

void print(char uart_buffer[]){
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	4909      	ldr	r1, [pc, #36]	@ (8001d08 <print+0x30>)
 8001ce4:	4809      	ldr	r0, [pc, #36]	@ (8001d0c <print+0x34>)
 8001ce6:	f009 f8f7 	bl	800aed8 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001cea:	4808      	ldr	r0, [pc, #32]	@ (8001d0c <print+0x34>)
 8001cec:	f7fe fb10 	bl	8000310 <strlen>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf8:	4904      	ldr	r1, [pc, #16]	@ (8001d0c <print+0x34>)
 8001cfa:	4805      	ldr	r0, [pc, #20]	@ (8001d10 <print+0x38>)
 8001cfc:	f007 feb8 	bl	8009a70 <HAL_UART_Transmit>
}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	0800bb08 	.word	0x0800bb08
 8001d0c:	240003d8 	.word	0x240003d8
 8001d10:	240002a4 	.word	0x240002a4

08001d14 <printnl>:

void printnl(char uart_buffer[]){
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s", uart_buffer);
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	4909      	ldr	r1, [pc, #36]	@ (8001d44 <printnl+0x30>)
 8001d20:	4809      	ldr	r0, [pc, #36]	@ (8001d48 <printnl+0x34>)
 8001d22:	f009 f8d9 	bl	800aed8 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001d26:	4808      	ldr	r0, [pc, #32]	@ (8001d48 <printnl+0x34>)
 8001d28:	f7fe faf2 	bl	8000310 <strlen>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	f04f 33ff 	mov.w	r3, #4294967295
 8001d34:	4904      	ldr	r1, [pc, #16]	@ (8001d48 <printnl+0x34>)
 8001d36:	4805      	ldr	r0, [pc, #20]	@ (8001d4c <printnl+0x38>)
 8001d38:	f007 fe9a 	bl	8009a70 <HAL_UART_Transmit>
}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	0800bb10 	.word	0x0800bb10
 8001d48:	240003d8 	.word	0x240003d8
 8001d4c:	240002a4 	.word	0x240002a4

08001d50 <getUARTState>:
void printValue(int value){
	sprintf(uart_msg, "%hu \n\r", value);
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
}

HAL_UART_StateTypeDef getUARTState(){
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
	return HAL_UART_GetState(&huart2);
 8001d54:	4802      	ldr	r0, [pc, #8]	@ (8001d60 <getUARTState+0x10>)
 8001d56:	f007 ff19 	bl	8009b8c <HAL_UART_GetState>
 8001d5a:	4603      	mov	r3, r0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	240002a4 	.word	0x240002a4

08001d64 <readAnalogValue>:

float readAnalogValue(void){
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
	float analogValue;

	HAL_ADC_Start(&hadc3);
 8001d6a:	480e      	ldr	r0, [pc, #56]	@ (8001da4 <readAnalogValue+0x40>)
 8001d6c:	f001 fb26 	bl	80033bc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295
 8001d74:	480b      	ldr	r0, [pc, #44]	@ (8001da4 <readAnalogValue+0x40>)
 8001d76:	f001 fc1f 	bl	80035b8 <HAL_ADC_PollForConversion>
	analogValue = HAL_ADC_GetValue(&hadc3);
 8001d7a:	480a      	ldr	r0, [pc, #40]	@ (8001da4 <readAnalogValue+0x40>)
 8001d7c:	f001 fd10 	bl	80037a0 <HAL_ADC_GetValue>
 8001d80:	ee07 0a90 	vmov	s15, r0
 8001d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d88:	edc7 7a01 	vstr	s15, [r7, #4]
	HAL_ADC_Stop(&hadc3);
 8001d8c:	4805      	ldr	r0, [pc, #20]	@ (8001da4 <readAnalogValue+0x40>)
 8001d8e:	f001 fbdf 	bl	8003550 <HAL_ADC_Stop>
	return analogValue;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	ee07 3a90 	vmov	s15, r3
}
 8001d98:	eeb0 0a67 	vmov.f32	s0, s15
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	240000f4 	.word	0x240000f4

08001da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dac:	b672      	cpsid	i
}
 8001dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001db0:	bf00      	nop
 8001db2:	e7fd      	b.n	8001db0 <Error_Handler+0x8>
 8001db4:	0000      	movs	r0, r0
	...

08001db8 <_Z12select_statev>:

/*********************************************************************************************************
 ** Function name:           select_state
 ** Descriptions:            check what should they do on the state machine
 *********************************************************************************************************/
void select_state() {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08a      	sub	sp, #40	@ 0x28
 8001dbc:	af00      	add	r7, sp, #0
	int state_air_n = 0;     // 0 means open, 1 closed     // Turn on SEVCON
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	627b      	str	r3, [r7, #36]	@ 0x24
	int state_air_p = 0;     // 0 means open, 1 closed     // Energize HV relay
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	623b      	str	r3, [r7, #32]
	int state_precharge = 0; // 0 means open, 1 closed
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
	int flag_cpu = CPU_ERROR_COMMUNICATION;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	613b      	str	r3, [r7, #16]
	int flag_current = Current_ERROR_Comunication;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	60fb      	str	r3, [r7, #12]
	 * 1 ms interruption => 1ms * 264MHz = 264000
	 * prescalado 264 (por ejemplo)
	 * timer count = 264000 / 264 = 1000
	 */

	uint32_t time = HAL_GetTick();
 8001dd2:	f000 fdf3 	bl	80029bc <HAL_GetTick>
 8001dd6:	60b8      	str	r0, [r7, #8]
	int time_s = HAL_GetTick();
 8001dd8:	f000 fdf0 	bl	80029bc <HAL_GetTick>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	607b      	str	r3, [r7, #4]

	CPU.voltage_acum = 0; // For precharge
 8001de0:	4ba7      	ldr	r3, [pc, #668]	@ (8002080 <_Z12select_statev+0x2c8>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	62da      	str	r2, [r3, #44]	@ 0x2c


	MIN_V = 4200; /// I reset the number each cycle cause if the voltages goes up again I wanna has it risen again on telemetry
 8001de6:	4ba7      	ldr	r3, [pc, #668]	@ (8002084 <_Z12select_statev+0x2cc>)
 8001de8:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001dec:	601a      	str	r2, [r3, #0]
	MAX_T = 0;
 8001dee:	4ba6      	ldr	r3, [pc, #664]	@ (8002088 <_Z12select_statev+0x2d0>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001df4:	2300      	movs	r3, #0
 8001df6:	61bb      	str	r3, [r7, #24]
 8001df8:	e07e      	b.n	8001ef8 <_Z12select_statev+0x140>
		BMS[i].voltage_acum = 0;                  // For precharge
 8001dfa:	4aa4      	ldr	r2, [pc, #656]	@ (800208c <_Z12select_statev+0x2d4>)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8001e02:	fb01 f303 	mul.w	r3, r1, r3
 8001e06:	4413      	add	r3, r2
 8001e08:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
		if (BMS[i].query_voltage(time, buffer) != BMS_OK) //I ask the BMS about voltages and cheking their states
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8001e16:	fb02 f303 	mul.w	r3, r2, r3
 8001e1a:	4a9c      	ldr	r2, [pc, #624]	@ (800208c <_Z12select_statev+0x2d4>)
 8001e1c:	4413      	add	r3, r2
 8001e1e:	4a9c      	ldr	r2, [pc, #624]	@ (8002090 <_Z12select_statev+0x2d8>)
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff f807 	bl	8000e36 <_ZN7BMS_MOD13query_voltageEmPc>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	bf14      	ite	ne
 8001e2e:	2301      	movne	r3, #1
 8001e30:	2300      	moveq	r3, #0
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <_Z12select_statev+0x86>
		{
			state = error;
 8001e38:	4b96      	ldr	r3, [pc, #600]	@ (8002094 <_Z12select_statev+0x2dc>)
 8001e3a:	2204      	movs	r2, #4
 8001e3c:	701a      	strb	r2, [r3, #0]
		}
		CPU.voltage_acum += BMS[i].voltage_acum; // For precharge
 8001e3e:	4b90      	ldr	r3, [pc, #576]	@ (8002080 <_Z12select_statev+0x2c8>)
 8001e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e42:	4992      	ldr	r1, [pc, #584]	@ (800208c <_Z12select_statev+0x2d4>)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	f44f 70b6 	mov.w	r0, #364	@ 0x16c
 8001e4a:	fb00 f303 	mul.w	r3, r0, r3
 8001e4e:	440b      	add	r3, r1
 8001e50:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	4a89      	ldr	r2, [pc, #548]	@ (8002080 <_Z12select_statev+0x2c8>)
 8001e5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if (BMS[i].MIN_V < MIN_V)
 8001e5c:	4a8b      	ldr	r2, [pc, #556]	@ (800208c <_Z12select_statev+0x2d4>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8001e64:	fb01 f303 	mul.w	r3, r1, r3
 8001e68:	4413      	add	r3, r2
 8001e6a:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4b84      	ldr	r3, [pc, #528]	@ (8002084 <_Z12select_statev+0x2cc>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	da0b      	bge.n	8001e90 <_Z12select_statev+0xd8>
			MIN_V = BMS[i].MIN_V; //Checking the minimun voltage of cell in the whole battery
 8001e78:	4a84      	ldr	r2, [pc, #528]	@ (800208c <_Z12select_statev+0x2d4>)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8001e80:	fb01 f303 	mul.w	r3, r1, r3
 8001e84:	4413      	add	r3, r2
 8001e86:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a7d      	ldr	r2, [pc, #500]	@ (8002084 <_Z12select_statev+0x2cc>)
 8001e8e:	6013      	str	r3, [r2, #0]

		if (BMS[i].query_temperature(time, buffer) != Temperatures_OK){
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8001e96:	fb02 f303 	mul.w	r3, r2, r3
 8001e9a:	4a7c      	ldr	r2, [pc, #496]	@ (800208c <_Z12select_statev+0x2d4>)
 8001e9c:	4413      	add	r3, r2
 8001e9e:	4a7c      	ldr	r2, [pc, #496]	@ (8002090 <_Z12select_statev+0x2d8>)
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff f836 	bl	8000f14 <_ZN7BMS_MOD17query_temperatureEmPc>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	bf14      	ite	ne
 8001eae:	2301      	movne	r3, #1
 8001eb0:	2300      	moveq	r3, #0
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <_Z12select_statev+0x106>
			state = error;
 8001eb8:	4b76      	ldr	r3, [pc, #472]	@ (8002094 <_Z12select_statev+0x2dc>)
 8001eba:	2204      	movs	r2, #4
 8001ebc:	701a      	strb	r2, [r3, #0]
		}

		if (BMS[i].MAX_T > MAX_T)
 8001ebe:	4a73      	ldr	r2, [pc, #460]	@ (800208c <_Z12select_statev+0x2d4>)
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8001ec6:	fb01 f303 	mul.w	r3, r1, r3
 8001eca:	4413      	add	r3, r2
 8001ecc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	4b6d      	ldr	r3, [pc, #436]	@ (8002088 <_Z12select_statev+0x2d0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	dd0b      	ble.n	8001ef2 <_Z12select_statev+0x13a>
			MAX_T = BMS[i].MAX_T;
 8001eda:	4a6c      	ldr	r2, [pc, #432]	@ (800208c <_Z12select_statev+0x2d4>)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8001ee2:	fb01 f303 	mul.w	r3, r1, r3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a66      	ldr	r2, [pc, #408]	@ (8002088 <_Z12select_statev+0x2d0>)
 8001ef0:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	61bb      	str	r3, [r7, #24]
 8001ef8:	4b67      	ldr	r3, [pc, #412]	@ (8002098 <_Z12select_statev+0x2e0>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	f6ff af7b 	blt.w	8001dfa <_Z12select_statev+0x42>
	}

	if (time_s > time_sending_minV + 500) {
 8001f04:	4b65      	ldr	r3, [pc, #404]	@ (800209c <_Z12select_statev+0x2e4>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	dd23      	ble.n	8001f5a <_Z12select_statev+0x1a2>
		message_MINV[1] = MIN_V & 0xFF;
 8001f12:	4b5c      	ldr	r3, [pc, #368]	@ (8002084 <_Z12select_statev+0x2cc>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	4b61      	ldr	r3, [pc, #388]	@ (80020a0 <_Z12select_statev+0x2e8>)
 8001f1a:	705a      	strb	r2, [r3, #1]
		message_MINV[0] = (MIN_V >> 8) & 0xFF;
 8001f1c:	4b59      	ldr	r3, [pc, #356]	@ (8002084 <_Z12select_statev+0x2cc>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	121b      	asrs	r3, r3, #8
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	4b5e      	ldr	r3, [pc, #376]	@ (80020a0 <_Z12select_statev+0x2e8>)
 8001f26:	701a      	strb	r2, [r3, #0]
		if (BMS[0].flag_charger != 1) {
 8001f28:	4b58      	ldr	r3, [pc, #352]	@ (800208c <_Z12select_statev+0x2d4>)
 8001f2a:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d010      	beq.n	8001f54 <_Z12select_statev+0x19c>
			if (module_send_message_CAN1(BMS_ID, message_MINV, 2) != HAL_OK)
 8001f32:	2202      	movs	r2, #2
 8001f34:	495a      	ldr	r1, [pc, #360]	@ (80020a0 <_Z12select_statev+0x2e8>)
 8001f36:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001f3a:	f7ff fe89 	bl	8001c50 <module_send_message_CAN1>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	bf14      	ite	ne
 8001f44:	2301      	movne	r3, #1
 8001f46:	2300      	moveq	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d002      	beq.n	8001f54 <_Z12select_statev+0x19c>
				print((char*) "Error al enviar tension minima"); //Sending the message through telemtry each 500 ms
 8001f4e:	4855      	ldr	r0, [pc, #340]	@ (80020a4 <_Z12select_statev+0x2ec>)
 8001f50:	f7ff fec2 	bl	8001cd8 <print>
		}
		time_sending_minV = time_s;
 8001f54:	4a51      	ldr	r2, [pc, #324]	@ (800209c <_Z12select_statev+0x2e4>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6013      	str	r3, [r2, #0]
	}
	for (int i = 0; i < BMS_N; i++) {
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	e00e      	b.n	8001f7e <_Z12select_statev+0x1c6>
		BMS[i].BALANCING_V = MIN_V; //Here I say I wanna balance all the cells in the battery to the minimun
 8001f60:	4b48      	ldr	r3, [pc, #288]	@ (8002084 <_Z12select_statev+0x2cc>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4949      	ldr	r1, [pc, #292]	@ (800208c <_Z12select_statev+0x2d4>)
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f44f 70b6 	mov.w	r0, #364	@ 0x16c
 8001f6c:	fb00 f303 	mul.w	r3, r0, r3
 8001f70:	440b      	add	r3, r1
 8001f72:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8001f76:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	4b46      	ldr	r3, [pc, #280]	@ (8002098 <_Z12select_statev+0x2e0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	dbeb      	blt.n	8001f60 <_Z12select_statev+0x1a8>

	}


	flag_cpu = CPU.query(time, buffer); //Asking the rest of the car how is it
 8001f88:	4a41      	ldr	r2, [pc, #260]	@ (8002090 <_Z12select_statev+0x2d8>)
 8001f8a:	68b9      	ldr	r1, [r7, #8]
 8001f8c:	483c      	ldr	r0, [pc, #240]	@ (8002080 <_Z12select_statev+0x2c8>)
 8001f8e:	f7ff f8b7 	bl	8001100 <_ZN7CPU_MOD5queryEmPc>
 8001f92:	6138      	str	r0, [r7, #16]

	flag_current = current.query(time, buffer); //asking current how is it
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	4a3e      	ldr	r2, [pc, #248]	@ (8002090 <_Z12select_statev+0x2d8>)
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4843      	ldr	r0, [pc, #268]	@ (80020a8 <_Z12select_statev+0x2f0>)
 8001f9c:	f7ff f942 	bl	8001224 <_ZN11Current_MOD5queryEiPc>
 8001fa0:	60f8      	str	r0, [r7, #12]
	print((char*)"voltage acu");
	printValue(CPU.voltage_acum);
	print((char*)"dc bus");
	printValue(CPU.DC_BUS);*/
	//printValue(state);
	switch (state) {
 8001fa2:	4b3c      	ldr	r3, [pc, #240]	@ (8002094 <_Z12select_statev+0x2dc>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	f200 80bd 	bhi.w	8002126 <_Z12select_statev+0x36e>
 8001fac:	a201      	add	r2, pc, #4	@ (adr r2, 8001fb4 <_Z12select_statev+0x1fc>)
 8001fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb2:	bf00      	nop
 8001fb4:	08001fc9 	.word	0x08001fc9
 8001fb8:	08001fed 	.word	0x08001fed
 8001fbc:	0800201f 	.word	0x0800201f
 8001fc0:	080020b1 	.word	0x080020b1
 8001fc4:	08002107 	.word	0x08002107
	case start:
		state_air_n = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	623b      	str	r3, [r7, #32]
		state_precharge = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_DISCONNECTED);
 8001fd4:	2102      	movs	r1, #2
 8001fd6:	482a      	ldr	r0, [pc, #168]	@ (8002080 <_Z12select_statev+0x2c8>)
 8001fd8:	f7ff f8c4 	bl	8001164 <_ZN7CPU_MOD11updateStateEi>
		if (flag_cpu != CPU_ERROR_COMMUNICATION)
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	f000 809c 	beq.w	800211c <_Z12select_statev+0x364>
			state = precharge; //If I do comunicate with the rest of the car, I go to precharge
 8001fe4:	4b2b      	ldr	r3, [pc, #172]	@ (8002094 <_Z12select_statev+0x2dc>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	701a      	strb	r2, [r3, #0]
		break;
 8001fea:	e097      	b.n	800211c <_Z12select_statev+0x364>
	case precharge:
		state_air_n = 1;
 8001fec:	2301      	movs	r3, #1
 8001fee:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	623b      	str	r3, [r7, #32]
		state_precharge = 1;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_PRECHARGE);
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	4821      	ldr	r0, [pc, #132]	@ (8002080 <_Z12select_statev+0x2c8>)
 8001ffc:	f7ff f8b2 	bl	8001164 <_ZN7CPU_MOD11updateStateEi>
		if (flag_cpu == CPU_OK) {
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d103      	bne.n	800200e <_Z12select_statev+0x256>
			state = transition;
 8002006:	4b23      	ldr	r3, [pc, #140]	@ (8002094 <_Z12select_statev+0x2dc>)
 8002008:	2202      	movs	r2, #2
 800200a:	701a      	strb	r2, [r3, #0]
		} else if (flag_cpu == CPU_ERROR_COMMUNICATION)
			state = error;
		 //else if(flag_current != Current_OK) state = error; //I take this out cause in precharge current can be very high, but probably can be uncommented,
		break;
 800200c:	e088      	b.n	8002120 <_Z12select_statev+0x368>
		} else if (flag_cpu == CPU_ERROR_COMMUNICATION)
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	2b01      	cmp	r3, #1
 8002012:	f040 8085 	bne.w	8002120 <_Z12select_statev+0x368>
			state = error;
 8002016:	4b1f      	ldr	r3, [pc, #124]	@ (8002094 <_Z12select_statev+0x2dc>)
 8002018:	2204      	movs	r2, #4
 800201a:	701a      	strb	r2, [r3, #0]
		break;
 800201c:	e080      	b.n	8002120 <_Z12select_statev+0x368>
	case transition:
		state_air_n = 1;
 800201e:	2301      	movs	r3, #1
 8002020:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	623b      	str	r3, [r7, #32]
		state_precharge = 1;
 8002026:	2301      	movs	r3, #1
 8002028:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_PRECHARGE);
 800202a:	2101      	movs	r1, #1
 800202c:	4814      	ldr	r0, [pc, #80]	@ (8002080 <_Z12select_statev+0x2c8>)
 800202e:	f7ff f899 	bl	8001164 <_ZN7CPU_MOD11updateStateEi>
		if ((((CPU.voltage_acum)/1000) * 0.9 < CPU.DC_BUS)){//&&(CPU.voltage_acum != 0)){
 8002032:	4b13      	ldr	r3, [pc, #76]	@ (8002080 <_Z12select_statev+0x2c8>)
 8002034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002036:	4a1d      	ldr	r2, [pc, #116]	@ (80020ac <_Z12select_statev+0x2f4>)
 8002038:	fb82 1203 	smull	r1, r2, r2, r3
 800203c:	1192      	asrs	r2, r2, #6
 800203e:	17db      	asrs	r3, r3, #31
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	ee07 3a90 	vmov	s15, r3
 8002046:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800204a:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8002078 <_Z12select_statev+0x2c0>
 800204e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002052:	4b0b      	ldr	r3, [pc, #44]	@ (8002080 <_Z12select_statev+0x2c8>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	ee07 3a90 	vmov	s15, r3
 800205a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800205e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002066:	d400      	bmi.n	800206a <_Z12select_statev+0x2b2>
			state = run; //If DC_BUS voltage is higher than 90% of battery voltage, precharge finish
		// else if((flag_cpu == CPU_ERROR_COMMUNICATION)&&(flag_charger == 1)) state = error;
		// else if(flag_current != Current_OK) state = error;
		}
		break;
 8002068:	e05d      	b.n	8002126 <_Z12select_statev+0x36e>
			state = run; //If DC_BUS voltage is higher than 90% of battery voltage, precharge finish
 800206a:	4b0a      	ldr	r3, [pc, #40]	@ (8002094 <_Z12select_statev+0x2dc>)
 800206c:	2203      	movs	r2, #3
 800206e:	701a      	strb	r2, [r3, #0]
		break;
 8002070:	e059      	b.n	8002126 <_Z12select_statev+0x36e>
 8002072:	bf00      	nop
 8002074:	f3af 8000 	nop.w
 8002078:	cccccccd 	.word	0xcccccccd
 800207c:	3feccccc 	.word	0x3feccccc
 8002080:	240005e4 	.word	0x240005e4
 8002084:	24000004 	.word	0x24000004
 8002088:	240005d8 	.word	0x240005d8
 800208c:	2400046c 	.word	0x2400046c
 8002090:	24000664 	.word	0x24000664
 8002094:	24000660 	.word	0x24000660
 8002098:	24000000 	.word	0x24000000
 800209c:	240005e0 	.word	0x240005e0
 80020a0:	240005dc 	.word	0x240005dc
 80020a4:	0800bb1c 	.word	0x0800bb1c
 80020a8:	2400061c 	.word	0x2400061c
 80020ac:	10624dd3 	.word	0x10624dd3
	case run:
		state_air_n = 1;
 80020b0:	2301      	movs	r3, #1
 80020b2:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 1;
 80020b4:	2301      	movs	r3, #1
 80020b6:	623b      	str	r3, [r7, #32]
		state_precharge = 1;
 80020b8:	2301      	movs	r3, #1
 80020ba:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_POWER);
 80020bc:	2100      	movs	r1, #0
 80020be:	4832      	ldr	r0, [pc, #200]	@ (8002188 <_Z12select_statev+0x3d0>)
 80020c0:	f7ff f850 	bl	8001164 <_ZN7CPU_MOD11updateStateEi>
		if ((flag_cpu == CPU_ERROR_COMMUNICATION) && (flag_charger == 1)){
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d109      	bne.n	80020de <_Z12select_statev+0x326>
 80020ca:	4b30      	ldr	r3, [pc, #192]	@ (800218c <_Z12select_statev+0x3d4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d105      	bne.n	80020de <_Z12select_statev+0x326>
			state = error; //If I disconnect the charger, error
 80020d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002190 <_Z12select_statev+0x3d8>)
 80020d4:	2204      	movs	r2, #4
 80020d6:	701a      	strb	r2, [r3, #0]
			print((char*)"CPU");
 80020d8:	482e      	ldr	r0, [pc, #184]	@ (8002194 <_Z12select_statev+0x3dc>)
 80020da:	f7ff fdfd 	bl	8001cd8 <print>
		}
		if (flag_current != Current_OK){
			//state = error; //If current is too high, error
		}
		if(HAL_GPIO_ReadPin(DIGITAL1_GPIO_Port, DIGITAL1_Pin) == GPIO_PIN_RESET){ //SDC IO
 80020de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020e2:	482d      	ldr	r0, [pc, #180]	@ (8002198 <_Z12select_statev+0x3e0>)
 80020e4:	f004 f8bc 	bl	8006260 <HAL_GPIO_ReadPin>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	bf0c      	ite	eq
 80020ee:	2301      	moveq	r3, #1
 80020f0:	2300      	movne	r3, #0
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d015      	beq.n	8002124 <_Z12select_statev+0x36c>
			state = error;
 80020f8:	4b25      	ldr	r3, [pc, #148]	@ (8002190 <_Z12select_statev+0x3d8>)
 80020fa:	2204      	movs	r2, #4
 80020fc:	701a      	strb	r2, [r3, #0]
			print((char*)"DIGITAL");
 80020fe:	4827      	ldr	r0, [pc, #156]	@ (800219c <_Z12select_statev+0x3e4>)
 8002100:	f7ff fdea 	bl	8001cd8 <print>
		}
		break;
 8002104:	e00e      	b.n	8002124 <_Z12select_statev+0x36c>
	case error:
		state_air_n = 0; //All relés closed
 8002106:	2300      	movs	r3, #0
 8002108:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	623b      	str	r3, [r7, #32]
		state_precharge = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_ERROR);
 8002112:	2103      	movs	r1, #3
 8002114:	481c      	ldr	r0, [pc, #112]	@ (8002188 <_Z12select_statev+0x3d0>)
 8002116:	f7ff f825 	bl	8001164 <_ZN7CPU_MOD11updateStateEi>
		break;
 800211a:	e004      	b.n	8002126 <_Z12select_statev+0x36e>
		break;
 800211c:	bf00      	nop
 800211e:	e002      	b.n	8002126 <_Z12select_statev+0x36e>
		break;
 8002120:	bf00      	nop
 8002122:	e000      	b.n	8002126 <_Z12select_statev+0x36e>
		break;
 8002124:	bf00      	nop
	 print(buffer);
	 sprintf(buffer, " - STATE:     %i\n", state);
	 print(buffer);
	 sprintf(buffer, "***********************\n");
	 print(buffer);*/
	HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin,
 8002126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <_Z12select_statev+0x378>
 800212c:	2301      	movs	r3, #1
 800212e:	e000      	b.n	8002132 <_Z12select_statev+0x37a>
 8002130:	2300      	movs	r3, #0
 8002132:	461a      	mov	r2, r3
 8002134:	2180      	movs	r1, #128	@ 0x80
 8002136:	481a      	ldr	r0, [pc, #104]	@ (80021a0 <_Z12select_statev+0x3e8>)
 8002138:	f004 f8aa 	bl	8006290 <HAL_GPIO_WritePin>
			state_air_n ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_AIR_N_GPIO_Port, RELAY_AIR_N_Pin,
 800213c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <_Z12select_statev+0x38e>
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <_Z12select_statev+0x390>
 8002146:	2300      	movs	r3, #0
 8002148:	461a      	mov	r2, r3
 800214a:	2108      	movs	r1, #8
 800214c:	4815      	ldr	r0, [pc, #84]	@ (80021a4 <_Z12select_statev+0x3ec>)
 800214e:	f004 f89f 	bl	8006290 <HAL_GPIO_WritePin>
			state_air_n ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_AIR_P_GPIO_Port, RELAY_AIR_P_Pin,
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <_Z12select_statev+0x3a4>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <_Z12select_statev+0x3a6>
 800215c:	2300      	movs	r3, #0
 800215e:	461a      	mov	r2, r3
 8002160:	2110      	movs	r1, #16
 8002162:	4810      	ldr	r0, [pc, #64]	@ (80021a4 <_Z12select_statev+0x3ec>)
 8002164:	f004 f894 	bl	8006290 <HAL_GPIO_WritePin>
			state_air_p ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_PRECHARGE_GPIO_Port, RELAY_PRECHARGE_Pin,
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <_Z12select_statev+0x3ba>
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <_Z12select_statev+0x3bc>
 8002172:	2300      	movs	r3, #0
 8002174:	461a      	mov	r2, r3
 8002176:	2120      	movs	r1, #32
 8002178:	480a      	ldr	r0, [pc, #40]	@ (80021a4 <_Z12select_statev+0x3ec>)
 800217a:	f004 f889 	bl	8006290 <HAL_GPIO_WritePin>
		printnl((char*)"Relee Prec:");
		printValue(state_precharge);
	}


}
 800217e:	bf00      	nop
 8002180:	3728      	adds	r7, #40	@ 0x28
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	240005e4 	.word	0x240005e4
 800218c:	24000618 	.word	0x24000618
 8002190:	24000660 	.word	0x24000660
 8002194:	0800bb3c 	.word	0x0800bb3c
 8002198:	58021000 	.word	0x58021000
 800219c:	0800bb40 	.word	0x0800bb40
 80021a0:	58021800 	.word	0x58021800
 80021a4:	58020c00 	.word	0x58020c00

080021a8 <_Z11parse_state6CANMsg>:

/*********************************************************************************************************
 ** Function name:           parse_state
 ** Descriptions:            Function for analysing the data from the CAN
 *********************************************************************************************************/
void parse_state(CANMsg data) {
 80021a8:	b084      	sub	sp, #16
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b084      	sub	sp, #16
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	f107 0c18 	add.w	ip, r7, #24
 80021b4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t time = HAL_GetTick();
 80021b8:	f000 fc00 	bl	80029bc <HAL_GetTick>
 80021bc:	6038      	str	r0, [r7, #0]
	bool flag_bms = false;
 80021be:	2300      	movs	r3, #0
 80021c0:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; i < BMS_N; i++) {
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	e017      	b.n	80021f8 <_Z11parse_state6CANMsg+0x50>
		flag_bms = BMS[i].parse(data.id, &data.buf[0], time); //Checking if the message received is for  BMS
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80021ce:	fb02 f303 	mul.w	r3, r2, r3
 80021d2:	4a26      	ldr	r2, [pc, #152]	@ (800226c <_Z11parse_state6CANMsg+0xc4>)
 80021d4:	1898      	adds	r0, r3, r2
 80021d6:	69b9      	ldr	r1, [r7, #24]
 80021d8:	f107 021d 	add.w	r2, r7, #29
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	f7fe fc9d 	bl	8000b1c <_ZN7BMS_MOD5parseEmPhm>
 80021e2:	4603      	mov	r3, r0
 80021e4:	73fb      	strb	r3, [r7, #15]
		if (flag_bms)
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d002      	beq.n	80021f2 <_Z11parse_state6CANMsg+0x4a>
			i = BMS_N;
 80021ec:	4b20      	ldr	r3, [pc, #128]	@ (8002270 <_Z11parse_state6CANMsg+0xc8>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < BMS_N; i++) {
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	3301      	adds	r3, #1
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002270 <_Z11parse_state6CANMsg+0xc8>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	429a      	cmp	r2, r3
 8002200:	dbe2      	blt.n	80021c8 <_Z11parse_state6CANMsg+0x20>
	}

	if (!flag_bms) {
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	f083 0301 	eor.w	r3, r3, #1
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d026      	beq.n	800225c <_Z11parse_state6CANMsg+0xb4>
		if (CPU.parse(data.id, &data.buf[0], time))
 800220e:	69b9      	ldr	r1, [r7, #24]
 8002210:	f107 021d 	add.w	r2, r7, #29
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	4817      	ldr	r0, [pc, #92]	@ (8002274 <_Z11parse_state6CANMsg+0xcc>)
 8002218:	f7fe ff2e 	bl	8001078 <_ZN7CPU_MOD5parseEmPhm>
			;                       //Cheking if message is for CPU
		if (data.id == 419385575) //If message from this direction received, it is because the charger is connected and the accu is for charging
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	4a16      	ldr	r2, [pc, #88]	@ (8002278 <_Z11parse_state6CANMsg+0xd0>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d11b      	bne.n	800225c <_Z11parse_state6CANMsg+0xb4>
				{
			for (int i = 0; i < BMS_N; i++) {
 8002224:	2300      	movs	r3, #0
 8002226:	607b      	str	r3, [r7, #4]
 8002228:	e00d      	b.n	8002246 <_Z11parse_state6CANMsg+0x9e>
				BMS[i].flag_charger = 1;
 800222a:	4a10      	ldr	r2, [pc, #64]	@ (800226c <_Z11parse_state6CANMsg+0xc4>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8002232:	fb01 f303 	mul.w	r3, r1, r3
 8002236:	4413      	add	r3, r2
 8002238:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800223c:	2201      	movs	r2, #1
 800223e:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < BMS_N; i++) {
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3301      	adds	r3, #1
 8002244:	607b      	str	r3, [r7, #4]
 8002246:	4b0a      	ldr	r3, [pc, #40]	@ (8002270 <_Z11parse_state6CANMsg+0xc8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	429a      	cmp	r2, r3
 800224e:	dbec      	blt.n	800222a <_Z11parse_state6CANMsg+0x82>
			}

			current.flag_charger = 1;
 8002250:	4b0a      	ldr	r3, [pc, #40]	@ (800227c <_Z11parse_state6CANMsg+0xd4>)
 8002252:	2201      	movs	r2, #1
 8002254:	63da      	str	r2, [r3, #60]	@ 0x3c
			flag_charger = 1;
 8002256:	4b0a      	ldr	r3, [pc, #40]	@ (8002280 <_Z11parse_state6CANMsg+0xd8>)
 8002258:	2201      	movs	r2, #1
 800225a:	601a      	str	r2, [r3, #0]
		} else {
			// Serial.print("ID: ");
			// Serial.println(data.id);
		}
	}
}
 800225c:	bf00      	nop
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002266:	b004      	add	sp, #16
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	2400046c 	.word	0x2400046c
 8002270:	24000000 	.word	0x24000000
 8002274:	240005e4 	.word	0x240005e4
 8002278:	18ff50e7 	.word	0x18ff50e7
 800227c:	2400061c 	.word	0x2400061c
 8002280:	24000618 	.word	0x24000618

08002284 <_Z41__static_initialization_and_destruction_0v>:
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af04      	add	r7, sp, #16
BMS_MOD BMS[] = {BMS_MOD(BMS_ID+60, BMS_MAXV, BMS_MINV,BMS_MAXT,19,BMS_SHUNT,100)};
 800228a:	4811      	ldr	r0, [pc, #68]	@ (80022d0 <_Z41__static_initialization_and_destruction_0v+0x4c>)
 800228c:	2364      	movs	r3, #100	@ 0x64
 800228e:	9303      	str	r3, [sp, #12]
 8002290:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002294:	9302      	str	r3, [sp, #8]
 8002296:	2313      	movs	r3, #19
 8002298:	9301      	str	r3, [sp, #4]
 800229a:	233c      	movs	r3, #60	@ 0x3c
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80022a2:	f241 0268 	movw	r2, #4200	@ 0x1068
 80022a6:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 80022aa:	f7fe fa1f 	bl	80006ec <_ZN7BMS_MODC1Emiiihji>
CPU_MOD CPU(CPU_ID_send, CPU_ID_recv, 500); //Same with CPU, rest of vehicle
 80022ae:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80022b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022b6:	2120      	movs	r1, #32
 80022b8:	4806      	ldr	r0, [pc, #24]	@ (80022d4 <_Z41__static_initialization_and_destruction_0v+0x50>)
 80022ba:	f7fe fe8b 	bl	8000fd4 <_ZN7CPU_MODC1Emmi>
Current_MOD current(Current_ID, Current_max); //Class for current measurement
 80022be:	22c8      	movs	r2, #200	@ 0xc8
 80022c0:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80022c4:	4804      	ldr	r0, [pc, #16]	@ (80022d8 <_Z41__static_initialization_and_destruction_0v+0x54>)
 80022c6:	f7fe ff5f 	bl	8001188 <_ZN11Current_MODC1Emi>
}
 80022ca:	bf00      	nop
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	2400046c 	.word	0x2400046c
 80022d4:	240005e4 	.word	0x240005e4
 80022d8:	2400061c 	.word	0x2400061c

080022dc <_GLOBAL__sub_I_BMS>:
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
 80022e0:	f7ff ffd0 	bl	8002284 <_Z41__static_initialization_and_destruction_0v>
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002318 <HAL_MspInit+0x30>)
 80022f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80022f4:	4a08      	ldr	r2, [pc, #32]	@ (8002318 <HAL_MspInit+0x30>)
 80022f6:	f043 0302 	orr.w	r3, r3, #2
 80022fa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80022fe:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <HAL_MspInit+0x30>)
 8002300:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	607b      	str	r3, [r7, #4]
 800230a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	58024400 	.word	0x58024400

0800231c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08c      	sub	sp, #48	@ 0x30
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 031c 	add.w	r3, r7, #28
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a31      	ldr	r2, [pc, #196]	@ (8002400 <HAL_ADC_MspInit+0xe4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d12b      	bne.n	8002396 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800233e:	4b31      	ldr	r3, [pc, #196]	@ (8002404 <HAL_ADC_MspInit+0xe8>)
 8002340:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002344:	4a2f      	ldr	r2, [pc, #188]	@ (8002404 <HAL_ADC_MspInit+0xe8>)
 8002346:	f043 0320 	orr.w	r3, r3, #32
 800234a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800234e:	4b2d      	ldr	r3, [pc, #180]	@ (8002404 <HAL_ADC_MspInit+0xe8>)
 8002350:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002354:	f003 0320 	and.w	r3, r3, #32
 8002358:	61bb      	str	r3, [r7, #24]
 800235a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800235c:	4b29      	ldr	r3, [pc, #164]	@ (8002404 <HAL_ADC_MspInit+0xe8>)
 800235e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002362:	4a28      	ldr	r2, [pc, #160]	@ (8002404 <HAL_ADC_MspInit+0xe8>)
 8002364:	f043 0320 	orr.w	r3, r3, #32
 8002368:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800236c:	4b25      	ldr	r3, [pc, #148]	@ (8002404 <HAL_ADC_MspInit+0xe8>)
 800236e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002372:	f003 0320 	and.w	r3, r3, #32
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800237a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800237e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002380:	2303      	movs	r3, #3
 8002382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002388:	f107 031c 	add.w	r3, r7, #28
 800238c:	4619      	mov	r1, r3
 800238e:	481e      	ldr	r0, [pc, #120]	@ (8002408 <HAL_ADC_MspInit+0xec>)
 8002390:	f003 fdbe 	bl	8005f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002394:	e02f      	b.n	80023f6 <HAL_ADC_MspInit+0xda>
  else if(hadc->Instance==ADC3)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a1c      	ldr	r2, [pc, #112]	@ (800240c <HAL_ADC_MspInit+0xf0>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d12a      	bne.n	80023f6 <HAL_ADC_MspInit+0xda>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80023a0:	4b18      	ldr	r3, [pc, #96]	@ (8002404 <HAL_ADC_MspInit+0xe8>)
 80023a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023a6:	4a17      	ldr	r2, [pc, #92]	@ (8002404 <HAL_ADC_MspInit+0xe8>)
 80023a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023b0:	4b14      	ldr	r3, [pc, #80]	@ (8002404 <HAL_ADC_MspInit+0xe8>)
 80023b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023ba:	613b      	str	r3, [r7, #16]
 80023bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80023be:	4b11      	ldr	r3, [pc, #68]	@ (8002404 <HAL_ADC_MspInit+0xe8>)
 80023c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002404 <HAL_ADC_MspInit+0xe8>)
 80023c6:	f043 0320 	orr.w	r3, r3, #32
 80023ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002404 <HAL_ADC_MspInit+0xe8>)
 80023d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023d4:	f003 0320 	and.w	r3, r3, #32
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023e2:	2303      	movs	r3, #3
 80023e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023ea:	f107 031c 	add.w	r3, r7, #28
 80023ee:	4619      	mov	r1, r3
 80023f0:	4805      	ldr	r0, [pc, #20]	@ (8002408 <HAL_ADC_MspInit+0xec>)
 80023f2:	f003 fd8d 	bl	8005f10 <HAL_GPIO_Init>
}
 80023f6:	bf00      	nop
 80023f8:	3730      	adds	r7, #48	@ 0x30
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40022000 	.word	0x40022000
 8002404:	58024400 	.word	0x58024400
 8002408:	58021400 	.word	0x58021400
 800240c:	58026000 	.word	0x58026000

08002410 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b0ba      	sub	sp, #232	@ 0xe8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002418:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	609a      	str	r2, [r3, #8]
 8002424:	60da      	str	r2, [r3, #12]
 8002426:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002428:	f107 0318 	add.w	r3, r7, #24
 800242c:	22b8      	movs	r2, #184	@ 0xb8
 800242e:	2100      	movs	r1, #0
 8002430:	4618      	mov	r0, r3
 8002432:	f008 fd73 	bl	800af1c <memset>
  if(hfdcan->Instance==FDCAN1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a5a      	ldr	r2, [pc, #360]	@ (80025a4 <HAL_FDCAN_MspInit+0x194>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d157      	bne.n	80024f0 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002440:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800244c:	2300      	movs	r3, #0
 800244e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002452:	f107 0318 	add.w	r3, r7, #24
 8002456:	4618      	mov	r0, r3
 8002458:	f004 fed4 	bl	8007204 <HAL_RCCEx_PeriphCLKConfig>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002462:	f7ff fca1 	bl	8001da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002466:	4b50      	ldr	r3, [pc, #320]	@ (80025a8 <HAL_FDCAN_MspInit+0x198>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	3301      	adds	r3, #1
 800246c:	4a4e      	ldr	r2, [pc, #312]	@ (80025a8 <HAL_FDCAN_MspInit+0x198>)
 800246e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002470:	4b4d      	ldr	r3, [pc, #308]	@ (80025a8 <HAL_FDCAN_MspInit+0x198>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d10e      	bne.n	8002496 <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002478:	4b4c      	ldr	r3, [pc, #304]	@ (80025ac <HAL_FDCAN_MspInit+0x19c>)
 800247a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800247e:	4a4b      	ldr	r2, [pc, #300]	@ (80025ac <HAL_FDCAN_MspInit+0x19c>)
 8002480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002484:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002488:	4b48      	ldr	r3, [pc, #288]	@ (80025ac <HAL_FDCAN_MspInit+0x19c>)
 800248a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800248e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002496:	4b45      	ldr	r3, [pc, #276]	@ (80025ac <HAL_FDCAN_MspInit+0x19c>)
 8002498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800249c:	4a43      	ldr	r2, [pc, #268]	@ (80025ac <HAL_FDCAN_MspInit+0x19c>)
 800249e:	f043 0308 	orr.w	r3, r3, #8
 80024a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024a6:	4b41      	ldr	r3, [pc, #260]	@ (80025ac <HAL_FDCAN_MspInit+0x19c>)
 80024a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024b4:	2303      	movs	r3, #3
 80024b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c6:	2300      	movs	r3, #0
 80024c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80024cc:	2309      	movs	r3, #9
 80024ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024d2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80024d6:	4619      	mov	r1, r3
 80024d8:	4835      	ldr	r0, [pc, #212]	@ (80025b0 <HAL_FDCAN_MspInit+0x1a0>)
 80024da:	f003 fd19 	bl	8005f10 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80024de:	2200      	movs	r2, #0
 80024e0:	2100      	movs	r1, #0
 80024e2:	2013      	movs	r0, #19
 80024e4:	f002 fb11 	bl	8004b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80024e8:	2013      	movs	r0, #19
 80024ea:	f002 fb28 	bl	8004b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80024ee:	e054      	b.n	800259a <HAL_FDCAN_MspInit+0x18a>
  else if(hfdcan->Instance==FDCAN2)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a2f      	ldr	r2, [pc, #188]	@ (80025b4 <HAL_FDCAN_MspInit+0x1a4>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d14f      	bne.n	800259a <HAL_FDCAN_MspInit+0x18a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80024fa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002506:	2300      	movs	r3, #0
 8002508:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800250c:	f107 0318 	add.w	r3, r7, #24
 8002510:	4618      	mov	r0, r3
 8002512:	f004 fe77 	bl	8007204 <HAL_RCCEx_PeriphCLKConfig>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 800251c:	f7ff fc44 	bl	8001da8 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002520:	4b21      	ldr	r3, [pc, #132]	@ (80025a8 <HAL_FDCAN_MspInit+0x198>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	3301      	adds	r3, #1
 8002526:	4a20      	ldr	r2, [pc, #128]	@ (80025a8 <HAL_FDCAN_MspInit+0x198>)
 8002528:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800252a:	4b1f      	ldr	r3, [pc, #124]	@ (80025a8 <HAL_FDCAN_MspInit+0x198>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d10e      	bne.n	8002550 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002532:	4b1e      	ldr	r3, [pc, #120]	@ (80025ac <HAL_FDCAN_MspInit+0x19c>)
 8002534:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002538:	4a1c      	ldr	r2, [pc, #112]	@ (80025ac <HAL_FDCAN_MspInit+0x19c>)
 800253a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800253e:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002542:	4b1a      	ldr	r3, [pc, #104]	@ (80025ac <HAL_FDCAN_MspInit+0x19c>)
 8002544:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002550:	4b16      	ldr	r3, [pc, #88]	@ (80025ac <HAL_FDCAN_MspInit+0x19c>)
 8002552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002556:	4a15      	ldr	r2, [pc, #84]	@ (80025ac <HAL_FDCAN_MspInit+0x19c>)
 8002558:	f043 0302 	orr.w	r3, r3, #2
 800255c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002560:	4b12      	ldr	r3, [pc, #72]	@ (80025ac <HAL_FDCAN_MspInit+0x19c>)
 8002562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800256e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002572:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002576:	2302      	movs	r3, #2
 8002578:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002582:	2300      	movs	r3, #0
 8002584:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002588:	2309      	movs	r3, #9
 800258a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002592:	4619      	mov	r1, r3
 8002594:	4808      	ldr	r0, [pc, #32]	@ (80025b8 <HAL_FDCAN_MspInit+0x1a8>)
 8002596:	f003 fcbb 	bl	8005f10 <HAL_GPIO_Init>
}
 800259a:	bf00      	nop
 800259c:	37e8      	adds	r7, #232	@ 0xe8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	4000a000 	.word	0x4000a000
 80025a8:	240006b4 	.word	0x240006b4
 80025ac:	58024400 	.word	0x58024400
 80025b0:	58020c00 	.word	0x58020c00
 80025b4:	4000a400 	.word	0x4000a400
 80025b8:	58020400 	.word	0x58020400

080025bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b0b8      	sub	sp, #224	@ 0xe0
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	60da      	str	r2, [r3, #12]
 80025d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025d4:	f107 0310 	add.w	r3, r7, #16
 80025d8:	22b8      	movs	r2, #184	@ 0xb8
 80025da:	2100      	movs	r1, #0
 80025dc:	4618      	mov	r0, r3
 80025de:	f008 fc9d 	bl	800af1c <memset>
  if(huart->Instance==USART2)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a26      	ldr	r2, [pc, #152]	@ (8002680 <HAL_UART_MspInit+0xc4>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d145      	bne.n	8002678 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025ec:	f04f 0202 	mov.w	r2, #2
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025fe:	f107 0310 	add.w	r3, r7, #16
 8002602:	4618      	mov	r0, r3
 8002604:	f004 fdfe 	bl	8007204 <HAL_RCCEx_PeriphCLKConfig>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800260e:	f7ff fbcb 	bl	8001da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002612:	4b1c      	ldr	r3, [pc, #112]	@ (8002684 <HAL_UART_MspInit+0xc8>)
 8002614:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002618:	4a1a      	ldr	r2, [pc, #104]	@ (8002684 <HAL_UART_MspInit+0xc8>)
 800261a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800261e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002622:	4b18      	ldr	r3, [pc, #96]	@ (8002684 <HAL_UART_MspInit+0xc8>)
 8002624:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002628:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002630:	4b14      	ldr	r3, [pc, #80]	@ (8002684 <HAL_UART_MspInit+0xc8>)
 8002632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002636:	4a13      	ldr	r2, [pc, #76]	@ (8002684 <HAL_UART_MspInit+0xc8>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002640:	4b10      	ldr	r3, [pc, #64]	@ (8002684 <HAL_UART_MspInit+0xc8>)
 8002642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800264e:	230c      	movs	r3, #12
 8002650:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002654:	2302      	movs	r3, #2
 8002656:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002660:	2300      	movs	r3, #0
 8002662:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002666:	2307      	movs	r3, #7
 8002668:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002670:	4619      	mov	r1, r3
 8002672:	4805      	ldr	r0, [pc, #20]	@ (8002688 <HAL_UART_MspInit+0xcc>)
 8002674:	f003 fc4c 	bl	8005f10 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002678:	bf00      	nop
 800267a:	37e0      	adds	r7, #224	@ 0xe0
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40004400 	.word	0x40004400
 8002684:	58024400 	.word	0x58024400
 8002688:	58020000 	.word	0x58020000

0800268c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002690:	bf00      	nop
 8002692:	e7fd      	b.n	8002690 <NMI_Handler+0x4>

08002694 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002698:	bf00      	nop
 800269a:	e7fd      	b.n	8002698 <HardFault_Handler+0x4>

0800269c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026a0:	bf00      	nop
 80026a2:	e7fd      	b.n	80026a0 <MemManage_Handler+0x4>

080026a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026a8:	bf00      	nop
 80026aa:	e7fd      	b.n	80026a8 <BusFault_Handler+0x4>

080026ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026b0:	bf00      	nop
 80026b2:	e7fd      	b.n	80026b0 <UsageFault_Handler+0x4>

080026b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026c2:	b480      	push	{r7}
 80026c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026e2:	f000 f957 	bl	8002994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80026f0:	4802      	ldr	r0, [pc, #8]	@ (80026fc <FDCAN1_IT0_IRQHandler+0x10>)
 80026f2:	f002 feff 	bl	80054f4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	24000164 	.word	0x24000164

08002700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002708:	4a14      	ldr	r2, [pc, #80]	@ (800275c <_sbrk+0x5c>)
 800270a:	4b15      	ldr	r3, [pc, #84]	@ (8002760 <_sbrk+0x60>)
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002714:	4b13      	ldr	r3, [pc, #76]	@ (8002764 <_sbrk+0x64>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d102      	bne.n	8002722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800271c:	4b11      	ldr	r3, [pc, #68]	@ (8002764 <_sbrk+0x64>)
 800271e:	4a12      	ldr	r2, [pc, #72]	@ (8002768 <_sbrk+0x68>)
 8002720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002722:	4b10      	ldr	r3, [pc, #64]	@ (8002764 <_sbrk+0x64>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4413      	add	r3, r2
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	429a      	cmp	r2, r3
 800272e:	d207      	bcs.n	8002740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002730:	f008 fbfc 	bl	800af2c <__errno>
 8002734:	4603      	mov	r3, r0
 8002736:	220c      	movs	r2, #12
 8002738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800273a:	f04f 33ff 	mov.w	r3, #4294967295
 800273e:	e009      	b.n	8002754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002740:	4b08      	ldr	r3, [pc, #32]	@ (8002764 <_sbrk+0x64>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002746:	4b07      	ldr	r3, [pc, #28]	@ (8002764 <_sbrk+0x64>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4413      	add	r3, r2
 800274e:	4a05      	ldr	r2, [pc, #20]	@ (8002764 <_sbrk+0x64>)
 8002750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002752:	68fb      	ldr	r3, [r7, #12]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	24050000 	.word	0x24050000
 8002760:	00000400 	.word	0x00000400
 8002764:	240006b8 	.word	0x240006b8
 8002768:	24000808 	.word	0x24000808

0800276c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002770:	4b32      	ldr	r3, [pc, #200]	@ (800283c <SystemInit+0xd0>)
 8002772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002776:	4a31      	ldr	r2, [pc, #196]	@ (800283c <SystemInit+0xd0>)
 8002778:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800277c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002780:	4b2f      	ldr	r3, [pc, #188]	@ (8002840 <SystemInit+0xd4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 030f 	and.w	r3, r3, #15
 8002788:	2b06      	cmp	r3, #6
 800278a:	d807      	bhi.n	800279c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800278c:	4b2c      	ldr	r3, [pc, #176]	@ (8002840 <SystemInit+0xd4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f023 030f 	bic.w	r3, r3, #15
 8002794:	4a2a      	ldr	r2, [pc, #168]	@ (8002840 <SystemInit+0xd4>)
 8002796:	f043 0307 	orr.w	r3, r3, #7
 800279a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800279c:	4b29      	ldr	r3, [pc, #164]	@ (8002844 <SystemInit+0xd8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a28      	ldr	r2, [pc, #160]	@ (8002844 <SystemInit+0xd8>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80027a8:	4b26      	ldr	r3, [pc, #152]	@ (8002844 <SystemInit+0xd8>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80027ae:	4b25      	ldr	r3, [pc, #148]	@ (8002844 <SystemInit+0xd8>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	4924      	ldr	r1, [pc, #144]	@ (8002844 <SystemInit+0xd8>)
 80027b4:	4b24      	ldr	r3, [pc, #144]	@ (8002848 <SystemInit+0xdc>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027ba:	4b21      	ldr	r3, [pc, #132]	@ (8002840 <SystemInit+0xd4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d007      	beq.n	80027d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002840 <SystemInit+0xd4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f023 030f 	bic.w	r3, r3, #15
 80027ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002840 <SystemInit+0xd4>)
 80027d0:	f043 0307 	orr.w	r3, r3, #7
 80027d4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80027d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002844 <SystemInit+0xd8>)
 80027d8:	2200      	movs	r2, #0
 80027da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80027dc:	4b19      	ldr	r3, [pc, #100]	@ (8002844 <SystemInit+0xd8>)
 80027de:	2200      	movs	r2, #0
 80027e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80027e2:	4b18      	ldr	r3, [pc, #96]	@ (8002844 <SystemInit+0xd8>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80027e8:	4b16      	ldr	r3, [pc, #88]	@ (8002844 <SystemInit+0xd8>)
 80027ea:	4a18      	ldr	r2, [pc, #96]	@ (800284c <SystemInit+0xe0>)
 80027ec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80027ee:	4b15      	ldr	r3, [pc, #84]	@ (8002844 <SystemInit+0xd8>)
 80027f0:	4a17      	ldr	r2, [pc, #92]	@ (8002850 <SystemInit+0xe4>)
 80027f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80027f4:	4b13      	ldr	r3, [pc, #76]	@ (8002844 <SystemInit+0xd8>)
 80027f6:	4a17      	ldr	r2, [pc, #92]	@ (8002854 <SystemInit+0xe8>)
 80027f8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80027fa:	4b12      	ldr	r3, [pc, #72]	@ (8002844 <SystemInit+0xd8>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002800:	4b10      	ldr	r3, [pc, #64]	@ (8002844 <SystemInit+0xd8>)
 8002802:	4a14      	ldr	r2, [pc, #80]	@ (8002854 <SystemInit+0xe8>)
 8002804:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002806:	4b0f      	ldr	r3, [pc, #60]	@ (8002844 <SystemInit+0xd8>)
 8002808:	2200      	movs	r2, #0
 800280a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800280c:	4b0d      	ldr	r3, [pc, #52]	@ (8002844 <SystemInit+0xd8>)
 800280e:	4a11      	ldr	r2, [pc, #68]	@ (8002854 <SystemInit+0xe8>)
 8002810:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002812:	4b0c      	ldr	r3, [pc, #48]	@ (8002844 <SystemInit+0xd8>)
 8002814:	2200      	movs	r2, #0
 8002816:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002818:	4b0a      	ldr	r3, [pc, #40]	@ (8002844 <SystemInit+0xd8>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a09      	ldr	r2, [pc, #36]	@ (8002844 <SystemInit+0xd8>)
 800281e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002822:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002824:	4b07      	ldr	r3, [pc, #28]	@ (8002844 <SystemInit+0xd8>)
 8002826:	2200      	movs	r2, #0
 8002828:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800282a:	4b0b      	ldr	r3, [pc, #44]	@ (8002858 <SystemInit+0xec>)
 800282c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002830:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002832:	bf00      	nop
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000ed00 	.word	0xe000ed00
 8002840:	52002000 	.word	0x52002000
 8002844:	58024400 	.word	0x58024400
 8002848:	eaf6ed7f 	.word	0xeaf6ed7f
 800284c:	02020200 	.word	0x02020200
 8002850:	01ff0000 	.word	0x01ff0000
 8002854:	01010280 	.word	0x01010280
 8002858:	52004000 	.word	0x52004000

0800285c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800285c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002894 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002860:	f7ff ff84 	bl	800276c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002864:	480c      	ldr	r0, [pc, #48]	@ (8002898 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002866:	490d      	ldr	r1, [pc, #52]	@ (800289c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002868:	4a0d      	ldr	r2, [pc, #52]	@ (80028a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800286a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800286c:	e002      	b.n	8002874 <LoopCopyDataInit>

0800286e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800286e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002872:	3304      	adds	r3, #4

08002874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002878:	d3f9      	bcc.n	800286e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800287a:	4a0a      	ldr	r2, [pc, #40]	@ (80028a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800287c:	4c0a      	ldr	r4, [pc, #40]	@ (80028a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800287e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002880:	e001      	b.n	8002886 <LoopFillZerobss>

08002882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002882:	6013      	str	r3, [r2, #0]
   adds r2, r2, #4
 8002884:	3204      	adds	r2, #4

08002886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002888:	d3fb      	bcc.n	8002882 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800288a:	f008 fb55 	bl	800af38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800288e:	f7fe fcff 	bl	8001290 <main>
  bx  lr
 8002892:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002894:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002898:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800289c:	24000068 	.word	0x24000068
  ldr r2, =_sidata
 80028a0:	0800bc24 	.word	0x0800bc24
  ldr r2, =_sbss
 80028a4:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 80028a8:	24000808 	.word	0x24000808

080028ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028ac:	e7fe      	b.n	80028ac <ADC3_IRQHandler>
	...

080028b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028b6:	2003      	movs	r0, #3
 80028b8:	f002 f91c 	bl	8004af4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80028bc:	f004 facc 	bl	8006e58 <HAL_RCC_GetSysClockFreq>
 80028c0:	4602      	mov	r2, r0
 80028c2:	4b15      	ldr	r3, [pc, #84]	@ (8002918 <HAL_Init+0x68>)
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	0a1b      	lsrs	r3, r3, #8
 80028c8:	f003 030f 	and.w	r3, r3, #15
 80028cc:	4913      	ldr	r1, [pc, #76]	@ (800291c <HAL_Init+0x6c>)
 80028ce:	5ccb      	ldrb	r3, [r1, r3]
 80028d0:	f003 031f 	and.w	r3, r3, #31
 80028d4:	fa22 f303 	lsr.w	r3, r2, r3
 80028d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028da:	4b0f      	ldr	r3, [pc, #60]	@ (8002918 <HAL_Init+0x68>)
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	4a0e      	ldr	r2, [pc, #56]	@ (800291c <HAL_Init+0x6c>)
 80028e4:	5cd3      	ldrb	r3, [r2, r3]
 80028e6:	f003 031f 	and.w	r3, r3, #31
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
 80028f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002920 <HAL_Init+0x70>)
 80028f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028f4:	4a0b      	ldr	r2, [pc, #44]	@ (8002924 <HAL_Init+0x74>)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028fa:	200f      	movs	r0, #15
 80028fc:	f000 f814 	bl	8002928 <HAL_InitTick>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e002      	b.n	8002910 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800290a:	f7ff fced 	bl	80022e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	58024400 	.word	0x58024400
 800291c:	0800bb94 	.word	0x0800bb94
 8002920:	2400000c 	.word	0x2400000c
 8002924:	24000008 	.word	0x24000008

08002928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002930:	4b15      	ldr	r3, [pc, #84]	@ (8002988 <HAL_InitTick+0x60>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e021      	b.n	8002980 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800293c:	4b13      	ldr	r3, [pc, #76]	@ (800298c <HAL_InitTick+0x64>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4b11      	ldr	r3, [pc, #68]	@ (8002988 <HAL_InitTick+0x60>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	4619      	mov	r1, r3
 8002946:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800294a:	fbb3 f3f1 	udiv	r3, r3, r1
 800294e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002952:	4618      	mov	r0, r3
 8002954:	f002 f901 	bl	8004b5a <HAL_SYSTICK_Config>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e00e      	b.n	8002980 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b0f      	cmp	r3, #15
 8002966:	d80a      	bhi.n	800297e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002968:	2200      	movs	r2, #0
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	f04f 30ff 	mov.w	r0, #4294967295
 8002970:	f002 f8cb 	bl	8004b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002974:	4a06      	ldr	r2, [pc, #24]	@ (8002990 <HAL_InitTick+0x68>)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	e000      	b.n	8002980 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
}
 8002980:	4618      	mov	r0, r3
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	24000014 	.word	0x24000014
 800298c:	24000008 	.word	0x24000008
 8002990:	24000010 	.word	0x24000010

08002994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002998:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <HAL_IncTick+0x20>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	4b06      	ldr	r3, [pc, #24]	@ (80029b8 <HAL_IncTick+0x24>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4413      	add	r3, r2
 80029a4:	4a04      	ldr	r2, [pc, #16]	@ (80029b8 <HAL_IncTick+0x24>)
 80029a6:	6013      	str	r3, [r2, #0]
}
 80029a8:	bf00      	nop
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	24000014 	.word	0x24000014
 80029b8:	240006bc 	.word	0x240006bc

080029bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return uwTick;
 80029c0:	4b03      	ldr	r3, [pc, #12]	@ (80029d0 <HAL_GetTick+0x14>)
 80029c2:	681b      	ldr	r3, [r3, #0]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	240006bc 	.word	0x240006bc

080029d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	609a      	str	r2, [r3, #8]
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	609a      	str	r2, [r3, #8]
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
 8002a48:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	3360      	adds	r3, #96	@ 0x60
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4a10      	ldr	r2, [pc, #64]	@ (8002a9c <LL_ADC_SetOffset+0x60>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d10b      	bne.n	8002a78 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002a76:	e00b      	b.n	8002a90 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	601a      	str	r2, [r3, #0]
}
 8002a90:	bf00      	nop
 8002a92:	371c      	adds	r7, #28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	58026000 	.word	0x58026000

08002aa0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3360      	adds	r3, #96	@ 0x60
 8002aae:	461a      	mov	r2, r3
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	f003 031f 	and.w	r3, r3, #31
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aec:	431a      	orrs	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	611a      	str	r2, [r3, #16]
}
 8002af2:	bf00      	nop
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4a0c      	ldr	r2, [pc, #48]	@ (8002b40 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d00e      	beq.n	8002b32 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	3360      	adds	r3, #96	@ 0x60
 8002b18:	461a      	mov	r2, r3
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	601a      	str	r2, [r3, #0]
  }
}
 8002b32:	bf00      	nop
 8002b34:	371c      	adds	r7, #28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	58026000 	.word	0x58026000

08002b44 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b087      	sub	sp, #28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4a0c      	ldr	r2, [pc, #48]	@ (8002b84 <LL_ADC_SetOffsetSaturation+0x40>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d10e      	bne.n	8002b76 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3360      	adds	r3, #96	@ 0x60
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	431a      	orrs	r2, r3
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002b76:	bf00      	nop
 8002b78:	371c      	adds	r7, #28
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	58026000 	.word	0x58026000

08002b88 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4a0c      	ldr	r2, [pc, #48]	@ (8002bc8 <LL_ADC_SetOffsetSign+0x40>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d10e      	bne.n	8002bba <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	3360      	adds	r3, #96	@ 0x60
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002bba:	bf00      	nop
 8002bbc:	371c      	adds	r7, #28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	58026000 	.word	0x58026000

08002bcc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	3360      	adds	r3, #96	@ 0x60
 8002bdc:	461a      	mov	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4a0c      	ldr	r2, [pc, #48]	@ (8002c1c <LL_ADC_SetOffsetState+0x50>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d108      	bne.n	8002c00 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002bfe:	e007      	b.n	8002c10 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	601a      	str	r2, [r3, #0]
}
 8002c10:	bf00      	nop
 8002c12:	371c      	adds	r7, #28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	58026000 	.word	0x58026000

08002c20 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b087      	sub	sp, #28
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	60f8      	str	r0, [r7, #12]
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	3330      	adds	r3, #48	@ 0x30
 8002c56:	461a      	mov	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	0a1b      	lsrs	r3, r3, #8
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	4413      	add	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f003 031f 	and.w	r3, r3, #31
 8002c70:	211f      	movs	r1, #31
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	43db      	mvns	r3, r3
 8002c78:	401a      	ands	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	0e9b      	lsrs	r3, r3, #26
 8002c7e:	f003 011f 	and.w	r1, r3, #31
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	f003 031f 	and.w	r3, r3, #31
 8002c88:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c92:	bf00      	nop
 8002c94:	371c      	adds	r7, #28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b087      	sub	sp, #28
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	60f8      	str	r0, [r7, #12]
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	3314      	adds	r3, #20
 8002cae:	461a      	mov	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	0e5b      	lsrs	r3, r3, #25
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	4413      	add	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	0d1b      	lsrs	r3, r3, #20
 8002cc6:	f003 031f 	and.w	r3, r3, #31
 8002cca:	2107      	movs	r1, #7
 8002ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	401a      	ands	r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	0d1b      	lsrs	r3, r3, #20
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ce8:	bf00      	nop
 8002cea:	371c      	adds	r7, #28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4a1a      	ldr	r2, [pc, #104]	@ (8002d6c <LL_ADC_SetChannelSingleDiff+0x78>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d115      	bne.n	8002d34 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d14:	43db      	mvns	r3, r3
 8002d16:	401a      	ands	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f003 0318 	and.w	r3, r3, #24
 8002d1e:	4914      	ldr	r1, [pc, #80]	@ (8002d70 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002d20:	40d9      	lsrs	r1, r3
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	400b      	ands	r3, r1
 8002d26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002d32:	e014      	b.n	8002d5e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d40:	43db      	mvns	r3, r3
 8002d42:	401a      	ands	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f003 0318 	and.w	r3, r3, #24
 8002d4a:	4909      	ldr	r1, [pc, #36]	@ (8002d70 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002d4c:	40d9      	lsrs	r1, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	400b      	ands	r3, r1
 8002d52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d56:	431a      	orrs	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002d5e:	bf00      	nop
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	58026000 	.word	0x58026000
 8002d70:	000fffff 	.word	0x000fffff

08002d74 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 031f 	and.w	r3, r3, #31
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	4b04      	ldr	r3, [pc, #16]	@ (8002dcc <LL_ADC_DisableDeepPowerDown+0x20>)
 8002dba:	4013      	ands	r3, r2
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6093      	str	r3, [r2, #8]
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	5fffffc0 	.word	0x5fffffc0

08002dd0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002de0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002de4:	d101      	bne.n	8002dea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	4b05      	ldr	r3, [pc, #20]	@ (8002e1c <LL_ADC_EnableInternalRegulator+0x24>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	6fffffc0 	.word	0x6fffffc0

08002e20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e34:	d101      	bne.n	8002e3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	4b05      	ldr	r3, [pc, #20]	@ (8002e6c <LL_ADC_Enable+0x24>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	f043 0201 	orr.w	r2, r3, #1
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	7fffffc0 	.word	0x7fffffc0

08002e70 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	4b05      	ldr	r3, [pc, #20]	@ (8002e94 <LL_ADC_Disable+0x24>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	f043 0202 	orr.w	r2, r3, #2
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	7fffffc0 	.word	0x7fffffc0

08002e98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d101      	bne.n	8002eb0 <LL_ADC_IsEnabled+0x18>
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <LL_ADC_IsEnabled+0x1a>
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d101      	bne.n	8002ed6 <LL_ADC_IsDisableOngoing+0x18>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <LL_ADC_IsDisableOngoing+0x1a>
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	4b05      	ldr	r3, [pc, #20]	@ (8002f08 <LL_ADC_REG_StartConversion+0x24>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	f043 0204 	orr.w	r2, r3, #4
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	7fffffc0 	.word	0x7fffffc0

08002f0c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	4b05      	ldr	r3, [pc, #20]	@ (8002f30 <LL_ADC_REG_StopConversion+0x24>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	f043 0210 	orr.w	r2, r3, #16
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	7fffffc0 	.word	0x7fffffc0

08002f34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d101      	bne.n	8002f4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e000      	b.n	8002f4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
	...

08002f5c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	4b05      	ldr	r3, [pc, #20]	@ (8002f80 <LL_ADC_INJ_StopConversion+0x24>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	f043 0220 	orr.w	r2, r3, #32
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	7fffffc0 	.word	0x7fffffc0

08002f84 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d101      	bne.n	8002f9c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e000      	b.n	8002f9e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fac:	b590      	push	{r4, r7, lr}
 8002fae:	b089      	sub	sp, #36	@ 0x24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e1ee      	b.n	80033a4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d109      	bne.n	8002fe8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff f9a1 	bl	800231c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff feef 	bl	8002dd0 <LL_ADC_IsDeepPowerDownEnabled>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d004      	beq.n	8003002 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff fed5 	bl	8002dac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff ff0a 	bl	8002e20 <LL_ADC_IsInternalRegulatorEnabled>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d114      	bne.n	800303c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff feee 	bl	8002df8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800301c:	4b8e      	ldr	r3, [pc, #568]	@ (8003258 <HAL_ADC_Init+0x2ac>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	099b      	lsrs	r3, r3, #6
 8003022:	4a8e      	ldr	r2, [pc, #568]	@ (800325c <HAL_ADC_Init+0x2b0>)
 8003024:	fba2 2303 	umull	r2, r3, r2, r3
 8003028:	099b      	lsrs	r3, r3, #6
 800302a:	3301      	adds	r3, #1
 800302c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800302e:	e002      	b.n	8003036 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	3b01      	subs	r3, #1
 8003034:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1f9      	bne.n	8003030 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff feed 	bl	8002e20 <LL_ADC_IsInternalRegulatorEnabled>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10d      	bne.n	8003068 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003050:	f043 0210 	orr.w	r2, r3, #16
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800305c:	f043 0201 	orr.w	r2, r3, #1
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ff61 	bl	8002f34 <LL_ADC_REG_IsConversionOngoing>
 8003072:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003078:	f003 0310 	and.w	r3, r3, #16
 800307c:	2b00      	cmp	r3, #0
 800307e:	f040 8188 	bne.w	8003392 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2b00      	cmp	r3, #0
 8003086:	f040 8184 	bne.w	8003392 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800308e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003092:	f043 0202 	orr.w	r2, r3, #2
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fefa 	bl	8002e98 <LL_ADC_IsEnabled>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d136      	bne.n	8003118 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a6c      	ldr	r2, [pc, #432]	@ (8003260 <HAL_ADC_Init+0x2b4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d004      	beq.n	80030be <HAL_ADC_Init+0x112>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a6a      	ldr	r2, [pc, #424]	@ (8003264 <HAL_ADC_Init+0x2b8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d10e      	bne.n	80030dc <HAL_ADC_Init+0x130>
 80030be:	4868      	ldr	r0, [pc, #416]	@ (8003260 <HAL_ADC_Init+0x2b4>)
 80030c0:	f7ff feea 	bl	8002e98 <LL_ADC_IsEnabled>
 80030c4:	4604      	mov	r4, r0
 80030c6:	4867      	ldr	r0, [pc, #412]	@ (8003264 <HAL_ADC_Init+0x2b8>)
 80030c8:	f7ff fee6 	bl	8002e98 <LL_ADC_IsEnabled>
 80030cc:	4603      	mov	r3, r0
 80030ce:	4323      	orrs	r3, r4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	bf0c      	ite	eq
 80030d4:	2301      	moveq	r3, #1
 80030d6:	2300      	movne	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	e008      	b.n	80030ee <HAL_ADC_Init+0x142>
 80030dc:	4862      	ldr	r0, [pc, #392]	@ (8003268 <HAL_ADC_Init+0x2bc>)
 80030de:	f7ff fedb 	bl	8002e98 <LL_ADC_IsEnabled>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	bf0c      	ite	eq
 80030e8:	2301      	moveq	r3, #1
 80030ea:	2300      	movne	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d012      	beq.n	8003118 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a5a      	ldr	r2, [pc, #360]	@ (8003260 <HAL_ADC_Init+0x2b4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d004      	beq.n	8003106 <HAL_ADC_Init+0x15a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a58      	ldr	r2, [pc, #352]	@ (8003264 <HAL_ADC_Init+0x2b8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d101      	bne.n	800310a <HAL_ADC_Init+0x15e>
 8003106:	4a59      	ldr	r2, [pc, #356]	@ (800326c <HAL_ADC_Init+0x2c0>)
 8003108:	e000      	b.n	800310c <HAL_ADC_Init+0x160>
 800310a:	4a59      	ldr	r2, [pc, #356]	@ (8003270 <HAL_ADC_Init+0x2c4>)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	4619      	mov	r1, r3
 8003112:	4610      	mov	r0, r2
 8003114:	f7ff fc5e 	bl	80029d4 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a52      	ldr	r2, [pc, #328]	@ (8003268 <HAL_ADC_Init+0x2bc>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d129      	bne.n	8003176 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	7e5b      	ldrb	r3, [r3, #25]
 8003126:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800312c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003132:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b08      	cmp	r3, #8
 800313a:	d013      	beq.n	8003164 <HAL_ADC_Init+0x1b8>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2b0c      	cmp	r3, #12
 8003142:	d00d      	beq.n	8003160 <HAL_ADC_Init+0x1b4>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b1c      	cmp	r3, #28
 800314a:	d007      	beq.n	800315c <HAL_ADC_Init+0x1b0>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b18      	cmp	r3, #24
 8003152:	d101      	bne.n	8003158 <HAL_ADC_Init+0x1ac>
 8003154:	2318      	movs	r3, #24
 8003156:	e006      	b.n	8003166 <HAL_ADC_Init+0x1ba>
 8003158:	2300      	movs	r3, #0
 800315a:	e004      	b.n	8003166 <HAL_ADC_Init+0x1ba>
 800315c:	2310      	movs	r3, #16
 800315e:	e002      	b.n	8003166 <HAL_ADC_Init+0x1ba>
 8003160:	2308      	movs	r3, #8
 8003162:	e000      	b.n	8003166 <HAL_ADC_Init+0x1ba>
 8003164:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003166:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800316e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003170:	4313      	orrs	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
 8003174:	e00e      	b.n	8003194 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	7e5b      	ldrb	r3, [r3, #25]
 800317a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003180:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003186:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800318e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003190:	4313      	orrs	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3020 	ldrb.w	r3, [r3, #32]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d106      	bne.n	80031ac <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a2:	3b01      	subs	r3, #1
 80031a4:	045b      	lsls	r3, r3, #17
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d009      	beq.n	80031c8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a26      	ldr	r2, [pc, #152]	@ (8003268 <HAL_ADC_Init+0x2bc>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d115      	bne.n	80031fe <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	4b26      	ldr	r3, [pc, #152]	@ (8003274 <HAL_ADC_Init+0x2c8>)
 80031da:	4013      	ands	r3, r2
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	69b9      	ldr	r1, [r7, #24]
 80031e2:	430b      	orrs	r3, r1
 80031e4:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	611a      	str	r2, [r3, #16]
 80031fc:	e009      	b.n	8003212 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	4b1c      	ldr	r3, [pc, #112]	@ (8003278 <HAL_ADC_Init+0x2cc>)
 8003206:	4013      	ands	r3, r2
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	69b9      	ldr	r1, [r7, #24]
 800320e:	430b      	orrs	r3, r1
 8003210:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff fe8c 	bl	8002f34 <LL_ADC_REG_IsConversionOngoing>
 800321c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff feae 	bl	8002f84 <LL_ADC_INJ_IsConversionOngoing>
 8003228:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	f040 808e 	bne.w	800334e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	f040 808a 	bne.w	800334e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a0a      	ldr	r2, [pc, #40]	@ (8003268 <HAL_ADC_Init+0x2bc>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d11b      	bne.n	800327c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	7e1b      	ldrb	r3, [r3, #24]
 8003248:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003250:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003252:	4313      	orrs	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
 8003256:	e018      	b.n	800328a <HAL_ADC_Init+0x2de>
 8003258:	24000008 	.word	0x24000008
 800325c:	053e2d63 	.word	0x053e2d63
 8003260:	40022000 	.word	0x40022000
 8003264:	40022100 	.word	0x40022100
 8003268:	58026000 	.word	0x58026000
 800326c:	40022300 	.word	0x40022300
 8003270:	58026300 	.word	0x58026300
 8003274:	fff04007 	.word	0xfff04007
 8003278:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	7e1b      	ldrb	r3, [r3, #24]
 8003280:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	4b46      	ldr	r3, [pc, #280]	@ (80033ac <HAL_ADC_Init+0x400>)
 8003292:	4013      	ands	r3, r2
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6812      	ldr	r2, [r2, #0]
 8003298:	69b9      	ldr	r1, [r7, #24]
 800329a:	430b      	orrs	r3, r1
 800329c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d137      	bne.n	8003318 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ac:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a3f      	ldr	r2, [pc, #252]	@ (80033b0 <HAL_ADC_Init+0x404>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d116      	bne.n	80032e6 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691a      	ldr	r2, [r3, #16]
 80032be:	4b3d      	ldr	r3, [pc, #244]	@ (80033b4 <HAL_ADC_Init+0x408>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80032ca:	4311      	orrs	r1, r2
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80032d0:	4311      	orrs	r1, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80032d6:	430a      	orrs	r2, r1
 80032d8:	431a      	orrs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	611a      	str	r2, [r3, #16]
 80032e4:	e020      	b.n	8003328 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	4b32      	ldr	r3, [pc, #200]	@ (80033b8 <HAL_ADC_Init+0x40c>)
 80032ee:	4013      	ands	r3, r2
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80032f4:	3a01      	subs	r2, #1
 80032f6:	0411      	lsls	r1, r2, #16
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80032fc:	4311      	orrs	r1, r2
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003302:	4311      	orrs	r1, r2
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003308:	430a      	orrs	r2, r1
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f042 0201 	orr.w	r2, r2, #1
 8003314:	611a      	str	r2, [r3, #16]
 8003316:	e007      	b.n	8003328 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691a      	ldr	r2, [r3, #16]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0201 	bic.w	r2, r2, #1
 8003326:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a1b      	ldr	r2, [pc, #108]	@ (80033b0 <HAL_ADC_Init+0x404>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d002      	beq.n	800334e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f001 f90d 	bl	8004568 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d10c      	bne.n	8003370 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335c:	f023 010f 	bic.w	r1, r3, #15
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	1e5a      	subs	r2, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	631a      	str	r2, [r3, #48]	@ 0x30
 800336e:	e007      	b.n	8003380 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 020f 	bic.w	r2, r2, #15
 800337e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003384:	f023 0303 	bic.w	r3, r3, #3
 8003388:	f043 0201 	orr.w	r2, r3, #1
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	661a      	str	r2, [r3, #96]	@ 0x60
 8003390:	e007      	b.n	80033a2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003396:	f043 0210 	orr.w	r2, r3, #16
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3724      	adds	r7, #36	@ 0x24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd90      	pop	{r4, r7, pc}
 80033ac:	ffffbffc 	.word	0xffffbffc
 80033b0:	58026000 	.word	0x58026000
 80033b4:	fc00f81f 	.word	0xfc00f81f
 80033b8:	fc00f81e 	.word	0xfc00f81e

080033bc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a5c      	ldr	r2, [pc, #368]	@ (800353c <HAL_ADC_Start+0x180>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d004      	beq.n	80033d8 <HAL_ADC_Start+0x1c>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a5b      	ldr	r2, [pc, #364]	@ (8003540 <HAL_ADC_Start+0x184>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d101      	bne.n	80033dc <HAL_ADC_Start+0x20>
 80033d8:	4b5a      	ldr	r3, [pc, #360]	@ (8003544 <HAL_ADC_Start+0x188>)
 80033da:	e000      	b.n	80033de <HAL_ADC_Start+0x22>
 80033dc:	4b5a      	ldr	r3, [pc, #360]	@ (8003548 <HAL_ADC_Start+0x18c>)
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff fcc8 	bl	8002d74 <LL_ADC_GetMultimode>
 80033e4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff fda2 	bl	8002f34 <LL_ADC_REG_IsConversionOngoing>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f040 809a 	bne.w	800352c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <HAL_ADC_Start+0x4a>
 8003402:	2302      	movs	r3, #2
 8003404:	e095      	b.n	8003532 <HAL_ADC_Start+0x176>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 ffc0 	bl	8004394 <ADC_Enable>
 8003414:	4603      	mov	r3, r0
 8003416:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003418:	7dfb      	ldrb	r3, [r7, #23]
 800341a:	2b00      	cmp	r3, #0
 800341c:	f040 8081 	bne.w	8003522 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003424:	4b49      	ldr	r3, [pc, #292]	@ (800354c <HAL_ADC_Start+0x190>)
 8003426:	4013      	ands	r3, r2
 8003428:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a42      	ldr	r2, [pc, #264]	@ (8003540 <HAL_ADC_Start+0x184>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d002      	beq.n	8003440 <HAL_ADC_Start+0x84>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	e000      	b.n	8003442 <HAL_ADC_Start+0x86>
 8003440:	4b3e      	ldr	r3, [pc, #248]	@ (800353c <HAL_ADC_Start+0x180>)
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6812      	ldr	r2, [r2, #0]
 8003446:	4293      	cmp	r3, r2
 8003448:	d002      	beq.n	8003450 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d105      	bne.n	800345c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003454:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003460:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003468:	d106      	bne.n	8003478 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800346e:	f023 0206 	bic.w	r2, r3, #6
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	665a      	str	r2, [r3, #100]	@ 0x64
 8003476:	e002      	b.n	800347e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	221c      	movs	r2, #28
 8003484:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a2b      	ldr	r2, [pc, #172]	@ (8003540 <HAL_ADC_Start+0x184>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d002      	beq.n	800349e <HAL_ADC_Start+0xe2>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	e000      	b.n	80034a0 <HAL_ADC_Start+0xe4>
 800349e:	4b27      	ldr	r3, [pc, #156]	@ (800353c <HAL_ADC_Start+0x180>)
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d008      	beq.n	80034ba <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d005      	beq.n	80034ba <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	2b05      	cmp	r3, #5
 80034b2:	d002      	beq.n	80034ba <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	2b09      	cmp	r3, #9
 80034b8:	d114      	bne.n	80034e4 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d007      	beq.n	80034d8 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034cc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80034d0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff fd01 	bl	8002ee4 <LL_ADC_REG_StartConversion>
 80034e2:	e025      	b.n	8003530 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034e8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a12      	ldr	r2, [pc, #72]	@ (8003540 <HAL_ADC_Start+0x184>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d002      	beq.n	8003500 <HAL_ADC_Start+0x144>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	e000      	b.n	8003502 <HAL_ADC_Start+0x146>
 8003500:	4b0e      	ldr	r3, [pc, #56]	@ (800353c <HAL_ADC_Start+0x180>)
 8003502:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00f      	beq.n	8003530 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003514:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003518:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	661a      	str	r2, [r3, #96]	@ 0x60
 8003520:	e006      	b.n	8003530 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800352a:	e001      	b.n	8003530 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800352c:	2302      	movs	r3, #2
 800352e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003530:	7dfb      	ldrb	r3, [r7, #23]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40022000 	.word	0x40022000
 8003540:	40022100 	.word	0x40022100
 8003544:	40022300 	.word	0x40022300
 8003548:	58026300 	.word	0x58026300
 800354c:	fffff0fe 	.word	0xfffff0fe

08003550 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_ADC_Stop+0x16>
 8003562:	2302      	movs	r3, #2
 8003564:	e021      	b.n	80035aa <HAL_ADC_Stop+0x5a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800356e:	2103      	movs	r1, #3
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 fe53 	bl	800421c <ADC_ConversionStop>
 8003576:	4603      	mov	r3, r0
 8003578:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800357a:	7bfb      	ldrb	r3, [r7, #15]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10f      	bne.n	80035a0 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 ff91 	bl	80044a8 <ADC_Disable>
 8003586:	4603      	mov	r3, r0
 8003588:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800358a:	7bfb      	ldrb	r3, [r7, #15]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d107      	bne.n	80035a0 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003594:	4b07      	ldr	r3, [pc, #28]	@ (80035b4 <HAL_ADC_Stop+0x64>)
 8003596:	4013      	ands	r3, r2
 8003598:	f043 0201 	orr.w	r2, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	ffffeefe 	.word	0xffffeefe

080035b8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a72      	ldr	r2, [pc, #456]	@ (8003790 <HAL_ADC_PollForConversion+0x1d8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d004      	beq.n	80035d6 <HAL_ADC_PollForConversion+0x1e>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a70      	ldr	r2, [pc, #448]	@ (8003794 <HAL_ADC_PollForConversion+0x1dc>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d101      	bne.n	80035da <HAL_ADC_PollForConversion+0x22>
 80035d6:	4b70      	ldr	r3, [pc, #448]	@ (8003798 <HAL_ADC_PollForConversion+0x1e0>)
 80035d8:	e000      	b.n	80035dc <HAL_ADC_PollForConversion+0x24>
 80035da:	4b70      	ldr	r3, [pc, #448]	@ (800379c <HAL_ADC_PollForConversion+0x1e4>)
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fbc9 	bl	8002d74 <LL_ADC_GetMultimode>
 80035e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d102      	bne.n	80035f2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80035ec:	2308      	movs	r3, #8
 80035ee:	61fb      	str	r3, [r7, #28]
 80035f0:	e037      	b.n	8003662 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2b05      	cmp	r3, #5
 80035fc:	d002      	beq.n	8003604 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2b09      	cmp	r3, #9
 8003602:	d111      	bne.n	8003628 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d007      	beq.n	8003622 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003616:	f043 0220 	orr.w	r2, r3, #32
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e0b1      	b.n	8003786 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003622:	2304      	movs	r3, #4
 8003624:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003626:	e01c      	b.n	8003662 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a58      	ldr	r2, [pc, #352]	@ (8003790 <HAL_ADC_PollForConversion+0x1d8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d004      	beq.n	800363c <HAL_ADC_PollForConversion+0x84>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a57      	ldr	r2, [pc, #348]	@ (8003794 <HAL_ADC_PollForConversion+0x1dc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d101      	bne.n	8003640 <HAL_ADC_PollForConversion+0x88>
 800363c:	4b56      	ldr	r3, [pc, #344]	@ (8003798 <HAL_ADC_PollForConversion+0x1e0>)
 800363e:	e000      	b.n	8003642 <HAL_ADC_PollForConversion+0x8a>
 8003640:	4b56      	ldr	r3, [pc, #344]	@ (800379c <HAL_ADC_PollForConversion+0x1e4>)
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff fba4 	bl	8002d90 <LL_ADC_GetMultiDMATransfer>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d007      	beq.n	800365e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003652:	f043 0220 	orr.w	r2, r3, #32
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e093      	b.n	8003786 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800365e:	2304      	movs	r3, #4
 8003660:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003662:	f7ff f9ab 	bl	80029bc <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003668:	e021      	b.n	80036ae <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003670:	d01d      	beq.n	80036ae <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003672:	f7ff f9a3 	bl	80029bc <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d302      	bcc.n	8003688 <HAL_ADC_PollForConversion+0xd0>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d112      	bne.n	80036ae <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	4013      	ands	r3, r2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10b      	bne.n	80036ae <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800369a:	f043 0204 	orr.w	r2, r3, #4
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e06b      	b.n	8003786 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0d6      	beq.n	800366a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036c0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff faa7 	bl	8002c20 <LL_ADC_REG_IsTriggerSourceSWStart>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d01c      	beq.n	8003712 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	7e5b      	ldrb	r3, [r3, #25]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d118      	bne.n	8003712 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d111      	bne.n	8003712 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d105      	bne.n	8003712 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800370a:	f043 0201 	orr.w	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a1f      	ldr	r2, [pc, #124]	@ (8003794 <HAL_ADC_PollForConversion+0x1dc>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d002      	beq.n	8003722 <HAL_ADC_PollForConversion+0x16a>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	e000      	b.n	8003724 <HAL_ADC_PollForConversion+0x16c>
 8003722:	4b1b      	ldr	r3, [pc, #108]	@ (8003790 <HAL_ADC_PollForConversion+0x1d8>)
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	4293      	cmp	r3, r2
 800372a:	d008      	beq.n	800373e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d005      	beq.n	800373e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	2b05      	cmp	r3, #5
 8003736:	d002      	beq.n	800373e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	2b09      	cmp	r3, #9
 800373c:	d104      	bne.n	8003748 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	61bb      	str	r3, [r7, #24]
 8003746:	e00c      	b.n	8003762 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a11      	ldr	r2, [pc, #68]	@ (8003794 <HAL_ADC_PollForConversion+0x1dc>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d002      	beq.n	8003758 <HAL_ADC_PollForConversion+0x1a0>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	e000      	b.n	800375a <HAL_ADC_PollForConversion+0x1a2>
 8003758:	4b0d      	ldr	r3, [pc, #52]	@ (8003790 <HAL_ADC_PollForConversion+0x1d8>)
 800375a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	2b08      	cmp	r3, #8
 8003766:	d104      	bne.n	8003772 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2208      	movs	r2, #8
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	e008      	b.n	8003784 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d103      	bne.n	8003784 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	220c      	movs	r2, #12
 8003782:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3720      	adds	r7, #32
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40022000 	.word	0x40022000
 8003794:	40022100 	.word	0x40022100
 8003798:	40022300 	.word	0x40022300
 800379c:	58026300 	.word	0x58026300

080037a0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
	...

080037bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80037bc:	b590      	push	{r4, r7, lr}
 80037be:	b0b9      	sub	sp, #228	@ 0xe4
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037d6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4aab      	ldr	r2, [pc, #684]	@ (8003a8c <HAL_ADC_ConfigChannel+0x2d0>)
 80037de:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d102      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x34>
 80037ea:	2302      	movs	r3, #2
 80037ec:	f000 bcfe 	b.w	80041ec <HAL_ADC_ConfigChannel+0xa30>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff fb99 	bl	8002f34 <LL_ADC_REG_IsConversionOngoing>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	f040 84e2 	bne.w	80041ce <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	db38      	blt.n	8003884 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a9e      	ldr	r2, [pc, #632]	@ (8003a90 <HAL_ADC_ConfigChannel+0x2d4>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d033      	beq.n	8003884 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003824:	2b00      	cmp	r3, #0
 8003826:	d108      	bne.n	800383a <HAL_ADC_ConfigChannel+0x7e>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	0e9b      	lsrs	r3, r3, #26
 800382e:	f003 031f 	and.w	r3, r3, #31
 8003832:	2201      	movs	r2, #1
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	e01d      	b.n	8003876 <HAL_ADC_ConfigChannel+0xba>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003842:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003846:	fa93 f3a3 	rbit	r3, r3
 800384a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800384e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003852:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003856:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 800385e:	2320      	movs	r3, #32
 8003860:	e004      	b.n	800386c <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8003862:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003866:	fab3 f383 	clz	r3, r3
 800386a:	b2db      	uxtb	r3, r3
 800386c:	f003 031f 	and.w	r3, r3, #31
 8003870:	2201      	movs	r2, #1
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6812      	ldr	r2, [r2, #0]
 800387a:	69d1      	ldr	r1, [r2, #28]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6812      	ldr	r2, [r2, #0]
 8003880:	430b      	orrs	r3, r1
 8003882:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	6859      	ldr	r1, [r3, #4]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	461a      	mov	r2, r3
 8003892:	f7ff f9d8 	bl	8002c46 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff fb4a 	bl	8002f34 <LL_ADC_REG_IsConversionOngoing>
 80038a0:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff fb6b 	bl	8002f84 <LL_ADC_INJ_IsConversionOngoing>
 80038ae:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f040 8270 	bne.w	8003d9c <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f040 826b 	bne.w	8003d9c <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6818      	ldr	r0, [r3, #0]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	6819      	ldr	r1, [r3, #0]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	461a      	mov	r2, r3
 80038d4:	f7ff f9e3 	bl	8002c9e <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a6c      	ldr	r2, [pc, #432]	@ (8003a90 <HAL_ADC_ConfigChannel+0x2d4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d10d      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	695a      	ldr	r2, [r3, #20]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	08db      	lsrs	r3, r3, #3
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038fc:	e032      	b.n	8003964 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80038fe:	4b65      	ldr	r3, [pc, #404]	@ (8003a94 <HAL_ADC_ConfigChannel+0x2d8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003906:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800390a:	d10b      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x168>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	695a      	ldr	r2, [r3, #20]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	089b      	lsrs	r3, r3, #2
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	e01d      	b.n	8003960 <HAL_ADC_ConfigChannel+0x1a4>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10b      	bne.n	800394a <HAL_ADC_ConfigChannel+0x18e>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	695a      	ldr	r2, [r3, #20]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	089b      	lsrs	r3, r3, #2
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	e00a      	b.n	8003960 <HAL_ADC_ConfigChannel+0x1a4>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	695a      	ldr	r2, [r3, #20]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	089b      	lsrs	r3, r3, #2
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	2b04      	cmp	r3, #4
 800396a:	d048      	beq.n	80039fe <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6818      	ldr	r0, [r3, #0]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	6919      	ldr	r1, [r3, #16]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800397c:	f7ff f85e 	bl	8002a3c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a42      	ldr	r2, [pc, #264]	@ (8003a90 <HAL_ADC_ConfigChannel+0x2d4>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d119      	bne.n	80039be <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	6919      	ldr	r1, [r3, #16]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	461a      	mov	r2, r3
 8003998:	f7ff f8f6 	bl	8002b88 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6818      	ldr	r0, [r3, #0]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	6919      	ldr	r1, [r3, #16]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d102      	bne.n	80039b4 <HAL_ADC_ConfigChannel+0x1f8>
 80039ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039b2:	e000      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x1fa>
 80039b4:	2300      	movs	r3, #0
 80039b6:	461a      	mov	r2, r3
 80039b8:	f7ff f8c4 	bl	8002b44 <LL_ADC_SetOffsetSaturation>
 80039bc:	e1ee      	b.n	8003d9c <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	6919      	ldr	r1, [r3, #16]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d102      	bne.n	80039d6 <HAL_ADC_ConfigChannel+0x21a>
 80039d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80039d4:	e000      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x21c>
 80039d6:	2300      	movs	r3, #0
 80039d8:	461a      	mov	r2, r3
 80039da:	f7ff f891 	bl	8002b00 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	6919      	ldr	r1, [r3, #16]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	7e1b      	ldrb	r3, [r3, #24]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d102      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x238>
 80039ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80039f2:	e000      	b.n	80039f6 <HAL_ADC_ConfigChannel+0x23a>
 80039f4:	2300      	movs	r3, #0
 80039f6:	461a      	mov	r2, r3
 80039f8:	f7ff f868 	bl	8002acc <LL_ADC_SetDataRightShift>
 80039fc:	e1ce      	b.n	8003d9c <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a23      	ldr	r2, [pc, #140]	@ (8003a90 <HAL_ADC_ConfigChannel+0x2d4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	f040 8181 	bne.w	8003d0c <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2100      	movs	r1, #0
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff f845 	bl	8002aa0 <LL_ADC_GetOffsetChannel>
 8003a16:	4603      	mov	r3, r0
 8003a18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10a      	bne.n	8003a36 <HAL_ADC_ConfigChannel+0x27a>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2100      	movs	r1, #0
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff f83a 	bl	8002aa0 <LL_ADC_GetOffsetChannel>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	0e9b      	lsrs	r3, r3, #26
 8003a30:	f003 021f 	and.w	r2, r3, #31
 8003a34:	e01e      	b.n	8003a74 <HAL_ADC_ConfigChannel+0x2b8>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff f82f 	bl	8002aa0 <LL_ADC_GetOffsetChannel>
 8003a42:	4603      	mov	r3, r0
 8003a44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003a4c:	fa93 f3a3 	rbit	r3, r3
 8003a50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003a54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003a58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 8003a5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003a64:	2320      	movs	r3, #32
 8003a66:	e004      	b.n	8003a72 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003a68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a6c:	fab3 f383 	clz	r3, r3
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	461a      	mov	r2, r3
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10b      	bne.n	8003a98 <HAL_ADC_ConfigChannel+0x2dc>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	0e9b      	lsrs	r3, r3, #26
 8003a86:	f003 031f 	and.w	r3, r3, #31
 8003a8a:	e01e      	b.n	8003aca <HAL_ADC_ConfigChannel+0x30e>
 8003a8c:	47ff0000 	.word	0x47ff0000
 8003a90:	58026000 	.word	0x58026000
 8003a94:	5c001000 	.word	0x5c001000
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003aa4:	fa93 f3a3 	rbit	r3, r3
 8003aa8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003aac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003ab4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003abc:	2320      	movs	r3, #32
 8003abe:	e004      	b.n	8003aca <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003ac0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003ac4:	fab3 f383 	clz	r3, r3
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d106      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff f878 	bl	8002bcc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fe ffdc 	bl	8002aa0 <LL_ADC_GetOffsetChannel>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10a      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x34c>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2101      	movs	r1, #1
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fe ffd1 	bl	8002aa0 <LL_ADC_GetOffsetChannel>
 8003afe:	4603      	mov	r3, r0
 8003b00:	0e9b      	lsrs	r3, r3, #26
 8003b02:	f003 021f 	and.w	r2, r3, #31
 8003b06:	e01e      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x38a>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fe ffc6 	bl	8002aa0 <LL_ADC_GetOffsetChannel>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b1e:	fa93 f3a3 	rbit	r3, r3
 8003b22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003b26:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003b2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003b36:	2320      	movs	r3, #32
 8003b38:	e004      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8003b3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b3e:	fab3 f383 	clz	r3, r3
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	461a      	mov	r2, r3
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d105      	bne.n	8003b5e <HAL_ADC_ConfigChannel+0x3a2>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	0e9b      	lsrs	r3, r3, #26
 8003b58:	f003 031f 	and.w	r3, r3, #31
 8003b5c:	e018      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x3d4>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b66:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b6a:	fa93 f3a3 	rbit	r3, r3
 8003b6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003b72:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003b76:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003b7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8003b82:	2320      	movs	r3, #32
 8003b84:	e004      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8003b86:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b8a:	fab3 f383 	clz	r3, r3
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d106      	bne.n	8003ba2 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff f815 	bl	8002bcc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2102      	movs	r1, #2
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fe ff79 	bl	8002aa0 <LL_ADC_GetOffsetChannel>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10a      	bne.n	8003bce <HAL_ADC_ConfigChannel+0x412>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2102      	movs	r1, #2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fe ff6e 	bl	8002aa0 <LL_ADC_GetOffsetChannel>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	0e9b      	lsrs	r3, r3, #26
 8003bc8:	f003 021f 	and.w	r2, r3, #31
 8003bcc:	e01e      	b.n	8003c0c <HAL_ADC_ConfigChannel+0x450>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2102      	movs	r1, #2
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7fe ff63 	bl	8002aa0 <LL_ADC_GetOffsetChannel>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003be4:	fa93 f3a3 	rbit	r3, r3
 8003be8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003bec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003bf0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003bf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8003bfc:	2320      	movs	r3, #32
 8003bfe:	e004      	b.n	8003c0a <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8003c00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c04:	fab3 f383 	clz	r3, r3
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d105      	bne.n	8003c24 <HAL_ADC_ConfigChannel+0x468>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	0e9b      	lsrs	r3, r3, #26
 8003c1e:	f003 031f 	and.w	r3, r3, #31
 8003c22:	e014      	b.n	8003c4e <HAL_ADC_ConfigChannel+0x492>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c2c:	fa93 f3a3 	rbit	r3, r3
 8003c30:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003c32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003c38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003c40:	2320      	movs	r3, #32
 8003c42:	e004      	b.n	8003c4e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003c44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c48:	fab3 f383 	clz	r3, r3
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d106      	bne.n	8003c60 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2200      	movs	r2, #0
 8003c58:	2102      	movs	r1, #2
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fe ffb6 	bl	8002bcc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2103      	movs	r1, #3
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fe ff1a 	bl	8002aa0 <LL_ADC_GetOffsetChannel>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10a      	bne.n	8003c8c <HAL_ADC_ConfigChannel+0x4d0>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2103      	movs	r1, #3
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7fe ff0f 	bl	8002aa0 <LL_ADC_GetOffsetChannel>
 8003c82:	4603      	mov	r3, r0
 8003c84:	0e9b      	lsrs	r3, r3, #26
 8003c86:	f003 021f 	and.w	r2, r3, #31
 8003c8a:	e017      	b.n	8003cbc <HAL_ADC_ConfigChannel+0x500>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2103      	movs	r1, #3
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fe ff04 	bl	8002aa0 <LL_ADC_GetOffsetChannel>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c9e:	fa93 f3a3 	rbit	r3, r3
 8003ca2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003ca4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ca6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003ca8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8003cae:	2320      	movs	r3, #32
 8003cb0:	e003      	b.n	8003cba <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8003cb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cb4:	fab3 f383 	clz	r3, r3
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d105      	bne.n	8003cd4 <HAL_ADC_ConfigChannel+0x518>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	0e9b      	lsrs	r3, r3, #26
 8003cce:	f003 031f 	and.w	r3, r3, #31
 8003cd2:	e011      	b.n	8003cf8 <HAL_ADC_ConfigChannel+0x53c>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cdc:	fa93 f3a3 	rbit	r3, r3
 8003ce0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003ce2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ce4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003ce6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8003cec:	2320      	movs	r3, #32
 8003cee:	e003      	b.n	8003cf8 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003cf0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cf2:	fab3 f383 	clz	r3, r3
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d14f      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2200      	movs	r2, #0
 8003d02:	2103      	movs	r1, #3
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fe ff61 	bl	8002bcc <LL_ADC_SetOffsetState>
 8003d0a:	e047      	b.n	8003d9c <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d12:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	069b      	lsls	r3, r3, #26
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d107      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003d2e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d36:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	069b      	lsls	r3, r3, #26
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d107      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003d52:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d5a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	069b      	lsls	r3, r3, #26
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d107      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003d76:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	069b      	lsls	r3, r3, #26
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d107      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003d9a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff f879 	bl	8002e98 <LL_ADC_IsEnabled>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f040 8219 	bne.w	80041e0 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6818      	ldr	r0, [r3, #0]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	6819      	ldr	r1, [r3, #0]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f7fe ff9a 	bl	8002cf4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4aa1      	ldr	r2, [pc, #644]	@ (800404c <HAL_ADC_ConfigChannel+0x890>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	f040 812e 	bne.w	8004028 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10b      	bne.n	8003df4 <HAL_ADC_ConfigChannel+0x638>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	0e9b      	lsrs	r3, r3, #26
 8003de2:	3301      	adds	r3, #1
 8003de4:	f003 031f 	and.w	r3, r3, #31
 8003de8:	2b09      	cmp	r3, #9
 8003dea:	bf94      	ite	ls
 8003dec:	2301      	movls	r3, #1
 8003dee:	2300      	movhi	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	e019      	b.n	8003e28 <HAL_ADC_ConfigChannel+0x66c>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003dfc:	fa93 f3a3 	rbit	r3, r3
 8003e00:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003e06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003e0c:	2320      	movs	r3, #32
 8003e0e:	e003      	b.n	8003e18 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003e10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e12:	fab3 f383 	clz	r3, r3
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	3301      	adds	r3, #1
 8003e1a:	f003 031f 	and.w	r3, r3, #31
 8003e1e:	2b09      	cmp	r3, #9
 8003e20:	bf94      	ite	ls
 8003e22:	2301      	movls	r3, #1
 8003e24:	2300      	movhi	r3, #0
 8003e26:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d079      	beq.n	8003f20 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d107      	bne.n	8003e48 <HAL_ADC_ConfigChannel+0x68c>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	0e9b      	lsrs	r3, r3, #26
 8003e3e:	3301      	adds	r3, #1
 8003e40:	069b      	lsls	r3, r3, #26
 8003e42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e46:	e015      	b.n	8003e74 <HAL_ADC_ConfigChannel+0x6b8>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e50:	fa93 f3a3 	rbit	r3, r3
 8003e54:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003e56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e58:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003e5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8003e60:	2320      	movs	r3, #32
 8003e62:	e003      	b.n	8003e6c <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8003e64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e66:	fab3 f383 	clz	r3, r3
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	069b      	lsls	r3, r3, #26
 8003e70:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d109      	bne.n	8003e94 <HAL_ADC_ConfigChannel+0x6d8>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	0e9b      	lsrs	r3, r3, #26
 8003e86:	3301      	adds	r3, #1
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e92:	e017      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x708>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e9c:	fa93 f3a3 	rbit	r3, r3
 8003ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ea4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003ea6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8003eac:	2320      	movs	r3, #32
 8003eae:	e003      	b.n	8003eb8 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8003eb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eb2:	fab3 f383 	clz	r3, r3
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	3301      	adds	r3, #1
 8003eba:	f003 031f 	and.w	r3, r3, #31
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec4:	ea42 0103 	orr.w	r1, r2, r3
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10a      	bne.n	8003eea <HAL_ADC_ConfigChannel+0x72e>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	0e9b      	lsrs	r3, r3, #26
 8003eda:	3301      	adds	r3, #1
 8003edc:	f003 021f 	and.w	r2, r3, #31
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	4413      	add	r3, r2
 8003ee6:	051b      	lsls	r3, r3, #20
 8003ee8:	e018      	b.n	8003f1c <HAL_ADC_ConfigChannel+0x760>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ef2:	fa93 f3a3 	rbit	r3, r3
 8003ef6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003efa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8003f02:	2320      	movs	r3, #32
 8003f04:	e003      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8003f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f08:	fab3 f383 	clz	r3, r3
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	3301      	adds	r3, #1
 8003f10:	f003 021f 	and.w	r2, r3, #31
 8003f14:	4613      	mov	r3, r2
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	4413      	add	r3, r2
 8003f1a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f1c:	430b      	orrs	r3, r1
 8003f1e:	e07e      	b.n	800401e <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d107      	bne.n	8003f3c <HAL_ADC_ConfigChannel+0x780>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	0e9b      	lsrs	r3, r3, #26
 8003f32:	3301      	adds	r3, #1
 8003f34:	069b      	lsls	r3, r3, #26
 8003f36:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f3a:	e015      	b.n	8003f68 <HAL_ADC_ConfigChannel+0x7ac>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f44:	fa93 f3a3 	rbit	r3, r3
 8003f48:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8003f54:	2320      	movs	r3, #32
 8003f56:	e003      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8003f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f5a:	fab3 f383 	clz	r3, r3
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	3301      	adds	r3, #1
 8003f62:	069b      	lsls	r3, r3, #26
 8003f64:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d109      	bne.n	8003f88 <HAL_ADC_ConfigChannel+0x7cc>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	0e9b      	lsrs	r3, r3, #26
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	f003 031f 	and.w	r3, r3, #31
 8003f80:	2101      	movs	r1, #1
 8003f82:	fa01 f303 	lsl.w	r3, r1, r3
 8003f86:	e017      	b.n	8003fb8 <HAL_ADC_ConfigChannel+0x7fc>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	fa93 f3a3 	rbit	r3, r3
 8003f94:	61bb      	str	r3, [r7, #24]
  return result;
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8003fa0:	2320      	movs	r3, #32
 8003fa2:	e003      	b.n	8003fac <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	fab3 f383 	clz	r3, r3
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	3301      	adds	r3, #1
 8003fae:	f003 031f 	and.w	r3, r3, #31
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb8:	ea42 0103 	orr.w	r1, r2, r3
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10d      	bne.n	8003fe4 <HAL_ADC_ConfigChannel+0x828>
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	0e9b      	lsrs	r3, r3, #26
 8003fce:	3301      	adds	r3, #1
 8003fd0:	f003 021f 	and.w	r2, r3, #31
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	4413      	add	r3, r2
 8003fda:	3b1e      	subs	r3, #30
 8003fdc:	051b      	lsls	r3, r3, #20
 8003fde:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003fe2:	e01b      	b.n	800401c <HAL_ADC_ConfigChannel+0x860>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	fa93 f3a3 	rbit	r3, r3
 8003ff0:	60fb      	str	r3, [r7, #12]
  return result;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8003ffc:	2320      	movs	r3, #32
 8003ffe:	e003      	b.n	8004008 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	fab3 f383 	clz	r3, r3
 8004006:	b2db      	uxtb	r3, r3
 8004008:	3301      	adds	r3, #1
 800400a:	f003 021f 	and.w	r2, r3, #31
 800400e:	4613      	mov	r3, r2
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	4413      	add	r3, r2
 8004014:	3b1e      	subs	r3, #30
 8004016:	051b      	lsls	r3, r3, #20
 8004018:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800401c:	430b      	orrs	r3, r1
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	6892      	ldr	r2, [r2, #8]
 8004022:	4619      	mov	r1, r3
 8004024:	f7fe fe3b 	bl	8002c9e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	f280 80d7 	bge.w	80041e0 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a06      	ldr	r2, [pc, #24]	@ (8004050 <HAL_ADC_ConfigChannel+0x894>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d004      	beq.n	8004046 <HAL_ADC_ConfigChannel+0x88a>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a04      	ldr	r2, [pc, #16]	@ (8004054 <HAL_ADC_ConfigChannel+0x898>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d10a      	bne.n	800405c <HAL_ADC_ConfigChannel+0x8a0>
 8004046:	4b04      	ldr	r3, [pc, #16]	@ (8004058 <HAL_ADC_ConfigChannel+0x89c>)
 8004048:	e009      	b.n	800405e <HAL_ADC_ConfigChannel+0x8a2>
 800404a:	bf00      	nop
 800404c:	47ff0000 	.word	0x47ff0000
 8004050:	40022000 	.word	0x40022000
 8004054:	40022100 	.word	0x40022100
 8004058:	40022300 	.word	0x40022300
 800405c:	4b65      	ldr	r3, [pc, #404]	@ (80041f4 <HAL_ADC_ConfigChannel+0xa38>)
 800405e:	4618      	mov	r0, r3
 8004060:	f7fe fcde 	bl	8002a20 <LL_ADC_GetCommonPathInternalCh>
 8004064:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a62      	ldr	r2, [pc, #392]	@ (80041f8 <HAL_ADC_ConfigChannel+0xa3c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d004      	beq.n	800407c <HAL_ADC_ConfigChannel+0x8c0>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a61      	ldr	r2, [pc, #388]	@ (80041fc <HAL_ADC_ConfigChannel+0xa40>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d10e      	bne.n	800409a <HAL_ADC_ConfigChannel+0x8de>
 800407c:	485e      	ldr	r0, [pc, #376]	@ (80041f8 <HAL_ADC_ConfigChannel+0xa3c>)
 800407e:	f7fe ff0b 	bl	8002e98 <LL_ADC_IsEnabled>
 8004082:	4604      	mov	r4, r0
 8004084:	485d      	ldr	r0, [pc, #372]	@ (80041fc <HAL_ADC_ConfigChannel+0xa40>)
 8004086:	f7fe ff07 	bl	8002e98 <LL_ADC_IsEnabled>
 800408a:	4603      	mov	r3, r0
 800408c:	4323      	orrs	r3, r4
 800408e:	2b00      	cmp	r3, #0
 8004090:	bf0c      	ite	eq
 8004092:	2301      	moveq	r3, #1
 8004094:	2300      	movne	r3, #0
 8004096:	b2db      	uxtb	r3, r3
 8004098:	e008      	b.n	80040ac <HAL_ADC_ConfigChannel+0x8f0>
 800409a:	4859      	ldr	r0, [pc, #356]	@ (8004200 <HAL_ADC_ConfigChannel+0xa44>)
 800409c:	f7fe fefc 	bl	8002e98 <LL_ADC_IsEnabled>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	bf0c      	ite	eq
 80040a6:	2301      	moveq	r3, #1
 80040a8:	2300      	movne	r3, #0
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 8084 	beq.w	80041ba <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a53      	ldr	r2, [pc, #332]	@ (8004204 <HAL_ADC_ConfigChannel+0xa48>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d132      	bne.n	8004122 <HAL_ADC_ConfigChannel+0x966>
 80040bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80040c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d12c      	bne.n	8004122 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a4c      	ldr	r2, [pc, #304]	@ (8004200 <HAL_ADC_ConfigChannel+0xa44>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	f040 8086 	bne.w	80041e0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a47      	ldr	r2, [pc, #284]	@ (80041f8 <HAL_ADC_ConfigChannel+0xa3c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d004      	beq.n	80040e8 <HAL_ADC_ConfigChannel+0x92c>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a46      	ldr	r2, [pc, #280]	@ (80041fc <HAL_ADC_ConfigChannel+0xa40>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d101      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x930>
 80040e8:	4a47      	ldr	r2, [pc, #284]	@ (8004208 <HAL_ADC_ConfigChannel+0xa4c>)
 80040ea:	e000      	b.n	80040ee <HAL_ADC_ConfigChannel+0x932>
 80040ec:	4a41      	ldr	r2, [pc, #260]	@ (80041f4 <HAL_ADC_ConfigChannel+0xa38>)
 80040ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80040f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80040f6:	4619      	mov	r1, r3
 80040f8:	4610      	mov	r0, r2
 80040fa:	f7fe fc7e 	bl	80029fa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040fe:	4b43      	ldr	r3, [pc, #268]	@ (800420c <HAL_ADC_ConfigChannel+0xa50>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	099b      	lsrs	r3, r3, #6
 8004104:	4a42      	ldr	r2, [pc, #264]	@ (8004210 <HAL_ADC_ConfigChannel+0xa54>)
 8004106:	fba2 2303 	umull	r2, r3, r2, r3
 800410a:	099b      	lsrs	r3, r3, #6
 800410c:	3301      	adds	r3, #1
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004112:	e002      	b.n	800411a <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	3b01      	subs	r3, #1
 8004118:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1f9      	bne.n	8004114 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004120:	e05e      	b.n	80041e0 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a3b      	ldr	r2, [pc, #236]	@ (8004214 <HAL_ADC_ConfigChannel+0xa58>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d120      	bne.n	800416e <HAL_ADC_ConfigChannel+0x9b2>
 800412c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004130:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d11a      	bne.n	800416e <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a30      	ldr	r2, [pc, #192]	@ (8004200 <HAL_ADC_ConfigChannel+0xa44>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d14e      	bne.n	80041e0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a2c      	ldr	r2, [pc, #176]	@ (80041f8 <HAL_ADC_ConfigChannel+0xa3c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d004      	beq.n	8004156 <HAL_ADC_ConfigChannel+0x99a>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a2a      	ldr	r2, [pc, #168]	@ (80041fc <HAL_ADC_ConfigChannel+0xa40>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d101      	bne.n	800415a <HAL_ADC_ConfigChannel+0x99e>
 8004156:	4a2c      	ldr	r2, [pc, #176]	@ (8004208 <HAL_ADC_ConfigChannel+0xa4c>)
 8004158:	e000      	b.n	800415c <HAL_ADC_ConfigChannel+0x9a0>
 800415a:	4a26      	ldr	r2, [pc, #152]	@ (80041f4 <HAL_ADC_ConfigChannel+0xa38>)
 800415c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004160:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004164:	4619      	mov	r1, r3
 8004166:	4610      	mov	r0, r2
 8004168:	f7fe fc47 	bl	80029fa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800416c:	e038      	b.n	80041e0 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a29      	ldr	r2, [pc, #164]	@ (8004218 <HAL_ADC_ConfigChannel+0xa5c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d133      	bne.n	80041e0 <HAL_ADC_ConfigChannel+0xa24>
 8004178:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800417c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d12d      	bne.n	80041e0 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a1d      	ldr	r2, [pc, #116]	@ (8004200 <HAL_ADC_ConfigChannel+0xa44>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d128      	bne.n	80041e0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a19      	ldr	r2, [pc, #100]	@ (80041f8 <HAL_ADC_ConfigChannel+0xa3c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d004      	beq.n	80041a2 <HAL_ADC_ConfigChannel+0x9e6>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a17      	ldr	r2, [pc, #92]	@ (80041fc <HAL_ADC_ConfigChannel+0xa40>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d101      	bne.n	80041a6 <HAL_ADC_ConfigChannel+0x9ea>
 80041a2:	4a19      	ldr	r2, [pc, #100]	@ (8004208 <HAL_ADC_ConfigChannel+0xa4c>)
 80041a4:	e000      	b.n	80041a8 <HAL_ADC_ConfigChannel+0x9ec>
 80041a6:	4a13      	ldr	r2, [pc, #76]	@ (80041f4 <HAL_ADC_ConfigChannel+0xa38>)
 80041a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80041b0:	4619      	mov	r1, r3
 80041b2:	4610      	mov	r0, r2
 80041b4:	f7fe fc21 	bl	80029fa <LL_ADC_SetCommonPathInternalCh>
 80041b8:	e012      	b.n	80041e0 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041be:	f043 0220 	orr.w	r2, r3, #32
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80041cc:	e008      	b.n	80041e0 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041d2:	f043 0220 	orr.w	r2, r3, #32
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80041e8:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	37e4      	adds	r7, #228	@ 0xe4
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd90      	pop	{r4, r7, pc}
 80041f4:	58026300 	.word	0x58026300
 80041f8:	40022000 	.word	0x40022000
 80041fc:	40022100 	.word	0x40022100
 8004200:	58026000 	.word	0x58026000
 8004204:	c7520000 	.word	0xc7520000
 8004208:	40022300 	.word	0x40022300
 800420c:	24000008 	.word	0x24000008
 8004210:	053e2d63 	.word	0x053e2d63
 8004214:	c3210000 	.word	0xc3210000
 8004218:	cb840000 	.word	0xcb840000

0800421c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b088      	sub	sp, #32
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004226:	2300      	movs	r3, #0
 8004228:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f7fe fe7e 	bl	8002f34 <LL_ADC_REG_IsConversionOngoing>
 8004238:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f7fe fea0 	bl	8002f84 <LL_ADC_INJ_IsConversionOngoing>
 8004244:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d103      	bne.n	8004254 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 8098 	beq.w	8004384 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d02a      	beq.n	80042b8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	7e5b      	ldrb	r3, [r3, #25]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d126      	bne.n	80042b8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	7e1b      	ldrb	r3, [r3, #24]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d122      	bne.n	80042b8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004272:	2301      	movs	r3, #1
 8004274:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004276:	e014      	b.n	80042a2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	4a45      	ldr	r2, [pc, #276]	@ (8004390 <ADC_ConversionStop+0x174>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d90d      	bls.n	800429c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004284:	f043 0210 	orr.w	r2, r3, #16
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004290:	f043 0201 	orr.w	r2, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e074      	b.n	8004386 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	3301      	adds	r3, #1
 80042a0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ac:	2b40      	cmp	r3, #64	@ 0x40
 80042ae:	d1e3      	bne.n	8004278 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2240      	movs	r2, #64	@ 0x40
 80042b6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d014      	beq.n	80042e8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7fe fe36 	bl	8002f34 <LL_ADC_REG_IsConversionOngoing>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00c      	beq.n	80042e8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fe fdf3 	bl	8002ebe <LL_ADC_IsDisableOngoing>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d104      	bne.n	80042e8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fe fe12 	bl	8002f0c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d014      	beq.n	8004318 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fe fe46 	bl	8002f84 <LL_ADC_INJ_IsConversionOngoing>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00c      	beq.n	8004318 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4618      	mov	r0, r3
 8004304:	f7fe fddb 	bl	8002ebe <LL_ADC_IsDisableOngoing>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d104      	bne.n	8004318 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4618      	mov	r0, r3
 8004314:	f7fe fe22 	bl	8002f5c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2b02      	cmp	r3, #2
 800431c:	d005      	beq.n	800432a <ADC_ConversionStop+0x10e>
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	2b03      	cmp	r3, #3
 8004322:	d105      	bne.n	8004330 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004324:	230c      	movs	r3, #12
 8004326:	617b      	str	r3, [r7, #20]
        break;
 8004328:	e005      	b.n	8004336 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800432a:	2308      	movs	r3, #8
 800432c:	617b      	str	r3, [r7, #20]
        break;
 800432e:	e002      	b.n	8004336 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004330:	2304      	movs	r3, #4
 8004332:	617b      	str	r3, [r7, #20]
        break;
 8004334:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004336:	f7fe fb41 	bl	80029bc <HAL_GetTick>
 800433a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800433c:	e01b      	b.n	8004376 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800433e:	f7fe fb3d 	bl	80029bc <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b05      	cmp	r3, #5
 800434a:	d914      	bls.n	8004376 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	4013      	ands	r3, r2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00d      	beq.n	8004376 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800435e:	f043 0210 	orr.w	r2, r3, #16
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800436a:	f043 0201 	orr.w	r2, r3, #1
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e007      	b.n	8004386 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	4013      	ands	r3, r2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1dc      	bne.n	800433e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3720      	adds	r7, #32
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	000cdbff 	.word	0x000cdbff

08004394 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fe fd79 	bl	8002e98 <LL_ADC_IsEnabled>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d16e      	bne.n	800448a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	4b38      	ldr	r3, [pc, #224]	@ (8004494 <ADC_Enable+0x100>)
 80043b4:	4013      	ands	r3, r2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00d      	beq.n	80043d6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043be:	f043 0210 	orr.w	r2, r3, #16
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043ca:	f043 0201 	orr.w	r2, r3, #1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e05a      	b.n	800448c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fe fd34 	bl	8002e48 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80043e0:	f7fe faec 	bl	80029bc <HAL_GetTick>
 80043e4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a2b      	ldr	r2, [pc, #172]	@ (8004498 <ADC_Enable+0x104>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d004      	beq.n	80043fa <ADC_Enable+0x66>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a29      	ldr	r2, [pc, #164]	@ (800449c <ADC_Enable+0x108>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d101      	bne.n	80043fe <ADC_Enable+0x6a>
 80043fa:	4b29      	ldr	r3, [pc, #164]	@ (80044a0 <ADC_Enable+0x10c>)
 80043fc:	e000      	b.n	8004400 <ADC_Enable+0x6c>
 80043fe:	4b29      	ldr	r3, [pc, #164]	@ (80044a4 <ADC_Enable+0x110>)
 8004400:	4618      	mov	r0, r3
 8004402:	f7fe fcb7 	bl	8002d74 <LL_ADC_GetMultimode>
 8004406:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a23      	ldr	r2, [pc, #140]	@ (800449c <ADC_Enable+0x108>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d002      	beq.n	8004418 <ADC_Enable+0x84>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	e000      	b.n	800441a <ADC_Enable+0x86>
 8004418:	4b1f      	ldr	r3, [pc, #124]	@ (8004498 <ADC_Enable+0x104>)
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6812      	ldr	r2, [r2, #0]
 800441e:	4293      	cmp	r3, r2
 8004420:	d02c      	beq.n	800447c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d130      	bne.n	800448a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004428:	e028      	b.n	800447c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4618      	mov	r0, r3
 8004430:	f7fe fd32 	bl	8002e98 <LL_ADC_IsEnabled>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d104      	bne.n	8004444 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f7fe fd02 	bl	8002e48 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004444:	f7fe faba 	bl	80029bc <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d914      	bls.n	800447c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b01      	cmp	r3, #1
 800445e:	d00d      	beq.n	800447c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004464:	f043 0210 	orr.w	r2, r3, #16
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004470:	f043 0201 	orr.w	r2, r3, #1
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e007      	b.n	800448c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b01      	cmp	r3, #1
 8004488:	d1cf      	bne.n	800442a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	8000003f 	.word	0x8000003f
 8004498:	40022000 	.word	0x40022000
 800449c:	40022100 	.word	0x40022100
 80044a0:	40022300 	.word	0x40022300
 80044a4:	58026300 	.word	0x58026300

080044a8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fe fd02 	bl	8002ebe <LL_ADC_IsDisableOngoing>
 80044ba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7fe fce9 	bl	8002e98 <LL_ADC_IsEnabled>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d047      	beq.n	800455c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d144      	bne.n	800455c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 030d 	and.w	r3, r3, #13
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d10c      	bne.n	80044fa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fe fcc3 	bl	8002e70 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2203      	movs	r2, #3
 80044f0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80044f2:	f7fe fa63 	bl	80029bc <HAL_GetTick>
 80044f6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80044f8:	e029      	b.n	800454e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044fe:	f043 0210 	orr.w	r2, r3, #16
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800450a:	f043 0201 	orr.w	r2, r3, #1
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e023      	b.n	800455e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004516:	f7fe fa51 	bl	80029bc <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d914      	bls.n	800454e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00d      	beq.n	800454e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004536:	f043 0210 	orr.w	r2, r3, #16
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004542:	f043 0201 	orr.w	r2, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e007      	b.n	800455e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1dc      	bne.n	8004516 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
	...

08004568 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a6c      	ldr	r2, [pc, #432]	@ (8004728 <ADC_ConfigureBoostMode+0x1c0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d004      	beq.n	8004584 <ADC_ConfigureBoostMode+0x1c>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a6b      	ldr	r2, [pc, #428]	@ (800472c <ADC_ConfigureBoostMode+0x1c4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d109      	bne.n	8004598 <ADC_ConfigureBoostMode+0x30>
 8004584:	4b6a      	ldr	r3, [pc, #424]	@ (8004730 <ADC_ConfigureBoostMode+0x1c8>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800458c:	2b00      	cmp	r3, #0
 800458e:	bf14      	ite	ne
 8004590:	2301      	movne	r3, #1
 8004592:	2300      	moveq	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	e008      	b.n	80045aa <ADC_ConfigureBoostMode+0x42>
 8004598:	4b66      	ldr	r3, [pc, #408]	@ (8004734 <ADC_ConfigureBoostMode+0x1cc>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	bf14      	ite	ne
 80045a4:	2301      	movne	r3, #1
 80045a6:	2300      	moveq	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d01c      	beq.n	80045e8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80045ae:	f002 fdcd 	bl	800714c <HAL_RCC_GetHCLKFreq>
 80045b2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80045bc:	d010      	beq.n	80045e0 <ADC_ConfigureBoostMode+0x78>
 80045be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80045c2:	d873      	bhi.n	80046ac <ADC_ConfigureBoostMode+0x144>
 80045c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045c8:	d002      	beq.n	80045d0 <ADC_ConfigureBoostMode+0x68>
 80045ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045ce:	d16d      	bne.n	80046ac <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	0c1b      	lsrs	r3, r3, #16
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045dc:	60fb      	str	r3, [r7, #12]
        break;
 80045de:	e068      	b.n	80046b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	089b      	lsrs	r3, r3, #2
 80045e4:	60fb      	str	r3, [r7, #12]
        break;
 80045e6:	e064      	b.n	80046b2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80045e8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80045ec:	f04f 0100 	mov.w	r1, #0
 80045f0:	f003 ffa8 	bl	8008544 <HAL_RCCEx_GetPeriphCLKFreq>
 80045f4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80045fe:	d051      	beq.n	80046a4 <ADC_ConfigureBoostMode+0x13c>
 8004600:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004604:	d854      	bhi.n	80046b0 <ADC_ConfigureBoostMode+0x148>
 8004606:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800460a:	d047      	beq.n	800469c <ADC_ConfigureBoostMode+0x134>
 800460c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004610:	d84e      	bhi.n	80046b0 <ADC_ConfigureBoostMode+0x148>
 8004612:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004616:	d03d      	beq.n	8004694 <ADC_ConfigureBoostMode+0x12c>
 8004618:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800461c:	d848      	bhi.n	80046b0 <ADC_ConfigureBoostMode+0x148>
 800461e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004622:	d033      	beq.n	800468c <ADC_ConfigureBoostMode+0x124>
 8004624:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004628:	d842      	bhi.n	80046b0 <ADC_ConfigureBoostMode+0x148>
 800462a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800462e:	d029      	beq.n	8004684 <ADC_ConfigureBoostMode+0x11c>
 8004630:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004634:	d83c      	bhi.n	80046b0 <ADC_ConfigureBoostMode+0x148>
 8004636:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800463a:	d01a      	beq.n	8004672 <ADC_ConfigureBoostMode+0x10a>
 800463c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004640:	d836      	bhi.n	80046b0 <ADC_ConfigureBoostMode+0x148>
 8004642:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004646:	d014      	beq.n	8004672 <ADC_ConfigureBoostMode+0x10a>
 8004648:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800464c:	d830      	bhi.n	80046b0 <ADC_ConfigureBoostMode+0x148>
 800464e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004652:	d00e      	beq.n	8004672 <ADC_ConfigureBoostMode+0x10a>
 8004654:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004658:	d82a      	bhi.n	80046b0 <ADC_ConfigureBoostMode+0x148>
 800465a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800465e:	d008      	beq.n	8004672 <ADC_ConfigureBoostMode+0x10a>
 8004660:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004664:	d824      	bhi.n	80046b0 <ADC_ConfigureBoostMode+0x148>
 8004666:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800466a:	d002      	beq.n	8004672 <ADC_ConfigureBoostMode+0x10a>
 800466c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004670:	d11e      	bne.n	80046b0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	0c9b      	lsrs	r3, r3, #18
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004680:	60fb      	str	r3, [r7, #12]
        break;
 8004682:	e016      	b.n	80046b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	091b      	lsrs	r3, r3, #4
 8004688:	60fb      	str	r3, [r7, #12]
        break;
 800468a:	e012      	b.n	80046b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	095b      	lsrs	r3, r3, #5
 8004690:	60fb      	str	r3, [r7, #12]
        break;
 8004692:	e00e      	b.n	80046b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	099b      	lsrs	r3, r3, #6
 8004698:	60fb      	str	r3, [r7, #12]
        break;
 800469a:	e00a      	b.n	80046b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	09db      	lsrs	r3, r3, #7
 80046a0:	60fb      	str	r3, [r7, #12]
        break;
 80046a2:	e006      	b.n	80046b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	0a1b      	lsrs	r3, r3, #8
 80046a8:	60fb      	str	r3, [r7, #12]
        break;
 80046aa:	e002      	b.n	80046b2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80046ac:	bf00      	nop
 80046ae:	e000      	b.n	80046b2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80046b0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	085b      	lsrs	r3, r3, #1
 80046b6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4a1f      	ldr	r2, [pc, #124]	@ (8004738 <ADC_ConfigureBoostMode+0x1d0>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d808      	bhi.n	80046d2 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80046ce:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80046d0:	e025      	b.n	800471e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4a19      	ldr	r2, [pc, #100]	@ (800473c <ADC_ConfigureBoostMode+0x1d4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d80a      	bhi.n	80046f0 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046ec:	609a      	str	r2, [r3, #8]
}
 80046ee:	e016      	b.n	800471e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4a13      	ldr	r2, [pc, #76]	@ (8004740 <ADC_ConfigureBoostMode+0x1d8>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d80a      	bhi.n	800470e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800470a:	609a      	str	r2, [r3, #8]
}
 800470c:	e007      	b.n	800471e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800471c:	609a      	str	r2, [r3, #8]
}
 800471e:	bf00      	nop
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40022000 	.word	0x40022000
 800472c:	40022100 	.word	0x40022100
 8004730:	40022300 	.word	0x40022300
 8004734:	58026300 	.word	0x58026300
 8004738:	005f5e10 	.word	0x005f5e10
 800473c:	00bebc20 	.word	0x00bebc20
 8004740:	017d7840 	.word	0x017d7840

08004744 <LL_ADC_IsEnabled>:
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <LL_ADC_IsEnabled+0x18>
 8004758:	2301      	movs	r3, #1
 800475a:	e000      	b.n	800475e <LL_ADC_IsEnabled+0x1a>
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <LL_ADC_REG_IsConversionOngoing>:
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 0304 	and.w	r3, r3, #4
 800477a:	2b04      	cmp	r3, #4
 800477c:	d101      	bne.n	8004782 <LL_ADC_REG_IsConversionOngoing+0x18>
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004790:	b590      	push	{r4, r7, lr}
 8004792:	b0a3      	sub	sp, #140	@ 0x8c
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d101      	bne.n	80047ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80047aa:	2302      	movs	r3, #2
 80047ac:	e0c1      	b.n	8004932 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80047b6:	2300      	movs	r3, #0
 80047b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80047ba:	2300      	movs	r3, #0
 80047bc:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a5e      	ldr	r2, [pc, #376]	@ (800493c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d102      	bne.n	80047ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80047c8:	4b5d      	ldr	r3, [pc, #372]	@ (8004940 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	e001      	b.n	80047d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10b      	bne.n	80047f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047dc:	f043 0220 	orr.w	r2, r3, #32
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e0a0      	b.n	8004932 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff ffb9 	bl	800476a <LL_ADC_REG_IsConversionOngoing>
 80047f8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff ffb2 	bl	800476a <LL_ADC_REG_IsConversionOngoing>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	f040 8081 	bne.w	8004910 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800480e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004812:	2b00      	cmp	r3, #0
 8004814:	d17c      	bne.n	8004910 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a48      	ldr	r2, [pc, #288]	@ (800493c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d004      	beq.n	800482a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a46      	ldr	r2, [pc, #280]	@ (8004940 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d101      	bne.n	800482e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800482a:	4b46      	ldr	r3, [pc, #280]	@ (8004944 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800482c:	e000      	b.n	8004830 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800482e:	4b46      	ldr	r3, [pc, #280]	@ (8004948 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004830:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d039      	beq.n	80048ae <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800483a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	431a      	orrs	r2, r3
 8004848:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800484a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a3a      	ldr	r2, [pc, #232]	@ (800493c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d004      	beq.n	8004860 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a39      	ldr	r2, [pc, #228]	@ (8004940 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d10e      	bne.n	800487e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004860:	4836      	ldr	r0, [pc, #216]	@ (800493c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004862:	f7ff ff6f 	bl	8004744 <LL_ADC_IsEnabled>
 8004866:	4604      	mov	r4, r0
 8004868:	4835      	ldr	r0, [pc, #212]	@ (8004940 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800486a:	f7ff ff6b 	bl	8004744 <LL_ADC_IsEnabled>
 800486e:	4603      	mov	r3, r0
 8004870:	4323      	orrs	r3, r4
 8004872:	2b00      	cmp	r3, #0
 8004874:	bf0c      	ite	eq
 8004876:	2301      	moveq	r3, #1
 8004878:	2300      	movne	r3, #0
 800487a:	b2db      	uxtb	r3, r3
 800487c:	e008      	b.n	8004890 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800487e:	4833      	ldr	r0, [pc, #204]	@ (800494c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004880:	f7ff ff60 	bl	8004744 <LL_ADC_IsEnabled>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	bf0c      	ite	eq
 800488a:	2301      	moveq	r3, #1
 800488c:	2300      	movne	r3, #0
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d047      	beq.n	8004924 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004894:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	4b2d      	ldr	r3, [pc, #180]	@ (8004950 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800489a:	4013      	ands	r3, r2
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	6811      	ldr	r1, [r2, #0]
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	6892      	ldr	r2, [r2, #8]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	431a      	orrs	r2, r3
 80048a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048aa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048ac:	e03a      	b.n	8004924 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80048ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048b8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a1f      	ldr	r2, [pc, #124]	@ (800493c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d004      	beq.n	80048ce <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004940 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d10e      	bne.n	80048ec <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80048ce:	481b      	ldr	r0, [pc, #108]	@ (800493c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048d0:	f7ff ff38 	bl	8004744 <LL_ADC_IsEnabled>
 80048d4:	4604      	mov	r4, r0
 80048d6:	481a      	ldr	r0, [pc, #104]	@ (8004940 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80048d8:	f7ff ff34 	bl	8004744 <LL_ADC_IsEnabled>
 80048dc:	4603      	mov	r3, r0
 80048de:	4323      	orrs	r3, r4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	bf0c      	ite	eq
 80048e4:	2301      	moveq	r3, #1
 80048e6:	2300      	movne	r3, #0
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	e008      	b.n	80048fe <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80048ec:	4817      	ldr	r0, [pc, #92]	@ (800494c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80048ee:	f7ff ff29 	bl	8004744 <LL_ADC_IsEnabled>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	bf0c      	ite	eq
 80048f8:	2301      	moveq	r3, #1
 80048fa:	2300      	movne	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d010      	beq.n	8004924 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004902:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004904:	689a      	ldr	r2, [r3, #8]
 8004906:	4b12      	ldr	r3, [pc, #72]	@ (8004950 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004908:	4013      	ands	r3, r2
 800490a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800490c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800490e:	e009      	b.n	8004924 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004914:	f043 0220 	orr.w	r2, r3, #32
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004922:	e000      	b.n	8004926 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004924:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800492e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004932:	4618      	mov	r0, r3
 8004934:	378c      	adds	r7, #140	@ 0x8c
 8004936:	46bd      	mov	sp, r7
 8004938:	bd90      	pop	{r4, r7, pc}
 800493a:	bf00      	nop
 800493c:	40022000 	.word	0x40022000
 8004940:	40022100 	.word	0x40022100
 8004944:	40022300 	.word	0x40022300
 8004948:	58026300 	.word	0x58026300
 800494c:	58026000 	.word	0x58026000
 8004950:	fffff0e0 	.word	0xfffff0e0

08004954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004964:	4b0b      	ldr	r3, [pc, #44]	@ (8004994 <__NVIC_SetPriorityGrouping+0x40>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004970:	4013      	ands	r3, r2
 8004972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800497c:	4b06      	ldr	r3, [pc, #24]	@ (8004998 <__NVIC_SetPriorityGrouping+0x44>)
 800497e:	4313      	orrs	r3, r2
 8004980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004982:	4a04      	ldr	r2, [pc, #16]	@ (8004994 <__NVIC_SetPriorityGrouping+0x40>)
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	60d3      	str	r3, [r2, #12]
}
 8004988:	bf00      	nop
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	e000ed00 	.word	0xe000ed00
 8004998:	05fa0000 	.word	0x05fa0000

0800499c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049a0:	4b04      	ldr	r3, [pc, #16]	@ (80049b4 <__NVIC_GetPriorityGrouping+0x18>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	0a1b      	lsrs	r3, r3, #8
 80049a6:	f003 0307 	and.w	r3, r3, #7
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	e000ed00 	.word	0xe000ed00

080049b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	4603      	mov	r3, r0
 80049c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80049c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	db0b      	blt.n	80049e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ca:	88fb      	ldrh	r3, [r7, #6]
 80049cc:	f003 021f 	and.w	r2, r3, #31
 80049d0:	4907      	ldr	r1, [pc, #28]	@ (80049f0 <__NVIC_EnableIRQ+0x38>)
 80049d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049d6:	095b      	lsrs	r3, r3, #5
 80049d8:	2001      	movs	r0, #1
 80049da:	fa00 f202 	lsl.w	r2, r0, r2
 80049de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	e000e100 	.word	0xe000e100

080049f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	4603      	mov	r3, r0
 80049fc:	6039      	str	r1, [r7, #0]
 80049fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	db0a      	blt.n	8004a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	490c      	ldr	r1, [pc, #48]	@ (8004a40 <__NVIC_SetPriority+0x4c>)
 8004a0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a12:	0112      	lsls	r2, r2, #4
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	440b      	add	r3, r1
 8004a18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a1c:	e00a      	b.n	8004a34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	4908      	ldr	r1, [pc, #32]	@ (8004a44 <__NVIC_SetPriority+0x50>)
 8004a24:	88fb      	ldrh	r3, [r7, #6]
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	3b04      	subs	r3, #4
 8004a2c:	0112      	lsls	r2, r2, #4
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	440b      	add	r3, r1
 8004a32:	761a      	strb	r2, [r3, #24]
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	e000e100 	.word	0xe000e100
 8004a44:	e000ed00 	.word	0xe000ed00

08004a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b089      	sub	sp, #36	@ 0x24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	f1c3 0307 	rsb	r3, r3, #7
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	bf28      	it	cs
 8004a66:	2304      	movcs	r3, #4
 8004a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	2b06      	cmp	r3, #6
 8004a70:	d902      	bls.n	8004a78 <NVIC_EncodePriority+0x30>
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	3b03      	subs	r3, #3
 8004a76:	e000      	b.n	8004a7a <NVIC_EncodePriority+0x32>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	fa02 f303 	lsl.w	r3, r2, r3
 8004a86:	43da      	mvns	r2, r3
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	401a      	ands	r2, r3
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a90:	f04f 31ff 	mov.w	r1, #4294967295
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9a:	43d9      	mvns	r1, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aa0:	4313      	orrs	r3, r2
         );
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3724      	adds	r7, #36	@ 0x24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
	...

08004ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ac0:	d301      	bcc.n	8004ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e00f      	b.n	8004ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8004af0 <SysTick_Config+0x40>)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	3b01      	subs	r3, #1
 8004acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ace:	210f      	movs	r1, #15
 8004ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad4:	f7ff ff8e 	bl	80049f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ad8:	4b05      	ldr	r3, [pc, #20]	@ (8004af0 <SysTick_Config+0x40>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ade:	4b04      	ldr	r3, [pc, #16]	@ (8004af0 <SysTick_Config+0x40>)
 8004ae0:	2207      	movs	r2, #7
 8004ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	e000e010 	.word	0xe000e010

08004af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7ff ff29 	bl	8004954 <__NVIC_SetPriorityGrouping>
}
 8004b02:	bf00      	nop
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b086      	sub	sp, #24
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	4603      	mov	r3, r0
 8004b12:	60b9      	str	r1, [r7, #8]
 8004b14:	607a      	str	r2, [r7, #4]
 8004b16:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b18:	f7ff ff40 	bl	800499c <__NVIC_GetPriorityGrouping>
 8004b1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	68b9      	ldr	r1, [r7, #8]
 8004b22:	6978      	ldr	r0, [r7, #20]
 8004b24:	f7ff ff90 	bl	8004a48 <NVIC_EncodePriority>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b2e:	4611      	mov	r1, r2
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff ff5f 	bl	80049f4 <__NVIC_SetPriority>
}
 8004b36:	bf00      	nop
 8004b38:	3718      	adds	r7, #24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b082      	sub	sp, #8
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	4603      	mov	r3, r0
 8004b46:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7ff ff33 	bl	80049b8 <__NVIC_EnableIRQ>
}
 8004b52:	bf00      	nop
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b082      	sub	sp, #8
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7ff ffa4 	bl	8004ab0 <SysTick_Config>
 8004b68:	4603      	mov	r3, r0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b098      	sub	sp, #96	@ 0x60
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004b7c:	4a84      	ldr	r2, [pc, #528]	@ (8004d90 <HAL_FDCAN_Init+0x21c>)
 8004b7e:	f107 030c 	add.w	r3, r7, #12
 8004b82:	4611      	mov	r1, r2
 8004b84:	224c      	movs	r2, #76	@ 0x4c
 8004b86:	4618      	mov	r0, r3
 8004b88:	f006 f9fc 	bl	800af84 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e1c6      	b.n	8004f24 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a7e      	ldr	r2, [pc, #504]	@ (8004d94 <HAL_FDCAN_Init+0x220>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d106      	bne.n	8004bae <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004ba8:	461a      	mov	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d106      	bne.n	8004bc8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fd fc24 	bl	8002410 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699a      	ldr	r2, [r3, #24]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0210 	bic.w	r2, r2, #16
 8004bd6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bd8:	f7fd fef0 	bl	80029bc <HAL_GetTick>
 8004bdc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004bde:	e014      	b.n	8004c0a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004be0:	f7fd feec 	bl	80029bc <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b0a      	cmp	r3, #10
 8004bec:	d90d      	bls.n	8004c0a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004bf4:	f043 0201 	orr.w	r2, r3, #1
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2203      	movs	r2, #3
 8004c02:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e18c      	b.n	8004f24 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	f003 0308 	and.w	r3, r3, #8
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d0e3      	beq.n	8004be0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699a      	ldr	r2, [r3, #24]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0201 	orr.w	r2, r2, #1
 8004c26:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c28:	f7fd fec8 	bl	80029bc <HAL_GetTick>
 8004c2c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004c2e:	e014      	b.n	8004c5a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004c30:	f7fd fec4 	bl	80029bc <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b0a      	cmp	r3, #10
 8004c3c:	d90d      	bls.n	8004c5a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c44:	f043 0201 	orr.w	r2, r3, #1
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2203      	movs	r2, #3
 8004c52:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e164      	b.n	8004f24 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0e3      	beq.n	8004c30 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699a      	ldr	r2, [r3, #24]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0202 	orr.w	r2, r2, #2
 8004c76:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	7c1b      	ldrb	r3, [r3, #16]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d108      	bne.n	8004c92 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	699a      	ldr	r2, [r3, #24]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c8e:	619a      	str	r2, [r3, #24]
 8004c90:	e007      	b.n	8004ca2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	699a      	ldr	r2, [r3, #24]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ca0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	7c5b      	ldrb	r3, [r3, #17]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d108      	bne.n	8004cbc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	699a      	ldr	r2, [r3, #24]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cb8:	619a      	str	r2, [r3, #24]
 8004cba:	e007      	b.n	8004ccc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699a      	ldr	r2, [r3, #24]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004cca:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	7c9b      	ldrb	r3, [r3, #18]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d108      	bne.n	8004ce6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699a      	ldr	r2, [r3, #24]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004ce2:	619a      	str	r2, [r3, #24]
 8004ce4:	e007      	b.n	8004cf6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	699a      	ldr	r2, [r3, #24]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004cf4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699a      	ldr	r2, [r3, #24]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004d1a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691a      	ldr	r2, [r3, #16]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0210 	bic.w	r2, r2, #16
 8004d2a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d108      	bne.n	8004d46 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	699a      	ldr	r2, [r3, #24]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0204 	orr.w	r2, r2, #4
 8004d42:	619a      	str	r2, [r3, #24]
 8004d44:	e030      	b.n	8004da8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d02c      	beq.n	8004da8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d020      	beq.n	8004d98 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	699a      	ldr	r2, [r3, #24]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004d64:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	691a      	ldr	r2, [r3, #16]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f042 0210 	orr.w	r2, r2, #16
 8004d74:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	2b03      	cmp	r3, #3
 8004d7c:	d114      	bne.n	8004da8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	699a      	ldr	r2, [r3, #24]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 0220 	orr.w	r2, r2, #32
 8004d8c:	619a      	str	r2, [r3, #24]
 8004d8e:	e00b      	b.n	8004da8 <HAL_FDCAN_Init+0x234>
 8004d90:	0800bb48 	.word	0x0800bb48
 8004d94:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699a      	ldr	r2, [r3, #24]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0220 	orr.w	r2, r2, #32
 8004da6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	3b01      	subs	r3, #1
 8004dae:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	3b01      	subs	r3, #1
 8004db6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004db8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004dc0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004dd0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004dd2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ddc:	d115      	bne.n	8004e0a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de8:	3b01      	subs	r3, #1
 8004dea:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004dec:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df2:	3b01      	subs	r3, #1
 8004df4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004df6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004e06:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004e08:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00a      	beq.n	8004e28 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e30:	4413      	add	r3, r2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d011      	beq.n	8004e5a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004e3e:	f023 0107 	bic.w	r1, r3, #7
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	3360      	adds	r3, #96	@ 0x60
 8004e4a:	443b      	add	r3, r7
 8004e4c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d011      	beq.n	8004e86 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004e6a:	f023 0107 	bic.w	r1, r3, #7
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	3360      	adds	r3, #96	@ 0x60
 8004e76:	443b      	add	r3, r7
 8004e78:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d012      	beq.n	8004eb4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004e96:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	3360      	adds	r3, #96	@ 0x60
 8004ea2:	443b      	add	r3, r7
 8004ea4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004ea8:	011a      	lsls	r2, r3, #4
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d012      	beq.n	8004ee2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004ec4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	3360      	adds	r3, #96	@ 0x60
 8004ed0:	443b      	add	r3, r7
 8004ed2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004ed6:	021a      	lsls	r2, r3, #8
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a11      	ldr	r2, [pc, #68]	@ (8004f2c <HAL_FDCAN_Init+0x3b8>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d107      	bne.n	8004efc <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	689a      	ldr	r2, [r3, #8]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f022 0203 	bic.w	r2, r2, #3
 8004efa:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 fdf7 	bl	8005b08 <FDCAN_CalcultateRamBlockAddresses>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8004f20:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3760      	adds	r7, #96	@ 0x60
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	4000a000 	.word	0x4000a000

08004f30 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004f40:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004f42:	7bfb      	ldrb	r3, [r7, #15]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d002      	beq.n	8004f4e <HAL_FDCAN_ConfigFilter+0x1e>
 8004f48:	7bfb      	ldrb	r3, [r7, #15]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d157      	bne.n	8004ffe <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d12b      	bne.n	8004fae <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	2b07      	cmp	r3, #7
 8004f5c:	d10d      	bne.n	8004f7a <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8004f6a:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004f70:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8004f72:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8004f76:	617b      	str	r3, [r7, #20]
 8004f78:	e00e      	b.n	8004f98 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004f86:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8004f8e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004f94:	4313      	orrs	r3, r2
 8004f96:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	e025      	b.n	8004ffa <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	075a      	lsls	r2, r3, #29
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	2b07      	cmp	r3, #7
 8004fc2:	d103      	bne.n	8004fcc <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	613b      	str	r3, [r7, #16]
 8004fca:	e006      	b.n	8004fda <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	079a      	lsls	r2, r3, #30
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	4413      	add	r3, r2
 8004fe6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	3304      	adds	r3, #4
 8004ff2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	e008      	b.n	8005010 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005004:	f043 0202 	orr.w	r2, r3, #2
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
  }
}
 8005010:	4618      	mov	r0, r3
 8005012:	371c      	adds	r7, #28
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b01      	cmp	r3, #1
 800502e:	d111      	bne.n	8005054 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	699a      	ldr	r2, [r3, #24]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 0201 	bic.w	r2, r2, #1
 8005046:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8005050:	2300      	movs	r3, #0
 8005052:	e008      	b.n	8005066 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800505a:	f043 0204 	orr.w	r2, r3, #4
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
  }
}
 8005066:	4618      	mov	r0, r3
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b086      	sub	sp, #24
 8005076:	af00      	add	r7, sp, #0
 8005078:	60f8      	str	r0, [r7, #12]
 800507a:	60b9      	str	r1, [r7, #8]
 800507c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d141      	bne.n	800510e <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005092:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d109      	bne.n	80050ae <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050a0:	f043 0220 	orr.w	r2, r3, #32
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e038      	b.n	8005120 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80050b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d009      	beq.n	80050d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050c4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e026      	b.n	8005120 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80050da:	0c1b      	lsrs	r3, r3, #16
 80050dc:	f003 031f 	and.w	r3, r3, #31
 80050e0:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	68b9      	ldr	r1, [r7, #8]
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 fe93 	bl	8005e14 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2101      	movs	r1, #1
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	fa01 f202 	lsl.w	r2, r1, r2
 80050fa:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80050fe:	2201      	movs	r2, #1
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	409a      	lsls	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	e008      	b.n	8005120 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005114:	f043 0208 	orr.w	r2, r3, #8
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
  }
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005128:	b480      	push	{r7}
 800512a:	b08b      	sub	sp, #44	@ 0x2c
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005136:	2300      	movs	r3, #0
 8005138:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005140:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005142:	7efb      	ldrb	r3, [r7, #27]
 8005144:	2b02      	cmp	r3, #2
 8005146:	f040 8149 	bne.w	80053dc <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2b40      	cmp	r3, #64	@ 0x40
 800514e:	d14c      	bne.n	80051ea <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005158:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d109      	bne.n	8005174 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005166:	f043 0220 	orr.w	r2, r3, #32
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e13c      	b.n	80053ee <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800517c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005180:	2b00      	cmp	r3, #0
 8005182:	d109      	bne.n	8005198 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800518a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e12a      	b.n	80053ee <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80051a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051a8:	d10a      	bne.n	80051c0 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80051b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051ba:	d101      	bne.n	80051c0 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80051bc:	2301      	movs	r3, #1
 80051be:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80051c8:	0a1b      	lsrs	r3, r3, #8
 80051ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051ce:	69fa      	ldr	r2, [r7, #28]
 80051d0:	4413      	add	r3, r2
 80051d2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051dc:	69f9      	ldr	r1, [r7, #28]
 80051de:	fb01 f303 	mul.w	r3, r1, r3
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80051e8:	e068      	b.n	80052bc <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	2b41      	cmp	r3, #65	@ 0x41
 80051ee:	d14c      	bne.n	800528a <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80051f8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d109      	bne.n	8005214 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005206:	f043 0220 	orr.w	r2, r3, #32
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e0ec      	b.n	80053ee <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800521c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005220:	2b00      	cmp	r3, #0
 8005222:	d109      	bne.n	8005238 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800522a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e0da      	b.n	80053ee <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005240:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005244:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005248:	d10a      	bne.n	8005260 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005252:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005256:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800525a:	d101      	bne.n	8005260 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800525c:	2301      	movs	r3, #1
 800525e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005268:	0a1b      	lsrs	r3, r3, #8
 800526a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800526e:	69fa      	ldr	r2, [r7, #28]
 8005270:	4413      	add	r3, r2
 8005272:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800527c:	69f9      	ldr	r1, [r7, #28]
 800527e:	fb01 f303 	mul.w	r3, r1, r3
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	627b      	str	r3, [r7, #36]	@ 0x24
 8005288:	e018      	b.n	80052bc <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	429a      	cmp	r2, r3
 8005292:	d309      	bcc.n	80052a8 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800529a:	f043 0220 	orr.w	r2, r3, #32
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e0a2      	b.n	80053ee <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052b0:	68b9      	ldr	r1, [r7, #8]
 80052b2:	fb01 f303 	mul.w	r3, r1, r3
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4413      	add	r3, r2
 80052ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80052bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d107      	bne.n	80052e0 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80052d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	0c9b      	lsrs	r3, r3, #18
 80052d6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	e005      	b.n	80052ec <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80052e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80052ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80052f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005306:	3304      	adds	r3, #4
 8005308:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800530a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	b29a      	uxth	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	0c1b      	lsrs	r3, r3, #16
 800531a:	f003 020f 	and.w	r2, r3, #15
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800532e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800533a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	0e1b      	lsrs	r3, r3, #24
 8005340:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	0fda      	lsrs	r2, r3, #31
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005354:	3304      	adds	r3, #4
 8005356:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800535c:	2300      	movs	r3, #0
 800535e:	623b      	str	r3, [r7, #32]
 8005360:	e00a      	b.n	8005378 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	441a      	add	r2, r3
 8005368:	6839      	ldr	r1, [r7, #0]
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	440b      	add	r3, r1
 800536e:	7812      	ldrb	r2, [r2, #0]
 8005370:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	3301      	adds	r3, #1
 8005376:	623b      	str	r3, [r7, #32]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	4a1f      	ldr	r2, [pc, #124]	@ (80053fc <HAL_FDCAN_GetRxMessage+0x2d4>)
 800537e:	5cd3      	ldrb	r3, [r2, r3]
 8005380:	461a      	mov	r2, r3
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	4293      	cmp	r3, r2
 8005386:	d3ec      	bcc.n	8005362 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b40      	cmp	r3, #64	@ 0x40
 800538c:	d105      	bne.n	800539a <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8005398:	e01e      	b.n	80053d8 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2b41      	cmp	r3, #65	@ 0x41
 800539e:	d105      	bne.n	80053ac <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	69fa      	ldr	r2, [r7, #28]
 80053a6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80053aa:	e015      	b.n	80053d8 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2b1f      	cmp	r3, #31
 80053b0:	d808      	bhi.n	80053c4 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2101      	movs	r1, #1
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	fa01 f202 	lsl.w	r2, r1, r2
 80053be:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80053c2:	e009      	b.n	80053d8 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f003 021f 	and.w	r2, r3, #31
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2101      	movs	r1, #1
 80053d0:	fa01 f202 	lsl.w	r2, r1, r2
 80053d4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80053d8:	2300      	movs	r3, #0
 80053da:	e008      	b.n	80053ee <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053e2:	f043 0208 	orr.w	r2, r3, #8
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
  }
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	372c      	adds	r7, #44	@ 0x2c
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	0800bba4 	.word	0x0800bba4

08005400 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005412:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005414:	7dfb      	ldrb	r3, [r7, #23]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d002      	beq.n	8005420 <HAL_FDCAN_ActivateNotification+0x20>
 800541a:	7dfb      	ldrb	r3, [r7, #23]
 800541c:	2b02      	cmp	r3, #2
 800541e:	d155      	bne.n	80054cc <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	4013      	ands	r3, r2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d108      	bne.n	8005440 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f042 0201 	orr.w	r2, r2, #1
 800543c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800543e:	e014      	b.n	800546a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	4013      	ands	r3, r2
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	429a      	cmp	r2, r3
 800544e:	d108      	bne.n	8005462 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0202 	orr.w	r2, r2, #2
 800545e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005460:	e003      	b.n	800546a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2203      	movs	r2, #3
 8005468:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005470:	2b00      	cmp	r3, #0
 8005472:	d009      	beq.n	8005488 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	430a      	orrs	r2, r1
 8005484:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800548e:	2b00      	cmp	r3, #0
 8005490:	d009      	beq.n	80054a6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	4b0f      	ldr	r3, [pc, #60]	@ (80054ec <HAL_FDCAN_ActivateNotification+0xec>)
 80054b0:	4013      	ands	r3, r2
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	6812      	ldr	r2, [r2, #0]
 80054b6:	430b      	orrs	r3, r1
 80054b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80054ba:	4b0d      	ldr	r3, [pc, #52]	@ (80054f0 <HAL_FDCAN_ActivateNotification+0xf0>)
 80054bc:	695a      	ldr	r2, [r3, #20]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	0f9b      	lsrs	r3, r3, #30
 80054c2:	490b      	ldr	r1, [pc, #44]	@ (80054f0 <HAL_FDCAN_ActivateNotification+0xf0>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80054c8:	2300      	movs	r3, #0
 80054ca:	e008      	b.n	80054de <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054d2:	f043 0202 	orr.w	r2, r3, #2
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
  }
}
 80054de:	4618      	mov	r0, r3
 80054e0:	371c      	adds	r7, #28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	3fcfffff 	.word	0x3fcfffff
 80054f0:	4000a800 	.word	0x4000a800

080054f4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b096      	sub	sp, #88	@ 0x58
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80054fc:	4b9a      	ldr	r3, [pc, #616]	@ (8005768 <HAL_FDCAN_IRQHandler+0x274>)
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	079b      	lsls	r3, r3, #30
 8005502:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005504:	4b98      	ldr	r3, [pc, #608]	@ (8005768 <HAL_FDCAN_IRQHandler+0x274>)
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	079b      	lsls	r3, r3, #30
 800550a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800550c:	4013      	ands	r3, r2
 800550e:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005516:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800551a:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005522:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005524:	4013      	ands	r3, r2
 8005526:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800552e:	f003 030f 	and.w	r3, r3, #15
 8005532:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800553a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800553c:	4013      	ands	r3, r2
 800553e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005546:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800554a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005552:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005554:	4013      	ands	r3, r2
 8005556:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800555e:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8005562:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800556a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800556c:	4013      	ands	r3, r2
 800556e:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005576:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800557a:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005582:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005584:	4013      	ands	r3, r2
 8005586:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800558e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005596:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800559a:	0a1b      	lsrs	r3, r3, #8
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d010      	beq.n	80055c6 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80055a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a6:	0a1b      	lsrs	r3, r3, #8
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00a      	beq.n	80055c6 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80055b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80055ba:	4b6b      	ldr	r3, [pc, #428]	@ (8005768 <HAL_FDCAN_IRQHandler+0x274>)
 80055bc:	2200      	movs	r2, #0
 80055be:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 fa54 	bl	8005a6e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80055c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055c8:	0a9b      	lsrs	r3, r3, #10
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d01d      	beq.n	800560e <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80055d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d4:	0a9b      	lsrs	r3, r3, #10
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d017      	beq.n	800560e <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80055e6:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80055f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80055f2:	4013      	ands	r3, r2
 80055f4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80055fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8005600:	4b59      	ldr	r3, [pc, #356]	@ (8005768 <HAL_FDCAN_IRQHandler+0x274>)
 8005602:	2200      	movs	r2, #0
 8005604:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005606:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fa07 	bl	8005a1c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800560e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00d      	beq.n	8005630 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800561a:	4b54      	ldr	r3, [pc, #336]	@ (800576c <HAL_FDCAN_IRQHandler+0x278>)
 800561c:	400b      	ands	r3, r1
 800561e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005620:	4a51      	ldr	r2, [pc, #324]	@ (8005768 <HAL_FDCAN_IRQHandler+0x274>)
 8005622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005624:	0f9b      	lsrs	r3, r3, #30
 8005626:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005628:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f9c0 	bl	80059b0 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00d      	beq.n	8005652 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800563c:	4b4b      	ldr	r3, [pc, #300]	@ (800576c <HAL_FDCAN_IRQHandler+0x278>)
 800563e:	400b      	ands	r3, r1
 8005640:	6513      	str	r3, [r2, #80]	@ 0x50
 8005642:	4a49      	ldr	r2, [pc, #292]	@ (8005768 <HAL_FDCAN_IRQHandler+0x274>)
 8005644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005646:	0f9b      	lsrs	r3, r3, #30
 8005648:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800564a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f9ba 	bl	80059c6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005652:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00d      	beq.n	8005674 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800565e:	4b43      	ldr	r3, [pc, #268]	@ (800576c <HAL_FDCAN_IRQHandler+0x278>)
 8005660:	400b      	ands	r3, r1
 8005662:	6513      	str	r3, [r2, #80]	@ 0x50
 8005664:	4a40      	ldr	r2, [pc, #256]	@ (8005768 <HAL_FDCAN_IRQHandler+0x274>)
 8005666:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005668:	0f9b      	lsrs	r3, r3, #30
 800566a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800566c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7fc fa8e 	bl	8001b90 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005674:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00d      	beq.n	8005696 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005680:	4b3a      	ldr	r3, [pc, #232]	@ (800576c <HAL_FDCAN_IRQHandler+0x278>)
 8005682:	400b      	ands	r3, r1
 8005684:	6513      	str	r3, [r2, #80]	@ 0x50
 8005686:	4a38      	ldr	r2, [pc, #224]	@ (8005768 <HAL_FDCAN_IRQHandler+0x274>)
 8005688:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800568a:	0f9b      	lsrs	r3, r3, #30
 800568c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800568e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f9a3 	bl	80059dc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005698:	0adb      	lsrs	r3, r3, #11
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d010      	beq.n	80056c4 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80056a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a4:	0adb      	lsrs	r3, r3, #11
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056b6:	651a      	str	r2, [r3, #80]	@ 0x50
 80056b8:	4b2b      	ldr	r3, [pc, #172]	@ (8005768 <HAL_FDCAN_IRQHandler+0x274>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f997 	bl	80059f2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80056c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056c6:	0a5b      	lsrs	r3, r3, #9
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01d      	beq.n	800570c <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80056d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d2:	0a5b      	lsrs	r3, r3, #9
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d017      	beq.n	800570c <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80056e4:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056f0:	4013      	ands	r3, r2
 80056f2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056fc:	651a      	str	r2, [r3, #80]	@ 0x50
 80056fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005768 <HAL_FDCAN_IRQHandler+0x274>)
 8005700:	2200      	movs	r2, #0
 8005702:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005704:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f97d 	bl	8005a06 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 800570c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800570e:	0cdb      	lsrs	r3, r3, #19
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d010      	beq.n	800573a <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571a:	0cdb      	lsrs	r3, r3, #19
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00a      	beq.n	800573a <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800572c:	651a      	str	r2, [r3, #80]	@ 0x50
 800572e:	4b0e      	ldr	r3, [pc, #56]	@ (8005768 <HAL_FDCAN_IRQHandler+0x274>)
 8005730:	2200      	movs	r2, #0
 8005732:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f97c 	bl	8005a32 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800573a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800573c:	0c1b      	lsrs	r3, r3, #16
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d016      	beq.n	8005774 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005748:	0c1b      	lsrs	r3, r3, #16
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d010      	beq.n	8005774 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800575a:	651a      	str	r2, [r3, #80]	@ 0x50
 800575c:	4b02      	ldr	r3, [pc, #8]	@ (8005768 <HAL_FDCAN_IRQHandler+0x274>)
 800575e:	2200      	movs	r2, #0
 8005760:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	e004      	b.n	8005770 <HAL_FDCAN_IRQHandler+0x27c>
 8005766:	bf00      	nop
 8005768:	4000a800 	.word	0x4000a800
 800576c:	3fcfffff 	.word	0x3fcfffff
 8005770:	f000 f969 	bl	8005a46 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005776:	0c9b      	lsrs	r3, r3, #18
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	d010      	beq.n	80057a2 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005782:	0c9b      	lsrs	r3, r3, #18
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00a      	beq.n	80057a2 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005794:	651a      	str	r2, [r3, #80]	@ 0x50
 8005796:	4b83      	ldr	r3, [pc, #524]	@ (80059a4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005798:	2200      	movs	r2, #0
 800579a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f95c 	bl	8005a5a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80057a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057a4:	0c5b      	lsrs	r3, r3, #17
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d015      	beq.n	80057da <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80057ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b0:	0c5b      	lsrs	r3, r3, #17
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00f      	beq.n	80057da <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80057c2:	651a      	str	r2, [r3, #80]	@ 0x50
 80057c4:	4b77      	ldr	r3, [pc, #476]	@ (80059a4 <HAL_FDCAN_IRQHandler+0x4b0>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057d0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80057da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00d      	beq.n	80057fc <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057e6:	4b70      	ldr	r3, [pc, #448]	@ (80059a8 <HAL_FDCAN_IRQHandler+0x4b4>)
 80057e8:	400b      	ands	r3, r1
 80057ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80057ec:	4a6d      	ldr	r2, [pc, #436]	@ (80059a4 <HAL_FDCAN_IRQHandler+0x4b0>)
 80057ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057f0:	0f9b      	lsrs	r3, r3, #30
 80057f2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80057f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f94d 	bl	8005a96 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80057fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d011      	beq.n	8005826 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005808:	4b67      	ldr	r3, [pc, #412]	@ (80059a8 <HAL_FDCAN_IRQHandler+0x4b4>)
 800580a:	400b      	ands	r3, r1
 800580c:	6513      	str	r3, [r2, #80]	@ 0x50
 800580e:	4a65      	ldr	r2, [pc, #404]	@ (80059a4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005812:	0f9b      	lsrs	r3, r3, #30
 8005814:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800581c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800581e:	431a      	orrs	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a60      	ldr	r2, [pc, #384]	@ (80059ac <HAL_FDCAN_IRQHandler+0x4b8>)
 800582c:	4293      	cmp	r3, r2
 800582e:	f040 80ac 	bne.w	800598a <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f003 0303 	and.w	r3, r3, #3
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 80a4 	beq.w	800598a <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	f003 030f 	and.w	r3, r3, #15
 800584c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005854:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005856:	4013      	ands	r3, r2
 8005858:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005864:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800586e:	4013      	ands	r3, r2
 8005870:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800587c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005886:	4013      	ands	r3, r2
 8005888:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	6a1b      	ldr	r3, [r3, #32]
 8005890:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8005894:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589c:	6a3a      	ldr	r2, [r7, #32]
 800589e:	4013      	ands	r3, r2
 80058a0:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 80058ac:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b4:	69fa      	ldr	r2, [r7, #28]
 80058b6:	4013      	ands	r3, r2
 80058b8:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c0:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80058ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d007      	beq.n	80058e0 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058d6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80058d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f8e6 	bl	8005aac <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80058e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d007      	beq.n	80058f6 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058ec:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80058ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f8e6 	bl	8005ac2 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	099b      	lsrs	r3, r3, #6
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d01a      	beq.n	8005938 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	099b      	lsrs	r3, r3, #6
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d014      	beq.n	8005938 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005914:	0c1b      	lsrs	r3, r3, #16
 8005916:	b29b      	uxth	r3, r3
 8005918:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005920:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005924:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	2240      	movs	r2, #64	@ 0x40
 800592c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	6939      	ldr	r1, [r7, #16]
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f8d0 	bl	8005ad8 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593a:	2b00      	cmp	r3, #0
 800593c:	d007      	beq.n	800594e <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005944:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005946:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f8d1 	bl	8005af0 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00b      	beq.n	800596c <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	6a3a      	ldr	r2, [r7, #32]
 800595a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	431a      	orrs	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00b      	beq.n	800598a <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	69fa      	ldr	r2, [r7, #28]
 8005978:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005990:	2b00      	cmp	r3, #0
 8005992:	d002      	beq.n	800599a <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f874 	bl	8005a82 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800599a:	bf00      	nop
 800599c:	3758      	adds	r7, #88	@ 0x58
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	4000a800 	.word	0x4000a800
 80059a8:	3fcfffff 	.word	0x3fcfffff
 80059ac:	4000a000 	.word	0x4000a000

080059b0 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80059e6:	bf00      	nop
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b083      	sub	sp, #12
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80059fa:	bf00      	nop
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b083      	sub	sp, #12
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
 8005a0e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005a26:	bf00      	nop
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b083      	sub	sp, #12
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005a3a:	bf00      	nop
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b083      	sub	sp, #12
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005a4e:	bf00      	nop
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005a62:	bf00      	nop
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b083      	sub	sp, #12
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005a76:	bf00      	nop
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b083      	sub	sp, #12
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005ae4:	bf00      	nop
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8005afa:	bf00      	nop
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
	...

08005b08 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b14:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005b1e:	4ba7      	ldr	r3, [pc, #668]	@ (8005dbc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005b20:	4013      	ands	r3, r2
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	0091      	lsls	r1, r2, #2
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	6812      	ldr	r2, [r2, #0]
 8005b2a:	430b      	orrs	r3, r1
 8005b2c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b38:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b40:	041a      	lsls	r2, r3, #16
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	4413      	add	r3, r2
 8005b54:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005b5e:	4b97      	ldr	r3, [pc, #604]	@ (8005dbc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	0091      	lsls	r1, r2, #2
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	6812      	ldr	r2, [r2, #0]
 8005b6a:	430b      	orrs	r3, r1
 8005b6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b78:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b80:	041a      	lsls	r2, r3, #16
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b90:	005b      	lsls	r3, r3, #1
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	4413      	add	r3, r2
 8005b96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005ba0:	4b86      	ldr	r3, [pc, #536]	@ (8005dbc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	0091      	lsls	r1, r2, #2
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	6812      	ldr	r2, [r2, #0]
 8005bac:	430b      	orrs	r3, r1
 8005bae:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005bba:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc2:	041a      	lsls	r2, r3, #16
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005bd6:	fb02 f303 	mul.w	r3, r2, r3
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	4413      	add	r3, r2
 8005bde:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005be8:	4b74      	ldr	r3, [pc, #464]	@ (8005dbc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005bea:	4013      	ands	r3, r2
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	0091      	lsls	r1, r2, #2
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	6812      	ldr	r2, [r2, #0]
 8005bf4:	430b      	orrs	r3, r1
 8005bf6:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c02:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c0a:	041a      	lsls	r2, r3, #16
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	430a      	orrs	r2, r1
 8005c12:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005c1e:	fb02 f303 	mul.w	r3, r2, r3
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	4413      	add	r3, r2
 8005c26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005c30:	4b62      	ldr	r3, [pc, #392]	@ (8005dbc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c32:	4013      	ands	r3, r2
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	0091      	lsls	r1, r2, #2
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6812      	ldr	r2, [r2, #0]
 8005c3c:	430b      	orrs	r3, r1
 8005c3e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005c4a:	fb02 f303 	mul.w	r3, r2, r3
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	4413      	add	r3, r2
 8005c52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005c5c:	4b57      	ldr	r3, [pc, #348]	@ (8005dbc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c5e:	4013      	ands	r3, r2
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	0091      	lsls	r1, r2, #2
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	6812      	ldr	r2, [r2, #0]
 8005c68:	430b      	orrs	r3, r1
 8005c6a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c76:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c7e:	041a      	lsls	r2, r3, #16
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	4413      	add	r3, r2
 8005c94:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005c9e:	4b47      	ldr	r3, [pc, #284]	@ (8005dbc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	0091      	lsls	r1, r2, #2
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	6812      	ldr	r2, [r2, #0]
 8005caa:	430b      	orrs	r3, r1
 8005cac:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005cb8:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cc0:	041a      	lsls	r2, r3, #16
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005cd4:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cdc:	061a      	lsls	r2, r3, #24
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cec:	4b34      	ldr	r3, [pc, #208]	@ (8005dc0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005cee:	4413      	add	r3, r2
 8005cf0:	009a      	lsls	r2, r3, #2
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	441a      	add	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d0e:	00db      	lsls	r3, r3, #3
 8005d10:	441a      	add	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d1e:	6879      	ldr	r1, [r7, #4]
 8005d20:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8005d22:	fb01 f303 	mul.w	r3, r1, r3
 8005d26:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005d28:	441a      	add	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8005d3a:	fb01 f303 	mul.w	r3, r1, r3
 8005d3e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005d40:	441a      	add	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d4e:	6879      	ldr	r1, [r7, #4]
 8005d50:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8005d52:	fb01 f303 	mul.w	r3, r1, r3
 8005d56:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005d58:	441a      	add	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	441a      	add	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d7e:	6879      	ldr	r1, [r7, #4]
 8005d80:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005d82:	fb01 f303 	mul.w	r3, r1, r3
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	441a      	add	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d9a:	6879      	ldr	r1, [r7, #4]
 8005d9c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005d9e:	fb01 f303 	mul.w	r3, r1, r3
 8005da2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005da4:	441a      	add	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005db2:	4a04      	ldr	r2, [pc, #16]	@ (8005dc4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d915      	bls.n	8005de4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005db8:	e006      	b.n	8005dc8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005dba:	bf00      	nop
 8005dbc:	ffff0003 	.word	0xffff0003
 8005dc0:	10002b00 	.word	0x10002b00
 8005dc4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005dce:	f043 0220 	orr.w	r2, r3, #32
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2203      	movs	r2, #3
 8005ddc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e010      	b.n	8005e06 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005de8:	60fb      	str	r3, [r7, #12]
 8005dea:	e005      	b.n	8005df8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	3304      	adds	r3, #4
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d3f3      	bcc.n	8005dec <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop

08005e14 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b089      	sub	sp, #36	@ 0x24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
 8005e20:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10a      	bne.n	8005e40 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005e32:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	61fb      	str	r3, [r7, #28]
 8005e3e:	e00a      	b.n	8005e56 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005e48:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005e4e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005e50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e54:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005e60:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005e66:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005e6c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005e74:	4313      	orrs	r3, r2
 8005e76:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e82:	6839      	ldr	r1, [r7, #0]
 8005e84:	fb01 f303 	mul.w	r3, r1, r3
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	69fa      	ldr	r2, [r7, #28]
 8005e92:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	3304      	adds	r3, #4
 8005e98:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	3304      	adds	r3, #4
 8005ea4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	617b      	str	r3, [r7, #20]
 8005eaa:	e020      	b.n	8005eee <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	3303      	adds	r3, #3
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	3302      	adds	r3, #2
 8005ebc:	6879      	ldr	r1, [r7, #4]
 8005ebe:	440b      	add	r3, r1
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005ec4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	6879      	ldr	r1, [r7, #4]
 8005ecc:	440b      	add	r3, r1
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005ed2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005ed4:	6879      	ldr	r1, [r7, #4]
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	440a      	add	r2, r1
 8005eda:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005edc:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	3304      	adds	r3, #4
 8005ee6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	3304      	adds	r3, #4
 8005eec:	617b      	str	r3, [r7, #20]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	4a06      	ldr	r2, [pc, #24]	@ (8005f0c <FDCAN_CopyMessageToRAM+0xf8>)
 8005ef4:	5cd3      	ldrb	r3, [r2, r3]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d3d6      	bcc.n	8005eac <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8005efe:	bf00      	nop
 8005f00:	bf00      	nop
 8005f02:	3724      	adds	r7, #36	@ 0x24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	0800bba4 	.word	0x0800bba4

08005f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b089      	sub	sp, #36	@ 0x24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005f1e:	4b86      	ldr	r3, [pc, #536]	@ (8006138 <HAL_GPIO_Init+0x228>)
 8005f20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f22:	e18c      	b.n	800623e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	2101      	movs	r1, #1
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f30:	4013      	ands	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f000 817e 	beq.w	8006238 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f003 0303 	and.w	r3, r3, #3
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d005      	beq.n	8005f54 <HAL_GPIO_Init+0x44>
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f003 0303 	and.w	r3, r3, #3
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d130      	bne.n	8005fb6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	005b      	lsls	r3, r3, #1
 8005f5e:	2203      	movs	r2, #3
 8005f60:	fa02 f303 	lsl.w	r3, r2, r3
 8005f64:	43db      	mvns	r3, r3
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	4013      	ands	r3, r2
 8005f6a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	68da      	ldr	r2, [r3, #12]
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	005b      	lsls	r3, r3, #1
 8005f74:	fa02 f303 	lsl.w	r3, r2, r3
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f92:	43db      	mvns	r3, r3
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	4013      	ands	r3, r2
 8005f98:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	091b      	lsrs	r3, r3, #4
 8005fa0:	f003 0201 	and.w	r2, r3, #1
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f003 0303 	and.w	r3, r3, #3
 8005fbe:	2b03      	cmp	r3, #3
 8005fc0:	d017      	beq.n	8005ff2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	005b      	lsls	r3, r3, #1
 8005fcc:	2203      	movs	r2, #3
 8005fce:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd2:	43db      	mvns	r3, r3
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	689a      	ldr	r2, [r3, #8]
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	005b      	lsls	r3, r3, #1
 8005fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	69ba      	ldr	r2, [r7, #24]
 8005ff0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f003 0303 	and.w	r3, r3, #3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d123      	bne.n	8006046 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	08da      	lsrs	r2, r3, #3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	3208      	adds	r2, #8
 8006006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800600a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	f003 0307 	and.w	r3, r3, #7
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	220f      	movs	r2, #15
 8006016:	fa02 f303 	lsl.w	r3, r2, r3
 800601a:	43db      	mvns	r3, r3
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	4013      	ands	r3, r2
 8006020:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	691a      	ldr	r2, [r3, #16]
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	f003 0307 	and.w	r3, r3, #7
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	fa02 f303 	lsl.w	r3, r2, r3
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	4313      	orrs	r3, r2
 8006036:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	08da      	lsrs	r2, r3, #3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	3208      	adds	r2, #8
 8006040:	69b9      	ldr	r1, [r7, #24]
 8006042:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	005b      	lsls	r3, r3, #1
 8006050:	2203      	movs	r2, #3
 8006052:	fa02 f303 	lsl.w	r3, r2, r3
 8006056:	43db      	mvns	r3, r3
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	4013      	ands	r3, r2
 800605c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f003 0203 	and.w	r2, r3, #3
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	005b      	lsls	r3, r3, #1
 800606a:	fa02 f303 	lsl.w	r3, r2, r3
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	4313      	orrs	r3, r2
 8006072:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 80d8 	beq.w	8006238 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006088:	4b2c      	ldr	r3, [pc, #176]	@ (800613c <HAL_GPIO_Init+0x22c>)
 800608a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800608e:	4a2b      	ldr	r2, [pc, #172]	@ (800613c <HAL_GPIO_Init+0x22c>)
 8006090:	f043 0302 	orr.w	r3, r3, #2
 8006094:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006098:	4b28      	ldr	r3, [pc, #160]	@ (800613c <HAL_GPIO_Init+0x22c>)
 800609a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80060a6:	4a26      	ldr	r2, [pc, #152]	@ (8006140 <HAL_GPIO_Init+0x230>)
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	089b      	lsrs	r3, r3, #2
 80060ac:	3302      	adds	r3, #2
 80060ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	f003 0303 	and.w	r3, r3, #3
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	220f      	movs	r2, #15
 80060be:	fa02 f303 	lsl.w	r3, r2, r3
 80060c2:	43db      	mvns	r3, r3
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	4013      	ands	r3, r2
 80060c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006144 <HAL_GPIO_Init+0x234>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d04a      	beq.n	8006168 <HAL_GPIO_Init+0x258>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a1c      	ldr	r2, [pc, #112]	@ (8006148 <HAL_GPIO_Init+0x238>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d02b      	beq.n	8006132 <HAL_GPIO_Init+0x222>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a1b      	ldr	r2, [pc, #108]	@ (800614c <HAL_GPIO_Init+0x23c>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d025      	beq.n	800612e <HAL_GPIO_Init+0x21e>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a1a      	ldr	r2, [pc, #104]	@ (8006150 <HAL_GPIO_Init+0x240>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d01f      	beq.n	800612a <HAL_GPIO_Init+0x21a>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a19      	ldr	r2, [pc, #100]	@ (8006154 <HAL_GPIO_Init+0x244>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d019      	beq.n	8006126 <HAL_GPIO_Init+0x216>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a18      	ldr	r2, [pc, #96]	@ (8006158 <HAL_GPIO_Init+0x248>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d013      	beq.n	8006122 <HAL_GPIO_Init+0x212>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a17      	ldr	r2, [pc, #92]	@ (800615c <HAL_GPIO_Init+0x24c>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d00d      	beq.n	800611e <HAL_GPIO_Init+0x20e>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a16      	ldr	r2, [pc, #88]	@ (8006160 <HAL_GPIO_Init+0x250>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d007      	beq.n	800611a <HAL_GPIO_Init+0x20a>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a15      	ldr	r2, [pc, #84]	@ (8006164 <HAL_GPIO_Init+0x254>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d101      	bne.n	8006116 <HAL_GPIO_Init+0x206>
 8006112:	2309      	movs	r3, #9
 8006114:	e029      	b.n	800616a <HAL_GPIO_Init+0x25a>
 8006116:	230a      	movs	r3, #10
 8006118:	e027      	b.n	800616a <HAL_GPIO_Init+0x25a>
 800611a:	2307      	movs	r3, #7
 800611c:	e025      	b.n	800616a <HAL_GPIO_Init+0x25a>
 800611e:	2306      	movs	r3, #6
 8006120:	e023      	b.n	800616a <HAL_GPIO_Init+0x25a>
 8006122:	2305      	movs	r3, #5
 8006124:	e021      	b.n	800616a <HAL_GPIO_Init+0x25a>
 8006126:	2304      	movs	r3, #4
 8006128:	e01f      	b.n	800616a <HAL_GPIO_Init+0x25a>
 800612a:	2303      	movs	r3, #3
 800612c:	e01d      	b.n	800616a <HAL_GPIO_Init+0x25a>
 800612e:	2302      	movs	r3, #2
 8006130:	e01b      	b.n	800616a <HAL_GPIO_Init+0x25a>
 8006132:	2301      	movs	r3, #1
 8006134:	e019      	b.n	800616a <HAL_GPIO_Init+0x25a>
 8006136:	bf00      	nop
 8006138:	58000080 	.word	0x58000080
 800613c:	58024400 	.word	0x58024400
 8006140:	58000400 	.word	0x58000400
 8006144:	58020000 	.word	0x58020000
 8006148:	58020400 	.word	0x58020400
 800614c:	58020800 	.word	0x58020800
 8006150:	58020c00 	.word	0x58020c00
 8006154:	58021000 	.word	0x58021000
 8006158:	58021400 	.word	0x58021400
 800615c:	58021800 	.word	0x58021800
 8006160:	58021c00 	.word	0x58021c00
 8006164:	58022400 	.word	0x58022400
 8006168:	2300      	movs	r3, #0
 800616a:	69fa      	ldr	r2, [r7, #28]
 800616c:	f002 0203 	and.w	r2, r2, #3
 8006170:	0092      	lsls	r2, r2, #2
 8006172:	4093      	lsls	r3, r2
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	4313      	orrs	r3, r2
 8006178:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800617a:	4938      	ldr	r1, [pc, #224]	@ (800625c <HAL_GPIO_Init+0x34c>)
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	089b      	lsrs	r3, r3, #2
 8006180:	3302      	adds	r3, #2
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006188:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	43db      	mvns	r3, r3
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	4013      	ands	r3, r2
 8006198:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d003      	beq.n	80061ae <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80061ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80061b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	43db      	mvns	r3, r3
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	4013      	ands	r3, r2
 80061c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d003      	beq.n	80061dc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80061d4:	69ba      	ldr	r2, [r7, #24]
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	4313      	orrs	r3, r2
 80061da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80061dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	43db      	mvns	r3, r3
 80061ee:	69ba      	ldr	r2, [r7, #24]
 80061f0:	4013      	ands	r3, r2
 80061f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d003      	beq.n	8006208 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	4313      	orrs	r3, r2
 8006206:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	43db      	mvns	r3, r3
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	4013      	ands	r3, r2
 800621c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	4313      	orrs	r3, r2
 8006230:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	3301      	adds	r3, #1
 800623c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	fa22 f303 	lsr.w	r3, r2, r3
 8006248:	2b00      	cmp	r3, #0
 800624a:	f47f ae6b 	bne.w	8005f24 <HAL_GPIO_Init+0x14>
  }
}
 800624e:	bf00      	nop
 8006250:	bf00      	nop
 8006252:	3724      	adds	r7, #36	@ 0x24
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	58000400 	.word	0x58000400

08006260 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	691a      	ldr	r2, [r3, #16]
 8006270:	887b      	ldrh	r3, [r7, #2]
 8006272:	4013      	ands	r3, r2
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006278:	2301      	movs	r3, #1
 800627a:	73fb      	strb	r3, [r7, #15]
 800627c:	e001      	b.n	8006282 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800627e:	2300      	movs	r3, #0
 8006280:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006282:	7bfb      	ldrb	r3, [r7, #15]
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	460b      	mov	r3, r1
 800629a:	807b      	strh	r3, [r7, #2]
 800629c:	4613      	mov	r3, r2
 800629e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80062a0:	787b      	ldrb	r3, [r7, #1]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062a6:	887a      	ldrh	r2, [r7, #2]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80062ac:	e003      	b.n	80062b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80062ae:	887b      	ldrh	r3, [r7, #2]
 80062b0:	041a      	lsls	r2, r3, #16
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	619a      	str	r2, [r3, #24]
}
 80062b6:	bf00      	nop
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
	...

080062c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80062cc:	4b19      	ldr	r3, [pc, #100]	@ (8006334 <HAL_PWREx_ConfigSupply+0x70>)
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b04      	cmp	r3, #4
 80062d6:	d00a      	beq.n	80062ee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80062d8:	4b16      	ldr	r3, [pc, #88]	@ (8006334 <HAL_PWREx_ConfigSupply+0x70>)
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	f003 0307 	and.w	r3, r3, #7
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d001      	beq.n	80062ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e01f      	b.n	800632a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80062ea:	2300      	movs	r3, #0
 80062ec:	e01d      	b.n	800632a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80062ee:	4b11      	ldr	r3, [pc, #68]	@ (8006334 <HAL_PWREx_ConfigSupply+0x70>)
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	f023 0207 	bic.w	r2, r3, #7
 80062f6:	490f      	ldr	r1, [pc, #60]	@ (8006334 <HAL_PWREx_ConfigSupply+0x70>)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80062fe:	f7fc fb5d 	bl	80029bc <HAL_GetTick>
 8006302:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006304:	e009      	b.n	800631a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006306:	f7fc fb59 	bl	80029bc <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006314:	d901      	bls.n	800631a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e007      	b.n	800632a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800631a:	4b06      	ldr	r3, [pc, #24]	@ (8006334 <HAL_PWREx_ConfigSupply+0x70>)
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006322:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006326:	d1ee      	bne.n	8006306 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	58024800 	.word	0x58024800

08006338 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08c      	sub	sp, #48	@ 0x30
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d101      	bne.n	800634a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e3c8      	b.n	8006adc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 8087 	beq.w	8006466 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006358:	4b88      	ldr	r3, [pc, #544]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006360:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006362:	4b86      	ldr	r3, [pc, #536]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 8006364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006366:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800636a:	2b10      	cmp	r3, #16
 800636c:	d007      	beq.n	800637e <HAL_RCC_OscConfig+0x46>
 800636e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006370:	2b18      	cmp	r3, #24
 8006372:	d110      	bne.n	8006396 <HAL_RCC_OscConfig+0x5e>
 8006374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006376:	f003 0303 	and.w	r3, r3, #3
 800637a:	2b02      	cmp	r3, #2
 800637c:	d10b      	bne.n	8006396 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800637e:	4b7f      	ldr	r3, [pc, #508]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d06c      	beq.n	8006464 <HAL_RCC_OscConfig+0x12c>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d168      	bne.n	8006464 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e3a2      	b.n	8006adc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800639e:	d106      	bne.n	80063ae <HAL_RCC_OscConfig+0x76>
 80063a0:	4b76      	ldr	r3, [pc, #472]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a75      	ldr	r2, [pc, #468]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 80063a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063aa:	6013      	str	r3, [r2, #0]
 80063ac:	e02e      	b.n	800640c <HAL_RCC_OscConfig+0xd4>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10c      	bne.n	80063d0 <HAL_RCC_OscConfig+0x98>
 80063b6:	4b71      	ldr	r3, [pc, #452]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a70      	ldr	r2, [pc, #448]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 80063bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063c0:	6013      	str	r3, [r2, #0]
 80063c2:	4b6e      	ldr	r3, [pc, #440]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a6d      	ldr	r2, [pc, #436]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 80063c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063cc:	6013      	str	r3, [r2, #0]
 80063ce:	e01d      	b.n	800640c <HAL_RCC_OscConfig+0xd4>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063d8:	d10c      	bne.n	80063f4 <HAL_RCC_OscConfig+0xbc>
 80063da:	4b68      	ldr	r3, [pc, #416]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a67      	ldr	r2, [pc, #412]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 80063e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	4b65      	ldr	r3, [pc, #404]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a64      	ldr	r2, [pc, #400]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 80063ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063f0:	6013      	str	r3, [r2, #0]
 80063f2:	e00b      	b.n	800640c <HAL_RCC_OscConfig+0xd4>
 80063f4:	4b61      	ldr	r3, [pc, #388]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a60      	ldr	r2, [pc, #384]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 80063fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	4b5e      	ldr	r3, [pc, #376]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a5d      	ldr	r2, [pc, #372]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 8006406:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800640a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d013      	beq.n	800643c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006414:	f7fc fad2 	bl	80029bc <HAL_GetTick>
 8006418:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800641a:	e008      	b.n	800642e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800641c:	f7fc face 	bl	80029bc <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b64      	cmp	r3, #100	@ 0x64
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e356      	b.n	8006adc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800642e:	4b53      	ldr	r3, [pc, #332]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0f0      	beq.n	800641c <HAL_RCC_OscConfig+0xe4>
 800643a:	e014      	b.n	8006466 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800643c:	f7fc fabe 	bl	80029bc <HAL_GetTick>
 8006440:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006442:	e008      	b.n	8006456 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006444:	f7fc faba 	bl	80029bc <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	2b64      	cmp	r3, #100	@ 0x64
 8006450:	d901      	bls.n	8006456 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e342      	b.n	8006adc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006456:	4b49      	ldr	r3, [pc, #292]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1f0      	bne.n	8006444 <HAL_RCC_OscConfig+0x10c>
 8006462:	e000      	b.n	8006466 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 808c 	beq.w	800658c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006474:	4b41      	ldr	r3, [pc, #260]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800647c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800647e:	4b3f      	ldr	r3, [pc, #252]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 8006480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006482:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d007      	beq.n	800649a <HAL_RCC_OscConfig+0x162>
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	2b18      	cmp	r3, #24
 800648e:	d137      	bne.n	8006500 <HAL_RCC_OscConfig+0x1c8>
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	f003 0303 	and.w	r3, r3, #3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d132      	bne.n	8006500 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800649a:	4b38      	ldr	r3, [pc, #224]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0304 	and.w	r3, r3, #4
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d005      	beq.n	80064b2 <HAL_RCC_OscConfig+0x17a>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d101      	bne.n	80064b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e314      	b.n	8006adc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80064b2:	4b32      	ldr	r3, [pc, #200]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f023 0219 	bic.w	r2, r3, #25
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	492f      	ldr	r1, [pc, #188]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c4:	f7fc fa7a 	bl	80029bc <HAL_GetTick>
 80064c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064ca:	e008      	b.n	80064de <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064cc:	f7fc fa76 	bl	80029bc <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d901      	bls.n	80064de <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e2fe      	b.n	8006adc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064de:	4b27      	ldr	r3, [pc, #156]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0304 	and.w	r3, r3, #4
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d0f0      	beq.n	80064cc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ea:	4b24      	ldr	r3, [pc, #144]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	061b      	lsls	r3, r3, #24
 80064f8:	4920      	ldr	r1, [pc, #128]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064fe:	e045      	b.n	800658c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d026      	beq.n	8006556 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006508:	4b1c      	ldr	r3, [pc, #112]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f023 0219 	bic.w	r2, r3, #25
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	4919      	ldr	r1, [pc, #100]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 8006516:	4313      	orrs	r3, r2
 8006518:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800651a:	f7fc fa4f 	bl	80029bc <HAL_GetTick>
 800651e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006520:	e008      	b.n	8006534 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006522:	f7fc fa4b 	bl	80029bc <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	2b02      	cmp	r3, #2
 800652e:	d901      	bls.n	8006534 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e2d3      	b.n	8006adc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006534:	4b11      	ldr	r3, [pc, #68]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0304 	and.w	r3, r3, #4
 800653c:	2b00      	cmp	r3, #0
 800653e:	d0f0      	beq.n	8006522 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006540:	4b0e      	ldr	r3, [pc, #56]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	061b      	lsls	r3, r3, #24
 800654e:	490b      	ldr	r1, [pc, #44]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 8006550:	4313      	orrs	r3, r2
 8006552:	604b      	str	r3, [r1, #4]
 8006554:	e01a      	b.n	800658c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006556:	4b09      	ldr	r3, [pc, #36]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a08      	ldr	r2, [pc, #32]	@ (800657c <HAL_RCC_OscConfig+0x244>)
 800655c:	f023 0301 	bic.w	r3, r3, #1
 8006560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006562:	f7fc fa2b 	bl	80029bc <HAL_GetTick>
 8006566:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006568:	e00a      	b.n	8006580 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800656a:	f7fc fa27 	bl	80029bc <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	2b02      	cmp	r3, #2
 8006576:	d903      	bls.n	8006580 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e2af      	b.n	8006adc <HAL_RCC_OscConfig+0x7a4>
 800657c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006580:	4b96      	ldr	r3, [pc, #600]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0304 	and.w	r3, r3, #4
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1ee      	bne.n	800656a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0310 	and.w	r3, r3, #16
 8006594:	2b00      	cmp	r3, #0
 8006596:	d06a      	beq.n	800666e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006598:	4b90      	ldr	r3, [pc, #576]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065a0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80065a2:	4b8e      	ldr	r3, [pc, #568]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 80065a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	2b08      	cmp	r3, #8
 80065ac:	d007      	beq.n	80065be <HAL_RCC_OscConfig+0x286>
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	2b18      	cmp	r3, #24
 80065b2:	d11b      	bne.n	80065ec <HAL_RCC_OscConfig+0x2b4>
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f003 0303 	and.w	r3, r3, #3
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d116      	bne.n	80065ec <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065be:	4b87      	ldr	r3, [pc, #540]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d005      	beq.n	80065d6 <HAL_RCC_OscConfig+0x29e>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	2b80      	cmp	r3, #128	@ 0x80
 80065d0:	d001      	beq.n	80065d6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e282      	b.n	8006adc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065d6:	4b81      	ldr	r3, [pc, #516]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	061b      	lsls	r3, r3, #24
 80065e4:	497d      	ldr	r1, [pc, #500]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065ea:	e040      	b.n	800666e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	69db      	ldr	r3, [r3, #28]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d023      	beq.n	800663c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80065f4:	4b79      	ldr	r3, [pc, #484]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a78      	ldr	r2, [pc, #480]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 80065fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006600:	f7fc f9dc 	bl	80029bc <HAL_GetTick>
 8006604:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006606:	e008      	b.n	800661a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006608:	f7fc f9d8 	bl	80029bc <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	2b02      	cmp	r3, #2
 8006614:	d901      	bls.n	800661a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e260      	b.n	8006adc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800661a:	4b70      	ldr	r3, [pc, #448]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006622:	2b00      	cmp	r3, #0
 8006624:	d0f0      	beq.n	8006608 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006626:	4b6d      	ldr	r3, [pc, #436]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	061b      	lsls	r3, r3, #24
 8006634:	4969      	ldr	r1, [pc, #420]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 8006636:	4313      	orrs	r3, r2
 8006638:	60cb      	str	r3, [r1, #12]
 800663a:	e018      	b.n	800666e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800663c:	4b67      	ldr	r3, [pc, #412]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a66      	ldr	r2, [pc, #408]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 8006642:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006648:	f7fc f9b8 	bl	80029bc <HAL_GetTick>
 800664c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800664e:	e008      	b.n	8006662 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006650:	f7fc f9b4 	bl	80029bc <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	2b02      	cmp	r3, #2
 800665c:	d901      	bls.n	8006662 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e23c      	b.n	8006adc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006662:	4b5e      	ldr	r3, [pc, #376]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1f0      	bne.n	8006650 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0308 	and.w	r3, r3, #8
 8006676:	2b00      	cmp	r3, #0
 8006678:	d036      	beq.n	80066e8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d019      	beq.n	80066b6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006682:	4b56      	ldr	r3, [pc, #344]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 8006684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006686:	4a55      	ldr	r2, [pc, #340]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 8006688:	f043 0301 	orr.w	r3, r3, #1
 800668c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800668e:	f7fc f995 	bl	80029bc <HAL_GetTick>
 8006692:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006694:	e008      	b.n	80066a8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006696:	f7fc f991 	bl	80029bc <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d901      	bls.n	80066a8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e219      	b.n	8006adc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80066a8:	4b4c      	ldr	r3, [pc, #304]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 80066aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d0f0      	beq.n	8006696 <HAL_RCC_OscConfig+0x35e>
 80066b4:	e018      	b.n	80066e8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066b6:	4b49      	ldr	r3, [pc, #292]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 80066b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066ba:	4a48      	ldr	r2, [pc, #288]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 80066bc:	f023 0301 	bic.w	r3, r3, #1
 80066c0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066c2:	f7fc f97b 	bl	80029bc <HAL_GetTick>
 80066c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80066c8:	e008      	b.n	80066dc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066ca:	f7fc f977 	bl	80029bc <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d901      	bls.n	80066dc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e1ff      	b.n	8006adc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80066dc:	4b3f      	ldr	r3, [pc, #252]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 80066de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066e0:	f003 0302 	and.w	r3, r3, #2
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1f0      	bne.n	80066ca <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0320 	and.w	r3, r3, #32
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d036      	beq.n	8006762 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d019      	beq.n	8006730 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80066fc:	4b37      	ldr	r3, [pc, #220]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a36      	ldr	r2, [pc, #216]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 8006702:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006706:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006708:	f7fc f958 	bl	80029bc <HAL_GetTick>
 800670c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800670e:	e008      	b.n	8006722 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006710:	f7fc f954 	bl	80029bc <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b02      	cmp	r3, #2
 800671c:	d901      	bls.n	8006722 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e1dc      	b.n	8006adc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006722:	4b2e      	ldr	r3, [pc, #184]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0f0      	beq.n	8006710 <HAL_RCC_OscConfig+0x3d8>
 800672e:	e018      	b.n	8006762 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006730:	4b2a      	ldr	r3, [pc, #168]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a29      	ldr	r2, [pc, #164]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 8006736:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800673a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800673c:	f7fc f93e 	bl	80029bc <HAL_GetTick>
 8006740:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006742:	e008      	b.n	8006756 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006744:	f7fc f93a 	bl	80029bc <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	2b02      	cmp	r3, #2
 8006750:	d901      	bls.n	8006756 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e1c2      	b.n	8006adc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006756:	4b21      	ldr	r3, [pc, #132]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1f0      	bne.n	8006744 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0304 	and.w	r3, r3, #4
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 8086 	beq.w	800687c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006770:	4b1b      	ldr	r3, [pc, #108]	@ (80067e0 <HAL_RCC_OscConfig+0x4a8>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a1a      	ldr	r2, [pc, #104]	@ (80067e0 <HAL_RCC_OscConfig+0x4a8>)
 8006776:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800677a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800677c:	f7fc f91e 	bl	80029bc <HAL_GetTick>
 8006780:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006782:	e008      	b.n	8006796 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006784:	f7fc f91a 	bl	80029bc <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	2b64      	cmp	r3, #100	@ 0x64
 8006790:	d901      	bls.n	8006796 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e1a2      	b.n	8006adc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006796:	4b12      	ldr	r3, [pc, #72]	@ (80067e0 <HAL_RCC_OscConfig+0x4a8>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d0f0      	beq.n	8006784 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d106      	bne.n	80067b8 <HAL_RCC_OscConfig+0x480>
 80067aa:	4b0c      	ldr	r3, [pc, #48]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 80067ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ae:	4a0b      	ldr	r2, [pc, #44]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 80067b0:	f043 0301 	orr.w	r3, r3, #1
 80067b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80067b6:	e032      	b.n	800681e <HAL_RCC_OscConfig+0x4e6>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d111      	bne.n	80067e4 <HAL_RCC_OscConfig+0x4ac>
 80067c0:	4b06      	ldr	r3, [pc, #24]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 80067c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067c4:	4a05      	ldr	r2, [pc, #20]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 80067c6:	f023 0301 	bic.w	r3, r3, #1
 80067ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80067cc:	4b03      	ldr	r3, [pc, #12]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 80067ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067d0:	4a02      	ldr	r2, [pc, #8]	@ (80067dc <HAL_RCC_OscConfig+0x4a4>)
 80067d2:	f023 0304 	bic.w	r3, r3, #4
 80067d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80067d8:	e021      	b.n	800681e <HAL_RCC_OscConfig+0x4e6>
 80067da:	bf00      	nop
 80067dc:	58024400 	.word	0x58024400
 80067e0:	58024800 	.word	0x58024800
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	2b05      	cmp	r3, #5
 80067ea:	d10c      	bne.n	8006806 <HAL_RCC_OscConfig+0x4ce>
 80067ec:	4b83      	ldr	r3, [pc, #524]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 80067ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067f0:	4a82      	ldr	r2, [pc, #520]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 80067f2:	f043 0304 	orr.w	r3, r3, #4
 80067f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80067f8:	4b80      	ldr	r3, [pc, #512]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 80067fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067fc:	4a7f      	ldr	r2, [pc, #508]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 80067fe:	f043 0301 	orr.w	r3, r3, #1
 8006802:	6713      	str	r3, [r2, #112]	@ 0x70
 8006804:	e00b      	b.n	800681e <HAL_RCC_OscConfig+0x4e6>
 8006806:	4b7d      	ldr	r3, [pc, #500]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 8006808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800680a:	4a7c      	ldr	r2, [pc, #496]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 800680c:	f023 0301 	bic.w	r3, r3, #1
 8006810:	6713      	str	r3, [r2, #112]	@ 0x70
 8006812:	4b7a      	ldr	r3, [pc, #488]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 8006814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006816:	4a79      	ldr	r2, [pc, #484]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 8006818:	f023 0304 	bic.w	r3, r3, #4
 800681c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d015      	beq.n	8006852 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006826:	f7fc f8c9 	bl	80029bc <HAL_GetTick>
 800682a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800682c:	e00a      	b.n	8006844 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800682e:	f7fc f8c5 	bl	80029bc <HAL_GetTick>
 8006832:	4602      	mov	r2, r0
 8006834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	f241 3288 	movw	r2, #5000	@ 0x1388
 800683c:	4293      	cmp	r3, r2
 800683e:	d901      	bls.n	8006844 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e14b      	b.n	8006adc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006844:	4b6d      	ldr	r3, [pc, #436]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 8006846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006848:	f003 0302 	and.w	r3, r3, #2
 800684c:	2b00      	cmp	r3, #0
 800684e:	d0ee      	beq.n	800682e <HAL_RCC_OscConfig+0x4f6>
 8006850:	e014      	b.n	800687c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006852:	f7fc f8b3 	bl	80029bc <HAL_GetTick>
 8006856:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006858:	e00a      	b.n	8006870 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800685a:	f7fc f8af 	bl	80029bc <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006868:	4293      	cmp	r3, r2
 800686a:	d901      	bls.n	8006870 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e135      	b.n	8006adc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006870:	4b62      	ldr	r3, [pc, #392]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 8006872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006874:	f003 0302 	and.w	r3, r3, #2
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1ee      	bne.n	800685a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006880:	2b00      	cmp	r3, #0
 8006882:	f000 812a 	beq.w	8006ada <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006886:	4b5d      	ldr	r3, [pc, #372]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800688e:	2b18      	cmp	r3, #24
 8006890:	f000 80ba 	beq.w	8006a08 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006898:	2b02      	cmp	r3, #2
 800689a:	f040 8095 	bne.w	80069c8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800689e:	4b57      	ldr	r3, [pc, #348]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a56      	ldr	r2, [pc, #344]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 80068a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068aa:	f7fc f887 	bl	80029bc <HAL_GetTick>
 80068ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80068b0:	e008      	b.n	80068c4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068b2:	f7fc f883 	bl	80029bc <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d901      	bls.n	80068c4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e10b      	b.n	8006adc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80068c4:	4b4d      	ldr	r3, [pc, #308]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1f0      	bne.n	80068b2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068d0:	4b4a      	ldr	r3, [pc, #296]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 80068d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068d4:	4b4a      	ldr	r3, [pc, #296]	@ (8006a00 <HAL_RCC_OscConfig+0x6c8>)
 80068d6:	4013      	ands	r3, r2
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80068e0:	0112      	lsls	r2, r2, #4
 80068e2:	430a      	orrs	r2, r1
 80068e4:	4945      	ldr	r1, [pc, #276]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 80068e6:	4313      	orrs	r3, r2
 80068e8:	628b      	str	r3, [r1, #40]	@ 0x28
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ee:	3b01      	subs	r3, #1
 80068f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068f8:	3b01      	subs	r3, #1
 80068fa:	025b      	lsls	r3, r3, #9
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	431a      	orrs	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006904:	3b01      	subs	r3, #1
 8006906:	041b      	lsls	r3, r3, #16
 8006908:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800690c:	431a      	orrs	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006912:	3b01      	subs	r3, #1
 8006914:	061b      	lsls	r3, r3, #24
 8006916:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800691a:	4938      	ldr	r1, [pc, #224]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 800691c:	4313      	orrs	r3, r2
 800691e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006920:	4b36      	ldr	r3, [pc, #216]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 8006922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006924:	4a35      	ldr	r2, [pc, #212]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 8006926:	f023 0301 	bic.w	r3, r3, #1
 800692a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800692c:	4b33      	ldr	r3, [pc, #204]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 800692e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006930:	4b34      	ldr	r3, [pc, #208]	@ (8006a04 <HAL_RCC_OscConfig+0x6cc>)
 8006932:	4013      	ands	r3, r2
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006938:	00d2      	lsls	r2, r2, #3
 800693a:	4930      	ldr	r1, [pc, #192]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 800693c:	4313      	orrs	r3, r2
 800693e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006940:	4b2e      	ldr	r3, [pc, #184]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 8006942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006944:	f023 020c 	bic.w	r2, r3, #12
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800694c:	492b      	ldr	r1, [pc, #172]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 800694e:	4313      	orrs	r3, r2
 8006950:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006952:	4b2a      	ldr	r3, [pc, #168]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 8006954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006956:	f023 0202 	bic.w	r2, r3, #2
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800695e:	4927      	ldr	r1, [pc, #156]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 8006960:	4313      	orrs	r3, r2
 8006962:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006964:	4b25      	ldr	r3, [pc, #148]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 8006966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006968:	4a24      	ldr	r2, [pc, #144]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 800696a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800696e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006970:	4b22      	ldr	r3, [pc, #136]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 8006972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006974:	4a21      	ldr	r2, [pc, #132]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 8006976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800697a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800697c:	4b1f      	ldr	r3, [pc, #124]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 800697e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006980:	4a1e      	ldr	r2, [pc, #120]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 8006982:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006986:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006988:	4b1c      	ldr	r3, [pc, #112]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 800698a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800698c:	4a1b      	ldr	r2, [pc, #108]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 800698e:	f043 0301 	orr.w	r3, r3, #1
 8006992:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006994:	4b19      	ldr	r3, [pc, #100]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a18      	ldr	r2, [pc, #96]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 800699a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800699e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a0:	f7fc f80c 	bl	80029bc <HAL_GetTick>
 80069a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80069a6:	e008      	b.n	80069ba <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069a8:	f7fc f808 	bl	80029bc <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d901      	bls.n	80069ba <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e090      	b.n	8006adc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80069ba:	4b10      	ldr	r3, [pc, #64]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d0f0      	beq.n	80069a8 <HAL_RCC_OscConfig+0x670>
 80069c6:	e088      	b.n	8006ada <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069c8:	4b0c      	ldr	r3, [pc, #48]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a0b      	ldr	r2, [pc, #44]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 80069ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d4:	f7fb fff2 	bl	80029bc <HAL_GetTick>
 80069d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069da:	e008      	b.n	80069ee <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069dc:	f7fb ffee 	bl	80029bc <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e076      	b.n	8006adc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069ee:	4b03      	ldr	r3, [pc, #12]	@ (80069fc <HAL_RCC_OscConfig+0x6c4>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1f0      	bne.n	80069dc <HAL_RCC_OscConfig+0x6a4>
 80069fa:	e06e      	b.n	8006ada <HAL_RCC_OscConfig+0x7a2>
 80069fc:	58024400 	.word	0x58024400
 8006a00:	fffffc0c 	.word	0xfffffc0c
 8006a04:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006a08:	4b36      	ldr	r3, [pc, #216]	@ (8006ae4 <HAL_RCC_OscConfig+0x7ac>)
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006a0e:	4b35      	ldr	r3, [pc, #212]	@ (8006ae4 <HAL_RCC_OscConfig+0x7ac>)
 8006a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a12:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d031      	beq.n	8006a80 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	f003 0203 	and.w	r2, r3, #3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d12a      	bne.n	8006a80 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	091b      	lsrs	r3, r3, #4
 8006a2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d122      	bne.n	8006a80 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a44:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d11a      	bne.n	8006a80 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	0a5b      	lsrs	r3, r3, #9
 8006a4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a56:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d111      	bne.n	8006a80 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	0c1b      	lsrs	r3, r3, #16
 8006a60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a68:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d108      	bne.n	8006a80 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	0e1b      	lsrs	r3, r3, #24
 8006a72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a7a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d001      	beq.n	8006a84 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e02b      	b.n	8006adc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006a84:	4b17      	ldr	r3, [pc, #92]	@ (8006ae4 <HAL_RCC_OscConfig+0x7ac>)
 8006a86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a88:	08db      	lsrs	r3, r3, #3
 8006a8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a8e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d01f      	beq.n	8006ada <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006a9a:	4b12      	ldr	r3, [pc, #72]	@ (8006ae4 <HAL_RCC_OscConfig+0x7ac>)
 8006a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a9e:	4a11      	ldr	r2, [pc, #68]	@ (8006ae4 <HAL_RCC_OscConfig+0x7ac>)
 8006aa0:	f023 0301 	bic.w	r3, r3, #1
 8006aa4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006aa6:	f7fb ff89 	bl	80029bc <HAL_GetTick>
 8006aaa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006aac:	bf00      	nop
 8006aae:	f7fb ff85 	bl	80029bc <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d0f9      	beq.n	8006aae <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006aba:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae4 <HAL_RCC_OscConfig+0x7ac>)
 8006abc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006abe:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae8 <HAL_RCC_OscConfig+0x7b0>)
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006ac6:	00d2      	lsls	r2, r2, #3
 8006ac8:	4906      	ldr	r1, [pc, #24]	@ (8006ae4 <HAL_RCC_OscConfig+0x7ac>)
 8006aca:	4313      	orrs	r3, r2
 8006acc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006ace:	4b05      	ldr	r3, [pc, #20]	@ (8006ae4 <HAL_RCC_OscConfig+0x7ac>)
 8006ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad2:	4a04      	ldr	r2, [pc, #16]	@ (8006ae4 <HAL_RCC_OscConfig+0x7ac>)
 8006ad4:	f043 0301 	orr.w	r3, r3, #1
 8006ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3730      	adds	r7, #48	@ 0x30
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	58024400 	.word	0x58024400
 8006ae8:	ffff0007 	.word	0xffff0007

08006aec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d101      	bne.n	8006b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e19c      	b.n	8006e3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b00:	4b8a      	ldr	r3, [pc, #552]	@ (8006d2c <HAL_RCC_ClockConfig+0x240>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 030f 	and.w	r3, r3, #15
 8006b08:	683a      	ldr	r2, [r7, #0]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d910      	bls.n	8006b30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b0e:	4b87      	ldr	r3, [pc, #540]	@ (8006d2c <HAL_RCC_ClockConfig+0x240>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f023 020f 	bic.w	r2, r3, #15
 8006b16:	4985      	ldr	r1, [pc, #532]	@ (8006d2c <HAL_RCC_ClockConfig+0x240>)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b1e:	4b83      	ldr	r3, [pc, #524]	@ (8006d2c <HAL_RCC_ClockConfig+0x240>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 030f 	and.w	r3, r3, #15
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d001      	beq.n	8006b30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e184      	b.n	8006e3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0304 	and.w	r3, r3, #4
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d010      	beq.n	8006b5e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	691a      	ldr	r2, [r3, #16]
 8006b40:	4b7b      	ldr	r3, [pc, #492]	@ (8006d30 <HAL_RCC_ClockConfig+0x244>)
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d908      	bls.n	8006b5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006b4c:	4b78      	ldr	r3, [pc, #480]	@ (8006d30 <HAL_RCC_ClockConfig+0x244>)
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	4975      	ldr	r1, [pc, #468]	@ (8006d30 <HAL_RCC_ClockConfig+0x244>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0308 	and.w	r3, r3, #8
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d010      	beq.n	8006b8c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	695a      	ldr	r2, [r3, #20]
 8006b6e:	4b70      	ldr	r3, [pc, #448]	@ (8006d30 <HAL_RCC_ClockConfig+0x244>)
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d908      	bls.n	8006b8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b7a:	4b6d      	ldr	r3, [pc, #436]	@ (8006d30 <HAL_RCC_ClockConfig+0x244>)
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	496a      	ldr	r1, [pc, #424]	@ (8006d30 <HAL_RCC_ClockConfig+0x244>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0310 	and.w	r3, r3, #16
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d010      	beq.n	8006bba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	699a      	ldr	r2, [r3, #24]
 8006b9c:	4b64      	ldr	r3, [pc, #400]	@ (8006d30 <HAL_RCC_ClockConfig+0x244>)
 8006b9e:	69db      	ldr	r3, [r3, #28]
 8006ba0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d908      	bls.n	8006bba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ba8:	4b61      	ldr	r3, [pc, #388]	@ (8006d30 <HAL_RCC_ClockConfig+0x244>)
 8006baa:	69db      	ldr	r3, [r3, #28]
 8006bac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	495e      	ldr	r1, [pc, #376]	@ (8006d30 <HAL_RCC_ClockConfig+0x244>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0320 	and.w	r3, r3, #32
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d010      	beq.n	8006be8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	69da      	ldr	r2, [r3, #28]
 8006bca:	4b59      	ldr	r3, [pc, #356]	@ (8006d30 <HAL_RCC_ClockConfig+0x244>)
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d908      	bls.n	8006be8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006bd6:	4b56      	ldr	r3, [pc, #344]	@ (8006d30 <HAL_RCC_ClockConfig+0x244>)
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	4953      	ldr	r1, [pc, #332]	@ (8006d30 <HAL_RCC_ClockConfig+0x244>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0302 	and.w	r3, r3, #2
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d010      	beq.n	8006c16 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	68da      	ldr	r2, [r3, #12]
 8006bf8:	4b4d      	ldr	r3, [pc, #308]	@ (8006d30 <HAL_RCC_ClockConfig+0x244>)
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	f003 030f 	and.w	r3, r3, #15
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d908      	bls.n	8006c16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c04:	4b4a      	ldr	r3, [pc, #296]	@ (8006d30 <HAL_RCC_ClockConfig+0x244>)
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	f023 020f 	bic.w	r2, r3, #15
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	4947      	ldr	r1, [pc, #284]	@ (8006d30 <HAL_RCC_ClockConfig+0x244>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d055      	beq.n	8006cce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006c22:	4b43      	ldr	r3, [pc, #268]	@ (8006d30 <HAL_RCC_ClockConfig+0x244>)
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	4940      	ldr	r1, [pc, #256]	@ (8006d30 <HAL_RCC_ClockConfig+0x244>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d107      	bne.n	8006c4c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c3c:	4b3c      	ldr	r3, [pc, #240]	@ (8006d30 <HAL_RCC_ClockConfig+0x244>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d121      	bne.n	8006c8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e0f6      	b.n	8006e3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	2b03      	cmp	r3, #3
 8006c52:	d107      	bne.n	8006c64 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c54:	4b36      	ldr	r3, [pc, #216]	@ (8006d30 <HAL_RCC_ClockConfig+0x244>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d115      	bne.n	8006c8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e0ea      	b.n	8006e3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d107      	bne.n	8006c7c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c6c:	4b30      	ldr	r3, [pc, #192]	@ (8006d30 <HAL_RCC_ClockConfig+0x244>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d109      	bne.n	8006c8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e0de      	b.n	8006e3a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c7c:	4b2c      	ldr	r3, [pc, #176]	@ (8006d30 <HAL_RCC_ClockConfig+0x244>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0304 	and.w	r3, r3, #4
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e0d6      	b.n	8006e3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c8c:	4b28      	ldr	r3, [pc, #160]	@ (8006d30 <HAL_RCC_ClockConfig+0x244>)
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	f023 0207 	bic.w	r2, r3, #7
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	4925      	ldr	r1, [pc, #148]	@ (8006d30 <HAL_RCC_ClockConfig+0x244>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c9e:	f7fb fe8d 	bl	80029bc <HAL_GetTick>
 8006ca2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ca4:	e00a      	b.n	8006cbc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ca6:	f7fb fe89 	bl	80029bc <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d901      	bls.n	8006cbc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e0be      	b.n	8006e3a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8006d30 <HAL_RCC_ClockConfig+0x244>)
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	00db      	lsls	r3, r3, #3
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d1eb      	bne.n	8006ca6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d010      	beq.n	8006cfc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68da      	ldr	r2, [r3, #12]
 8006cde:	4b14      	ldr	r3, [pc, #80]	@ (8006d30 <HAL_RCC_ClockConfig+0x244>)
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	f003 030f 	and.w	r3, r3, #15
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d208      	bcs.n	8006cfc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cea:	4b11      	ldr	r3, [pc, #68]	@ (8006d30 <HAL_RCC_ClockConfig+0x244>)
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	f023 020f 	bic.w	r2, r3, #15
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	490e      	ldr	r1, [pc, #56]	@ (8006d30 <HAL_RCC_ClockConfig+0x244>)
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8006d2c <HAL_RCC_ClockConfig+0x240>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 030f 	and.w	r3, r3, #15
 8006d04:	683a      	ldr	r2, [r7, #0]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d214      	bcs.n	8006d34 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d0a:	4b08      	ldr	r3, [pc, #32]	@ (8006d2c <HAL_RCC_ClockConfig+0x240>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f023 020f 	bic.w	r2, r3, #15
 8006d12:	4906      	ldr	r1, [pc, #24]	@ (8006d2c <HAL_RCC_ClockConfig+0x240>)
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d1a:	4b04      	ldr	r3, [pc, #16]	@ (8006d2c <HAL_RCC_ClockConfig+0x240>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 030f 	and.w	r3, r3, #15
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d005      	beq.n	8006d34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e086      	b.n	8006e3a <HAL_RCC_ClockConfig+0x34e>
 8006d2c:	52002000 	.word	0x52002000
 8006d30:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0304 	and.w	r3, r3, #4
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d010      	beq.n	8006d62 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	691a      	ldr	r2, [r3, #16]
 8006d44:	4b3f      	ldr	r3, [pc, #252]	@ (8006e44 <HAL_RCC_ClockConfig+0x358>)
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d208      	bcs.n	8006d62 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d50:	4b3c      	ldr	r3, [pc, #240]	@ (8006e44 <HAL_RCC_ClockConfig+0x358>)
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	4939      	ldr	r1, [pc, #228]	@ (8006e44 <HAL_RCC_ClockConfig+0x358>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0308 	and.w	r3, r3, #8
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d010      	beq.n	8006d90 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	695a      	ldr	r2, [r3, #20]
 8006d72:	4b34      	ldr	r3, [pc, #208]	@ (8006e44 <HAL_RCC_ClockConfig+0x358>)
 8006d74:	69db      	ldr	r3, [r3, #28]
 8006d76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d208      	bcs.n	8006d90 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d7e:	4b31      	ldr	r3, [pc, #196]	@ (8006e44 <HAL_RCC_ClockConfig+0x358>)
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	492e      	ldr	r1, [pc, #184]	@ (8006e44 <HAL_RCC_ClockConfig+0x358>)
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0310 	and.w	r3, r3, #16
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d010      	beq.n	8006dbe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	699a      	ldr	r2, [r3, #24]
 8006da0:	4b28      	ldr	r3, [pc, #160]	@ (8006e44 <HAL_RCC_ClockConfig+0x358>)
 8006da2:	69db      	ldr	r3, [r3, #28]
 8006da4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d208      	bcs.n	8006dbe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006dac:	4b25      	ldr	r3, [pc, #148]	@ (8006e44 <HAL_RCC_ClockConfig+0x358>)
 8006dae:	69db      	ldr	r3, [r3, #28]
 8006db0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	4922      	ldr	r1, [pc, #136]	@ (8006e44 <HAL_RCC_ClockConfig+0x358>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0320 	and.w	r3, r3, #32
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d010      	beq.n	8006dec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	69da      	ldr	r2, [r3, #28]
 8006dce:	4b1d      	ldr	r3, [pc, #116]	@ (8006e44 <HAL_RCC_ClockConfig+0x358>)
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d208      	bcs.n	8006dec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006dda:	4b1a      	ldr	r3, [pc, #104]	@ (8006e44 <HAL_RCC_ClockConfig+0x358>)
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	4917      	ldr	r1, [pc, #92]	@ (8006e44 <HAL_RCC_ClockConfig+0x358>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006dec:	f000 f834 	bl	8006e58 <HAL_RCC_GetSysClockFreq>
 8006df0:	4602      	mov	r2, r0
 8006df2:	4b14      	ldr	r3, [pc, #80]	@ (8006e44 <HAL_RCC_ClockConfig+0x358>)
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	0a1b      	lsrs	r3, r3, #8
 8006df8:	f003 030f 	and.w	r3, r3, #15
 8006dfc:	4912      	ldr	r1, [pc, #72]	@ (8006e48 <HAL_RCC_ClockConfig+0x35c>)
 8006dfe:	5ccb      	ldrb	r3, [r1, r3]
 8006e00:	f003 031f 	and.w	r3, r3, #31
 8006e04:	fa22 f303 	lsr.w	r3, r2, r3
 8006e08:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8006e44 <HAL_RCC_ClockConfig+0x358>)
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	f003 030f 	and.w	r3, r3, #15
 8006e12:	4a0d      	ldr	r2, [pc, #52]	@ (8006e48 <HAL_RCC_ClockConfig+0x35c>)
 8006e14:	5cd3      	ldrb	r3, [r2, r3]
 8006e16:	f003 031f 	and.w	r3, r3, #31
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e20:	4a0a      	ldr	r2, [pc, #40]	@ (8006e4c <HAL_RCC_ClockConfig+0x360>)
 8006e22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e24:	4a0a      	ldr	r2, [pc, #40]	@ (8006e50 <HAL_RCC_ClockConfig+0x364>)
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8006e54 <HAL_RCC_ClockConfig+0x368>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fb fd7a 	bl	8002928 <HAL_InitTick>
 8006e34:	4603      	mov	r3, r0
 8006e36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3718      	adds	r7, #24
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	58024400 	.word	0x58024400
 8006e48:	0800bb94 	.word	0x0800bb94
 8006e4c:	2400000c 	.word	0x2400000c
 8006e50:	24000008 	.word	0x24000008
 8006e54:	24000010 	.word	0x24000010

08006e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b089      	sub	sp, #36	@ 0x24
 8006e5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e5e:	4bb3      	ldr	r3, [pc, #716]	@ (800712c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e66:	2b18      	cmp	r3, #24
 8006e68:	f200 8155 	bhi.w	8007116 <HAL_RCC_GetSysClockFreq+0x2be>
 8006e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e74 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e72:	bf00      	nop
 8006e74:	08006ed9 	.word	0x08006ed9
 8006e78:	08007117 	.word	0x08007117
 8006e7c:	08007117 	.word	0x08007117
 8006e80:	08007117 	.word	0x08007117
 8006e84:	08007117 	.word	0x08007117
 8006e88:	08007117 	.word	0x08007117
 8006e8c:	08007117 	.word	0x08007117
 8006e90:	08007117 	.word	0x08007117
 8006e94:	08006eff 	.word	0x08006eff
 8006e98:	08007117 	.word	0x08007117
 8006e9c:	08007117 	.word	0x08007117
 8006ea0:	08007117 	.word	0x08007117
 8006ea4:	08007117 	.word	0x08007117
 8006ea8:	08007117 	.word	0x08007117
 8006eac:	08007117 	.word	0x08007117
 8006eb0:	08007117 	.word	0x08007117
 8006eb4:	08006f05 	.word	0x08006f05
 8006eb8:	08007117 	.word	0x08007117
 8006ebc:	08007117 	.word	0x08007117
 8006ec0:	08007117 	.word	0x08007117
 8006ec4:	08007117 	.word	0x08007117
 8006ec8:	08007117 	.word	0x08007117
 8006ecc:	08007117 	.word	0x08007117
 8006ed0:	08007117 	.word	0x08007117
 8006ed4:	08006f0b 	.word	0x08006f0b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ed8:	4b94      	ldr	r3, [pc, #592]	@ (800712c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0320 	and.w	r3, r3, #32
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d009      	beq.n	8006ef8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ee4:	4b91      	ldr	r3, [pc, #580]	@ (800712c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	08db      	lsrs	r3, r3, #3
 8006eea:	f003 0303 	and.w	r3, r3, #3
 8006eee:	4a90      	ldr	r2, [pc, #576]	@ (8007130 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006ef6:	e111      	b.n	800711c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006ef8:	4b8d      	ldr	r3, [pc, #564]	@ (8007130 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006efa:	61bb      	str	r3, [r7, #24]
      break;
 8006efc:	e10e      	b.n	800711c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006efe:	4b8d      	ldr	r3, [pc, #564]	@ (8007134 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f00:	61bb      	str	r3, [r7, #24]
      break;
 8006f02:	e10b      	b.n	800711c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006f04:	4b8c      	ldr	r3, [pc, #560]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006f06:	61bb      	str	r3, [r7, #24]
      break;
 8006f08:	e108      	b.n	800711c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f0a:	4b88      	ldr	r3, [pc, #544]	@ (800712c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f0e:	f003 0303 	and.w	r3, r3, #3
 8006f12:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006f14:	4b85      	ldr	r3, [pc, #532]	@ (800712c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f18:	091b      	lsrs	r3, r3, #4
 8006f1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f1e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006f20:	4b82      	ldr	r3, [pc, #520]	@ (800712c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006f2a:	4b80      	ldr	r3, [pc, #512]	@ (800712c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f2e:	08db      	lsrs	r3, r3, #3
 8006f30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	fb02 f303 	mul.w	r3, r2, r3
 8006f3a:	ee07 3a90 	vmov	s15, r3
 8006f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f42:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 80e1 	beq.w	8007110 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	f000 8083 	beq.w	800705c <HAL_RCC_GetSysClockFreq+0x204>
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	f200 80a1 	bhi.w	80070a0 <HAL_RCC_GetSysClockFreq+0x248>
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <HAL_RCC_GetSysClockFreq+0x114>
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d056      	beq.n	8007018 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006f6a:	e099      	b.n	80070a0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f6c:	4b6f      	ldr	r3, [pc, #444]	@ (800712c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 0320 	and.w	r3, r3, #32
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d02d      	beq.n	8006fd4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f78:	4b6c      	ldr	r3, [pc, #432]	@ (800712c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	08db      	lsrs	r3, r3, #3
 8006f7e:	f003 0303 	and.w	r3, r3, #3
 8006f82:	4a6b      	ldr	r2, [pc, #428]	@ (8007130 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f84:	fa22 f303 	lsr.w	r3, r2, r3
 8006f88:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	ee07 3a90 	vmov	s15, r3
 8006f90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	ee07 3a90 	vmov	s15, r3
 8006f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fa2:	4b62      	ldr	r3, [pc, #392]	@ (800712c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006faa:	ee07 3a90 	vmov	s15, r3
 8006fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fb6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800713c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006fd2:	e087      	b.n	80070e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	ee07 3a90 	vmov	s15, r3
 8006fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fde:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007140 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fe6:	4b51      	ldr	r3, [pc, #324]	@ (800712c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fee:	ee07 3a90 	vmov	s15, r3
 8006ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ff6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ffa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800713c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800700a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800700e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007012:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007016:	e065      	b.n	80070e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	ee07 3a90 	vmov	s15, r3
 800701e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007022:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007144 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800702a:	4b40      	ldr	r3, [pc, #256]	@ (800712c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800702c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800702e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800703a:	ed97 6a02 	vldr	s12, [r7, #8]
 800703e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800713c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800704a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800704e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007056:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800705a:	e043      	b.n	80070e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	ee07 3a90 	vmov	s15, r3
 8007062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007066:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007148 <HAL_RCC_GetSysClockFreq+0x2f0>
 800706a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800706e:	4b2f      	ldr	r3, [pc, #188]	@ (800712c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007076:	ee07 3a90 	vmov	s15, r3
 800707a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800707e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007082:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800713c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800708a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800708e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800709a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800709e:	e021      	b.n	80070e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	ee07 3a90 	vmov	s15, r3
 80070a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070aa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007144 <HAL_RCC_GetSysClockFreq+0x2ec>
 80070ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070b2:	4b1e      	ldr	r3, [pc, #120]	@ (800712c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ba:	ee07 3a90 	vmov	s15, r3
 80070be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80070c6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800713c <HAL_RCC_GetSysClockFreq+0x2e4>
 80070ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80070e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80070e4:	4b11      	ldr	r3, [pc, #68]	@ (800712c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070e8:	0a5b      	lsrs	r3, r3, #9
 80070ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070ee:	3301      	adds	r3, #1
 80070f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	ee07 3a90 	vmov	s15, r3
 80070f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80070fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007108:	ee17 3a90 	vmov	r3, s15
 800710c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800710e:	e005      	b.n	800711c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007110:	2300      	movs	r3, #0
 8007112:	61bb      	str	r3, [r7, #24]
      break;
 8007114:	e002      	b.n	800711c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007116:	4b07      	ldr	r3, [pc, #28]	@ (8007134 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007118:	61bb      	str	r3, [r7, #24]
      break;
 800711a:	bf00      	nop
  }

  return sysclockfreq;
 800711c:	69bb      	ldr	r3, [r7, #24]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3724      	adds	r7, #36	@ 0x24
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	58024400 	.word	0x58024400
 8007130:	03d09000 	.word	0x03d09000
 8007134:	003d0900 	.word	0x003d0900
 8007138:	016e3600 	.word	0x016e3600
 800713c:	46000000 	.word	0x46000000
 8007140:	4c742400 	.word	0x4c742400
 8007144:	4a742400 	.word	0x4a742400
 8007148:	4bb71b00 	.word	0x4bb71b00

0800714c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007152:	f7ff fe81 	bl	8006e58 <HAL_RCC_GetSysClockFreq>
 8007156:	4602      	mov	r2, r0
 8007158:	4b10      	ldr	r3, [pc, #64]	@ (800719c <HAL_RCC_GetHCLKFreq+0x50>)
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	0a1b      	lsrs	r3, r3, #8
 800715e:	f003 030f 	and.w	r3, r3, #15
 8007162:	490f      	ldr	r1, [pc, #60]	@ (80071a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007164:	5ccb      	ldrb	r3, [r1, r3]
 8007166:	f003 031f 	and.w	r3, r3, #31
 800716a:	fa22 f303 	lsr.w	r3, r2, r3
 800716e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007170:	4b0a      	ldr	r3, [pc, #40]	@ (800719c <HAL_RCC_GetHCLKFreq+0x50>)
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	f003 030f 	and.w	r3, r3, #15
 8007178:	4a09      	ldr	r2, [pc, #36]	@ (80071a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800717a:	5cd3      	ldrb	r3, [r2, r3]
 800717c:	f003 031f 	and.w	r3, r3, #31
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	fa22 f303 	lsr.w	r3, r2, r3
 8007186:	4a07      	ldr	r2, [pc, #28]	@ (80071a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007188:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800718a:	4a07      	ldr	r2, [pc, #28]	@ (80071a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007190:	4b04      	ldr	r3, [pc, #16]	@ (80071a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007192:	681b      	ldr	r3, [r3, #0]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	58024400 	.word	0x58024400
 80071a0:	0800bb94 	.word	0x0800bb94
 80071a4:	2400000c 	.word	0x2400000c
 80071a8:	24000008 	.word	0x24000008

080071ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80071b0:	f7ff ffcc 	bl	800714c <HAL_RCC_GetHCLKFreq>
 80071b4:	4602      	mov	r2, r0
 80071b6:	4b06      	ldr	r3, [pc, #24]	@ (80071d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071b8:	69db      	ldr	r3, [r3, #28]
 80071ba:	091b      	lsrs	r3, r3, #4
 80071bc:	f003 0307 	and.w	r3, r3, #7
 80071c0:	4904      	ldr	r1, [pc, #16]	@ (80071d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80071c2:	5ccb      	ldrb	r3, [r1, r3]
 80071c4:	f003 031f 	and.w	r3, r3, #31
 80071c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	58024400 	.word	0x58024400
 80071d4:	0800bb94 	.word	0x0800bb94

080071d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80071dc:	f7ff ffb6 	bl	800714c <HAL_RCC_GetHCLKFreq>
 80071e0:	4602      	mov	r2, r0
 80071e2:	4b06      	ldr	r3, [pc, #24]	@ (80071fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	0a1b      	lsrs	r3, r3, #8
 80071e8:	f003 0307 	and.w	r3, r3, #7
 80071ec:	4904      	ldr	r1, [pc, #16]	@ (8007200 <HAL_RCC_GetPCLK2Freq+0x28>)
 80071ee:	5ccb      	ldrb	r3, [r1, r3]
 80071f0:	f003 031f 	and.w	r3, r3, #31
 80071f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	58024400 	.word	0x58024400
 8007200:	0800bb94 	.word	0x0800bb94

08007204 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007208:	b0c6      	sub	sp, #280	@ 0x118
 800720a:	af00      	add	r7, sp, #0
 800720c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007210:	2300      	movs	r3, #0
 8007212:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007216:	2300      	movs	r3, #0
 8007218:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800721c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007228:	2500      	movs	r5, #0
 800722a:	ea54 0305 	orrs.w	r3, r4, r5
 800722e:	d049      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007234:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007236:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800723a:	d02f      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800723c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007240:	d828      	bhi.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007242:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007246:	d01a      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007248:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800724c:	d822      	bhi.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800724e:	2b00      	cmp	r3, #0
 8007250:	d003      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007252:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007256:	d007      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007258:	e01c      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800725a:	4bab      	ldr	r3, [pc, #684]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800725c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800725e:	4aaa      	ldr	r2, [pc, #680]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007260:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007264:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007266:	e01a      	b.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800726c:	3308      	adds	r3, #8
 800726e:	2102      	movs	r1, #2
 8007270:	4618      	mov	r0, r3
 8007272:	f002 fa49 	bl	8009708 <RCCEx_PLL2_Config>
 8007276:	4603      	mov	r3, r0
 8007278:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800727c:	e00f      	b.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800727e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007282:	3328      	adds	r3, #40	@ 0x28
 8007284:	2102      	movs	r1, #2
 8007286:	4618      	mov	r0, r3
 8007288:	f002 faf0 	bl	800986c <RCCEx_PLL3_Config>
 800728c:	4603      	mov	r3, r0
 800728e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007292:	e004      	b.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800729a:	e000      	b.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800729c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800729e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10a      	bne.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80072a6:	4b98      	ldr	r3, [pc, #608]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80072a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072aa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80072ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072b4:	4a94      	ldr	r2, [pc, #592]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80072b6:	430b      	orrs	r3, r1
 80072b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80072ba:	e003      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80072c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072cc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80072d0:	f04f 0900 	mov.w	r9, #0
 80072d4:	ea58 0309 	orrs.w	r3, r8, r9
 80072d8:	d047      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80072da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072e0:	2b04      	cmp	r3, #4
 80072e2:	d82a      	bhi.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80072e4:	a201      	add	r2, pc, #4	@ (adr r2, 80072ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80072e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ea:	bf00      	nop
 80072ec:	08007301 	.word	0x08007301
 80072f0:	0800730f 	.word	0x0800730f
 80072f4:	08007325 	.word	0x08007325
 80072f8:	08007343 	.word	0x08007343
 80072fc:	08007343 	.word	0x08007343
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007300:	4b81      	ldr	r3, [pc, #516]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007304:	4a80      	ldr	r2, [pc, #512]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007306:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800730a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800730c:	e01a      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800730e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007312:	3308      	adds	r3, #8
 8007314:	2100      	movs	r1, #0
 8007316:	4618      	mov	r0, r3
 8007318:	f002 f9f6 	bl	8009708 <RCCEx_PLL2_Config>
 800731c:	4603      	mov	r3, r0
 800731e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007322:	e00f      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007328:	3328      	adds	r3, #40	@ 0x28
 800732a:	2100      	movs	r1, #0
 800732c:	4618      	mov	r0, r3
 800732e:	f002 fa9d 	bl	800986c <RCCEx_PLL3_Config>
 8007332:	4603      	mov	r3, r0
 8007334:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007338:	e004      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007340:	e000      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007342:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007344:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10a      	bne.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800734c:	4b6e      	ldr	r3, [pc, #440]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800734e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007350:	f023 0107 	bic.w	r1, r3, #7
 8007354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800735a:	4a6b      	ldr	r2, [pc, #428]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800735c:	430b      	orrs	r3, r1
 800735e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007360:	e003      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007362:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007366:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800736a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800736e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007372:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8007376:	f04f 0b00 	mov.w	fp, #0
 800737a:	ea5a 030b 	orrs.w	r3, sl, fp
 800737e:	d05b      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007384:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007388:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800738c:	d03b      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800738e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007392:	d834      	bhi.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007394:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007398:	d037      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800739a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800739e:	d82e      	bhi.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80073a0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80073a4:	d033      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80073a6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80073aa:	d828      	bhi.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80073ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80073b0:	d01a      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80073b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80073b6:	d822      	bhi.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d003      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80073bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80073c0:	d007      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80073c2:	e01c      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073c4:	4b50      	ldr	r3, [pc, #320]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80073c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c8:	4a4f      	ldr	r2, [pc, #316]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80073ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073d0:	e01e      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073d6:	3308      	adds	r3, #8
 80073d8:	2100      	movs	r1, #0
 80073da:	4618      	mov	r0, r3
 80073dc:	f002 f994 	bl	8009708 <RCCEx_PLL2_Config>
 80073e0:	4603      	mov	r3, r0
 80073e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80073e6:	e013      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ec:	3328      	adds	r3, #40	@ 0x28
 80073ee:	2100      	movs	r1, #0
 80073f0:	4618      	mov	r0, r3
 80073f2:	f002 fa3b 	bl	800986c <RCCEx_PLL3_Config>
 80073f6:	4603      	mov	r3, r0
 80073f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073fc:	e008      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007404:	e004      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007406:	bf00      	nop
 8007408:	e002      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800740a:	bf00      	nop
 800740c:	e000      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800740e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007410:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007414:	2b00      	cmp	r3, #0
 8007416:	d10b      	bne.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007418:	4b3b      	ldr	r3, [pc, #236]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800741a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800741c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007424:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007428:	4a37      	ldr	r2, [pc, #220]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800742a:	430b      	orrs	r3, r1
 800742c:	6593      	str	r3, [r2, #88]	@ 0x58
 800742e:	e003      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007430:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007434:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800743c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007440:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007444:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007448:	2300      	movs	r3, #0
 800744a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800744e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007452:	460b      	mov	r3, r1
 8007454:	4313      	orrs	r3, r2
 8007456:	d05d      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800745c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007460:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007464:	d03b      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007466:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800746a:	d834      	bhi.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800746c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007470:	d037      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007472:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007476:	d82e      	bhi.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007478:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800747c:	d033      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800747e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007482:	d828      	bhi.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007484:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007488:	d01a      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800748a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800748e:	d822      	bhi.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007490:	2b00      	cmp	r3, #0
 8007492:	d003      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007494:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007498:	d007      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800749a:	e01c      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800749c:	4b1a      	ldr	r3, [pc, #104]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800749e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a0:	4a19      	ldr	r2, [pc, #100]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80074a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074a8:	e01e      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ae:	3308      	adds	r3, #8
 80074b0:	2100      	movs	r1, #0
 80074b2:	4618      	mov	r0, r3
 80074b4:	f002 f928 	bl	8009708 <RCCEx_PLL2_Config>
 80074b8:	4603      	mov	r3, r0
 80074ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80074be:	e013      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074c4:	3328      	adds	r3, #40	@ 0x28
 80074c6:	2100      	movs	r1, #0
 80074c8:	4618      	mov	r0, r3
 80074ca:	f002 f9cf 	bl	800986c <RCCEx_PLL3_Config>
 80074ce:	4603      	mov	r3, r0
 80074d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074d4:	e008      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80074dc:	e004      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80074de:	bf00      	nop
 80074e0:	e002      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80074e2:	bf00      	nop
 80074e4:	e000      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80074e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10d      	bne.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80074f0:	4b05      	ldr	r3, [pc, #20]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80074f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074f4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80074f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007500:	4a01      	ldr	r2, [pc, #4]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007502:	430b      	orrs	r3, r1
 8007504:	6593      	str	r3, [r2, #88]	@ 0x58
 8007506:	e005      	b.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007508:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800750c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007510:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007520:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007524:	2300      	movs	r3, #0
 8007526:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800752a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800752e:	460b      	mov	r3, r1
 8007530:	4313      	orrs	r3, r2
 8007532:	d03a      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800753a:	2b30      	cmp	r3, #48	@ 0x30
 800753c:	d01f      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800753e:	2b30      	cmp	r3, #48	@ 0x30
 8007540:	d819      	bhi.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007542:	2b20      	cmp	r3, #32
 8007544:	d00c      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007546:	2b20      	cmp	r3, #32
 8007548:	d815      	bhi.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800754a:	2b00      	cmp	r3, #0
 800754c:	d019      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800754e:	2b10      	cmp	r3, #16
 8007550:	d111      	bne.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007552:	4baa      	ldr	r3, [pc, #680]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007556:	4aa9      	ldr	r2, [pc, #676]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007558:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800755c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800755e:	e011      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007564:	3308      	adds	r3, #8
 8007566:	2102      	movs	r1, #2
 8007568:	4618      	mov	r0, r3
 800756a:	f002 f8cd 	bl	8009708 <RCCEx_PLL2_Config>
 800756e:	4603      	mov	r3, r0
 8007570:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007574:	e006      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800757c:	e002      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800757e:	bf00      	nop
 8007580:	e000      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007582:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007584:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10a      	bne.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800758c:	4b9b      	ldr	r3, [pc, #620]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800758e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007590:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800759a:	4a98      	ldr	r2, [pc, #608]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800759c:	430b      	orrs	r3, r1
 800759e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80075a0:	e003      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80075aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80075b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80075ba:	2300      	movs	r3, #0
 80075bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80075c0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80075c4:	460b      	mov	r3, r1
 80075c6:	4313      	orrs	r3, r2
 80075c8:	d051      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80075ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80075d4:	d035      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80075d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80075da:	d82e      	bhi.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80075dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80075e0:	d031      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80075e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80075e6:	d828      	bhi.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80075e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075ec:	d01a      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80075ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075f2:	d822      	bhi.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d003      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80075f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075fc:	d007      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80075fe:	e01c      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007600:	4b7e      	ldr	r3, [pc, #504]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007604:	4a7d      	ldr	r2, [pc, #500]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007606:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800760a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800760c:	e01c      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800760e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007612:	3308      	adds	r3, #8
 8007614:	2100      	movs	r1, #0
 8007616:	4618      	mov	r0, r3
 8007618:	f002 f876 	bl	8009708 <RCCEx_PLL2_Config>
 800761c:	4603      	mov	r3, r0
 800761e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007622:	e011      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007628:	3328      	adds	r3, #40	@ 0x28
 800762a:	2100      	movs	r1, #0
 800762c:	4618      	mov	r0, r3
 800762e:	f002 f91d 	bl	800986c <RCCEx_PLL3_Config>
 8007632:	4603      	mov	r3, r0
 8007634:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007638:	e006      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007640:	e002      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007642:	bf00      	nop
 8007644:	e000      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007646:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007648:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10a      	bne.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007650:	4b6a      	ldr	r3, [pc, #424]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007654:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800765c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800765e:	4a67      	ldr	r2, [pc, #412]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007660:	430b      	orrs	r3, r1
 8007662:	6513      	str	r3, [r2, #80]	@ 0x50
 8007664:	e003      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007666:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800766a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800766e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007676:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800767a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800767e:	2300      	movs	r3, #0
 8007680:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007684:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007688:	460b      	mov	r3, r1
 800768a:	4313      	orrs	r3, r2
 800768c:	d053      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800768e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007692:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007694:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007698:	d033      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800769a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800769e:	d82c      	bhi.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80076a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80076a4:	d02f      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80076a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80076aa:	d826      	bhi.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80076ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80076b0:	d02b      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x506>
 80076b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80076b6:	d820      	bhi.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80076b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076bc:	d012      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80076be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076c2:	d81a      	bhi.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d022      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80076c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076cc:	d115      	bne.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076d2:	3308      	adds	r3, #8
 80076d4:	2101      	movs	r1, #1
 80076d6:	4618      	mov	r0, r3
 80076d8:	f002 f816 	bl	8009708 <RCCEx_PLL2_Config>
 80076dc:	4603      	mov	r3, r0
 80076de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80076e2:	e015      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e8:	3328      	adds	r3, #40	@ 0x28
 80076ea:	2101      	movs	r1, #1
 80076ec:	4618      	mov	r0, r3
 80076ee:	f002 f8bd 	bl	800986c <RCCEx_PLL3_Config>
 80076f2:	4603      	mov	r3, r0
 80076f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80076f8:	e00a      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007700:	e006      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007702:	bf00      	nop
 8007704:	e004      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007706:	bf00      	nop
 8007708:	e002      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800770a:	bf00      	nop
 800770c:	e000      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800770e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007710:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10a      	bne.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007718:	4b38      	ldr	r3, [pc, #224]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800771a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800771c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007726:	4a35      	ldr	r2, [pc, #212]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007728:	430b      	orrs	r3, r1
 800772a:	6513      	str	r3, [r2, #80]	@ 0x50
 800772c:	e003      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800772e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007732:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800773a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007742:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007746:	2300      	movs	r3, #0
 8007748:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800774c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007750:	460b      	mov	r3, r1
 8007752:	4313      	orrs	r3, r2
 8007754:	d058      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800775a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800775e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007762:	d033      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007764:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007768:	d82c      	bhi.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800776a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800776e:	d02f      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007774:	d826      	bhi.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007776:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800777a:	d02b      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800777c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007780:	d820      	bhi.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007782:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007786:	d012      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007788:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800778c:	d81a      	bhi.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800778e:	2b00      	cmp	r3, #0
 8007790:	d022      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007792:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007796:	d115      	bne.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800779c:	3308      	adds	r3, #8
 800779e:	2101      	movs	r1, #1
 80077a0:	4618      	mov	r0, r3
 80077a2:	f001 ffb1 	bl	8009708 <RCCEx_PLL2_Config>
 80077a6:	4603      	mov	r3, r0
 80077a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80077ac:	e015      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b2:	3328      	adds	r3, #40	@ 0x28
 80077b4:	2101      	movs	r1, #1
 80077b6:	4618      	mov	r0, r3
 80077b8:	f002 f858 	bl	800986c <RCCEx_PLL3_Config>
 80077bc:	4603      	mov	r3, r0
 80077be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80077c2:	e00a      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80077ca:	e006      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80077cc:	bf00      	nop
 80077ce:	e004      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80077d0:	bf00      	nop
 80077d2:	e002      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80077d4:	bf00      	nop
 80077d6:	e000      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80077d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10e      	bne.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80077e2:	4b06      	ldr	r3, [pc, #24]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077e6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80077ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80077f2:	4a02      	ldr	r2, [pc, #8]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077f4:	430b      	orrs	r3, r1
 80077f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80077f8:	e006      	b.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80077fa:	bf00      	nop
 80077fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007800:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007804:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800780c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007810:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007814:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007818:	2300      	movs	r3, #0
 800781a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800781e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007822:	460b      	mov	r3, r1
 8007824:	4313      	orrs	r3, r2
 8007826:	d037      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800782c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800782e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007832:	d00e      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007834:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007838:	d816      	bhi.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800783a:	2b00      	cmp	r3, #0
 800783c:	d018      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800783e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007842:	d111      	bne.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007844:	4bc4      	ldr	r3, [pc, #784]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007848:	4ac3      	ldr	r2, [pc, #780]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800784a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800784e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007850:	e00f      	b.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007856:	3308      	adds	r3, #8
 8007858:	2101      	movs	r1, #1
 800785a:	4618      	mov	r0, r3
 800785c:	f001 ff54 	bl	8009708 <RCCEx_PLL2_Config>
 8007860:	4603      	mov	r3, r0
 8007862:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007866:	e004      	b.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800786e:	e000      	b.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007870:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007872:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10a      	bne.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800787a:	4bb7      	ldr	r3, [pc, #732]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800787c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800787e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007886:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007888:	4ab3      	ldr	r2, [pc, #716]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800788a:	430b      	orrs	r3, r1
 800788c:	6513      	str	r3, [r2, #80]	@ 0x50
 800788e:	e003      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007890:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007894:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800789c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80078a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80078a8:	2300      	movs	r3, #0
 80078aa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80078ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80078b2:	460b      	mov	r3, r1
 80078b4:	4313      	orrs	r3, r2
 80078b6:	d039      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80078b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078be:	2b03      	cmp	r3, #3
 80078c0:	d81c      	bhi.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80078c2:	a201      	add	r2, pc, #4	@ (adr r2, 80078c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80078c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c8:	08007905 	.word	0x08007905
 80078cc:	080078d9 	.word	0x080078d9
 80078d0:	080078e7 	.word	0x080078e7
 80078d4:	08007905 	.word	0x08007905
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078d8:	4b9f      	ldr	r3, [pc, #636]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078dc:	4a9e      	ldr	r2, [pc, #632]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80078e4:	e00f      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ea:	3308      	adds	r3, #8
 80078ec:	2102      	movs	r1, #2
 80078ee:	4618      	mov	r0, r3
 80078f0:	f001 ff0a 	bl	8009708 <RCCEx_PLL2_Config>
 80078f4:	4603      	mov	r3, r0
 80078f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80078fa:	e004      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007902:	e000      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007906:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800790a:	2b00      	cmp	r3, #0
 800790c:	d10a      	bne.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800790e:	4b92      	ldr	r3, [pc, #584]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007912:	f023 0103 	bic.w	r1, r3, #3
 8007916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800791a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800791c:	4a8e      	ldr	r2, [pc, #568]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800791e:	430b      	orrs	r3, r1
 8007920:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007922:	e003      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007924:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007928:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800792c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007934:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007938:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800793c:	2300      	movs	r3, #0
 800793e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007942:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007946:	460b      	mov	r3, r1
 8007948:	4313      	orrs	r3, r2
 800794a:	f000 8099 	beq.w	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800794e:	4b83      	ldr	r3, [pc, #524]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a82      	ldr	r2, [pc, #520]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007954:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007958:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800795a:	f7fb f82f 	bl	80029bc <HAL_GetTick>
 800795e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007962:	e00b      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007964:	f7fb f82a 	bl	80029bc <HAL_GetTick>
 8007968:	4602      	mov	r2, r0
 800796a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	2b64      	cmp	r3, #100	@ 0x64
 8007972:	d903      	bls.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800797a:	e005      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800797c:	4b77      	ldr	r3, [pc, #476]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007984:	2b00      	cmp	r3, #0
 8007986:	d0ed      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007988:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800798c:	2b00      	cmp	r3, #0
 800798e:	d173      	bne.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007990:	4b71      	ldr	r3, [pc, #452]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007992:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007998:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800799c:	4053      	eors	r3, r2
 800799e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d015      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80079a6:	4b6c      	ldr	r3, [pc, #432]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079ae:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80079b2:	4b69      	ldr	r3, [pc, #420]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079b6:	4a68      	ldr	r2, [pc, #416]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079bc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80079be:	4b66      	ldr	r3, [pc, #408]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079c2:	4a65      	ldr	r2, [pc, #404]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079c8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80079ca:	4a63      	ldr	r2, [pc, #396]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079d0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80079d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80079da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079de:	d118      	bne.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079e0:	f7fa ffec 	bl	80029bc <HAL_GetTick>
 80079e4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079e8:	e00d      	b.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079ea:	f7fa ffe7 	bl	80029bc <HAL_GetTick>
 80079ee:	4602      	mov	r2, r0
 80079f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80079f4:	1ad2      	subs	r2, r2, r3
 80079f6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d903      	bls.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007a04:	e005      	b.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a06:	4b54      	ldr	r3, [pc, #336]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a0a:	f003 0302 	and.w	r3, r3, #2
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d0eb      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007a12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d129      	bne.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007a22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a2a:	d10e      	bne.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007a2c:	4b4a      	ldr	r3, [pc, #296]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007a3c:	091a      	lsrs	r2, r3, #4
 8007a3e:	4b48      	ldr	r3, [pc, #288]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007a40:	4013      	ands	r3, r2
 8007a42:	4a45      	ldr	r2, [pc, #276]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a44:	430b      	orrs	r3, r1
 8007a46:	6113      	str	r3, [r2, #16]
 8007a48:	e005      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007a4a:	4b43      	ldr	r3, [pc, #268]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	4a42      	ldr	r2, [pc, #264]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a50:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007a54:	6113      	str	r3, [r2, #16]
 8007a56:	4b40      	ldr	r3, [pc, #256]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a58:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a66:	4a3c      	ldr	r2, [pc, #240]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a68:	430b      	orrs	r3, r1
 8007a6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a6c:	e008      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a72:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8007a76:	e003      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a88:	f002 0301 	and.w	r3, r2, #1
 8007a8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a90:	2300      	movs	r3, #0
 8007a92:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007a96:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	f000 808f 	beq.w	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007aa8:	2b28      	cmp	r3, #40	@ 0x28
 8007aaa:	d871      	bhi.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007aac:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab2:	bf00      	nop
 8007ab4:	08007b99 	.word	0x08007b99
 8007ab8:	08007b91 	.word	0x08007b91
 8007abc:	08007b91 	.word	0x08007b91
 8007ac0:	08007b91 	.word	0x08007b91
 8007ac4:	08007b91 	.word	0x08007b91
 8007ac8:	08007b91 	.word	0x08007b91
 8007acc:	08007b91 	.word	0x08007b91
 8007ad0:	08007b91 	.word	0x08007b91
 8007ad4:	08007b65 	.word	0x08007b65
 8007ad8:	08007b91 	.word	0x08007b91
 8007adc:	08007b91 	.word	0x08007b91
 8007ae0:	08007b91 	.word	0x08007b91
 8007ae4:	08007b91 	.word	0x08007b91
 8007ae8:	08007b91 	.word	0x08007b91
 8007aec:	08007b91 	.word	0x08007b91
 8007af0:	08007b91 	.word	0x08007b91
 8007af4:	08007b7b 	.word	0x08007b7b
 8007af8:	08007b91 	.word	0x08007b91
 8007afc:	08007b91 	.word	0x08007b91
 8007b00:	08007b91 	.word	0x08007b91
 8007b04:	08007b91 	.word	0x08007b91
 8007b08:	08007b91 	.word	0x08007b91
 8007b0c:	08007b91 	.word	0x08007b91
 8007b10:	08007b91 	.word	0x08007b91
 8007b14:	08007b99 	.word	0x08007b99
 8007b18:	08007b91 	.word	0x08007b91
 8007b1c:	08007b91 	.word	0x08007b91
 8007b20:	08007b91 	.word	0x08007b91
 8007b24:	08007b91 	.word	0x08007b91
 8007b28:	08007b91 	.word	0x08007b91
 8007b2c:	08007b91 	.word	0x08007b91
 8007b30:	08007b91 	.word	0x08007b91
 8007b34:	08007b99 	.word	0x08007b99
 8007b38:	08007b91 	.word	0x08007b91
 8007b3c:	08007b91 	.word	0x08007b91
 8007b40:	08007b91 	.word	0x08007b91
 8007b44:	08007b91 	.word	0x08007b91
 8007b48:	08007b91 	.word	0x08007b91
 8007b4c:	08007b91 	.word	0x08007b91
 8007b50:	08007b91 	.word	0x08007b91
 8007b54:	08007b99 	.word	0x08007b99
 8007b58:	58024400 	.word	0x58024400
 8007b5c:	58024800 	.word	0x58024800
 8007b60:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b68:	3308      	adds	r3, #8
 8007b6a:	2101      	movs	r1, #1
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f001 fdcb 	bl	8009708 <RCCEx_PLL2_Config>
 8007b72:	4603      	mov	r3, r0
 8007b74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007b78:	e00f      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b7e:	3328      	adds	r3, #40	@ 0x28
 8007b80:	2101      	movs	r1, #1
 8007b82:	4618      	mov	r0, r3
 8007b84:	f001 fe72 	bl	800986c <RCCEx_PLL3_Config>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007b8e:	e004      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b96:	e000      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10a      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007ba2:	4bbf      	ldr	r3, [pc, #764]	@ (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ba6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007bb0:	4abb      	ldr	r2, [pc, #748]	@ (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007bb2:	430b      	orrs	r3, r1
 8007bb4:	6553      	str	r3, [r2, #84]	@ 0x54
 8007bb6:	e003      	b.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc8:	f002 0302 	and.w	r3, r2, #2
 8007bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007bd6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007bda:	460b      	mov	r3, r1
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	d041      	beq.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007be6:	2b05      	cmp	r3, #5
 8007be8:	d824      	bhi.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007bea:	a201      	add	r2, pc, #4	@ (adr r2, 8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf0:	08007c3d 	.word	0x08007c3d
 8007bf4:	08007c09 	.word	0x08007c09
 8007bf8:	08007c1f 	.word	0x08007c1f
 8007bfc:	08007c3d 	.word	0x08007c3d
 8007c00:	08007c3d 	.word	0x08007c3d
 8007c04:	08007c3d 	.word	0x08007c3d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c0c:	3308      	adds	r3, #8
 8007c0e:	2101      	movs	r1, #1
 8007c10:	4618      	mov	r0, r3
 8007c12:	f001 fd79 	bl	8009708 <RCCEx_PLL2_Config>
 8007c16:	4603      	mov	r3, r0
 8007c18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007c1c:	e00f      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c22:	3328      	adds	r3, #40	@ 0x28
 8007c24:	2101      	movs	r1, #1
 8007c26:	4618      	mov	r0, r3
 8007c28:	f001 fe20 	bl	800986c <RCCEx_PLL3_Config>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007c32:	e004      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c3a:	e000      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d10a      	bne.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007c46:	4b96      	ldr	r3, [pc, #600]	@ (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c4a:	f023 0107 	bic.w	r1, r3, #7
 8007c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c54:	4a92      	ldr	r2, [pc, #584]	@ (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007c56:	430b      	orrs	r3, r1
 8007c58:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c5a:	e003      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6c:	f002 0304 	and.w	r3, r2, #4
 8007c70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007c74:	2300      	movs	r3, #0
 8007c76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c7a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007c7e:	460b      	mov	r3, r1
 8007c80:	4313      	orrs	r3, r2
 8007c82:	d044      	beq.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c8c:	2b05      	cmp	r3, #5
 8007c8e:	d825      	bhi.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007c90:	a201      	add	r2, pc, #4	@ (adr r2, 8007c98 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c96:	bf00      	nop
 8007c98:	08007ce5 	.word	0x08007ce5
 8007c9c:	08007cb1 	.word	0x08007cb1
 8007ca0:	08007cc7 	.word	0x08007cc7
 8007ca4:	08007ce5 	.word	0x08007ce5
 8007ca8:	08007ce5 	.word	0x08007ce5
 8007cac:	08007ce5 	.word	0x08007ce5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cb4:	3308      	adds	r3, #8
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f001 fd25 	bl	8009708 <RCCEx_PLL2_Config>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007cc4:	e00f      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cca:	3328      	adds	r3, #40	@ 0x28
 8007ccc:	2101      	movs	r1, #1
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f001 fdcc 	bl	800986c <RCCEx_PLL3_Config>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007cda:	e004      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ce2:	e000      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ce6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d10b      	bne.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007cee:	4b6c      	ldr	r3, [pc, #432]	@ (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cf2:	f023 0107 	bic.w	r1, r3, #7
 8007cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cfe:	4a68      	ldr	r2, [pc, #416]	@ (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007d00:	430b      	orrs	r3, r1
 8007d02:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d04:	e003      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d0a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d16:	f002 0320 	and.w	r3, r2, #32
 8007d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007d1e:	2300      	movs	r3, #0
 8007d20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007d24:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007d28:	460b      	mov	r3, r1
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	d055      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d3a:	d033      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d40:	d82c      	bhi.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007d42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d46:	d02f      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d4c:	d826      	bhi.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007d4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d52:	d02b      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007d54:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d58:	d820      	bhi.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007d5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d5e:	d012      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007d60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d64:	d81a      	bhi.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d022      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007d6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d6e:	d115      	bne.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d74:	3308      	adds	r3, #8
 8007d76:	2100      	movs	r1, #0
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f001 fcc5 	bl	8009708 <RCCEx_PLL2_Config>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007d84:	e015      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d8a:	3328      	adds	r3, #40	@ 0x28
 8007d8c:	2102      	movs	r1, #2
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f001 fd6c 	bl	800986c <RCCEx_PLL3_Config>
 8007d94:	4603      	mov	r3, r0
 8007d96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007d9a:	e00a      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007da2:	e006      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007da4:	bf00      	nop
 8007da6:	e004      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007da8:	bf00      	nop
 8007daa:	e002      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007dac:	bf00      	nop
 8007dae:	e000      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007db2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10b      	bne.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007dba:	4b39      	ldr	r3, [pc, #228]	@ (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dbe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dca:	4a35      	ldr	r2, [pc, #212]	@ (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007dcc:	430b      	orrs	r3, r1
 8007dce:	6553      	str	r3, [r2, #84]	@ 0x54
 8007dd0:	e003      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dd6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007de6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007dea:	2300      	movs	r3, #0
 8007dec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007df0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007df4:	460b      	mov	r3, r1
 8007df6:	4313      	orrs	r3, r2
 8007df8:	d058      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e02:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007e06:	d033      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007e08:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007e0c:	d82c      	bhi.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007e0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e12:	d02f      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007e14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e18:	d826      	bhi.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007e1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e1e:	d02b      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007e20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e24:	d820      	bhi.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007e26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e2a:	d012      	beq.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007e2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e30:	d81a      	bhi.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d022      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e3a:	d115      	bne.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e40:	3308      	adds	r3, #8
 8007e42:	2100      	movs	r1, #0
 8007e44:	4618      	mov	r0, r3
 8007e46:	f001 fc5f 	bl	8009708 <RCCEx_PLL2_Config>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007e50:	e015      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e56:	3328      	adds	r3, #40	@ 0x28
 8007e58:	2102      	movs	r1, #2
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f001 fd06 	bl	800986c <RCCEx_PLL3_Config>
 8007e60:	4603      	mov	r3, r0
 8007e62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007e66:	e00a      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e6e:	e006      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007e70:	bf00      	nop
 8007e72:	e004      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007e74:	bf00      	nop
 8007e76:	e002      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007e78:	bf00      	nop
 8007e7a:	e000      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d10e      	bne.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e86:	4b06      	ldr	r3, [pc, #24]	@ (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e8a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e96:	4a02      	ldr	r2, [pc, #8]	@ (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007e98:	430b      	orrs	r3, r1
 8007e9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e9c:	e006      	b.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007e9e:	bf00      	nop
 8007ea0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ea4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ea8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007eb8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007ec2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	d055      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ed0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ed4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007ed8:	d033      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007eda:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007ede:	d82c      	bhi.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007ee0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ee4:	d02f      	beq.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007ee6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007eea:	d826      	bhi.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007eec:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007ef0:	d02b      	beq.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007ef2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007ef6:	d820      	bhi.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007ef8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007efc:	d012      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007efe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f02:	d81a      	bhi.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d022      	beq.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007f08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f0c:	d115      	bne.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f12:	3308      	adds	r3, #8
 8007f14:	2100      	movs	r1, #0
 8007f16:	4618      	mov	r0, r3
 8007f18:	f001 fbf6 	bl	8009708 <RCCEx_PLL2_Config>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007f22:	e015      	b.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f28:	3328      	adds	r3, #40	@ 0x28
 8007f2a:	2102      	movs	r1, #2
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f001 fc9d 	bl	800986c <RCCEx_PLL3_Config>
 8007f32:	4603      	mov	r3, r0
 8007f34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007f38:	e00a      	b.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f40:	e006      	b.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007f42:	bf00      	nop
 8007f44:	e004      	b.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007f46:	bf00      	nop
 8007f48:	e002      	b.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007f4a:	bf00      	nop
 8007f4c:	e000      	b.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007f4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10b      	bne.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007f58:	4ba0      	ldr	r3, [pc, #640]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f5c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f68:	4a9c      	ldr	r2, [pc, #624]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f6a:	430b      	orrs	r3, r1
 8007f6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f6e:	e003      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f80:	f002 0308 	and.w	r3, r2, #8
 8007f84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f88:	2300      	movs	r3, #0
 8007f8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007f8e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007f92:	460b      	mov	r3, r1
 8007f94:	4313      	orrs	r3, r2
 8007f96:	d01e      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fa4:	d10c      	bne.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007faa:	3328      	adds	r3, #40	@ 0x28
 8007fac:	2102      	movs	r1, #2
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f001 fc5c 	bl	800986c <RCCEx_PLL3_Config>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d002      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007fc0:	4b86      	ldr	r3, [pc, #536]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fc4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fd0:	4a82      	ldr	r2, [pc, #520]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007fd2:	430b      	orrs	r3, r1
 8007fd4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fde:	f002 0310 	and.w	r3, r2, #16
 8007fe2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007fec:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	d01e      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ffe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008002:	d10c      	bne.n	800801e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008008:	3328      	adds	r3, #40	@ 0x28
 800800a:	2102      	movs	r1, #2
 800800c:	4618      	mov	r0, r3
 800800e:	f001 fc2d 	bl	800986c <RCCEx_PLL3_Config>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d002      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800801e:	4b6f      	ldr	r3, [pc, #444]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008022:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800802a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800802e:	4a6b      	ldr	r2, [pc, #428]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008030:	430b      	orrs	r3, r1
 8008032:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008040:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008042:	2300      	movs	r3, #0
 8008044:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008046:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800804a:	460b      	mov	r3, r1
 800804c:	4313      	orrs	r3, r2
 800804e:	d03e      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008054:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008058:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800805c:	d022      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800805e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008062:	d81b      	bhi.n	800809c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8008064:	2b00      	cmp	r3, #0
 8008066:	d003      	beq.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8008068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800806c:	d00b      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800806e:	e015      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008074:	3308      	adds	r3, #8
 8008076:	2100      	movs	r1, #0
 8008078:	4618      	mov	r0, r3
 800807a:	f001 fb45 	bl	8009708 <RCCEx_PLL2_Config>
 800807e:	4603      	mov	r3, r0
 8008080:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008084:	e00f      	b.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800808a:	3328      	adds	r3, #40	@ 0x28
 800808c:	2102      	movs	r1, #2
 800808e:	4618      	mov	r0, r3
 8008090:	f001 fbec 	bl	800986c <RCCEx_PLL3_Config>
 8008094:	4603      	mov	r3, r0
 8008096:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800809a:	e004      	b.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80080a2:	e000      	b.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80080a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10b      	bne.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80080ae:	4b4b      	ldr	r3, [pc, #300]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80080b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080b2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80080b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80080be:	4a47      	ldr	r2, [pc, #284]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80080c0:	430b      	orrs	r3, r1
 80080c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80080c4:	e003      	b.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80080ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80080da:	673b      	str	r3, [r7, #112]	@ 0x70
 80080dc:	2300      	movs	r3, #0
 80080de:	677b      	str	r3, [r7, #116]	@ 0x74
 80080e0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80080e4:	460b      	mov	r3, r1
 80080e6:	4313      	orrs	r3, r2
 80080e8:	d03b      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80080ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80080f6:	d01f      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80080f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80080fc:	d818      	bhi.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80080fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008102:	d003      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8008104:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008108:	d007      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800810a:	e011      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800810c:	4b33      	ldr	r3, [pc, #204]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800810e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008110:	4a32      	ldr	r2, [pc, #200]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008112:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008116:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008118:	e00f      	b.n	800813a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800811a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800811e:	3328      	adds	r3, #40	@ 0x28
 8008120:	2101      	movs	r1, #1
 8008122:	4618      	mov	r0, r3
 8008124:	f001 fba2 	bl	800986c <RCCEx_PLL3_Config>
 8008128:	4603      	mov	r3, r0
 800812a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800812e:	e004      	b.n	800813a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008136:	e000      	b.n	800813a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8008138:	bf00      	nop
    }

    if (ret == HAL_OK)
 800813a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800813e:	2b00      	cmp	r3, #0
 8008140:	d10b      	bne.n	800815a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008142:	4b26      	ldr	r3, [pc, #152]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008146:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800814a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800814e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008152:	4a22      	ldr	r2, [pc, #136]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008154:	430b      	orrs	r3, r1
 8008156:	6553      	str	r3, [r2, #84]	@ 0x54
 8008158:	e003      	b.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800815a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800815e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800816e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008170:	2300      	movs	r3, #0
 8008172:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008174:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008178:	460b      	mov	r3, r1
 800817a:	4313      	orrs	r3, r2
 800817c:	d034      	beq.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800817e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008182:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008184:	2b00      	cmp	r3, #0
 8008186:	d003      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8008188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800818c:	d007      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800818e:	e011      	b.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008190:	4b12      	ldr	r3, [pc, #72]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008194:	4a11      	ldr	r2, [pc, #68]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008196:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800819a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800819c:	e00e      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800819e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081a2:	3308      	adds	r3, #8
 80081a4:	2102      	movs	r1, #2
 80081a6:	4618      	mov	r0, r3
 80081a8:	f001 faae 	bl	8009708 <RCCEx_PLL2_Config>
 80081ac:	4603      	mov	r3, r0
 80081ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80081b2:	e003      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80081ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10d      	bne.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80081c4:	4b05      	ldr	r3, [pc, #20]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80081c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081c8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80081cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081d2:	4a02      	ldr	r2, [pc, #8]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80081d4:	430b      	orrs	r3, r1
 80081d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80081d8:	e006      	b.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80081da:	bf00      	nop
 80081dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80081e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80081f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80081f6:	2300      	movs	r3, #0
 80081f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80081fa:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80081fe:	460b      	mov	r3, r1
 8008200:	4313      	orrs	r3, r2
 8008202:	d00c      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008208:	3328      	adds	r3, #40	@ 0x28
 800820a:	2102      	movs	r1, #2
 800820c:	4618      	mov	r0, r3
 800820e:	f001 fb2d 	bl	800986c <RCCEx_PLL3_Config>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d002      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800821e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008226:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800822a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800822c:	2300      	movs	r3, #0
 800822e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008230:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008234:	460b      	mov	r3, r1
 8008236:	4313      	orrs	r3, r2
 8008238:	d036      	beq.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800823a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800823e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008240:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008244:	d018      	beq.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8008246:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800824a:	d811      	bhi.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800824c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008250:	d014      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8008252:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008256:	d80b      	bhi.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008258:	2b00      	cmp	r3, #0
 800825a:	d011      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800825c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008260:	d106      	bne.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008262:	4bb7      	ldr	r3, [pc, #732]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008266:	4ab6      	ldr	r2, [pc, #728]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008268:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800826c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800826e:	e008      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008276:	e004      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008278:	bf00      	nop
 800827a:	e002      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800827c:	bf00      	nop
 800827e:	e000      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008282:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008286:	2b00      	cmp	r3, #0
 8008288:	d10a      	bne.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800828a:	4bad      	ldr	r3, [pc, #692]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800828c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800828e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008292:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008296:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008298:	4aa9      	ldr	r2, [pc, #676]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800829a:	430b      	orrs	r3, r1
 800829c:	6553      	str	r3, [r2, #84]	@ 0x54
 800829e:	e003      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80082a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80082b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80082b6:	2300      	movs	r3, #0
 80082b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80082ba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80082be:	460b      	mov	r3, r1
 80082c0:	4313      	orrs	r3, r2
 80082c2:	d009      	beq.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80082c4:	4b9e      	ldr	r3, [pc, #632]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80082c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80082cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082d2:	4a9b      	ldr	r2, [pc, #620]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80082d4:	430b      	orrs	r3, r1
 80082d6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80082d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80082e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082e6:	2300      	movs	r3, #0
 80082e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082ea:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80082ee:	460b      	mov	r3, r1
 80082f0:	4313      	orrs	r3, r2
 80082f2:	d009      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80082f4:	4b92      	ldr	r3, [pc, #584]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80082f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082f8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80082fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008300:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008302:	4a8f      	ldr	r2, [pc, #572]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008304:	430b      	orrs	r3, r1
 8008306:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800830c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008310:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008314:	643b      	str	r3, [r7, #64]	@ 0x40
 8008316:	2300      	movs	r3, #0
 8008318:	647b      	str	r3, [r7, #68]	@ 0x44
 800831a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800831e:	460b      	mov	r3, r1
 8008320:	4313      	orrs	r3, r2
 8008322:	d00e      	beq.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008324:	4b86      	ldr	r3, [pc, #536]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	4a85      	ldr	r2, [pc, #532]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800832a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800832e:	6113      	str	r3, [r2, #16]
 8008330:	4b83      	ldr	r3, [pc, #524]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008332:	6919      	ldr	r1, [r3, #16]
 8008334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008338:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800833c:	4a80      	ldr	r2, [pc, #512]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800833e:	430b      	orrs	r3, r1
 8008340:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800834e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008350:	2300      	movs	r3, #0
 8008352:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008354:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008358:	460b      	mov	r3, r1
 800835a:	4313      	orrs	r3, r2
 800835c:	d009      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800835e:	4b78      	ldr	r3, [pc, #480]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008362:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800836a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800836c:	4a74      	ldr	r2, [pc, #464]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800836e:	430b      	orrs	r3, r1
 8008370:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800837e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008380:	2300      	movs	r3, #0
 8008382:	637b      	str	r3, [r7, #52]	@ 0x34
 8008384:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008388:	460b      	mov	r3, r1
 800838a:	4313      	orrs	r3, r2
 800838c:	d00a      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800838e:	4b6c      	ldr	r3, [pc, #432]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008392:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800839a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800839e:	4a68      	ldr	r2, [pc, #416]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80083a0:	430b      	orrs	r3, r1
 80083a2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80083a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ac:	2100      	movs	r1, #0
 80083ae:	62b9      	str	r1, [r7, #40]	@ 0x28
 80083b0:	f003 0301 	and.w	r3, r3, #1
 80083b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083b6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80083ba:	460b      	mov	r3, r1
 80083bc:	4313      	orrs	r3, r2
 80083be:	d011      	beq.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083c4:	3308      	adds	r3, #8
 80083c6:	2100      	movs	r1, #0
 80083c8:	4618      	mov	r0, r3
 80083ca:	f001 f99d 	bl	8009708 <RCCEx_PLL2_Config>
 80083ce:	4603      	mov	r3, r0
 80083d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80083d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d003      	beq.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80083e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ec:	2100      	movs	r1, #0
 80083ee:	6239      	str	r1, [r7, #32]
 80083f0:	f003 0302 	and.w	r3, r3, #2
 80083f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80083f6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80083fa:	460b      	mov	r3, r1
 80083fc:	4313      	orrs	r3, r2
 80083fe:	d011      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008404:	3308      	adds	r3, #8
 8008406:	2101      	movs	r1, #1
 8008408:	4618      	mov	r0, r3
 800840a:	f001 f97d 	bl	8009708 <RCCEx_PLL2_Config>
 800840e:	4603      	mov	r3, r0
 8008410:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008414:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008418:	2b00      	cmp	r3, #0
 800841a:	d003      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800841c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008420:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842c:	2100      	movs	r1, #0
 800842e:	61b9      	str	r1, [r7, #24]
 8008430:	f003 0304 	and.w	r3, r3, #4
 8008434:	61fb      	str	r3, [r7, #28]
 8008436:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800843a:	460b      	mov	r3, r1
 800843c:	4313      	orrs	r3, r2
 800843e:	d011      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008444:	3308      	adds	r3, #8
 8008446:	2102      	movs	r1, #2
 8008448:	4618      	mov	r0, r3
 800844a:	f001 f95d 	bl	8009708 <RCCEx_PLL2_Config>
 800844e:	4603      	mov	r3, r0
 8008450:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008454:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008458:	2b00      	cmp	r3, #0
 800845a:	d003      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800845c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008460:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846c:	2100      	movs	r1, #0
 800846e:	6139      	str	r1, [r7, #16]
 8008470:	f003 0308 	and.w	r3, r3, #8
 8008474:	617b      	str	r3, [r7, #20]
 8008476:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800847a:	460b      	mov	r3, r1
 800847c:	4313      	orrs	r3, r2
 800847e:	d011      	beq.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008484:	3328      	adds	r3, #40	@ 0x28
 8008486:	2100      	movs	r1, #0
 8008488:	4618      	mov	r0, r3
 800848a:	f001 f9ef 	bl	800986c <RCCEx_PLL3_Config>
 800848e:	4603      	mov	r3, r0
 8008490:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8008494:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008498:	2b00      	cmp	r3, #0
 800849a:	d003      	beq.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800849c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80084a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ac:	2100      	movs	r1, #0
 80084ae:	60b9      	str	r1, [r7, #8]
 80084b0:	f003 0310 	and.w	r3, r3, #16
 80084b4:	60fb      	str	r3, [r7, #12]
 80084b6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80084ba:	460b      	mov	r3, r1
 80084bc:	4313      	orrs	r3, r2
 80084be:	d011      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084c4:	3328      	adds	r3, #40	@ 0x28
 80084c6:	2101      	movs	r1, #1
 80084c8:	4618      	mov	r0, r3
 80084ca:	f001 f9cf 	bl	800986c <RCCEx_PLL3_Config>
 80084ce:	4603      	mov	r3, r0
 80084d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80084d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d003      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80084e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ec:	2100      	movs	r1, #0
 80084ee:	6039      	str	r1, [r7, #0]
 80084f0:	f003 0320 	and.w	r3, r3, #32
 80084f4:	607b      	str	r3, [r7, #4]
 80084f6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80084fa:	460b      	mov	r3, r1
 80084fc:	4313      	orrs	r3, r2
 80084fe:	d011      	beq.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008504:	3328      	adds	r3, #40	@ 0x28
 8008506:	2102      	movs	r1, #2
 8008508:	4618      	mov	r0, r3
 800850a:	f001 f9af 	bl	800986c <RCCEx_PLL3_Config>
 800850e:	4603      	mov	r3, r0
 8008510:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008514:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008518:	2b00      	cmp	r3, #0
 800851a:	d003      	beq.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800851c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008520:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8008524:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8008528:	2b00      	cmp	r3, #0
 800852a:	d101      	bne.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800852c:	2300      	movs	r3, #0
 800852e:	e000      	b.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008530:	2301      	movs	r3, #1
}
 8008532:	4618      	mov	r0, r3
 8008534:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8008538:	46bd      	mov	sp, r7
 800853a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800853e:	bf00      	nop
 8008540:	58024400 	.word	0x58024400

08008544 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b090      	sub	sp, #64	@ 0x40
 8008548:	af00      	add	r7, sp, #0
 800854a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800854e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008552:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008556:	430b      	orrs	r3, r1
 8008558:	f040 8094 	bne.w	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800855c:	4b9b      	ldr	r3, [pc, #620]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800855e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008560:	f003 0307 	and.w	r3, r3, #7
 8008564:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008568:	2b04      	cmp	r3, #4
 800856a:	f200 8087 	bhi.w	800867c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800856e:	a201      	add	r2, pc, #4	@ (adr r2, 8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008574:	08008589 	.word	0x08008589
 8008578:	080085b1 	.word	0x080085b1
 800857c:	080085d9 	.word	0x080085d9
 8008580:	08008675 	.word	0x08008675
 8008584:	08008601 	.word	0x08008601
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008588:	4b90      	ldr	r3, [pc, #576]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008590:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008594:	d108      	bne.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008596:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800859a:	4618      	mov	r0, r3
 800859c:	f000 ff62 	bl	8009464 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085a4:	f000 bc93 	b.w	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085a8:	2300      	movs	r3, #0
 80085aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085ac:	f000 bc8f 	b.w	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085b0:	4b86      	ldr	r3, [pc, #536]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085bc:	d108      	bne.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085be:	f107 0318 	add.w	r3, r7, #24
 80085c2:	4618      	mov	r0, r3
 80085c4:	f000 fca6 	bl	8008f14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085cc:	f000 bc7f 	b.w	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085d0:	2300      	movs	r3, #0
 80085d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085d4:	f000 bc7b 	b.w	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085d8:	4b7c      	ldr	r3, [pc, #496]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085e4:	d108      	bne.n	80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085e6:	f107 030c 	add.w	r3, r7, #12
 80085ea:	4618      	mov	r0, r3
 80085ec:	f000 fde6 	bl	80091bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085f4:	f000 bc6b 	b.w	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085f8:	2300      	movs	r3, #0
 80085fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085fc:	f000 bc67 	b.w	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008600:	4b72      	ldr	r3, [pc, #456]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008604:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008608:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800860a:	4b70      	ldr	r3, [pc, #448]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 0304 	and.w	r3, r3, #4
 8008612:	2b04      	cmp	r3, #4
 8008614:	d10c      	bne.n	8008630 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008618:	2b00      	cmp	r3, #0
 800861a:	d109      	bne.n	8008630 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800861c:	4b6b      	ldr	r3, [pc, #428]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	08db      	lsrs	r3, r3, #3
 8008622:	f003 0303 	and.w	r3, r3, #3
 8008626:	4a6a      	ldr	r2, [pc, #424]	@ (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008628:	fa22 f303 	lsr.w	r3, r2, r3
 800862c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800862e:	e01f      	b.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008630:	4b66      	ldr	r3, [pc, #408]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008638:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800863c:	d106      	bne.n	800864c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800863e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008640:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008644:	d102      	bne.n	800864c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008646:	4b63      	ldr	r3, [pc, #396]	@ (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008648:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800864a:	e011      	b.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800864c:	4b5f      	ldr	r3, [pc, #380]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008654:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008658:	d106      	bne.n	8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800865a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800865c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008660:	d102      	bne.n	8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008662:	4b5d      	ldr	r3, [pc, #372]	@ (80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008664:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008666:	e003      	b.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008668:	2300      	movs	r3, #0
 800866a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800866c:	f000 bc2f 	b.w	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008670:	f000 bc2d 	b.w	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008674:	4b59      	ldr	r3, [pc, #356]	@ (80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008678:	f000 bc29 	b.w	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800867c:	2300      	movs	r3, #0
 800867e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008680:	f000 bc25 	b.w	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008684:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008688:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800868c:	430b      	orrs	r3, r1
 800868e:	f040 80a7 	bne.w	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008692:	4b4e      	ldr	r3, [pc, #312]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008696:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800869a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800869c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80086a2:	d054      	beq.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80086a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80086aa:	f200 808b 	bhi.w	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80086ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80086b4:	f000 8083 	beq.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80086b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80086be:	f200 8081 	bhi.w	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80086c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80086c8:	d02f      	beq.n	800872a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80086ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80086d0:	d878      	bhi.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80086d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d004      	beq.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80086d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086de:	d012      	beq.n	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80086e0:	e070      	b.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086e2:	4b3a      	ldr	r3, [pc, #232]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086ee:	d107      	bne.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086f4:	4618      	mov	r0, r3
 80086f6:	f000 feb5 	bl	8009464 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086fe:	e3e6      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008700:	2300      	movs	r3, #0
 8008702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008704:	e3e3      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008706:	4b31      	ldr	r3, [pc, #196]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800870e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008712:	d107      	bne.n	8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008714:	f107 0318 	add.w	r3, r7, #24
 8008718:	4618      	mov	r0, r3
 800871a:	f000 fbfb 	bl	8008f14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008722:	e3d4      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008724:	2300      	movs	r3, #0
 8008726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008728:	e3d1      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800872a:	4b28      	ldr	r3, [pc, #160]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008732:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008736:	d107      	bne.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008738:	f107 030c 	add.w	r3, r7, #12
 800873c:	4618      	mov	r0, r3
 800873e:	f000 fd3d 	bl	80091bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008746:	e3c2      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008748:	2300      	movs	r3, #0
 800874a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800874c:	e3bf      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800874e:	4b1f      	ldr	r3, [pc, #124]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008752:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008756:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008758:	4b1c      	ldr	r3, [pc, #112]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 0304 	and.w	r3, r3, #4
 8008760:	2b04      	cmp	r3, #4
 8008762:	d10c      	bne.n	800877e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8008764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008766:	2b00      	cmp	r3, #0
 8008768:	d109      	bne.n	800877e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800876a:	4b18      	ldr	r3, [pc, #96]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	08db      	lsrs	r3, r3, #3
 8008770:	f003 0303 	and.w	r3, r3, #3
 8008774:	4a16      	ldr	r2, [pc, #88]	@ (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008776:	fa22 f303 	lsr.w	r3, r2, r3
 800877a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800877c:	e01e      	b.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800877e:	4b13      	ldr	r3, [pc, #76]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008786:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800878a:	d106      	bne.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800878c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800878e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008792:	d102      	bne.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008794:	4b0f      	ldr	r3, [pc, #60]	@ (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008796:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008798:	e010      	b.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800879a:	4b0c      	ldr	r3, [pc, #48]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087a6:	d106      	bne.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80087a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087ae:	d102      	bne.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80087b0:	4b09      	ldr	r3, [pc, #36]	@ (80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087b4:	e002      	b.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80087b6:	2300      	movs	r3, #0
 80087b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80087ba:	e388      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80087bc:	e387      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80087be:	4b07      	ldr	r3, [pc, #28]	@ (80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80087c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087c2:	e384      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80087c4:	2300      	movs	r3, #0
 80087c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087c8:	e381      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80087ca:	bf00      	nop
 80087cc:	58024400 	.word	0x58024400
 80087d0:	03d09000 	.word	0x03d09000
 80087d4:	003d0900 	.word	0x003d0900
 80087d8:	016e3600 	.word	0x016e3600
 80087dc:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80087e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087e4:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80087e8:	430b      	orrs	r3, r1
 80087ea:	f040 809c 	bne.w	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80087ee:	4b9e      	ldr	r3, [pc, #632]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80087f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087f2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80087f6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80087f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80087fe:	d054      	beq.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008802:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008806:	f200 808b 	bhi.w	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800880a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008810:	f000 8083 	beq.w	800891a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8008814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008816:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800881a:	f200 8081 	bhi.w	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800881e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008820:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008824:	d02f      	beq.n	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008828:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800882c:	d878      	bhi.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800882e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008830:	2b00      	cmp	r3, #0
 8008832:	d004      	beq.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008836:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800883a:	d012      	beq.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800883c:	e070      	b.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800883e:	4b8a      	ldr	r3, [pc, #552]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008846:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800884a:	d107      	bne.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800884c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008850:	4618      	mov	r0, r3
 8008852:	f000 fe07 	bl	8009464 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800885a:	e338      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800885c:	2300      	movs	r3, #0
 800885e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008860:	e335      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008862:	4b81      	ldr	r3, [pc, #516]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800886a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800886e:	d107      	bne.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008870:	f107 0318 	add.w	r3, r7, #24
 8008874:	4618      	mov	r0, r3
 8008876:	f000 fb4d 	bl	8008f14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800887e:	e326      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008880:	2300      	movs	r3, #0
 8008882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008884:	e323      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008886:	4b78      	ldr	r3, [pc, #480]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800888e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008892:	d107      	bne.n	80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008894:	f107 030c 	add.w	r3, r7, #12
 8008898:	4618      	mov	r0, r3
 800889a:	f000 fc8f 	bl	80091bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088a2:	e314      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80088a4:	2300      	movs	r3, #0
 80088a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088a8:	e311      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80088aa:	4b6f      	ldr	r3, [pc, #444]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80088ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80088b2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088b4:	4b6c      	ldr	r3, [pc, #432]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f003 0304 	and.w	r3, r3, #4
 80088bc:	2b04      	cmp	r3, #4
 80088be:	d10c      	bne.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80088c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d109      	bne.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088c6:	4b68      	ldr	r3, [pc, #416]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	08db      	lsrs	r3, r3, #3
 80088cc:	f003 0303 	and.w	r3, r3, #3
 80088d0:	4a66      	ldr	r2, [pc, #408]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80088d2:	fa22 f303 	lsr.w	r3, r2, r3
 80088d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088d8:	e01e      	b.n	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088da:	4b63      	ldr	r3, [pc, #396]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088e6:	d106      	bne.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80088e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088ee:	d102      	bne.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80088f0:	4b5f      	ldr	r3, [pc, #380]	@ (8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80088f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088f4:	e010      	b.n	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088f6:	4b5c      	ldr	r3, [pc, #368]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008902:	d106      	bne.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008906:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800890a:	d102      	bne.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800890c:	4b59      	ldr	r3, [pc, #356]	@ (8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800890e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008910:	e002      	b.n	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008912:	2300      	movs	r3, #0
 8008914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008916:	e2da      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008918:	e2d9      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800891a:	4b57      	ldr	r3, [pc, #348]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800891c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800891e:	e2d6      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008920:	2300      	movs	r3, #0
 8008922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008924:	e2d3      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008926:	e9d7 2300 	ldrd	r2, r3, [r7]
 800892a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800892e:	430b      	orrs	r3, r1
 8008930:	f040 80a7 	bne.w	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008934:	4b4c      	ldr	r3, [pc, #304]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008938:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800893c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800893e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008940:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008944:	d055      	beq.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008948:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800894c:	f200 8096 	bhi.w	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008952:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008956:	f000 8084 	beq.w	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800895a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800895c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008960:	f200 808c 	bhi.w	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008966:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800896a:	d030      	beq.n	80089ce <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800896c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800896e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008972:	f200 8083 	bhi.w	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008978:	2b00      	cmp	r3, #0
 800897a:	d004      	beq.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800897c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800897e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008982:	d012      	beq.n	80089aa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008984:	e07a      	b.n	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008986:	4b38      	ldr	r3, [pc, #224]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800898e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008992:	d107      	bne.n	80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008994:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008998:	4618      	mov	r0, r3
 800899a:	f000 fd63 	bl	8009464 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800899e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089a2:	e294      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80089a4:	2300      	movs	r3, #0
 80089a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089a8:	e291      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089aa:	4b2f      	ldr	r3, [pc, #188]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089b6:	d107      	bne.n	80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089b8:	f107 0318 	add.w	r3, r7, #24
 80089bc:	4618      	mov	r0, r3
 80089be:	f000 faa9 	bl	8008f14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089c6:	e282      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80089c8:	2300      	movs	r3, #0
 80089ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089cc:	e27f      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089ce:	4b26      	ldr	r3, [pc, #152]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089da:	d107      	bne.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089dc:	f107 030c 	add.w	r3, r7, #12
 80089e0:	4618      	mov	r0, r3
 80089e2:	f000 fbeb 	bl	80091bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089ea:	e270      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80089ec:	2300      	movs	r3, #0
 80089ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089f0:	e26d      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80089f2:	4b1d      	ldr	r3, [pc, #116]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80089fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 0304 	and.w	r3, r3, #4
 8008a04:	2b04      	cmp	r3, #4
 8008a06:	d10c      	bne.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d109      	bne.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a0e:	4b16      	ldr	r3, [pc, #88]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	08db      	lsrs	r3, r3, #3
 8008a14:	f003 0303 	and.w	r3, r3, #3
 8008a18:	4a14      	ldr	r2, [pc, #80]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a20:	e01e      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a22:	4b11      	ldr	r3, [pc, #68]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a2e:	d106      	bne.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a36:	d102      	bne.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008a38:	4b0d      	ldr	r3, [pc, #52]	@ (8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a3c:	e010      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a4a:	d106      	bne.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a52:	d102      	bne.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008a54:	4b07      	ldr	r3, [pc, #28]	@ (8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a58:	e002      	b.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008a5e:	e236      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008a60:	e235      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008a62:	4b05      	ldr	r3, [pc, #20]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a66:	e232      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008a68:	58024400 	.word	0x58024400
 8008a6c:	03d09000 	.word	0x03d09000
 8008a70:	003d0900 	.word	0x003d0900
 8008a74:	016e3600 	.word	0x016e3600
 8008a78:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a80:	e225      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008a82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a86:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008a8a:	430b      	orrs	r3, r1
 8008a8c:	f040 8085 	bne.w	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008a90:	4b9c      	ldr	r3, [pc, #624]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a94:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008a98:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008aa0:	d06b      	beq.n	8008b7a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008aa8:	d874      	bhi.n	8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008ab0:	d056      	beq.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8008ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008ab8:	d86c      	bhi.n	8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008abc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008ac0:	d03b      	beq.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008ac8:	d864      	bhi.n	8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008acc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ad0:	d021      	beq.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ad8:	d85c      	bhi.n	8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d004      	beq.n	8008aea <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8008ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ae6:	d004      	beq.n	8008af2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8008ae8:	e054      	b.n	8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008aea:	f7fe fb5f 	bl	80071ac <HAL_RCC_GetPCLK1Freq>
 8008aee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008af0:	e1ed      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008af2:	4b84      	ldr	r3, [pc, #528]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008afa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008afe:	d107      	bne.n	8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b00:	f107 0318 	add.w	r3, r7, #24
 8008b04:	4618      	mov	r0, r3
 8008b06:	f000 fa05 	bl	8008f14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b0e:	e1de      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b10:	2300      	movs	r3, #0
 8008b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b14:	e1db      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b16:	4b7b      	ldr	r3, [pc, #492]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b22:	d107      	bne.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b24:	f107 030c 	add.w	r3, r7, #12
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f000 fb47 	bl	80091bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b32:	e1cc      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b34:	2300      	movs	r3, #0
 8008b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b38:	e1c9      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b3a:	4b72      	ldr	r3, [pc, #456]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f003 0304 	and.w	r3, r3, #4
 8008b42:	2b04      	cmp	r3, #4
 8008b44:	d109      	bne.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b46:	4b6f      	ldr	r3, [pc, #444]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	08db      	lsrs	r3, r3, #3
 8008b4c:	f003 0303 	and.w	r3, r3, #3
 8008b50:	4a6d      	ldr	r2, [pc, #436]	@ (8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008b52:	fa22 f303 	lsr.w	r3, r2, r3
 8008b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b58:	e1b9      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b5e:	e1b6      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008b60:	4b68      	ldr	r3, [pc, #416]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b6c:	d102      	bne.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8008b6e:	4b67      	ldr	r3, [pc, #412]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b72:	e1ac      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b74:	2300      	movs	r3, #0
 8008b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b78:	e1a9      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008b7a:	4b62      	ldr	r3, [pc, #392]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b86:	d102      	bne.n	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8008b88:	4b61      	ldr	r3, [pc, #388]	@ (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b8c:	e19f      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b92:	e19c      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008b94:	2300      	movs	r3, #0
 8008b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b98:	e199      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008b9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b9e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008ba2:	430b      	orrs	r3, r1
 8008ba4:	d173      	bne.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008ba6:	4b57      	ldr	r3, [pc, #348]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008baa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008bae:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bb6:	d02f      	beq.n	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8008bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bbe:	d863      	bhi.n	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8008bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d004      	beq.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8008bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bcc:	d012      	beq.n	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8008bce:	e05b      	b.n	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bd0:	4b4c      	ldr	r3, [pc, #304]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bdc:	d107      	bne.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bde:	f107 0318 	add.w	r3, r7, #24
 8008be2:	4618      	mov	r0, r3
 8008be4:	f000 f996 	bl	8008f14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bec:	e16f      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bf2:	e16c      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bf4:	4b43      	ldr	r3, [pc, #268]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c00:	d107      	bne.n	8008c12 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c02:	f107 030c 	add.w	r3, r7, #12
 8008c06:	4618      	mov	r0, r3
 8008c08:	f000 fad8 	bl	80091bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c10:	e15d      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c12:	2300      	movs	r3, #0
 8008c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c16:	e15a      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c18:	4b3a      	ldr	r3, [pc, #232]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008c20:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c22:	4b38      	ldr	r3, [pc, #224]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 0304 	and.w	r3, r3, #4
 8008c2a:	2b04      	cmp	r3, #4
 8008c2c:	d10c      	bne.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d109      	bne.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c34:	4b33      	ldr	r3, [pc, #204]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	08db      	lsrs	r3, r3, #3
 8008c3a:	f003 0303 	and.w	r3, r3, #3
 8008c3e:	4a32      	ldr	r2, [pc, #200]	@ (8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008c40:	fa22 f303 	lsr.w	r3, r2, r3
 8008c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c46:	e01e      	b.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c48:	4b2e      	ldr	r3, [pc, #184]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c54:	d106      	bne.n	8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c5c:	d102      	bne.n	8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c5e:	4b2b      	ldr	r3, [pc, #172]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c62:	e010      	b.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c64:	4b27      	ldr	r3, [pc, #156]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c70:	d106      	bne.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c78:	d102      	bne.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c7a:	4b25      	ldr	r3, [pc, #148]	@ (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c7e:	e002      	b.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c80:	2300      	movs	r3, #0
 8008c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008c84:	e123      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008c86:	e122      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c8c:	e11f      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008c8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c92:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008c96:	430b      	orrs	r3, r1
 8008c98:	d13c      	bne.n	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ca2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d004      	beq.n	8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cb0:	d012      	beq.n	8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8008cb2:	e023      	b.n	8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cb4:	4b13      	ldr	r3, [pc, #76]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008cc0:	d107      	bne.n	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f000 fbcc 	bl	8009464 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cd0:	e0fd      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cd6:	e0fa      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ce0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ce4:	d107      	bne.n	8008cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ce6:	f107 0318 	add.w	r3, r7, #24
 8008cea:	4618      	mov	r0, r3
 8008cec:	f000 f912 	bl	8008f14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008cf0:	6a3b      	ldr	r3, [r7, #32]
 8008cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cf4:	e0eb      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cfa:	e0e8      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d00:	e0e5      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008d02:	bf00      	nop
 8008d04:	58024400 	.word	0x58024400
 8008d08:	03d09000 	.word	0x03d09000
 8008d0c:	003d0900 	.word	0x003d0900
 8008d10:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008d14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d18:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008d1c:	430b      	orrs	r3, r1
 8008d1e:	f040 8085 	bne.w	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008d22:	4b6d      	ldr	r3, [pc, #436]	@ (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d26:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008d2a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d32:	d06b      	beq.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d3a:	d874      	bhi.n	8008e26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d42:	d056      	beq.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d4a:	d86c      	bhi.n	8008e26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d52:	d03b      	beq.n	8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8008d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d5a:	d864      	bhi.n	8008e26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d62:	d021      	beq.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8008d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d6a:	d85c      	bhi.n	8008e26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d004      	beq.n	8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8008d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d78:	d004      	beq.n	8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008d7a:	e054      	b.n	8008e26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008d7c:	f000 f8b4 	bl	8008ee8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008d80:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d82:	e0a4      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d84:	4b54      	ldr	r3, [pc, #336]	@ (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d90:	d107      	bne.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d92:	f107 0318 	add.w	r3, r7, #24
 8008d96:	4618      	mov	r0, r3
 8008d98:	f000 f8bc 	bl	8008f14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008da0:	e095      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008da2:	2300      	movs	r3, #0
 8008da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008da6:	e092      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008da8:	4b4b      	ldr	r3, [pc, #300]	@ (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008db0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008db4:	d107      	bne.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008db6:	f107 030c 	add.w	r3, r7, #12
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f000 f9fe 	bl	80091bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dc4:	e083      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dca:	e080      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008dcc:	4b42      	ldr	r3, [pc, #264]	@ (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 0304 	and.w	r3, r3, #4
 8008dd4:	2b04      	cmp	r3, #4
 8008dd6:	d109      	bne.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008dd8:	4b3f      	ldr	r3, [pc, #252]	@ (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	08db      	lsrs	r3, r3, #3
 8008dde:	f003 0303 	and.w	r3, r3, #3
 8008de2:	4a3e      	ldr	r2, [pc, #248]	@ (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008de4:	fa22 f303 	lsr.w	r3, r2, r3
 8008de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dea:	e070      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008dec:	2300      	movs	r3, #0
 8008dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008df0:	e06d      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008df2:	4b39      	ldr	r3, [pc, #228]	@ (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dfe:	d102      	bne.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008e00:	4b37      	ldr	r3, [pc, #220]	@ (8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e04:	e063      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e06:	2300      	movs	r3, #0
 8008e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e0a:	e060      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008e0c:	4b32      	ldr	r3, [pc, #200]	@ (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e18:	d102      	bne.n	8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8008e1a:	4b32      	ldr	r3, [pc, #200]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e1e:	e056      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e20:	2300      	movs	r3, #0
 8008e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e24:	e053      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008e26:	2300      	movs	r3, #0
 8008e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e2a:	e050      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008e2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e30:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008e34:	430b      	orrs	r3, r1
 8008e36:	d148      	bne.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008e38:	4b27      	ldr	r3, [pc, #156]	@ (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008e40:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e48:	d02a      	beq.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e50:	d838      	bhi.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d004      	beq.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e5e:	d00d      	beq.n	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008e60:	e030      	b.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008e62:	4b1d      	ldr	r3, [pc, #116]	@ (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e6e:	d102      	bne.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8008e70:	4b1c      	ldr	r3, [pc, #112]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e74:	e02b      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e76:	2300      	movs	r3, #0
 8008e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e7a:	e028      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e7c:	4b16      	ldr	r3, [pc, #88]	@ (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e88:	d107      	bne.n	8008e9a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f000 fae8 	bl	8009464 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e98:	e019      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e9e:	e016      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ea8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008eac:	d107      	bne.n	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eae:	f107 0318 	add.w	r3, r7, #24
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f000 f82e 	bl	8008f14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ebc:	e007      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ec2:	e004      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ec8:	e001      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3740      	adds	r7, #64	@ 0x40
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	58024400 	.word	0x58024400
 8008edc:	03d09000 	.word	0x03d09000
 8008ee0:	003d0900 	.word	0x003d0900
 8008ee4:	016e3600 	.word	0x016e3600

08008ee8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008eec:	f7fe f92e 	bl	800714c <HAL_RCC_GetHCLKFreq>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	4b06      	ldr	r3, [pc, #24]	@ (8008f0c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008ef4:	6a1b      	ldr	r3, [r3, #32]
 8008ef6:	091b      	lsrs	r3, r3, #4
 8008ef8:	f003 0307 	and.w	r3, r3, #7
 8008efc:	4904      	ldr	r1, [pc, #16]	@ (8008f10 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008efe:	5ccb      	ldrb	r3, [r1, r3]
 8008f00:	f003 031f 	and.w	r3, r3, #31
 8008f04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	58024400 	.word	0x58024400
 8008f10:	0800bb94 	.word	0x0800bb94

08008f14 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b089      	sub	sp, #36	@ 0x24
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f1c:	4ba1      	ldr	r3, [pc, #644]	@ (80091a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f20:	f003 0303 	and.w	r3, r3, #3
 8008f24:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008f26:	4b9f      	ldr	r3, [pc, #636]	@ (80091a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f2a:	0b1b      	lsrs	r3, r3, #12
 8008f2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f30:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008f32:	4b9c      	ldr	r3, [pc, #624]	@ (80091a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f36:	091b      	lsrs	r3, r3, #4
 8008f38:	f003 0301 	and.w	r3, r3, #1
 8008f3c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008f3e:	4b99      	ldr	r3, [pc, #612]	@ (80091a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f42:	08db      	lsrs	r3, r3, #3
 8008f44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f48:	693a      	ldr	r2, [r7, #16]
 8008f4a:	fb02 f303 	mul.w	r3, r2, r3
 8008f4e:	ee07 3a90 	vmov	s15, r3
 8008f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f000 8111 	beq.w	8009184 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	f000 8083 	beq.w	8009070 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	f200 80a1 	bhi.w	80090b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d003      	beq.n	8008f80 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d056      	beq.n	800902c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008f7e:	e099      	b.n	80090b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f80:	4b88      	ldr	r3, [pc, #544]	@ (80091a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 0320 	and.w	r3, r3, #32
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d02d      	beq.n	8008fe8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f8c:	4b85      	ldr	r3, [pc, #532]	@ (80091a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	08db      	lsrs	r3, r3, #3
 8008f92:	f003 0303 	and.w	r3, r3, #3
 8008f96:	4a84      	ldr	r2, [pc, #528]	@ (80091a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008f98:	fa22 f303 	lsr.w	r3, r2, r3
 8008f9c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	ee07 3a90 	vmov	s15, r3
 8008fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	ee07 3a90 	vmov	s15, r3
 8008fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fb6:	4b7b      	ldr	r3, [pc, #492]	@ (80091a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fbe:	ee07 3a90 	vmov	s15, r3
 8008fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80091ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fe2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008fe6:	e087      	b.n	80090f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	ee07 3a90 	vmov	s15, r3
 8008fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ff2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80091b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ffa:	4b6a      	ldr	r3, [pc, #424]	@ (80091a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009002:	ee07 3a90 	vmov	s15, r3
 8009006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800900a:	ed97 6a03 	vldr	s12, [r7, #12]
 800900e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80091ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800901a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800901e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009026:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800902a:	e065      	b.n	80090f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	ee07 3a90 	vmov	s15, r3
 8009032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009036:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80091b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800903a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800903e:	4b59      	ldr	r3, [pc, #356]	@ (80091a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009046:	ee07 3a90 	vmov	s15, r3
 800904a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800904e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009052:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80091ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800905a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800905e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800906a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800906e:	e043      	b.n	80090f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	ee07 3a90 	vmov	s15, r3
 8009076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800907a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80091b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800907e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009082:	4b48      	ldr	r3, [pc, #288]	@ (80091a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800908a:	ee07 3a90 	vmov	s15, r3
 800908e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009092:	ed97 6a03 	vldr	s12, [r7, #12]
 8009096:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80091ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800909a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800909e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090b2:	e021      	b.n	80090f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	ee07 3a90 	vmov	s15, r3
 80090ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80091b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80090c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090c6:	4b37      	ldr	r3, [pc, #220]	@ (80091a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ce:	ee07 3a90 	vmov	s15, r3
 80090d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80090da:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80091ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80090de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80090f8:	4b2a      	ldr	r3, [pc, #168]	@ (80091a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090fc:	0a5b      	lsrs	r3, r3, #9
 80090fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009102:	ee07 3a90 	vmov	s15, r3
 8009106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800910a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800910e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009112:	edd7 6a07 	vldr	s13, [r7, #28]
 8009116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800911a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800911e:	ee17 2a90 	vmov	r2, s15
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009126:	4b1f      	ldr	r3, [pc, #124]	@ (80091a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800912a:	0c1b      	lsrs	r3, r3, #16
 800912c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009130:	ee07 3a90 	vmov	s15, r3
 8009134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009138:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800913c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009140:	edd7 6a07 	vldr	s13, [r7, #28]
 8009144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800914c:	ee17 2a90 	vmov	r2, s15
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009154:	4b13      	ldr	r3, [pc, #76]	@ (80091a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009158:	0e1b      	lsrs	r3, r3, #24
 800915a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800915e:	ee07 3a90 	vmov	s15, r3
 8009162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009166:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800916a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800916e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009172:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800917a:	ee17 2a90 	vmov	r2, s15
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009182:	e008      	b.n	8009196 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	609a      	str	r2, [r3, #8]
}
 8009196:	bf00      	nop
 8009198:	3724      	adds	r7, #36	@ 0x24
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop
 80091a4:	58024400 	.word	0x58024400
 80091a8:	03d09000 	.word	0x03d09000
 80091ac:	46000000 	.word	0x46000000
 80091b0:	4c742400 	.word	0x4c742400
 80091b4:	4a742400 	.word	0x4a742400
 80091b8:	4bb71b00 	.word	0x4bb71b00

080091bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80091bc:	b480      	push	{r7}
 80091be:	b089      	sub	sp, #36	@ 0x24
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80091c4:	4ba1      	ldr	r3, [pc, #644]	@ (800944c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091c8:	f003 0303 	and.w	r3, r3, #3
 80091cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80091ce:	4b9f      	ldr	r3, [pc, #636]	@ (800944c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091d2:	0d1b      	lsrs	r3, r3, #20
 80091d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80091d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80091da:	4b9c      	ldr	r3, [pc, #624]	@ (800944c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091de:	0a1b      	lsrs	r3, r3, #8
 80091e0:	f003 0301 	and.w	r3, r3, #1
 80091e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80091e6:	4b99      	ldr	r3, [pc, #612]	@ (800944c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091ea:	08db      	lsrs	r3, r3, #3
 80091ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80091f0:	693a      	ldr	r2, [r7, #16]
 80091f2:	fb02 f303 	mul.w	r3, r2, r3
 80091f6:	ee07 3a90 	vmov	s15, r3
 80091fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	2b00      	cmp	r3, #0
 8009206:	f000 8111 	beq.w	800942c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800920a:	69bb      	ldr	r3, [r7, #24]
 800920c:	2b02      	cmp	r3, #2
 800920e:	f000 8083 	beq.w	8009318 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	2b02      	cmp	r3, #2
 8009216:	f200 80a1 	bhi.w	800935c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d003      	beq.n	8009228 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	2b01      	cmp	r3, #1
 8009224:	d056      	beq.n	80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009226:	e099      	b.n	800935c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009228:	4b88      	ldr	r3, [pc, #544]	@ (800944c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f003 0320 	and.w	r3, r3, #32
 8009230:	2b00      	cmp	r3, #0
 8009232:	d02d      	beq.n	8009290 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009234:	4b85      	ldr	r3, [pc, #532]	@ (800944c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	08db      	lsrs	r3, r3, #3
 800923a:	f003 0303 	and.w	r3, r3, #3
 800923e:	4a84      	ldr	r2, [pc, #528]	@ (8009450 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009240:	fa22 f303 	lsr.w	r3, r2, r3
 8009244:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	ee07 3a90 	vmov	s15, r3
 800924c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	ee07 3a90 	vmov	s15, r3
 8009256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800925a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800925e:	4b7b      	ldr	r3, [pc, #492]	@ (800944c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009266:	ee07 3a90 	vmov	s15, r3
 800926a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800926e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009272:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009454 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800927a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800927e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800928a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800928e:	e087      	b.n	80093a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	ee07 3a90 	vmov	s15, r3
 8009296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800929a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009458 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800929e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092a2:	4b6a      	ldr	r3, [pc, #424]	@ (800944c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092aa:	ee07 3a90 	vmov	s15, r3
 80092ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80092b6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009454 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80092ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092d2:	e065      	b.n	80093a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	ee07 3a90 	vmov	s15, r3
 80092da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092de:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800945c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80092e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092e6:	4b59      	ldr	r3, [pc, #356]	@ (800944c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092ee:	ee07 3a90 	vmov	s15, r3
 80092f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80092fa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009454 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80092fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009306:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800930a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800930e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009312:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009316:	e043      	b.n	80093a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	ee07 3a90 	vmov	s15, r3
 800931e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009322:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009460 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800932a:	4b48      	ldr	r3, [pc, #288]	@ (800944c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800932c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800932e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009332:	ee07 3a90 	vmov	s15, r3
 8009336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800933a:	ed97 6a03 	vldr	s12, [r7, #12]
 800933e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009454 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800934a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800934e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009356:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800935a:	e021      	b.n	80093a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	ee07 3a90 	vmov	s15, r3
 8009362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009366:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800945c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800936a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800936e:	4b37      	ldr	r3, [pc, #220]	@ (800944c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009376:	ee07 3a90 	vmov	s15, r3
 800937a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800937e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009382:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009454 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800938a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800938e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800939a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800939e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80093a0:	4b2a      	ldr	r3, [pc, #168]	@ (800944c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093a4:	0a5b      	lsrs	r3, r3, #9
 80093a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093aa:	ee07 3a90 	vmov	s15, r3
 80093ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80093be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093c6:	ee17 2a90 	vmov	r2, s15
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80093ce:	4b1f      	ldr	r3, [pc, #124]	@ (800944c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093d2:	0c1b      	lsrs	r3, r3, #16
 80093d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093d8:	ee07 3a90 	vmov	s15, r3
 80093dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80093ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093f4:	ee17 2a90 	vmov	r2, s15
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80093fc:	4b13      	ldr	r3, [pc, #76]	@ (800944c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009400:	0e1b      	lsrs	r3, r3, #24
 8009402:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009406:	ee07 3a90 	vmov	s15, r3
 800940a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800940e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009412:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009416:	edd7 6a07 	vldr	s13, [r7, #28]
 800941a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800941e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009422:	ee17 2a90 	vmov	r2, s15
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800942a:	e008      	b.n	800943e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	609a      	str	r2, [r3, #8]
}
 800943e:	bf00      	nop
 8009440:	3724      	adds	r7, #36	@ 0x24
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	58024400 	.word	0x58024400
 8009450:	03d09000 	.word	0x03d09000
 8009454:	46000000 	.word	0x46000000
 8009458:	4c742400 	.word	0x4c742400
 800945c:	4a742400 	.word	0x4a742400
 8009460:	4bb71b00 	.word	0x4bb71b00

08009464 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009464:	b480      	push	{r7}
 8009466:	b089      	sub	sp, #36	@ 0x24
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800946c:	4ba0      	ldr	r3, [pc, #640]	@ (80096f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800946e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009470:	f003 0303 	and.w	r3, r3, #3
 8009474:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009476:	4b9e      	ldr	r3, [pc, #632]	@ (80096f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800947a:	091b      	lsrs	r3, r3, #4
 800947c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009480:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009482:	4b9b      	ldr	r3, [pc, #620]	@ (80096f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009486:	f003 0301 	and.w	r3, r3, #1
 800948a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800948c:	4b98      	ldr	r3, [pc, #608]	@ (80096f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800948e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009490:	08db      	lsrs	r3, r3, #3
 8009492:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009496:	693a      	ldr	r2, [r7, #16]
 8009498:	fb02 f303 	mul.w	r3, r2, r3
 800949c:	ee07 3a90 	vmov	s15, r3
 80094a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	f000 8111 	beq.w	80096d2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	f000 8083 	beq.w	80095be <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	f200 80a1 	bhi.w	8009602 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d003      	beq.n	80094ce <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d056      	beq.n	800957a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80094cc:	e099      	b.n	8009602 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094ce:	4b88      	ldr	r3, [pc, #544]	@ (80096f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 0320 	and.w	r3, r3, #32
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d02d      	beq.n	8009536 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094da:	4b85      	ldr	r3, [pc, #532]	@ (80096f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	08db      	lsrs	r3, r3, #3
 80094e0:	f003 0303 	and.w	r3, r3, #3
 80094e4:	4a83      	ldr	r2, [pc, #524]	@ (80096f4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80094e6:	fa22 f303 	lsr.w	r3, r2, r3
 80094ea:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	ee07 3a90 	vmov	s15, r3
 80094f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	ee07 3a90 	vmov	s15, r3
 80094fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009500:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009504:	4b7a      	ldr	r3, [pc, #488]	@ (80096f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800950c:	ee07 3a90 	vmov	s15, r3
 8009510:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009514:	ed97 6a03 	vldr	s12, [r7, #12]
 8009518:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80096f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800951c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009520:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009524:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009528:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800952c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009530:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009534:	e087      	b.n	8009646 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	ee07 3a90 	vmov	s15, r3
 800953c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009540:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80096fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009544:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009548:	4b69      	ldr	r3, [pc, #420]	@ (80096f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800954a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800954c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009550:	ee07 3a90 	vmov	s15, r3
 8009554:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009558:	ed97 6a03 	vldr	s12, [r7, #12]
 800955c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80096f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009560:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009564:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009568:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800956c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009574:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009578:	e065      	b.n	8009646 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	ee07 3a90 	vmov	s15, r3
 8009580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009584:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009700 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009588:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800958c:	4b58      	ldr	r3, [pc, #352]	@ (80096f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800958e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009594:	ee07 3a90 	vmov	s15, r3
 8009598:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800959c:	ed97 6a03 	vldr	s12, [r7, #12]
 80095a0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80096f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80095a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095bc:	e043      	b.n	8009646 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	ee07 3a90 	vmov	s15, r3
 80095c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095c8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009704 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80095cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095d0:	4b47      	ldr	r3, [pc, #284]	@ (80096f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095d8:	ee07 3a90 	vmov	s15, r3
 80095dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80095e4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80096f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80095e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009600:	e021      	b.n	8009646 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	ee07 3a90 	vmov	s15, r3
 8009608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800960c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80096fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009610:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009614:	4b36      	ldr	r3, [pc, #216]	@ (80096f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800961c:	ee07 3a90 	vmov	s15, r3
 8009620:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009624:	ed97 6a03 	vldr	s12, [r7, #12]
 8009628:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80096f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800962c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009630:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009634:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009638:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800963c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009640:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009644:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009646:	4b2a      	ldr	r3, [pc, #168]	@ (80096f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800964a:	0a5b      	lsrs	r3, r3, #9
 800964c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009650:	ee07 3a90 	vmov	s15, r3
 8009654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009658:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800965c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009660:	edd7 6a07 	vldr	s13, [r7, #28]
 8009664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800966c:	ee17 2a90 	vmov	r2, s15
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009674:	4b1e      	ldr	r3, [pc, #120]	@ (80096f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009678:	0c1b      	lsrs	r3, r3, #16
 800967a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800967e:	ee07 3a90 	vmov	s15, r3
 8009682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009686:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800968a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800968e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800969a:	ee17 2a90 	vmov	r2, s15
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80096a2:	4b13      	ldr	r3, [pc, #76]	@ (80096f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096a6:	0e1b      	lsrs	r3, r3, #24
 80096a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096ac:	ee07 3a90 	vmov	s15, r3
 80096b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80096b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80096c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096c8:	ee17 2a90 	vmov	r2, s15
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80096d0:	e008      	b.n	80096e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2200      	movs	r2, #0
 80096e2:	609a      	str	r2, [r3, #8]
}
 80096e4:	bf00      	nop
 80096e6:	3724      	adds	r7, #36	@ 0x24
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr
 80096f0:	58024400 	.word	0x58024400
 80096f4:	03d09000 	.word	0x03d09000
 80096f8:	46000000 	.word	0x46000000
 80096fc:	4c742400 	.word	0x4c742400
 8009700:	4a742400 	.word	0x4a742400
 8009704:	4bb71b00 	.word	0x4bb71b00

08009708 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009712:	2300      	movs	r3, #0
 8009714:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009716:	4b53      	ldr	r3, [pc, #332]	@ (8009864 <RCCEx_PLL2_Config+0x15c>)
 8009718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800971a:	f003 0303 	and.w	r3, r3, #3
 800971e:	2b03      	cmp	r3, #3
 8009720:	d101      	bne.n	8009726 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009722:	2301      	movs	r3, #1
 8009724:	e099      	b.n	800985a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009726:	4b4f      	ldr	r3, [pc, #316]	@ (8009864 <RCCEx_PLL2_Config+0x15c>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a4e      	ldr	r2, [pc, #312]	@ (8009864 <RCCEx_PLL2_Config+0x15c>)
 800972c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009730:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009732:	f7f9 f943 	bl	80029bc <HAL_GetTick>
 8009736:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009738:	e008      	b.n	800974c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800973a:	f7f9 f93f 	bl	80029bc <HAL_GetTick>
 800973e:	4602      	mov	r2, r0
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	1ad3      	subs	r3, r2, r3
 8009744:	2b02      	cmp	r3, #2
 8009746:	d901      	bls.n	800974c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009748:	2303      	movs	r3, #3
 800974a:	e086      	b.n	800985a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800974c:	4b45      	ldr	r3, [pc, #276]	@ (8009864 <RCCEx_PLL2_Config+0x15c>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009754:	2b00      	cmp	r3, #0
 8009756:	d1f0      	bne.n	800973a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009758:	4b42      	ldr	r3, [pc, #264]	@ (8009864 <RCCEx_PLL2_Config+0x15c>)
 800975a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800975c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	031b      	lsls	r3, r3, #12
 8009766:	493f      	ldr	r1, [pc, #252]	@ (8009864 <RCCEx_PLL2_Config+0x15c>)
 8009768:	4313      	orrs	r3, r2
 800976a:	628b      	str	r3, [r1, #40]	@ 0x28
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	3b01      	subs	r3, #1
 8009772:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	3b01      	subs	r3, #1
 800977c:	025b      	lsls	r3, r3, #9
 800977e:	b29b      	uxth	r3, r3
 8009780:	431a      	orrs	r2, r3
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	3b01      	subs	r3, #1
 8009788:	041b      	lsls	r3, r3, #16
 800978a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800978e:	431a      	orrs	r2, r3
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	691b      	ldr	r3, [r3, #16]
 8009794:	3b01      	subs	r3, #1
 8009796:	061b      	lsls	r3, r3, #24
 8009798:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800979c:	4931      	ldr	r1, [pc, #196]	@ (8009864 <RCCEx_PLL2_Config+0x15c>)
 800979e:	4313      	orrs	r3, r2
 80097a0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80097a2:	4b30      	ldr	r3, [pc, #192]	@ (8009864 <RCCEx_PLL2_Config+0x15c>)
 80097a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	492d      	ldr	r1, [pc, #180]	@ (8009864 <RCCEx_PLL2_Config+0x15c>)
 80097b0:	4313      	orrs	r3, r2
 80097b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80097b4:	4b2b      	ldr	r3, [pc, #172]	@ (8009864 <RCCEx_PLL2_Config+0x15c>)
 80097b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b8:	f023 0220 	bic.w	r2, r3, #32
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	699b      	ldr	r3, [r3, #24]
 80097c0:	4928      	ldr	r1, [pc, #160]	@ (8009864 <RCCEx_PLL2_Config+0x15c>)
 80097c2:	4313      	orrs	r3, r2
 80097c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80097c6:	4b27      	ldr	r3, [pc, #156]	@ (8009864 <RCCEx_PLL2_Config+0x15c>)
 80097c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ca:	4a26      	ldr	r2, [pc, #152]	@ (8009864 <RCCEx_PLL2_Config+0x15c>)
 80097cc:	f023 0310 	bic.w	r3, r3, #16
 80097d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80097d2:	4b24      	ldr	r3, [pc, #144]	@ (8009864 <RCCEx_PLL2_Config+0x15c>)
 80097d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097d6:	4b24      	ldr	r3, [pc, #144]	@ (8009868 <RCCEx_PLL2_Config+0x160>)
 80097d8:	4013      	ands	r3, r2
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	69d2      	ldr	r2, [r2, #28]
 80097de:	00d2      	lsls	r2, r2, #3
 80097e0:	4920      	ldr	r1, [pc, #128]	@ (8009864 <RCCEx_PLL2_Config+0x15c>)
 80097e2:	4313      	orrs	r3, r2
 80097e4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80097e6:	4b1f      	ldr	r3, [pc, #124]	@ (8009864 <RCCEx_PLL2_Config+0x15c>)
 80097e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ea:	4a1e      	ldr	r2, [pc, #120]	@ (8009864 <RCCEx_PLL2_Config+0x15c>)
 80097ec:	f043 0310 	orr.w	r3, r3, #16
 80097f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d106      	bne.n	8009806 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80097f8:	4b1a      	ldr	r3, [pc, #104]	@ (8009864 <RCCEx_PLL2_Config+0x15c>)
 80097fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097fc:	4a19      	ldr	r2, [pc, #100]	@ (8009864 <RCCEx_PLL2_Config+0x15c>)
 80097fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009802:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009804:	e00f      	b.n	8009826 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	2b01      	cmp	r3, #1
 800980a:	d106      	bne.n	800981a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800980c:	4b15      	ldr	r3, [pc, #84]	@ (8009864 <RCCEx_PLL2_Config+0x15c>)
 800980e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009810:	4a14      	ldr	r2, [pc, #80]	@ (8009864 <RCCEx_PLL2_Config+0x15c>)
 8009812:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009816:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009818:	e005      	b.n	8009826 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800981a:	4b12      	ldr	r3, [pc, #72]	@ (8009864 <RCCEx_PLL2_Config+0x15c>)
 800981c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800981e:	4a11      	ldr	r2, [pc, #68]	@ (8009864 <RCCEx_PLL2_Config+0x15c>)
 8009820:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009824:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009826:	4b0f      	ldr	r3, [pc, #60]	@ (8009864 <RCCEx_PLL2_Config+0x15c>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a0e      	ldr	r2, [pc, #56]	@ (8009864 <RCCEx_PLL2_Config+0x15c>)
 800982c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009830:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009832:	f7f9 f8c3 	bl	80029bc <HAL_GetTick>
 8009836:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009838:	e008      	b.n	800984c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800983a:	f7f9 f8bf 	bl	80029bc <HAL_GetTick>
 800983e:	4602      	mov	r2, r0
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	1ad3      	subs	r3, r2, r3
 8009844:	2b02      	cmp	r3, #2
 8009846:	d901      	bls.n	800984c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009848:	2303      	movs	r3, #3
 800984a:	e006      	b.n	800985a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800984c:	4b05      	ldr	r3, [pc, #20]	@ (8009864 <RCCEx_PLL2_Config+0x15c>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009854:	2b00      	cmp	r3, #0
 8009856:	d0f0      	beq.n	800983a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009858:	7bfb      	ldrb	r3, [r7, #15]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	58024400 	.word	0x58024400
 8009868:	ffff0007 	.word	0xffff0007

0800986c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009876:	2300      	movs	r3, #0
 8009878:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800987a:	4b53      	ldr	r3, [pc, #332]	@ (80099c8 <RCCEx_PLL3_Config+0x15c>)
 800987c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800987e:	f003 0303 	and.w	r3, r3, #3
 8009882:	2b03      	cmp	r3, #3
 8009884:	d101      	bne.n	800988a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	e099      	b.n	80099be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800988a:	4b4f      	ldr	r3, [pc, #316]	@ (80099c8 <RCCEx_PLL3_Config+0x15c>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a4e      	ldr	r2, [pc, #312]	@ (80099c8 <RCCEx_PLL3_Config+0x15c>)
 8009890:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009894:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009896:	f7f9 f891 	bl	80029bc <HAL_GetTick>
 800989a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800989c:	e008      	b.n	80098b0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800989e:	f7f9 f88d 	bl	80029bc <HAL_GetTick>
 80098a2:	4602      	mov	r2, r0
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	1ad3      	subs	r3, r2, r3
 80098a8:	2b02      	cmp	r3, #2
 80098aa:	d901      	bls.n	80098b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80098ac:	2303      	movs	r3, #3
 80098ae:	e086      	b.n	80099be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80098b0:	4b45      	ldr	r3, [pc, #276]	@ (80099c8 <RCCEx_PLL3_Config+0x15c>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1f0      	bne.n	800989e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80098bc:	4b42      	ldr	r3, [pc, #264]	@ (80099c8 <RCCEx_PLL3_Config+0x15c>)
 80098be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098c0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	051b      	lsls	r3, r3, #20
 80098ca:	493f      	ldr	r1, [pc, #252]	@ (80099c8 <RCCEx_PLL3_Config+0x15c>)
 80098cc:	4313      	orrs	r3, r2
 80098ce:	628b      	str	r3, [r1, #40]	@ 0x28
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	3b01      	subs	r3, #1
 80098d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	3b01      	subs	r3, #1
 80098e0:	025b      	lsls	r3, r3, #9
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	431a      	orrs	r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	3b01      	subs	r3, #1
 80098ec:	041b      	lsls	r3, r3, #16
 80098ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80098f2:	431a      	orrs	r2, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	3b01      	subs	r3, #1
 80098fa:	061b      	lsls	r3, r3, #24
 80098fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009900:	4931      	ldr	r1, [pc, #196]	@ (80099c8 <RCCEx_PLL3_Config+0x15c>)
 8009902:	4313      	orrs	r3, r2
 8009904:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009906:	4b30      	ldr	r3, [pc, #192]	@ (80099c8 <RCCEx_PLL3_Config+0x15c>)
 8009908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800990a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	695b      	ldr	r3, [r3, #20]
 8009912:	492d      	ldr	r1, [pc, #180]	@ (80099c8 <RCCEx_PLL3_Config+0x15c>)
 8009914:	4313      	orrs	r3, r2
 8009916:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009918:	4b2b      	ldr	r3, [pc, #172]	@ (80099c8 <RCCEx_PLL3_Config+0x15c>)
 800991a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800991c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	699b      	ldr	r3, [r3, #24]
 8009924:	4928      	ldr	r1, [pc, #160]	@ (80099c8 <RCCEx_PLL3_Config+0x15c>)
 8009926:	4313      	orrs	r3, r2
 8009928:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800992a:	4b27      	ldr	r3, [pc, #156]	@ (80099c8 <RCCEx_PLL3_Config+0x15c>)
 800992c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800992e:	4a26      	ldr	r2, [pc, #152]	@ (80099c8 <RCCEx_PLL3_Config+0x15c>)
 8009930:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009934:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009936:	4b24      	ldr	r3, [pc, #144]	@ (80099c8 <RCCEx_PLL3_Config+0x15c>)
 8009938:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800993a:	4b24      	ldr	r3, [pc, #144]	@ (80099cc <RCCEx_PLL3_Config+0x160>)
 800993c:	4013      	ands	r3, r2
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	69d2      	ldr	r2, [r2, #28]
 8009942:	00d2      	lsls	r2, r2, #3
 8009944:	4920      	ldr	r1, [pc, #128]	@ (80099c8 <RCCEx_PLL3_Config+0x15c>)
 8009946:	4313      	orrs	r3, r2
 8009948:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800994a:	4b1f      	ldr	r3, [pc, #124]	@ (80099c8 <RCCEx_PLL3_Config+0x15c>)
 800994c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800994e:	4a1e      	ldr	r2, [pc, #120]	@ (80099c8 <RCCEx_PLL3_Config+0x15c>)
 8009950:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009954:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d106      	bne.n	800996a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800995c:	4b1a      	ldr	r3, [pc, #104]	@ (80099c8 <RCCEx_PLL3_Config+0x15c>)
 800995e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009960:	4a19      	ldr	r2, [pc, #100]	@ (80099c8 <RCCEx_PLL3_Config+0x15c>)
 8009962:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009966:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009968:	e00f      	b.n	800998a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	2b01      	cmp	r3, #1
 800996e:	d106      	bne.n	800997e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009970:	4b15      	ldr	r3, [pc, #84]	@ (80099c8 <RCCEx_PLL3_Config+0x15c>)
 8009972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009974:	4a14      	ldr	r2, [pc, #80]	@ (80099c8 <RCCEx_PLL3_Config+0x15c>)
 8009976:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800997a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800997c:	e005      	b.n	800998a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800997e:	4b12      	ldr	r3, [pc, #72]	@ (80099c8 <RCCEx_PLL3_Config+0x15c>)
 8009980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009982:	4a11      	ldr	r2, [pc, #68]	@ (80099c8 <RCCEx_PLL3_Config+0x15c>)
 8009984:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009988:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800998a:	4b0f      	ldr	r3, [pc, #60]	@ (80099c8 <RCCEx_PLL3_Config+0x15c>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a0e      	ldr	r2, [pc, #56]	@ (80099c8 <RCCEx_PLL3_Config+0x15c>)
 8009990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009994:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009996:	f7f9 f811 	bl	80029bc <HAL_GetTick>
 800999a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800999c:	e008      	b.n	80099b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800999e:	f7f9 f80d 	bl	80029bc <HAL_GetTick>
 80099a2:	4602      	mov	r2, r0
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	1ad3      	subs	r3, r2, r3
 80099a8:	2b02      	cmp	r3, #2
 80099aa:	d901      	bls.n	80099b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80099ac:	2303      	movs	r3, #3
 80099ae:	e006      	b.n	80099be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80099b0:	4b05      	ldr	r3, [pc, #20]	@ (80099c8 <RCCEx_PLL3_Config+0x15c>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d0f0      	beq.n	800999e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80099bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3710      	adds	r7, #16
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	58024400 	.word	0x58024400
 80099cc:	ffff0007 	.word	0xffff0007

080099d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d101      	bne.n	80099e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	e042      	b.n	8009a68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d106      	bne.n	80099fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f7f8 fde1 	bl	80025bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2224      	movs	r2, #36	@ 0x24
 80099fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f022 0201 	bic.w	r2, r2, #1
 8009a10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d002      	beq.n	8009a20 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 ff38 	bl	800a890 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 f8c9 	bl	8009bb8 <UART_SetConfig>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d101      	bne.n	8009a30 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e01b      	b.n	8009a68 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	685a      	ldr	r2, [r3, #4]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009a3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	689a      	ldr	r2, [r3, #8]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009a4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f042 0201 	orr.w	r2, r2, #1
 8009a5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 ffb7 	bl	800a9d4 <UART_CheckIdleState>
 8009a66:	4603      	mov	r3, r0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3708      	adds	r7, #8
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b08a      	sub	sp, #40	@ 0x28
 8009a74:	af02      	add	r7, sp, #8
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	603b      	str	r3, [r7, #0]
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a86:	2b20      	cmp	r3, #32
 8009a88:	d17b      	bne.n	8009b82 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d002      	beq.n	8009a96 <HAL_UART_Transmit+0x26>
 8009a90:	88fb      	ldrh	r3, [r7, #6]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d101      	bne.n	8009a9a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e074      	b.n	8009b84 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2221      	movs	r2, #33	@ 0x21
 8009aa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009aaa:	f7f8 ff87 	bl	80029bc <HAL_GetTick>
 8009aae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	88fa      	ldrh	r2, [r7, #6]
 8009ab4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	88fa      	ldrh	r2, [r7, #6]
 8009abc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ac8:	d108      	bne.n	8009adc <HAL_UART_Transmit+0x6c>
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	691b      	ldr	r3, [r3, #16]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d104      	bne.n	8009adc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	61bb      	str	r3, [r7, #24]
 8009ada:	e003      	b.n	8009ae4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009ae4:	e030      	b.n	8009b48 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	9300      	str	r3, [sp, #0]
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	2200      	movs	r2, #0
 8009aee:	2180      	movs	r1, #128	@ 0x80
 8009af0:	68f8      	ldr	r0, [r7, #12]
 8009af2:	f001 f819 	bl	800ab28 <UART_WaitOnFlagUntilTimeout>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d005      	beq.n	8009b08 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2220      	movs	r2, #32
 8009b00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009b04:	2303      	movs	r3, #3
 8009b06:	e03d      	b.n	8009b84 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d10b      	bne.n	8009b26 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	881b      	ldrh	r3, [r3, #0]
 8009b12:	461a      	mov	r2, r3
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b1c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009b1e:	69bb      	ldr	r3, [r7, #24]
 8009b20:	3302      	adds	r3, #2
 8009b22:	61bb      	str	r3, [r7, #24]
 8009b24:	e007      	b.n	8009b36 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	781a      	ldrb	r2, [r3, #0]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	3301      	adds	r3, #1
 8009b34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1c8      	bne.n	8009ae6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	9300      	str	r3, [sp, #0]
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	2140      	movs	r1, #64	@ 0x40
 8009b5e:	68f8      	ldr	r0, [r7, #12]
 8009b60:	f000 ffe2 	bl	800ab28 <UART_WaitOnFlagUntilTimeout>
 8009b64:	4603      	mov	r3, r0
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d005      	beq.n	8009b76 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2220      	movs	r2, #32
 8009b6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009b72:	2303      	movs	r3, #3
 8009b74:	e006      	b.n	8009b84 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2220      	movs	r2, #32
 8009b7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	e000      	b.n	8009b84 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009b82:	2302      	movs	r3, #2
  }
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3720      	adds	r7, #32
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b085      	sub	sp, #20
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b9a:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ba2:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8009ba4:	68fa      	ldr	r2, [r7, #12]
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	4313      	orrs	r3, r2
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3714      	adds	r7, #20
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr
	...

08009bb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009bbc:	b092      	sub	sp, #72	@ 0x48
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	689a      	ldr	r2, [r3, #8]
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	431a      	orrs	r2, r3
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	695b      	ldr	r3, [r3, #20]
 8009bd6:	431a      	orrs	r2, r3
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	69db      	ldr	r3, [r3, #28]
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	4bbe      	ldr	r3, [pc, #760]	@ (8009ee0 <UART_SetConfig+0x328>)
 8009be8:	4013      	ands	r3, r2
 8009bea:	697a      	ldr	r2, [r7, #20]
 8009bec:	6812      	ldr	r2, [r2, #0]
 8009bee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009bf0:	430b      	orrs	r3, r1
 8009bf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	68da      	ldr	r2, [r3, #12]
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	430a      	orrs	r2, r1
 8009c08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	699b      	ldr	r3, [r3, #24]
 8009c0e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4ab3      	ldr	r2, [pc, #716]	@ (8009ee4 <UART_SetConfig+0x32c>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d004      	beq.n	8009c24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	6a1b      	ldr	r3, [r3, #32]
 8009c1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c20:	4313      	orrs	r3, r2
 8009c22:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	689a      	ldr	r2, [r3, #8]
 8009c2a:	4baf      	ldr	r3, [pc, #700]	@ (8009ee8 <UART_SetConfig+0x330>)
 8009c2c:	4013      	ands	r3, r2
 8009c2e:	697a      	ldr	r2, [r7, #20]
 8009c30:	6812      	ldr	r2, [r2, #0]
 8009c32:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009c34:	430b      	orrs	r3, r1
 8009c36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c3e:	f023 010f 	bic.w	r1, r3, #15
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	430a      	orrs	r2, r1
 8009c4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4aa6      	ldr	r2, [pc, #664]	@ (8009eec <UART_SetConfig+0x334>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d177      	bne.n	8009d48 <UART_SetConfig+0x190>
 8009c58:	4ba5      	ldr	r3, [pc, #660]	@ (8009ef0 <UART_SetConfig+0x338>)
 8009c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c60:	2b28      	cmp	r3, #40	@ 0x28
 8009c62:	d86d      	bhi.n	8009d40 <UART_SetConfig+0x188>
 8009c64:	a201      	add	r2, pc, #4	@ (adr r2, 8009c6c <UART_SetConfig+0xb4>)
 8009c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6a:	bf00      	nop
 8009c6c:	08009d11 	.word	0x08009d11
 8009c70:	08009d41 	.word	0x08009d41
 8009c74:	08009d41 	.word	0x08009d41
 8009c78:	08009d41 	.word	0x08009d41
 8009c7c:	08009d41 	.word	0x08009d41
 8009c80:	08009d41 	.word	0x08009d41
 8009c84:	08009d41 	.word	0x08009d41
 8009c88:	08009d41 	.word	0x08009d41
 8009c8c:	08009d19 	.word	0x08009d19
 8009c90:	08009d41 	.word	0x08009d41
 8009c94:	08009d41 	.word	0x08009d41
 8009c98:	08009d41 	.word	0x08009d41
 8009c9c:	08009d41 	.word	0x08009d41
 8009ca0:	08009d41 	.word	0x08009d41
 8009ca4:	08009d41 	.word	0x08009d41
 8009ca8:	08009d41 	.word	0x08009d41
 8009cac:	08009d21 	.word	0x08009d21
 8009cb0:	08009d41 	.word	0x08009d41
 8009cb4:	08009d41 	.word	0x08009d41
 8009cb8:	08009d41 	.word	0x08009d41
 8009cbc:	08009d41 	.word	0x08009d41
 8009cc0:	08009d41 	.word	0x08009d41
 8009cc4:	08009d41 	.word	0x08009d41
 8009cc8:	08009d41 	.word	0x08009d41
 8009ccc:	08009d29 	.word	0x08009d29
 8009cd0:	08009d41 	.word	0x08009d41
 8009cd4:	08009d41 	.word	0x08009d41
 8009cd8:	08009d41 	.word	0x08009d41
 8009cdc:	08009d41 	.word	0x08009d41
 8009ce0:	08009d41 	.word	0x08009d41
 8009ce4:	08009d41 	.word	0x08009d41
 8009ce8:	08009d41 	.word	0x08009d41
 8009cec:	08009d31 	.word	0x08009d31
 8009cf0:	08009d41 	.word	0x08009d41
 8009cf4:	08009d41 	.word	0x08009d41
 8009cf8:	08009d41 	.word	0x08009d41
 8009cfc:	08009d41 	.word	0x08009d41
 8009d00:	08009d41 	.word	0x08009d41
 8009d04:	08009d41 	.word	0x08009d41
 8009d08:	08009d41 	.word	0x08009d41
 8009d0c:	08009d39 	.word	0x08009d39
 8009d10:	2301      	movs	r3, #1
 8009d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d16:	e326      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009d18:	2304      	movs	r3, #4
 8009d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d1e:	e322      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009d20:	2308      	movs	r3, #8
 8009d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d26:	e31e      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009d28:	2310      	movs	r3, #16
 8009d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d2e:	e31a      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009d30:	2320      	movs	r3, #32
 8009d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d36:	e316      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009d38:	2340      	movs	r3, #64	@ 0x40
 8009d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d3e:	e312      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009d40:	2380      	movs	r3, #128	@ 0x80
 8009d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d46:	e30e      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a69      	ldr	r2, [pc, #420]	@ (8009ef4 <UART_SetConfig+0x33c>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d130      	bne.n	8009db4 <UART_SetConfig+0x1fc>
 8009d52:	4b67      	ldr	r3, [pc, #412]	@ (8009ef0 <UART_SetConfig+0x338>)
 8009d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d56:	f003 0307 	and.w	r3, r3, #7
 8009d5a:	2b05      	cmp	r3, #5
 8009d5c:	d826      	bhi.n	8009dac <UART_SetConfig+0x1f4>
 8009d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8009d64 <UART_SetConfig+0x1ac>)
 8009d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d64:	08009d7d 	.word	0x08009d7d
 8009d68:	08009d85 	.word	0x08009d85
 8009d6c:	08009d8d 	.word	0x08009d8d
 8009d70:	08009d95 	.word	0x08009d95
 8009d74:	08009d9d 	.word	0x08009d9d
 8009d78:	08009da5 	.word	0x08009da5
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d82:	e2f0      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009d84:	2304      	movs	r3, #4
 8009d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d8a:	e2ec      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009d8c:	2308      	movs	r3, #8
 8009d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d92:	e2e8      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009d94:	2310      	movs	r3, #16
 8009d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d9a:	e2e4      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009d9c:	2320      	movs	r3, #32
 8009d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009da2:	e2e0      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009da4:	2340      	movs	r3, #64	@ 0x40
 8009da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009daa:	e2dc      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009dac:	2380      	movs	r3, #128	@ 0x80
 8009dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009db2:	e2d8      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a4f      	ldr	r2, [pc, #316]	@ (8009ef8 <UART_SetConfig+0x340>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d130      	bne.n	8009e20 <UART_SetConfig+0x268>
 8009dbe:	4b4c      	ldr	r3, [pc, #304]	@ (8009ef0 <UART_SetConfig+0x338>)
 8009dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dc2:	f003 0307 	and.w	r3, r3, #7
 8009dc6:	2b05      	cmp	r3, #5
 8009dc8:	d826      	bhi.n	8009e18 <UART_SetConfig+0x260>
 8009dca:	a201      	add	r2, pc, #4	@ (adr r2, 8009dd0 <UART_SetConfig+0x218>)
 8009dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd0:	08009de9 	.word	0x08009de9
 8009dd4:	08009df1 	.word	0x08009df1
 8009dd8:	08009df9 	.word	0x08009df9
 8009ddc:	08009e01 	.word	0x08009e01
 8009de0:	08009e09 	.word	0x08009e09
 8009de4:	08009e11 	.word	0x08009e11
 8009de8:	2300      	movs	r3, #0
 8009dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dee:	e2ba      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009df0:	2304      	movs	r3, #4
 8009df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009df6:	e2b6      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009df8:	2308      	movs	r3, #8
 8009dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dfe:	e2b2      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009e00:	2310      	movs	r3, #16
 8009e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e06:	e2ae      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009e08:	2320      	movs	r3, #32
 8009e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e0e:	e2aa      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009e10:	2340      	movs	r3, #64	@ 0x40
 8009e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e16:	e2a6      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009e18:	2380      	movs	r3, #128	@ 0x80
 8009e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e1e:	e2a2      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a35      	ldr	r2, [pc, #212]	@ (8009efc <UART_SetConfig+0x344>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d130      	bne.n	8009e8c <UART_SetConfig+0x2d4>
 8009e2a:	4b31      	ldr	r3, [pc, #196]	@ (8009ef0 <UART_SetConfig+0x338>)
 8009e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e2e:	f003 0307 	and.w	r3, r3, #7
 8009e32:	2b05      	cmp	r3, #5
 8009e34:	d826      	bhi.n	8009e84 <UART_SetConfig+0x2cc>
 8009e36:	a201      	add	r2, pc, #4	@ (adr r2, 8009e3c <UART_SetConfig+0x284>)
 8009e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e3c:	08009e55 	.word	0x08009e55
 8009e40:	08009e5d 	.word	0x08009e5d
 8009e44:	08009e65 	.word	0x08009e65
 8009e48:	08009e6d 	.word	0x08009e6d
 8009e4c:	08009e75 	.word	0x08009e75
 8009e50:	08009e7d 	.word	0x08009e7d
 8009e54:	2300      	movs	r3, #0
 8009e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e5a:	e284      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009e5c:	2304      	movs	r3, #4
 8009e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e62:	e280      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009e64:	2308      	movs	r3, #8
 8009e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e6a:	e27c      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009e6c:	2310      	movs	r3, #16
 8009e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e72:	e278      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009e74:	2320      	movs	r3, #32
 8009e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e7a:	e274      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009e7c:	2340      	movs	r3, #64	@ 0x40
 8009e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e82:	e270      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009e84:	2380      	movs	r3, #128	@ 0x80
 8009e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e8a:	e26c      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a1b      	ldr	r2, [pc, #108]	@ (8009f00 <UART_SetConfig+0x348>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d142      	bne.n	8009f1c <UART_SetConfig+0x364>
 8009e96:	4b16      	ldr	r3, [pc, #88]	@ (8009ef0 <UART_SetConfig+0x338>)
 8009e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e9a:	f003 0307 	and.w	r3, r3, #7
 8009e9e:	2b05      	cmp	r3, #5
 8009ea0:	d838      	bhi.n	8009f14 <UART_SetConfig+0x35c>
 8009ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ea8 <UART_SetConfig+0x2f0>)
 8009ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea8:	08009ec1 	.word	0x08009ec1
 8009eac:	08009ec9 	.word	0x08009ec9
 8009eb0:	08009ed1 	.word	0x08009ed1
 8009eb4:	08009ed9 	.word	0x08009ed9
 8009eb8:	08009f05 	.word	0x08009f05
 8009ebc:	08009f0d 	.word	0x08009f0d
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ec6:	e24e      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009ec8:	2304      	movs	r3, #4
 8009eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ece:	e24a      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009ed0:	2308      	movs	r3, #8
 8009ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ed6:	e246      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009ed8:	2310      	movs	r3, #16
 8009eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ede:	e242      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009ee0:	cfff69f3 	.word	0xcfff69f3
 8009ee4:	58000c00 	.word	0x58000c00
 8009ee8:	11fff4ff 	.word	0x11fff4ff
 8009eec:	40011000 	.word	0x40011000
 8009ef0:	58024400 	.word	0x58024400
 8009ef4:	40004400 	.word	0x40004400
 8009ef8:	40004800 	.word	0x40004800
 8009efc:	40004c00 	.word	0x40004c00
 8009f00:	40005000 	.word	0x40005000
 8009f04:	2320      	movs	r3, #32
 8009f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f0a:	e22c      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009f0c:	2340      	movs	r3, #64	@ 0x40
 8009f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f12:	e228      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009f14:	2380      	movs	r3, #128	@ 0x80
 8009f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f1a:	e224      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4ab1      	ldr	r2, [pc, #708]	@ (800a1e8 <UART_SetConfig+0x630>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d176      	bne.n	800a014 <UART_SetConfig+0x45c>
 8009f26:	4bb1      	ldr	r3, [pc, #708]	@ (800a1ec <UART_SetConfig+0x634>)
 8009f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009f2e:	2b28      	cmp	r3, #40	@ 0x28
 8009f30:	d86c      	bhi.n	800a00c <UART_SetConfig+0x454>
 8009f32:	a201      	add	r2, pc, #4	@ (adr r2, 8009f38 <UART_SetConfig+0x380>)
 8009f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f38:	08009fdd 	.word	0x08009fdd
 8009f3c:	0800a00d 	.word	0x0800a00d
 8009f40:	0800a00d 	.word	0x0800a00d
 8009f44:	0800a00d 	.word	0x0800a00d
 8009f48:	0800a00d 	.word	0x0800a00d
 8009f4c:	0800a00d 	.word	0x0800a00d
 8009f50:	0800a00d 	.word	0x0800a00d
 8009f54:	0800a00d 	.word	0x0800a00d
 8009f58:	08009fe5 	.word	0x08009fe5
 8009f5c:	0800a00d 	.word	0x0800a00d
 8009f60:	0800a00d 	.word	0x0800a00d
 8009f64:	0800a00d 	.word	0x0800a00d
 8009f68:	0800a00d 	.word	0x0800a00d
 8009f6c:	0800a00d 	.word	0x0800a00d
 8009f70:	0800a00d 	.word	0x0800a00d
 8009f74:	0800a00d 	.word	0x0800a00d
 8009f78:	08009fed 	.word	0x08009fed
 8009f7c:	0800a00d 	.word	0x0800a00d
 8009f80:	0800a00d 	.word	0x0800a00d
 8009f84:	0800a00d 	.word	0x0800a00d
 8009f88:	0800a00d 	.word	0x0800a00d
 8009f8c:	0800a00d 	.word	0x0800a00d
 8009f90:	0800a00d 	.word	0x0800a00d
 8009f94:	0800a00d 	.word	0x0800a00d
 8009f98:	08009ff5 	.word	0x08009ff5
 8009f9c:	0800a00d 	.word	0x0800a00d
 8009fa0:	0800a00d 	.word	0x0800a00d
 8009fa4:	0800a00d 	.word	0x0800a00d
 8009fa8:	0800a00d 	.word	0x0800a00d
 8009fac:	0800a00d 	.word	0x0800a00d
 8009fb0:	0800a00d 	.word	0x0800a00d
 8009fb4:	0800a00d 	.word	0x0800a00d
 8009fb8:	08009ffd 	.word	0x08009ffd
 8009fbc:	0800a00d 	.word	0x0800a00d
 8009fc0:	0800a00d 	.word	0x0800a00d
 8009fc4:	0800a00d 	.word	0x0800a00d
 8009fc8:	0800a00d 	.word	0x0800a00d
 8009fcc:	0800a00d 	.word	0x0800a00d
 8009fd0:	0800a00d 	.word	0x0800a00d
 8009fd4:	0800a00d 	.word	0x0800a00d
 8009fd8:	0800a005 	.word	0x0800a005
 8009fdc:	2301      	movs	r3, #1
 8009fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fe2:	e1c0      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009fe4:	2304      	movs	r3, #4
 8009fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fea:	e1bc      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009fec:	2308      	movs	r3, #8
 8009fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ff2:	e1b8      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009ff4:	2310      	movs	r3, #16
 8009ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ffa:	e1b4      	b.n	800a366 <UART_SetConfig+0x7ae>
 8009ffc:	2320      	movs	r3, #32
 8009ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a002:	e1b0      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a004:	2340      	movs	r3, #64	@ 0x40
 800a006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a00a:	e1ac      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a00c:	2380      	movs	r3, #128	@ 0x80
 800a00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a012:	e1a8      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a75      	ldr	r2, [pc, #468]	@ (800a1f0 <UART_SetConfig+0x638>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d130      	bne.n	800a080 <UART_SetConfig+0x4c8>
 800a01e:	4b73      	ldr	r3, [pc, #460]	@ (800a1ec <UART_SetConfig+0x634>)
 800a020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a022:	f003 0307 	and.w	r3, r3, #7
 800a026:	2b05      	cmp	r3, #5
 800a028:	d826      	bhi.n	800a078 <UART_SetConfig+0x4c0>
 800a02a:	a201      	add	r2, pc, #4	@ (adr r2, 800a030 <UART_SetConfig+0x478>)
 800a02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a030:	0800a049 	.word	0x0800a049
 800a034:	0800a051 	.word	0x0800a051
 800a038:	0800a059 	.word	0x0800a059
 800a03c:	0800a061 	.word	0x0800a061
 800a040:	0800a069 	.word	0x0800a069
 800a044:	0800a071 	.word	0x0800a071
 800a048:	2300      	movs	r3, #0
 800a04a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a04e:	e18a      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a050:	2304      	movs	r3, #4
 800a052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a056:	e186      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a058:	2308      	movs	r3, #8
 800a05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a05e:	e182      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a060:	2310      	movs	r3, #16
 800a062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a066:	e17e      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a068:	2320      	movs	r3, #32
 800a06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a06e:	e17a      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a070:	2340      	movs	r3, #64	@ 0x40
 800a072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a076:	e176      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a078:	2380      	movs	r3, #128	@ 0x80
 800a07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a07e:	e172      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a5b      	ldr	r2, [pc, #364]	@ (800a1f4 <UART_SetConfig+0x63c>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d130      	bne.n	800a0ec <UART_SetConfig+0x534>
 800a08a:	4b58      	ldr	r3, [pc, #352]	@ (800a1ec <UART_SetConfig+0x634>)
 800a08c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a08e:	f003 0307 	and.w	r3, r3, #7
 800a092:	2b05      	cmp	r3, #5
 800a094:	d826      	bhi.n	800a0e4 <UART_SetConfig+0x52c>
 800a096:	a201      	add	r2, pc, #4	@ (adr r2, 800a09c <UART_SetConfig+0x4e4>)
 800a098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a09c:	0800a0b5 	.word	0x0800a0b5
 800a0a0:	0800a0bd 	.word	0x0800a0bd
 800a0a4:	0800a0c5 	.word	0x0800a0c5
 800a0a8:	0800a0cd 	.word	0x0800a0cd
 800a0ac:	0800a0d5 	.word	0x0800a0d5
 800a0b0:	0800a0dd 	.word	0x0800a0dd
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ba:	e154      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a0bc:	2304      	movs	r3, #4
 800a0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0c2:	e150      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a0c4:	2308      	movs	r3, #8
 800a0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ca:	e14c      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a0cc:	2310      	movs	r3, #16
 800a0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0d2:	e148      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a0d4:	2320      	movs	r3, #32
 800a0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0da:	e144      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a0dc:	2340      	movs	r3, #64	@ 0x40
 800a0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0e2:	e140      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a0e4:	2380      	movs	r3, #128	@ 0x80
 800a0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ea:	e13c      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a41      	ldr	r2, [pc, #260]	@ (800a1f8 <UART_SetConfig+0x640>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	f040 8082 	bne.w	800a1fc <UART_SetConfig+0x644>
 800a0f8:	4b3c      	ldr	r3, [pc, #240]	@ (800a1ec <UART_SetConfig+0x634>)
 800a0fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a100:	2b28      	cmp	r3, #40	@ 0x28
 800a102:	d86d      	bhi.n	800a1e0 <UART_SetConfig+0x628>
 800a104:	a201      	add	r2, pc, #4	@ (adr r2, 800a10c <UART_SetConfig+0x554>)
 800a106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a10a:	bf00      	nop
 800a10c:	0800a1b1 	.word	0x0800a1b1
 800a110:	0800a1e1 	.word	0x0800a1e1
 800a114:	0800a1e1 	.word	0x0800a1e1
 800a118:	0800a1e1 	.word	0x0800a1e1
 800a11c:	0800a1e1 	.word	0x0800a1e1
 800a120:	0800a1e1 	.word	0x0800a1e1
 800a124:	0800a1e1 	.word	0x0800a1e1
 800a128:	0800a1e1 	.word	0x0800a1e1
 800a12c:	0800a1b9 	.word	0x0800a1b9
 800a130:	0800a1e1 	.word	0x0800a1e1
 800a134:	0800a1e1 	.word	0x0800a1e1
 800a138:	0800a1e1 	.word	0x0800a1e1
 800a13c:	0800a1e1 	.word	0x0800a1e1
 800a140:	0800a1e1 	.word	0x0800a1e1
 800a144:	0800a1e1 	.word	0x0800a1e1
 800a148:	0800a1e1 	.word	0x0800a1e1
 800a14c:	0800a1c1 	.word	0x0800a1c1
 800a150:	0800a1e1 	.word	0x0800a1e1
 800a154:	0800a1e1 	.word	0x0800a1e1
 800a158:	0800a1e1 	.word	0x0800a1e1
 800a15c:	0800a1e1 	.word	0x0800a1e1
 800a160:	0800a1e1 	.word	0x0800a1e1
 800a164:	0800a1e1 	.word	0x0800a1e1
 800a168:	0800a1e1 	.word	0x0800a1e1
 800a16c:	0800a1c9 	.word	0x0800a1c9
 800a170:	0800a1e1 	.word	0x0800a1e1
 800a174:	0800a1e1 	.word	0x0800a1e1
 800a178:	0800a1e1 	.word	0x0800a1e1
 800a17c:	0800a1e1 	.word	0x0800a1e1
 800a180:	0800a1e1 	.word	0x0800a1e1
 800a184:	0800a1e1 	.word	0x0800a1e1
 800a188:	0800a1e1 	.word	0x0800a1e1
 800a18c:	0800a1d1 	.word	0x0800a1d1
 800a190:	0800a1e1 	.word	0x0800a1e1
 800a194:	0800a1e1 	.word	0x0800a1e1
 800a198:	0800a1e1 	.word	0x0800a1e1
 800a19c:	0800a1e1 	.word	0x0800a1e1
 800a1a0:	0800a1e1 	.word	0x0800a1e1
 800a1a4:	0800a1e1 	.word	0x0800a1e1
 800a1a8:	0800a1e1 	.word	0x0800a1e1
 800a1ac:	0800a1d9 	.word	0x0800a1d9
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1b6:	e0d6      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a1b8:	2304      	movs	r3, #4
 800a1ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1be:	e0d2      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a1c0:	2308      	movs	r3, #8
 800a1c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1c6:	e0ce      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a1c8:	2310      	movs	r3, #16
 800a1ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ce:	e0ca      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a1d0:	2320      	movs	r3, #32
 800a1d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1d6:	e0c6      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a1d8:	2340      	movs	r3, #64	@ 0x40
 800a1da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1de:	e0c2      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a1e0:	2380      	movs	r3, #128	@ 0x80
 800a1e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1e6:	e0be      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a1e8:	40011400 	.word	0x40011400
 800a1ec:	58024400 	.word	0x58024400
 800a1f0:	40007800 	.word	0x40007800
 800a1f4:	40007c00 	.word	0x40007c00
 800a1f8:	40011800 	.word	0x40011800
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4aad      	ldr	r2, [pc, #692]	@ (800a4b8 <UART_SetConfig+0x900>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d176      	bne.n	800a2f4 <UART_SetConfig+0x73c>
 800a206:	4bad      	ldr	r3, [pc, #692]	@ (800a4bc <UART_SetConfig+0x904>)
 800a208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a20a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a20e:	2b28      	cmp	r3, #40	@ 0x28
 800a210:	d86c      	bhi.n	800a2ec <UART_SetConfig+0x734>
 800a212:	a201      	add	r2, pc, #4	@ (adr r2, 800a218 <UART_SetConfig+0x660>)
 800a214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a218:	0800a2bd 	.word	0x0800a2bd
 800a21c:	0800a2ed 	.word	0x0800a2ed
 800a220:	0800a2ed 	.word	0x0800a2ed
 800a224:	0800a2ed 	.word	0x0800a2ed
 800a228:	0800a2ed 	.word	0x0800a2ed
 800a22c:	0800a2ed 	.word	0x0800a2ed
 800a230:	0800a2ed 	.word	0x0800a2ed
 800a234:	0800a2ed 	.word	0x0800a2ed
 800a238:	0800a2c5 	.word	0x0800a2c5
 800a23c:	0800a2ed 	.word	0x0800a2ed
 800a240:	0800a2ed 	.word	0x0800a2ed
 800a244:	0800a2ed 	.word	0x0800a2ed
 800a248:	0800a2ed 	.word	0x0800a2ed
 800a24c:	0800a2ed 	.word	0x0800a2ed
 800a250:	0800a2ed 	.word	0x0800a2ed
 800a254:	0800a2ed 	.word	0x0800a2ed
 800a258:	0800a2cd 	.word	0x0800a2cd
 800a25c:	0800a2ed 	.word	0x0800a2ed
 800a260:	0800a2ed 	.word	0x0800a2ed
 800a264:	0800a2ed 	.word	0x0800a2ed
 800a268:	0800a2ed 	.word	0x0800a2ed
 800a26c:	0800a2ed 	.word	0x0800a2ed
 800a270:	0800a2ed 	.word	0x0800a2ed
 800a274:	0800a2ed 	.word	0x0800a2ed
 800a278:	0800a2d5 	.word	0x0800a2d5
 800a27c:	0800a2ed 	.word	0x0800a2ed
 800a280:	0800a2ed 	.word	0x0800a2ed
 800a284:	0800a2ed 	.word	0x0800a2ed
 800a288:	0800a2ed 	.word	0x0800a2ed
 800a28c:	0800a2ed 	.word	0x0800a2ed
 800a290:	0800a2ed 	.word	0x0800a2ed
 800a294:	0800a2ed 	.word	0x0800a2ed
 800a298:	0800a2dd 	.word	0x0800a2dd
 800a29c:	0800a2ed 	.word	0x0800a2ed
 800a2a0:	0800a2ed 	.word	0x0800a2ed
 800a2a4:	0800a2ed 	.word	0x0800a2ed
 800a2a8:	0800a2ed 	.word	0x0800a2ed
 800a2ac:	0800a2ed 	.word	0x0800a2ed
 800a2b0:	0800a2ed 	.word	0x0800a2ed
 800a2b4:	0800a2ed 	.word	0x0800a2ed
 800a2b8:	0800a2e5 	.word	0x0800a2e5
 800a2bc:	2301      	movs	r3, #1
 800a2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2c2:	e050      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a2c4:	2304      	movs	r3, #4
 800a2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ca:	e04c      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a2cc:	2308      	movs	r3, #8
 800a2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2d2:	e048      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a2d4:	2310      	movs	r3, #16
 800a2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2da:	e044      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a2dc:	2320      	movs	r3, #32
 800a2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2e2:	e040      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a2e4:	2340      	movs	r3, #64	@ 0x40
 800a2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ea:	e03c      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a2ec:	2380      	movs	r3, #128	@ 0x80
 800a2ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2f2:	e038      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a71      	ldr	r2, [pc, #452]	@ (800a4c0 <UART_SetConfig+0x908>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d130      	bne.n	800a360 <UART_SetConfig+0x7a8>
 800a2fe:	4b6f      	ldr	r3, [pc, #444]	@ (800a4bc <UART_SetConfig+0x904>)
 800a300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a302:	f003 0307 	and.w	r3, r3, #7
 800a306:	2b05      	cmp	r3, #5
 800a308:	d826      	bhi.n	800a358 <UART_SetConfig+0x7a0>
 800a30a:	a201      	add	r2, pc, #4	@ (adr r2, 800a310 <UART_SetConfig+0x758>)
 800a30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a310:	0800a329 	.word	0x0800a329
 800a314:	0800a331 	.word	0x0800a331
 800a318:	0800a339 	.word	0x0800a339
 800a31c:	0800a341 	.word	0x0800a341
 800a320:	0800a349 	.word	0x0800a349
 800a324:	0800a351 	.word	0x0800a351
 800a328:	2302      	movs	r3, #2
 800a32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a32e:	e01a      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a330:	2304      	movs	r3, #4
 800a332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a336:	e016      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a338:	2308      	movs	r3, #8
 800a33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a33e:	e012      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a340:	2310      	movs	r3, #16
 800a342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a346:	e00e      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a348:	2320      	movs	r3, #32
 800a34a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a34e:	e00a      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a350:	2340      	movs	r3, #64	@ 0x40
 800a352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a356:	e006      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a358:	2380      	movs	r3, #128	@ 0x80
 800a35a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a35e:	e002      	b.n	800a366 <UART_SetConfig+0x7ae>
 800a360:	2380      	movs	r3, #128	@ 0x80
 800a362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a55      	ldr	r2, [pc, #340]	@ (800a4c0 <UART_SetConfig+0x908>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	f040 80f8 	bne.w	800a562 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a372:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a376:	2b20      	cmp	r3, #32
 800a378:	dc46      	bgt.n	800a408 <UART_SetConfig+0x850>
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	db75      	blt.n	800a46a <UART_SetConfig+0x8b2>
 800a37e:	3b02      	subs	r3, #2
 800a380:	2b1e      	cmp	r3, #30
 800a382:	d872      	bhi.n	800a46a <UART_SetConfig+0x8b2>
 800a384:	a201      	add	r2, pc, #4	@ (adr r2, 800a38c <UART_SetConfig+0x7d4>)
 800a386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a38a:	bf00      	nop
 800a38c:	0800a40f 	.word	0x0800a40f
 800a390:	0800a46b 	.word	0x0800a46b
 800a394:	0800a417 	.word	0x0800a417
 800a398:	0800a46b 	.word	0x0800a46b
 800a39c:	0800a46b 	.word	0x0800a46b
 800a3a0:	0800a46b 	.word	0x0800a46b
 800a3a4:	0800a427 	.word	0x0800a427
 800a3a8:	0800a46b 	.word	0x0800a46b
 800a3ac:	0800a46b 	.word	0x0800a46b
 800a3b0:	0800a46b 	.word	0x0800a46b
 800a3b4:	0800a46b 	.word	0x0800a46b
 800a3b8:	0800a46b 	.word	0x0800a46b
 800a3bc:	0800a46b 	.word	0x0800a46b
 800a3c0:	0800a46b 	.word	0x0800a46b
 800a3c4:	0800a437 	.word	0x0800a437
 800a3c8:	0800a46b 	.word	0x0800a46b
 800a3cc:	0800a46b 	.word	0x0800a46b
 800a3d0:	0800a46b 	.word	0x0800a46b
 800a3d4:	0800a46b 	.word	0x0800a46b
 800a3d8:	0800a46b 	.word	0x0800a46b
 800a3dc:	0800a46b 	.word	0x0800a46b
 800a3e0:	0800a46b 	.word	0x0800a46b
 800a3e4:	0800a46b 	.word	0x0800a46b
 800a3e8:	0800a46b 	.word	0x0800a46b
 800a3ec:	0800a46b 	.word	0x0800a46b
 800a3f0:	0800a46b 	.word	0x0800a46b
 800a3f4:	0800a46b 	.word	0x0800a46b
 800a3f8:	0800a46b 	.word	0x0800a46b
 800a3fc:	0800a46b 	.word	0x0800a46b
 800a400:	0800a46b 	.word	0x0800a46b
 800a404:	0800a45d 	.word	0x0800a45d
 800a408:	2b40      	cmp	r3, #64	@ 0x40
 800a40a:	d02a      	beq.n	800a462 <UART_SetConfig+0x8aa>
 800a40c:	e02d      	b.n	800a46a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a40e:	f7fe fd6b 	bl	8008ee8 <HAL_RCCEx_GetD3PCLK1Freq>
 800a412:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a414:	e02f      	b.n	800a476 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a416:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7fe fd7a 	bl	8008f14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a424:	e027      	b.n	800a476 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a426:	f107 0318 	add.w	r3, r7, #24
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7fe fec6 	bl	80091bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a434:	e01f      	b.n	800a476 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a436:	4b21      	ldr	r3, [pc, #132]	@ (800a4bc <UART_SetConfig+0x904>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f003 0320 	and.w	r3, r3, #32
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d009      	beq.n	800a456 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a442:	4b1e      	ldr	r3, [pc, #120]	@ (800a4bc <UART_SetConfig+0x904>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	08db      	lsrs	r3, r3, #3
 800a448:	f003 0303 	and.w	r3, r3, #3
 800a44c:	4a1d      	ldr	r2, [pc, #116]	@ (800a4c4 <UART_SetConfig+0x90c>)
 800a44e:	fa22 f303 	lsr.w	r3, r2, r3
 800a452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a454:	e00f      	b.n	800a476 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a456:	4b1b      	ldr	r3, [pc, #108]	@ (800a4c4 <UART_SetConfig+0x90c>)
 800a458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a45a:	e00c      	b.n	800a476 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a45c:	4b1a      	ldr	r3, [pc, #104]	@ (800a4c8 <UART_SetConfig+0x910>)
 800a45e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a460:	e009      	b.n	800a476 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a462:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a468:	e005      	b.n	800a476 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a46a:	2300      	movs	r3, #0
 800a46c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a46e:	2301      	movs	r3, #1
 800a470:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a474:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f000 81ee 	beq.w	800a85a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a482:	4a12      	ldr	r2, [pc, #72]	@ (800a4cc <UART_SetConfig+0x914>)
 800a484:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a488:	461a      	mov	r2, r3
 800a48a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a48c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a490:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	685a      	ldr	r2, [r3, #4]
 800a496:	4613      	mov	r3, r2
 800a498:	005b      	lsls	r3, r3, #1
 800a49a:	4413      	add	r3, r2
 800a49c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d305      	bcc.n	800a4ae <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a4a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d910      	bls.n	800a4d0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a4b4:	e1d1      	b.n	800a85a <UART_SetConfig+0xca2>
 800a4b6:	bf00      	nop
 800a4b8:	40011c00 	.word	0x40011c00
 800a4bc:	58024400 	.word	0x58024400
 800a4c0:	58000c00 	.word	0x58000c00
 800a4c4:	03d09000 	.word	0x03d09000
 800a4c8:	003d0900 	.word	0x003d0900
 800a4cc:	0800bbb4 	.word	0x0800bbb4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	60bb      	str	r3, [r7, #8]
 800a4d6:	60fa      	str	r2, [r7, #12]
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4dc:	4ac0      	ldr	r2, [pc, #768]	@ (800a7e0 <UART_SetConfig+0xc28>)
 800a4de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	603b      	str	r3, [r7, #0]
 800a4e8:	607a      	str	r2, [r7, #4]
 800a4ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a4f2:	f7f5 ff65 	bl	80003c0 <__aeabi_uldivmod>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	4610      	mov	r0, r2
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	f04f 0200 	mov.w	r2, #0
 800a502:	f04f 0300 	mov.w	r3, #0
 800a506:	020b      	lsls	r3, r1, #8
 800a508:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a50c:	0202      	lsls	r2, r0, #8
 800a50e:	6979      	ldr	r1, [r7, #20]
 800a510:	6849      	ldr	r1, [r1, #4]
 800a512:	0849      	lsrs	r1, r1, #1
 800a514:	2000      	movs	r0, #0
 800a516:	460c      	mov	r4, r1
 800a518:	4605      	mov	r5, r0
 800a51a:	eb12 0804 	adds.w	r8, r2, r4
 800a51e:	eb43 0905 	adc.w	r9, r3, r5
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	2200      	movs	r2, #0
 800a528:	469a      	mov	sl, r3
 800a52a:	4693      	mov	fp, r2
 800a52c:	4652      	mov	r2, sl
 800a52e:	465b      	mov	r3, fp
 800a530:	4640      	mov	r0, r8
 800a532:	4649      	mov	r1, r9
 800a534:	f7f5 ff44 	bl	80003c0 <__aeabi_uldivmod>
 800a538:	4602      	mov	r2, r0
 800a53a:	460b      	mov	r3, r1
 800a53c:	4613      	mov	r3, r2
 800a53e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a542:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a546:	d308      	bcc.n	800a55a <UART_SetConfig+0x9a2>
 800a548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a54a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a54e:	d204      	bcs.n	800a55a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a556:	60da      	str	r2, [r3, #12]
 800a558:	e17f      	b.n	800a85a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a55a:	2301      	movs	r3, #1
 800a55c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a560:	e17b      	b.n	800a85a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	69db      	ldr	r3, [r3, #28]
 800a566:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a56a:	f040 80bd 	bne.w	800a6e8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a56e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a572:	2b20      	cmp	r3, #32
 800a574:	dc48      	bgt.n	800a608 <UART_SetConfig+0xa50>
 800a576:	2b00      	cmp	r3, #0
 800a578:	db7b      	blt.n	800a672 <UART_SetConfig+0xaba>
 800a57a:	2b20      	cmp	r3, #32
 800a57c:	d879      	bhi.n	800a672 <UART_SetConfig+0xaba>
 800a57e:	a201      	add	r2, pc, #4	@ (adr r2, 800a584 <UART_SetConfig+0x9cc>)
 800a580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a584:	0800a60f 	.word	0x0800a60f
 800a588:	0800a617 	.word	0x0800a617
 800a58c:	0800a673 	.word	0x0800a673
 800a590:	0800a673 	.word	0x0800a673
 800a594:	0800a61f 	.word	0x0800a61f
 800a598:	0800a673 	.word	0x0800a673
 800a59c:	0800a673 	.word	0x0800a673
 800a5a0:	0800a673 	.word	0x0800a673
 800a5a4:	0800a62f 	.word	0x0800a62f
 800a5a8:	0800a673 	.word	0x0800a673
 800a5ac:	0800a673 	.word	0x0800a673
 800a5b0:	0800a673 	.word	0x0800a673
 800a5b4:	0800a673 	.word	0x0800a673
 800a5b8:	0800a673 	.word	0x0800a673
 800a5bc:	0800a673 	.word	0x0800a673
 800a5c0:	0800a673 	.word	0x0800a673
 800a5c4:	0800a63f 	.word	0x0800a63f
 800a5c8:	0800a673 	.word	0x0800a673
 800a5cc:	0800a673 	.word	0x0800a673
 800a5d0:	0800a673 	.word	0x0800a673
 800a5d4:	0800a673 	.word	0x0800a673
 800a5d8:	0800a673 	.word	0x0800a673
 800a5dc:	0800a673 	.word	0x0800a673
 800a5e0:	0800a673 	.word	0x0800a673
 800a5e4:	0800a673 	.word	0x0800a673
 800a5e8:	0800a673 	.word	0x0800a673
 800a5ec:	0800a673 	.word	0x0800a673
 800a5f0:	0800a673 	.word	0x0800a673
 800a5f4:	0800a673 	.word	0x0800a673
 800a5f8:	0800a673 	.word	0x0800a673
 800a5fc:	0800a673 	.word	0x0800a673
 800a600:	0800a673 	.word	0x0800a673
 800a604:	0800a665 	.word	0x0800a665
 800a608:	2b40      	cmp	r3, #64	@ 0x40
 800a60a:	d02e      	beq.n	800a66a <UART_SetConfig+0xab2>
 800a60c:	e031      	b.n	800a672 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a60e:	f7fc fdcd 	bl	80071ac <HAL_RCC_GetPCLK1Freq>
 800a612:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a614:	e033      	b.n	800a67e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a616:	f7fc fddf 	bl	80071d8 <HAL_RCC_GetPCLK2Freq>
 800a61a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a61c:	e02f      	b.n	800a67e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a61e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a622:	4618      	mov	r0, r3
 800a624:	f7fe fc76 	bl	8008f14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a62c:	e027      	b.n	800a67e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a62e:	f107 0318 	add.w	r3, r7, #24
 800a632:	4618      	mov	r0, r3
 800a634:	f7fe fdc2 	bl	80091bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a638:	69fb      	ldr	r3, [r7, #28]
 800a63a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a63c:	e01f      	b.n	800a67e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a63e:	4b69      	ldr	r3, [pc, #420]	@ (800a7e4 <UART_SetConfig+0xc2c>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f003 0320 	and.w	r3, r3, #32
 800a646:	2b00      	cmp	r3, #0
 800a648:	d009      	beq.n	800a65e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a64a:	4b66      	ldr	r3, [pc, #408]	@ (800a7e4 <UART_SetConfig+0xc2c>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	08db      	lsrs	r3, r3, #3
 800a650:	f003 0303 	and.w	r3, r3, #3
 800a654:	4a64      	ldr	r2, [pc, #400]	@ (800a7e8 <UART_SetConfig+0xc30>)
 800a656:	fa22 f303 	lsr.w	r3, r2, r3
 800a65a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a65c:	e00f      	b.n	800a67e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a65e:	4b62      	ldr	r3, [pc, #392]	@ (800a7e8 <UART_SetConfig+0xc30>)
 800a660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a662:	e00c      	b.n	800a67e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a664:	4b61      	ldr	r3, [pc, #388]	@ (800a7ec <UART_SetConfig+0xc34>)
 800a666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a668:	e009      	b.n	800a67e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a66a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a670:	e005      	b.n	800a67e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a672:	2300      	movs	r3, #0
 800a674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a67c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a67e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a680:	2b00      	cmp	r3, #0
 800a682:	f000 80ea 	beq.w	800a85a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a68a:	4a55      	ldr	r2, [pc, #340]	@ (800a7e0 <UART_SetConfig+0xc28>)
 800a68c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a690:	461a      	mov	r2, r3
 800a692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a694:	fbb3 f3f2 	udiv	r3, r3, r2
 800a698:	005a      	lsls	r2, r3, #1
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	085b      	lsrs	r3, r3, #1
 800a6a0:	441a      	add	r2, r3
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ae:	2b0f      	cmp	r3, #15
 800a6b0:	d916      	bls.n	800a6e0 <UART_SetConfig+0xb28>
 800a6b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6b8:	d212      	bcs.n	800a6e0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a6ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	f023 030f 	bic.w	r3, r3, #15
 800a6c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a6c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6c6:	085b      	lsrs	r3, r3, #1
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	f003 0307 	and.w	r3, r3, #7
 800a6ce:	b29a      	uxth	r2, r3
 800a6d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a6dc:	60da      	str	r2, [r3, #12]
 800a6de:	e0bc      	b.n	800a85a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a6e6:	e0b8      	b.n	800a85a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a6e8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a6ec:	2b20      	cmp	r3, #32
 800a6ee:	dc4b      	bgt.n	800a788 <UART_SetConfig+0xbd0>
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f2c0 8087 	blt.w	800a804 <UART_SetConfig+0xc4c>
 800a6f6:	2b20      	cmp	r3, #32
 800a6f8:	f200 8084 	bhi.w	800a804 <UART_SetConfig+0xc4c>
 800a6fc:	a201      	add	r2, pc, #4	@ (adr r2, 800a704 <UART_SetConfig+0xb4c>)
 800a6fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a702:	bf00      	nop
 800a704:	0800a78f 	.word	0x0800a78f
 800a708:	0800a797 	.word	0x0800a797
 800a70c:	0800a805 	.word	0x0800a805
 800a710:	0800a805 	.word	0x0800a805
 800a714:	0800a79f 	.word	0x0800a79f
 800a718:	0800a805 	.word	0x0800a805
 800a71c:	0800a805 	.word	0x0800a805
 800a720:	0800a805 	.word	0x0800a805
 800a724:	0800a7af 	.word	0x0800a7af
 800a728:	0800a805 	.word	0x0800a805
 800a72c:	0800a805 	.word	0x0800a805
 800a730:	0800a805 	.word	0x0800a805
 800a734:	0800a805 	.word	0x0800a805
 800a738:	0800a805 	.word	0x0800a805
 800a73c:	0800a805 	.word	0x0800a805
 800a740:	0800a805 	.word	0x0800a805
 800a744:	0800a7bf 	.word	0x0800a7bf
 800a748:	0800a805 	.word	0x0800a805
 800a74c:	0800a805 	.word	0x0800a805
 800a750:	0800a805 	.word	0x0800a805
 800a754:	0800a805 	.word	0x0800a805
 800a758:	0800a805 	.word	0x0800a805
 800a75c:	0800a805 	.word	0x0800a805
 800a760:	0800a805 	.word	0x0800a805
 800a764:	0800a805 	.word	0x0800a805
 800a768:	0800a805 	.word	0x0800a805
 800a76c:	0800a805 	.word	0x0800a805
 800a770:	0800a805 	.word	0x0800a805
 800a774:	0800a805 	.word	0x0800a805
 800a778:	0800a805 	.word	0x0800a805
 800a77c:	0800a805 	.word	0x0800a805
 800a780:	0800a805 	.word	0x0800a805
 800a784:	0800a7f7 	.word	0x0800a7f7
 800a788:	2b40      	cmp	r3, #64	@ 0x40
 800a78a:	d037      	beq.n	800a7fc <UART_SetConfig+0xc44>
 800a78c:	e03a      	b.n	800a804 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a78e:	f7fc fd0d 	bl	80071ac <HAL_RCC_GetPCLK1Freq>
 800a792:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a794:	e03c      	b.n	800a810 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a796:	f7fc fd1f 	bl	80071d8 <HAL_RCC_GetPCLK2Freq>
 800a79a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a79c:	e038      	b.n	800a810 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a79e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7fe fbb6 	bl	8008f14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a7a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7ac:	e030      	b.n	800a810 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7ae:	f107 0318 	add.w	r3, r7, #24
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7fe fd02 	bl	80091bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a7b8:	69fb      	ldr	r3, [r7, #28]
 800a7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7bc:	e028      	b.n	800a810 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7be:	4b09      	ldr	r3, [pc, #36]	@ (800a7e4 <UART_SetConfig+0xc2c>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f003 0320 	and.w	r3, r3, #32
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d012      	beq.n	800a7f0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a7ca:	4b06      	ldr	r3, [pc, #24]	@ (800a7e4 <UART_SetConfig+0xc2c>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	08db      	lsrs	r3, r3, #3
 800a7d0:	f003 0303 	and.w	r3, r3, #3
 800a7d4:	4a04      	ldr	r2, [pc, #16]	@ (800a7e8 <UART_SetConfig+0xc30>)
 800a7d6:	fa22 f303 	lsr.w	r3, r2, r3
 800a7da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a7dc:	e018      	b.n	800a810 <UART_SetConfig+0xc58>
 800a7de:	bf00      	nop
 800a7e0:	0800bbb4 	.word	0x0800bbb4
 800a7e4:	58024400 	.word	0x58024400
 800a7e8:	03d09000 	.word	0x03d09000
 800a7ec:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a7f0:	4b24      	ldr	r3, [pc, #144]	@ (800a884 <UART_SetConfig+0xccc>)
 800a7f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7f4:	e00c      	b.n	800a810 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a7f6:	4b24      	ldr	r3, [pc, #144]	@ (800a888 <UART_SetConfig+0xcd0>)
 800a7f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7fa:	e009      	b.n	800a810 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a802:	e005      	b.n	800a810 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a804:	2300      	movs	r3, #0
 800a806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a808:	2301      	movs	r3, #1
 800a80a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a80e:	bf00      	nop
    }

    if (pclk != 0U)
 800a810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a812:	2b00      	cmp	r3, #0
 800a814:	d021      	beq.n	800a85a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a81a:	4a1c      	ldr	r2, [pc, #112]	@ (800a88c <UART_SetConfig+0xcd4>)
 800a81c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a820:	461a      	mov	r2, r3
 800a822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a824:	fbb3 f2f2 	udiv	r2, r3, r2
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	085b      	lsrs	r3, r3, #1
 800a82e:	441a      	add	r2, r3
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	fbb2 f3f3 	udiv	r3, r2, r3
 800a838:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a83a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a83c:	2b0f      	cmp	r3, #15
 800a83e:	d909      	bls.n	800a854 <UART_SetConfig+0xc9c>
 800a840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a842:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a846:	d205      	bcs.n	800a854 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a84a:	b29a      	uxth	r2, r3
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	60da      	str	r2, [r3, #12]
 800a852:	e002      	b.n	800a85a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a854:	2301      	movs	r3, #1
 800a856:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	2201      	movs	r2, #1
 800a85e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	2201      	movs	r2, #1
 800a866:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	2200      	movs	r2, #0
 800a86e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	2200      	movs	r2, #0
 800a874:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a876:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3748      	adds	r7, #72	@ 0x48
 800a87e:	46bd      	mov	sp, r7
 800a880:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a884:	03d09000 	.word	0x03d09000
 800a888:	003d0900 	.word	0x003d0900
 800a88c:	0800bbb4 	.word	0x0800bbb4

0800a890 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a890:	b480      	push	{r7}
 800a892:	b083      	sub	sp, #12
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a89c:	f003 0308 	and.w	r3, r3, #8
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d00a      	beq.n	800a8ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	430a      	orrs	r2, r1
 800a8b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8be:	f003 0301 	and.w	r3, r3, #1
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00a      	beq.n	800a8dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	430a      	orrs	r2, r1
 800a8da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8e0:	f003 0302 	and.w	r3, r3, #2
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d00a      	beq.n	800a8fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	430a      	orrs	r2, r1
 800a8fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a902:	f003 0304 	and.w	r3, r3, #4
 800a906:	2b00      	cmp	r3, #0
 800a908:	d00a      	beq.n	800a920 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	430a      	orrs	r2, r1
 800a91e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a924:	f003 0310 	and.w	r3, r3, #16
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d00a      	beq.n	800a942 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	689b      	ldr	r3, [r3, #8]
 800a932:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	430a      	orrs	r2, r1
 800a940:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a946:	f003 0320 	and.w	r3, r3, #32
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d00a      	beq.n	800a964 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	430a      	orrs	r2, r1
 800a962:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d01a      	beq.n	800a9a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	430a      	orrs	r2, r1
 800a984:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a98a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a98e:	d10a      	bne.n	800a9a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	430a      	orrs	r2, r1
 800a9a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00a      	beq.n	800a9c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	430a      	orrs	r2, r1
 800a9c6:	605a      	str	r2, [r3, #4]
  }
}
 800a9c8:	bf00      	nop
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b098      	sub	sp, #96	@ 0x60
 800a9d8:	af02      	add	r7, sp, #8
 800a9da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a9e4:	f7f7 ffea 	bl	80029bc <HAL_GetTick>
 800a9e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f003 0308 	and.w	r3, r3, #8
 800a9f4:	2b08      	cmp	r3, #8
 800a9f6:	d12f      	bne.n	800aa58 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a9fc:	9300      	str	r3, [sp, #0]
 800a9fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa00:	2200      	movs	r2, #0
 800aa02:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 f88e 	bl	800ab28 <UART_WaitOnFlagUntilTimeout>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d022      	beq.n	800aa58 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa1a:	e853 3f00 	ldrex	r3, [r3]
 800aa1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aa20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa26:	653b      	str	r3, [r7, #80]	@ 0x50
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa30:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa32:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa38:	e841 2300 	strex	r3, r2, [r1]
 800aa3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aa3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d1e6      	bne.n	800aa12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2220      	movs	r2, #32
 800aa48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa54:	2303      	movs	r3, #3
 800aa56:	e063      	b.n	800ab20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f003 0304 	and.w	r3, r3, #4
 800aa62:	2b04      	cmp	r3, #4
 800aa64:	d149      	bne.n	800aafa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa66:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aa6a:	9300      	str	r3, [sp, #0]
 800aa6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 f857 	bl	800ab28 <UART_WaitOnFlagUntilTimeout>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d03c      	beq.n	800aafa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa88:	e853 3f00 	ldrex	r3, [r3]
 800aa8c:	623b      	str	r3, [r7, #32]
   return(result);
 800aa8e:	6a3b      	ldr	r3, [r7, #32]
 800aa90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa9e:	633b      	str	r3, [r7, #48]	@ 0x30
 800aaa0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aaa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aaa6:	e841 2300 	strex	r3, r2, [r1]
 800aaaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aaac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d1e6      	bne.n	800aa80 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	3308      	adds	r3, #8
 800aab8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	e853 3f00 	ldrex	r3, [r3]
 800aac0:	60fb      	str	r3, [r7, #12]
   return(result);
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	f023 0301 	bic.w	r3, r3, #1
 800aac8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	3308      	adds	r3, #8
 800aad0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aad2:	61fa      	str	r2, [r7, #28]
 800aad4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad6:	69b9      	ldr	r1, [r7, #24]
 800aad8:	69fa      	ldr	r2, [r7, #28]
 800aada:	e841 2300 	strex	r3, r2, [r1]
 800aade:	617b      	str	r3, [r7, #20]
   return(result);
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d1e5      	bne.n	800aab2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2220      	movs	r2, #32
 800aaea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aaf6:	2303      	movs	r3, #3
 800aaf8:	e012      	b.n	800ab20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2220      	movs	r2, #32
 800aafe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2220      	movs	r2, #32
 800ab06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2200      	movs	r2, #0
 800ab14:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab1e:	2300      	movs	r3, #0
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3758      	adds	r7, #88	@ 0x58
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	60f8      	str	r0, [r7, #12]
 800ab30:	60b9      	str	r1, [r7, #8]
 800ab32:	603b      	str	r3, [r7, #0]
 800ab34:	4613      	mov	r3, r2
 800ab36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab38:	e04f      	b.n	800abda <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab3a:	69bb      	ldr	r3, [r7, #24]
 800ab3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab40:	d04b      	beq.n	800abda <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab42:	f7f7 ff3b 	bl	80029bc <HAL_GetTick>
 800ab46:	4602      	mov	r2, r0
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	1ad3      	subs	r3, r2, r3
 800ab4c:	69ba      	ldr	r2, [r7, #24]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d302      	bcc.n	800ab58 <UART_WaitOnFlagUntilTimeout+0x30>
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d101      	bne.n	800ab5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ab58:	2303      	movs	r3, #3
 800ab5a:	e04e      	b.n	800abfa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f003 0304 	and.w	r3, r3, #4
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d037      	beq.n	800abda <UART_WaitOnFlagUntilTimeout+0xb2>
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	2b80      	cmp	r3, #128	@ 0x80
 800ab6e:	d034      	beq.n	800abda <UART_WaitOnFlagUntilTimeout+0xb2>
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	2b40      	cmp	r3, #64	@ 0x40
 800ab74:	d031      	beq.n	800abda <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	69db      	ldr	r3, [r3, #28]
 800ab7c:	f003 0308 	and.w	r3, r3, #8
 800ab80:	2b08      	cmp	r3, #8
 800ab82:	d110      	bne.n	800aba6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	2208      	movs	r2, #8
 800ab8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ab8c:	68f8      	ldr	r0, [r7, #12]
 800ab8e:	f000 f839 	bl	800ac04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2208      	movs	r2, #8
 800ab96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	e029      	b.n	800abfa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	69db      	ldr	r3, [r3, #28]
 800abac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800abb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800abb4:	d111      	bne.n	800abda <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800abbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800abc0:	68f8      	ldr	r0, [r7, #12]
 800abc2:	f000 f81f 	bl	800ac04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2220      	movs	r2, #32
 800abca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2200      	movs	r2, #0
 800abd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800abd6:	2303      	movs	r3, #3
 800abd8:	e00f      	b.n	800abfa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	69da      	ldr	r2, [r3, #28]
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	4013      	ands	r3, r2
 800abe4:	68ba      	ldr	r2, [r7, #8]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	bf0c      	ite	eq
 800abea:	2301      	moveq	r3, #1
 800abec:	2300      	movne	r3, #0
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	461a      	mov	r2, r3
 800abf2:	79fb      	ldrb	r3, [r7, #7]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d0a0      	beq.n	800ab3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800abf8:	2300      	movs	r3, #0
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
	...

0800ac04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b095      	sub	sp, #84	@ 0x54
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac14:	e853 3f00 	ldrex	r3, [r3]
 800ac18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ac1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	461a      	mov	r2, r3
 800ac28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac2a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ac30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac32:	e841 2300 	strex	r3, r2, [r1]
 800ac36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ac38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d1e6      	bne.n	800ac0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	3308      	adds	r3, #8
 800ac44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac46:	6a3b      	ldr	r3, [r7, #32]
 800ac48:	e853 3f00 	ldrex	r3, [r3]
 800ac4c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac4e:	69fa      	ldr	r2, [r7, #28]
 800ac50:	4b1e      	ldr	r3, [pc, #120]	@ (800accc <UART_EndRxTransfer+0xc8>)
 800ac52:	4013      	ands	r3, r2
 800ac54:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	3308      	adds	r3, #8
 800ac5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ac60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac66:	e841 2300 	strex	r3, r2, [r1]
 800ac6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d1e5      	bne.n	800ac3e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d118      	bne.n	800acac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	e853 3f00 	ldrex	r3, [r3]
 800ac86:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	f023 0310 	bic.w	r3, r3, #16
 800ac8e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	461a      	mov	r2, r3
 800ac96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac98:	61bb      	str	r3, [r7, #24]
 800ac9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac9c:	6979      	ldr	r1, [r7, #20]
 800ac9e:	69ba      	ldr	r2, [r7, #24]
 800aca0:	e841 2300 	strex	r3, r2, [r1]
 800aca4:	613b      	str	r3, [r7, #16]
   return(result);
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d1e6      	bne.n	800ac7a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2220      	movs	r2, #32
 800acb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2200      	movs	r2, #0
 800acbe:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800acc0:	bf00      	nop
 800acc2:	3754      	adds	r7, #84	@ 0x54
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr
 800accc:	effffffe 	.word	0xeffffffe

0800acd0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b085      	sub	sp, #20
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d101      	bne.n	800ace6 <HAL_UARTEx_DisableFifoMode+0x16>
 800ace2:	2302      	movs	r3, #2
 800ace4:	e027      	b.n	800ad36 <HAL_UARTEx_DisableFifoMode+0x66>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2201      	movs	r2, #1
 800acea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2224      	movs	r2, #36	@ 0x24
 800acf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f022 0201 	bic.w	r2, r2, #1
 800ad0c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ad14:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2220      	movs	r2, #32
 800ad28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad34:	2300      	movs	r3, #0
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3714      	adds	r7, #20
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr

0800ad42 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad42:	b580      	push	{r7, lr}
 800ad44:	b084      	sub	sp, #16
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
 800ad4a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	d101      	bne.n	800ad5a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ad56:	2302      	movs	r3, #2
 800ad58:	e02d      	b.n	800adb6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2224      	movs	r2, #36	@ 0x24
 800ad66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f022 0201 	bic.w	r2, r2, #1
 800ad80:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	683a      	ldr	r2, [r7, #0]
 800ad92:	430a      	orrs	r2, r1
 800ad94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 f850 	bl	800ae3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	68fa      	ldr	r2, [r7, #12]
 800ada2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2220      	movs	r2, #32
 800ada8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b084      	sub	sp, #16
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
 800adc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800adce:	2b01      	cmp	r3, #1
 800add0:	d101      	bne.n	800add6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800add2:	2302      	movs	r3, #2
 800add4:	e02d      	b.n	800ae32 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2201      	movs	r2, #1
 800adda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2224      	movs	r2, #36	@ 0x24
 800ade2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f022 0201 	bic.w	r2, r2, #1
 800adfc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	683a      	ldr	r2, [r7, #0]
 800ae0e:	430a      	orrs	r2, r1
 800ae10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 f812 	bl	800ae3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2220      	movs	r2, #32
 800ae24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae30:	2300      	movs	r3, #0
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3710      	adds	r7, #16
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
	...

0800ae3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b085      	sub	sp, #20
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d108      	bne.n	800ae5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2201      	movs	r2, #1
 800ae50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2201      	movs	r2, #1
 800ae58:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ae5c:	e031      	b.n	800aec2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ae5e:	2310      	movs	r3, #16
 800ae60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ae62:	2310      	movs	r3, #16
 800ae64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	0e5b      	lsrs	r3, r3, #25
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	f003 0307 	and.w	r3, r3, #7
 800ae74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	0f5b      	lsrs	r3, r3, #29
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	f003 0307 	and.w	r3, r3, #7
 800ae84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae86:	7bbb      	ldrb	r3, [r7, #14]
 800ae88:	7b3a      	ldrb	r2, [r7, #12]
 800ae8a:	4911      	ldr	r1, [pc, #68]	@ (800aed0 <UARTEx_SetNbDataToProcess+0x94>)
 800ae8c:	5c8a      	ldrb	r2, [r1, r2]
 800ae8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ae92:	7b3a      	ldrb	r2, [r7, #12]
 800ae94:	490f      	ldr	r1, [pc, #60]	@ (800aed4 <UARTEx_SetNbDataToProcess+0x98>)
 800ae96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae98:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae9c:	b29a      	uxth	r2, r3
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aea4:	7bfb      	ldrb	r3, [r7, #15]
 800aea6:	7b7a      	ldrb	r2, [r7, #13]
 800aea8:	4909      	ldr	r1, [pc, #36]	@ (800aed0 <UARTEx_SetNbDataToProcess+0x94>)
 800aeaa:	5c8a      	ldrb	r2, [r1, r2]
 800aeac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aeb0:	7b7a      	ldrb	r2, [r7, #13]
 800aeb2:	4908      	ldr	r1, [pc, #32]	@ (800aed4 <UARTEx_SetNbDataToProcess+0x98>)
 800aeb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aeb6:	fb93 f3f2 	sdiv	r3, r3, r2
 800aeba:	b29a      	uxth	r2, r3
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800aec2:	bf00      	nop
 800aec4:	3714      	adds	r7, #20
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr
 800aece:	bf00      	nop
 800aed0:	0800bbcc 	.word	0x0800bbcc
 800aed4:	0800bbd4 	.word	0x0800bbd4

0800aed8 <siprintf>:
 800aed8:	b40e      	push	{r1, r2, r3}
 800aeda:	b510      	push	{r4, lr}
 800aedc:	b09d      	sub	sp, #116	@ 0x74
 800aede:	ab1f      	add	r3, sp, #124	@ 0x7c
 800aee0:	9002      	str	r0, [sp, #8]
 800aee2:	9006      	str	r0, [sp, #24]
 800aee4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aee8:	480a      	ldr	r0, [pc, #40]	@ (800af14 <siprintf+0x3c>)
 800aeea:	9107      	str	r1, [sp, #28]
 800aeec:	9104      	str	r1, [sp, #16]
 800aeee:	490a      	ldr	r1, [pc, #40]	@ (800af18 <siprintf+0x40>)
 800aef0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aef4:	9105      	str	r1, [sp, #20]
 800aef6:	2400      	movs	r4, #0
 800aef8:	a902      	add	r1, sp, #8
 800aefa:	6800      	ldr	r0, [r0, #0]
 800aefc:	9301      	str	r3, [sp, #4]
 800aefe:	941b      	str	r4, [sp, #108]	@ 0x6c
 800af00:	f000 f9a2 	bl	800b248 <_svfiprintf_r>
 800af04:	9b02      	ldr	r3, [sp, #8]
 800af06:	701c      	strb	r4, [r3, #0]
 800af08:	b01d      	add	sp, #116	@ 0x74
 800af0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af0e:	b003      	add	sp, #12
 800af10:	4770      	bx	lr
 800af12:	bf00      	nop
 800af14:	24000018 	.word	0x24000018
 800af18:	ffff0208 	.word	0xffff0208

0800af1c <memset>:
 800af1c:	4402      	add	r2, r0
 800af1e:	4603      	mov	r3, r0
 800af20:	4293      	cmp	r3, r2
 800af22:	d100      	bne.n	800af26 <memset+0xa>
 800af24:	4770      	bx	lr
 800af26:	f803 1b01 	strb.w	r1, [r3], #1
 800af2a:	e7f9      	b.n	800af20 <memset+0x4>

0800af2c <__errno>:
 800af2c:	4b01      	ldr	r3, [pc, #4]	@ (800af34 <__errno+0x8>)
 800af2e:	6818      	ldr	r0, [r3, #0]
 800af30:	4770      	bx	lr
 800af32:	bf00      	nop
 800af34:	24000018 	.word	0x24000018

0800af38 <__libc_init_array>:
 800af38:	b570      	push	{r4, r5, r6, lr}
 800af3a:	4d0d      	ldr	r5, [pc, #52]	@ (800af70 <__libc_init_array+0x38>)
 800af3c:	4c0d      	ldr	r4, [pc, #52]	@ (800af74 <__libc_init_array+0x3c>)
 800af3e:	1b64      	subs	r4, r4, r5
 800af40:	10a4      	asrs	r4, r4, #2
 800af42:	2600      	movs	r6, #0
 800af44:	42a6      	cmp	r6, r4
 800af46:	d109      	bne.n	800af5c <__libc_init_array+0x24>
 800af48:	4d0b      	ldr	r5, [pc, #44]	@ (800af78 <__libc_init_array+0x40>)
 800af4a:	4c0c      	ldr	r4, [pc, #48]	@ (800af7c <__libc_init_array+0x44>)
 800af4c:	f000 fc64 	bl	800b818 <_init>
 800af50:	1b64      	subs	r4, r4, r5
 800af52:	10a4      	asrs	r4, r4, #2
 800af54:	2600      	movs	r6, #0
 800af56:	42a6      	cmp	r6, r4
 800af58:	d105      	bne.n	800af66 <__libc_init_array+0x2e>
 800af5a:	bd70      	pop	{r4, r5, r6, pc}
 800af5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800af60:	4798      	blx	r3
 800af62:	3601      	adds	r6, #1
 800af64:	e7ee      	b.n	800af44 <__libc_init_array+0xc>
 800af66:	f855 3b04 	ldr.w	r3, [r5], #4
 800af6a:	4798      	blx	r3
 800af6c:	3601      	adds	r6, #1
 800af6e:	e7f2      	b.n	800af56 <__libc_init_array+0x1e>
 800af70:	0800bc18 	.word	0x0800bc18
 800af74:	0800bc18 	.word	0x0800bc18
 800af78:	0800bc18 	.word	0x0800bc18
 800af7c:	0800bc20 	.word	0x0800bc20

0800af80 <__retarget_lock_acquire_recursive>:
 800af80:	4770      	bx	lr

0800af82 <__retarget_lock_release_recursive>:
 800af82:	4770      	bx	lr

0800af84 <memcpy>:
 800af84:	440a      	add	r2, r1
 800af86:	4291      	cmp	r1, r2
 800af88:	f100 33ff 	add.w	r3, r0, #4294967295
 800af8c:	d100      	bne.n	800af90 <memcpy+0xc>
 800af8e:	4770      	bx	lr
 800af90:	b510      	push	{r4, lr}
 800af92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af9a:	4291      	cmp	r1, r2
 800af9c:	d1f9      	bne.n	800af92 <memcpy+0xe>
 800af9e:	bd10      	pop	{r4, pc}

0800afa0 <_free_r>:
 800afa0:	b538      	push	{r3, r4, r5, lr}
 800afa2:	4605      	mov	r5, r0
 800afa4:	2900      	cmp	r1, #0
 800afa6:	d041      	beq.n	800b02c <_free_r+0x8c>
 800afa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afac:	1f0c      	subs	r4, r1, #4
 800afae:	2b00      	cmp	r3, #0
 800afb0:	bfb8      	it	lt
 800afb2:	18e4      	addlt	r4, r4, r3
 800afb4:	f000 f8e0 	bl	800b178 <__malloc_lock>
 800afb8:	4a1d      	ldr	r2, [pc, #116]	@ (800b030 <_free_r+0x90>)
 800afba:	6813      	ldr	r3, [r2, #0]
 800afbc:	b933      	cbnz	r3, 800afcc <_free_r+0x2c>
 800afbe:	6063      	str	r3, [r4, #4]
 800afc0:	6014      	str	r4, [r2, #0]
 800afc2:	4628      	mov	r0, r5
 800afc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afc8:	f000 b8dc 	b.w	800b184 <__malloc_unlock>
 800afcc:	42a3      	cmp	r3, r4
 800afce:	d908      	bls.n	800afe2 <_free_r+0x42>
 800afd0:	6820      	ldr	r0, [r4, #0]
 800afd2:	1821      	adds	r1, r4, r0
 800afd4:	428b      	cmp	r3, r1
 800afd6:	bf01      	itttt	eq
 800afd8:	6819      	ldreq	r1, [r3, #0]
 800afda:	685b      	ldreq	r3, [r3, #4]
 800afdc:	1809      	addeq	r1, r1, r0
 800afde:	6021      	streq	r1, [r4, #0]
 800afe0:	e7ed      	b.n	800afbe <_free_r+0x1e>
 800afe2:	461a      	mov	r2, r3
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	b10b      	cbz	r3, 800afec <_free_r+0x4c>
 800afe8:	42a3      	cmp	r3, r4
 800afea:	d9fa      	bls.n	800afe2 <_free_r+0x42>
 800afec:	6811      	ldr	r1, [r2, #0]
 800afee:	1850      	adds	r0, r2, r1
 800aff0:	42a0      	cmp	r0, r4
 800aff2:	d10b      	bne.n	800b00c <_free_r+0x6c>
 800aff4:	6820      	ldr	r0, [r4, #0]
 800aff6:	4401      	add	r1, r0
 800aff8:	1850      	adds	r0, r2, r1
 800affa:	4283      	cmp	r3, r0
 800affc:	6011      	str	r1, [r2, #0]
 800affe:	d1e0      	bne.n	800afc2 <_free_r+0x22>
 800b000:	6818      	ldr	r0, [r3, #0]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	6053      	str	r3, [r2, #4]
 800b006:	4408      	add	r0, r1
 800b008:	6010      	str	r0, [r2, #0]
 800b00a:	e7da      	b.n	800afc2 <_free_r+0x22>
 800b00c:	d902      	bls.n	800b014 <_free_r+0x74>
 800b00e:	230c      	movs	r3, #12
 800b010:	602b      	str	r3, [r5, #0]
 800b012:	e7d6      	b.n	800afc2 <_free_r+0x22>
 800b014:	6820      	ldr	r0, [r4, #0]
 800b016:	1821      	adds	r1, r4, r0
 800b018:	428b      	cmp	r3, r1
 800b01a:	bf04      	itt	eq
 800b01c:	6819      	ldreq	r1, [r3, #0]
 800b01e:	685b      	ldreq	r3, [r3, #4]
 800b020:	6063      	str	r3, [r4, #4]
 800b022:	bf04      	itt	eq
 800b024:	1809      	addeq	r1, r1, r0
 800b026:	6021      	streq	r1, [r4, #0]
 800b028:	6054      	str	r4, [r2, #4]
 800b02a:	e7ca      	b.n	800afc2 <_free_r+0x22>
 800b02c:	bd38      	pop	{r3, r4, r5, pc}
 800b02e:	bf00      	nop
 800b030:	24000804 	.word	0x24000804

0800b034 <sbrk_aligned>:
 800b034:	b570      	push	{r4, r5, r6, lr}
 800b036:	4e0f      	ldr	r6, [pc, #60]	@ (800b074 <sbrk_aligned+0x40>)
 800b038:	460c      	mov	r4, r1
 800b03a:	6831      	ldr	r1, [r6, #0]
 800b03c:	4605      	mov	r5, r0
 800b03e:	b911      	cbnz	r1, 800b046 <sbrk_aligned+0x12>
 800b040:	f000 fba4 	bl	800b78c <_sbrk_r>
 800b044:	6030      	str	r0, [r6, #0]
 800b046:	4621      	mov	r1, r4
 800b048:	4628      	mov	r0, r5
 800b04a:	f000 fb9f 	bl	800b78c <_sbrk_r>
 800b04e:	1c43      	adds	r3, r0, #1
 800b050:	d103      	bne.n	800b05a <sbrk_aligned+0x26>
 800b052:	f04f 34ff 	mov.w	r4, #4294967295
 800b056:	4620      	mov	r0, r4
 800b058:	bd70      	pop	{r4, r5, r6, pc}
 800b05a:	1cc4      	adds	r4, r0, #3
 800b05c:	f024 0403 	bic.w	r4, r4, #3
 800b060:	42a0      	cmp	r0, r4
 800b062:	d0f8      	beq.n	800b056 <sbrk_aligned+0x22>
 800b064:	1a21      	subs	r1, r4, r0
 800b066:	4628      	mov	r0, r5
 800b068:	f000 fb90 	bl	800b78c <_sbrk_r>
 800b06c:	3001      	adds	r0, #1
 800b06e:	d1f2      	bne.n	800b056 <sbrk_aligned+0x22>
 800b070:	e7ef      	b.n	800b052 <sbrk_aligned+0x1e>
 800b072:	bf00      	nop
 800b074:	24000800 	.word	0x24000800

0800b078 <_malloc_r>:
 800b078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b07c:	1ccd      	adds	r5, r1, #3
 800b07e:	f025 0503 	bic.w	r5, r5, #3
 800b082:	3508      	adds	r5, #8
 800b084:	2d0c      	cmp	r5, #12
 800b086:	bf38      	it	cc
 800b088:	250c      	movcc	r5, #12
 800b08a:	2d00      	cmp	r5, #0
 800b08c:	4606      	mov	r6, r0
 800b08e:	db01      	blt.n	800b094 <_malloc_r+0x1c>
 800b090:	42a9      	cmp	r1, r5
 800b092:	d904      	bls.n	800b09e <_malloc_r+0x26>
 800b094:	230c      	movs	r3, #12
 800b096:	6033      	str	r3, [r6, #0]
 800b098:	2000      	movs	r0, #0
 800b09a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b09e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b174 <_malloc_r+0xfc>
 800b0a2:	f000 f869 	bl	800b178 <__malloc_lock>
 800b0a6:	f8d8 3000 	ldr.w	r3, [r8]
 800b0aa:	461c      	mov	r4, r3
 800b0ac:	bb44      	cbnz	r4, 800b100 <_malloc_r+0x88>
 800b0ae:	4629      	mov	r1, r5
 800b0b0:	4630      	mov	r0, r6
 800b0b2:	f7ff ffbf 	bl	800b034 <sbrk_aligned>
 800b0b6:	1c43      	adds	r3, r0, #1
 800b0b8:	4604      	mov	r4, r0
 800b0ba:	d158      	bne.n	800b16e <_malloc_r+0xf6>
 800b0bc:	f8d8 4000 	ldr.w	r4, [r8]
 800b0c0:	4627      	mov	r7, r4
 800b0c2:	2f00      	cmp	r7, #0
 800b0c4:	d143      	bne.n	800b14e <_malloc_r+0xd6>
 800b0c6:	2c00      	cmp	r4, #0
 800b0c8:	d04b      	beq.n	800b162 <_malloc_r+0xea>
 800b0ca:	6823      	ldr	r3, [r4, #0]
 800b0cc:	4639      	mov	r1, r7
 800b0ce:	4630      	mov	r0, r6
 800b0d0:	eb04 0903 	add.w	r9, r4, r3
 800b0d4:	f000 fb5a 	bl	800b78c <_sbrk_r>
 800b0d8:	4581      	cmp	r9, r0
 800b0da:	d142      	bne.n	800b162 <_malloc_r+0xea>
 800b0dc:	6821      	ldr	r1, [r4, #0]
 800b0de:	1a6d      	subs	r5, r5, r1
 800b0e0:	4629      	mov	r1, r5
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	f7ff ffa6 	bl	800b034 <sbrk_aligned>
 800b0e8:	3001      	adds	r0, #1
 800b0ea:	d03a      	beq.n	800b162 <_malloc_r+0xea>
 800b0ec:	6823      	ldr	r3, [r4, #0]
 800b0ee:	442b      	add	r3, r5
 800b0f0:	6023      	str	r3, [r4, #0]
 800b0f2:	f8d8 3000 	ldr.w	r3, [r8]
 800b0f6:	685a      	ldr	r2, [r3, #4]
 800b0f8:	bb62      	cbnz	r2, 800b154 <_malloc_r+0xdc>
 800b0fa:	f8c8 7000 	str.w	r7, [r8]
 800b0fe:	e00f      	b.n	800b120 <_malloc_r+0xa8>
 800b100:	6822      	ldr	r2, [r4, #0]
 800b102:	1b52      	subs	r2, r2, r5
 800b104:	d420      	bmi.n	800b148 <_malloc_r+0xd0>
 800b106:	2a0b      	cmp	r2, #11
 800b108:	d917      	bls.n	800b13a <_malloc_r+0xc2>
 800b10a:	1961      	adds	r1, r4, r5
 800b10c:	42a3      	cmp	r3, r4
 800b10e:	6025      	str	r5, [r4, #0]
 800b110:	bf18      	it	ne
 800b112:	6059      	strne	r1, [r3, #4]
 800b114:	6863      	ldr	r3, [r4, #4]
 800b116:	bf08      	it	eq
 800b118:	f8c8 1000 	streq.w	r1, [r8]
 800b11c:	5162      	str	r2, [r4, r5]
 800b11e:	604b      	str	r3, [r1, #4]
 800b120:	4630      	mov	r0, r6
 800b122:	f000 f82f 	bl	800b184 <__malloc_unlock>
 800b126:	f104 000b 	add.w	r0, r4, #11
 800b12a:	1d23      	adds	r3, r4, #4
 800b12c:	f020 0007 	bic.w	r0, r0, #7
 800b130:	1ac2      	subs	r2, r0, r3
 800b132:	bf1c      	itt	ne
 800b134:	1a1b      	subne	r3, r3, r0
 800b136:	50a3      	strne	r3, [r4, r2]
 800b138:	e7af      	b.n	800b09a <_malloc_r+0x22>
 800b13a:	6862      	ldr	r2, [r4, #4]
 800b13c:	42a3      	cmp	r3, r4
 800b13e:	bf0c      	ite	eq
 800b140:	f8c8 2000 	streq.w	r2, [r8]
 800b144:	605a      	strne	r2, [r3, #4]
 800b146:	e7eb      	b.n	800b120 <_malloc_r+0xa8>
 800b148:	4623      	mov	r3, r4
 800b14a:	6864      	ldr	r4, [r4, #4]
 800b14c:	e7ae      	b.n	800b0ac <_malloc_r+0x34>
 800b14e:	463c      	mov	r4, r7
 800b150:	687f      	ldr	r7, [r7, #4]
 800b152:	e7b6      	b.n	800b0c2 <_malloc_r+0x4a>
 800b154:	461a      	mov	r2, r3
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	42a3      	cmp	r3, r4
 800b15a:	d1fb      	bne.n	800b154 <_malloc_r+0xdc>
 800b15c:	2300      	movs	r3, #0
 800b15e:	6053      	str	r3, [r2, #4]
 800b160:	e7de      	b.n	800b120 <_malloc_r+0xa8>
 800b162:	230c      	movs	r3, #12
 800b164:	6033      	str	r3, [r6, #0]
 800b166:	4630      	mov	r0, r6
 800b168:	f000 f80c 	bl	800b184 <__malloc_unlock>
 800b16c:	e794      	b.n	800b098 <_malloc_r+0x20>
 800b16e:	6005      	str	r5, [r0, #0]
 800b170:	e7d6      	b.n	800b120 <_malloc_r+0xa8>
 800b172:	bf00      	nop
 800b174:	24000804 	.word	0x24000804

0800b178 <__malloc_lock>:
 800b178:	4801      	ldr	r0, [pc, #4]	@ (800b180 <__malloc_lock+0x8>)
 800b17a:	f7ff bf01 	b.w	800af80 <__retarget_lock_acquire_recursive>
 800b17e:	bf00      	nop
 800b180:	240007fc 	.word	0x240007fc

0800b184 <__malloc_unlock>:
 800b184:	4801      	ldr	r0, [pc, #4]	@ (800b18c <__malloc_unlock+0x8>)
 800b186:	f7ff befc 	b.w	800af82 <__retarget_lock_release_recursive>
 800b18a:	bf00      	nop
 800b18c:	240007fc 	.word	0x240007fc

0800b190 <__ssputs_r>:
 800b190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b194:	688e      	ldr	r6, [r1, #8]
 800b196:	461f      	mov	r7, r3
 800b198:	42be      	cmp	r6, r7
 800b19a:	680b      	ldr	r3, [r1, #0]
 800b19c:	4682      	mov	sl, r0
 800b19e:	460c      	mov	r4, r1
 800b1a0:	4690      	mov	r8, r2
 800b1a2:	d82d      	bhi.n	800b200 <__ssputs_r+0x70>
 800b1a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b1a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b1ac:	d026      	beq.n	800b1fc <__ssputs_r+0x6c>
 800b1ae:	6965      	ldr	r5, [r4, #20]
 800b1b0:	6909      	ldr	r1, [r1, #16]
 800b1b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1b6:	eba3 0901 	sub.w	r9, r3, r1
 800b1ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1be:	1c7b      	adds	r3, r7, #1
 800b1c0:	444b      	add	r3, r9
 800b1c2:	106d      	asrs	r5, r5, #1
 800b1c4:	429d      	cmp	r5, r3
 800b1c6:	bf38      	it	cc
 800b1c8:	461d      	movcc	r5, r3
 800b1ca:	0553      	lsls	r3, r2, #21
 800b1cc:	d527      	bpl.n	800b21e <__ssputs_r+0x8e>
 800b1ce:	4629      	mov	r1, r5
 800b1d0:	f7ff ff52 	bl	800b078 <_malloc_r>
 800b1d4:	4606      	mov	r6, r0
 800b1d6:	b360      	cbz	r0, 800b232 <__ssputs_r+0xa2>
 800b1d8:	6921      	ldr	r1, [r4, #16]
 800b1da:	464a      	mov	r2, r9
 800b1dc:	f7ff fed2 	bl	800af84 <memcpy>
 800b1e0:	89a3      	ldrh	r3, [r4, #12]
 800b1e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b1e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1ea:	81a3      	strh	r3, [r4, #12]
 800b1ec:	6126      	str	r6, [r4, #16]
 800b1ee:	6165      	str	r5, [r4, #20]
 800b1f0:	444e      	add	r6, r9
 800b1f2:	eba5 0509 	sub.w	r5, r5, r9
 800b1f6:	6026      	str	r6, [r4, #0]
 800b1f8:	60a5      	str	r5, [r4, #8]
 800b1fa:	463e      	mov	r6, r7
 800b1fc:	42be      	cmp	r6, r7
 800b1fe:	d900      	bls.n	800b202 <__ssputs_r+0x72>
 800b200:	463e      	mov	r6, r7
 800b202:	6820      	ldr	r0, [r4, #0]
 800b204:	4632      	mov	r2, r6
 800b206:	4641      	mov	r1, r8
 800b208:	f000 faa6 	bl	800b758 <memmove>
 800b20c:	68a3      	ldr	r3, [r4, #8]
 800b20e:	1b9b      	subs	r3, r3, r6
 800b210:	60a3      	str	r3, [r4, #8]
 800b212:	6823      	ldr	r3, [r4, #0]
 800b214:	4433      	add	r3, r6
 800b216:	6023      	str	r3, [r4, #0]
 800b218:	2000      	movs	r0, #0
 800b21a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b21e:	462a      	mov	r2, r5
 800b220:	f000 fac4 	bl	800b7ac <_realloc_r>
 800b224:	4606      	mov	r6, r0
 800b226:	2800      	cmp	r0, #0
 800b228:	d1e0      	bne.n	800b1ec <__ssputs_r+0x5c>
 800b22a:	6921      	ldr	r1, [r4, #16]
 800b22c:	4650      	mov	r0, sl
 800b22e:	f7ff feb7 	bl	800afa0 <_free_r>
 800b232:	230c      	movs	r3, #12
 800b234:	f8ca 3000 	str.w	r3, [sl]
 800b238:	89a3      	ldrh	r3, [r4, #12]
 800b23a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b23e:	81a3      	strh	r3, [r4, #12]
 800b240:	f04f 30ff 	mov.w	r0, #4294967295
 800b244:	e7e9      	b.n	800b21a <__ssputs_r+0x8a>
	...

0800b248 <_svfiprintf_r>:
 800b248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b24c:	4698      	mov	r8, r3
 800b24e:	898b      	ldrh	r3, [r1, #12]
 800b250:	061b      	lsls	r3, r3, #24
 800b252:	b09d      	sub	sp, #116	@ 0x74
 800b254:	4607      	mov	r7, r0
 800b256:	460d      	mov	r5, r1
 800b258:	4614      	mov	r4, r2
 800b25a:	d510      	bpl.n	800b27e <_svfiprintf_r+0x36>
 800b25c:	690b      	ldr	r3, [r1, #16]
 800b25e:	b973      	cbnz	r3, 800b27e <_svfiprintf_r+0x36>
 800b260:	2140      	movs	r1, #64	@ 0x40
 800b262:	f7ff ff09 	bl	800b078 <_malloc_r>
 800b266:	6028      	str	r0, [r5, #0]
 800b268:	6128      	str	r0, [r5, #16]
 800b26a:	b930      	cbnz	r0, 800b27a <_svfiprintf_r+0x32>
 800b26c:	230c      	movs	r3, #12
 800b26e:	603b      	str	r3, [r7, #0]
 800b270:	f04f 30ff 	mov.w	r0, #4294967295
 800b274:	b01d      	add	sp, #116	@ 0x74
 800b276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b27a:	2340      	movs	r3, #64	@ 0x40
 800b27c:	616b      	str	r3, [r5, #20]
 800b27e:	2300      	movs	r3, #0
 800b280:	9309      	str	r3, [sp, #36]	@ 0x24
 800b282:	2320      	movs	r3, #32
 800b284:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b288:	f8cd 800c 	str.w	r8, [sp, #12]
 800b28c:	2330      	movs	r3, #48	@ 0x30
 800b28e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b42c <_svfiprintf_r+0x1e4>
 800b292:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b296:	f04f 0901 	mov.w	r9, #1
 800b29a:	4623      	mov	r3, r4
 800b29c:	469a      	mov	sl, r3
 800b29e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2a2:	b10a      	cbz	r2, 800b2a8 <_svfiprintf_r+0x60>
 800b2a4:	2a25      	cmp	r2, #37	@ 0x25
 800b2a6:	d1f9      	bne.n	800b29c <_svfiprintf_r+0x54>
 800b2a8:	ebba 0b04 	subs.w	fp, sl, r4
 800b2ac:	d00b      	beq.n	800b2c6 <_svfiprintf_r+0x7e>
 800b2ae:	465b      	mov	r3, fp
 800b2b0:	4622      	mov	r2, r4
 800b2b2:	4629      	mov	r1, r5
 800b2b4:	4638      	mov	r0, r7
 800b2b6:	f7ff ff6b 	bl	800b190 <__ssputs_r>
 800b2ba:	3001      	adds	r0, #1
 800b2bc:	f000 80a7 	beq.w	800b40e <_svfiprintf_r+0x1c6>
 800b2c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2c2:	445a      	add	r2, fp
 800b2c4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b2c6:	f89a 3000 	ldrb.w	r3, [sl]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	f000 809f 	beq.w	800b40e <_svfiprintf_r+0x1c6>
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b2d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2da:	f10a 0a01 	add.w	sl, sl, #1
 800b2de:	9304      	str	r3, [sp, #16]
 800b2e0:	9307      	str	r3, [sp, #28]
 800b2e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b2e6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b2e8:	4654      	mov	r4, sl
 800b2ea:	2205      	movs	r2, #5
 800b2ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2f0:	484e      	ldr	r0, [pc, #312]	@ (800b42c <_svfiprintf_r+0x1e4>)
 800b2f2:	f7f5 f815 	bl	8000320 <memchr>
 800b2f6:	9a04      	ldr	r2, [sp, #16]
 800b2f8:	b9d8      	cbnz	r0, 800b332 <_svfiprintf_r+0xea>
 800b2fa:	06d0      	lsls	r0, r2, #27
 800b2fc:	bf44      	itt	mi
 800b2fe:	2320      	movmi	r3, #32
 800b300:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b304:	0711      	lsls	r1, r2, #28
 800b306:	bf44      	itt	mi
 800b308:	232b      	movmi	r3, #43	@ 0x2b
 800b30a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b30e:	f89a 3000 	ldrb.w	r3, [sl]
 800b312:	2b2a      	cmp	r3, #42	@ 0x2a
 800b314:	d015      	beq.n	800b342 <_svfiprintf_r+0xfa>
 800b316:	9a07      	ldr	r2, [sp, #28]
 800b318:	4654      	mov	r4, sl
 800b31a:	2000      	movs	r0, #0
 800b31c:	f04f 0c0a 	mov.w	ip, #10
 800b320:	4621      	mov	r1, r4
 800b322:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b326:	3b30      	subs	r3, #48	@ 0x30
 800b328:	2b09      	cmp	r3, #9
 800b32a:	d94b      	bls.n	800b3c4 <_svfiprintf_r+0x17c>
 800b32c:	b1b0      	cbz	r0, 800b35c <_svfiprintf_r+0x114>
 800b32e:	9207      	str	r2, [sp, #28]
 800b330:	e014      	b.n	800b35c <_svfiprintf_r+0x114>
 800b332:	eba0 0308 	sub.w	r3, r0, r8
 800b336:	fa09 f303 	lsl.w	r3, r9, r3
 800b33a:	4313      	orrs	r3, r2
 800b33c:	9304      	str	r3, [sp, #16]
 800b33e:	46a2      	mov	sl, r4
 800b340:	e7d2      	b.n	800b2e8 <_svfiprintf_r+0xa0>
 800b342:	9b03      	ldr	r3, [sp, #12]
 800b344:	1d19      	adds	r1, r3, #4
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	9103      	str	r1, [sp, #12]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	bfbb      	ittet	lt
 800b34e:	425b      	neglt	r3, r3
 800b350:	f042 0202 	orrlt.w	r2, r2, #2
 800b354:	9307      	strge	r3, [sp, #28]
 800b356:	9307      	strlt	r3, [sp, #28]
 800b358:	bfb8      	it	lt
 800b35a:	9204      	strlt	r2, [sp, #16]
 800b35c:	7823      	ldrb	r3, [r4, #0]
 800b35e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b360:	d10a      	bne.n	800b378 <_svfiprintf_r+0x130>
 800b362:	7863      	ldrb	r3, [r4, #1]
 800b364:	2b2a      	cmp	r3, #42	@ 0x2a
 800b366:	d132      	bne.n	800b3ce <_svfiprintf_r+0x186>
 800b368:	9b03      	ldr	r3, [sp, #12]
 800b36a:	1d1a      	adds	r2, r3, #4
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	9203      	str	r2, [sp, #12]
 800b370:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b374:	3402      	adds	r4, #2
 800b376:	9305      	str	r3, [sp, #20]
 800b378:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b43c <_svfiprintf_r+0x1f4>
 800b37c:	7821      	ldrb	r1, [r4, #0]
 800b37e:	2203      	movs	r2, #3
 800b380:	4650      	mov	r0, sl
 800b382:	f7f4 ffcd 	bl	8000320 <memchr>
 800b386:	b138      	cbz	r0, 800b398 <_svfiprintf_r+0x150>
 800b388:	9b04      	ldr	r3, [sp, #16]
 800b38a:	eba0 000a 	sub.w	r0, r0, sl
 800b38e:	2240      	movs	r2, #64	@ 0x40
 800b390:	4082      	lsls	r2, r0
 800b392:	4313      	orrs	r3, r2
 800b394:	3401      	adds	r4, #1
 800b396:	9304      	str	r3, [sp, #16]
 800b398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b39c:	4824      	ldr	r0, [pc, #144]	@ (800b430 <_svfiprintf_r+0x1e8>)
 800b39e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b3a2:	2206      	movs	r2, #6
 800b3a4:	f7f4 ffbc 	bl	8000320 <memchr>
 800b3a8:	2800      	cmp	r0, #0
 800b3aa:	d036      	beq.n	800b41a <_svfiprintf_r+0x1d2>
 800b3ac:	4b21      	ldr	r3, [pc, #132]	@ (800b434 <_svfiprintf_r+0x1ec>)
 800b3ae:	bb1b      	cbnz	r3, 800b3f8 <_svfiprintf_r+0x1b0>
 800b3b0:	9b03      	ldr	r3, [sp, #12]
 800b3b2:	3307      	adds	r3, #7
 800b3b4:	f023 0307 	bic.w	r3, r3, #7
 800b3b8:	3308      	adds	r3, #8
 800b3ba:	9303      	str	r3, [sp, #12]
 800b3bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3be:	4433      	add	r3, r6
 800b3c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3c2:	e76a      	b.n	800b29a <_svfiprintf_r+0x52>
 800b3c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3c8:	460c      	mov	r4, r1
 800b3ca:	2001      	movs	r0, #1
 800b3cc:	e7a8      	b.n	800b320 <_svfiprintf_r+0xd8>
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	3401      	adds	r4, #1
 800b3d2:	9305      	str	r3, [sp, #20]
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	f04f 0c0a 	mov.w	ip, #10
 800b3da:	4620      	mov	r0, r4
 800b3dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3e0:	3a30      	subs	r2, #48	@ 0x30
 800b3e2:	2a09      	cmp	r2, #9
 800b3e4:	d903      	bls.n	800b3ee <_svfiprintf_r+0x1a6>
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d0c6      	beq.n	800b378 <_svfiprintf_r+0x130>
 800b3ea:	9105      	str	r1, [sp, #20]
 800b3ec:	e7c4      	b.n	800b378 <_svfiprintf_r+0x130>
 800b3ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3f2:	4604      	mov	r4, r0
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	e7f0      	b.n	800b3da <_svfiprintf_r+0x192>
 800b3f8:	ab03      	add	r3, sp, #12
 800b3fa:	9300      	str	r3, [sp, #0]
 800b3fc:	462a      	mov	r2, r5
 800b3fe:	4b0e      	ldr	r3, [pc, #56]	@ (800b438 <_svfiprintf_r+0x1f0>)
 800b400:	a904      	add	r1, sp, #16
 800b402:	4638      	mov	r0, r7
 800b404:	f3af 8000 	nop.w
 800b408:	1c42      	adds	r2, r0, #1
 800b40a:	4606      	mov	r6, r0
 800b40c:	d1d6      	bne.n	800b3bc <_svfiprintf_r+0x174>
 800b40e:	89ab      	ldrh	r3, [r5, #12]
 800b410:	065b      	lsls	r3, r3, #25
 800b412:	f53f af2d 	bmi.w	800b270 <_svfiprintf_r+0x28>
 800b416:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b418:	e72c      	b.n	800b274 <_svfiprintf_r+0x2c>
 800b41a:	ab03      	add	r3, sp, #12
 800b41c:	9300      	str	r3, [sp, #0]
 800b41e:	462a      	mov	r2, r5
 800b420:	4b05      	ldr	r3, [pc, #20]	@ (800b438 <_svfiprintf_r+0x1f0>)
 800b422:	a904      	add	r1, sp, #16
 800b424:	4638      	mov	r0, r7
 800b426:	f000 f879 	bl	800b51c <_printf_i>
 800b42a:	e7ed      	b.n	800b408 <_svfiprintf_r+0x1c0>
 800b42c:	0800bbdc 	.word	0x0800bbdc
 800b430:	0800bbe6 	.word	0x0800bbe6
 800b434:	00000000 	.word	0x00000000
 800b438:	0800b191 	.word	0x0800b191
 800b43c:	0800bbe2 	.word	0x0800bbe2

0800b440 <_printf_common>:
 800b440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b444:	4616      	mov	r6, r2
 800b446:	4698      	mov	r8, r3
 800b448:	688a      	ldr	r2, [r1, #8]
 800b44a:	690b      	ldr	r3, [r1, #16]
 800b44c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b450:	4293      	cmp	r3, r2
 800b452:	bfb8      	it	lt
 800b454:	4613      	movlt	r3, r2
 800b456:	6033      	str	r3, [r6, #0]
 800b458:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b45c:	4607      	mov	r7, r0
 800b45e:	460c      	mov	r4, r1
 800b460:	b10a      	cbz	r2, 800b466 <_printf_common+0x26>
 800b462:	3301      	adds	r3, #1
 800b464:	6033      	str	r3, [r6, #0]
 800b466:	6823      	ldr	r3, [r4, #0]
 800b468:	0699      	lsls	r1, r3, #26
 800b46a:	bf42      	ittt	mi
 800b46c:	6833      	ldrmi	r3, [r6, #0]
 800b46e:	3302      	addmi	r3, #2
 800b470:	6033      	strmi	r3, [r6, #0]
 800b472:	6825      	ldr	r5, [r4, #0]
 800b474:	f015 0506 	ands.w	r5, r5, #6
 800b478:	d106      	bne.n	800b488 <_printf_common+0x48>
 800b47a:	f104 0a19 	add.w	sl, r4, #25
 800b47e:	68e3      	ldr	r3, [r4, #12]
 800b480:	6832      	ldr	r2, [r6, #0]
 800b482:	1a9b      	subs	r3, r3, r2
 800b484:	42ab      	cmp	r3, r5
 800b486:	dc26      	bgt.n	800b4d6 <_printf_common+0x96>
 800b488:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b48c:	6822      	ldr	r2, [r4, #0]
 800b48e:	3b00      	subs	r3, #0
 800b490:	bf18      	it	ne
 800b492:	2301      	movne	r3, #1
 800b494:	0692      	lsls	r2, r2, #26
 800b496:	d42b      	bmi.n	800b4f0 <_printf_common+0xb0>
 800b498:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b49c:	4641      	mov	r1, r8
 800b49e:	4638      	mov	r0, r7
 800b4a0:	47c8      	blx	r9
 800b4a2:	3001      	adds	r0, #1
 800b4a4:	d01e      	beq.n	800b4e4 <_printf_common+0xa4>
 800b4a6:	6823      	ldr	r3, [r4, #0]
 800b4a8:	6922      	ldr	r2, [r4, #16]
 800b4aa:	f003 0306 	and.w	r3, r3, #6
 800b4ae:	2b04      	cmp	r3, #4
 800b4b0:	bf02      	ittt	eq
 800b4b2:	68e5      	ldreq	r5, [r4, #12]
 800b4b4:	6833      	ldreq	r3, [r6, #0]
 800b4b6:	1aed      	subeq	r5, r5, r3
 800b4b8:	68a3      	ldr	r3, [r4, #8]
 800b4ba:	bf0c      	ite	eq
 800b4bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4c0:	2500      	movne	r5, #0
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	bfc4      	itt	gt
 800b4c6:	1a9b      	subgt	r3, r3, r2
 800b4c8:	18ed      	addgt	r5, r5, r3
 800b4ca:	2600      	movs	r6, #0
 800b4cc:	341a      	adds	r4, #26
 800b4ce:	42b5      	cmp	r5, r6
 800b4d0:	d11a      	bne.n	800b508 <_printf_common+0xc8>
 800b4d2:	2000      	movs	r0, #0
 800b4d4:	e008      	b.n	800b4e8 <_printf_common+0xa8>
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	4652      	mov	r2, sl
 800b4da:	4641      	mov	r1, r8
 800b4dc:	4638      	mov	r0, r7
 800b4de:	47c8      	blx	r9
 800b4e0:	3001      	adds	r0, #1
 800b4e2:	d103      	bne.n	800b4ec <_printf_common+0xac>
 800b4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4ec:	3501      	adds	r5, #1
 800b4ee:	e7c6      	b.n	800b47e <_printf_common+0x3e>
 800b4f0:	18e1      	adds	r1, r4, r3
 800b4f2:	1c5a      	adds	r2, r3, #1
 800b4f4:	2030      	movs	r0, #48	@ 0x30
 800b4f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b4fa:	4422      	add	r2, r4
 800b4fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b500:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b504:	3302      	adds	r3, #2
 800b506:	e7c7      	b.n	800b498 <_printf_common+0x58>
 800b508:	2301      	movs	r3, #1
 800b50a:	4622      	mov	r2, r4
 800b50c:	4641      	mov	r1, r8
 800b50e:	4638      	mov	r0, r7
 800b510:	47c8      	blx	r9
 800b512:	3001      	adds	r0, #1
 800b514:	d0e6      	beq.n	800b4e4 <_printf_common+0xa4>
 800b516:	3601      	adds	r6, #1
 800b518:	e7d9      	b.n	800b4ce <_printf_common+0x8e>
	...

0800b51c <_printf_i>:
 800b51c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b520:	7e0f      	ldrb	r7, [r1, #24]
 800b522:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b524:	2f78      	cmp	r7, #120	@ 0x78
 800b526:	4691      	mov	r9, r2
 800b528:	4680      	mov	r8, r0
 800b52a:	460c      	mov	r4, r1
 800b52c:	469a      	mov	sl, r3
 800b52e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b532:	d807      	bhi.n	800b544 <_printf_i+0x28>
 800b534:	2f62      	cmp	r7, #98	@ 0x62
 800b536:	d80a      	bhi.n	800b54e <_printf_i+0x32>
 800b538:	2f00      	cmp	r7, #0
 800b53a:	f000 80d1 	beq.w	800b6e0 <_printf_i+0x1c4>
 800b53e:	2f58      	cmp	r7, #88	@ 0x58
 800b540:	f000 80b8 	beq.w	800b6b4 <_printf_i+0x198>
 800b544:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b548:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b54c:	e03a      	b.n	800b5c4 <_printf_i+0xa8>
 800b54e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b552:	2b15      	cmp	r3, #21
 800b554:	d8f6      	bhi.n	800b544 <_printf_i+0x28>
 800b556:	a101      	add	r1, pc, #4	@ (adr r1, 800b55c <_printf_i+0x40>)
 800b558:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b55c:	0800b5b5 	.word	0x0800b5b5
 800b560:	0800b5c9 	.word	0x0800b5c9
 800b564:	0800b545 	.word	0x0800b545
 800b568:	0800b545 	.word	0x0800b545
 800b56c:	0800b545 	.word	0x0800b545
 800b570:	0800b545 	.word	0x0800b545
 800b574:	0800b5c9 	.word	0x0800b5c9
 800b578:	0800b545 	.word	0x0800b545
 800b57c:	0800b545 	.word	0x0800b545
 800b580:	0800b545 	.word	0x0800b545
 800b584:	0800b545 	.word	0x0800b545
 800b588:	0800b6c7 	.word	0x0800b6c7
 800b58c:	0800b5f3 	.word	0x0800b5f3
 800b590:	0800b681 	.word	0x0800b681
 800b594:	0800b545 	.word	0x0800b545
 800b598:	0800b545 	.word	0x0800b545
 800b59c:	0800b6e9 	.word	0x0800b6e9
 800b5a0:	0800b545 	.word	0x0800b545
 800b5a4:	0800b5f3 	.word	0x0800b5f3
 800b5a8:	0800b545 	.word	0x0800b545
 800b5ac:	0800b545 	.word	0x0800b545
 800b5b0:	0800b689 	.word	0x0800b689
 800b5b4:	6833      	ldr	r3, [r6, #0]
 800b5b6:	1d1a      	adds	r2, r3, #4
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	6032      	str	r2, [r6, #0]
 800b5bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b5c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	e09c      	b.n	800b702 <_printf_i+0x1e6>
 800b5c8:	6833      	ldr	r3, [r6, #0]
 800b5ca:	6820      	ldr	r0, [r4, #0]
 800b5cc:	1d19      	adds	r1, r3, #4
 800b5ce:	6031      	str	r1, [r6, #0]
 800b5d0:	0606      	lsls	r6, r0, #24
 800b5d2:	d501      	bpl.n	800b5d8 <_printf_i+0xbc>
 800b5d4:	681d      	ldr	r5, [r3, #0]
 800b5d6:	e003      	b.n	800b5e0 <_printf_i+0xc4>
 800b5d8:	0645      	lsls	r5, r0, #25
 800b5da:	d5fb      	bpl.n	800b5d4 <_printf_i+0xb8>
 800b5dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b5e0:	2d00      	cmp	r5, #0
 800b5e2:	da03      	bge.n	800b5ec <_printf_i+0xd0>
 800b5e4:	232d      	movs	r3, #45	@ 0x2d
 800b5e6:	426d      	negs	r5, r5
 800b5e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5ec:	4858      	ldr	r0, [pc, #352]	@ (800b750 <_printf_i+0x234>)
 800b5ee:	230a      	movs	r3, #10
 800b5f0:	e011      	b.n	800b616 <_printf_i+0xfa>
 800b5f2:	6821      	ldr	r1, [r4, #0]
 800b5f4:	6833      	ldr	r3, [r6, #0]
 800b5f6:	0608      	lsls	r0, r1, #24
 800b5f8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b5fc:	d402      	bmi.n	800b604 <_printf_i+0xe8>
 800b5fe:	0649      	lsls	r1, r1, #25
 800b600:	bf48      	it	mi
 800b602:	b2ad      	uxthmi	r5, r5
 800b604:	2f6f      	cmp	r7, #111	@ 0x6f
 800b606:	4852      	ldr	r0, [pc, #328]	@ (800b750 <_printf_i+0x234>)
 800b608:	6033      	str	r3, [r6, #0]
 800b60a:	bf14      	ite	ne
 800b60c:	230a      	movne	r3, #10
 800b60e:	2308      	moveq	r3, #8
 800b610:	2100      	movs	r1, #0
 800b612:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b616:	6866      	ldr	r6, [r4, #4]
 800b618:	60a6      	str	r6, [r4, #8]
 800b61a:	2e00      	cmp	r6, #0
 800b61c:	db05      	blt.n	800b62a <_printf_i+0x10e>
 800b61e:	6821      	ldr	r1, [r4, #0]
 800b620:	432e      	orrs	r6, r5
 800b622:	f021 0104 	bic.w	r1, r1, #4
 800b626:	6021      	str	r1, [r4, #0]
 800b628:	d04b      	beq.n	800b6c2 <_printf_i+0x1a6>
 800b62a:	4616      	mov	r6, r2
 800b62c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b630:	fb03 5711 	mls	r7, r3, r1, r5
 800b634:	5dc7      	ldrb	r7, [r0, r7]
 800b636:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b63a:	462f      	mov	r7, r5
 800b63c:	42bb      	cmp	r3, r7
 800b63e:	460d      	mov	r5, r1
 800b640:	d9f4      	bls.n	800b62c <_printf_i+0x110>
 800b642:	2b08      	cmp	r3, #8
 800b644:	d10b      	bne.n	800b65e <_printf_i+0x142>
 800b646:	6823      	ldr	r3, [r4, #0]
 800b648:	07df      	lsls	r7, r3, #31
 800b64a:	d508      	bpl.n	800b65e <_printf_i+0x142>
 800b64c:	6923      	ldr	r3, [r4, #16]
 800b64e:	6861      	ldr	r1, [r4, #4]
 800b650:	4299      	cmp	r1, r3
 800b652:	bfde      	ittt	le
 800b654:	2330      	movle	r3, #48	@ 0x30
 800b656:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b65a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b65e:	1b92      	subs	r2, r2, r6
 800b660:	6122      	str	r2, [r4, #16]
 800b662:	f8cd a000 	str.w	sl, [sp]
 800b666:	464b      	mov	r3, r9
 800b668:	aa03      	add	r2, sp, #12
 800b66a:	4621      	mov	r1, r4
 800b66c:	4640      	mov	r0, r8
 800b66e:	f7ff fee7 	bl	800b440 <_printf_common>
 800b672:	3001      	adds	r0, #1
 800b674:	d14a      	bne.n	800b70c <_printf_i+0x1f0>
 800b676:	f04f 30ff 	mov.w	r0, #4294967295
 800b67a:	b004      	add	sp, #16
 800b67c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b680:	6823      	ldr	r3, [r4, #0]
 800b682:	f043 0320 	orr.w	r3, r3, #32
 800b686:	6023      	str	r3, [r4, #0]
 800b688:	4832      	ldr	r0, [pc, #200]	@ (800b754 <_printf_i+0x238>)
 800b68a:	2778      	movs	r7, #120	@ 0x78
 800b68c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b690:	6823      	ldr	r3, [r4, #0]
 800b692:	6831      	ldr	r1, [r6, #0]
 800b694:	061f      	lsls	r7, r3, #24
 800b696:	f851 5b04 	ldr.w	r5, [r1], #4
 800b69a:	d402      	bmi.n	800b6a2 <_printf_i+0x186>
 800b69c:	065f      	lsls	r7, r3, #25
 800b69e:	bf48      	it	mi
 800b6a0:	b2ad      	uxthmi	r5, r5
 800b6a2:	6031      	str	r1, [r6, #0]
 800b6a4:	07d9      	lsls	r1, r3, #31
 800b6a6:	bf44      	itt	mi
 800b6a8:	f043 0320 	orrmi.w	r3, r3, #32
 800b6ac:	6023      	strmi	r3, [r4, #0]
 800b6ae:	b11d      	cbz	r5, 800b6b8 <_printf_i+0x19c>
 800b6b0:	2310      	movs	r3, #16
 800b6b2:	e7ad      	b.n	800b610 <_printf_i+0xf4>
 800b6b4:	4826      	ldr	r0, [pc, #152]	@ (800b750 <_printf_i+0x234>)
 800b6b6:	e7e9      	b.n	800b68c <_printf_i+0x170>
 800b6b8:	6823      	ldr	r3, [r4, #0]
 800b6ba:	f023 0320 	bic.w	r3, r3, #32
 800b6be:	6023      	str	r3, [r4, #0]
 800b6c0:	e7f6      	b.n	800b6b0 <_printf_i+0x194>
 800b6c2:	4616      	mov	r6, r2
 800b6c4:	e7bd      	b.n	800b642 <_printf_i+0x126>
 800b6c6:	6833      	ldr	r3, [r6, #0]
 800b6c8:	6825      	ldr	r5, [r4, #0]
 800b6ca:	6961      	ldr	r1, [r4, #20]
 800b6cc:	1d18      	adds	r0, r3, #4
 800b6ce:	6030      	str	r0, [r6, #0]
 800b6d0:	062e      	lsls	r6, r5, #24
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	d501      	bpl.n	800b6da <_printf_i+0x1be>
 800b6d6:	6019      	str	r1, [r3, #0]
 800b6d8:	e002      	b.n	800b6e0 <_printf_i+0x1c4>
 800b6da:	0668      	lsls	r0, r5, #25
 800b6dc:	d5fb      	bpl.n	800b6d6 <_printf_i+0x1ba>
 800b6de:	8019      	strh	r1, [r3, #0]
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	6123      	str	r3, [r4, #16]
 800b6e4:	4616      	mov	r6, r2
 800b6e6:	e7bc      	b.n	800b662 <_printf_i+0x146>
 800b6e8:	6833      	ldr	r3, [r6, #0]
 800b6ea:	1d1a      	adds	r2, r3, #4
 800b6ec:	6032      	str	r2, [r6, #0]
 800b6ee:	681e      	ldr	r6, [r3, #0]
 800b6f0:	6862      	ldr	r2, [r4, #4]
 800b6f2:	2100      	movs	r1, #0
 800b6f4:	4630      	mov	r0, r6
 800b6f6:	f7f4 fe13 	bl	8000320 <memchr>
 800b6fa:	b108      	cbz	r0, 800b700 <_printf_i+0x1e4>
 800b6fc:	1b80      	subs	r0, r0, r6
 800b6fe:	6060      	str	r0, [r4, #4]
 800b700:	6863      	ldr	r3, [r4, #4]
 800b702:	6123      	str	r3, [r4, #16]
 800b704:	2300      	movs	r3, #0
 800b706:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b70a:	e7aa      	b.n	800b662 <_printf_i+0x146>
 800b70c:	6923      	ldr	r3, [r4, #16]
 800b70e:	4632      	mov	r2, r6
 800b710:	4649      	mov	r1, r9
 800b712:	4640      	mov	r0, r8
 800b714:	47d0      	blx	sl
 800b716:	3001      	adds	r0, #1
 800b718:	d0ad      	beq.n	800b676 <_printf_i+0x15a>
 800b71a:	6823      	ldr	r3, [r4, #0]
 800b71c:	079b      	lsls	r3, r3, #30
 800b71e:	d413      	bmi.n	800b748 <_printf_i+0x22c>
 800b720:	68e0      	ldr	r0, [r4, #12]
 800b722:	9b03      	ldr	r3, [sp, #12]
 800b724:	4298      	cmp	r0, r3
 800b726:	bfb8      	it	lt
 800b728:	4618      	movlt	r0, r3
 800b72a:	e7a6      	b.n	800b67a <_printf_i+0x15e>
 800b72c:	2301      	movs	r3, #1
 800b72e:	4632      	mov	r2, r6
 800b730:	4649      	mov	r1, r9
 800b732:	4640      	mov	r0, r8
 800b734:	47d0      	blx	sl
 800b736:	3001      	adds	r0, #1
 800b738:	d09d      	beq.n	800b676 <_printf_i+0x15a>
 800b73a:	3501      	adds	r5, #1
 800b73c:	68e3      	ldr	r3, [r4, #12]
 800b73e:	9903      	ldr	r1, [sp, #12]
 800b740:	1a5b      	subs	r3, r3, r1
 800b742:	42ab      	cmp	r3, r5
 800b744:	dcf2      	bgt.n	800b72c <_printf_i+0x210>
 800b746:	e7eb      	b.n	800b720 <_printf_i+0x204>
 800b748:	2500      	movs	r5, #0
 800b74a:	f104 0619 	add.w	r6, r4, #25
 800b74e:	e7f5      	b.n	800b73c <_printf_i+0x220>
 800b750:	0800bbed 	.word	0x0800bbed
 800b754:	0800bbfe 	.word	0x0800bbfe

0800b758 <memmove>:
 800b758:	4288      	cmp	r0, r1
 800b75a:	b510      	push	{r4, lr}
 800b75c:	eb01 0402 	add.w	r4, r1, r2
 800b760:	d902      	bls.n	800b768 <memmove+0x10>
 800b762:	4284      	cmp	r4, r0
 800b764:	4623      	mov	r3, r4
 800b766:	d807      	bhi.n	800b778 <memmove+0x20>
 800b768:	1e43      	subs	r3, r0, #1
 800b76a:	42a1      	cmp	r1, r4
 800b76c:	d008      	beq.n	800b780 <memmove+0x28>
 800b76e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b772:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b776:	e7f8      	b.n	800b76a <memmove+0x12>
 800b778:	4402      	add	r2, r0
 800b77a:	4601      	mov	r1, r0
 800b77c:	428a      	cmp	r2, r1
 800b77e:	d100      	bne.n	800b782 <memmove+0x2a>
 800b780:	bd10      	pop	{r4, pc}
 800b782:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b786:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b78a:	e7f7      	b.n	800b77c <memmove+0x24>

0800b78c <_sbrk_r>:
 800b78c:	b538      	push	{r3, r4, r5, lr}
 800b78e:	4d06      	ldr	r5, [pc, #24]	@ (800b7a8 <_sbrk_r+0x1c>)
 800b790:	2300      	movs	r3, #0
 800b792:	4604      	mov	r4, r0
 800b794:	4608      	mov	r0, r1
 800b796:	602b      	str	r3, [r5, #0]
 800b798:	f7f6 ffb2 	bl	8002700 <_sbrk>
 800b79c:	1c43      	adds	r3, r0, #1
 800b79e:	d102      	bne.n	800b7a6 <_sbrk_r+0x1a>
 800b7a0:	682b      	ldr	r3, [r5, #0]
 800b7a2:	b103      	cbz	r3, 800b7a6 <_sbrk_r+0x1a>
 800b7a4:	6023      	str	r3, [r4, #0]
 800b7a6:	bd38      	pop	{r3, r4, r5, pc}
 800b7a8:	240007f8 	.word	0x240007f8

0800b7ac <_realloc_r>:
 800b7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b0:	4607      	mov	r7, r0
 800b7b2:	4614      	mov	r4, r2
 800b7b4:	460d      	mov	r5, r1
 800b7b6:	b921      	cbnz	r1, 800b7c2 <_realloc_r+0x16>
 800b7b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7bc:	4611      	mov	r1, r2
 800b7be:	f7ff bc5b 	b.w	800b078 <_malloc_r>
 800b7c2:	b92a      	cbnz	r2, 800b7d0 <_realloc_r+0x24>
 800b7c4:	f7ff fbec 	bl	800afa0 <_free_r>
 800b7c8:	4625      	mov	r5, r4
 800b7ca:	4628      	mov	r0, r5
 800b7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7d0:	f000 f81a 	bl	800b808 <_malloc_usable_size_r>
 800b7d4:	4284      	cmp	r4, r0
 800b7d6:	4606      	mov	r6, r0
 800b7d8:	d802      	bhi.n	800b7e0 <_realloc_r+0x34>
 800b7da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b7de:	d8f4      	bhi.n	800b7ca <_realloc_r+0x1e>
 800b7e0:	4621      	mov	r1, r4
 800b7e2:	4638      	mov	r0, r7
 800b7e4:	f7ff fc48 	bl	800b078 <_malloc_r>
 800b7e8:	4680      	mov	r8, r0
 800b7ea:	b908      	cbnz	r0, 800b7f0 <_realloc_r+0x44>
 800b7ec:	4645      	mov	r5, r8
 800b7ee:	e7ec      	b.n	800b7ca <_realloc_r+0x1e>
 800b7f0:	42b4      	cmp	r4, r6
 800b7f2:	4622      	mov	r2, r4
 800b7f4:	4629      	mov	r1, r5
 800b7f6:	bf28      	it	cs
 800b7f8:	4632      	movcs	r2, r6
 800b7fa:	f7ff fbc3 	bl	800af84 <memcpy>
 800b7fe:	4629      	mov	r1, r5
 800b800:	4638      	mov	r0, r7
 800b802:	f7ff fbcd 	bl	800afa0 <_free_r>
 800b806:	e7f1      	b.n	800b7ec <_realloc_r+0x40>

0800b808 <_malloc_usable_size_r>:
 800b808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b80c:	1f18      	subs	r0, r3, #4
 800b80e:	2b00      	cmp	r3, #0
 800b810:	bfbc      	itt	lt
 800b812:	580b      	ldrlt	r3, [r1, r0]
 800b814:	18c0      	addlt	r0, r0, r3
 800b816:	4770      	bx	lr

0800b818 <_init>:
 800b818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b81a:	bf00      	nop
 800b81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b81e:	bc08      	pop	{r3}
 800b820:	469e      	mov	lr, r3
 800b822:	4770      	bx	lr

0800b824 <_fini>:
 800b824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b826:	bf00      	nop
 800b828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b82a:	bc08      	pop	{r3}
 800b82c:	469e      	mov	lr, r3
 800b82e:	4770      	bx	lr
