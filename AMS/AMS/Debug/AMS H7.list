
AMS H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca1c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  0800ccec  0800ccec  0000dcec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d1b8  0800d1b8  0000e1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800d1c0  0800d1c0  0000e1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d1c8  0800d1c8  0000e1c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  0800d1cc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e4c  2400006c  0800d238  0000f06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000eb8  0800d238  0000feb8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027070  00000000  00000000  0000f09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c46  00000000  00000000  0003610a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001928  00000000  00000000  00039d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000013a7  00000000  00000000  0003b678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b7cc  00000000  00000000  0003ca1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020e31  00000000  00000000  000781eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017628b  00000000  00000000  0009901c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020f2a7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000734c  00000000  00000000  0020f2ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000042  00000000  00000000  00216638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800ccd4 	.word	0x0800ccd4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	0800ccd4 	.word	0x0800ccd4

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <_ZN7BMS_MODC1Emiiihjii>:
/*********************************************************************************************************
 ** Function name:           BMS_MOD
 ** Descriptions:            Initialization function of teh class
 *********************************************************************************************************/

BMS_MOD::BMS_MOD(uint32_t _ID, int _MAXV, int _MINV, int _MAXT,
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	603b      	str	r3, [r7, #0]
		uint8_t _NUMCELLS, unsigned int _SHUNT, int _LAG_V, int _LAG_T) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	2200      	movs	r2, #0
 800071e:	751a      	strb	r2, [r3, #20]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000726:	619a      	str	r2, [r3, #24]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	22fa      	movs	r2, #250	@ 0xfa
 800072c:	61da      	str	r2, [r3, #28]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000734:	621a      	str	r2, [r3, #32]
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800073c:	625a      	str	r2, [r3, #36]	@ 0x24
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000744:	629a      	str	r2, [r3, #40]	@ 0x28
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800074c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	699a      	ldr	r2, [r3, #24]
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	631a      	str	r2, [r3, #48]	@ 0x30
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	2200      	movs	r2, #0
 800075a:	635a      	str	r2, [r3, #52]	@ 0x34
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	6a1a      	ldr	r2, [r3, #32]
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	639a      	str	r2, [r3, #56]	@ 0x38
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	2200      	movs	r2, #0
 8000770:	641a      	str	r2, [r3, #64]	@ 0x40
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	645a      	str	r2, [r3, #68]	@ 0x44
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	2200      	movs	r2, #0
 800077e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	2200      	movs	r2, #0
 800078e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	2200      	movs	r2, #0
 8000796:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	2213      	movs	r2, #19
 800079e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	220a      	movs	r2, #10
 80007a6:	651a      	str	r2, [r3, #80]	@ 0x50
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	3354      	adds	r3, #84	@ 0x54
 80007ac:	2230      	movs	r2, #48	@ 0x30
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f00b fe11 	bl	800c3d8 <memset>
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	2200      	movs	r2, #0
 80007ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	2200      	movs	r2, #0
 80007c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	2200      	movs	r2, #0
 80007ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	f241 0268 	movw	r2, #4200	@ 0x1068
 80007d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	2200      	movs	r2, #0
 80007dc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	2200      	movs	r2, #0
 80007e4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	2200      	movs	r2, #0
 80007ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	2200      	movs	r2, #0
 80007f4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	2200      	movs	r2, #0
 80007fc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	33a8      	adds	r3, #168	@ 0xa8
 8000804:	224c      	movs	r2, #76	@ 0x4c
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f00b fde5 	bl	800c3d8 <memset>
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	33f4      	adds	r3, #244	@ 0xf4
 8000812:	2298      	movs	r2, #152	@ 0x98
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f00b fdde 	bl	800c3d8 <memset>
	CANID = _ID;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	601a      	str	r2, [r3, #0]
	LIMIT_MAX_V = _MAXV;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	605a      	str	r2, [r3, #4]
	LIMIT_MIN_V = _MINV;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	683a      	ldr	r2, [r7, #0]
 800082c:	609a      	str	r2, [r3, #8]
	LIMIT_MAX_T = _MAXT;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	6a3a      	ldr	r2, [r7, #32]
 8000832:	60da      	str	r2, [r3, #12]
	NUM_CELLS = _NUMCELLS;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800083a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

	uint32_t now = HAL_GetTick();
 800083e:	f002 fbfd 	bl	800303c <HAL_GetTick>
 8000842:	6178      	str	r0, [r7, #20]

	time_lim_plotted_volts = now + _LAG_V;
 8000844:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	441a      	add	r2, r3
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	631a      	str	r2, [r3, #48]	@ 0x30
	time_lim_sent_volts = now + _LAG_V;
 800084e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	441a      	add	r2, r3
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	635a      	str	r2, [r3, #52]	@ 0x34
	time_lim_received_volts = now + TIME_LIM_RECV_VOLTS + _LAG_V;
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	6a1a      	ldr	r2, [r3, #32]
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	441a      	add	r2, r3
 8000860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000862:	441a      	add	r2, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	639a      	str	r2, [r3, #56]	@ 0x38

	time_lim_plotted_temps = now + _LAG_T;
 8000868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	441a      	add	r2, r3
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	63da      	str	r2, [r3, #60]	@ 0x3c
	time_lim_sent_temps = now + _LAG_T;
 8000872:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	441a      	add	r2, r3
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	641a      	str	r2, [r3, #64]	@ 0x40
	time_lim_received_temps = now + TIME_LIM_RECV_TEMPS + _LAG_T;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	441a      	add	r2, r3
 8000884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000886:	441a      	add	r2, r3
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	645a      	str	r2, [r3, #68]	@ 0x44
}
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	4618      	mov	r0, r3
 8000890:	3718      	adds	r7, #24
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <_ZN7BMS_MOD12voltage_infoEPc>:

/*********************************************************************************************************
 ** Function name:           info
 ** Descriptions:            Function for printing the class data
 *********************************************************************************************************/
void BMS_MOD::voltage_info(char *buffer) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]

	if (getUARTState() == HAL_UART_STATE_READY) { // Send the message just if there is a serial por connected
 80008a2:	f001 fc29 	bl	80020f8 <getUARTState>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b20      	cmp	r3, #32
 80008aa:	bf0c      	ite	eq
 80008ac:	2301      	moveq	r3, #1
 80008ae:	2300      	movne	r3, #0
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f000 8083 	beq.w	80009be <_ZN7BMS_MOD12voltage_infoEPc+0x126>
		print((char*) "\n***********************");
 80008b8:	4851      	ldr	r0, [pc, #324]	@ (8000a00 <_ZN7BMS_MOD12voltage_infoEPc+0x168>)
 80008ba:	f001 fbc3 	bl	8002044 <print>
		print((char*) "         BMS");
 80008be:	4851      	ldr	r0, [pc, #324]	@ (8000a04 <_ZN7BMS_MOD12voltage_infoEPc+0x16c>)
 80008c0:	f001 fbc0 	bl	8002044 <print>
		print((char*) "***********************");
 80008c4:	4850      	ldr	r0, [pc, #320]	@ (8000a08 <_ZN7BMS_MOD12voltage_infoEPc+0x170>)
 80008c6:	f001 fbbd 	bl	8002044 <print>
		sprintf(buffer, " - ERROR:     %i", error_volt);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80008d0:	461a      	mov	r2, r3
 80008d2:	494e      	ldr	r1, [pc, #312]	@ (8000a0c <_ZN7BMS_MOD12voltage_infoEPc+0x174>)
 80008d4:	6838      	ldr	r0, [r7, #0]
 80008d6:	f00b fd5d 	bl	800c394 <siprintf>
		print(buffer);
 80008da:	6838      	ldr	r0, [r7, #0]
 80008dc:	f001 fbb2 	bl	8002044 <print>
		sprintf(buffer, " - CAN ID:    0x%lx", CANID);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	461a      	mov	r2, r3
 80008e6:	494a      	ldr	r1, [pc, #296]	@ (8000a10 <_ZN7BMS_MOD12voltage_infoEPc+0x178>)
 80008e8:	6838      	ldr	r0, [r7, #0]
 80008ea:	f00b fd53 	bl	800c394 <siprintf>
		print(buffer);
 80008ee:	6838      	ldr	r0, [r7, #0]
 80008f0:	f001 fba8 	bl	8002044 <print>
		sprintf(buffer, " - MAX V =    %i mV", MAX_V);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	691b      	ldr	r3, [r3, #16]
 80008f8:	461a      	mov	r2, r3
 80008fa:	4946      	ldr	r1, [pc, #280]	@ (8000a14 <_ZN7BMS_MOD12voltage_infoEPc+0x17c>)
 80008fc:	6838      	ldr	r0, [r7, #0]
 80008fe:	f00b fd49 	bl	800c394 <siprintf>
		print(buffer);
 8000902:	6838      	ldr	r0, [r7, #0]
 8000904:	f001 fb9e 	bl	8002044 <print>
		sprintf(buffer, " - MIN V =    %i mV", MIN_V);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800090e:	461a      	mov	r2, r3
 8000910:	4941      	ldr	r1, [pc, #260]	@ (8000a18 <_ZN7BMS_MOD12voltage_infoEPc+0x180>)
 8000912:	6838      	ldr	r0, [r7, #0]
 8000914:	f00b fd3e 	bl	800c394 <siprintf>
		print(buffer);
 8000918:	6838      	ldr	r0, [r7, #0]
 800091a:	f001 fb93 	bl	8002044 <print>
		print((char*) "-----------------------");
 800091e:	483f      	ldr	r0, [pc, #252]	@ (8000a1c <_ZN7BMS_MOD12voltage_infoEPc+0x184>)
 8000920:	f001 fb90 	bl	8002044 <print>
		sprintf(buffer, "VOLTS (mV): [%i", cellVoltagemV[0]);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800092a:	461a      	mov	r2, r3
 800092c:	493c      	ldr	r1, [pc, #240]	@ (8000a20 <_ZN7BMS_MOD12voltage_infoEPc+0x188>)
 800092e:	6838      	ldr	r0, [r7, #0]
 8000930:	f00b fd30 	bl	800c394 <siprintf>
		printnl(buffer);
 8000934:	6838      	ldr	r0, [r7, #0]
 8000936:	f001 fba3 	bl	8002080 <printnl>
		for (int i = 0; i < NUM_CELLS; i++) {
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	e00f      	b.n	8000960 <_ZN7BMS_MOD12voltage_infoEPc+0xc8>
			sprintf(buffer, ", %i", cellVoltagemV[i]);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	322a      	adds	r2, #42	@ 0x2a
 8000946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800094a:	461a      	mov	r2, r3
 800094c:	4935      	ldr	r1, [pc, #212]	@ (8000a24 <_ZN7BMS_MOD12voltage_infoEPc+0x18c>)
 800094e:	6838      	ldr	r0, [r7, #0]
 8000950:	f00b fd20 	bl	800c394 <siprintf>
			printnl(buffer);
 8000954:	6838      	ldr	r0, [r7, #0]
 8000956:	f001 fb93 	bl	8002080 <printnl>
		for (int i = 0; i < NUM_CELLS; i++) {
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	3301      	adds	r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8000966:	461a      	mov	r2, r3
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	4293      	cmp	r3, r2
 800096c:	dbe8      	blt.n	8000940 <_ZN7BMS_MOD12voltage_infoEPc+0xa8>
		}

		for (int i = 0; i < NUM_CELLS; i++) {
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	e00e      	b.n	8000992 <_ZN7BMS_MOD12voltage_infoEPc+0xfa>
			voltage_acum += cellVoltagemV[i];
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	68b9      	ldr	r1, [r7, #8]
 800097e:	312a      	adds	r1, #42	@ 0x2a
 8000980:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000984:	441a      	add	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		for (int i = 0; i < NUM_CELLS; i++) {
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	3301      	adds	r3, #1
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8000998:	461a      	mov	r2, r3
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	4293      	cmp	r3, r2
 800099e:	dbe9      	blt.n	8000974 <_ZN7BMS_MOD12voltage_infoEPc+0xdc>
		}

		print((char*) "]");
 80009a0:	4821      	ldr	r0, [pc, #132]	@ (8000a28 <_ZN7BMS_MOD12voltage_infoEPc+0x190>)
 80009a2:	f001 fb4f 	bl	8002044 <print>
		sprintf(buffer, " - V(max) = %i mV || V(min) = %i", MAX_V, MIN_V);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	691a      	ldr	r2, [r3, #16]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009b0:	491e      	ldr	r1, [pc, #120]	@ (8000a2c <_ZN7BMS_MOD12voltage_infoEPc+0x194>)
 80009b2:	6838      	ldr	r0, [r7, #0]
 80009b4:	f00b fcee 	bl	800c394 <siprintf>
		print(buffer);
 80009b8:	6838      	ldr	r0, [r7, #0]
 80009ba:	f001 fb43 	bl	8002044 <print>
	}
	sprintf(buffer, "- BALANCING V = %i mV", BALANCING_V);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009c4:	461a      	mov	r2, r3
 80009c6:	491a      	ldr	r1, [pc, #104]	@ (8000a30 <_ZN7BMS_MOD12voltage_infoEPc+0x198>)
 80009c8:	6838      	ldr	r0, [r7, #0]
 80009ca:	f00b fce3 	bl	800c394 <siprintf>
	print(buffer);
 80009ce:	6838      	ldr	r0, [r7, #0]
 80009d0:	f001 fb38 	bl	8002044 <print>

	sprintf(buffer, "- STACK VOLTAGE = %i V", voltage_acum / 1000);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009da:	4a16      	ldr	r2, [pc, #88]	@ (8000a34 <_ZN7BMS_MOD12voltage_infoEPc+0x19c>)
 80009dc:	fb82 1203 	smull	r1, r2, r2, r3
 80009e0:	1192      	asrs	r2, r2, #6
 80009e2:	17db      	asrs	r3, r3, #31
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	461a      	mov	r2, r3
 80009e8:	4913      	ldr	r1, [pc, #76]	@ (8000a38 <_ZN7BMS_MOD12voltage_infoEPc+0x1a0>)
 80009ea:	6838      	ldr	r0, [r7, #0]
 80009ec:	f00b fcd2 	bl	800c394 <siprintf>
	print(buffer);
 80009f0:	6838      	ldr	r0, [r7, #0]
 80009f2:	f001 fb27 	bl	8002044 <print>
}
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	0800ccec 	.word	0x0800ccec
 8000a04:	0800cd08 	.word	0x0800cd08
 8000a08:	0800cd18 	.word	0x0800cd18
 8000a0c:	0800cd30 	.word	0x0800cd30
 8000a10:	0800cd44 	.word	0x0800cd44
 8000a14:	0800cd58 	.word	0x0800cd58
 8000a18:	0800cd6c 	.word	0x0800cd6c
 8000a1c:	0800cd80 	.word	0x0800cd80
 8000a20:	0800cd98 	.word	0x0800cd98
 8000a24:	0800cda8 	.word	0x0800cda8
 8000a28:	0800cdb0 	.word	0x0800cdb0
 8000a2c:	0800cdb4 	.word	0x0800cdb4
 8000a30:	0800cdd8 	.word	0x0800cdd8
 8000a34:	10624dd3 	.word	0x10624dd3
 8000a38:	0800cdf0 	.word	0x0800cdf0

08000a3c <_ZN7BMS_MOD16temperature_infoEPc>:

// ********************************************************************************************************
// **Function name:           info
// **Descriptions:            Function for printing the class data
// **********************************************************************************************************
void BMS_MOD::temperature_info(char *buffer) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
	if (getUARTState() == HAL_UART_STATE_READY) //Send the message just if there is a serial por connected
 8000a46:	f001 fb57 	bl	80020f8 <getUARTState>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b20      	cmp	r3, #32
 8000a4e:	bf0c      	ite	eq
 8000a50:	2301      	moveq	r3, #1
 8000a52:	2300      	movne	r3, #0
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d063      	beq.n	8000b22 <_ZN7BMS_MOD16temperature_infoEPc+0xe6>
	{
		print((char*) "\n***********************");
 8000a5a:	4834      	ldr	r0, [pc, #208]	@ (8000b2c <_ZN7BMS_MOD16temperature_infoEPc+0xf0>)
 8000a5c:	f001 faf2 	bl	8002044 <print>
		print((char*) "     Temperatures");
 8000a60:	4833      	ldr	r0, [pc, #204]	@ (8000b30 <_ZN7BMS_MOD16temperature_infoEPc+0xf4>)
 8000a62:	f001 faef 	bl	8002044 <print>
		print((char*) "***********************");
 8000a66:	4833      	ldr	r0, [pc, #204]	@ (8000b34 <_ZN7BMS_MOD16temperature_infoEPc+0xf8>)
 8000a68:	f001 faec 	bl	8002044 <print>
		sprintf(buffer, " - ERROR:     %i", error_temp);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000a72:	461a      	mov	r2, r3
 8000a74:	4930      	ldr	r1, [pc, #192]	@ (8000b38 <_ZN7BMS_MOD16temperature_infoEPc+0xfc>)
 8000a76:	6838      	ldr	r0, [r7, #0]
 8000a78:	f00b fc8c 	bl	800c394 <siprintf>
		print(buffer);
 8000a7c:	6838      	ldr	r0, [r7, #0]
 8000a7e:	f001 fae1 	bl	8002044 <print>
		sprintf(buffer, " - CAN ID:    0x%lx", CANID + 20);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	3314      	adds	r3, #20
 8000a88:	461a      	mov	r2, r3
 8000a8a:	492c      	ldr	r1, [pc, #176]	@ (8000b3c <_ZN7BMS_MOD16temperature_infoEPc+0x100>)
 8000a8c:	6838      	ldr	r0, [r7, #0]
 8000a8e:	f00b fc81 	bl	800c394 <siprintf>
		print(buffer);
 8000a92:	6838      	ldr	r0, [r7, #0]
 8000a94:	f001 fad6 	bl	8002044 <print>
		sprintf(buffer, " - MAX T =    %i ºC", MAX_T);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	4927      	ldr	r1, [pc, #156]	@ (8000b40 <_ZN7BMS_MOD16temperature_infoEPc+0x104>)
 8000aa2:	6838      	ldr	r0, [r7, #0]
 8000aa4:	f00b fc76 	bl	800c394 <siprintf>
		print(buffer);
 8000aa8:	6838      	ldr	r0, [r7, #0]
 8000aaa:	f001 facb 	bl	8002044 <print>
		sprintf(buffer, " - MIN T =    %i ºC", MIN_T);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4923      	ldr	r1, [pc, #140]	@ (8000b44 <_ZN7BMS_MOD16temperature_infoEPc+0x108>)
 8000ab8:	6838      	ldr	r0, [r7, #0]
 8000aba:	f00b fc6b 	bl	800c394 <siprintf>
		print(buffer);
 8000abe:	6838      	ldr	r0, [r7, #0]
 8000ac0:	f001 fac0 	bl	8002044 <print>
		sprintf(buffer, " - LIM T =    %i ºC", LIMIT_MAX_T);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	491f      	ldr	r1, [pc, #124]	@ (8000b48 <_ZN7BMS_MOD16temperature_infoEPc+0x10c>)
 8000acc:	6838      	ldr	r0, [r7, #0]
 8000ace:	f00b fc61 	bl	800c394 <siprintf>
		print((char*) "-----------------------");
 8000ad2:	481e      	ldr	r0, [pc, #120]	@ (8000b4c <_ZN7BMS_MOD16temperature_infoEPc+0x110>)
 8000ad4:	f001 fab6 	bl	8002044 <print>
		sprintf(buffer, "Temperatures (ºC): [%i", cellTemperature[0]);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ade:	461a      	mov	r2, r3
 8000ae0:	491b      	ldr	r1, [pc, #108]	@ (8000b50 <_ZN7BMS_MOD16temperature_infoEPc+0x114>)
 8000ae2:	6838      	ldr	r0, [r7, #0]
 8000ae4:	f00b fc56 	bl	800c394 <siprintf>
		printnl(buffer);
 8000ae8:	6838      	ldr	r0, [r7, #0]
 8000aea:	f001 fac9 	bl	8002080 <printnl>
		for (int i = 1; i < 38; i++) {
 8000aee:	2301      	movs	r3, #1
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	e010      	b.n	8000b16 <_ZN7BMS_MOD16temperature_infoEPc+0xda>
			sprintf(buffer, ", %i", cellTemperature[i]);
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	333c      	adds	r3, #60	@ 0x3c
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	4413      	add	r3, r2
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4914      	ldr	r1, [pc, #80]	@ (8000b54 <_ZN7BMS_MOD16temperature_infoEPc+0x118>)
 8000b04:	6838      	ldr	r0, [r7, #0]
 8000b06:	f00b fc45 	bl	800c394 <siprintf>
			printnl(buffer);
 8000b0a:	6838      	ldr	r0, [r7, #0]
 8000b0c:	f001 fab8 	bl	8002080 <printnl>
		for (int i = 1; i < 38; i++) {
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	3301      	adds	r3, #1
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	2b25      	cmp	r3, #37	@ 0x25
 8000b1a:	ddeb      	ble.n	8000af4 <_ZN7BMS_MOD16temperature_infoEPc+0xb8>
		}
		print((char*) "]");
 8000b1c:	480e      	ldr	r0, [pc, #56]	@ (8000b58 <_ZN7BMS_MOD16temperature_infoEPc+0x11c>)
 8000b1e:	f001 fa91 	bl	8002044 <print>

	}
}
 8000b22:	bf00      	nop
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	0800ccec 	.word	0x0800ccec
 8000b30:	0800ce08 	.word	0x0800ce08
 8000b34:	0800cd18 	.word	0x0800cd18
 8000b38:	0800cd30 	.word	0x0800cd30
 8000b3c:	0800cd44 	.word	0x0800cd44
 8000b40:	0800ce1c 	.word	0x0800ce1c
 8000b44:	0800ce34 	.word	0x0800ce34
 8000b48:	0800ce4c 	.word	0x0800ce4c
 8000b4c:	0800cd80 	.word	0x0800cd80
 8000b50:	0800ce64 	.word	0x0800ce64
 8000b54:	0800cda8 	.word	0x0800cda8
 8000b58:	0800cdb0 	.word	0x0800cdb0

08000b5c <_ZN7BMS_MOD5parseEmPhm>:

/*********************************************************************************************************
 ** Function name:           parse
 ** Descriptions:            Function for parsing the received data via CAN protocol
 *********************************************************************************************************/
bool BMS_MOD::parse(uint32_t id, uint8_t *buf, uint32_t t) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	@ 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	603b      	str	r3, [r7, #0]
	if (id > CANID && id < CANID + 30) {
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	f240 8113 	bls.w	8000d9c <_ZN7BMS_MOD5parseEmPhm+0x240>
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	331e      	adds	r3, #30
 8000b7c:	68ba      	ldr	r2, [r7, #8]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	f080 810c 	bcs.w	8000d9c <_ZN7BMS_MOD5parseEmPhm+0x240>
		int m = id % CANID;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b8e:	fb01 f202 	mul.w	r2, r1, r2
 8000b92:	1a9b      	subs	r3, r3, r2
 8000b94:	617b      	str	r3, [r7, #20]
		int pos = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
		if (m >= 1 && m <= 5) {
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f340 8088 	ble.w	8000cb2 <_ZN7BMS_MOD5parseEmPhm+0x156>
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	2b05      	cmp	r3, #5
 8000ba6:	f300 8084 	bgt.w	8000cb2 <_ZN7BMS_MOD5parseEmPhm+0x156>
			time_lim_received_volts = t + TIME_LIM_RECV_VOLTS;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	6a1a      	ldr	r2, [r3, #32]
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	441a      	add	r2, r3
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	639a      	str	r2, [r3, #56]	@ 0x38

			for (int i = 0; i < 4; i++) {
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bba:	e03c      	b.n	8000c36 <_ZN7BMS_MOD5parseEmPhm+0xda>
				pos = (m - 1) * 4 + i;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bc4:	4413      	add	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
				if (pos >= 19)
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	2b12      	cmp	r3, #18
 8000bcc:	dc37      	bgt.n	8000c3e <_ZN7BMS_MOD5parseEmPhm+0xe2>
					break;

				cellVoltagemV[pos] = (buf[2 * i] << 8) | buf[2 * i + 1];
 8000bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	021b      	lsls	r3, r3, #8
 8000bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bde:	0052      	lsls	r2, r2, #1
 8000be0:	3201      	adds	r2, #1
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	440a      	add	r2, r1
 8000be6:	7812      	ldrb	r2, [r2, #0]
 8000be8:	ea43 0102 	orr.w	r1, r3, r2
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	322a      	adds	r2, #42	@ 0x2a
 8000bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				 //error_volt = BMS_OK;
				 } else {
				 flag_error_volt[pos] = 0;
				 }*/

				if ((cellVoltagemV[pos] > LIMIT_MAX_V) && pos < NUM_CELLS) {
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	322a      	adds	r2, #42	@ 0x2a
 8000bfc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	dd13      	ble.n	8000c30 <_ZN7BMS_MOD5parseEmPhm+0xd4>
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8000c0e:	461a      	mov	r2, r3
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	4293      	cmp	r3, r2
 8000c14:	da0c      	bge.n	8000c30 <_ZN7BMS_MOD5parseEmPhm+0xd4>
					flag_error_volt[pos]++;
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	3314      	adds	r3, #20
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	4413      	add	r3, r2
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	1c5a      	adds	r2, r3, #1
 8000c24:	68f9      	ldr	r1, [r7, #12]
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	3314      	adds	r3, #20
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	605a      	str	r2, [r3, #4]
			for (int i = 0; i < 4; i++) {
 8000c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c32:	3301      	adds	r3, #1
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	ddbf      	ble.n	8000bbc <_ZN7BMS_MOD5parseEmPhm+0x60>
 8000c3c:	e000      	b.n	8000c40 <_ZN7BMS_MOD5parseEmPhm+0xe4>
					break;
 8000c3e:	bf00      	nop
					//} else {
					//flag_error_volt[pos] = 0;
				}
			}

			MAX_V = cellVoltagemV[0];
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	611a      	str	r2, [r3, #16]
			MIN_V = cellVoltagemV[0];
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
			for (int i = 1; i < 19; i++) {
 8000c56:	2301      	movs	r3, #1
 8000c58:	623b      	str	r3, [r7, #32]
 8000c5a:	e025      	b.n	8000ca8 <_ZN7BMS_MOD5parseEmPhm+0x14c>
				if (cellVoltagemV[i] > MAX_V)
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	6a3a      	ldr	r2, [r7, #32]
 8000c60:	322a      	adds	r2, #42	@ 0x2a
 8000c62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	691b      	ldr	r3, [r3, #16]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	dd07      	ble.n	8000c7e <_ZN7BMS_MOD5parseEmPhm+0x122>
					MAX_V = cellVoltagemV[i];
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	6a3a      	ldr	r2, [r7, #32]
 8000c72:	322a      	adds	r2, #42	@ 0x2a
 8000c74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
 8000c7c:	e011      	b.n	8000ca2 <_ZN7BMS_MOD5parseEmPhm+0x146>
				else if (cellVoltagemV[i] < MIN_V)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	6a3a      	ldr	r2, [r7, #32]
 8000c82:	322a      	adds	r2, #42	@ 0x2a
 8000c84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	da07      	bge.n	8000ca2 <_ZN7BMS_MOD5parseEmPhm+0x146>
					MIN_V = cellVoltagemV[i];
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	6a3a      	ldr	r2, [r7, #32]
 8000c96:	322a      	adds	r2, #42	@ 0x2a
 8000c98:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
			for (int i = 1; i < 19; i++) {
 8000ca2:	6a3b      	ldr	r3, [r7, #32]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	623b      	str	r3, [r7, #32]
 8000ca8:	6a3b      	ldr	r3, [r7, #32]
 8000caa:	2b12      	cmp	r3, #18
 8000cac:	ddd6      	ble.n	8000c5c <_ZN7BMS_MOD5parseEmPhm+0x100>
			}

			return true;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e075      	b.n	8000d9e <_ZN7BMS_MOD5parseEmPhm+0x242>

		} else if (m >= 21 && m <= 25) {
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	2b14      	cmp	r3, #20
 8000cb6:	dd71      	ble.n	8000d9c <_ZN7BMS_MOD5parseEmPhm+0x240>
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	2b19      	cmp	r3, #25
 8000cbc:	dc6e      	bgt.n	8000d9c <_ZN7BMS_MOD5parseEmPhm+0x240>
			// m = 21 → packet 0, m = 25 → packet 4
			time_lim_received_temps = t + TIME_LIM_RECV_TEMPS;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	441a      	add	r2, r3
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	645a      	str	r2, [r3, #68]	@ 0x44
			if (flag_charger == 1)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d104      	bne.n	8000cde <_ZN7BMS_MOD5parseEmPhm+0x182>
				module_send_message_CAN1(id, buf, 8);
 8000cd4:	2208      	movs	r2, #8
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	68b8      	ldr	r0, [r7, #8]
 8000cda:	f001 f951 	bl	8001f80 <module_send_message_CAN1>

			for (int i = 0; i < 8; i++) {
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
 8000ce2:	e016      	b.n	8000d12 <_ZN7BMS_MOD5parseEmPhm+0x1b6>
				pos = (m - 21) * 8 + i;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	3b15      	subs	r3, #21
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	69fa      	ldr	r2, [r7, #28]
 8000cec:	4413      	add	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
				if (pos >= 38)
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	2b25      	cmp	r3, #37	@ 0x25
 8000cf4:	dc11      	bgt.n	8000d1a <_ZN7BMS_MOD5parseEmPhm+0x1be>
					break;

				cellTemperature[pos] = buf[i];
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	4619      	mov	r1, r3
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	333c      	adds	r3, #60	@ 0x3c
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4413      	add	r3, r2
 8000d0a:	6059      	str	r1, [r3, #4]
			for (int i = 0; i < 8; i++) {
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	61fb      	str	r3, [r7, #28]
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	2b07      	cmp	r3, #7
 8000d16:	dde5      	ble.n	8000ce4 <_ZN7BMS_MOD5parseEmPhm+0x188>
 8000d18:	e000      	b.n	8000d1c <_ZN7BMS_MOD5parseEmPhm+0x1c0>
					break;
 8000d1a:	bf00      	nop
				//if (cellTemperature[pos] > LIMIT_MAX_T)
				//	error_temp = BMS_ERROR_TEMP;

			}

			MAX_T = cellTemperature[0];
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
			MIN_T = cellTemperature[0];
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			for (int i = 0; i < 38; i++) {
 8000d34:	2300      	movs	r3, #0
 8000d36:	61bb      	str	r3, [r7, #24]
 8000d38:	e02b      	b.n	8000d92 <_ZN7BMS_MOD5parseEmPhm+0x236>
				if (cellTemperature[i] > MAX_T)
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	333c      	adds	r3, #60	@ 0x3c
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	4413      	add	r3, r2
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	dd09      	ble.n	8000d64 <_ZN7BMS_MOD5parseEmPhm+0x208>
					MAX_T = cellTemperature[i];
 8000d50:	68fa      	ldr	r2, [r7, #12]
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	333c      	adds	r3, #60	@ 0x3c
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	685a      	ldr	r2, [r3, #4]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8000d62:	e013      	b.n	8000d8c <_ZN7BMS_MOD5parseEmPhm+0x230>
				else if (cellTemperature[i] < MIN_T)
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	333c      	adds	r3, #60	@ 0x3c
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	4413      	add	r3, r2
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000d76:	429a      	cmp	r2, r3
 8000d78:	da08      	bge.n	8000d8c <_ZN7BMS_MOD5parseEmPhm+0x230>
					MIN_T = cellTemperature[i];
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	333c      	adds	r3, #60	@ 0x3c
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4413      	add	r3, r2
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			for (int i = 0; i < 38; i++) {
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	61bb      	str	r3, [r7, #24]
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	2b25      	cmp	r3, #37	@ 0x25
 8000d96:	ddd0      	ble.n	8000d3a <_ZN7BMS_MOD5parseEmPhm+0x1de>
			}

			return true;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e000      	b.n	8000d9e <_ZN7BMS_MOD5parseEmPhm+0x242>
			error_temp = 0;
		}*/

	}

	return false;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3728      	adds	r7, #40	@ 0x28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <_ZN7BMS_MOD13query_voltageEmPc>:

/*********************************************************************************************************
 ** Function name:           query_voltage
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/
int BMS_MOD::query_voltage(uint32_t time, char *buffer) {
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b086      	sub	sp, #24
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	60f8      	str	r0, [r7, #12]
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
	// Shunt voltage in milivolts

	if (get_state() == charge) {
 8000db2:	f001 f9d1 	bl	8002158 <_Z9get_statev>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b04      	cmp	r3, #4
 8000dba:	bf0c      	ite	eq
 8000dbc:	2301      	moveq	r3, #1
 8000dbe:	2300      	movne	r3, #0
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d107      	bne.n	8000dd6 <_ZN7BMS_MOD13query_voltageEmPc+0x30>

	} else {

		//Don't do anything

		message_balancing[0] = 0;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		message_balancing[1] = 0;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
	}

	if (time > time_lim_sent_volts) {
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d91e      	bls.n	8000e1e <_ZN7BMS_MOD13query_voltageEmPc+0x78>
		time_lim_sent_volts += TIME_LIM_SEND_VOLTS;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	69db      	ldr	r3, [r3, #28]
 8000de8:	441a      	add	r2, r3
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	635a      	str	r2, [r3, #52]	@ 0x34
		if (CANID != 0x00) { //It keeps sending 0x00 and dont know where
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d013      	beq.n	8000e1e <_ZN7BMS_MOD13query_voltageEmPc+0x78>
			if (module_send_message_CAN2(CANID, message_balancing, 2)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6818      	ldr	r0, [r3, #0]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	3348      	adds	r3, #72	@ 0x48
 8000dfe:	2202      	movs	r2, #2
 8000e00:	4619      	mov	r1, r3
 8000e02:	f001 f8ff 	bl	8002004 <module_send_message_CAN2>
 8000e06:	4603      	mov	r3, r0
					!= HAL_OK) {
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	bf14      	ite	ne
 8000e0c:	2301      	movne	r3, #1
 8000e0e:	2300      	moveq	r3, #0
 8000e10:	b2db      	uxtb	r3, r3
			if (module_send_message_CAN2(CANID, message_balancing, 2)
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <_ZN7BMS_MOD13query_voltageEmPc+0x78>
				error_volt = BMS_ERROR_COMMUNICATION;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			}
		}

	}

	if (time > time_lim_received_volts) {
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d904      	bls.n	8000e32 <_ZN7BMS_MOD13query_voltageEmPc+0x8c>

		error_volt = BMS_ERROR_COMMUNICATION;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8000e30:	e003      	b.n	8000e3a <_ZN7BMS_MOD13query_voltageEmPc+0x94>
	}
	else{
		error_volt = BMS_OK;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	2200      	movs	r2, #0
 8000e36:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	}

	if (TIME_LIM_PLOT_VOLTS > 0 && time > time_lim_plotted_volts) {
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d00f      	beq.n	8000e62 <_ZN7BMS_MOD13query_voltageEmPc+0xbc>
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d90a      	bls.n	8000e62 <_ZN7BMS_MOD13query_voltageEmPc+0xbc>
		time_lim_plotted_volts += TIME_LIM_PLOT_VOLTS;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	441a      	add	r2, r3
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	631a      	str	r2, [r3, #48]	@ 0x30
		voltage_info(buffer);
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	68f8      	ldr	r0, [r7, #12]
 8000e5e:	f7ff fd1b 	bl	8000898 <_ZN7BMS_MOD12voltage_infoEPc>
	}

	for (int i = 0; i < NUM_CELLS; i++) {
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	e00e      	b.n	8000e86 <_ZN7BMS_MOD13query_voltageEmPc+0xe0>
		voltage_acum += cellVoltagemV[i];
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6979      	ldr	r1, [r7, #20]
 8000e72:	312a      	adds	r1, #42	@ 0x2a
 8000e74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000e78:	441a      	add	r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	for (int i = 0; i < NUM_CELLS; i++) {
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	3301      	adds	r3, #1
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	4293      	cmp	r3, r2
 8000e92:	dbe9      	blt.n	8000e68 <_ZN7BMS_MOD13query_voltageEmPc+0xc2>
	}
	return error_volt;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <_ZN7BMS_MOD17query_temperatureEmPc>:
/*********************************************************************************************************
 ** Function name:           query_temperature
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/

int BMS_MOD::query_temperature(uint32_t time, char *buffer) {
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b084      	sub	sp, #16
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	60f8      	str	r0, [r7, #12]
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
// Function for performing a correct behavior
	if (time > time_lim_sent_temps) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE TEMPERATURES
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d912      	bls.n	8000ede <_ZN7BMS_MOD17query_temperatureEmPc+0x3c>
		time_lim_sent_temps += TIME_LIM_SEND_TEMPS;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ec0:	441a      	add	r2, r3
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	641a      	str	r2, [r3, #64]	@ 0x40

		if (module_send_message_CAN2(CANID + 20, message_temperatures, 2)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f103 0014 	add.w	r0, r3, #20
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	334a      	adds	r3, #74	@ 0x4a
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f001 f895 	bl	8002004 <module_send_message_CAN2>
 8000eda:	4603      	mov	r3, r0
				!= HAL_OK) {
 8000edc:	2b00      	cmp	r3, #0
			//error_temp = BMS_ERROR_TEMP; // If the message is not sended then, error
		}
	}

	if (time_lim_sent_temps > 0 && time > time_lim_received_temps
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <_ZN7BMS_MOD17query_temperatureEmPc+0x4c>
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	429a      	cmp	r2, r3
			&& time - time_lim_received_temps > TIME_LIM_RECV_TEMPS) {
		//error_temp = BMS_ERROR_COMMUNICATION;
	}

	if (TIME_LIM_PLOT_TEMPS > 0 && time > time_lim_plotted_temps) {
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00f      	beq.n	8000f16 <_ZN7BMS_MOD17query_temperatureEmPc+0x74>
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d90a      	bls.n	8000f16 <_ZN7BMS_MOD17query_temperatureEmPc+0x74>
		time_lim_plotted_temps += TIME_LIM_PLOT_TEMPS;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f08:	441a      	add	r2, r3
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	63da      	str	r2, [r3, #60]	@ 0x3c
		temperature_info(buffer);
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	68f8      	ldr	r0, [r7, #12]
 8000f12:	f7ff fd93 	bl	8000a3c <_ZN7BMS_MOD16temperature_infoEPc>
	}

	return error_temp;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0

}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <_ZN7CPU_MODC1Emmi>:

// ********************************************************************************************************
// **Function name:           CPU_MOD
// **Descriptions:            Initialization function of teh class
// ********************************************************************************************************
CPU_MOD::CPU_MOD(uint32_t _ID_send, uint32_t _ID_recv, int _LAG) { /////////////////////////Habia un _LAG=0
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2201      	movs	r2, #1
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2202      	movs	r2, #2
 8000f48:	731a      	strb	r2, [r3, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	611a      	str	r2, [r3, #16]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f56:	615a      	str	r2, [r3, #20]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2264      	movs	r2, #100	@ 0x64
 8000f5c:	619a      	str	r2, [r3, #24]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4a18      	ldr	r2, [pc, #96]	@ (8000fc4 <_ZN7CPU_MODC1Emmi+0xa0>)
 8000f62:	61da      	str	r2, [r3, #28]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	695a      	ldr	r2, [r3, #20]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	621a      	str	r2, [r3, #32]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	625a      	str	r2, [r3, #36]	@ 0x24
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	69da      	ldr	r2, [r3, #28]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2200      	movs	r2, #0
 8000f84:	631a      	str	r2, [r3, #48]	@ 0x30
    CANID_send = _ID_send;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	68ba      	ldr	r2, [r7, #8]
 8000f8a:	601a      	str	r2, [r3, #0]
    CANID_recv = _ID_recv;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	605a      	str	r2, [r3, #4]

    time_lim_plotted += _LAG;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6a1a      	ldr	r2, [r3, #32]
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	441a      	add	r2, r3
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	621a      	str	r2, [r3, #32]
    time_lim_sended += _LAG;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	441a      	add	r2, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	625a      	str	r2, [r3, #36]	@ 0x24
    time_lim_received += _LAG;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	441a      	add	r2, r3
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	000f4240 	.word	0x000f4240

08000fc8 <_ZN7CPU_MOD5parseEmPhm>:

// ********************************************************************************************************
// **Function name:           parse
// **Descriptions:            Function for parsing the received data via CAN protocl
// ********************************************************************************************************
bool CPU_MOD::parse(uint32_t id, uint8_t* buf, uint32_t t) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	603b      	str	r3, [r7, #0]
    if (id == 0x100) {
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fdc:	d12e      	bne.n	800103c <_ZN7CPU_MOD5parseEmPhm+0x74>
        error = CPU_OK;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
        time_lim_received = t + TIME_LIM_RECV;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	69da      	ldr	r2, [r3, #28]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	441a      	add	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	629a      	str	r2, [r3, #40]	@ 0x28
        DC_BUS = (int)((buf[1]<<8)|buf[0]); // This direction sends the voltage in DC_BUS
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	021b      	lsls	r3, r3, #8
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	7812      	ldrb	r2, [r2, #0]
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	631a      	str	r2, [r3, #48]	@ 0x30
        if (DC_BUS > 280) { //(DC_BUS>0.9*voltage_acum)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 800100a:	dd15      	ble.n	8001038 <_ZN7CPU_MOD5parseEmPhm+0x70>
            error = CPU_BUS_LINE_OK;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2202      	movs	r2, #2
 8001010:	609a      	str	r2, [r3, #8]
            if (module_send_message_CAN1(CANID_send, currentState, 1) != HAL_OK){
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	6818      	ldr	r0, [r3, #0]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	330c      	adds	r3, #12
 800101a:	2201      	movs	r2, #1
 800101c:	4619      	mov	r1, r3
 800101e:	f000 ffaf 	bl	8001f80 <module_send_message_CAN1>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	bf14      	ite	ne
 8001028:	2301      	movne	r3, #1
 800102a:	2300      	moveq	r3, #0
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d002      	beq.n	8001038 <_ZN7CPU_MOD5parseEmPhm+0x70>
                //error = CPU_ERROR_COMMUNICATION;
                print((char*)"error message");
 8001032:	4805      	ldr	r0, [pc, #20]	@ (8001048 <_ZN7CPU_MOD5parseEmPhm+0x80>)
 8001034:	f001 f806 	bl	8002044 <print>
            }

        }
        return true;
 8001038:	2301      	movs	r3, #1
 800103a:	e000      	b.n	800103e <_ZN7CPU_MOD5parseEmPhm+0x76>
    }
    return false;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	0800cf64 	.word	0x0800cf64

0800104c <_ZN7CPU_MOD5queryEmPc>:

// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function to check if i need to send a mesage new mesage and the received mesajes interval are within the limits
// ********************************************************************************************************
int CPU_MOD::query(uint32_t time, char* buffer) {
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
	// Function for performing a correct behaivour
    if (time > time_lim_sended) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE BMS
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	429a      	cmp	r2, r3
 8001060:	d906      	bls.n	8001070 <_ZN7CPU_MOD5queryEmPc+0x24>
        time_lim_sended += TIME_LIM_SEND;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	441a      	add	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    if (time > time_lim_received)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001074:	68ba      	ldr	r2, [r7, #8]
 8001076:	429a      	cmp	r2, r3
 8001078:	d90f      	bls.n	800109a <_ZN7CPU_MOD5queryEmPc+0x4e>
        //error = CPU_ERROR_COMMUNICATION; ///////Cheking if everything is alright each time

    if (TIME_LIM_PLOT > 0 && time > time_lim_plotted) {
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d00b      	beq.n	800109a <_ZN7CPU_MOD5queryEmPc+0x4e>
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	429a      	cmp	r2, r3
 800108a:	d906      	bls.n	800109a <_ZN7CPU_MOD5queryEmPc+0x4e>
        time_lim_plotted += TIME_LIM_PLOT;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	6a1a      	ldr	r2, [r3, #32]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	441a      	add	r2, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	621a      	str	r2, [r3, #32]
        //info(buffer);
    }
    return error;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	689b      	ldr	r3, [r3, #8]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <_ZN7CPU_MOD11updateStateEi>:

void CPU_MOD::updateState(int s) {
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	6039      	str	r1, [r7, #0]
    currentState[0] = s & 0xFF;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	731a      	strb	r2, [r3, #12]
    current_state = s;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	611a      	str	r2, [r3, #16]
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <_ZN11Current_MODC1Emi>:

// ********************************************************************************************************
// **Function name:           Current_MOD
// **Descriptions:            Initialization function of current class
// **********************************************************************************************************
Current_MOD::Current_MOD(uint32_t ID, int _C_MAX)
 80010ce:	b480      	push	{r7}
 80010d0:	b085      	sub	sp, #20
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	60f8      	str	r0, [r7, #12]
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2200      	movs	r2, #0
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2200      	movs	r2, #0
 80010ea:	721a      	strb	r2, [r3, #8]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2200      	movs	r2, #0
 80010f0:	725a      	strb	r2, [r3, #9]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f04f 0200 	mov.w	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2200      	movs	r2, #0
 800110e:	61da      	str	r2, [r3, #28]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001116:	621a      	str	r2, [r3, #32]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	22fa      	movs	r2, #250	@ 0xfa
 800111c:	625a      	str	r2, [r3, #36]	@ 0x24
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2232      	movs	r2, #50	@ 0x32
 8001122:	629a      	str	r2, [r3, #40]	@ 0x28
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2232      	movs	r2, #50	@ 0x32
 8001128:	62da      	str	r2, [r3, #44]	@ 0x2c
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2200      	movs	r2, #0
 800112e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2200      	movs	r2, #0
 8001134:	635a      	str	r2, [r3, #52]	@ 0x34
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2200      	movs	r2, #0
 800113a:	639a      	str	r2, [r3, #56]	@ 0x38
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2200      	movs	r2, #0
 8001140:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2200      	movs	r2, #0
 8001146:	641a      	str	r2, [r3, #64]	@ 0x40
{
    CANID = ID;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	605a      	str	r2, [r3, #4]
    C_MAX = _C_MAX;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	601a      	str	r2, [r3, #0]
    flag_error_current = 1;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2201      	movs	r2, #1
 8001158:	61da      	str	r2, [r3, #28]
}
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4618      	mov	r0, r3
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <_ZN11Current_MOD5queryEiPc>:
// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function that transforms the voltage measured by the sensor to its equivalent current
// **********************************************************************************************************
int Current_MOD::query(int time, char* buffer)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08c      	sub	sp, #48	@ 0x30
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
    error = Current_OK;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2200      	movs	r2, #0
 8001178:	631a      	str	r2, [r3, #48]	@ 0x30
    //printValue(Current);
    Current=(2.5-VoltageV)/0.0057; //Sensitivity is 5,7 mv/A
    */

    int Current1,Current2,Current3,Current4,Current5,Current6,Current7;
    Current1 = readAnalogValue();
 800117a:	f000 ffc7 	bl	800210c <readAnalogValue>
 800117e:	eef0 7a40 	vmov.f32	s15, s0
 8001182:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001186:	ee17 3a90 	vmov	r3, s15
 800118a:	62bb      	str	r3, [r7, #40]	@ 0x28
    //HAL_Delay(3);
    Current2 = readAnalogValue();
 800118c:	f000 ffbe 	bl	800210c <readAnalogValue>
 8001190:	eef0 7a40 	vmov.f32	s15, s0
 8001194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001198:	ee17 3a90 	vmov	r3, s15
 800119c:	627b      	str	r3, [r7, #36]	@ 0x24
    //HAL_Delay(3);
    Current3 = readAnalogValue();
 800119e:	f000 ffb5 	bl	800210c <readAnalogValue>
 80011a2:	eef0 7a40 	vmov.f32	s15, s0
 80011a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011aa:	ee17 3a90 	vmov	r3, s15
 80011ae:	623b      	str	r3, [r7, #32]
    //HAL_Delay(3);
    Current4 = readAnalogValue();
 80011b0:	f000 ffac 	bl	800210c <readAnalogValue>
 80011b4:	eef0 7a40 	vmov.f32	s15, s0
 80011b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011bc:	ee17 3a90 	vmov	r3, s15
 80011c0:	61fb      	str	r3, [r7, #28]
    //HAL_Delay(3);
    Current5 = readAnalogValue();
 80011c2:	f000 ffa3 	bl	800210c <readAnalogValue>
 80011c6:	eef0 7a40 	vmov.f32	s15, s0
 80011ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ce:	ee17 3a90 	vmov	r3, s15
 80011d2:	61bb      	str	r3, [r7, #24]
    //HAL_Delay(3);
    Current6 = readAnalogValue();
 80011d4:	f000 ff9a 	bl	800210c <readAnalogValue>
 80011d8:	eef0 7a40 	vmov.f32	s15, s0
 80011dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e0:	ee17 3a90 	vmov	r3, s15
 80011e4:	617b      	str	r3, [r7, #20]
    //HAL_Delay(3);
    Current7 = readAnalogValue();
 80011e6:	f000 ff91 	bl	800210c <readAnalogValue>
 80011ea:	eef0 7a40 	vmov.f32	s15, s0
 80011ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f2:	ee17 3a90 	vmov	r3, s15
 80011f6:	613b      	str	r3, [r7, #16]
    //HAL_Delay(3);

    Current = (Current1+Current2+Current3+Current4+Current5+Current6+Current7)/7;
 80011f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fc:	441a      	add	r2, r3
 80011fe:	6a3b      	ldr	r3, [r7, #32]
 8001200:	441a      	add	r2, r3
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	441a      	add	r2, r3
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	441a      	add	r2, r3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	441a      	add	r2, r3
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4413      	add	r3, r2
 8001212:	4a5f      	ldr	r2, [pc, #380]	@ (8001390 <_ZN11Current_MOD5queryEiPc+0x228>)
 8001214:	fb82 1203 	smull	r1, r2, r2, r3
 8001218:	441a      	add	r2, r3
 800121a:	1092      	asrs	r2, r2, #2
 800121c:	17db      	asrs	r3, r3, #31
 800121e:	1ad2      	subs	r2, r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	63da      	str	r2, [r3, #60]	@ 0x3c

    Current = 0.22727 * Current - 489.455 + 0.5;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001228:	ee07 3a90 	vmov	s15, r3
 800122c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001230:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8001378 <_ZN11Current_MOD5queryEiPc+0x210>
 8001234:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001238:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8001380 <_ZN11Current_MOD5queryEiPc+0x218>
 800123c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001240:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001244:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001248:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800124c:	ee17 2a90 	vmov	r2, s15
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	63da      	str	r2, [r3, #60]	@ 0x3c

    //printValue(Current);
    //printValue(Current);

    if(Current > C_MAX*0.8 && Current < C_MAX)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001258:	ee07 3a90 	vmov	s15, r3
 800125c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	ee07 3a90 	vmov	s15, r3
 8001268:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800126c:	ed9f 5b46 	vldr	d5, [pc, #280]	@ 8001388 <_ZN11Current_MOD5queryEiPc+0x220>
 8001270:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001274:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127c:	dd11      	ble.n	80012a2 <_ZN11Current_MOD5queryEiPc+0x13a>
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	429a      	cmp	r2, r3
 8001288:	da0b      	bge.n	80012a2 <_ZN11Current_MOD5queryEiPc+0x13a>
    {
        if(flag_error_current == 0) module_send_message_NoExtId_CAN1(0x500,message,1); //If current between 80 and 100% of maximun, sends alert
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d107      	bne.n	80012a2 <_ZN11Current_MOD5queryEiPc+0x13a>
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	3308      	adds	r3, #8
 8001296:	2201      	movs	r2, #1
 8001298:	4619      	mov	r1, r3
 800129a:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800129e:	f000 fe91 	bl	8001fc4 <module_send_message_NoExtId_CAN1>
    }

    if (Current > C_MAX)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	dd18      	ble.n	80012e0 <_ZN11Current_MOD5queryEiPc+0x178>
    {
        if (flag_error_current == 1) {
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d107      	bne.n	80012c6 <_ZN11Current_MOD5queryEiPc+0x15e>
        	module_send_message_NoExtId_CAN1(0x501, message, 2); //If current over maximun, sends alert
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	3308      	adds	r3, #8
 80012ba:	2202      	movs	r2, #2
 80012bc:	4619      	mov	r1, r3
 80012be:	f240 5001 	movw	r0, #1281	@ 0x501
 80012c2:	f000 fe7f 	bl	8001fc4 <module_send_message_NoExtId_CAN1>
        }

        flag_error_current++;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	61da      	str	r2, [r3, #28]

        if (flag_charger != 1 || flag_charger == 1) //Only cut the AMS if accu not connected to charger, during charging the current control is on charger
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d119      	bne.n	800130c <_ZN11Current_MOD5queryEiPc+0x1a4>
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012dc:	2b01      	cmp	r3, #1
 80012de:	e015      	b.n	800130c <_ZN11Current_MOD5queryEiPc+0x1a4>
            }
        }
    }
    else
    {
        if (flag_error_current != 0)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00e      	beq.n	8001306 <_ZN11Current_MOD5queryEiPc+0x19e>
		for (int i = 0; i < 5; i++)
 80012e8:	2300      	movs	r3, #0
 80012ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012ec:	e008      	b.n	8001300 <_ZN11Current_MOD5queryEiPc+0x198>
		{
			module_send_message_NoExtId_CAN1(0x502, 0, 2); //If current normal, sends green flag
 80012ee:	2202      	movs	r2, #2
 80012f0:	2100      	movs	r1, #0
 80012f2:	f240 5002 	movw	r0, #1282	@ 0x502
 80012f6:	f000 fe65 	bl	8001fc4 <module_send_message_NoExtId_CAN1>
		for (int i = 0; i < 5; i++)
 80012fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012fc:	3301      	adds	r3, #1
 80012fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001302:	2b04      	cmp	r3, #4
 8001304:	ddf3      	ble.n	80012ee <_ZN11Current_MOD5queryEiPc+0x186>
		}
        flag_error_current = 0;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2200      	movs	r2, #0
 800130a:	61da      	str	r2, [r3, #28]
    }


    if (time > time_lim_sended)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001310:	68ba      	ldr	r2, [r7, #8]
 8001312:	429a      	cmp	r2, r3
 8001314:	dd16      	ble.n	8001344 <_ZN11Current_MOD5queryEiPc+0x1dc>
    {
        time_lim_sended += TIME_LIM_SEND;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800131e:	441a      	add	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	62da      	str	r2, [r3, #44]	@ 0x2c
        message[0] = 0;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2200      	movs	r2, #0
 8001328:	721a      	strb	r2, [r3, #8]
        message[1] = Current & 0xFF;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800132e:	b2da      	uxtb	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	725a      	strb	r2, [r3, #9]
        module_send_message_NoExtId_CAN1(CANID, message, 2); //Sends current through CAN each interval of ms
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6858      	ldr	r0, [r3, #4]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3308      	adds	r3, #8
 800133c:	2202      	movs	r2, #2
 800133e:	4619      	mov	r1, r3
 8001340:	f000 fe40 	bl	8001fc4 <module_send_message_NoExtId_CAN1>
    }


    if (TIME_LIM_PLOT > 0 && time > time_lim_plotted)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	2b00      	cmp	r3, #0
 800134a:	dd0f      	ble.n	800136c <_ZN11Current_MOD5queryEiPc+0x204>
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001350:	68ba      	ldr	r2, [r7, #8]
 8001352:	429a      	cmp	r2, r3
 8001354:	dd0a      	ble.n	800136c <_ZN11Current_MOD5queryEiPc+0x204>
    {
        time_lim_plotted += TIME_LIM_PLOT;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	441a      	add	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	629a      	str	r2, [r3, #40]	@ 0x28
        info(buffer);
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f000 f814 	bl	8001394 <_ZN11Current_MOD4infoEPc>

    }

    
    return error;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
}
 8001370:	4618      	mov	r0, r3
 8001372:	3730      	adds	r7, #48	@ 0x30
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	f0ae5365 	.word	0xf0ae5365
 800137c:	3fcd172e 	.word	0x3fcd172e
 8001380:	ae147ae1 	.word	0xae147ae1
 8001384:	407e9747 	.word	0x407e9747
 8001388:	9999999a 	.word	0x9999999a
 800138c:	3fe99999 	.word	0x3fe99999
 8001390:	92492493 	.word	0x92492493

08001394 <_ZN11Current_MOD4infoEPc>:

// ********************************************************************************************************
// **Function name:           info
// **Descriptions:            Function for printing the class data
// **********************************************************************************************************
void Current_MOD::info(char* buffer) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
    if (getUARTState() == HAL_UART_STATE_READY) { // Send the message just if there is a serial por connected
 800139e:	f000 feab 	bl	80020f8 <getUARTState>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b20      	cmp	r3, #32
 80013a6:	bf0c      	ite	eq
 80013a8:	2301      	moveq	r3, #1
 80013aa:	2300      	movne	r3, #0
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d043      	beq.n	800143a <_ZN11Current_MOD4infoEPc+0xa6>
		sprintf(buffer, "\n***********************\n");
 80013b2:	4924      	ldr	r1, [pc, #144]	@ (8001444 <_ZN11Current_MOD4infoEPc+0xb0>)
 80013b4:	6838      	ldr	r0, [r7, #0]
 80013b6:	f00a ffed 	bl	800c394 <siprintf>
		print(buffer);
 80013ba:	6838      	ldr	r0, [r7, #0]
 80013bc:	f000 fe42 	bl	8002044 <print>
		sprintf(buffer, "         Current\n");
 80013c0:	4921      	ldr	r1, [pc, #132]	@ (8001448 <_ZN11Current_MOD4infoEPc+0xb4>)
 80013c2:	6838      	ldr	r0, [r7, #0]
 80013c4:	f00a ffe6 	bl	800c394 <siprintf>
		print(buffer);
 80013c8:	6838      	ldr	r0, [r7, #0]
 80013ca:	f000 fe3b 	bl	8002044 <print>
		sprintf(buffer, "***********************\n");
 80013ce:	491f      	ldr	r1, [pc, #124]	@ (800144c <_ZN11Current_MOD4infoEPc+0xb8>)
 80013d0:	6838      	ldr	r0, [r7, #0]
 80013d2:	f00a ffdf 	bl	800c394 <siprintf>
		print(buffer);
 80013d6:	6838      	ldr	r0, [r7, #0]
 80013d8:	f000 fe34 	bl	8002044 <print>
		sprintf(buffer, " - ERROR:     %i\n", error);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e0:	461a      	mov	r2, r3
 80013e2:	491b      	ldr	r1, [pc, #108]	@ (8001450 <_ZN11Current_MOD4infoEPc+0xbc>)
 80013e4:	6838      	ldr	r0, [r7, #0]
 80013e6:	f00a ffd5 	bl	800c394 <siprintf>
		print(buffer);
 80013ea:	6838      	ldr	r0, [r7, #0]
 80013ec:	f000 fe2a 	bl	8002044 <print>
		sprintf(buffer, " - CAN ID:    0x%lx\n", CANID);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4917      	ldr	r1, [pc, #92]	@ (8001454 <_ZN11Current_MOD4infoEPc+0xc0>)
 80013f8:	6838      	ldr	r0, [r7, #0]
 80013fa:	f00a ffcb 	bl	800c394 <siprintf>
		print(buffer);
 80013fe:	6838      	ldr	r0, [r7, #0]
 8001400:	f000 fe20 	bl	8002044 <print>
		sprintf(buffer, " - LIM C =    %i A\n", C_MAX);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	4913      	ldr	r1, [pc, #76]	@ (8001458 <_ZN11Current_MOD4infoEPc+0xc4>)
 800140c:	6838      	ldr	r0, [r7, #0]
 800140e:	f00a ffc1 	bl	800c394 <siprintf>
		print(buffer);
 8001412:	6838      	ldr	r0, [r7, #0]
 8001414:	f000 fe16 	bl	8002044 <print>
		sprintf(buffer, "-----------------------\n");
 8001418:	4910      	ldr	r1, [pc, #64]	@ (800145c <_ZN11Current_MOD4infoEPc+0xc8>)
 800141a:	6838      	ldr	r0, [r7, #0]
 800141c:	f00a ffba 	bl	800c394 <siprintf>
		print(buffer);
 8001420:	6838      	ldr	r0, [r7, #0]
 8001422:	f000 fe0f 	bl	8002044 <print>
		sprintf(buffer, "Current (A): %i\n", Current);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800142a:	461a      	mov	r2, r3
 800142c:	490c      	ldr	r1, [pc, #48]	@ (8001460 <_ZN11Current_MOD4infoEPc+0xcc>)
 800142e:	6838      	ldr	r0, [r7, #0]
 8001430:	f00a ffb0 	bl	800c394 <siprintf>
		print(buffer);
 8001434:	6838      	ldr	r0, [r7, #0]
 8001436:	f000 fe05 	bl	8002044 <print>

    }
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	0800cf74 	.word	0x0800cf74
 8001448:	0800cf90 	.word	0x0800cf90
 800144c:	0800cfa4 	.word	0x0800cfa4
 8001450:	0800cfc0 	.word	0x0800cfc0
 8001454:	0800cfd4 	.word	0x0800cfd4
 8001458:	0800cfec 	.word	0x0800cfec
 800145c:	0800d000 	.word	0x0800d000
 8001460:	0800d01c 	.word	0x0800d01c

08001464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b085      	sub	sp, #20
 8001468:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800146a:	f001 fd61 	bl	8002f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800146e:	f000 f8a5 	bl	80015bc <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001472:	f000 f91f 	bl	80016b4 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001476:	f000 fc5f 	bl	8001d38 <_ZL12MX_GPIO_Initv>
  MX_FDCAN2_Init();
 800147a:	f000 fae5 	bl	8001a48 <_ZL14MX_FDCAN2_Initv>
  MX_FDCAN1_Init();
 800147e:	f000 fa59 	bl	8001934 <_ZL14MX_FDCAN1_Initv>
  MX_USART2_UART_Init();
 8001482:	f000 fbf9 	bl	8001c78 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 8001486:	f000 f949 	bl	800171c <_ZL12MX_ADC1_Initv>
  MX_ADC3_Init();
 800148a:	f000 f9d9 	bl	8001840 <_ZL12MX_ADC3_Initv>
  MX_TIM17_Init();
 800148e:	f000 fb65 	bl	8001b5c <_ZL13MX_TIM17_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001492:	2100      	movs	r1, #0
 8001494:	483e      	ldr	r0, [pc, #248]	@ (8001590 <main+0x12c>)
 8001496:	f008 fe95 	bl	800a1c4 <HAL_TIM_PWM_Start>



  if (HAL_FDCAN_Start(&hfdcan1) == HAL_OK){
 800149a:	483e      	ldr	r0, [pc, #248]	@ (8001594 <main+0x130>)
 800149c:	f004 f900 	bl	80056a0 <HAL_FDCAN_Start>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	bf0c      	ite	eq
 80014a6:	2301      	moveq	r3, #1
 80014a8:	2300      	movne	r3, #0
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d002      	beq.n	80014b6 <main+0x52>
	  print((char*)"CAN_ACU iniciado");
 80014b0:	4839      	ldr	r0, [pc, #228]	@ (8001598 <main+0x134>)
 80014b2:	f000 fdc7 	bl	8002044 <print>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) == HAL_OK)
 80014b6:	2200      	movs	r2, #0
 80014b8:	2101      	movs	r1, #1
 80014ba:	4836      	ldr	r0, [pc, #216]	@ (8001594 <main+0x130>)
 80014bc:	f004 fae2 	bl	8005a84 <HAL_FDCAN_ActivateNotification>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	bf0c      	ite	eq
 80014c6:	2301      	moveq	r3, #1
 80014c8:	2300      	movne	r3, #0
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <main+0x72>
  {
	  print((char*)"CAN_ACU notification");
 80014d0:	4832      	ldr	r0, [pc, #200]	@ (800159c <main+0x138>)
 80014d2:	f000 fdb7 	bl	8002044 <print>
  }

  if (HAL_FDCAN_Start(&hfdcan2) == HAL_OK){
 80014d6:	4832      	ldr	r0, [pc, #200]	@ (80015a0 <main+0x13c>)
 80014d8:	f004 f8e2 	bl	80056a0 <HAL_FDCAN_Start>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	bf0c      	ite	eq
 80014e2:	2301      	moveq	r3, #1
 80014e4:	2300      	movne	r3, #0
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <main+0x8e>
	  print((char*)"CAN_BMS iniciado");
 80014ec:	482d      	ldr	r0, [pc, #180]	@ (80015a4 <main+0x140>)
 80014ee:	f000 fda9 	bl	8002044 <print>
  }

  if(HAL_ADC_Start(&hadc3) == HAL_OK){
 80014f2:	482d      	ldr	r0, [pc, #180]	@ (80015a8 <main+0x144>)
 80014f4:	f002 fb00 	bl	8003af8 <HAL_ADC_Start>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	bf0c      	ite	eq
 80014fe:	2301      	moveq	r3, #1
 8001500:	2300      	movne	r3, #0
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	d002      	beq.n	800150e <main+0xaa>
	  print((char*)"ADC iniciado");
 8001508:	4828      	ldr	r0, [pc, #160]	@ (80015ac <main+0x148>)
 800150a:	f000 fd9b 	bl	8002044 <print>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  select_state();
 800150e:	f000 fe2f 	bl	8002170 <_Z12select_statev>
		  msg_acu.bus = 1;
		  msg_acu.time = HAL_GetTick();
		  parse_state(msg_acu);
	  }*/

	  if (HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader_bms, RxData) == HAL_OK) {
 8001512:	4b27      	ldr	r3, [pc, #156]	@ (80015b0 <main+0x14c>)
 8001514:	4a27      	ldr	r2, [pc, #156]	@ (80015b4 <main+0x150>)
 8001516:	2140      	movs	r1, #64	@ 0x40
 8001518:	4821      	ldr	r0, [pc, #132]	@ (80015a0 <main+0x13c>)
 800151a:	f004 f947 	bl	80057ac <HAL_FDCAN_GetRxMessage>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	bf0c      	ite	eq
 8001524:	2301      	moveq	r3, #1
 8001526:	2300      	movne	r3, #0
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0ef      	beq.n	800150e <main+0xaa>

		  msg_bms.id = RxHeader_bms.Identifier;
 800152e:	4b21      	ldr	r3, [pc, #132]	@ (80015b4 <main+0x150>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a21      	ldr	r2, [pc, #132]	@ (80015b8 <main+0x154>)
 8001534:	6013      	str	r3, [r2, #0]
		  msg_bms.len = RxHeader_bms.DataLength;
 8001536:	4b1f      	ldr	r3, [pc, #124]	@ (80015b4 <main+0x150>)
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	b2da      	uxtb	r2, r3
 800153c:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <main+0x154>)
 800153e:	711a      	strb	r2, [r3, #4]
		  for (int i = 0; i < 8; i++) {msg_bms.buf[i] = RxData[i];}
 8001540:	2300      	movs	r3, #0
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	e00c      	b.n	8001560 <main+0xfc>
 8001546:	4a1a      	ldr	r2, [pc, #104]	@ (80015b0 <main+0x14c>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	7819      	ldrb	r1, [r3, #0]
 800154e:	4a1a      	ldr	r2, [pc, #104]	@ (80015b8 <main+0x154>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	3305      	adds	r3, #5
 8001556:	460a      	mov	r2, r1
 8001558:	701a      	strb	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3301      	adds	r3, #1
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b07      	cmp	r3, #7
 8001564:	ddef      	ble.n	8001546 <main+0xe2>
		  msg_bms.bus = 2;
 8001566:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <main+0x154>)
 8001568:	2202      	movs	r2, #2
 800156a:	611a      	str	r2, [r3, #16]
		  msg_bms.time = HAL_GetTick();
 800156c:	f001 fd66 	bl	800303c <HAL_GetTick>
 8001570:	4603      	mov	r3, r0
 8001572:	4a11      	ldr	r2, [pc, #68]	@ (80015b8 <main+0x154>)
 8001574:	6153      	str	r3, [r2, #20]

		  parse_state(msg_bms);
 8001576:	4b10      	ldr	r3, [pc, #64]	@ (80015b8 <main+0x154>)
 8001578:	466c      	mov	r4, sp
 800157a:	f103 0210 	add.w	r2, r3, #16
 800157e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001582:	e884 0003 	stmia.w	r4, {r0, r1}
 8001586:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001588:	f001 f88a 	bl	80026a0 <_Z11parse_state6CANMsg>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800158c:	e7bf      	b.n	800150e <main+0xaa>
 800158e:	bf00      	nop
 8001590:	240002a8 	.word	0x240002a8
 8001594:	24000168 	.word	0x24000168
 8001598:	0800d030 	.word	0x0800d030
 800159c:	0800d044 	.word	0x0800d044
 80015a0:	24000208 	.word	0x24000208
 80015a4:	0800d05c 	.word	0x0800d05c
 80015a8:	240000f8 	.word	0x240000f8
 80015ac:	0800d070 	.word	0x0800d070
 80015b0:	24000420 	.word	0x24000420
 80015b4:	240003f8 	.word	0x240003f8
 80015b8:	2400048c 	.word	0x2400048c

080015bc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b09c      	sub	sp, #112	@ 0x70
 80015c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c6:	224c      	movs	r2, #76	@ 0x4c
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f00a ff04 	bl	800c3d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	2220      	movs	r2, #32
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f00a fefe 	bl	800c3d8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80015dc:	2002      	movs	r0, #2
 80015de:	f005 f9b3 	bl	8006948 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80015e2:	2300      	movs	r3, #0
 80015e4:	603b      	str	r3, [r7, #0]
 80015e6:	4b32      	ldr	r3, [pc, #200]	@ (80016b0 <_Z18SystemClock_Configv+0xf4>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	4a31      	ldr	r2, [pc, #196]	@ (80016b0 <_Z18SystemClock_Configv+0xf4>)
 80015ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80015f0:	6193      	str	r3, [r2, #24]
 80015f2:	4b2f      	ldr	r3, [pc, #188]	@ (80016b0 <_Z18SystemClock_Configv+0xf4>)
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80015fe:	bf00      	nop
 8001600:	4b2b      	ldr	r3, [pc, #172]	@ (80016b0 <_Z18SystemClock_Configv+0xf4>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001608:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800160c:	bf14      	ite	ne
 800160e:	2301      	movne	r3, #1
 8001610:	2300      	moveq	r3, #0
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f3      	bne.n	8001600 <_Z18SystemClock_Configv+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001618:	2301      	movs	r3, #1
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800161c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001620:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001622:	2302      	movs	r3, #2
 8001624:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001626:	2302      	movs	r3, #2
 8001628:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800162a:	2302      	movs	r3, #2
 800162c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 800162e:	232c      	movs	r3, #44	@ 0x2c
 8001630:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001632:	2301      	movs	r3, #1
 8001634:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001636:	2304      	movs	r3, #4
 8001638:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800163a:	2302      	movs	r3, #2
 800163c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800163e:	230c      	movs	r3, #12
 8001640:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001642:	2300      	movs	r3, #0
 8001644:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800164a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800164e:	4618      	mov	r0, r3
 8001650:	f005 f9b4 	bl	80069bc <HAL_RCC_OscConfig>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	bf14      	ite	ne
 800165a:	2301      	movne	r3, #1
 800165c:	2300      	moveq	r3, #0
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8001664:	f000 fd72 	bl	800214c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001668:	233f      	movs	r3, #63	@ 0x3f
 800166a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800166c:	2303      	movs	r3, #3
 800166e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001674:	2308      	movs	r3, #8
 8001676:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001678:	2340      	movs	r3, #64	@ 0x40
 800167a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800167c:	2340      	movs	r3, #64	@ 0x40
 800167e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001680:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001684:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001686:	2340      	movs	r3, #64	@ 0x40
 8001688:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	2103      	movs	r1, #3
 800168e:	4618      	mov	r0, r3
 8001690:	f005 fd6e 	bl	8007170 <HAL_RCC_ClockConfig>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	bf14      	ite	ne
 800169a:	2301      	movne	r3, #1
 800169c:	2300      	moveq	r3, #0
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <_Z18SystemClock_Configv+0xec>
  {
    Error_Handler();
 80016a4:	f000 fd52 	bl	800214c <Error_Handler>
  }
}
 80016a8:	bf00      	nop
 80016aa:	3770      	adds	r7, #112	@ 0x70
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	58024800 	.word	0x58024800

080016b4 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b0ae      	sub	sp, #184	@ 0xb8
 80016b8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016ba:	463b      	mov	r3, r7
 80016bc:	22b8      	movs	r2, #184	@ 0xb8
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f00a fe89 	bl	800c3d8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016c6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80016ca:	f04f 0300 	mov.w	r3, #0
 80016ce:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80016d2:	2302      	movs	r3, #2
 80016d4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80016d6:	2310      	movs	r3, #16
 80016d8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80016da:	2302      	movs	r3, #2
 80016dc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80016de:	2302      	movs	r3, #2
 80016e0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80016e2:	2302      	movs	r3, #2
 80016e4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80016e6:	23c0      	movs	r3, #192	@ 0xc0
 80016e8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016f8:	463b      	mov	r3, r7
 80016fa:	4618      	mov	r0, r3
 80016fc:	f006 f8c4 	bl	8007888 <HAL_RCCEx_PeriphCLKConfig>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	bf14      	ite	ne
 8001706:	2301      	movne	r3, #1
 8001708:	2300      	moveq	r3, #0
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <_Z24PeriphCommonClock_Configv+0x60>
  {
    Error_Handler();
 8001710:	f000 fd1c 	bl	800214c <Error_Handler>
  }
}
 8001714:	bf00      	nop
 8001716:	37b8      	adds	r7, #184	@ 0xb8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08c      	sub	sp, #48	@ 0x30
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001722:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800172e:	463b      	mov	r3, r7
 8001730:	2224      	movs	r2, #36	@ 0x24
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f00a fe4f 	bl	800c3d8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800173a:	4b3e      	ldr	r3, [pc, #248]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 800173c:	4a3e      	ldr	r2, [pc, #248]	@ (8001838 <_ZL12MX_ADC1_Initv+0x11c>)
 800173e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001740:	4b3c      	ldr	r3, [pc, #240]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 8001742:	2200      	movs	r2, #0
 8001744:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001746:	4b3b      	ldr	r3, [pc, #236]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 8001748:	2208      	movs	r2, #8
 800174a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800174c:	4b39      	ldr	r3, [pc, #228]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001752:	4b38      	ldr	r3, [pc, #224]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 8001754:	2204      	movs	r2, #4
 8001756:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001758:	4b36      	ldr	r3, [pc, #216]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 800175a:	2200      	movs	r2, #0
 800175c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800175e:	4b35      	ldr	r3, [pc, #212]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 8001760:	2200      	movs	r2, #0
 8001762:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001764:	4b33      	ldr	r3, [pc, #204]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 8001766:	2201      	movs	r2, #1
 8001768:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800176a:	4b32      	ldr	r3, [pc, #200]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001772:	4b30      	ldr	r3, [pc, #192]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 8001774:	2200      	movs	r2, #0
 8001776:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001778:	4b2e      	ldr	r3, [pc, #184]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 800177a:	2200      	movs	r2, #0
 800177c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800177e:	4b2d      	ldr	r3, [pc, #180]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 8001780:	2200      	movs	r2, #0
 8001782:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001784:	4b2b      	ldr	r3, [pc, #172]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 8001786:	2200      	movs	r2, #0
 8001788:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800178a:	4b2a      	ldr	r3, [pc, #168]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 800178c:	2200      	movs	r2, #0
 800178e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = ENABLE;
 8001790:	4b28      	ldr	r3, [pc, #160]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 64;
 8001798:	4b26      	ldr	r3, [pc, #152]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 800179a:	2240      	movs	r2, #64	@ 0x40
 800179c:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 800179e:	4b25      	ldr	r3, [pc, #148]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 80017a0:	22c0      	movs	r2, #192	@ 0xc0
 80017a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80017a4:	4b23      	ldr	r3, [pc, #140]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80017aa:	4b22      	ldr	r3, [pc, #136]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	655a      	str	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017b0:	4820      	ldr	r0, [pc, #128]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 80017b2:	f001 ff99 	bl	80036e8 <HAL_ADC_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	bf14      	ite	ne
 80017bc:	2301      	movne	r3, #1
 80017be:	2300      	moveq	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <_ZL12MX_ADC1_Initv+0xae>
  {
    Error_Handler();
 80017c6:	f000 fcc1 	bl	800214c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80017ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d2:	4619      	mov	r1, r3
 80017d4:	4817      	ldr	r0, [pc, #92]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 80017d6:	f003 fb1d 	bl	8004e14 <HAL_ADCEx_MultiModeConfigChannel>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	bf14      	ite	ne
 80017e0:	2301      	movne	r3, #1
 80017e2:	2300      	moveq	r3, #0
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <_ZL12MX_ADC1_Initv+0xd2>
  {
    Error_Handler();
 80017ea:	f000 fcaf 	bl	800214c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80017ee:	4b13      	ldr	r3, [pc, #76]	@ (800183c <_ZL12MX_ADC1_Initv+0x120>)
 80017f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017f2:	2306      	movs	r3, #6
 80017f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017fa:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80017fe:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001800:	2304      	movs	r3, #4
 8001802:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800180e:	463b      	mov	r3, r7
 8001810:	4619      	mov	r1, r3
 8001812:	4808      	ldr	r0, [pc, #32]	@ (8001834 <_ZL12MX_ADC1_Initv+0x118>)
 8001814:	f002 fb70 	bl	8003ef8 <HAL_ADC_ConfigChannel>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	bf14      	ite	ne
 800181e:	2301      	movne	r3, #1
 8001820:	2300      	moveq	r3, #0
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <_ZL12MX_ADC1_Initv+0x110>
  {
    Error_Handler();
 8001828:	f000 fc90 	bl	800214c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	3730      	adds	r7, #48	@ 0x30
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	24000088 	.word	0x24000088
 8001838:	40022000 	.word	0x40022000
 800183c:	08600004 	.word	0x08600004

08001840 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	@ 0x28
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	2224      	movs	r2, #36	@ 0x24
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f00a fdc3 	bl	800c3d8 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001852:	4b35      	ldr	r3, [pc, #212]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 8001854:	4a35      	ldr	r2, [pc, #212]	@ (800192c <_ZL12MX_ADC3_Initv+0xec>)
 8001856:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001858:	4b33      	ldr	r3, [pc, #204]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 800185a:	2200      	movs	r2, #0
 800185c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 800185e:	4b32      	ldr	r3, [pc, #200]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 8001860:	220c      	movs	r2, #12
 8001862:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001864:	4b30      	ldr	r3, [pc, #192]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800186a:	4b2f      	ldr	r3, [pc, #188]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001870:	4b2d      	ldr	r3, [pc, #180]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 8001872:	2204      	movs	r2, #4
 8001874:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001876:	4b2c      	ldr	r3, [pc, #176]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 8001878:	2200      	movs	r2, #0
 800187a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800187c:	4b2a      	ldr	r3, [pc, #168]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 800187e:	2200      	movs	r2, #0
 8001880:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001882:	4b29      	ldr	r3, [pc, #164]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 8001884:	2201      	movs	r2, #1
 8001886:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001888:	4b27      	ldr	r3, [pc, #156]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001890:	4b25      	ldr	r3, [pc, #148]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 8001892:	2200      	movs	r2, #0
 8001894:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001896:	4b24      	ldr	r3, [pc, #144]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 8001898:	2200      	movs	r2, #0
 800189a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800189c:	4b22      	ldr	r3, [pc, #136]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80018a4:	4b20      	ldr	r3, [pc, #128]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80018aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80018b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80018b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80018bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 80018c4:	4b18      	ldr	r3, [pc, #96]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80018ca:	4817      	ldr	r0, [pc, #92]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 80018cc:	f001 ff0c 	bl	80036e8 <HAL_ADC_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	bf14      	ite	ne
 80018d6:	2301      	movne	r3, #1
 80018d8:	2300      	moveq	r3, #0
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 80018e0:	f000 fc34 	bl	800214c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80018e4:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <_ZL12MX_ADC3_Initv+0xf0>)
 80018e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018e8:	2306      	movs	r3, #6
 80018ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018f0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80018f4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018f6:	2304      	movs	r3, #4
 80018f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	4619      	mov	r1, r3
 8001906:	4808      	ldr	r0, [pc, #32]	@ (8001928 <_ZL12MX_ADC3_Initv+0xe8>)
 8001908:	f002 faf6 	bl	8003ef8 <HAL_ADC_ConfigChannel>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	bf14      	ite	ne
 8001912:	2301      	movne	r3, #1
 8001914:	2300      	moveq	r3, #0
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <_ZL12MX_ADC3_Initv+0xe0>
  {
    Error_Handler();
 800191c:	f000 fc16 	bl	800214c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001920:	bf00      	nop
 8001922:	3728      	adds	r7, #40	@ 0x28
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	240000f8 	.word	0x240000f8
 800192c:	58026000 	.word	0x58026000
 8001930:	1d500080 	.word	0x1d500080

08001934 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800193a:	4b41      	ldr	r3, [pc, #260]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800193c:	4a41      	ldr	r2, [pc, #260]	@ (8001a44 <_ZL14MX_FDCAN1_Initv+0x110>)
 800193e:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8001940:	4b3f      	ldr	r3, [pc, #252]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001942:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001946:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001948:	4b3d      	ldr	r3, [pc, #244]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800194a:	2200      	movs	r2, #0
 800194c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800194e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001950:	2200      	movs	r2, #0
 8001952:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001954:	4b3a      	ldr	r3, [pc, #232]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001956:	2200      	movs	r2, #0
 8001958:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800195a:	4b39      	ldr	r3, [pc, #228]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800195c:	2200      	movs	r2, #0
 800195e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 8001960:	4b37      	ldr	r3, [pc, #220]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001962:	2203      	movs	r2, #3
 8001964:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001966:	4b36      	ldr	r3, [pc, #216]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001968:	2201      	movs	r2, #1
 800196a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 800196c:	4b34      	ldr	r3, [pc, #208]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800196e:	220a      	movs	r2, #10
 8001970:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8001972:	4b33      	ldr	r3, [pc, #204]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001974:	2205      	movs	r2, #5
 8001976:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001978:	4b31      	ldr	r3, [pc, #196]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800197a:	2201      	movs	r2, #1
 800197c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800197e:	4b30      	ldr	r3, [pc, #192]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001980:	2201      	movs	r2, #1
 8001982:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001984:	4b2e      	ldr	r3, [pc, #184]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001986:	2201      	movs	r2, #1
 8001988:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800198a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800198c:	2201      	movs	r2, #1
 800198e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001990:	4b2b      	ldr	r3, [pc, #172]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001992:	2200      	movs	r2, #0
 8001994:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001996:	4b2a      	ldr	r3, [pc, #168]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001998:	2200      	movs	r2, #0
 800199a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 5;
 800199c:	4b28      	ldr	r3, [pc, #160]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800199e:	2205      	movs	r2, #5
 80019a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 80019a2:	4b27      	ldr	r3, [pc, #156]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019a4:	2220      	movs	r2, #32
 80019a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80019a8:	4b25      	ldr	r3, [pc, #148]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019aa:	2204      	movs	r2, #4
 80019ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 80019ae:	4b24      	ldr	r3, [pc, #144]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019b0:	2220      	movs	r2, #32
 80019b2:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80019b4:	4b22      	ldr	r3, [pc, #136]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019b6:	2204      	movs	r2, #4
 80019b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 80019ba:	4b21      	ldr	r3, [pc, #132]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019bc:	2201      	movs	r2, #1
 80019be:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80019c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019c2:	2204      	movs	r2, #4
 80019c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 1;
 80019c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 80019cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019ce:	2220      	movs	r2, #32
 80019d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 80019d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019d4:	2220      	movs	r2, #32
 80019d6:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80019d8:	4b19      	ldr	r3, [pc, #100]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80019de:	4b18      	ldr	r3, [pc, #96]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019e0:	2204      	movs	r2, #4
 80019e2:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80019e4:	4816      	ldr	r0, [pc, #88]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019e6:	f003 fc07 	bl	80051f8 <HAL_FDCAN_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	bf14      	ite	ne
 80019f0:	2301      	movne	r3, #1
 80019f2:	2300      	moveq	r3, #0
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <_ZL14MX_FDCAN1_Initv+0xca>
  {
    Error_Handler();
 80019fa:	f000 fba7 	bl	800214c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80019fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a02:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001a18:	463b      	mov	r3, r7
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4808      	ldr	r0, [pc, #32]	@ (8001a40 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001a1e:	f003 fdc9 	bl	80055b4 <HAL_FDCAN_ConfigFilter>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	bf14      	ite	ne
 8001a28:	2301      	movne	r3, #1
 8001a2a:	2300      	moveq	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <_ZL14MX_FDCAN1_Initv+0x102>
  {
    Error_Handler();
 8001a32:	f000 fb8b 	bl	800214c <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	3720      	adds	r7, #32
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	24000168 	.word	0x24000168
 8001a44:	4000a000 	.word	0x4000a000

08001a48 <_ZL14MX_FDCAN2_Initv>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001a4e:	4b41      	ldr	r3, [pc, #260]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a50:	4a41      	ldr	r2, [pc, #260]	@ (8001b58 <_ZL14MX_FDCAN2_Initv+0x110>)
 8001a52:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8001a54:	4b3f      	ldr	r3, [pc, #252]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a5a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001a5c:	4b3d      	ldr	r3, [pc, #244]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001a62:	4b3c      	ldr	r3, [pc, #240]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001a68:	4b3a      	ldr	r3, [pc, #232]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001a6e:	4b39      	ldr	r3, [pc, #228]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 3;
 8001a74:	4b37      	ldr	r3, [pc, #220]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a76:	2203      	movs	r2, #3
 8001a78:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001a7a:	4b36      	ldr	r3, [pc, #216]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 10;
 8001a80:	4b34      	ldr	r3, [pc, #208]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a82:	220a      	movs	r2, #10
 8001a84:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8001a86:	4b33      	ldr	r3, [pc, #204]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a88:	2205      	movs	r2, #5
 8001a8a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001a8c:	4b31      	ldr	r3, [pc, #196]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001a92:	4b30      	ldr	r3, [pc, #192]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001a98:	4b2e      	ldr	r3, [pc, #184]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001a9e:	4b2d      	ldr	r3, [pc, #180]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8001aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8001aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 5;
 8001ab0:	4b28      	ldr	r3, [pc, #160]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ab2:	2205      	movs	r2, #5
 8001ab4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 32;
 8001ab6:	4b27      	ldr	r3, [pc, #156]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ab8:	2220      	movs	r2, #32
 8001aba:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001abc:	4b25      	ldr	r3, [pc, #148]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001abe:	2204      	movs	r2, #4
 8001ac0:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 32;
 8001ac2:	4b24      	ldr	r3, [pc, #144]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001ac8:	4b22      	ldr	r3, [pc, #136]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001aca:	2204      	movs	r2, #4
 8001acc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 1;
 8001ace:	4b21      	ldr	r3, [pc, #132]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ad6:	2204      	movs	r2, #4
 8001ad8:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 1;
 8001ada:	4b1e      	ldr	r3, [pc, #120]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 32;
 8001ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 32;
 8001ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ae8:	2220      	movs	r2, #32
 8001aea:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001aec:	4b19      	ldr	r3, [pc, #100]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001af2:	4b18      	ldr	r3, [pc, #96]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001af4:	2204      	movs	r2, #4
 8001af6:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001af8:	4816      	ldr	r0, [pc, #88]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001afa:	f003 fb7d 	bl	80051f8 <HAL_FDCAN_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	bf14      	ite	ne
 8001b04:	2301      	movne	r3, #1
 8001b06:	2300      	moveq	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <_ZL14MX_FDCAN2_Initv+0xca>
  {
    Error_Handler();
 8001b0e:	f000 fb1d 	bl	800214c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8001b12:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b16:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001b20:	2301      	movs	r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x10;
 8001b24:	2310      	movs	r3, #16
 8001b26:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x10;
 8001b28:	2310      	movs	r3, #16
 8001b2a:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8001b2c:	463b      	mov	r3, r7
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4808      	ldr	r0, [pc, #32]	@ (8001b54 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001b32:	f003 fd3f 	bl	80055b4 <HAL_FDCAN_ConfigFilter>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	bf14      	ite	ne
 8001b3c:	2301      	movne	r3, #1
 8001b3e:	2300      	moveq	r3, #0
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <_ZL14MX_FDCAN2_Initv+0x102>
  {
    Error_Handler();
 8001b46:	f000 fb01 	bl	800214c <Error_Handler>
  }
  /* USER CODE END FDCAN2_Init 2 */

}
 8001b4a:	bf00      	nop
 8001b4c:	3720      	adds	r7, #32
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	24000208 	.word	0x24000208
 8001b58:	4000a400 	.word	0x4000a400

08001b5c <_ZL13MX_TIM17_Initv>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b094      	sub	sp, #80	@ 0x50
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b62:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	60da      	str	r2, [r3, #12]
 8001b70:	611a      	str	r2, [r3, #16]
 8001b72:	615a      	str	r2, [r3, #20]
 8001b74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b76:	463b      	mov	r3, r7
 8001b78:	2234      	movs	r2, #52	@ 0x34
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f00a fc2b 	bl	800c3d8 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001b82:	4b3b      	ldr	r3, [pc, #236]	@ (8001c70 <_ZL13MX_TIM17_Initv+0x114>)
 8001b84:	4a3b      	ldr	r2, [pc, #236]	@ (8001c74 <_ZL13MX_TIM17_Initv+0x118>)
 8001b86:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001b88:	4b39      	ldr	r3, [pc, #228]	@ (8001c70 <_ZL13MX_TIM17_Initv+0x114>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8e:	4b38      	ldr	r3, [pc, #224]	@ (8001c70 <_ZL13MX_TIM17_Initv+0x114>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10559;
 8001b94:	4b36      	ldr	r3, [pc, #216]	@ (8001c70 <_ZL13MX_TIM17_Initv+0x114>)
 8001b96:	f642 123f 	movw	r2, #10559	@ 0x293f
 8001b9a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9c:	4b34      	ldr	r3, [pc, #208]	@ (8001c70 <_ZL13MX_TIM17_Initv+0x114>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001ba2:	4b33      	ldr	r3, [pc, #204]	@ (8001c70 <_ZL13MX_TIM17_Initv+0x114>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ba8:	4b31      	ldr	r3, [pc, #196]	@ (8001c70 <_ZL13MX_TIM17_Initv+0x114>)
 8001baa:	2280      	movs	r2, #128	@ 0x80
 8001bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001bae:	4830      	ldr	r0, [pc, #192]	@ (8001c70 <_ZL13MX_TIM17_Initv+0x114>)
 8001bb0:	f008 fa50 	bl	800a054 <HAL_TIM_Base_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	bf14      	ite	ne
 8001bba:	2301      	movne	r3, #1
 8001bbc:	2300      	moveq	r3, #0
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <_ZL13MX_TIM17_Initv+0x6c>
  {
    Error_Handler();
 8001bc4:	f000 fac2 	bl	800214c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001bc8:	4829      	ldr	r0, [pc, #164]	@ (8001c70 <_ZL13MX_TIM17_Initv+0x114>)
 8001bca:	f008 fa9a 	bl	800a102 <HAL_TIM_PWM_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	bf14      	ite	ne
 8001bd4:	2301      	movne	r3, #1
 8001bd6:	2300      	moveq	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <_ZL13MX_TIM17_Initv+0x86>
  {
    Error_Handler();
 8001bde:	f000 fab5 	bl	800214c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001be2:	2360      	movs	r3, #96	@ 0x60
 8001be4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bea:	2300      	movs	r3, #0
 8001bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bfe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c02:	2200      	movs	r2, #0
 8001c04:	4619      	mov	r1, r3
 8001c06:	481a      	ldr	r0, [pc, #104]	@ (8001c70 <_ZL13MX_TIM17_Initv+0x114>)
 8001c08:	f008 fbf8 	bl	800a3fc <HAL_TIM_PWM_ConfigChannel>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	bf14      	ite	ne
 8001c12:	2301      	movne	r3, #1
 8001c14:	2300      	moveq	r3, #0
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <_ZL13MX_TIM17_Initv+0xc4>
  {
    Error_Handler();
 8001c1c:	f000 fa96 	bl	800214c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c38:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001c42:	463b      	mov	r3, r7
 8001c44:	4619      	mov	r1, r3
 8001c46:	480a      	ldr	r0, [pc, #40]	@ (8001c70 <_ZL13MX_TIM17_Initv+0x114>)
 8001c48:	f009 f894 	bl	800ad74 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	bf14      	ite	ne
 8001c52:	2301      	movne	r3, #1
 8001c54:	2300      	moveq	r3, #0
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <_ZL13MX_TIM17_Initv+0x104>
  {
    Error_Handler();
 8001c5c:	f000 fa76 	bl	800214c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001c60:	4803      	ldr	r0, [pc, #12]	@ (8001c70 <_ZL13MX_TIM17_Initv+0x114>)
 8001c62:	f000 ffaf 	bl	8002bc4 <HAL_TIM_MspPostInit>

}
 8001c66:	bf00      	nop
 8001c68:	3750      	adds	r7, #80	@ 0x50
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	240002a8 	.word	0x240002a8
 8001c74:	40014800 	.word	0x40014800

08001c78 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c7c:	4b2c      	ldr	r3, [pc, #176]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001c7e:	4a2d      	ldr	r2, [pc, #180]	@ (8001d34 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8001c80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c82:	4b2b      	ldr	r3, [pc, #172]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001c84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8a:	4b29      	ldr	r3, [pc, #164]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c90:	4b27      	ldr	r3, [pc, #156]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c96:	4b26      	ldr	r3, [pc, #152]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c9c:	4b24      	ldr	r3, [pc, #144]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca2:	4b23      	ldr	r3, [pc, #140]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca8:	4b21      	ldr	r3, [pc, #132]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cae:	4b20      	ldr	r3, [pc, #128]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cba:	4b1d      	ldr	r3, [pc, #116]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cc0:	481b      	ldr	r0, [pc, #108]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001cc2:	f009 f8e3 	bl	800ae8c <HAL_UART_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	bf14      	ite	ne
 8001ccc:	2301      	movne	r3, #1
 8001cce:	2300      	moveq	r3, #0
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8001cd6:	f000 fa39 	bl	800214c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4814      	ldr	r0, [pc, #80]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001cde:	f00a fa8e 	bl	800c1fe <HAL_UARTEx_SetTxFifoThreshold>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	bf14      	ite	ne
 8001ce8:	2301      	movne	r3, #1
 8001cea:	2300      	moveq	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8001cf2:	f000 fa2b 	bl	800214c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	480d      	ldr	r0, [pc, #52]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001cfa:	f00a fabe 	bl	800c27a <HAL_UARTEx_SetRxFifoThreshold>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	bf14      	ite	ne
 8001d04:	2301      	movne	r3, #1
 8001d06:	2300      	moveq	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8001d0e:	f000 fa1d 	bl	800214c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001d12:	4807      	ldr	r0, [pc, #28]	@ (8001d30 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001d14:	f00a fa3a 	bl	800c18c <HAL_UARTEx_DisableFifoMode>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	bf14      	ite	ne
 8001d1e:	2301      	movne	r3, #1
 8001d20:	2300      	moveq	r3, #0
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8001d28:	f000 fa10 	bl	800214c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	240002f4 	.word	0x240002f4
 8001d34:	40004400 	.word	0x40004400

08001d38 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08c      	sub	sp, #48	@ 0x30
 8001d3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3e:	f107 031c 	add.w	r3, r7, #28
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	609a      	str	r2, [r3, #8]
 8001d4a:	60da      	str	r2, [r3, #12]
 8001d4c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d4e:	4b57      	ldr	r3, [pc, #348]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d54:	4a55      	ldr	r2, [pc, #340]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001d56:	f043 0320 	orr.w	r3, r3, #32
 8001d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d5e:	4b53      	ldr	r3, [pc, #332]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d64:	f003 0320 	and.w	r3, r3, #32
 8001d68:	61bb      	str	r3, [r7, #24]
 8001d6a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d6c:	4b4f      	ldr	r3, [pc, #316]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d72:	4a4e      	ldr	r2, [pc, #312]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001d74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d7c:	4b4b      	ldr	r3, [pc, #300]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	4b48      	ldr	r3, [pc, #288]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d90:	4a46      	ldr	r2, [pc, #280]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d9a:	4b44      	ldr	r3, [pc, #272]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001da8:	4b40      	ldr	r3, [pc, #256]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dae:	4a3f      	ldr	r2, [pc, #252]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001db0:	f043 0310 	orr.w	r3, r3, #16
 8001db4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001db8:	4b3c      	ldr	r3, [pc, #240]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc6:	4b39      	ldr	r3, [pc, #228]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dcc:	4a37      	ldr	r2, [pc, #220]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001dce:	f043 0302 	orr.w	r3, r3, #2
 8001dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dd6:	4b35      	ldr	r3, [pc, #212]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001de4:	4b31      	ldr	r3, [pc, #196]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dea:	4a30      	ldr	r2, [pc, #192]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001dec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001df0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001df4:	4b2d      	ldr	r3, [pc, #180]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e02:	4b2a      	ldr	r3, [pc, #168]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e08:	4a28      	ldr	r2, [pc, #160]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001e0a:	f043 0308 	orr.w	r3, r3, #8
 8001e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e12:	4b26      	ldr	r3, [pc, #152]	@ (8001eac <_ZL12MX_GPIO_Initv+0x174>)
 8001e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	603b      	str	r3, [r7, #0]
 8001e1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, GPIO_PIN_RESET);
 8001e20:	2200      	movs	r2, #0
 8001e22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e26:	4822      	ldr	r0, [pc, #136]	@ (8001eb0 <_ZL12MX_GPIO_Initv+0x178>)
 8001e28:	f004 fd74 	bl	8006914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin, GPIO_PIN_RESET);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2138      	movs	r1, #56	@ 0x38
 8001e30:	4820      	ldr	r0, [pc, #128]	@ (8001eb4 <_ZL12MX_GPIO_Initv+0x17c>)
 8001e32:	f004 fd6f 	bl	8006914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AMS_OK_Pin */
  GPIO_InitStruct.Pin = AMS_OK_Pin;
 8001e36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e44:	2300      	movs	r3, #0
 8001e46:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AMS_OK_GPIO_Port, &GPIO_InitStruct);
 8001e48:	f107 031c 	add.w	r3, r7, #28
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4818      	ldr	r0, [pc, #96]	@ (8001eb0 <_ZL12MX_GPIO_Initv+0x178>)
 8001e50:	f004 fba0 	bl	8006594 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITAL1_Pin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin;
 8001e54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIGITAL1_GPIO_Port, &GPIO_InitStruct);
 8001e62:	f107 031c 	add.w	r3, r7, #28
 8001e66:	4619      	mov	r1, r3
 8001e68:	4813      	ldr	r0, [pc, #76]	@ (8001eb8 <_ZL12MX_GPIO_Initv+0x180>)
 8001e6a:	f004 fb93 	bl	8006594 <HAL_GPIO_Init>

  /*Configure GPIO pin : Charge_Button_Pin */
  GPIO_InitStruct.Pin = Charge_Button_Pin;
 8001e6e:	2380      	movs	r3, #128	@ 0x80
 8001e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e72:	2300      	movs	r3, #0
 8001e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Charge_Button_GPIO_Port, &GPIO_InitStruct);
 8001e7a:	f107 031c 	add.w	r3, r7, #28
 8001e7e:	4619      	mov	r1, r3
 8001e80:	480e      	ldr	r0, [pc, #56]	@ (8001ebc <_ZL12MX_GPIO_Initv+0x184>)
 8001e82:	f004 fb87 	bl	8006594 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_AIR_N_Pin RELAY_AIR_P_Pin RELAY_PRECHARGE_Pin */
  GPIO_InitStruct.Pin = RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin;
 8001e86:	2338      	movs	r3, #56	@ 0x38
 8001e88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e96:	f107 031c 	add.w	r3, r7, #28
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4805      	ldr	r0, [pc, #20]	@ (8001eb4 <_ZL12MX_GPIO_Initv+0x17c>)
 8001e9e:	f004 fb79 	bl	8006594 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ea2:	bf00      	nop
 8001ea4:	3730      	adds	r7, #48	@ 0x30
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	58024400 	.word	0x58024400
 8001eb0:	58021400 	.word	0x58021400
 8001eb4:	58020c00 	.word	0x58020c00
 8001eb8:	58021000 	.word	0x58021000
 8001ebc:	58021800 	.word	0x58021800

08001ec0 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001ec0:	b590      	push	{r4, r7, lr}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af02      	add	r7, sp, #8
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d04b      	beq.n	8001f6c <HAL_FDCAN_RxFifo0Callback+0xac>
	{
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_acu, RxData) == HAL_OK)
 8001ed4:	4b27      	ldr	r3, [pc, #156]	@ (8001f74 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001ed6:	4a28      	ldr	r2, [pc, #160]	@ (8001f78 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001ed8:	2140      	movs	r1, #64	@ 0x40
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f003 fc66 	bl	80057ac <HAL_FDCAN_GetRxMessage>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	bf0c      	ite	eq
 8001ee6:	2301      	moveq	r3, #1
 8001ee8:	2300      	movne	r3, #0
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d02e      	beq.n	8001f4e <HAL_FDCAN_RxFifo0Callback+0x8e>
    {
		msg_acu.id = RxHeader_acu.Identifier;
 8001ef0:	4b21      	ldr	r3, [pc, #132]	@ (8001f78 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a21      	ldr	r2, [pc, #132]	@ (8001f7c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001ef6:	6013      	str	r3, [r2, #0]
		msg_acu.len = RxHeader_acu.DataLength;
 8001ef8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f78 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4b1f      	ldr	r3, [pc, #124]	@ (8001f7c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001f00:	711a      	strb	r2, [r3, #4]
		for (int i = 0; i < 8; i++) {msg_acu.buf[i] = RxData[i];}
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	e00c      	b.n	8001f22 <HAL_FDCAN_RxFifo0Callback+0x62>
 8001f08:	4a1a      	ldr	r2, [pc, #104]	@ (8001f74 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	7819      	ldrb	r1, [r3, #0]
 8001f10:	4a1a      	ldr	r2, [pc, #104]	@ (8001f7c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4413      	add	r3, r2
 8001f16:	3305      	adds	r3, #5
 8001f18:	460a      	mov	r2, r1
 8001f1a:	701a      	strb	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2b07      	cmp	r3, #7
 8001f26:	ddef      	ble.n	8001f08 <HAL_FDCAN_RxFifo0Callback+0x48>
		msg_acu.bus = 1;
 8001f28:	4b14      	ldr	r3, [pc, #80]	@ (8001f7c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	611a      	str	r2, [r3, #16]
		msg_acu.time = HAL_GetTick();
 8001f2e:	f001 f885 	bl	800303c <HAL_GetTick>
 8001f32:	4603      	mov	r3, r0
 8001f34:	4a11      	ldr	r2, [pc, #68]	@ (8001f7c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001f36:	6153      	str	r3, [r2, #20]
		parse_state(msg_acu);
 8001f38:	4b10      	ldr	r3, [pc, #64]	@ (8001f7c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001f3a:	466c      	mov	r4, sp
 8001f3c:	f103 0210 	add.w	r2, r3, #16
 8001f40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f44:	e884 0003 	stmia.w	r4, {r0, r1}
 8001f48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f4a:	f000 fba9 	bl	80026a0 <_Z11parse_state6CANMsg>

    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2101      	movs	r1, #1
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f003 fd96 	bl	8005a84 <HAL_FDCAN_ActivateNotification>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	bf14      	ite	ne
 8001f5e:	2301      	movne	r3, #1
 8001f60:	2300      	moveq	r3, #0
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_FDCAN_RxFifo0Callback+0xac>
    {
      /* Notification Error */
      Error_Handler();
 8001f68:	f000 f8f0 	bl	800214c <Error_Handler>
    }
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd90      	pop	{r4, r7, pc}
 8001f74:	24000420 	.word	0x24000420
 8001f78:	240003d0 	.word	0x240003d0
 8001f7c:	240004a4 	.word	0x240004a4

08001f80 <module_send_message_CAN1>:

//extended ID
HAL_StatusTypeDef module_send_message_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 8001f8e:	4a0b      	ldr	r2, [pc, #44]	@ (8001fbc <module_send_message_CAN1+0x3c>)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_EXTENDED_ID;
 8001f94:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <module_send_message_CAN1+0x3c>)
 8001f96:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f9a:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	4a07      	ldr	r2, [pc, #28]	@ (8001fbc <module_send_message_CAN1+0x3c>)
 8001fa0:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	4905      	ldr	r1, [pc, #20]	@ (8001fbc <module_send_message_CAN1+0x3c>)
 8001fa6:	4806      	ldr	r0, [pc, #24]	@ (8001fc0 <module_send_message_CAN1+0x40>)
 8001fa8:	f003 fba5 	bl	80056f6 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001fac:	4603      	mov	r3, r0
 8001fae:	75fb      	strb	r3, [r7, #23]

	return status;
 8001fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	24000388 	.word	0x24000388
 8001fc0:	24000168 	.word	0x24000168

08001fc4 <module_send_message_NoExtId_CAN1>:

//NO extended ID
HAL_StatusTypeDef module_send_message_NoExtId_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 8001fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ffc <module_send_message_NoExtId_CAN1+0x38>)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_STANDARD_ID;
 8001fd8:	4b08      	ldr	r3, [pc, #32]	@ (8001ffc <module_send_message_NoExtId_CAN1+0x38>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	4a06      	ldr	r2, [pc, #24]	@ (8001ffc <module_send_message_NoExtId_CAN1+0x38>)
 8001fe2:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	4905      	ldr	r1, [pc, #20]	@ (8001ffc <module_send_message_NoExtId_CAN1+0x38>)
 8001fe8:	4805      	ldr	r0, [pc, #20]	@ (8002000 <module_send_message_NoExtId_CAN1+0x3c>)
 8001fea:	f003 fb84 	bl	80056f6 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	75fb      	strb	r3, [r7, #23]

	return status;
 8001ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	24000388 	.word	0x24000388
 8002000:	24000168 	.word	0x24000168

08002004 <module_send_message_CAN2>:

HAL_StatusTypeDef module_send_message_CAN2(uint32_t id, uint8_t* data, uint8_t length) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	4613      	mov	r3, r2
 8002010:	71fb      	strb	r3, [r7, #7]
	TxHeader_bms.Identifier = id;
 8002012:	4a0a      	ldr	r2, [pc, #40]	@ (800203c <module_send_message_CAN2+0x38>)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6013      	str	r3, [r2, #0]
	TxHeader_bms.IdType = FDCAN_STANDARD_ID;
 8002018:	4b08      	ldr	r3, [pc, #32]	@ (800203c <module_send_message_CAN2+0x38>)
 800201a:	2200      	movs	r2, #0
 800201c:	605a      	str	r2, [r3, #4]
	TxHeader_bms.DataLength = length;
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	4a06      	ldr	r2, [pc, #24]	@ (800203c <module_send_message_CAN2+0x38>)
 8002022:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_bms, data);
 8002024:	68ba      	ldr	r2, [r7, #8]
 8002026:	4905      	ldr	r1, [pc, #20]	@ (800203c <module_send_message_CAN2+0x38>)
 8002028:	4805      	ldr	r0, [pc, #20]	@ (8002040 <module_send_message_CAN2+0x3c>)
 800202a:	f003 fb64 	bl	80056f6 <HAL_FDCAN_AddMessageToTxFifoQ>
 800202e:	4603      	mov	r3, r0
 8002030:	75fb      	strb	r3, [r7, #23]

	return status;
 8002032:	7dfb      	ldrb	r3, [r7, #23]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	240003ac 	.word	0x240003ac
 8002040:	24000208 	.word	0x24000208

08002044 <print>:

void print(char uart_buffer[]){
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	4909      	ldr	r1, [pc, #36]	@ (8002074 <print+0x30>)
 8002050:	4809      	ldr	r0, [pc, #36]	@ (8002078 <print+0x34>)
 8002052:	f00a f99f 	bl	800c394 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8002056:	4808      	ldr	r0, [pc, #32]	@ (8002078 <print+0x34>)
 8002058:	f7fe f95a 	bl	8000310 <strlen>
 800205c:	4603      	mov	r3, r0
 800205e:	b29a      	uxth	r2, r3
 8002060:	f04f 33ff 	mov.w	r3, #4294967295
 8002064:	4904      	ldr	r1, [pc, #16]	@ (8002078 <print+0x34>)
 8002066:	4805      	ldr	r0, [pc, #20]	@ (800207c <print+0x38>)
 8002068:	f008 ff60 	bl	800af2c <HAL_UART_Transmit>
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	0800d080 	.word	0x0800d080
 8002078:	24000428 	.word	0x24000428
 800207c:	240002f4 	.word	0x240002f4

08002080 <printnl>:

void printnl(char uart_buffer[]){
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s", uart_buffer);
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	4909      	ldr	r1, [pc, #36]	@ (80020b0 <printnl+0x30>)
 800208c:	4809      	ldr	r0, [pc, #36]	@ (80020b4 <printnl+0x34>)
 800208e:	f00a f981 	bl	800c394 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8002092:	4808      	ldr	r0, [pc, #32]	@ (80020b4 <printnl+0x34>)
 8002094:	f7fe f93c 	bl	8000310 <strlen>
 8002098:	4603      	mov	r3, r0
 800209a:	b29a      	uxth	r2, r3
 800209c:	f04f 33ff 	mov.w	r3, #4294967295
 80020a0:	4904      	ldr	r1, [pc, #16]	@ (80020b4 <printnl+0x34>)
 80020a2:	4805      	ldr	r0, [pc, #20]	@ (80020b8 <printnl+0x38>)
 80020a4:	f008 ff42 	bl	800af2c <HAL_UART_Transmit>
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	0800d088 	.word	0x0800d088
 80020b4:	24000428 	.word	0x24000428
 80020b8:	240002f4 	.word	0x240002f4

080020bc <printValue>:

void printValue(int value){
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	4909      	ldr	r1, [pc, #36]	@ (80020ec <printValue+0x30>)
 80020c8:	4809      	ldr	r0, [pc, #36]	@ (80020f0 <printValue+0x34>)
 80020ca:	f00a f963 	bl	800c394 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 80020ce:	4808      	ldr	r0, [pc, #32]	@ (80020f0 <printValue+0x34>)
 80020d0:	f7fe f91e 	bl	8000310 <strlen>
 80020d4:	4603      	mov	r3, r0
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	f04f 33ff 	mov.w	r3, #4294967295
 80020dc:	4904      	ldr	r1, [pc, #16]	@ (80020f0 <printValue+0x34>)
 80020de:	4805      	ldr	r0, [pc, #20]	@ (80020f4 <printValue+0x38>)
 80020e0:	f008 ff24 	bl	800af2c <HAL_UART_Transmit>
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	0800d08c 	.word	0x0800d08c
 80020f0:	24000428 	.word	0x24000428
 80020f4:	240002f4 	.word	0x240002f4

080020f8 <getUARTState>:

HAL_UART_StateTypeDef getUARTState(){
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
	return HAL_UART_GetState(&huart2);
 80020fc:	4802      	ldr	r0, [pc, #8]	@ (8002108 <getUARTState+0x10>)
 80020fe:	f008 ffa3 	bl	800b048 <HAL_UART_GetState>
 8002102:	4603      	mov	r3, r0
}
 8002104:	4618      	mov	r0, r3
 8002106:	bd80      	pop	{r7, pc}
 8002108:	240002f4 	.word	0x240002f4

0800210c <readAnalogValue>:
	HAL_ADC_Stop(&hadc1);
	printValue(current);
	return current;
}

float readAnalogValue(void){
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
	analogValue = HAL_ADC_GetValue(&hadc3);
	HAL_ADC_Stop(&hadc3);
	return analogValue;*/


	HAL_ADC_Start(&hadc1);
 8002112:	480d      	ldr	r0, [pc, #52]	@ (8002148 <readAnalogValue+0x3c>)
 8002114:	f001 fcf0 	bl	8003af8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002118:	f04f 31ff 	mov.w	r1, #4294967295
 800211c:	480a      	ldr	r0, [pc, #40]	@ (8002148 <readAnalogValue+0x3c>)
 800211e:	f001 fde9 	bl	8003cf4 <HAL_ADC_PollForConversion>

	uint16_t adc_value;
	int current;

	adc_value = HAL_ADC_GetValue(&hadc1);
 8002122:	4809      	ldr	r0, [pc, #36]	@ (8002148 <readAnalogValue+0x3c>)
 8002124:	f001 feda 	bl	8003edc <HAL_ADC_GetValue>
 8002128:	4603      	mov	r3, r0
 800212a:	80fb      	strh	r3, [r7, #6]
	//valor minimo = 2100

	HAL_ADC_Stop(&hadc1);
 800212c:	4806      	ldr	r0, [pc, #24]	@ (8002148 <readAnalogValue+0x3c>)
 800212e:	f001 fdad 	bl	8003c8c <HAL_ADC_Stop>
	return adc_value;
 8002132:	88fb      	ldrh	r3, [r7, #6]
 8002134:	ee07 3a90 	vmov	s15, r3
 8002138:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 800213c:	eeb0 0a67 	vmov.f32	s0, s15
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	24000088 	.word	0x24000088

0800214c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002150:	b672      	cpsid	i
}
 8002152:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002154:	bf00      	nop
 8002156:	e7fd      	b.n	8002154 <Error_Handler+0x8>

08002158 <_Z9get_statev>:
/*********************************************************************************************************
 ** Function name:           get_state
 ** Descriptions:            get the current state
 *********************************************************************************************************/

STATE get_state() {
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
    return state;
 800215c:	4b03      	ldr	r3, [pc, #12]	@ (800216c <_Z9get_statev+0x14>)
 800215e:	781b      	ldrb	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	24000d10 	.word	0x24000d10

08002170 <_Z12select_statev>:

/*********************************************************************************************************
 ** Function name:           select_state
 ** Descriptions:            check what should they do on the state machine
 *********************************************************************************************************/
void select_state() {
 8002170:	b580      	push	{r7, lr}
 8002172:	b08e      	sub	sp, #56	@ 0x38
 8002174:	af00      	add	r7, sp, #0
	int state_air_n = 0;     // 0 means open, 1 closed     // Turn on SEVCON
 8002176:	2300      	movs	r3, #0
 8002178:	637b      	str	r3, [r7, #52]	@ 0x34
	int state_air_p = 0;     // 0 means open, 1 closed     // Energize HV relay
 800217a:	2300      	movs	r3, #0
 800217c:	633b      	str	r3, [r7, #48]	@ 0x30
	int state_precharge = 0; // 0 means open, 1 closed
 800217e:	2300      	movs	r3, #0
 8002180:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int flag_cpu = CPU_ERROR_COMMUNICATION;
 8002182:	2301      	movs	r3, #1
 8002184:	61fb      	str	r3, [r7, #28]
	int flag_current = Current_ERROR_Comunication;
 8002186:	2302      	movs	r3, #2
 8002188:	61bb      	str	r3, [r7, #24]


	int gpio_charge = HAL_GPIO_ReadPin(Charge_Button_GPIO_Port, Charge_Button_Pin); // pull-up: 1 = charge started
 800218a:	2180      	movs	r1, #128	@ 0x80
 800218c:	48a4      	ldr	r0, [pc, #656]	@ (8002420 <_Z12select_statev+0x2b0>)
 800218e:	f004 fba9 	bl	80068e4 <HAL_GPIO_ReadPin>
 8002192:	4603      	mov	r3, r0
 8002194:	617b      	str	r3, [r7, #20]

	if (flag_first_time == 0){
 8002196:	4ba3      	ldr	r3, [pc, #652]	@ (8002424 <_Z12select_statev+0x2b4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <_Z12select_statev+0x3c>
		flag_first_time = 1;
 800219e:	4ba1      	ldr	r3, [pc, #644]	@ (8002424 <_Z12select_statev+0x2b4>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	601a      	str	r2, [r3, #0]
		HAL_Delay(1000);
 80021a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021a8:	f000 ff54 	bl	8003054 <HAL_Delay>
	 * 1 ms interruption => 1ms * 264MHz = 264000
	 * prescalado 264 (por ejemplo)
	 * timer count = 264000 / 264 = 1000
	 */

	uint32_t time = HAL_GetTick();
 80021ac:	f000 ff46 	bl	800303c <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]
	int time_s = HAL_GetTick();
 80021b2:	f000 ff43 	bl	800303c <HAL_GetTick>
 80021b6:	4603      	mov	r3, r0
 80021b8:	60fb      	str	r3, [r7, #12]



	CPU.voltage_acum = 0; // For precharge
 80021ba:	4b9b      	ldr	r3, [pc, #620]	@ (8002428 <_Z12select_statev+0x2b8>)
 80021bc:	2200      	movs	r2, #0
 80021be:	62da      	str	r2, [r3, #44]	@ 0x2c


	MIN_V = 4200; /// I reset the number each cycle cause if the voltages goes up again I wanna has it risen again on telemetry
 80021c0:	4b9a      	ldr	r3, [pc, #616]	@ (800242c <_Z12select_statev+0x2bc>)
 80021c2:	f241 0268 	movw	r2, #4200	@ 0x1068
 80021c6:	601a      	str	r2, [r3, #0]
	MAX_T = 0;
 80021c8:	4b99      	ldr	r3, [pc, #612]	@ (8002430 <_Z12select_statev+0x2c0>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 80021ce:	2300      	movs	r3, #0
 80021d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021d2:	e08d      	b.n	80022f0 <_Z12select_statev+0x180>
		BMS[i].voltage_acum = 0;// For precharge
 80021d4:	4a97      	ldr	r2, [pc, #604]	@ (8002434 <_Z12select_statev+0x2c4>)
 80021d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d8:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 80021dc:	fb01 f303 	mul.w	r3, r1, r3
 80021e0:	4413      	add	r3, r2
 80021e2:	3388      	adds	r3, #136	@ 0x88
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]


		if (BMS[i].query_voltage(time, buffer) != BMS_OK) //I ask the BMS about voltages and cheking their states
 80021e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ea:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 80021ee:	fb02 f303 	mul.w	r3, r2, r3
 80021f2:	4a90      	ldr	r2, [pc, #576]	@ (8002434 <_Z12select_statev+0x2c4>)
 80021f4:	4413      	add	r3, r2
 80021f6:	4a90      	ldr	r2, [pc, #576]	@ (8002438 <_Z12select_statev+0x2c8>)
 80021f8:	6939      	ldr	r1, [r7, #16]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe fdd3 	bl	8000da6 <_ZN7BMS_MOD13query_voltageEmPc>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
		{
			//state = error;
			//flag_ams_ok = 0;
		}

		CPU.voltage_acum += BMS[i].voltage_acum; // For precharge
 8002204:	4b88      	ldr	r3, [pc, #544]	@ (8002428 <_Z12select_statev+0x2b8>)
 8002206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002208:	498a      	ldr	r1, [pc, #552]	@ (8002434 <_Z12select_statev+0x2c4>)
 800220a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800220c:	f44f 70c6 	mov.w	r0, #396	@ 0x18c
 8002210:	fb00 f303 	mul.w	r3, r0, r3
 8002214:	440b      	add	r3, r1
 8002216:	3388      	adds	r3, #136	@ 0x88
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4413      	add	r3, r2
 800221c:	4a82      	ldr	r2, [pc, #520]	@ (8002428 <_Z12select_statev+0x2b8>)
 800221e:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if (BMS[i].MIN_V < MIN_V)
 8002220:	4a84      	ldr	r2, [pc, #528]	@ (8002434 <_Z12select_statev+0x2c4>)
 8002222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002224:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 8002228:	fb01 f303 	mul.w	r3, r1, r3
 800222c:	4413      	add	r3, r2
 800222e:	338c      	adds	r3, #140	@ 0x8c
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	4b7e      	ldr	r3, [pc, #504]	@ (800242c <_Z12select_statev+0x2bc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	da0a      	bge.n	8002250 <_Z12select_statev+0xe0>
			MIN_V = BMS[i].MIN_V; //Checking the minimun voltage of cell in the whole battery
 800223a:	4a7e      	ldr	r2, [pc, #504]	@ (8002434 <_Z12select_statev+0x2c4>)
 800223c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800223e:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	4413      	add	r3, r2
 8002248:	338c      	adds	r3, #140	@ 0x8c
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a77      	ldr	r2, [pc, #476]	@ (800242c <_Z12select_statev+0x2bc>)
 800224e:	6013      	str	r3, [r2, #0]

		int current_value = readAnalogValue();
 8002250:	f7ff ff5c 	bl	800210c <readAnalogValue>
 8002254:	eef0 7a40 	vmov.f32	s15, s0
 8002258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800225c:	ee17 3a90 	vmov	r3, s15
 8002260:	607b      	str	r3, [r7, #4]
		//printValue(current_value);
		if(MIN_V == 0 || current_value < 50 || BMS[i].query_voltage(time, buffer) != BMS_OK){
 8002262:	4b72      	ldr	r3, [pc, #456]	@ (800242c <_Z12select_statev+0x2bc>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d011      	beq.n	800228e <_Z12select_statev+0x11e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b31      	cmp	r3, #49	@ 0x31
 800226e:	dd0e      	ble.n	800228e <_Z12select_statev+0x11e>
 8002270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002272:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 8002276:	fb02 f303 	mul.w	r3, r2, r3
 800227a:	4a6e      	ldr	r2, [pc, #440]	@ (8002434 <_Z12select_statev+0x2c4>)
 800227c:	4413      	add	r3, r2
 800227e:	4a6e      	ldr	r2, [pc, #440]	@ (8002438 <_Z12select_statev+0x2c8>)
 8002280:	6939      	ldr	r1, [r7, #16]
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe fd8f 	bl	8000da6 <_ZN7BMS_MOD13query_voltageEmPc>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <_Z12select_statev+0x122>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <_Z12select_statev+0x124>
 8002292:	2300      	movs	r3, #0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d102      	bne.n	800229e <_Z12select_statev+0x12e>
			//printValue(MIN_V);
			//printValue(current_value);
			//printValue(BMS[i].query_voltage(time, buffer));
		}
		else{
			flag_ams_ok = 1;
 8002298:	4b68      	ldr	r3, [pc, #416]	@ (800243c <_Z12select_statev+0x2cc>)
 800229a:	2201      	movs	r2, #1
 800229c:	601a      	str	r2, [r3, #0]
		}

		if (BMS[i].query_temperature(time, buffer) != Temperatures_OK){
 800229e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a0:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 80022a4:	fb02 f303 	mul.w	r3, r2, r3
 80022a8:	4a62      	ldr	r2, [pc, #392]	@ (8002434 <_Z12select_statev+0x2c4>)
 80022aa:	4413      	add	r3, r2
 80022ac:	4a62      	ldr	r2, [pc, #392]	@ (8002438 <_Z12select_statev+0x2c8>)
 80022ae:	6939      	ldr	r1, [r7, #16]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe fdf6 	bl	8000ea2 <_ZN7BMS_MOD17query_temperatureEmPc>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
			//state = error; DESCOMENTA
		}

		if (BMS[i].MAX_T > MAX_T)
 80022ba:	4a5e      	ldr	r2, [pc, #376]	@ (8002434 <_Z12select_statev+0x2c4>)
 80022bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022be:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 80022c2:	fb01 f303 	mul.w	r3, r1, r3
 80022c6:	4413      	add	r3, r2
 80022c8:	339c      	adds	r3, #156	@ 0x9c
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b58      	ldr	r3, [pc, #352]	@ (8002430 <_Z12select_statev+0x2c0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	dd0a      	ble.n	80022ea <_Z12select_statev+0x17a>
			MAX_T = BMS[i].MAX_T;
 80022d4:	4a57      	ldr	r2, [pc, #348]	@ (8002434 <_Z12select_statev+0x2c4>)
 80022d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d8:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 80022dc:	fb01 f303 	mul.w	r3, r1, r3
 80022e0:	4413      	add	r3, r2
 80022e2:	339c      	adds	r3, #156	@ 0x9c
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a52      	ldr	r2, [pc, #328]	@ (8002430 <_Z12select_statev+0x2c0>)
 80022e8:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < BMS_N; i++) {
 80022ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ec:	3301      	adds	r3, #1
 80022ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022f0:	4b53      	ldr	r3, [pc, #332]	@ (8002440 <_Z12select_statev+0x2d0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80022f6:	429a      	cmp	r2, r3
 80022f8:	f6ff af6c 	blt.w	80021d4 <_Z12select_statev+0x64>
	}

	if (time_s > time_sending_minV + 500) {
 80022fc:	4b51      	ldr	r3, [pc, #324]	@ (8002444 <_Z12select_statev+0x2d4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	429a      	cmp	r2, r3
 8002308:	dd23      	ble.n	8002352 <_Z12select_statev+0x1e2>
		message_MINV[1] = MIN_V & 0xFF;
 800230a:	4b48      	ldr	r3, [pc, #288]	@ (800242c <_Z12select_statev+0x2bc>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	b2da      	uxtb	r2, r3
 8002310:	4b4d      	ldr	r3, [pc, #308]	@ (8002448 <_Z12select_statev+0x2d8>)
 8002312:	705a      	strb	r2, [r3, #1]
		message_MINV[0] = (MIN_V >> 8) & 0xFF;
 8002314:	4b45      	ldr	r3, [pc, #276]	@ (800242c <_Z12select_statev+0x2bc>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	121b      	asrs	r3, r3, #8
 800231a:	b2da      	uxtb	r2, r3
 800231c:	4b4a      	ldr	r3, [pc, #296]	@ (8002448 <_Z12select_statev+0x2d8>)
 800231e:	701a      	strb	r2, [r3, #0]
		if (BMS[0].flag_charger != 1) {
 8002320:	4b44      	ldr	r3, [pc, #272]	@ (8002434 <_Z12select_statev+0x2c4>)
 8002322:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002326:	2b01      	cmp	r3, #1
 8002328:	d010      	beq.n	800234c <_Z12select_statev+0x1dc>
			if (module_send_message_CAN1(BMS_ID, message_MINV, 2) != HAL_OK)
 800232a:	2202      	movs	r2, #2
 800232c:	4946      	ldr	r1, [pc, #280]	@ (8002448 <_Z12select_statev+0x2d8>)
 800232e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002332:	f7ff fe25 	bl	8001f80 <module_send_message_CAN1>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	bf14      	ite	ne
 800233c:	2301      	movne	r3, #1
 800233e:	2300      	moveq	r3, #0
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <_Z12select_statev+0x1dc>
				print((char*) "Error al enviar tension minima"); //Sending the message through telemtry each 500 ms
 8002346:	4841      	ldr	r0, [pc, #260]	@ (800244c <_Z12select_statev+0x2dc>)
 8002348:	f7ff fe7c 	bl	8002044 <print>
		}
		time_sending_minV = time_s;
 800234c:	4a3d      	ldr	r2, [pc, #244]	@ (8002444 <_Z12select_statev+0x2d4>)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6013      	str	r3, [r2, #0]
	}
	for (int i = 0; i < BMS_N; i++) {
 8002352:	2300      	movs	r3, #0
 8002354:	627b      	str	r3, [r7, #36]	@ 0x24
 8002356:	e00d      	b.n	8002374 <_Z12select_statev+0x204>
		BMS[i].BALANCING_V = MIN_V; //Here I say I wanna balance all the cells in the battery to the minimun
 8002358:	4b34      	ldr	r3, [pc, #208]	@ (800242c <_Z12select_statev+0x2bc>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4935      	ldr	r1, [pc, #212]	@ (8002434 <_Z12select_statev+0x2c4>)
 800235e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002360:	f44f 70c6 	mov.w	r0, #396	@ 0x18c
 8002364:	fb00 f303 	mul.w	r3, r0, r3
 8002368:	440b      	add	r3, r1
 800236a:	3390      	adds	r3, #144	@ 0x90
 800236c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 800236e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002370:	3301      	adds	r3, #1
 8002372:	627b      	str	r3, [r7, #36]	@ 0x24
 8002374:	4b32      	ldr	r3, [pc, #200]	@ (8002440 <_Z12select_statev+0x2d0>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800237a:	429a      	cmp	r2, r3
 800237c:	dbec      	blt.n	8002358 <_Z12select_statev+0x1e8>

	}



	flag_cpu = CPU.query(time, buffer); //Asking the rest of the car how is it
 800237e:	4a2e      	ldr	r2, [pc, #184]	@ (8002438 <_Z12select_statev+0x2c8>)
 8002380:	6939      	ldr	r1, [r7, #16]
 8002382:	4829      	ldr	r0, [pc, #164]	@ (8002428 <_Z12select_statev+0x2b8>)
 8002384:	f7fe fe62 	bl	800104c <_ZN7CPU_MOD5queryEmPc>
 8002388:	61f8      	str	r0, [r7, #28]
	//flag_cpu = CPU_OK;

	flag_current = current.query(time, buffer); //asking current how is it
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4a2a      	ldr	r2, [pc, #168]	@ (8002438 <_Z12select_statev+0x2c8>)
 800238e:	4619      	mov	r1, r3
 8002390:	482f      	ldr	r0, [pc, #188]	@ (8002450 <_Z12select_statev+0x2e0>)
 8002392:	f7fe fee9 	bl	8001168 <_ZN11Current_MOD5queryEiPc>
 8002396:	61b8      	str	r0, [r7, #24]
	print((char*)"voltage acu");
	printValue(CPU.voltage_acum);
	print((char*)"dc bus");
	printValue(CPU.DC_BUS);*/
	//printValue(state);
	switch (state) {
 8002398:	4b2e      	ldr	r3, [pc, #184]	@ (8002454 <_Z12select_statev+0x2e4>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b05      	cmp	r3, #5
 800239e:	f200 810d 	bhi.w	80025bc <_Z12select_statev+0x44c>
 80023a2:	a201      	add	r2, pc, #4	@ (adr r2, 80023a8 <_Z12select_statev+0x238>)
 80023a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a8:	080023c1 	.word	0x080023c1
 80023ac:	080023ff 	.word	0x080023ff
 80023b0:	0800246d 	.word	0x0800246d
 80023b4:	0800249f 	.word	0x0800249f
 80023b8:	080024fd 	.word	0x080024fd
 80023bc:	08002537 	.word	0x08002537
	case start:
		state_air_n = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	637b      	str	r3, [r7, #52]	@ 0x34
		state_air_p = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	633b      	str	r3, [r7, #48]	@ 0x30
		state_precharge = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
		CPU.updateState(CPU_DISCONNECTED);
 80023cc:	2102      	movs	r1, #2
 80023ce:	4816      	ldr	r0, [pc, #88]	@ (8002428 <_Z12select_statev+0x2b8>)
 80023d0:	f7fe fe6b 	bl	80010aa <_ZN7CPU_MOD11updateStateEi>
		fan_speed = 0;
 80023d4:	4b20      	ldr	r3, [pc, #128]	@ (8002458 <_Z12select_statev+0x2e8>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fan_speed);
 80023da:	4b1f      	ldr	r3, [pc, #124]	@ (8002458 <_Z12select_statev+0x2e8>)
 80023dc:	881a      	ldrh	r2, [r3, #0]
 80023de:	4b1f      	ldr	r3, [pc, #124]	@ (800245c <_Z12select_statev+0x2ec>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	635a      	str	r2, [r3, #52]	@ 0x34
		if(gpio_charge == GPIO_PIN_SET){
			//state = charge;
		}
		if (flag_cpu != CPU_ERROR_COMMUNICATION && flag_start_button == 1)
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	f000 80e1 	beq.w	80025ae <_Z12select_statev+0x43e>
 80023ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002460 <_Z12select_statev+0x2f0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	f040 80dc 	bne.w	80025ae <_Z12select_statev+0x43e>
			state = precharge; //If I do comunicate with the rest of the car, I go to precharge
 80023f6:	4b17      	ldr	r3, [pc, #92]	@ (8002454 <_Z12select_statev+0x2e4>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	701a      	strb	r2, [r3, #0]
		break;
 80023fc:	e0d7      	b.n	80025ae <_Z12select_statev+0x43e>
	case precharge:
		state_air_n = 1;
 80023fe:	2301      	movs	r3, #1
 8002400:	637b      	str	r3, [r7, #52]	@ 0x34
		state_air_p = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	633b      	str	r3, [r7, #48]	@ 0x30
		state_precharge = 1;
 8002406:	2301      	movs	r3, #1
 8002408:	62fb      	str	r3, [r7, #44]	@ 0x2c
		CPU.updateState(CPU_PRECHARGE);
 800240a:	2101      	movs	r1, #1
 800240c:	4806      	ldr	r0, [pc, #24]	@ (8002428 <_Z12select_statev+0x2b8>)
 800240e:	f7fe fe4c 	bl	80010aa <_ZN7CPU_MOD11updateStateEi>
		if (flag_cpu == CPU_OK) {
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d125      	bne.n	8002464 <_Z12select_statev+0x2f4>
			state = transition;
 8002418:	4b0e      	ldr	r3, [pc, #56]	@ (8002454 <_Z12select_statev+0x2e4>)
 800241a:	2202      	movs	r2, #2
 800241c:	701a      	strb	r2, [r3, #0]
 800241e:	e025      	b.n	800246c <_Z12select_statev+0x2fc>
 8002420:	58021800 	.word	0x58021800
 8002424:	24000cc4 	.word	0x24000cc4
 8002428:	24000c88 	.word	0x24000c88
 800242c:	24000004 	.word	0x24000004
 8002430:	24000c78 	.word	0x24000c78
 8002434:	240004bc 	.word	0x240004bc
 8002438:	24000d14 	.word	0x24000d14
 800243c:	24000008 	.word	0x24000008
 8002440:	24000000 	.word	0x24000000
 8002444:	24000c80 	.word	0x24000c80
 8002448:	24000c7c 	.word	0x24000c7c
 800244c:	0800d094 	.word	0x0800d094
 8002450:	24000ccc 	.word	0x24000ccc
 8002454:	24000d10 	.word	0x24000d10
 8002458:	24000c84 	.word	0x24000c84
 800245c:	240002a8 	.word	0x240002a8
 8002460:	24000cc8 	.word	0x24000cc8
		} else if (flag_cpu == CPU_ERROR_COMMUNICATION)
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	2b01      	cmp	r3, #1
 8002468:	f000 80a3 	beq.w	80025b2 <_Z12select_statev+0x442>
			//state = error;
		 //else if(flag_current != Current_OK) state = error; //I take this out cause in precharge current can be very high, but probably can be uncommented,
		break;
	case transition:
		state_air_n = 1;
 800246c:	2301      	movs	r3, #1
 800246e:	637b      	str	r3, [r7, #52]	@ 0x34
		state_air_p = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	633b      	str	r3, [r7, #48]	@ 0x30
		state_precharge = 1;
 8002474:	2301      	movs	r3, #1
 8002476:	62fb      	str	r3, [r7, #44]	@ 0x2c
		CPU.updateState(CPU_PRECHARGE);
 8002478:	2101      	movs	r1, #1
 800247a:	4876      	ldr	r0, [pc, #472]	@ (8002654 <_Z12select_statev+0x4e4>)
 800247c:	f7fe fe15 	bl	80010aa <_ZN7CPU_MOD11updateStateEi>
		//if (((CPU.voltage_acum)) * 0.7 < CPU.DC_BUS){
		//printValue(CPU.DC_BUS);
		if(CPU.DC_BUS > 200 && 	CPU.DC_BUS < 500){
 8002480:	4b74      	ldr	r3, [pc, #464]	@ (8002654 <_Z12select_statev+0x4e4>)
 8002482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002484:	2bc8      	cmp	r3, #200	@ 0xc8
 8002486:	f340 8096 	ble.w	80025b6 <_Z12select_statev+0x446>
 800248a:	4b72      	ldr	r3, [pc, #456]	@ (8002654 <_Z12select_statev+0x4e4>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002492:	f280 8090 	bge.w	80025b6 <_Z12select_statev+0x446>
			state = run; //If DC_BUS voltage is higher than 90% of battery voltage, precharge finish
 8002496:	4b70      	ldr	r3, [pc, #448]	@ (8002658 <_Z12select_statev+0x4e8>)
 8002498:	2203      	movs	r2, #3
 800249a:	701a      	strb	r2, [r3, #0]
		//}else if((flag_cpu == CPU_ERROR_COMMUNICATION)&&(flag_charger == 1)) state = error;
		 //else if(flag_current != Current_OK) state = error;
		}
		break;
 800249c:	e08b      	b.n	80025b6 <_Z12select_statev+0x446>
	case run:
		state_air_n = 1;
 800249e:	2301      	movs	r3, #1
 80024a0:	637b      	str	r3, [r7, #52]	@ 0x34
		state_air_p = 1;
 80024a2:	2301      	movs	r3, #1
 80024a4:	633b      	str	r3, [r7, #48]	@ 0x30
		state_precharge = 1;
 80024a6:	2301      	movs	r3, #1
 80024a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		CPU.updateState(CPU_POWER);
 80024aa:	2100      	movs	r1, #0
 80024ac:	4869      	ldr	r0, [pc, #420]	@ (8002654 <_Z12select_statev+0x4e4>)
 80024ae:	f7fe fdfc 	bl	80010aa <_ZN7CPU_MOD11updateStateEi>
		print((char*)"run");
 80024b2:	486a      	ldr	r0, [pc, #424]	@ (800265c <_Z12select_statev+0x4ec>)
 80024b4:	f7ff fdc6 	bl	8002044 <print>
		if(CPU.DC_BUS < 60){
 80024b8:	4b66      	ldr	r3, [pc, #408]	@ (8002654 <_Z12select_statev+0x4e4>)
 80024ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024bc:	2b3b      	cmp	r3, #59	@ 0x3b
 80024be:	dc02      	bgt.n	80024c6 <_Z12select_statev+0x356>
			state = start;
 80024c0:	4b65      	ldr	r3, [pc, #404]	@ (8002658 <_Z12select_statev+0x4e8>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]
		}
		fan_speed = (FAN_TIMER_ARR * 75) / 100;
 80024c6:	4b66      	ldr	r3, [pc, #408]	@ (8002660 <_Z12select_statev+0x4f0>)
 80024c8:	f641 62ef 	movw	r2, #7919	@ 0x1eef
 80024cc:	801a      	strh	r2, [r3, #0]

		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fan_speed);
 80024ce:	4b64      	ldr	r3, [pc, #400]	@ (8002660 <_Z12select_statev+0x4f0>)
 80024d0:	881a      	ldrh	r2, [r3, #0]
 80024d2:	4b64      	ldr	r3, [pc, #400]	@ (8002664 <_Z12select_statev+0x4f4>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	635a      	str	r2, [r3, #52]	@ 0x34

		if ((flag_cpu == CPU_ERROR_COMMUNICATION) && (flag_charger == 1)){
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d106      	bne.n	80024ec <_Z12select_statev+0x37c>
 80024de:	4b62      	ldr	r3, [pc, #392]	@ (8002668 <_Z12select_statev+0x4f8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d102      	bne.n	80024ec <_Z12select_statev+0x37c>
			//state = error; //If I disconnect the charger, error
			print((char*)"CPU");
 80024e6:	4861      	ldr	r0, [pc, #388]	@ (800266c <_Z12select_statev+0x4fc>)
 80024e8:	f7ff fdac 	bl	8002044 <print>
		}
		if (flag_current != Current_OK){
			//state = error; //If current is too high, error
		}
		if(HAL_GPIO_ReadPin(DIGITAL1_GPIO_Port, DIGITAL1_Pin) == GPIO_PIN_RESET){ //SDC IO
 80024ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024f0:	485f      	ldr	r0, [pc, #380]	@ (8002670 <_Z12select_statev+0x500>)
 80024f2:	f004 f9f7 	bl	80068e4 <HAL_GPIO_ReadPin>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
			//state = error;
			//print((char*)"DIGITAL");
		}
		break;
 80024fa:	e05f      	b.n	80025bc <_Z12select_statev+0x44c>

	case charge: {
		state_air_n = 1;
 80024fc:	2301      	movs	r3, #1
 80024fe:	637b      	str	r3, [r7, #52]	@ 0x34
		state_air_p = 1;
 8002500:	2301      	movs	r3, #1
 8002502:	633b      	str	r3, [r7, #48]	@ 0x30
		state_precharge = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	62fb      	str	r3, [r7, #44]	@ 0x2c
		CPU.updateState(CPU_CHARGING);
 8002508:	2104      	movs	r1, #4
 800250a:	4852      	ldr	r0, [pc, #328]	@ (8002654 <_Z12select_statev+0x4e4>)
 800250c:	f7fe fdcd 	bl	80010aa <_ZN7CPU_MOD11updateStateEi>


		fan_speed = (FAN_TIMER_ARR * 40) / 100;
 8002510:	4b53      	ldr	r3, [pc, #332]	@ (8002660 <_Z12select_statev+0x4f0>)
 8002512:	f241 027f 	movw	r2, #4223	@ 0x107f
 8002516:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fan_speed);
 8002518:	4b51      	ldr	r3, [pc, #324]	@ (8002660 <_Z12select_statev+0x4f0>)
 800251a:	881a      	ldrh	r2, [r3, #0]
 800251c:	4b51      	ldr	r3, [pc, #324]	@ (8002664 <_Z12select_statev+0x4f4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	635a      	str	r2, [r3, #52]	@ 0x34
				state = error; //Charge has been interrupted
		} else {
			charge_current_error_counter = 0;
		}*/

		if (gpio_charge == GPIO_PIN_RESET){
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d148      	bne.n	80025ba <_Z12select_statev+0x44a>
			state = start;
 8002528:	4b4b      	ldr	r3, [pc, #300]	@ (8002658 <_Z12select_statev+0x4e8>)
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]
			charge_current_error_counter = 0;
 800252e:	4b51      	ldr	r3, [pc, #324]	@ (8002674 <_Z12select_statev+0x504>)
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
		}


		break;
 8002534:	e041      	b.n	80025ba <_Z12select_statev+0x44a>
	}

	case error:
		state_air_n = 0; //All relés closed
 8002536:	2300      	movs	r3, #0
 8002538:	637b      	str	r3, [r7, #52]	@ 0x34
		state_air_p = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	633b      	str	r3, [r7, #48]	@ 0x30
		state_precharge = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	62fb      	str	r3, [r7, #44]	@ 0x2c
		CPU.updateState(CPU_ERROR);
 8002542:	2103      	movs	r1, #3
 8002544:	4843      	ldr	r0, [pc, #268]	@ (8002654 <_Z12select_statev+0x4e4>)
 8002546:	f7fe fdb0 	bl	80010aa <_ZN7CPU_MOD11updateStateEi>
		int current_value = readAnalogValue();
 800254a:	f7ff fddf 	bl	800210c <readAnalogValue>
 800254e:	eef0 7a40 	vmov.f32	s15, s0
 8002552:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002556:	ee17 3a90 	vmov	r3, s15
 800255a:	60bb      	str	r3, [r7, #8]
		for (int i = 0; i < BMS_N; i++) {
 800255c:	2300      	movs	r3, #0
 800255e:	623b      	str	r3, [r7, #32]
 8002560:	e017      	b.n	8002592 <_Z12select_statev+0x422>
			if(MIN_V != 0 && current_value > 50 && BMS[i].error_volt == BMS_OK){
 8002562:	4b45      	ldr	r3, [pc, #276]	@ (8002678 <_Z12select_statev+0x508>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d010      	beq.n	800258c <_Z12select_statev+0x41c>
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2b32      	cmp	r3, #50	@ 0x32
 800256e:	dd0d      	ble.n	800258c <_Z12select_statev+0x41c>
 8002570:	4a42      	ldr	r2, [pc, #264]	@ (800267c <_Z12select_statev+0x50c>)
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 8002578:	fb01 f303 	mul.w	r3, r1, r3
 800257c:	4413      	add	r3, r2
 800257e:	33a4      	adds	r3, #164	@ 0xa4
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d102      	bne.n	800258c <_Z12select_statev+0x41c>
				state = start;
 8002586:	4b34      	ldr	r3, [pc, #208]	@ (8002658 <_Z12select_statev+0x4e8>)
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < BMS_N; i++) {
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	3301      	adds	r3, #1
 8002590:	623b      	str	r3, [r7, #32]
 8002592:	4b3b      	ldr	r3, [pc, #236]	@ (8002680 <_Z12select_statev+0x510>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6a3a      	ldr	r2, [r7, #32]
 8002598:	429a      	cmp	r2, r3
 800259a:	dbe2      	blt.n	8002562 <_Z12select_statev+0x3f2>
			}
		}

		fan_speed = 0;
 800259c:	4b30      	ldr	r3, [pc, #192]	@ (8002660 <_Z12select_statev+0x4f0>)
 800259e:	2200      	movs	r2, #0
 80025a0:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fan_speed);
 80025a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002660 <_Z12select_statev+0x4f0>)
 80025a4:	881a      	ldrh	r2, [r3, #0]
 80025a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002664 <_Z12select_statev+0x4f4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 80025ac:	e006      	b.n	80025bc <_Z12select_statev+0x44c>
		break;
 80025ae:	bf00      	nop
 80025b0:	e004      	b.n	80025bc <_Z12select_statev+0x44c>
		break;
 80025b2:	bf00      	nop
 80025b4:	e002      	b.n	80025bc <_Z12select_statev+0x44c>
		break;
 80025b6:	bf00      	nop
 80025b8:	e000      	b.n	80025bc <_Z12select_statev+0x44c>
		break;
 80025ba:	bf00      	nop
	 sprintf(buffer, " - STATE:     %i\n", state);
	 print(buffer);
	 sprintf(buffer, "***********************\n");
	 print(buffer);*/
	HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin,
			flag_ams_ok ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80025bc:	4b31      	ldr	r3, [pc, #196]	@ (8002684 <_Z12select_statev+0x514>)
 80025be:	681b      	ldr	r3, [r3, #0]
	HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin,
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <_Z12select_statev+0x458>
 80025c4:	2301      	movs	r3, #1
 80025c6:	e000      	b.n	80025ca <_Z12select_statev+0x45a>
 80025c8:	2300      	movs	r3, #0
 80025ca:	461a      	mov	r2, r3
 80025cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80025d0:	482d      	ldr	r0, [pc, #180]	@ (8002688 <_Z12select_statev+0x518>)
 80025d2:	f004 f99f 	bl	8006914 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_AIR_N_GPIO_Port, RELAY_AIR_N_Pin,
 80025d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <_Z12select_statev+0x470>
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <_Z12select_statev+0x472>
 80025e0:	2300      	movs	r3, #0
 80025e2:	461a      	mov	r2, r3
 80025e4:	2108      	movs	r1, #8
 80025e6:	4829      	ldr	r0, [pc, #164]	@ (800268c <_Z12select_statev+0x51c>)
 80025e8:	f004 f994 	bl	8006914 <HAL_GPIO_WritePin>
			state_air_n ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_AIR_P_GPIO_Port, RELAY_AIR_P_Pin,
 80025ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <_Z12select_statev+0x486>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <_Z12select_statev+0x488>
 80025f6:	2300      	movs	r3, #0
 80025f8:	461a      	mov	r2, r3
 80025fa:	2110      	movs	r1, #16
 80025fc:	4823      	ldr	r0, [pc, #140]	@ (800268c <_Z12select_statev+0x51c>)
 80025fe:	f004 f989 	bl	8006914 <HAL_GPIO_WritePin>
			state_air_p ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_PRECHARGE_GPIO_Port, RELAY_PRECHARGE_Pin,
 8002602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <_Z12select_statev+0x49c>
 8002608:	2301      	movs	r3, #1
 800260a:	e000      	b.n	800260e <_Z12select_statev+0x49e>
 800260c:	2300      	movs	r3, #0
 800260e:	461a      	mov	r2, r3
 8002610:	2120      	movs	r1, #32
 8002612:	481e      	ldr	r0, [pc, #120]	@ (800268c <_Z12select_statev+0x51c>)
 8002614:	f004 f97e 	bl	8006914 <HAL_GPIO_WritePin>
			state_precharge ? GPIO_PIN_SET : GPIO_PIN_RESET);
	if(1){
		printnl((char*)"State: ");
 8002618:	481d      	ldr	r0, [pc, #116]	@ (8002690 <_Z12select_statev+0x520>)
 800261a:	f7ff fd31 	bl	8002080 <printnl>
		printValue(state);
 800261e:	4b0e      	ldr	r3, [pc, #56]	@ (8002658 <_Z12select_statev+0x4e8>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fd4a 	bl	80020bc <printValue>
		printnl((char*)"State AIR+: ");
 8002628:	481a      	ldr	r0, [pc, #104]	@ (8002694 <_Z12select_statev+0x524>)
 800262a:	f7ff fd29 	bl	8002080 <printnl>
		printValue(state_air_p);
 800262e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002630:	f7ff fd44 	bl	80020bc <printValue>
		printnl((char*)"State AIR-: ");
 8002634:	4818      	ldr	r0, [pc, #96]	@ (8002698 <_Z12select_statev+0x528>)
 8002636:	f7ff fd23 	bl	8002080 <printnl>
		printValue(state_air_n);
 800263a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800263c:	f7ff fd3e 	bl	80020bc <printValue>
		printnl((char*)"Relee Prec:");
 8002640:	4816      	ldr	r0, [pc, #88]	@ (800269c <_Z12select_statev+0x52c>)
 8002642:	f7ff fd1d 	bl	8002080 <printnl>
		printValue(state_precharge);
 8002646:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002648:	f7ff fd38 	bl	80020bc <printValue>





}
 800264c:	bf00      	nop
 800264e:	3738      	adds	r7, #56	@ 0x38
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	24000c88 	.word	0x24000c88
 8002658:	24000d10 	.word	0x24000d10
 800265c:	0800d0b4 	.word	0x0800d0b4
 8002660:	24000c84 	.word	0x24000c84
 8002664:	240002a8 	.word	0x240002a8
 8002668:	24000cbc 	.word	0x24000cbc
 800266c:	0800d0b8 	.word	0x0800d0b8
 8002670:	58021000 	.word	0x58021000
 8002674:	24000cc0 	.word	0x24000cc0
 8002678:	24000004 	.word	0x24000004
 800267c:	240004bc 	.word	0x240004bc
 8002680:	24000000 	.word	0x24000000
 8002684:	24000008 	.word	0x24000008
 8002688:	58021400 	.word	0x58021400
 800268c:	58020c00 	.word	0x58020c00
 8002690:	0800d0bc 	.word	0x0800d0bc
 8002694:	0800d0c4 	.word	0x0800d0c4
 8002698:	0800d0d4 	.word	0x0800d0d4
 800269c:	0800d0e4 	.word	0x0800d0e4

080026a0 <_Z11parse_state6CANMsg>:

/*********************************************************************************************************
 ** Function name:           parse_state
 ** Descriptions:            Function for analysing the data from the CAN
 *********************************************************************************************************/
void parse_state(CANMsg data) {
 80026a0:	b084      	sub	sp, #16
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b084      	sub	sp, #16
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	f107 0c18 	add.w	ip, r7, #24
 80026ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (data.id == 0x600){
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80026b6:	d102      	bne.n	80026be <_Z11parse_state6CANMsg+0x1e>
		flag_start_button = 1;
 80026b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002770 <_Z11parse_state6CANMsg+0xd0>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	601a      	str	r2, [r3, #0]
	}
	uint32_t time = HAL_GetTick();
 80026be:	f000 fcbd 	bl	800303c <HAL_GetTick>
 80026c2:	6038      	str	r0, [r7, #0]
	bool flag_bms = false;
 80026c4:	2300      	movs	r3, #0
 80026c6:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; i < BMS_N; i++) {
 80026c8:	2300      	movs	r3, #0
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	e017      	b.n	80026fe <_Z11parse_state6CANMsg+0x5e>
		flag_bms = BMS[i].parse(data.id, &data.buf[0], time); //Checking if the message received is for  BMS
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 80026d4:	fb02 f303 	mul.w	r3, r2, r3
 80026d8:	4a26      	ldr	r2, [pc, #152]	@ (8002774 <_Z11parse_state6CANMsg+0xd4>)
 80026da:	1898      	adds	r0, r3, r2
 80026dc:	69b9      	ldr	r1, [r7, #24]
 80026de:	f107 021d 	add.w	r2, r7, #29
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	f7fe fa3a 	bl	8000b5c <_ZN7BMS_MOD5parseEmPhm>
 80026e8:	4603      	mov	r3, r0
 80026ea:	73fb      	strb	r3, [r7, #15]
		if (flag_bms)
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <_Z11parse_state6CANMsg+0x58>
			i = BMS_N;
 80026f2:	4b21      	ldr	r3, [pc, #132]	@ (8002778 <_Z11parse_state6CANMsg+0xd8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < BMS_N; i++) {
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	3301      	adds	r3, #1
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002778 <_Z11parse_state6CANMsg+0xd8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	429a      	cmp	r2, r3
 8002706:	dbe2      	blt.n	80026ce <_Z11parse_state6CANMsg+0x2e>
	}

	if (!flag_bms) {
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	f083 0301 	eor.w	r3, r3, #1
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d025      	beq.n	8002760 <_Z11parse_state6CANMsg+0xc0>
		if (CPU.parse(data.id, &data.buf[0], time))
 8002714:	69b9      	ldr	r1, [r7, #24]
 8002716:	f107 021d 	add.w	r2, r7, #29
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	4817      	ldr	r0, [pc, #92]	@ (800277c <_Z11parse_state6CANMsg+0xdc>)
 800271e:	f7fe fc53 	bl	8000fc8 <_ZN7CPU_MOD5parseEmPhm>
			;                       //Cheking if message is for CPU
		if (data.id == 419385575) //If message from this direction received, it is because the charger is connected and the accu is for charging
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	4a16      	ldr	r2, [pc, #88]	@ (8002780 <_Z11parse_state6CANMsg+0xe0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d11a      	bne.n	8002760 <_Z11parse_state6CANMsg+0xc0>
				{
			for (int i = 0; i < BMS_N; i++) {
 800272a:	2300      	movs	r3, #0
 800272c:	607b      	str	r3, [r7, #4]
 800272e:	e00c      	b.n	800274a <_Z11parse_state6CANMsg+0xaa>
				BMS[i].flag_charger = 1;
 8002730:	4a10      	ldr	r2, [pc, #64]	@ (8002774 <_Z11parse_state6CANMsg+0xd4>)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	4413      	add	r3, r2
 800273e:	3394      	adds	r3, #148	@ 0x94
 8002740:	2201      	movs	r2, #1
 8002742:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < BMS_N; i++) {
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3301      	adds	r3, #1
 8002748:	607b      	str	r3, [r7, #4]
 800274a:	4b0b      	ldr	r3, [pc, #44]	@ (8002778 <_Z11parse_state6CANMsg+0xd8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	429a      	cmp	r2, r3
 8002752:	dbed      	blt.n	8002730 <_Z11parse_state6CANMsg+0x90>
			}

			current.flag_charger = 1;
 8002754:	4b0b      	ldr	r3, [pc, #44]	@ (8002784 <_Z11parse_state6CANMsg+0xe4>)
 8002756:	2201      	movs	r2, #1
 8002758:	639a      	str	r2, [r3, #56]	@ 0x38
			flag_charger = 1;
 800275a:	4b0b      	ldr	r3, [pc, #44]	@ (8002788 <_Z11parse_state6CANMsg+0xe8>)
 800275c:	2201      	movs	r2, #1
 800275e:	601a      	str	r2, [r3, #0]
		} else {
			// Serial.print("ID: ");
			// Serial.println(data.id);
		}
	}
}
 8002760:	bf00      	nop
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800276a:	b004      	add	sp, #16
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	24000cc8 	.word	0x24000cc8
 8002774:	240004bc 	.word	0x240004bc
 8002778:	24000000 	.word	0x24000000
 800277c:	24000c88 	.word	0x24000c88
 8002780:	18ff50e7 	.word	0x18ff50e7
 8002784:	24000ccc 	.word	0x24000ccc
 8002788:	24000cbc 	.word	0x24000cbc

0800278c <_Z41__static_initialization_and_destruction_0v>:
 800278c:	b590      	push	{r4, r7, lr}
 800278e:	b087      	sub	sp, #28
 8002790:	af06      	add	r7, sp, #24
		};
 8002792:	4c40      	ldr	r4, [pc, #256]	@ (8002894 <_Z41__static_initialization_and_destruction_0v+0x108>)
 8002794:	2369      	movs	r3, #105	@ 0x69
 8002796:	9304      	str	r3, [sp, #16]
 8002798:	2332      	movs	r3, #50	@ 0x32
 800279a:	9303      	str	r3, [sp, #12]
 800279c:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80027a0:	9302      	str	r3, [sp, #8]
 80027a2:	2313      	movs	r3, #19
 80027a4:	9301      	str	r3, [sp, #4]
 80027a6:	233c      	movs	r3, #60	@ 0x3c
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80027ae:	f241 0268 	movw	r2, #4200	@ 0x1068
 80027b2:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80027b6:	4620      	mov	r0, r4
 80027b8:	f7fd ff98 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 80027bc:	f504 74c6 	add.w	r4, r4, #396	@ 0x18c
 80027c0:	23cd      	movs	r3, #205	@ 0xcd
 80027c2:	9304      	str	r3, [sp, #16]
 80027c4:	2364      	movs	r3, #100	@ 0x64
 80027c6:	9303      	str	r3, [sp, #12]
 80027c8:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80027cc:	9302      	str	r3, [sp, #8]
 80027ce:	2313      	movs	r3, #19
 80027d0:	9301      	str	r3, [sp, #4]
 80027d2:	233c      	movs	r3, #60	@ 0x3c
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80027da:	f241 0268 	movw	r2, #4200	@ 0x1068
 80027de:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 80027e2:	4620      	mov	r0, r4
 80027e4:	f7fd ff82 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 80027e8:	f504 74c6 	add.w	r4, r4, #396	@ 0x18c
 80027ec:	f240 1331 	movw	r3, #305	@ 0x131
 80027f0:	9304      	str	r3, [sp, #16]
 80027f2:	2396      	movs	r3, #150	@ 0x96
 80027f4:	9303      	str	r3, [sp, #12]
 80027f6:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80027fa:	9302      	str	r3, [sp, #8]
 80027fc:	2313      	movs	r3, #19
 80027fe:	9301      	str	r3, [sp, #4]
 8002800:	233c      	movs	r3, #60	@ 0x3c
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8002808:	f241 0268 	movw	r2, #4200	@ 0x1068
 800280c:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8002810:	4620      	mov	r0, r4
 8002812:	f7fd ff6b 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 8002816:	f504 74c6 	add.w	r4, r4, #396	@ 0x18c
 800281a:	f240 1395 	movw	r3, #405	@ 0x195
 800281e:	9304      	str	r3, [sp, #16]
 8002820:	23c8      	movs	r3, #200	@ 0xc8
 8002822:	9303      	str	r3, [sp, #12]
 8002824:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002828:	9302      	str	r3, [sp, #8]
 800282a:	2313      	movs	r3, #19
 800282c:	9301      	str	r3, [sp, #4]
 800282e:	233c      	movs	r3, #60	@ 0x3c
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8002836:	f241 0268 	movw	r2, #4200	@ 0x1068
 800283a:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 800283e:	4620      	mov	r0, r4
 8002840:	f7fd ff54 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 8002844:	f504 70c6 	add.w	r0, r4, #396	@ 0x18c
 8002848:	f240 13f9 	movw	r3, #505	@ 0x1f9
 800284c:	9304      	str	r3, [sp, #16]
 800284e:	23fa      	movs	r3, #250	@ 0xfa
 8002850:	9303      	str	r3, [sp, #12]
 8002852:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002856:	9302      	str	r3, [sp, #8]
 8002858:	2313      	movs	r3, #19
 800285a:	9301      	str	r3, [sp, #4]
 800285c:	233c      	movs	r3, #60	@ 0x3c
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8002864:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002868:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 800286c:	f7fd ff3e 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
CPU_MOD CPU(CPU_ID_send, CPU_ID_recv, 500); //Same with CPU, rest of vehicle
 8002870:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002874:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002878:	2120      	movs	r1, #32
 800287a:	4807      	ldr	r0, [pc, #28]	@ (8002898 <_Z41__static_initialization_and_destruction_0v+0x10c>)
 800287c:	f7fe fb52 	bl	8000f24 <_ZN7CPU_MODC1Emmi>
Current_MOD current(Current_ID, Current_max); //Class for current measurement
 8002880:	22c8      	movs	r2, #200	@ 0xc8
 8002882:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8002886:	4805      	ldr	r0, [pc, #20]	@ (800289c <_Z41__static_initialization_and_destruction_0v+0x110>)
 8002888:	f7fe fc21 	bl	80010ce <_ZN11Current_MODC1Emi>
}
 800288c:	bf00      	nop
 800288e:	3704      	adds	r7, #4
 8002890:	46bd      	mov	sp, r7
 8002892:	bd90      	pop	{r4, r7, pc}
 8002894:	240004bc 	.word	0x240004bc
 8002898:	24000c88 	.word	0x24000c88
 800289c:	24000ccc 	.word	0x24000ccc

080028a0 <_GLOBAL__sub_I_BMS>:
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	f7ff ff72 	bl	800278c <_Z41__static_initialization_and_destruction_0v>
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028b2:	4b0a      	ldr	r3, [pc, #40]	@ (80028dc <HAL_MspInit+0x30>)
 80028b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80028b8:	4a08      	ldr	r2, [pc, #32]	@ (80028dc <HAL_MspInit+0x30>)
 80028ba:	f043 0302 	orr.w	r3, r3, #2
 80028be:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80028c2:	4b06      	ldr	r3, [pc, #24]	@ (80028dc <HAL_MspInit+0x30>)
 80028c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	607b      	str	r3, [r7, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	58024400 	.word	0x58024400

080028e0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08c      	sub	sp, #48	@ 0x30
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e8:	f107 031c 	add.w	r3, r7, #28
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	60da      	str	r2, [r3, #12]
 80028f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a31      	ldr	r2, [pc, #196]	@ (80029c4 <HAL_ADC_MspInit+0xe4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d12b      	bne.n	800295a <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002902:	4b31      	ldr	r3, [pc, #196]	@ (80029c8 <HAL_ADC_MspInit+0xe8>)
 8002904:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002908:	4a2f      	ldr	r2, [pc, #188]	@ (80029c8 <HAL_ADC_MspInit+0xe8>)
 800290a:	f043 0320 	orr.w	r3, r3, #32
 800290e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002912:	4b2d      	ldr	r3, [pc, #180]	@ (80029c8 <HAL_ADC_MspInit+0xe8>)
 8002914:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	61bb      	str	r3, [r7, #24]
 800291e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002920:	4b29      	ldr	r3, [pc, #164]	@ (80029c8 <HAL_ADC_MspInit+0xe8>)
 8002922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002926:	4a28      	ldr	r2, [pc, #160]	@ (80029c8 <HAL_ADC_MspInit+0xe8>)
 8002928:	f043 0320 	orr.w	r3, r3, #32
 800292c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002930:	4b25      	ldr	r3, [pc, #148]	@ (80029c8 <HAL_ADC_MspInit+0xe8>)
 8002932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002936:	f003 0320 	and.w	r3, r3, #32
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800293e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002944:	2303      	movs	r3, #3
 8002946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800294c:	f107 031c 	add.w	r3, r7, #28
 8002950:	4619      	mov	r1, r3
 8002952:	481e      	ldr	r0, [pc, #120]	@ (80029cc <HAL_ADC_MspInit+0xec>)
 8002954:	f003 fe1e 	bl	8006594 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002958:	e02f      	b.n	80029ba <HAL_ADC_MspInit+0xda>
  else if(hadc->Instance==ADC3)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a1c      	ldr	r2, [pc, #112]	@ (80029d0 <HAL_ADC_MspInit+0xf0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d12a      	bne.n	80029ba <HAL_ADC_MspInit+0xda>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002964:	4b18      	ldr	r3, [pc, #96]	@ (80029c8 <HAL_ADC_MspInit+0xe8>)
 8002966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800296a:	4a17      	ldr	r2, [pc, #92]	@ (80029c8 <HAL_ADC_MspInit+0xe8>)
 800296c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002970:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002974:	4b14      	ldr	r3, [pc, #80]	@ (80029c8 <HAL_ADC_MspInit+0xe8>)
 8002976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800297a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002982:	4b11      	ldr	r3, [pc, #68]	@ (80029c8 <HAL_ADC_MspInit+0xe8>)
 8002984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002988:	4a0f      	ldr	r2, [pc, #60]	@ (80029c8 <HAL_ADC_MspInit+0xe8>)
 800298a:	f043 0320 	orr.w	r3, r3, #32
 800298e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002992:	4b0d      	ldr	r3, [pc, #52]	@ (80029c8 <HAL_ADC_MspInit+0xe8>)
 8002994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029a6:	2303      	movs	r3, #3
 80029a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029ae:	f107 031c 	add.w	r3, r7, #28
 80029b2:	4619      	mov	r1, r3
 80029b4:	4805      	ldr	r0, [pc, #20]	@ (80029cc <HAL_ADC_MspInit+0xec>)
 80029b6:	f003 fded 	bl	8006594 <HAL_GPIO_Init>
}
 80029ba:	bf00      	nop
 80029bc:	3730      	adds	r7, #48	@ 0x30
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40022000 	.word	0x40022000
 80029c8:	58024400 	.word	0x58024400
 80029cc:	58021400 	.word	0x58021400
 80029d0:	58026000 	.word	0x58026000

080029d4 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b0ba      	sub	sp, #232	@ 0xe8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029dc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	60da      	str	r2, [r3, #12]
 80029ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029ec:	f107 0318 	add.w	r3, r7, #24
 80029f0:	22b8      	movs	r2, #184	@ 0xb8
 80029f2:	2100      	movs	r1, #0
 80029f4:	4618      	mov	r0, r3
 80029f6:	f009 fcef 	bl	800c3d8 <memset>
  if(hfdcan->Instance==FDCAN1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a5a      	ldr	r2, [pc, #360]	@ (8002b68 <HAL_FDCAN_MspInit+0x194>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d157      	bne.n	8002ab4 <HAL_FDCAN_MspInit+0xe0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002a04:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002a10:	2300      	movs	r3, #0
 8002a12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a16:	f107 0318 	add.w	r3, r7, #24
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f004 ff34 	bl	8007888 <HAL_RCCEx_PeriphCLKConfig>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002a26:	f7ff fb91 	bl	800214c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002a2a:	4b50      	ldr	r3, [pc, #320]	@ (8002b6c <HAL_FDCAN_MspInit+0x198>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	4a4e      	ldr	r2, [pc, #312]	@ (8002b6c <HAL_FDCAN_MspInit+0x198>)
 8002a32:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002a34:	4b4d      	ldr	r3, [pc, #308]	@ (8002b6c <HAL_FDCAN_MspInit+0x198>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d10e      	bne.n	8002a5a <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002a3c:	4b4c      	ldr	r3, [pc, #304]	@ (8002b70 <HAL_FDCAN_MspInit+0x19c>)
 8002a3e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002a42:	4a4b      	ldr	r2, [pc, #300]	@ (8002b70 <HAL_FDCAN_MspInit+0x19c>)
 8002a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a48:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002a4c:	4b48      	ldr	r3, [pc, #288]	@ (8002b70 <HAL_FDCAN_MspInit+0x19c>)
 8002a4e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a5a:	4b45      	ldr	r3, [pc, #276]	@ (8002b70 <HAL_FDCAN_MspInit+0x19c>)
 8002a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a60:	4a43      	ldr	r2, [pc, #268]	@ (8002b70 <HAL_FDCAN_MspInit+0x19c>)
 8002a62:	f043 0308 	orr.w	r3, r3, #8
 8002a66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a6a:	4b41      	ldr	r3, [pc, #260]	@ (8002b70 <HAL_FDCAN_MspInit+0x19c>)
 8002a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002a90:	2309      	movs	r3, #9
 8002a92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a96:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4835      	ldr	r0, [pc, #212]	@ (8002b74 <HAL_FDCAN_MspInit+0x1a0>)
 8002a9e:	f003 fd79 	bl	8006594 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	2013      	movs	r0, #19
 8002aa8:	f002 fb71 	bl	800518e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002aac:	2013      	movs	r0, #19
 8002aae:	f002 fb88 	bl	80051c2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN FDCAN2_MspInit 1 */

    /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002ab2:	e054      	b.n	8002b5e <HAL_FDCAN_MspInit+0x18a>
  else if(hfdcan->Instance==FDCAN2)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a2f      	ldr	r2, [pc, #188]	@ (8002b78 <HAL_FDCAN_MspInit+0x1a4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d14f      	bne.n	8002b5e <HAL_FDCAN_MspInit+0x18a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002abe:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002ac2:	f04f 0300 	mov.w	r3, #0
 8002ac6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ad0:	f107 0318 	add.w	r3, r7, #24
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f004 fed7 	bl	8007888 <HAL_RCCEx_PeriphCLKConfig>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 8002ae0:	f7ff fb34 	bl	800214c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002ae4:	4b21      	ldr	r3, [pc, #132]	@ (8002b6c <HAL_FDCAN_MspInit+0x198>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	4a20      	ldr	r2, [pc, #128]	@ (8002b6c <HAL_FDCAN_MspInit+0x198>)
 8002aec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002aee:	4b1f      	ldr	r3, [pc, #124]	@ (8002b6c <HAL_FDCAN_MspInit+0x198>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d10e      	bne.n	8002b14 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002af6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b70 <HAL_FDCAN_MspInit+0x19c>)
 8002af8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002afc:	4a1c      	ldr	r2, [pc, #112]	@ (8002b70 <HAL_FDCAN_MspInit+0x19c>)
 8002afe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b02:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002b06:	4b1a      	ldr	r3, [pc, #104]	@ (8002b70 <HAL_FDCAN_MspInit+0x19c>)
 8002b08:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b14:	4b16      	ldr	r3, [pc, #88]	@ (8002b70 <HAL_FDCAN_MspInit+0x19c>)
 8002b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b1a:	4a15      	ldr	r2, [pc, #84]	@ (8002b70 <HAL_FDCAN_MspInit+0x19c>)
 8002b1c:	f043 0302 	orr.w	r3, r3, #2
 8002b20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b24:	4b12      	ldr	r3, [pc, #72]	@ (8002b70 <HAL_FDCAN_MspInit+0x19c>)
 8002b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002b32:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002b36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002b4c:	2309      	movs	r3, #9
 8002b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b52:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b56:	4619      	mov	r1, r3
 8002b58:	4808      	ldr	r0, [pc, #32]	@ (8002b7c <HAL_FDCAN_MspInit+0x1a8>)
 8002b5a:	f003 fd1b 	bl	8006594 <HAL_GPIO_Init>
}
 8002b5e:	bf00      	nop
 8002b60:	37e8      	adds	r7, #232	@ 0xe8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	4000a000 	.word	0x4000a000
 8002b6c:	24000d64 	.word	0x24000d64
 8002b70:	58024400 	.word	0x58024400
 8002b74:	58020c00 	.word	0x58020c00
 8002b78:	4000a400 	.word	0x4000a400
 8002b7c:	58020400 	.word	0x58020400

08002b80 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a0b      	ldr	r2, [pc, #44]	@ (8002bbc <HAL_TIM_Base_MspInit+0x3c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d10e      	bne.n	8002bb0 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002b92:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc0 <HAL_TIM_Base_MspInit+0x40>)
 8002b94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b98:	4a09      	ldr	r2, [pc, #36]	@ (8002bc0 <HAL_TIM_Base_MspInit+0x40>)
 8002b9a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ba2:	4b07      	ldr	r3, [pc, #28]	@ (8002bc0 <HAL_TIM_Base_MspInit+0x40>)
 8002ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ba8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8002bb0:	bf00      	nop
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	40014800 	.word	0x40014800
 8002bc0:	58024400 	.word	0x58024400

08002bc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bcc:	f107 030c 	add.w	r3, r7, #12
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	60da      	str	r2, [r3, #12]
 8002bda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a13      	ldr	r2, [pc, #76]	@ (8002c30 <HAL_TIM_MspPostInit+0x6c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d11f      	bne.n	8002c26 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be6:	4b13      	ldr	r3, [pc, #76]	@ (8002c34 <HAL_TIM_MspPostInit+0x70>)
 8002be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bec:	4a11      	ldr	r2, [pc, #68]	@ (8002c34 <HAL_TIM_MspPostInit+0x70>)
 8002bee:	f043 0302 	orr.w	r3, r3, #2
 8002bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8002c34 <HAL_TIM_MspPostInit+0x70>)
 8002bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PB9     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c08:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002c16:	2301      	movs	r3, #1
 8002c18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c1a:	f107 030c 	add.w	r3, r7, #12
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4805      	ldr	r0, [pc, #20]	@ (8002c38 <HAL_TIM_MspPostInit+0x74>)
 8002c22:	f003 fcb7 	bl	8006594 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002c26:	bf00      	nop
 8002c28:	3720      	adds	r7, #32
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40014800 	.word	0x40014800
 8002c34:	58024400 	.word	0x58024400
 8002c38:	58020400 	.word	0x58020400

08002c3c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b0b8      	sub	sp, #224	@ 0xe0
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c54:	f107 0310 	add.w	r3, r7, #16
 8002c58:	22b8      	movs	r2, #184	@ 0xb8
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f009 fbbb 	bl	800c3d8 <memset>
  if(huart->Instance==USART2)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a26      	ldr	r2, [pc, #152]	@ (8002d00 <HAL_UART_MspInit+0xc4>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d145      	bne.n	8002cf8 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002c6c:	f04f 0202 	mov.w	r2, #2
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c7e:	f107 0310 	add.w	r3, r7, #16
 8002c82:	4618      	mov	r0, r3
 8002c84:	f004 fe00 	bl	8007888 <HAL_RCCEx_PeriphCLKConfig>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002c8e:	f7ff fa5d 	bl	800214c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c92:	4b1c      	ldr	r3, [pc, #112]	@ (8002d04 <HAL_UART_MspInit+0xc8>)
 8002c94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c98:	4a1a      	ldr	r2, [pc, #104]	@ (8002d04 <HAL_UART_MspInit+0xc8>)
 8002c9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c9e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002ca2:	4b18      	ldr	r3, [pc, #96]	@ (8002d04 <HAL_UART_MspInit+0xc8>)
 8002ca4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ca8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb0:	4b14      	ldr	r3, [pc, #80]	@ (8002d04 <HAL_UART_MspInit+0xc8>)
 8002cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cb6:	4a13      	ldr	r2, [pc, #76]	@ (8002d04 <HAL_UART_MspInit+0xc8>)
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002cc0:	4b10      	ldr	r3, [pc, #64]	@ (8002d04 <HAL_UART_MspInit+0xc8>)
 8002cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002cce:	230c      	movs	r3, #12
 8002cd0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ce6:	2307      	movs	r3, #7
 8002ce8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cec:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4805      	ldr	r0, [pc, #20]	@ (8002d08 <HAL_UART_MspInit+0xcc>)
 8002cf4:	f003 fc4e 	bl	8006594 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002cf8:	bf00      	nop
 8002cfa:	37e0      	adds	r7, #224	@ 0xe0
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40004400 	.word	0x40004400
 8002d04:	58024400 	.word	0x58024400
 8002d08:	58020000 	.word	0x58020000

08002d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d10:	bf00      	nop
 8002d12:	e7fd      	b.n	8002d10 <NMI_Handler+0x4>

08002d14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d18:	bf00      	nop
 8002d1a:	e7fd      	b.n	8002d18 <HardFault_Handler+0x4>

08002d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d20:	bf00      	nop
 8002d22:	e7fd      	b.n	8002d20 <MemManage_Handler+0x4>

08002d24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d28:	bf00      	nop
 8002d2a:	e7fd      	b.n	8002d28 <BusFault_Handler+0x4>

08002d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d30:	bf00      	nop
 8002d32:	e7fd      	b.n	8002d30 <UsageFault_Handler+0x4>

08002d34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d42:	b480      	push	{r7}
 8002d44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d62:	f000 f957 	bl	8003014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002d70:	4802      	ldr	r0, [pc, #8]	@ (8002d7c <FDCAN1_IT0_IRQHandler+0x10>)
 8002d72:	f002 ff01 	bl	8005b78 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	24000168 	.word	0x24000168

08002d80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d88:	4a14      	ldr	r2, [pc, #80]	@ (8002ddc <_sbrk+0x5c>)
 8002d8a:	4b15      	ldr	r3, [pc, #84]	@ (8002de0 <_sbrk+0x60>)
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d94:	4b13      	ldr	r3, [pc, #76]	@ (8002de4 <_sbrk+0x64>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d102      	bne.n	8002da2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d9c:	4b11      	ldr	r3, [pc, #68]	@ (8002de4 <_sbrk+0x64>)
 8002d9e:	4a12      	ldr	r2, [pc, #72]	@ (8002de8 <_sbrk+0x68>)
 8002da0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002da2:	4b10      	ldr	r3, [pc, #64]	@ (8002de4 <_sbrk+0x64>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4413      	add	r3, r2
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d207      	bcs.n	8002dc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002db0:	f009 fb1a 	bl	800c3e8 <__errno>
 8002db4:	4603      	mov	r3, r0
 8002db6:	220c      	movs	r2, #12
 8002db8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dba:	f04f 33ff 	mov.w	r3, #4294967295
 8002dbe:	e009      	b.n	8002dd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dc0:	4b08      	ldr	r3, [pc, #32]	@ (8002de4 <_sbrk+0x64>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dc6:	4b07      	ldr	r3, [pc, #28]	@ (8002de4 <_sbrk+0x64>)
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4413      	add	r3, r2
 8002dce:	4a05      	ldr	r2, [pc, #20]	@ (8002de4 <_sbrk+0x64>)
 8002dd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	24050000 	.word	0x24050000
 8002de0:	00000400 	.word	0x00000400
 8002de4:	24000d68 	.word	0x24000d68
 8002de8:	24000eb8 	.word	0x24000eb8

08002dec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002df0:	4b32      	ldr	r3, [pc, #200]	@ (8002ebc <SystemInit+0xd0>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df6:	4a31      	ldr	r2, [pc, #196]	@ (8002ebc <SystemInit+0xd0>)
 8002df8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002dfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e00:	4b2f      	ldr	r3, [pc, #188]	@ (8002ec0 <SystemInit+0xd4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 030f 	and.w	r3, r3, #15
 8002e08:	2b06      	cmp	r3, #6
 8002e0a:	d807      	bhi.n	8002e1c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e0c:	4b2c      	ldr	r3, [pc, #176]	@ (8002ec0 <SystemInit+0xd4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f023 030f 	bic.w	r3, r3, #15
 8002e14:	4a2a      	ldr	r2, [pc, #168]	@ (8002ec0 <SystemInit+0xd4>)
 8002e16:	f043 0307 	orr.w	r3, r3, #7
 8002e1a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002e1c:	4b29      	ldr	r3, [pc, #164]	@ (8002ec4 <SystemInit+0xd8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a28      	ldr	r2, [pc, #160]	@ (8002ec4 <SystemInit+0xd8>)
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e28:	4b26      	ldr	r3, [pc, #152]	@ (8002ec4 <SystemInit+0xd8>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002e2e:	4b25      	ldr	r3, [pc, #148]	@ (8002ec4 <SystemInit+0xd8>)
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	4924      	ldr	r1, [pc, #144]	@ (8002ec4 <SystemInit+0xd8>)
 8002e34:	4b24      	ldr	r3, [pc, #144]	@ (8002ec8 <SystemInit+0xdc>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e3a:	4b21      	ldr	r3, [pc, #132]	@ (8002ec0 <SystemInit+0xd4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d007      	beq.n	8002e56 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e46:	4b1e      	ldr	r3, [pc, #120]	@ (8002ec0 <SystemInit+0xd4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f023 030f 	bic.w	r3, r3, #15
 8002e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ec0 <SystemInit+0xd4>)
 8002e50:	f043 0307 	orr.w	r3, r3, #7
 8002e54:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002e56:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec4 <SystemInit+0xd8>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002e5c:	4b19      	ldr	r3, [pc, #100]	@ (8002ec4 <SystemInit+0xd8>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002e62:	4b18      	ldr	r3, [pc, #96]	@ (8002ec4 <SystemInit+0xd8>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002e68:	4b16      	ldr	r3, [pc, #88]	@ (8002ec4 <SystemInit+0xd8>)
 8002e6a:	4a18      	ldr	r2, [pc, #96]	@ (8002ecc <SystemInit+0xe0>)
 8002e6c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002e6e:	4b15      	ldr	r3, [pc, #84]	@ (8002ec4 <SystemInit+0xd8>)
 8002e70:	4a17      	ldr	r2, [pc, #92]	@ (8002ed0 <SystemInit+0xe4>)
 8002e72:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002e74:	4b13      	ldr	r3, [pc, #76]	@ (8002ec4 <SystemInit+0xd8>)
 8002e76:	4a17      	ldr	r2, [pc, #92]	@ (8002ed4 <SystemInit+0xe8>)
 8002e78:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002e7a:	4b12      	ldr	r3, [pc, #72]	@ (8002ec4 <SystemInit+0xd8>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002e80:	4b10      	ldr	r3, [pc, #64]	@ (8002ec4 <SystemInit+0xd8>)
 8002e82:	4a14      	ldr	r2, [pc, #80]	@ (8002ed4 <SystemInit+0xe8>)
 8002e84:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002e86:	4b0f      	ldr	r3, [pc, #60]	@ (8002ec4 <SystemInit+0xd8>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec4 <SystemInit+0xd8>)
 8002e8e:	4a11      	ldr	r2, [pc, #68]	@ (8002ed4 <SystemInit+0xe8>)
 8002e90:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002e92:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec4 <SystemInit+0xd8>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e98:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec4 <SystemInit+0xd8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a09      	ldr	r2, [pc, #36]	@ (8002ec4 <SystemInit+0xd8>)
 8002e9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ea2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002ea4:	4b07      	ldr	r3, [pc, #28]	@ (8002ec4 <SystemInit+0xd8>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed8 <SystemInit+0xec>)
 8002eac:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002eb0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002eb2:	bf00      	nop
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	e000ed00 	.word	0xe000ed00
 8002ec0:	52002000 	.word	0x52002000
 8002ec4:	58024400 	.word	0x58024400
 8002ec8:	eaf6ed7f 	.word	0xeaf6ed7f
 8002ecc:	02020200 	.word	0x02020200
 8002ed0:	01ff0000 	.word	0x01ff0000
 8002ed4:	01010280 	.word	0x01010280
 8002ed8:	52004000 	.word	0x52004000

08002edc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002edc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ee0:	f7ff ff84 	bl	8002dec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ee4:	480c      	ldr	r0, [pc, #48]	@ (8002f18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ee6:	490d      	ldr	r1, [pc, #52]	@ (8002f1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8002f20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eec:	e002      	b.n	8002ef4 <LoopCopyDataInit>

08002eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ef2:	3304      	adds	r3, #4

08002ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ef8:	d3f9      	bcc.n	8002eee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002efa:	4a0a      	ldr	r2, [pc, #40]	@ (8002f24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002efc:	4c0a      	ldr	r4, [pc, #40]	@ (8002f28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f00:	e001      	b.n	8002f06 <LoopFillZerobss>

08002f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f02:	6013      	str	r3, [r2, #0]
   adds r2, r2, #4
 8002f04:	3204      	adds	r2, #4

08002f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f08:	d3fb      	bcc.n	8002f02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f0a:	f009 fa73 	bl	800c3f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f0e:	f7fe faa9 	bl	8001464 <main>
  bx  lr
 8002f12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f14:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002f18:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002f1c:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8002f20:	0800d1cc 	.word	0x0800d1cc
  ldr r2, =_sbss
 8002f24:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8002f28:	24000eb8 	.word	0x24000eb8

08002f2c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f2c:	e7fe      	b.n	8002f2c <ADC3_IRQHandler>
	...

08002f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f36:	2003      	movs	r0, #3
 8002f38:	f002 f91e 	bl	8005178 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f3c:	f004 face 	bl	80074dc <HAL_RCC_GetSysClockFreq>
 8002f40:	4602      	mov	r2, r0
 8002f42:	4b15      	ldr	r3, [pc, #84]	@ (8002f98 <HAL_Init+0x68>)
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	0a1b      	lsrs	r3, r3, #8
 8002f48:	f003 030f 	and.w	r3, r3, #15
 8002f4c:	4913      	ldr	r1, [pc, #76]	@ (8002f9c <HAL_Init+0x6c>)
 8002f4e:	5ccb      	ldrb	r3, [r1, r3]
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	fa22 f303 	lsr.w	r3, r2, r3
 8002f58:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002f98 <HAL_Init+0x68>)
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	4a0e      	ldr	r2, [pc, #56]	@ (8002f9c <HAL_Init+0x6c>)
 8002f64:	5cd3      	ldrb	r3, [r2, r3]
 8002f66:	f003 031f 	and.w	r3, r3, #31
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f70:	4a0b      	ldr	r2, [pc, #44]	@ (8002fa0 <HAL_Init+0x70>)
 8002f72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f74:	4a0b      	ldr	r2, [pc, #44]	@ (8002fa4 <HAL_Init+0x74>)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f7a:	200f      	movs	r0, #15
 8002f7c:	f000 f814 	bl	8002fa8 <HAL_InitTick>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e002      	b.n	8002f90 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f8a:	f7ff fc8f 	bl	80028ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	58024400 	.word	0x58024400
 8002f9c:	0800d13c 	.word	0x0800d13c
 8002fa0:	24000010 	.word	0x24000010
 8002fa4:	2400000c 	.word	0x2400000c

08002fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002fb0:	4b15      	ldr	r3, [pc, #84]	@ (8003008 <HAL_InitTick+0x60>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e021      	b.n	8003000 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002fbc:	4b13      	ldr	r3, [pc, #76]	@ (800300c <HAL_InitTick+0x64>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	4b11      	ldr	r3, [pc, #68]	@ (8003008 <HAL_InitTick+0x60>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f002 f903 	bl	80051de <HAL_SYSTICK_Config>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e00e      	b.n	8003000 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b0f      	cmp	r3, #15
 8002fe6:	d80a      	bhi.n	8002ffe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fe8:	2200      	movs	r2, #0
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff0:	f002 f8cd 	bl	800518e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ff4:	4a06      	ldr	r2, [pc, #24]	@ (8003010 <HAL_InitTick+0x68>)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	e000      	b.n	8003000 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
}
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	24000018 	.word	0x24000018
 800300c:	2400000c 	.word	0x2400000c
 8003010:	24000014 	.word	0x24000014

08003014 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003018:	4b06      	ldr	r3, [pc, #24]	@ (8003034 <HAL_IncTick+0x20>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	461a      	mov	r2, r3
 800301e:	4b06      	ldr	r3, [pc, #24]	@ (8003038 <HAL_IncTick+0x24>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4413      	add	r3, r2
 8003024:	4a04      	ldr	r2, [pc, #16]	@ (8003038 <HAL_IncTick+0x24>)
 8003026:	6013      	str	r3, [r2, #0]
}
 8003028:	bf00      	nop
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	24000018 	.word	0x24000018
 8003038:	24000d6c 	.word	0x24000d6c

0800303c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  return uwTick;
 8003040:	4b03      	ldr	r3, [pc, #12]	@ (8003050 <HAL_GetTick+0x14>)
 8003042:	681b      	ldr	r3, [r3, #0]
}
 8003044:	4618      	mov	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	24000d6c 	.word	0x24000d6c

08003054 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800305c:	f7ff ffee 	bl	800303c <HAL_GetTick>
 8003060:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306c:	d005      	beq.n	800307a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800306e:	4b0a      	ldr	r3, [pc, #40]	@ (8003098 <HAL_Delay+0x44>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	461a      	mov	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4413      	add	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800307a:	bf00      	nop
 800307c:	f7ff ffde 	bl	800303c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	429a      	cmp	r2, r3
 800308a:	d8f7      	bhi.n	800307c <HAL_Delay+0x28>
  {
  }
}
 800308c:	bf00      	nop
 800308e:	bf00      	nop
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	24000018 	.word	0x24000018

0800309c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	609a      	str	r2, [r3, #8]
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	609a      	str	r2, [r3, #8]
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a18      	ldr	r2, [pc, #96]	@ (8003174 <LL_ADC_SetChannelPreselection+0x70>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d027      	beq.n	8003166 <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800311c:	2b00      	cmp	r3, #0
 800311e:	d107      	bne.n	8003130 <LL_ADC_SetChannelPreselection+0x2c>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	0e9b      	lsrs	r3, r3, #26
 8003124:	f003 031f 	and.w	r3, r3, #31
 8003128:	2201      	movs	r2, #1
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	e015      	b.n	800315c <LL_ADC_SetChannelPreselection+0x58>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	fa93 f3a3 	rbit	r3, r3
 800313a:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8003146:	2320      	movs	r3, #32
 8003148:	e003      	b.n	8003152 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	fab3 f383 	clz	r3, r3
 8003150:	b2db      	uxtb	r3, r3
 8003152:	f003 031f 	and.w	r3, r3, #31
 8003156:	2201      	movs	r2, #1
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	69d2      	ldr	r2, [r2, #28]
 8003160:	431a      	orrs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8003166:	bf00      	nop
 8003168:	371c      	adds	r7, #28
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	58026000 	.word	0x58026000

08003178 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003178:	b480      	push	{r7}
 800317a:	b087      	sub	sp, #28
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
 8003184:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	3360      	adds	r3, #96	@ 0x60
 800318a:	461a      	mov	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4a10      	ldr	r2, [pc, #64]	@ (80031d8 <LL_ADC_SetOffset+0x60>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d10b      	bne.n	80031b4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80031b2:	e00b      	b.n	80031cc <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	430b      	orrs	r3, r1
 80031c6:	431a      	orrs	r2, r3
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	601a      	str	r2, [r3, #0]
}
 80031cc:	bf00      	nop
 80031ce:	371c      	adds	r7, #28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	58026000 	.word	0x58026000

080031dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3360      	adds	r3, #96	@ 0x60
 80031ea:	461a      	mov	r2, r3
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	fa01 f303 	lsl.w	r3, r1, r3
 8003228:	431a      	orrs	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	611a      	str	r2, [r3, #16]
}
 800322e:	bf00      	nop
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
	...

0800323c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4a0c      	ldr	r2, [pc, #48]	@ (800327c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d00e      	beq.n	800326e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	3360      	adds	r3, #96	@ 0x60
 8003254:	461a      	mov	r2, r3
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	431a      	orrs	r2, r3
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	601a      	str	r2, [r3, #0]
  }
}
 800326e:	bf00      	nop
 8003270:	371c      	adds	r7, #28
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	58026000 	.word	0x58026000

08003280 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003280:	b480      	push	{r7}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4a0c      	ldr	r2, [pc, #48]	@ (80032c0 <LL_ADC_SetOffsetSaturation+0x40>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d10e      	bne.n	80032b2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	3360      	adds	r3, #96	@ 0x60
 8003298:	461a      	mov	r2, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	431a      	orrs	r2, r3
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80032b2:	bf00      	nop
 80032b4:	371c      	adds	r7, #28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	58026000 	.word	0x58026000

080032c4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4a0c      	ldr	r2, [pc, #48]	@ (8003304 <LL_ADC_SetOffsetSign+0x40>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d10e      	bne.n	80032f6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	3360      	adds	r3, #96	@ 0x60
 80032dc:	461a      	mov	r2, r3
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	431a      	orrs	r2, r3
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80032f6:	bf00      	nop
 80032f8:	371c      	adds	r7, #28
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	58026000 	.word	0x58026000

08003308 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	3360      	adds	r3, #96	@ 0x60
 8003318:	461a      	mov	r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4a0c      	ldr	r2, [pc, #48]	@ (8003358 <LL_ADC_SetOffsetState+0x50>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d108      	bne.n	800333c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	431a      	orrs	r2, r3
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800333a:	e007      	b.n	800334c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	431a      	orrs	r2, r3
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	601a      	str	r2, [r3, #0]
}
 800334c:	bf00      	nop
 800334e:	371c      	adds	r7, #28
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	58026000 	.word	0x58026000

0800335c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003370:	2301      	movs	r3, #1
 8003372:	e000      	b.n	8003376 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003382:	b480      	push	{r7}
 8003384:	b087      	sub	sp, #28
 8003386:	af00      	add	r7, sp, #0
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	3330      	adds	r3, #48	@ 0x30
 8003392:	461a      	mov	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	0a1b      	lsrs	r3, r3, #8
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	4413      	add	r3, r2
 80033a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	211f      	movs	r1, #31
 80033ae:	fa01 f303 	lsl.w	r3, r1, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	401a      	ands	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	0e9b      	lsrs	r3, r3, #26
 80033ba:	f003 011f 	and.w	r1, r3, #31
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f003 031f 	and.w	r3, r3, #31
 80033c4:	fa01 f303 	lsl.w	r3, r1, r3
 80033c8:	431a      	orrs	r2, r3
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80033ce:	bf00      	nop
 80033d0:	371c      	adds	r7, #28
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80033da:	b480      	push	{r7}
 80033dc:	b087      	sub	sp, #28
 80033de:	af00      	add	r7, sp, #0
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	3314      	adds	r3, #20
 80033ea:	461a      	mov	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	0e5b      	lsrs	r3, r3, #25
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	4413      	add	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	0d1b      	lsrs	r3, r3, #20
 8003402:	f003 031f 	and.w	r3, r3, #31
 8003406:	2107      	movs	r1, #7
 8003408:	fa01 f303 	lsl.w	r3, r1, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	401a      	ands	r2, r3
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	0d1b      	lsrs	r3, r3, #20
 8003414:	f003 031f 	and.w	r3, r3, #31
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	fa01 f303 	lsl.w	r3, r1, r3
 800341e:	431a      	orrs	r2, r3
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003424:	bf00      	nop
 8003426:	371c      	adds	r7, #28
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4a1a      	ldr	r2, [pc, #104]	@ (80034a8 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d115      	bne.n	8003470 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003450:	43db      	mvns	r3, r3
 8003452:	401a      	ands	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f003 0318 	and.w	r3, r3, #24
 800345a:	4914      	ldr	r1, [pc, #80]	@ (80034ac <LL_ADC_SetChannelSingleDiff+0x7c>)
 800345c:	40d9      	lsrs	r1, r3
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	400b      	ands	r3, r1
 8003462:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003466:	431a      	orrs	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800346e:	e014      	b.n	800349a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800347c:	43db      	mvns	r3, r3
 800347e:	401a      	ands	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f003 0318 	and.w	r3, r3, #24
 8003486:	4909      	ldr	r1, [pc, #36]	@ (80034ac <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003488:	40d9      	lsrs	r1, r3
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	400b      	ands	r3, r1
 800348e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003492:	431a      	orrs	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800349a:	bf00      	nop
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	58026000 	.word	0x58026000
 80034ac:	000fffff 	.word	0x000fffff

080034b0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 031f 	and.w	r3, r3, #31
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	4b04      	ldr	r3, [pc, #16]	@ (8003508 <LL_ADC_DisableDeepPowerDown+0x20>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6093      	str	r3, [r2, #8]
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	5fffffc0 	.word	0x5fffffc0

0800350c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800351c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003520:	d101      	bne.n	8003526 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003522:	2301      	movs	r3, #1
 8003524:	e000      	b.n	8003528 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	4b05      	ldr	r3, [pc, #20]	@ (8003558 <LL_ADC_EnableInternalRegulator+0x24>)
 8003542:	4013      	ands	r3, r2
 8003544:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	6fffffc0 	.word	0x6fffffc0

0800355c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800356c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003570:	d101      	bne.n	8003576 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	4b05      	ldr	r3, [pc, #20]	@ (80035a8 <LL_ADC_Enable+0x24>)
 8003592:	4013      	ands	r3, r2
 8003594:	f043 0201 	orr.w	r2, r3, #1
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	7fffffc0 	.word	0x7fffffc0

080035ac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	4b05      	ldr	r3, [pc, #20]	@ (80035d0 <LL_ADC_Disable+0x24>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	f043 0202 	orr.w	r2, r3, #2
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	7fffffc0 	.word	0x7fffffc0

080035d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <LL_ADC_IsEnabled+0x18>
 80035e8:	2301      	movs	r3, #1
 80035ea:	e000      	b.n	80035ee <LL_ADC_IsEnabled+0x1a>
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b02      	cmp	r3, #2
 800360c:	d101      	bne.n	8003612 <LL_ADC_IsDisableOngoing+0x18>
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <LL_ADC_IsDisableOngoing+0x1a>
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	4b05      	ldr	r3, [pc, #20]	@ (8003644 <LL_ADC_REG_StartConversion+0x24>)
 800362e:	4013      	ands	r3, r2
 8003630:	f043 0204 	orr.w	r2, r3, #4
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	7fffffc0 	.word	0x7fffffc0

08003648 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	4b05      	ldr	r3, [pc, #20]	@ (800366c <LL_ADC_REG_StopConversion+0x24>)
 8003656:	4013      	ands	r3, r2
 8003658:	f043 0210 	orr.w	r2, r3, #16
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	7fffffc0 	.word	0x7fffffc0

08003670 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b04      	cmp	r3, #4
 8003682:	d101      	bne.n	8003688 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003684:	2301      	movs	r3, #1
 8003686:	e000      	b.n	800368a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
	...

08003698 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	4b05      	ldr	r3, [pc, #20]	@ (80036bc <LL_ADC_INJ_StopConversion+0x24>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	f043 0220 	orr.w	r2, r3, #32
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	7fffffc0 	.word	0x7fffffc0

080036c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d101      	bne.n	80036d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80036d4:	2301      	movs	r3, #1
 80036d6:	e000      	b.n	80036da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
	...

080036e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036e8:	b590      	push	{r4, r7, lr}
 80036ea:	b089      	sub	sp, #36	@ 0x24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e1ee      	b.n	8003ae0 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800370c:	2b00      	cmp	r3, #0
 800370e:	d109      	bne.n	8003724 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff f8e5 	bl	80028e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff feef 	bl	800350c <LL_ADC_IsDeepPowerDownEnabled>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d004      	beq.n	800373e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fed5 	bl	80034e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff ff0a 	bl	800355c <LL_ADC_IsInternalRegulatorEnabled>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d114      	bne.n	8003778 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff feee 	bl	8003534 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003758:	4b8e      	ldr	r3, [pc, #568]	@ (8003994 <HAL_ADC_Init+0x2ac>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	099b      	lsrs	r3, r3, #6
 800375e:	4a8e      	ldr	r2, [pc, #568]	@ (8003998 <HAL_ADC_Init+0x2b0>)
 8003760:	fba2 2303 	umull	r2, r3, r2, r3
 8003764:	099b      	lsrs	r3, r3, #6
 8003766:	3301      	adds	r3, #1
 8003768:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800376a:	e002      	b.n	8003772 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	3b01      	subs	r3, #1
 8003770:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1f9      	bne.n	800376c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff feed 	bl	800355c <LL_ADC_IsInternalRegulatorEnabled>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10d      	bne.n	80037a4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800378c:	f043 0210 	orr.w	r2, r3, #16
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003798:	f043 0201 	orr.w	r2, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff ff61 	bl	8003670 <LL_ADC_REG_IsConversionOngoing>
 80037ae:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f040 8188 	bne.w	8003ace <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f040 8184 	bne.w	8003ace <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ca:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80037ce:	f043 0202 	orr.w	r2, r3, #2
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff fefa 	bl	80035d4 <LL_ADC_IsEnabled>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d136      	bne.n	8003854 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a6c      	ldr	r2, [pc, #432]	@ (800399c <HAL_ADC_Init+0x2b4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d004      	beq.n	80037fa <HAL_ADC_Init+0x112>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a6a      	ldr	r2, [pc, #424]	@ (80039a0 <HAL_ADC_Init+0x2b8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d10e      	bne.n	8003818 <HAL_ADC_Init+0x130>
 80037fa:	4868      	ldr	r0, [pc, #416]	@ (800399c <HAL_ADC_Init+0x2b4>)
 80037fc:	f7ff feea 	bl	80035d4 <LL_ADC_IsEnabled>
 8003800:	4604      	mov	r4, r0
 8003802:	4867      	ldr	r0, [pc, #412]	@ (80039a0 <HAL_ADC_Init+0x2b8>)
 8003804:	f7ff fee6 	bl	80035d4 <LL_ADC_IsEnabled>
 8003808:	4603      	mov	r3, r0
 800380a:	4323      	orrs	r3, r4
 800380c:	2b00      	cmp	r3, #0
 800380e:	bf0c      	ite	eq
 8003810:	2301      	moveq	r3, #1
 8003812:	2300      	movne	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	e008      	b.n	800382a <HAL_ADC_Init+0x142>
 8003818:	4862      	ldr	r0, [pc, #392]	@ (80039a4 <HAL_ADC_Init+0x2bc>)
 800381a:	f7ff fedb 	bl	80035d4 <LL_ADC_IsEnabled>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	bf0c      	ite	eq
 8003824:	2301      	moveq	r3, #1
 8003826:	2300      	movne	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d012      	beq.n	8003854 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a5a      	ldr	r2, [pc, #360]	@ (800399c <HAL_ADC_Init+0x2b4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d004      	beq.n	8003842 <HAL_ADC_Init+0x15a>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a58      	ldr	r2, [pc, #352]	@ (80039a0 <HAL_ADC_Init+0x2b8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d101      	bne.n	8003846 <HAL_ADC_Init+0x15e>
 8003842:	4a59      	ldr	r2, [pc, #356]	@ (80039a8 <HAL_ADC_Init+0x2c0>)
 8003844:	e000      	b.n	8003848 <HAL_ADC_Init+0x160>
 8003846:	4a59      	ldr	r2, [pc, #356]	@ (80039ac <HAL_ADC_Init+0x2c4>)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	4619      	mov	r1, r3
 800384e:	4610      	mov	r0, r2
 8003850:	f7ff fc24 	bl	800309c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a52      	ldr	r2, [pc, #328]	@ (80039a4 <HAL_ADC_Init+0x2bc>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d129      	bne.n	80038b2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	7e5b      	ldrb	r3, [r3, #25]
 8003862:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003868:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800386e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	2b08      	cmp	r3, #8
 8003876:	d013      	beq.n	80038a0 <HAL_ADC_Init+0x1b8>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	2b0c      	cmp	r3, #12
 800387e:	d00d      	beq.n	800389c <HAL_ADC_Init+0x1b4>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b1c      	cmp	r3, #28
 8003886:	d007      	beq.n	8003898 <HAL_ADC_Init+0x1b0>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2b18      	cmp	r3, #24
 800388e:	d101      	bne.n	8003894 <HAL_ADC_Init+0x1ac>
 8003890:	2318      	movs	r3, #24
 8003892:	e006      	b.n	80038a2 <HAL_ADC_Init+0x1ba>
 8003894:	2300      	movs	r3, #0
 8003896:	e004      	b.n	80038a2 <HAL_ADC_Init+0x1ba>
 8003898:	2310      	movs	r3, #16
 800389a:	e002      	b.n	80038a2 <HAL_ADC_Init+0x1ba>
 800389c:	2308      	movs	r3, #8
 800389e:	e000      	b.n	80038a2 <HAL_ADC_Init+0x1ba>
 80038a0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80038a2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038aa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80038ac:	4313      	orrs	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
 80038b0:	e00e      	b.n	80038d0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	7e5b      	ldrb	r3, [r3, #25]
 80038b6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80038bc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80038c2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038ca:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80038cc:	4313      	orrs	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d106      	bne.n	80038e8 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038de:	3b01      	subs	r3, #1
 80038e0:	045b      	lsls	r3, r3, #17
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d009      	beq.n	8003904 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4313      	orrs	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a26      	ldr	r2, [pc, #152]	@ (80039a4 <HAL_ADC_Init+0x2bc>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d115      	bne.n	800393a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	4b26      	ldr	r3, [pc, #152]	@ (80039b0 <HAL_ADC_Init+0x2c8>)
 8003916:	4013      	ands	r3, r2
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	69b9      	ldr	r1, [r7, #24]
 800391e:	430b      	orrs	r3, r1
 8003920:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	611a      	str	r2, [r3, #16]
 8003938:	e009      	b.n	800394e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68da      	ldr	r2, [r3, #12]
 8003940:	4b1c      	ldr	r3, [pc, #112]	@ (80039b4 <HAL_ADC_Init+0x2cc>)
 8003942:	4013      	ands	r3, r2
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6812      	ldr	r2, [r2, #0]
 8003948:	69b9      	ldr	r1, [r7, #24]
 800394a:	430b      	orrs	r3, r1
 800394c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff fe8c 	bl	8003670 <LL_ADC_REG_IsConversionOngoing>
 8003958:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff feae 	bl	80036c0 <LL_ADC_INJ_IsConversionOngoing>
 8003964:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	2b00      	cmp	r3, #0
 800396a:	f040 808e 	bne.w	8003a8a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2b00      	cmp	r3, #0
 8003972:	f040 808a 	bne.w	8003a8a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a0a      	ldr	r2, [pc, #40]	@ (80039a4 <HAL_ADC_Init+0x2bc>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d11b      	bne.n	80039b8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	7e1b      	ldrb	r3, [r3, #24]
 8003984:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800398c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800398e:	4313      	orrs	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
 8003992:	e018      	b.n	80039c6 <HAL_ADC_Init+0x2de>
 8003994:	2400000c 	.word	0x2400000c
 8003998:	053e2d63 	.word	0x053e2d63
 800399c:	40022000 	.word	0x40022000
 80039a0:	40022100 	.word	0x40022100
 80039a4:	58026000 	.word	0x58026000
 80039a8:	40022300 	.word	0x40022300
 80039ac:	58026300 	.word	0x58026300
 80039b0:	fff04007 	.word	0xfff04007
 80039b4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	7e1b      	ldrb	r3, [r3, #24]
 80039bc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	4b46      	ldr	r3, [pc, #280]	@ (8003ae8 <HAL_ADC_Init+0x400>)
 80039ce:	4013      	ands	r3, r2
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	69b9      	ldr	r1, [r7, #24]
 80039d6:	430b      	orrs	r3, r1
 80039d8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d137      	bne.n	8003a54 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e8:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a3f      	ldr	r2, [pc, #252]	@ (8003aec <HAL_ADC_Init+0x404>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d116      	bne.n	8003a22 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	691a      	ldr	r2, [r3, #16]
 80039fa:	4b3d      	ldr	r3, [pc, #244]	@ (8003af0 <HAL_ADC_Init+0x408>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003a06:	4311      	orrs	r1, r2
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a0c:	4311      	orrs	r1, r2
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003a12:	430a      	orrs	r2, r1
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0201 	orr.w	r2, r2, #1
 8003a1e:	611a      	str	r2, [r3, #16]
 8003a20:	e020      	b.n	8003a64 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	4b32      	ldr	r3, [pc, #200]	@ (8003af4 <HAL_ADC_Init+0x40c>)
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003a30:	3a01      	subs	r2, #1
 8003a32:	0411      	lsls	r1, r2, #16
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003a38:	4311      	orrs	r1, r2
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a3e:	4311      	orrs	r1, r2
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003a44:	430a      	orrs	r2, r1
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0201 	orr.w	r2, r2, #1
 8003a50:	611a      	str	r2, [r3, #16]
 8003a52:	e007      	b.n	8003a64 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	691a      	ldr	r2, [r3, #16]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0201 	bic.w	r2, r2, #1
 8003a62:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003aec <HAL_ADC_Init+0x404>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d002      	beq.n	8003a8a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f001 f8b1 	bl	8004bec <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d10c      	bne.n	8003aac <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a98:	f023 010f 	bic.w	r1, r3, #15
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	1e5a      	subs	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	631a      	str	r2, [r3, #48]	@ 0x30
 8003aaa:	e007      	b.n	8003abc <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 020f 	bic.w	r2, r2, #15
 8003aba:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ac0:	f023 0303 	bic.w	r3, r3, #3
 8003ac4:	f043 0201 	orr.w	r2, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	661a      	str	r2, [r3, #96]	@ 0x60
 8003acc:	e007      	b.n	8003ade <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad2:	f043 0210 	orr.w	r2, r3, #16
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ade:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3724      	adds	r7, #36	@ 0x24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd90      	pop	{r4, r7, pc}
 8003ae8:	ffffbffc 	.word	0xffffbffc
 8003aec:	58026000 	.word	0x58026000
 8003af0:	fc00f81f 	.word	0xfc00f81f
 8003af4:	fc00f81e 	.word	0xfc00f81e

08003af8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a5c      	ldr	r2, [pc, #368]	@ (8003c78 <HAL_ADC_Start+0x180>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d004      	beq.n	8003b14 <HAL_ADC_Start+0x1c>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a5b      	ldr	r2, [pc, #364]	@ (8003c7c <HAL_ADC_Start+0x184>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d101      	bne.n	8003b18 <HAL_ADC_Start+0x20>
 8003b14:	4b5a      	ldr	r3, [pc, #360]	@ (8003c80 <HAL_ADC_Start+0x188>)
 8003b16:	e000      	b.n	8003b1a <HAL_ADC_Start+0x22>
 8003b18:	4b5a      	ldr	r3, [pc, #360]	@ (8003c84 <HAL_ADC_Start+0x18c>)
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff fcc8 	bl	80034b0 <LL_ADC_GetMultimode>
 8003b20:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff fda2 	bl	8003670 <LL_ADC_REG_IsConversionOngoing>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f040 809a 	bne.w	8003c68 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <HAL_ADC_Start+0x4a>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e095      	b.n	8003c6e <HAL_ADC_Start+0x176>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 ff64 	bl	8004a18 <ADC_Enable>
 8003b50:	4603      	mov	r3, r0
 8003b52:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003b54:	7dfb      	ldrb	r3, [r7, #23]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f040 8081 	bne.w	8003c5e <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003b60:	4b49      	ldr	r3, [pc, #292]	@ (8003c88 <HAL_ADC_Start+0x190>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a42      	ldr	r2, [pc, #264]	@ (8003c7c <HAL_ADC_Start+0x184>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d002      	beq.n	8003b7c <HAL_ADC_Start+0x84>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	e000      	b.n	8003b7e <HAL_ADC_Start+0x86>
 8003b7c:	4b3e      	ldr	r3, [pc, #248]	@ (8003c78 <HAL_ADC_Start+0x180>)
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6812      	ldr	r2, [r2, #0]
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d002      	beq.n	8003b8c <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d105      	bne.n	8003b98 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b90:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ba0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ba4:	d106      	bne.n	8003bb4 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003baa:	f023 0206 	bic.w	r2, r3, #6
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	665a      	str	r2, [r3, #100]	@ 0x64
 8003bb2:	e002      	b.n	8003bba <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	221c      	movs	r2, #28
 8003bc0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a2b      	ldr	r2, [pc, #172]	@ (8003c7c <HAL_ADC_Start+0x184>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d002      	beq.n	8003bda <HAL_ADC_Start+0xe2>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	e000      	b.n	8003bdc <HAL_ADC_Start+0xe4>
 8003bda:	4b27      	ldr	r3, [pc, #156]	@ (8003c78 <HAL_ADC_Start+0x180>)
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6812      	ldr	r2, [r2, #0]
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d008      	beq.n	8003bf6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	2b05      	cmp	r3, #5
 8003bee:	d002      	beq.n	8003bf6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	2b09      	cmp	r3, #9
 8003bf4:	d114      	bne.n	8003c20 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d007      	beq.n	8003c14 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c08:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003c0c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7ff fd01 	bl	8003620 <LL_ADC_REG_StartConversion>
 8003c1e:	e025      	b.n	8003c6c <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c24:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a12      	ldr	r2, [pc, #72]	@ (8003c7c <HAL_ADC_Start+0x184>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d002      	beq.n	8003c3c <HAL_ADC_Start+0x144>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	e000      	b.n	8003c3e <HAL_ADC_Start+0x146>
 8003c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8003c78 <HAL_ADC_Start+0x180>)
 8003c3e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00f      	beq.n	8003c6c <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c50:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003c54:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	661a      	str	r2, [r3, #96]	@ 0x60
 8003c5c:	e006      	b.n	8003c6c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003c66:	e001      	b.n	8003c6c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003c68:	2302      	movs	r3, #2
 8003c6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40022000 	.word	0x40022000
 8003c7c:	40022100 	.word	0x40022100
 8003c80:	40022300 	.word	0x40022300
 8003c84:	58026300 	.word	0x58026300
 8003c88:	fffff0fe 	.word	0xfffff0fe

08003c8c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <HAL_ADC_Stop+0x16>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e021      	b.n	8003ce6 <HAL_ADC_Stop+0x5a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003caa:	2103      	movs	r1, #3
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fdf7 	bl	80048a0 <ADC_ConversionStop>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10f      	bne.n	8003cdc <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 ff35 	bl	8004b2c <ADC_Disable>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d107      	bne.n	8003cdc <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003cd0:	4b07      	ldr	r3, [pc, #28]	@ (8003cf0 <HAL_ADC_Stop+0x64>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	f043 0201 	orr.w	r2, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	ffffeefe 	.word	0xffffeefe

08003cf4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a72      	ldr	r2, [pc, #456]	@ (8003ecc <HAL_ADC_PollForConversion+0x1d8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d004      	beq.n	8003d12 <HAL_ADC_PollForConversion+0x1e>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a70      	ldr	r2, [pc, #448]	@ (8003ed0 <HAL_ADC_PollForConversion+0x1dc>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d101      	bne.n	8003d16 <HAL_ADC_PollForConversion+0x22>
 8003d12:	4b70      	ldr	r3, [pc, #448]	@ (8003ed4 <HAL_ADC_PollForConversion+0x1e0>)
 8003d14:	e000      	b.n	8003d18 <HAL_ADC_PollForConversion+0x24>
 8003d16:	4b70      	ldr	r3, [pc, #448]	@ (8003ed8 <HAL_ADC_PollForConversion+0x1e4>)
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff fbc9 	bl	80034b0 <LL_ADC_GetMultimode>
 8003d1e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d102      	bne.n	8003d2e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003d28:	2308      	movs	r3, #8
 8003d2a:	61fb      	str	r3, [r7, #28]
 8003d2c:	e037      	b.n	8003d9e <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d005      	beq.n	8003d40 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2b05      	cmp	r3, #5
 8003d38:	d002      	beq.n	8003d40 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2b09      	cmp	r3, #9
 8003d3e:	d111      	bne.n	8003d64 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d007      	beq.n	8003d5e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d52:	f043 0220 	orr.w	r2, r3, #32
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e0b1      	b.n	8003ec2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003d5e:	2304      	movs	r3, #4
 8003d60:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003d62:	e01c      	b.n	8003d9e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a58      	ldr	r2, [pc, #352]	@ (8003ecc <HAL_ADC_PollForConversion+0x1d8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d004      	beq.n	8003d78 <HAL_ADC_PollForConversion+0x84>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a57      	ldr	r2, [pc, #348]	@ (8003ed0 <HAL_ADC_PollForConversion+0x1dc>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d101      	bne.n	8003d7c <HAL_ADC_PollForConversion+0x88>
 8003d78:	4b56      	ldr	r3, [pc, #344]	@ (8003ed4 <HAL_ADC_PollForConversion+0x1e0>)
 8003d7a:	e000      	b.n	8003d7e <HAL_ADC_PollForConversion+0x8a>
 8003d7c:	4b56      	ldr	r3, [pc, #344]	@ (8003ed8 <HAL_ADC_PollForConversion+0x1e4>)
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff fba4 	bl	80034cc <LL_ADC_GetMultiDMATransfer>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d007      	beq.n	8003d9a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d8e:	f043 0220 	orr.w	r2, r3, #32
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e093      	b.n	8003ec2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003d9a:	2304      	movs	r3, #4
 8003d9c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003d9e:	f7ff f94d 	bl	800303c <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003da4:	e021      	b.n	8003dea <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dac:	d01d      	beq.n	8003dea <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003dae:	f7ff f945 	bl	800303c <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d302      	bcc.n	8003dc4 <HAL_ADC_PollForConversion+0xd0>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d112      	bne.n	8003dea <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10b      	bne.n	8003dea <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dd6:	f043 0204 	orr.w	r2, r3, #4
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e06b      	b.n	8003ec2 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	4013      	ands	r3, r2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0d6      	beq.n	8003da6 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dfc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff faa7 	bl	800335c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d01c      	beq.n	8003e4e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	7e5b      	ldrb	r3, [r3, #25]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d118      	bne.n	8003e4e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d111      	bne.n	8003e4e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e2e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d105      	bne.n	8003e4e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e46:	f043 0201 	orr.w	r2, r3, #1
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a1f      	ldr	r2, [pc, #124]	@ (8003ed0 <HAL_ADC_PollForConversion+0x1dc>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d002      	beq.n	8003e5e <HAL_ADC_PollForConversion+0x16a>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	e000      	b.n	8003e60 <HAL_ADC_PollForConversion+0x16c>
 8003e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003ecc <HAL_ADC_PollForConversion+0x1d8>)
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6812      	ldr	r2, [r2, #0]
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d008      	beq.n	8003e7a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d005      	beq.n	8003e7a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	2b05      	cmp	r3, #5
 8003e72:	d002      	beq.n	8003e7a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	2b09      	cmp	r3, #9
 8003e78:	d104      	bne.n	8003e84 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	61bb      	str	r3, [r7, #24]
 8003e82:	e00c      	b.n	8003e9e <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a11      	ldr	r2, [pc, #68]	@ (8003ed0 <HAL_ADC_PollForConversion+0x1dc>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d002      	beq.n	8003e94 <HAL_ADC_PollForConversion+0x1a0>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	e000      	b.n	8003e96 <HAL_ADC_PollForConversion+0x1a2>
 8003e94:	4b0d      	ldr	r3, [pc, #52]	@ (8003ecc <HAL_ADC_PollForConversion+0x1d8>)
 8003e96:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d104      	bne.n	8003eae <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2208      	movs	r2, #8
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	e008      	b.n	8003ec0 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d103      	bne.n	8003ec0 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	220c      	movs	r2, #12
 8003ebe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3720      	adds	r7, #32
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40022000 	.word	0x40022000
 8003ed0:	40022100 	.word	0x40022100
 8003ed4:	40022300 	.word	0x40022300
 8003ed8:	58026300 	.word	0x58026300

08003edc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
	...

08003ef8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003ef8:	b590      	push	{r4, r7, lr}
 8003efa:	b0a5      	sub	sp, #148	@ 0x94
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f12:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	4aa4      	ldr	r2, [pc, #656]	@ (80041ac <HAL_ADC_ConfigChannel+0x2b4>)
 8003f1a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d102      	bne.n	8003f2c <HAL_ADC_ConfigChannel+0x34>
 8003f26:	2302      	movs	r3, #2
 8003f28:	f000 bca2 	b.w	8004870 <HAL_ADC_ConfigChannel+0x978>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff fb99 	bl	8003670 <LL_ADC_REG_IsConversionOngoing>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f040 8486 	bne.w	8004852 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	db31      	blt.n	8003fb2 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a97      	ldr	r2, [pc, #604]	@ (80041b0 <HAL_ADC_ConfigChannel+0x2b8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d02c      	beq.n	8003fb2 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d108      	bne.n	8003f76 <HAL_ADC_ConfigChannel+0x7e>
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	0e9b      	lsrs	r3, r3, #26
 8003f6a:	f003 031f 	and.w	r3, r3, #31
 8003f6e:	2201      	movs	r2, #1
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	e016      	b.n	8003fa4 <HAL_ADC_ConfigChannel+0xac>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f7e:	fa93 f3a3 	rbit	r3, r3
 8003f82:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003f84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f86:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003f88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 8003f8e:	2320      	movs	r3, #32
 8003f90:	e003      	b.n	8003f9a <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8003f92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f94:	fab3 f383 	clz	r3, r3
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	f003 031f 	and.w	r3, r3, #31
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6812      	ldr	r2, [r2, #0]
 8003fa8:	69d1      	ldr	r1, [r2, #28]
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6812      	ldr	r2, [r2, #0]
 8003fae:	430b      	orrs	r3, r1
 8003fb0:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6818      	ldr	r0, [r3, #0]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	6859      	ldr	r1, [r3, #4]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	f7ff f9df 	bl	8003382 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff fb51 	bl	8003670 <LL_ADC_REG_IsConversionOngoing>
 8003fce:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff fb72 	bl	80036c0 <LL_ADC_INJ_IsConversionOngoing>
 8003fdc:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fe0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f040 824a 	bne.w	800447e <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f040 8245 	bne.w	800447e <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6818      	ldr	r0, [r3, #0]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	6819      	ldr	r1, [r3, #0]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	461a      	mov	r2, r3
 8004002:	f7ff f9ea 	bl	80033da <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a69      	ldr	r2, [pc, #420]	@ (80041b0 <HAL_ADC_ConfigChannel+0x2b8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d10d      	bne.n	800402c <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	695a      	ldr	r2, [r3, #20]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	08db      	lsrs	r3, r3, #3
 800401c:	f003 0303 	and.w	r3, r3, #3
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800402a:	e032      	b.n	8004092 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800402c:	4b61      	ldr	r3, [pc, #388]	@ (80041b4 <HAL_ADC_ConfigChannel+0x2bc>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004034:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004038:	d10b      	bne.n	8004052 <HAL_ADC_ConfigChannel+0x15a>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	695a      	ldr	r2, [r3, #20]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	089b      	lsrs	r3, r3, #2
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	e01d      	b.n	800408e <HAL_ADC_ConfigChannel+0x196>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10b      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x180>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	695a      	ldr	r2, [r3, #20]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	089b      	lsrs	r3, r3, #2
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	fa02 f303 	lsl.w	r3, r2, r3
 8004076:	e00a      	b.n	800408e <HAL_ADC_ConfigChannel+0x196>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	695a      	ldr	r2, [r3, #20]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	089b      	lsrs	r3, r3, #2
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	2b04      	cmp	r3, #4
 8004098:	d048      	beq.n	800412c <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	6919      	ldr	r1, [r3, #16]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040aa:	f7ff f865 	bl	8003178 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a3f      	ldr	r2, [pc, #252]	@ (80041b0 <HAL_ADC_ConfigChannel+0x2b8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d119      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6818      	ldr	r0, [r3, #0]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	6919      	ldr	r1, [r3, #16]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	461a      	mov	r2, r3
 80040c6:	f7ff f8fd 	bl	80032c4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6818      	ldr	r0, [r3, #0]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	6919      	ldr	r1, [r3, #16]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d102      	bne.n	80040e2 <HAL_ADC_ConfigChannel+0x1ea>
 80040dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040e0:	e000      	b.n	80040e4 <HAL_ADC_ConfigChannel+0x1ec>
 80040e2:	2300      	movs	r3, #0
 80040e4:	461a      	mov	r2, r3
 80040e6:	f7ff f8cb 	bl	8003280 <LL_ADC_SetOffsetSaturation>
 80040ea:	e1c8      	b.n	800447e <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6818      	ldr	r0, [r3, #0]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	6919      	ldr	r1, [r3, #16]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d102      	bne.n	8004104 <HAL_ADC_ConfigChannel+0x20c>
 80040fe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004102:	e000      	b.n	8004106 <HAL_ADC_ConfigChannel+0x20e>
 8004104:	2300      	movs	r3, #0
 8004106:	461a      	mov	r2, r3
 8004108:	f7ff f898 	bl	800323c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	6919      	ldr	r1, [r3, #16]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	7e1b      	ldrb	r3, [r3, #24]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d102      	bne.n	8004122 <HAL_ADC_ConfigChannel+0x22a>
 800411c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004120:	e000      	b.n	8004124 <HAL_ADC_ConfigChannel+0x22c>
 8004122:	2300      	movs	r3, #0
 8004124:	461a      	mov	r2, r3
 8004126:	f7ff f86f 	bl	8003208 <LL_ADC_SetDataRightShift>
 800412a:	e1a8      	b.n	800447e <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a1f      	ldr	r2, [pc, #124]	@ (80041b0 <HAL_ADC_ConfigChannel+0x2b8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	f040 815b 	bne.w	80043ee <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2100      	movs	r1, #0
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff f84c 	bl	80031dc <LL_ADC_GetOffsetChannel>
 8004144:	4603      	mov	r3, r0
 8004146:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10a      	bne.n	8004164 <HAL_ADC_ConfigChannel+0x26c>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2100      	movs	r1, #0
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff f841 	bl	80031dc <LL_ADC_GetOffsetChannel>
 800415a:	4603      	mov	r3, r0
 800415c:	0e9b      	lsrs	r3, r3, #26
 800415e:	f003 021f 	and.w	r2, r3, #31
 8004162:	e017      	b.n	8004194 <HAL_ADC_ConfigChannel+0x29c>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2100      	movs	r1, #0
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff f836 	bl	80031dc <LL_ADC_GetOffsetChannel>
 8004170:	4603      	mov	r3, r0
 8004172:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004174:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004176:	fa93 f3a3 	rbit	r3, r3
 800417a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800417c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800417e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004180:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8004186:	2320      	movs	r3, #32
 8004188:	e003      	b.n	8004192 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 800418a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800418c:	fab3 f383 	clz	r3, r3
 8004190:	b2db      	uxtb	r3, r3
 8004192:	461a      	mov	r2, r3
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10b      	bne.n	80041b8 <HAL_ADC_ConfigChannel+0x2c0>
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	0e9b      	lsrs	r3, r3, #26
 80041a6:	f003 031f 	and.w	r3, r3, #31
 80041aa:	e017      	b.n	80041dc <HAL_ADC_ConfigChannel+0x2e4>
 80041ac:	47ff0000 	.word	0x47ff0000
 80041b0:	58026000 	.word	0x58026000
 80041b4:	5c001000 	.word	0x5c001000
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041c0:	fa93 f3a3 	rbit	r3, r3
 80041c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80041c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041c8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80041ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 80041d0:	2320      	movs	r3, #32
 80041d2:	e003      	b.n	80041dc <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 80041d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041d6:	fab3 f383 	clz	r3, r3
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	429a      	cmp	r2, r3
 80041de:	d106      	bne.n	80041ee <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2200      	movs	r2, #0
 80041e6:	2100      	movs	r1, #0
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7ff f88d 	bl	8003308 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2101      	movs	r1, #1
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fe fff1 	bl	80031dc <LL_ADC_GetOffsetChannel>
 80041fa:	4603      	mov	r3, r0
 80041fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10a      	bne.n	800421a <HAL_ADC_ConfigChannel+0x322>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2101      	movs	r1, #1
 800420a:	4618      	mov	r0, r3
 800420c:	f7fe ffe6 	bl	80031dc <LL_ADC_GetOffsetChannel>
 8004210:	4603      	mov	r3, r0
 8004212:	0e9b      	lsrs	r3, r3, #26
 8004214:	f003 021f 	and.w	r2, r3, #31
 8004218:	e017      	b.n	800424a <HAL_ADC_ConfigChannel+0x352>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2101      	movs	r1, #1
 8004220:	4618      	mov	r0, r3
 8004222:	f7fe ffdb 	bl	80031dc <LL_ADC_GetOffsetChannel>
 8004226:	4603      	mov	r3, r0
 8004228:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800422c:	fa93 f3a3 	rbit	r3, r3
 8004230:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004232:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004234:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 800423c:	2320      	movs	r3, #32
 800423e:	e003      	b.n	8004248 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8004240:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004242:	fab3 f383 	clz	r3, r3
 8004246:	b2db      	uxtb	r3, r3
 8004248:	461a      	mov	r2, r3
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004252:	2b00      	cmp	r3, #0
 8004254:	d105      	bne.n	8004262 <HAL_ADC_ConfigChannel+0x36a>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	0e9b      	lsrs	r3, r3, #26
 800425c:	f003 031f 	and.w	r3, r3, #31
 8004260:	e011      	b.n	8004286 <HAL_ADC_ConfigChannel+0x38e>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004268:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800426a:	fa93 f3a3 	rbit	r3, r3
 800426e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004270:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004272:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800427a:	2320      	movs	r3, #32
 800427c:	e003      	b.n	8004286 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800427e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004280:	fab3 f383 	clz	r3, r3
 8004284:	b2db      	uxtb	r3, r3
 8004286:	429a      	cmp	r2, r3
 8004288:	d106      	bne.n	8004298 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2200      	movs	r2, #0
 8004290:	2101      	movs	r1, #1
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff f838 	bl	8003308 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2102      	movs	r1, #2
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fe ff9c 	bl	80031dc <LL_ADC_GetOffsetChannel>
 80042a4:	4603      	mov	r3, r0
 80042a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10a      	bne.n	80042c4 <HAL_ADC_ConfigChannel+0x3cc>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2102      	movs	r1, #2
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fe ff91 	bl	80031dc <LL_ADC_GetOffsetChannel>
 80042ba:	4603      	mov	r3, r0
 80042bc:	0e9b      	lsrs	r3, r3, #26
 80042be:	f003 021f 	and.w	r2, r3, #31
 80042c2:	e017      	b.n	80042f4 <HAL_ADC_ConfigChannel+0x3fc>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2102      	movs	r1, #2
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fe ff86 	bl	80031dc <LL_ADC_GetOffsetChannel>
 80042d0:	4603      	mov	r3, r0
 80042d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042d6:	fa93 f3a3 	rbit	r3, r3
 80042da:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80042dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80042e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80042e6:	2320      	movs	r3, #32
 80042e8:	e003      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80042ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042ec:	fab3 f383 	clz	r3, r3
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	461a      	mov	r2, r3
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d105      	bne.n	800430c <HAL_ADC_ConfigChannel+0x414>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	0e9b      	lsrs	r3, r3, #26
 8004306:	f003 031f 	and.w	r3, r3, #31
 800430a:	e011      	b.n	8004330 <HAL_ADC_ConfigChannel+0x438>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004314:	fa93 f3a3 	rbit	r3, r3
 8004318:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800431a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800431e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8004324:	2320      	movs	r3, #32
 8004326:	e003      	b.n	8004330 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8004328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800432a:	fab3 f383 	clz	r3, r3
 800432e:	b2db      	uxtb	r3, r3
 8004330:	429a      	cmp	r2, r3
 8004332:	d106      	bne.n	8004342 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2200      	movs	r2, #0
 800433a:	2102      	movs	r1, #2
 800433c:	4618      	mov	r0, r3
 800433e:	f7fe ffe3 	bl	8003308 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2103      	movs	r1, #3
 8004348:	4618      	mov	r0, r3
 800434a:	f7fe ff47 	bl	80031dc <LL_ADC_GetOffsetChannel>
 800434e:	4603      	mov	r3, r0
 8004350:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10a      	bne.n	800436e <HAL_ADC_ConfigChannel+0x476>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2103      	movs	r1, #3
 800435e:	4618      	mov	r0, r3
 8004360:	f7fe ff3c 	bl	80031dc <LL_ADC_GetOffsetChannel>
 8004364:	4603      	mov	r3, r0
 8004366:	0e9b      	lsrs	r3, r3, #26
 8004368:	f003 021f 	and.w	r2, r3, #31
 800436c:	e017      	b.n	800439e <HAL_ADC_ConfigChannel+0x4a6>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2103      	movs	r1, #3
 8004374:	4618      	mov	r0, r3
 8004376:	f7fe ff31 	bl	80031dc <LL_ADC_GetOffsetChannel>
 800437a:	4603      	mov	r3, r0
 800437c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	fa93 f3a3 	rbit	r3, r3
 8004384:	61fb      	str	r3, [r7, #28]
  return result;
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800438a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004390:	2320      	movs	r3, #32
 8004392:	e003      	b.n	800439c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004396:	fab3 f383 	clz	r3, r3
 800439a:	b2db      	uxtb	r3, r3
 800439c:	461a      	mov	r2, r3
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d105      	bne.n	80043b6 <HAL_ADC_ConfigChannel+0x4be>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	0e9b      	lsrs	r3, r3, #26
 80043b0:	f003 031f 	and.w	r3, r3, #31
 80043b4:	e011      	b.n	80043da <HAL_ADC_ConfigChannel+0x4e2>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	fa93 f3a3 	rbit	r3, r3
 80043c2:	613b      	str	r3, [r7, #16]
  return result;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 80043ce:	2320      	movs	r3, #32
 80043d0:	e003      	b.n	80043da <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	fab3 f383 	clz	r3, r3
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	429a      	cmp	r2, r3
 80043dc:	d14f      	bne.n	800447e <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2200      	movs	r2, #0
 80043e4:	2103      	movs	r1, #3
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fe ff8e 	bl	8003308 <LL_ADC_SetOffsetState>
 80043ec:	e047      	b.n	800447e <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	069b      	lsls	r3, r3, #26
 80043fe:	429a      	cmp	r2, r3
 8004400:	d107      	bne.n	8004412 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004410:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004418:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	069b      	lsls	r3, r3, #26
 8004422:	429a      	cmp	r2, r3
 8004424:	d107      	bne.n	8004436 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004434:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800443c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	069b      	lsls	r3, r3, #26
 8004446:	429a      	cmp	r2, r3
 8004448:	d107      	bne.n	800445a <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004458:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004460:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	069b      	lsls	r3, r3, #26
 800446a:	429a      	cmp	r2, r3
 800446c:	d107      	bne.n	800447e <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800447c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff f8a6 	bl	80035d4 <LL_ADC_IsEnabled>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	f040 81ea 	bne.w	8004864 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	6819      	ldr	r1, [r3, #0]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	461a      	mov	r2, r3
 800449e:	f7fe ffc7 	bl	8003430 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	4a7a      	ldr	r2, [pc, #488]	@ (8004690 <HAL_ADC_ConfigChannel+0x798>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	f040 80e0 	bne.w	800466e <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4977      	ldr	r1, [pc, #476]	@ (8004694 <HAL_ADC_ConfigChannel+0x79c>)
 80044b8:	428b      	cmp	r3, r1
 80044ba:	d147      	bne.n	800454c <HAL_ADC_ConfigChannel+0x654>
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4975      	ldr	r1, [pc, #468]	@ (8004698 <HAL_ADC_ConfigChannel+0x7a0>)
 80044c2:	428b      	cmp	r3, r1
 80044c4:	d040      	beq.n	8004548 <HAL_ADC_ConfigChannel+0x650>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4974      	ldr	r1, [pc, #464]	@ (800469c <HAL_ADC_ConfigChannel+0x7a4>)
 80044cc:	428b      	cmp	r3, r1
 80044ce:	d039      	beq.n	8004544 <HAL_ADC_ConfigChannel+0x64c>
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4972      	ldr	r1, [pc, #456]	@ (80046a0 <HAL_ADC_ConfigChannel+0x7a8>)
 80044d6:	428b      	cmp	r3, r1
 80044d8:	d032      	beq.n	8004540 <HAL_ADC_ConfigChannel+0x648>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4971      	ldr	r1, [pc, #452]	@ (80046a4 <HAL_ADC_ConfigChannel+0x7ac>)
 80044e0:	428b      	cmp	r3, r1
 80044e2:	d02b      	beq.n	800453c <HAL_ADC_ConfigChannel+0x644>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	496f      	ldr	r1, [pc, #444]	@ (80046a8 <HAL_ADC_ConfigChannel+0x7b0>)
 80044ea:	428b      	cmp	r3, r1
 80044ec:	d024      	beq.n	8004538 <HAL_ADC_ConfigChannel+0x640>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	496e      	ldr	r1, [pc, #440]	@ (80046ac <HAL_ADC_ConfigChannel+0x7b4>)
 80044f4:	428b      	cmp	r3, r1
 80044f6:	d01d      	beq.n	8004534 <HAL_ADC_ConfigChannel+0x63c>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	496c      	ldr	r1, [pc, #432]	@ (80046b0 <HAL_ADC_ConfigChannel+0x7b8>)
 80044fe:	428b      	cmp	r3, r1
 8004500:	d016      	beq.n	8004530 <HAL_ADC_ConfigChannel+0x638>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	496b      	ldr	r1, [pc, #428]	@ (80046b4 <HAL_ADC_ConfigChannel+0x7bc>)
 8004508:	428b      	cmp	r3, r1
 800450a:	d00f      	beq.n	800452c <HAL_ADC_ConfigChannel+0x634>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4969      	ldr	r1, [pc, #420]	@ (80046b8 <HAL_ADC_ConfigChannel+0x7c0>)
 8004512:	428b      	cmp	r3, r1
 8004514:	d008      	beq.n	8004528 <HAL_ADC_ConfigChannel+0x630>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4968      	ldr	r1, [pc, #416]	@ (80046bc <HAL_ADC_ConfigChannel+0x7c4>)
 800451c:	428b      	cmp	r3, r1
 800451e:	d101      	bne.n	8004524 <HAL_ADC_ConfigChannel+0x62c>
 8004520:	4b67      	ldr	r3, [pc, #412]	@ (80046c0 <HAL_ADC_ConfigChannel+0x7c8>)
 8004522:	e0a0      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 8004524:	2300      	movs	r3, #0
 8004526:	e09e      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 8004528:	4b66      	ldr	r3, [pc, #408]	@ (80046c4 <HAL_ADC_ConfigChannel+0x7cc>)
 800452a:	e09c      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 800452c:	4b66      	ldr	r3, [pc, #408]	@ (80046c8 <HAL_ADC_ConfigChannel+0x7d0>)
 800452e:	e09a      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 8004530:	4b60      	ldr	r3, [pc, #384]	@ (80046b4 <HAL_ADC_ConfigChannel+0x7bc>)
 8004532:	e098      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 8004534:	4b5e      	ldr	r3, [pc, #376]	@ (80046b0 <HAL_ADC_ConfigChannel+0x7b8>)
 8004536:	e096      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 8004538:	4b64      	ldr	r3, [pc, #400]	@ (80046cc <HAL_ADC_ConfigChannel+0x7d4>)
 800453a:	e094      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 800453c:	4b64      	ldr	r3, [pc, #400]	@ (80046d0 <HAL_ADC_ConfigChannel+0x7d8>)
 800453e:	e092      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 8004540:	4b64      	ldr	r3, [pc, #400]	@ (80046d4 <HAL_ADC_ConfigChannel+0x7dc>)
 8004542:	e090      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 8004544:	4b64      	ldr	r3, [pc, #400]	@ (80046d8 <HAL_ADC_ConfigChannel+0x7e0>)
 8004546:	e08e      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 8004548:	2301      	movs	r3, #1
 800454a:	e08c      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4962      	ldr	r1, [pc, #392]	@ (80046dc <HAL_ADC_ConfigChannel+0x7e4>)
 8004552:	428b      	cmp	r3, r1
 8004554:	d140      	bne.n	80045d8 <HAL_ADC_ConfigChannel+0x6e0>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	494f      	ldr	r1, [pc, #316]	@ (8004698 <HAL_ADC_ConfigChannel+0x7a0>)
 800455c:	428b      	cmp	r3, r1
 800455e:	d039      	beq.n	80045d4 <HAL_ADC_ConfigChannel+0x6dc>
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	494d      	ldr	r1, [pc, #308]	@ (800469c <HAL_ADC_ConfigChannel+0x7a4>)
 8004566:	428b      	cmp	r3, r1
 8004568:	d032      	beq.n	80045d0 <HAL_ADC_ConfigChannel+0x6d8>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	494c      	ldr	r1, [pc, #304]	@ (80046a0 <HAL_ADC_ConfigChannel+0x7a8>)
 8004570:	428b      	cmp	r3, r1
 8004572:	d02b      	beq.n	80045cc <HAL_ADC_ConfigChannel+0x6d4>
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	494a      	ldr	r1, [pc, #296]	@ (80046a4 <HAL_ADC_ConfigChannel+0x7ac>)
 800457a:	428b      	cmp	r3, r1
 800457c:	d024      	beq.n	80045c8 <HAL_ADC_ConfigChannel+0x6d0>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4949      	ldr	r1, [pc, #292]	@ (80046a8 <HAL_ADC_ConfigChannel+0x7b0>)
 8004584:	428b      	cmp	r3, r1
 8004586:	d01d      	beq.n	80045c4 <HAL_ADC_ConfigChannel+0x6cc>
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4947      	ldr	r1, [pc, #284]	@ (80046ac <HAL_ADC_ConfigChannel+0x7b4>)
 800458e:	428b      	cmp	r3, r1
 8004590:	d016      	beq.n	80045c0 <HAL_ADC_ConfigChannel+0x6c8>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4946      	ldr	r1, [pc, #280]	@ (80046b0 <HAL_ADC_ConfigChannel+0x7b8>)
 8004598:	428b      	cmp	r3, r1
 800459a:	d00f      	beq.n	80045bc <HAL_ADC_ConfigChannel+0x6c4>
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4944      	ldr	r1, [pc, #272]	@ (80046b4 <HAL_ADC_ConfigChannel+0x7bc>)
 80045a2:	428b      	cmp	r3, r1
 80045a4:	d008      	beq.n	80045b8 <HAL_ADC_ConfigChannel+0x6c0>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4944      	ldr	r1, [pc, #272]	@ (80046bc <HAL_ADC_ConfigChannel+0x7c4>)
 80045ac:	428b      	cmp	r3, r1
 80045ae:	d101      	bne.n	80045b4 <HAL_ADC_ConfigChannel+0x6bc>
 80045b0:	4b43      	ldr	r3, [pc, #268]	@ (80046c0 <HAL_ADC_ConfigChannel+0x7c8>)
 80045b2:	e058      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 80045b4:	2300      	movs	r3, #0
 80045b6:	e056      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 80045b8:	4b43      	ldr	r3, [pc, #268]	@ (80046c8 <HAL_ADC_ConfigChannel+0x7d0>)
 80045ba:	e054      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 80045bc:	4b3d      	ldr	r3, [pc, #244]	@ (80046b4 <HAL_ADC_ConfigChannel+0x7bc>)
 80045be:	e052      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 80045c0:	4b3b      	ldr	r3, [pc, #236]	@ (80046b0 <HAL_ADC_ConfigChannel+0x7b8>)
 80045c2:	e050      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 80045c4:	4b41      	ldr	r3, [pc, #260]	@ (80046cc <HAL_ADC_ConfigChannel+0x7d4>)
 80045c6:	e04e      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 80045c8:	4b41      	ldr	r3, [pc, #260]	@ (80046d0 <HAL_ADC_ConfigChannel+0x7d8>)
 80045ca:	e04c      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 80045cc:	4b41      	ldr	r3, [pc, #260]	@ (80046d4 <HAL_ADC_ConfigChannel+0x7dc>)
 80045ce:	e04a      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 80045d0:	4b41      	ldr	r3, [pc, #260]	@ (80046d8 <HAL_ADC_ConfigChannel+0x7e0>)
 80045d2:	e048      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 80045d4:	2301      	movs	r3, #1
 80045d6:	e046      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4940      	ldr	r1, [pc, #256]	@ (80046e0 <HAL_ADC_ConfigChannel+0x7e8>)
 80045de:	428b      	cmp	r3, r1
 80045e0:	d140      	bne.n	8004664 <HAL_ADC_ConfigChannel+0x76c>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	492c      	ldr	r1, [pc, #176]	@ (8004698 <HAL_ADC_ConfigChannel+0x7a0>)
 80045e8:	428b      	cmp	r3, r1
 80045ea:	d039      	beq.n	8004660 <HAL_ADC_ConfigChannel+0x768>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	492a      	ldr	r1, [pc, #168]	@ (800469c <HAL_ADC_ConfigChannel+0x7a4>)
 80045f2:	428b      	cmp	r3, r1
 80045f4:	d032      	beq.n	800465c <HAL_ADC_ConfigChannel+0x764>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4929      	ldr	r1, [pc, #164]	@ (80046a0 <HAL_ADC_ConfigChannel+0x7a8>)
 80045fc:	428b      	cmp	r3, r1
 80045fe:	d02b      	beq.n	8004658 <HAL_ADC_ConfigChannel+0x760>
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4927      	ldr	r1, [pc, #156]	@ (80046a4 <HAL_ADC_ConfigChannel+0x7ac>)
 8004606:	428b      	cmp	r3, r1
 8004608:	d024      	beq.n	8004654 <HAL_ADC_ConfigChannel+0x75c>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4926      	ldr	r1, [pc, #152]	@ (80046a8 <HAL_ADC_ConfigChannel+0x7b0>)
 8004610:	428b      	cmp	r3, r1
 8004612:	d01d      	beq.n	8004650 <HAL_ADC_ConfigChannel+0x758>
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4924      	ldr	r1, [pc, #144]	@ (80046ac <HAL_ADC_ConfigChannel+0x7b4>)
 800461a:	428b      	cmp	r3, r1
 800461c:	d016      	beq.n	800464c <HAL_ADC_ConfigChannel+0x754>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4923      	ldr	r1, [pc, #140]	@ (80046b0 <HAL_ADC_ConfigChannel+0x7b8>)
 8004624:	428b      	cmp	r3, r1
 8004626:	d00f      	beq.n	8004648 <HAL_ADC_ConfigChannel+0x750>
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4926      	ldr	r1, [pc, #152]	@ (80046c8 <HAL_ADC_ConfigChannel+0x7d0>)
 800462e:	428b      	cmp	r3, r1
 8004630:	d008      	beq.n	8004644 <HAL_ADC_ConfigChannel+0x74c>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	492b      	ldr	r1, [pc, #172]	@ (80046e4 <HAL_ADC_ConfigChannel+0x7ec>)
 8004638:	428b      	cmp	r3, r1
 800463a:	d101      	bne.n	8004640 <HAL_ADC_ConfigChannel+0x748>
 800463c:	4b2a      	ldr	r3, [pc, #168]	@ (80046e8 <HAL_ADC_ConfigChannel+0x7f0>)
 800463e:	e012      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 8004640:	2300      	movs	r3, #0
 8004642:	e010      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 8004644:	4b27      	ldr	r3, [pc, #156]	@ (80046e4 <HAL_ADC_ConfigChannel+0x7ec>)
 8004646:	e00e      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 8004648:	4b1a      	ldr	r3, [pc, #104]	@ (80046b4 <HAL_ADC_ConfigChannel+0x7bc>)
 800464a:	e00c      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 800464c:	4b18      	ldr	r3, [pc, #96]	@ (80046b0 <HAL_ADC_ConfigChannel+0x7b8>)
 800464e:	e00a      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 8004650:	4b1e      	ldr	r3, [pc, #120]	@ (80046cc <HAL_ADC_ConfigChannel+0x7d4>)
 8004652:	e008      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 8004654:	4b1e      	ldr	r3, [pc, #120]	@ (80046d0 <HAL_ADC_ConfigChannel+0x7d8>)
 8004656:	e006      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 8004658:	4b1e      	ldr	r3, [pc, #120]	@ (80046d4 <HAL_ADC_ConfigChannel+0x7dc>)
 800465a:	e004      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 800465c:	4b1e      	ldr	r3, [pc, #120]	@ (80046d8 <HAL_ADC_ConfigChannel+0x7e0>)
 800465e:	e002      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <HAL_ADC_ConfigChannel+0x76e>
 8004664:	2300      	movs	r3, #0
 8004666:	4619      	mov	r1, r3
 8004668:	4610      	mov	r0, r2
 800466a:	f7fe fd4b 	bl	8003104 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	f280 80f6 	bge.w	8004864 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a05      	ldr	r2, [pc, #20]	@ (8004694 <HAL_ADC_ConfigChannel+0x79c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d004      	beq.n	800468c <HAL_ADC_ConfigChannel+0x794>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a15      	ldr	r2, [pc, #84]	@ (80046dc <HAL_ADC_ConfigChannel+0x7e4>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d131      	bne.n	80046f0 <HAL_ADC_ConfigChannel+0x7f8>
 800468c:	4b17      	ldr	r3, [pc, #92]	@ (80046ec <HAL_ADC_ConfigChannel+0x7f4>)
 800468e:	e030      	b.n	80046f2 <HAL_ADC_ConfigChannel+0x7fa>
 8004690:	47ff0000 	.word	0x47ff0000
 8004694:	40022000 	.word	0x40022000
 8004698:	04300002 	.word	0x04300002
 800469c:	08600004 	.word	0x08600004
 80046a0:	0c900008 	.word	0x0c900008
 80046a4:	10c00010 	.word	0x10c00010
 80046a8:	14f00020 	.word	0x14f00020
 80046ac:	2a000400 	.word	0x2a000400
 80046b0:	2e300800 	.word	0x2e300800
 80046b4:	32601000 	.word	0x32601000
 80046b8:	43210000 	.word	0x43210000
 80046bc:	4b840000 	.word	0x4b840000
 80046c0:	4fb80000 	.word	0x4fb80000
 80046c4:	47520000 	.word	0x47520000
 80046c8:	36902000 	.word	0x36902000
 80046cc:	25b00200 	.word	0x25b00200
 80046d0:	21800100 	.word	0x21800100
 80046d4:	1d500080 	.word	0x1d500080
 80046d8:	19200040 	.word	0x19200040
 80046dc:	40022100 	.word	0x40022100
 80046e0:	58026000 	.word	0x58026000
 80046e4:	3ac04000 	.word	0x3ac04000
 80046e8:	3ef08000 	.word	0x3ef08000
 80046ec:	40022300 	.word	0x40022300
 80046f0:	4b61      	ldr	r3, [pc, #388]	@ (8004878 <HAL_ADC_ConfigChannel+0x980>)
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fe fcf8 	bl	80030e8 <LL_ADC_GetCommonPathInternalCh>
 80046f8:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a5f      	ldr	r2, [pc, #380]	@ (800487c <HAL_ADC_ConfigChannel+0x984>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d004      	beq.n	800470e <HAL_ADC_ConfigChannel+0x816>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a5d      	ldr	r2, [pc, #372]	@ (8004880 <HAL_ADC_ConfigChannel+0x988>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d10e      	bne.n	800472c <HAL_ADC_ConfigChannel+0x834>
 800470e:	485b      	ldr	r0, [pc, #364]	@ (800487c <HAL_ADC_ConfigChannel+0x984>)
 8004710:	f7fe ff60 	bl	80035d4 <LL_ADC_IsEnabled>
 8004714:	4604      	mov	r4, r0
 8004716:	485a      	ldr	r0, [pc, #360]	@ (8004880 <HAL_ADC_ConfigChannel+0x988>)
 8004718:	f7fe ff5c 	bl	80035d4 <LL_ADC_IsEnabled>
 800471c:	4603      	mov	r3, r0
 800471e:	4323      	orrs	r3, r4
 8004720:	2b00      	cmp	r3, #0
 8004722:	bf0c      	ite	eq
 8004724:	2301      	moveq	r3, #1
 8004726:	2300      	movne	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	e008      	b.n	800473e <HAL_ADC_ConfigChannel+0x846>
 800472c:	4855      	ldr	r0, [pc, #340]	@ (8004884 <HAL_ADC_ConfigChannel+0x98c>)
 800472e:	f7fe ff51 	bl	80035d4 <LL_ADC_IsEnabled>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	bf0c      	ite	eq
 8004738:	2301      	moveq	r3, #1
 800473a:	2300      	movne	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d07d      	beq.n	800483e <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a50      	ldr	r2, [pc, #320]	@ (8004888 <HAL_ADC_ConfigChannel+0x990>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d130      	bne.n	80047ae <HAL_ADC_ConfigChannel+0x8b6>
 800474c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800474e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d12b      	bne.n	80047ae <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a4a      	ldr	r2, [pc, #296]	@ (8004884 <HAL_ADC_ConfigChannel+0x98c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	f040 8081 	bne.w	8004864 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a45      	ldr	r2, [pc, #276]	@ (800487c <HAL_ADC_ConfigChannel+0x984>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d004      	beq.n	8004776 <HAL_ADC_ConfigChannel+0x87e>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a43      	ldr	r2, [pc, #268]	@ (8004880 <HAL_ADC_ConfigChannel+0x988>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d101      	bne.n	800477a <HAL_ADC_ConfigChannel+0x882>
 8004776:	4a45      	ldr	r2, [pc, #276]	@ (800488c <HAL_ADC_ConfigChannel+0x994>)
 8004778:	e000      	b.n	800477c <HAL_ADC_ConfigChannel+0x884>
 800477a:	4a3f      	ldr	r2, [pc, #252]	@ (8004878 <HAL_ADC_ConfigChannel+0x980>)
 800477c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800477e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004782:	4619      	mov	r1, r3
 8004784:	4610      	mov	r0, r2
 8004786:	f7fe fc9c 	bl	80030c2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800478a:	4b41      	ldr	r3, [pc, #260]	@ (8004890 <HAL_ADC_ConfigChannel+0x998>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	099b      	lsrs	r3, r3, #6
 8004790:	4a40      	ldr	r2, [pc, #256]	@ (8004894 <HAL_ADC_ConfigChannel+0x99c>)
 8004792:	fba2 2303 	umull	r2, r3, r2, r3
 8004796:	099b      	lsrs	r3, r3, #6
 8004798:	3301      	adds	r3, #1
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800479e:	e002      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1f9      	bne.n	80047a0 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047ac:	e05a      	b.n	8004864 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a39      	ldr	r2, [pc, #228]	@ (8004898 <HAL_ADC_ConfigChannel+0x9a0>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d11e      	bne.n	80047f6 <HAL_ADC_ConfigChannel+0x8fe>
 80047b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d119      	bne.n	80047f6 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a2f      	ldr	r2, [pc, #188]	@ (8004884 <HAL_ADC_ConfigChannel+0x98c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d14b      	bne.n	8004864 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a2a      	ldr	r2, [pc, #168]	@ (800487c <HAL_ADC_ConfigChannel+0x984>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d004      	beq.n	80047e0 <HAL_ADC_ConfigChannel+0x8e8>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a29      	ldr	r2, [pc, #164]	@ (8004880 <HAL_ADC_ConfigChannel+0x988>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d101      	bne.n	80047e4 <HAL_ADC_ConfigChannel+0x8ec>
 80047e0:	4a2a      	ldr	r2, [pc, #168]	@ (800488c <HAL_ADC_ConfigChannel+0x994>)
 80047e2:	e000      	b.n	80047e6 <HAL_ADC_ConfigChannel+0x8ee>
 80047e4:	4a24      	ldr	r2, [pc, #144]	@ (8004878 <HAL_ADC_ConfigChannel+0x980>)
 80047e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047ec:	4619      	mov	r1, r3
 80047ee:	4610      	mov	r0, r2
 80047f0:	f7fe fc67 	bl	80030c2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047f4:	e036      	b.n	8004864 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a28      	ldr	r2, [pc, #160]	@ (800489c <HAL_ADC_ConfigChannel+0x9a4>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d131      	bne.n	8004864 <HAL_ADC_ConfigChannel+0x96c>
 8004800:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004802:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d12c      	bne.n	8004864 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a1d      	ldr	r2, [pc, #116]	@ (8004884 <HAL_ADC_ConfigChannel+0x98c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d127      	bne.n	8004864 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a18      	ldr	r2, [pc, #96]	@ (800487c <HAL_ADC_ConfigChannel+0x984>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d004      	beq.n	8004828 <HAL_ADC_ConfigChannel+0x930>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a17      	ldr	r2, [pc, #92]	@ (8004880 <HAL_ADC_ConfigChannel+0x988>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d101      	bne.n	800482c <HAL_ADC_ConfigChannel+0x934>
 8004828:	4a18      	ldr	r2, [pc, #96]	@ (800488c <HAL_ADC_ConfigChannel+0x994>)
 800482a:	e000      	b.n	800482e <HAL_ADC_ConfigChannel+0x936>
 800482c:	4a12      	ldr	r2, [pc, #72]	@ (8004878 <HAL_ADC_ConfigChannel+0x980>)
 800482e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004830:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004834:	4619      	mov	r1, r3
 8004836:	4610      	mov	r0, r2
 8004838:	f7fe fc43 	bl	80030c2 <LL_ADC_SetCommonPathInternalCh>
 800483c:	e012      	b.n	8004864 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004842:	f043 0220 	orr.w	r2, r3, #32
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8004850:	e008      	b.n	8004864 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004856:	f043 0220 	orr.w	r2, r3, #32
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800486c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8004870:	4618      	mov	r0, r3
 8004872:	3794      	adds	r7, #148	@ 0x94
 8004874:	46bd      	mov	sp, r7
 8004876:	bd90      	pop	{r4, r7, pc}
 8004878:	58026300 	.word	0x58026300
 800487c:	40022000 	.word	0x40022000
 8004880:	40022100 	.word	0x40022100
 8004884:	58026000 	.word	0x58026000
 8004888:	c7520000 	.word	0xc7520000
 800488c:	40022300 	.word	0x40022300
 8004890:	2400000c 	.word	0x2400000c
 8004894:	053e2d63 	.word	0x053e2d63
 8004898:	c3210000 	.word	0xc3210000
 800489c:	cb840000 	.word	0xcb840000

080048a0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b088      	sub	sp, #32
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80048aa:	2300      	movs	r3, #0
 80048ac:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fe feda 	bl	8003670 <LL_ADC_REG_IsConversionOngoing>
 80048bc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fe fefc 	bl	80036c0 <LL_ADC_INJ_IsConversionOngoing>
 80048c8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d103      	bne.n	80048d8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 8098 	beq.w	8004a08 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d02a      	beq.n	800493c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	7e5b      	ldrb	r3, [r3, #25]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d126      	bne.n	800493c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	7e1b      	ldrb	r3, [r3, #24]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d122      	bne.n	800493c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80048f6:	2301      	movs	r3, #1
 80048f8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80048fa:	e014      	b.n	8004926 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	4a45      	ldr	r2, [pc, #276]	@ (8004a14 <ADC_ConversionStop+0x174>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d90d      	bls.n	8004920 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004908:	f043 0210 	orr.w	r2, r3, #16
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004914:	f043 0201 	orr.w	r2, r3, #1
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e074      	b.n	8004a0a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	3301      	adds	r3, #1
 8004924:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004930:	2b40      	cmp	r3, #64	@ 0x40
 8004932:	d1e3      	bne.n	80048fc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2240      	movs	r2, #64	@ 0x40
 800493a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	2b02      	cmp	r3, #2
 8004940:	d014      	beq.n	800496c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4618      	mov	r0, r3
 8004948:	f7fe fe92 	bl	8003670 <LL_ADC_REG_IsConversionOngoing>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00c      	beq.n	800496c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f7fe fe4f 	bl	80035fa <LL_ADC_IsDisableOngoing>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d104      	bne.n	800496c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4618      	mov	r0, r3
 8004968:	f7fe fe6e 	bl	8003648 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d014      	beq.n	800499c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4618      	mov	r0, r3
 8004978:	f7fe fea2 	bl	80036c0 <LL_ADC_INJ_IsConversionOngoing>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00c      	beq.n	800499c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f7fe fe37 	bl	80035fa <LL_ADC_IsDisableOngoing>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d104      	bne.n	800499c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f7fe fe7e 	bl	8003698 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d005      	beq.n	80049ae <ADC_ConversionStop+0x10e>
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	2b03      	cmp	r3, #3
 80049a6:	d105      	bne.n	80049b4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80049a8:	230c      	movs	r3, #12
 80049aa:	617b      	str	r3, [r7, #20]
        break;
 80049ac:	e005      	b.n	80049ba <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80049ae:	2308      	movs	r3, #8
 80049b0:	617b      	str	r3, [r7, #20]
        break;
 80049b2:	e002      	b.n	80049ba <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80049b4:	2304      	movs	r3, #4
 80049b6:	617b      	str	r3, [r7, #20]
        break;
 80049b8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80049ba:	f7fe fb3f 	bl	800303c <HAL_GetTick>
 80049be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80049c0:	e01b      	b.n	80049fa <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80049c2:	f7fe fb3b 	bl	800303c <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b05      	cmp	r3, #5
 80049ce:	d914      	bls.n	80049fa <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	4013      	ands	r3, r2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00d      	beq.n	80049fa <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049e2:	f043 0210 	orr.w	r2, r3, #16
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049ee:	f043 0201 	orr.w	r2, r3, #1
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e007      	b.n	8004a0a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	4013      	ands	r3, r2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1dc      	bne.n	80049c2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3720      	adds	r7, #32
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	000cdbff 	.word	0x000cdbff

08004a18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fe fdd5 	bl	80035d4 <LL_ADC_IsEnabled>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d16e      	bne.n	8004b0e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689a      	ldr	r2, [r3, #8]
 8004a36:	4b38      	ldr	r3, [pc, #224]	@ (8004b18 <ADC_Enable+0x100>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00d      	beq.n	8004a5a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a42:	f043 0210 	orr.w	r2, r3, #16
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a4e:	f043 0201 	orr.w	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e05a      	b.n	8004b10 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fe fd90 	bl	8003584 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004a64:	f7fe faea 	bl	800303c <HAL_GetTick>
 8004a68:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a2b      	ldr	r2, [pc, #172]	@ (8004b1c <ADC_Enable+0x104>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d004      	beq.n	8004a7e <ADC_Enable+0x66>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a29      	ldr	r2, [pc, #164]	@ (8004b20 <ADC_Enable+0x108>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d101      	bne.n	8004a82 <ADC_Enable+0x6a>
 8004a7e:	4b29      	ldr	r3, [pc, #164]	@ (8004b24 <ADC_Enable+0x10c>)
 8004a80:	e000      	b.n	8004a84 <ADC_Enable+0x6c>
 8004a82:	4b29      	ldr	r3, [pc, #164]	@ (8004b28 <ADC_Enable+0x110>)
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7fe fd13 	bl	80034b0 <LL_ADC_GetMultimode>
 8004a8a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a23      	ldr	r2, [pc, #140]	@ (8004b20 <ADC_Enable+0x108>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d002      	beq.n	8004a9c <ADC_Enable+0x84>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	e000      	b.n	8004a9e <ADC_Enable+0x86>
 8004a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8004b1c <ADC_Enable+0x104>)
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6812      	ldr	r2, [r2, #0]
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d02c      	beq.n	8004b00 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d130      	bne.n	8004b0e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004aac:	e028      	b.n	8004b00 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fe fd8e 	bl	80035d4 <LL_ADC_IsEnabled>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d104      	bne.n	8004ac8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7fe fd5e 	bl	8003584 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ac8:	f7fe fab8 	bl	800303c <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d914      	bls.n	8004b00 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d00d      	beq.n	8004b00 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ae8:	f043 0210 	orr.w	r2, r3, #16
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004af4:	f043 0201 	orr.w	r2, r3, #1
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e007      	b.n	8004b10 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d1cf      	bne.n	8004aae <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	8000003f 	.word	0x8000003f
 8004b1c:	40022000 	.word	0x40022000
 8004b20:	40022100 	.word	0x40022100
 8004b24:	40022300 	.word	0x40022300
 8004b28:	58026300 	.word	0x58026300

08004b2c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7fe fd5e 	bl	80035fa <LL_ADC_IsDisableOngoing>
 8004b3e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7fe fd45 	bl	80035d4 <LL_ADC_IsEnabled>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d047      	beq.n	8004be0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d144      	bne.n	8004be0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f003 030d 	and.w	r3, r3, #13
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d10c      	bne.n	8004b7e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7fe fd1f 	bl	80035ac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2203      	movs	r2, #3
 8004b74:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b76:	f7fe fa61 	bl	800303c <HAL_GetTick>
 8004b7a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b7c:	e029      	b.n	8004bd2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b82:	f043 0210 	orr.w	r2, r3, #16
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b8e:	f043 0201 	orr.w	r2, r3, #1
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e023      	b.n	8004be2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004b9a:	f7fe fa4f 	bl	800303c <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d914      	bls.n	8004bd2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00d      	beq.n	8004bd2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bba:	f043 0210 	orr.w	r2, r3, #16
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bc6:	f043 0201 	orr.w	r2, r3, #1
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e007      	b.n	8004be2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1dc      	bne.n	8004b9a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
	...

08004bec <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a6c      	ldr	r2, [pc, #432]	@ (8004dac <ADC_ConfigureBoostMode+0x1c0>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d004      	beq.n	8004c08 <ADC_ConfigureBoostMode+0x1c>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a6b      	ldr	r2, [pc, #428]	@ (8004db0 <ADC_ConfigureBoostMode+0x1c4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d109      	bne.n	8004c1c <ADC_ConfigureBoostMode+0x30>
 8004c08:	4b6a      	ldr	r3, [pc, #424]	@ (8004db4 <ADC_ConfigureBoostMode+0x1c8>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	bf14      	ite	ne
 8004c14:	2301      	movne	r3, #1
 8004c16:	2300      	moveq	r3, #0
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	e008      	b.n	8004c2e <ADC_ConfigureBoostMode+0x42>
 8004c1c:	4b66      	ldr	r3, [pc, #408]	@ (8004db8 <ADC_ConfigureBoostMode+0x1cc>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	bf14      	ite	ne
 8004c28:	2301      	movne	r3, #1
 8004c2a:	2300      	moveq	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d01c      	beq.n	8004c6c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004c32:	f002 fdcd 	bl	80077d0 <HAL_RCC_GetHCLKFreq>
 8004c36:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c40:	d010      	beq.n	8004c64 <ADC_ConfigureBoostMode+0x78>
 8004c42:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c46:	d873      	bhi.n	8004d30 <ADC_ConfigureBoostMode+0x144>
 8004c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c4c:	d002      	beq.n	8004c54 <ADC_ConfigureBoostMode+0x68>
 8004c4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c52:	d16d      	bne.n	8004d30 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	0c1b      	lsrs	r3, r3, #16
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c60:	60fb      	str	r3, [r7, #12]
        break;
 8004c62:	e068      	b.n	8004d36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	089b      	lsrs	r3, r3, #2
 8004c68:	60fb      	str	r3, [r7, #12]
        break;
 8004c6a:	e064      	b.n	8004d36 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004c6c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004c70:	f04f 0100 	mov.w	r1, #0
 8004c74:	f003 ffa8 	bl	8008bc8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004c78:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004c82:	d051      	beq.n	8004d28 <ADC_ConfigureBoostMode+0x13c>
 8004c84:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004c88:	d854      	bhi.n	8004d34 <ADC_ConfigureBoostMode+0x148>
 8004c8a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004c8e:	d047      	beq.n	8004d20 <ADC_ConfigureBoostMode+0x134>
 8004c90:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004c94:	d84e      	bhi.n	8004d34 <ADC_ConfigureBoostMode+0x148>
 8004c96:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004c9a:	d03d      	beq.n	8004d18 <ADC_ConfigureBoostMode+0x12c>
 8004c9c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004ca0:	d848      	bhi.n	8004d34 <ADC_ConfigureBoostMode+0x148>
 8004ca2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ca6:	d033      	beq.n	8004d10 <ADC_ConfigureBoostMode+0x124>
 8004ca8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cac:	d842      	bhi.n	8004d34 <ADC_ConfigureBoostMode+0x148>
 8004cae:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004cb2:	d029      	beq.n	8004d08 <ADC_ConfigureBoostMode+0x11c>
 8004cb4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004cb8:	d83c      	bhi.n	8004d34 <ADC_ConfigureBoostMode+0x148>
 8004cba:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004cbe:	d01a      	beq.n	8004cf6 <ADC_ConfigureBoostMode+0x10a>
 8004cc0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004cc4:	d836      	bhi.n	8004d34 <ADC_ConfigureBoostMode+0x148>
 8004cc6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004cca:	d014      	beq.n	8004cf6 <ADC_ConfigureBoostMode+0x10a>
 8004ccc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004cd0:	d830      	bhi.n	8004d34 <ADC_ConfigureBoostMode+0x148>
 8004cd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cd6:	d00e      	beq.n	8004cf6 <ADC_ConfigureBoostMode+0x10a>
 8004cd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cdc:	d82a      	bhi.n	8004d34 <ADC_ConfigureBoostMode+0x148>
 8004cde:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004ce2:	d008      	beq.n	8004cf6 <ADC_ConfigureBoostMode+0x10a>
 8004ce4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004ce8:	d824      	bhi.n	8004d34 <ADC_ConfigureBoostMode+0x148>
 8004cea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cee:	d002      	beq.n	8004cf6 <ADC_ConfigureBoostMode+0x10a>
 8004cf0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004cf4:	d11e      	bne.n	8004d34 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	0c9b      	lsrs	r3, r3, #18
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d04:	60fb      	str	r3, [r7, #12]
        break;
 8004d06:	e016      	b.n	8004d36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	091b      	lsrs	r3, r3, #4
 8004d0c:	60fb      	str	r3, [r7, #12]
        break;
 8004d0e:	e012      	b.n	8004d36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	095b      	lsrs	r3, r3, #5
 8004d14:	60fb      	str	r3, [r7, #12]
        break;
 8004d16:	e00e      	b.n	8004d36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	099b      	lsrs	r3, r3, #6
 8004d1c:	60fb      	str	r3, [r7, #12]
        break;
 8004d1e:	e00a      	b.n	8004d36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	09db      	lsrs	r3, r3, #7
 8004d24:	60fb      	str	r3, [r7, #12]
        break;
 8004d26:	e006      	b.n	8004d36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	0a1b      	lsrs	r3, r3, #8
 8004d2c:	60fb      	str	r3, [r7, #12]
        break;
 8004d2e:	e002      	b.n	8004d36 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004d30:	bf00      	nop
 8004d32:	e000      	b.n	8004d36 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004d34:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	085b      	lsrs	r3, r3, #1
 8004d3a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4a1f      	ldr	r2, [pc, #124]	@ (8004dbc <ADC_ConfigureBoostMode+0x1d0>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d808      	bhi.n	8004d56 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004d52:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004d54:	e025      	b.n	8004da2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	4a19      	ldr	r2, [pc, #100]	@ (8004dc0 <ADC_ConfigureBoostMode+0x1d4>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d80a      	bhi.n	8004d74 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d70:	609a      	str	r2, [r3, #8]
}
 8004d72:	e016      	b.n	8004da2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4a13      	ldr	r2, [pc, #76]	@ (8004dc4 <ADC_ConfigureBoostMode+0x1d8>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d80a      	bhi.n	8004d92 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d8e:	609a      	str	r2, [r3, #8]
}
 8004d90:	e007      	b.n	8004da2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004da0:	609a      	str	r2, [r3, #8]
}
 8004da2:	bf00      	nop
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	40022000 	.word	0x40022000
 8004db0:	40022100 	.word	0x40022100
 8004db4:	40022300 	.word	0x40022300
 8004db8:	58026300 	.word	0x58026300
 8004dbc:	005f5e10 	.word	0x005f5e10
 8004dc0:	00bebc20 	.word	0x00bebc20
 8004dc4:	017d7840 	.word	0x017d7840

08004dc8 <LL_ADC_IsEnabled>:
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d101      	bne.n	8004de0 <LL_ADC_IsEnabled+0x18>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e000      	b.n	8004de2 <LL_ADC_IsEnabled+0x1a>
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <LL_ADC_REG_IsConversionOngoing>:
{
 8004dee:	b480      	push	{r7}
 8004df0:	b083      	sub	sp, #12
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f003 0304 	and.w	r3, r3, #4
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d101      	bne.n	8004e06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004e14:	b590      	push	{r4, r7, lr}
 8004e16:	b0a3      	sub	sp, #140	@ 0x8c
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d101      	bne.n	8004e32 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004e2e:	2302      	movs	r3, #2
 8004e30:	e0c1      	b.n	8004fb6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a5e      	ldr	r2, [pc, #376]	@ (8004fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d102      	bne.n	8004e52 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004e4c:	4b5d      	ldr	r3, [pc, #372]	@ (8004fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	e001      	b.n	8004e56 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10b      	bne.n	8004e74 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e60:	f043 0220 	orr.w	r2, r3, #32
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e0a0      	b.n	8004fb6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff ffb9 	bl	8004dee <LL_ADC_REG_IsConversionOngoing>
 8004e7c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7ff ffb2 	bl	8004dee <LL_ADC_REG_IsConversionOngoing>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f040 8081 	bne.w	8004f94 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004e92:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d17c      	bne.n	8004f94 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a48      	ldr	r2, [pc, #288]	@ (8004fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d004      	beq.n	8004eae <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a46      	ldr	r2, [pc, #280]	@ (8004fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d101      	bne.n	8004eb2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004eae:	4b46      	ldr	r3, [pc, #280]	@ (8004fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004eb0:	e000      	b.n	8004eb4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004eb2:	4b46      	ldr	r3, [pc, #280]	@ (8004fcc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004eb4:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d039      	beq.n	8004f32 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004ebe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ece:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a3a      	ldr	r2, [pc, #232]	@ (8004fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d004      	beq.n	8004ee4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a39      	ldr	r2, [pc, #228]	@ (8004fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d10e      	bne.n	8004f02 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004ee4:	4836      	ldr	r0, [pc, #216]	@ (8004fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ee6:	f7ff ff6f 	bl	8004dc8 <LL_ADC_IsEnabled>
 8004eea:	4604      	mov	r4, r0
 8004eec:	4835      	ldr	r0, [pc, #212]	@ (8004fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004eee:	f7ff ff6b 	bl	8004dc8 <LL_ADC_IsEnabled>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	4323      	orrs	r3, r4
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	bf0c      	ite	eq
 8004efa:	2301      	moveq	r3, #1
 8004efc:	2300      	movne	r3, #0
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	e008      	b.n	8004f14 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004f02:	4833      	ldr	r0, [pc, #204]	@ (8004fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004f04:	f7ff ff60 	bl	8004dc8 <LL_ADC_IsEnabled>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	bf0c      	ite	eq
 8004f0e:	2301      	moveq	r3, #1
 8004f10:	2300      	movne	r3, #0
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d047      	beq.n	8004fa8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004f18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8004fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004f1e:	4013      	ands	r3, r2
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	6811      	ldr	r1, [r2, #0]
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	6892      	ldr	r2, [r2, #8]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f2e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f30:	e03a      	b.n	8004fa8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004f32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004f3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f3c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a1f      	ldr	r2, [pc, #124]	@ (8004fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d004      	beq.n	8004f52 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a1d      	ldr	r2, [pc, #116]	@ (8004fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d10e      	bne.n	8004f70 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004f52:	481b      	ldr	r0, [pc, #108]	@ (8004fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f54:	f7ff ff38 	bl	8004dc8 <LL_ADC_IsEnabled>
 8004f58:	4604      	mov	r4, r0
 8004f5a:	481a      	ldr	r0, [pc, #104]	@ (8004fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f5c:	f7ff ff34 	bl	8004dc8 <LL_ADC_IsEnabled>
 8004f60:	4603      	mov	r3, r0
 8004f62:	4323      	orrs	r3, r4
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	bf0c      	ite	eq
 8004f68:	2301      	moveq	r3, #1
 8004f6a:	2300      	movne	r3, #0
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	e008      	b.n	8004f82 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004f70:	4817      	ldr	r0, [pc, #92]	@ (8004fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004f72:	f7ff ff29 	bl	8004dc8 <LL_ADC_IsEnabled>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	bf0c      	ite	eq
 8004f7c:	2301      	moveq	r3, #1
 8004f7e:	2300      	movne	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d010      	beq.n	8004fa8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004f86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f88:	689a      	ldr	r2, [r3, #8]
 8004f8a:	4b12      	ldr	r3, [pc, #72]	@ (8004fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004f90:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f92:	e009      	b.n	8004fa8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f98:	f043 0220 	orr.w	r2, r3, #32
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004fa6:	e000      	b.n	8004faa <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004fa8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004fb2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	378c      	adds	r7, #140	@ 0x8c
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd90      	pop	{r4, r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40022000 	.word	0x40022000
 8004fc4:	40022100 	.word	0x40022100
 8004fc8:	40022300 	.word	0x40022300
 8004fcc:	58026300 	.word	0x58026300
 8004fd0:	58026000 	.word	0x58026000
 8004fd4:	fffff0e0 	.word	0xfffff0e0

08004fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8005018 <__NVIC_SetPriorityGrouping+0x40>)
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005000:	4b06      	ldr	r3, [pc, #24]	@ (800501c <__NVIC_SetPriorityGrouping+0x44>)
 8005002:	4313      	orrs	r3, r2
 8005004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005006:	4a04      	ldr	r2, [pc, #16]	@ (8005018 <__NVIC_SetPriorityGrouping+0x40>)
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	60d3      	str	r3, [r2, #12]
}
 800500c:	bf00      	nop
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	e000ed00 	.word	0xe000ed00
 800501c:	05fa0000 	.word	0x05fa0000

08005020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005024:	4b04      	ldr	r3, [pc, #16]	@ (8005038 <__NVIC_GetPriorityGrouping+0x18>)
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	0a1b      	lsrs	r3, r3, #8
 800502a:	f003 0307 	and.w	r3, r3, #7
}
 800502e:	4618      	mov	r0, r3
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	e000ed00 	.word	0xe000ed00

0800503c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	4603      	mov	r3, r0
 8005044:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800504a:	2b00      	cmp	r3, #0
 800504c:	db0b      	blt.n	8005066 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800504e:	88fb      	ldrh	r3, [r7, #6]
 8005050:	f003 021f 	and.w	r2, r3, #31
 8005054:	4907      	ldr	r1, [pc, #28]	@ (8005074 <__NVIC_EnableIRQ+0x38>)
 8005056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800505a:	095b      	lsrs	r3, r3, #5
 800505c:	2001      	movs	r0, #1
 800505e:	fa00 f202 	lsl.w	r2, r0, r2
 8005062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	e000e100 	.word	0xe000e100

08005078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	4603      	mov	r3, r0
 8005080:	6039      	str	r1, [r7, #0]
 8005082:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005084:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005088:	2b00      	cmp	r3, #0
 800508a:	db0a      	blt.n	80050a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	b2da      	uxtb	r2, r3
 8005090:	490c      	ldr	r1, [pc, #48]	@ (80050c4 <__NVIC_SetPriority+0x4c>)
 8005092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005096:	0112      	lsls	r2, r2, #4
 8005098:	b2d2      	uxtb	r2, r2
 800509a:	440b      	add	r3, r1
 800509c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050a0:	e00a      	b.n	80050b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	4908      	ldr	r1, [pc, #32]	@ (80050c8 <__NVIC_SetPriority+0x50>)
 80050a8:	88fb      	ldrh	r3, [r7, #6]
 80050aa:	f003 030f 	and.w	r3, r3, #15
 80050ae:	3b04      	subs	r3, #4
 80050b0:	0112      	lsls	r2, r2, #4
 80050b2:	b2d2      	uxtb	r2, r2
 80050b4:	440b      	add	r3, r1
 80050b6:	761a      	strb	r2, [r3, #24]
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	e000e100 	.word	0xe000e100
 80050c8:	e000ed00 	.word	0xe000ed00

080050cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b089      	sub	sp, #36	@ 0x24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	f1c3 0307 	rsb	r3, r3, #7
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	bf28      	it	cs
 80050ea:	2304      	movcs	r3, #4
 80050ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	3304      	adds	r3, #4
 80050f2:	2b06      	cmp	r3, #6
 80050f4:	d902      	bls.n	80050fc <NVIC_EncodePriority+0x30>
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	3b03      	subs	r3, #3
 80050fa:	e000      	b.n	80050fe <NVIC_EncodePriority+0x32>
 80050fc:	2300      	movs	r3, #0
 80050fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005100:	f04f 32ff 	mov.w	r2, #4294967295
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	fa02 f303 	lsl.w	r3, r2, r3
 800510a:	43da      	mvns	r2, r3
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	401a      	ands	r2, r3
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005114:	f04f 31ff 	mov.w	r1, #4294967295
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	fa01 f303 	lsl.w	r3, r1, r3
 800511e:	43d9      	mvns	r1, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005124:	4313      	orrs	r3, r2
         );
}
 8005126:	4618      	mov	r0, r3
 8005128:	3724      	adds	r7, #36	@ 0x24
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
	...

08005134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	3b01      	subs	r3, #1
 8005140:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005144:	d301      	bcc.n	800514a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005146:	2301      	movs	r3, #1
 8005148:	e00f      	b.n	800516a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800514a:	4a0a      	ldr	r2, [pc, #40]	@ (8005174 <SysTick_Config+0x40>)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3b01      	subs	r3, #1
 8005150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005152:	210f      	movs	r1, #15
 8005154:	f04f 30ff 	mov.w	r0, #4294967295
 8005158:	f7ff ff8e 	bl	8005078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800515c:	4b05      	ldr	r3, [pc, #20]	@ (8005174 <SysTick_Config+0x40>)
 800515e:	2200      	movs	r2, #0
 8005160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005162:	4b04      	ldr	r3, [pc, #16]	@ (8005174 <SysTick_Config+0x40>)
 8005164:	2207      	movs	r2, #7
 8005166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	e000e010 	.word	0xe000e010

08005178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7ff ff29 	bl	8004fd8 <__NVIC_SetPriorityGrouping>
}
 8005186:	bf00      	nop
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b086      	sub	sp, #24
 8005192:	af00      	add	r7, sp, #0
 8005194:	4603      	mov	r3, r0
 8005196:	60b9      	str	r1, [r7, #8]
 8005198:	607a      	str	r2, [r7, #4]
 800519a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800519c:	f7ff ff40 	bl	8005020 <__NVIC_GetPriorityGrouping>
 80051a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	68b9      	ldr	r1, [r7, #8]
 80051a6:	6978      	ldr	r0, [r7, #20]
 80051a8:	f7ff ff90 	bl	80050cc <NVIC_EncodePriority>
 80051ac:	4602      	mov	r2, r0
 80051ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80051b2:	4611      	mov	r1, r2
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7ff ff5f 	bl	8005078 <__NVIC_SetPriority>
}
 80051ba:	bf00      	nop
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b082      	sub	sp, #8
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	4603      	mov	r3, r0
 80051ca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7ff ff33 	bl	800503c <__NVIC_EnableIRQ>
}
 80051d6:	bf00      	nop
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7ff ffa4 	bl	8005134 <SysTick_Config>
 80051ec:	4603      	mov	r3, r0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
	...

080051f8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b098      	sub	sp, #96	@ 0x60
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005200:	4a84      	ldr	r2, [pc, #528]	@ (8005414 <HAL_FDCAN_Init+0x21c>)
 8005202:	f107 030c 	add.w	r3, r7, #12
 8005206:	4611      	mov	r1, r2
 8005208:	224c      	movs	r2, #76	@ 0x4c
 800520a:	4618      	mov	r0, r3
 800520c:	f007 f918 	bl	800c440 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e1c6      	b.n	80055a8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a7e      	ldr	r2, [pc, #504]	@ (8005418 <HAL_FDCAN_Init+0x220>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d106      	bne.n	8005232 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800522c:	461a      	mov	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d106      	bne.n	800524c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7fd fbc4 	bl	80029d4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699a      	ldr	r2, [r3, #24]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0210 	bic.w	r2, r2, #16
 800525a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800525c:	f7fd feee 	bl	800303c <HAL_GetTick>
 8005260:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005262:	e014      	b.n	800528e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005264:	f7fd feea 	bl	800303c <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b0a      	cmp	r3, #10
 8005270:	d90d      	bls.n	800528e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005278:	f043 0201 	orr.w	r2, r3, #1
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2203      	movs	r2, #3
 8005286:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e18c      	b.n	80055a8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	f003 0308 	and.w	r3, r3, #8
 8005298:	2b08      	cmp	r3, #8
 800529a:	d0e3      	beq.n	8005264 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	699a      	ldr	r2, [r3, #24]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0201 	orr.w	r2, r2, #1
 80052aa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052ac:	f7fd fec6 	bl	800303c <HAL_GetTick>
 80052b0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80052b2:	e014      	b.n	80052de <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80052b4:	f7fd fec2 	bl	800303c <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b0a      	cmp	r3, #10
 80052c0:	d90d      	bls.n	80052de <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052c8:	f043 0201 	orr.w	r2, r3, #1
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2203      	movs	r2, #3
 80052d6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e164      	b.n	80055a8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0e3      	beq.n	80052b4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f042 0202 	orr.w	r2, r2, #2
 80052fa:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	7c1b      	ldrb	r3, [r3, #16]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d108      	bne.n	8005316 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	699a      	ldr	r2, [r3, #24]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005312:	619a      	str	r2, [r3, #24]
 8005314:	e007      	b.n	8005326 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	699a      	ldr	r2, [r3, #24]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005324:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	7c5b      	ldrb	r3, [r3, #17]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d108      	bne.n	8005340 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	699a      	ldr	r2, [r3, #24]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800533c:	619a      	str	r2, [r3, #24]
 800533e:	e007      	b.n	8005350 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699a      	ldr	r2, [r3, #24]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800534e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	7c9b      	ldrb	r3, [r3, #18]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d108      	bne.n	800536a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699a      	ldr	r2, [r3, #24]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005366:	619a      	str	r2, [r3, #24]
 8005368:	e007      	b.n	800537a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	699a      	ldr	r2, [r3, #24]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005378:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699a      	ldr	r2, [r3, #24]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800539e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	691a      	ldr	r2, [r3, #16]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0210 	bic.w	r2, r2, #16
 80053ae:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d108      	bne.n	80053ca <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699a      	ldr	r2, [r3, #24]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0204 	orr.w	r2, r2, #4
 80053c6:	619a      	str	r2, [r3, #24]
 80053c8:	e030      	b.n	800542c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d02c      	beq.n	800542c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d020      	beq.n	800541c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	699a      	ldr	r2, [r3, #24]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80053e8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	691a      	ldr	r2, [r3, #16]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f042 0210 	orr.w	r2, r2, #16
 80053f8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	2b03      	cmp	r3, #3
 8005400:	d114      	bne.n	800542c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	699a      	ldr	r2, [r3, #24]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f042 0220 	orr.w	r2, r2, #32
 8005410:	619a      	str	r2, [r3, #24]
 8005412:	e00b      	b.n	800542c <HAL_FDCAN_Init+0x234>
 8005414:	0800d0f0 	.word	0x0800d0f0
 8005418:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699a      	ldr	r2, [r3, #24]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f042 0220 	orr.w	r2, r2, #32
 800542a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	3b01      	subs	r3, #1
 8005432:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	69db      	ldr	r3, [r3, #28]
 8005438:	3b01      	subs	r3, #1
 800543a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800543c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005444:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	3b01      	subs	r3, #1
 800544e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005454:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005456:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005460:	d115      	bne.n	800548e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005466:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546c:	3b01      	subs	r3, #1
 800546e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005470:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005476:	3b01      	subs	r3, #1
 8005478:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800547a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005482:	3b01      	subs	r3, #1
 8005484:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800548a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800548c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054b4:	4413      	add	r3, r2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d011      	beq.n	80054de <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80054c2:	f023 0107 	bic.w	r1, r3, #7
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	3360      	adds	r3, #96	@ 0x60
 80054ce:	443b      	add	r3, r7
 80054d0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d011      	beq.n	800550a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80054ee:	f023 0107 	bic.w	r1, r3, #7
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	3360      	adds	r3, #96	@ 0x60
 80054fa:	443b      	add	r3, r7
 80054fc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800550e:	2b00      	cmp	r3, #0
 8005510:	d012      	beq.n	8005538 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800551a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	3360      	adds	r3, #96	@ 0x60
 8005526:	443b      	add	r3, r7
 8005528:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800552c:	011a      	lsls	r2, r3, #4
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800553c:	2b00      	cmp	r3, #0
 800553e:	d012      	beq.n	8005566 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005548:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	3360      	adds	r3, #96	@ 0x60
 8005554:	443b      	add	r3, r7
 8005556:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800555a:	021a      	lsls	r2, r3, #8
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a11      	ldr	r2, [pc, #68]	@ (80055b0 <HAL_FDCAN_Init+0x3b8>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d107      	bne.n	8005580 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	689a      	ldr	r2, [r3, #8]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f022 0203 	bic.w	r2, r2, #3
 800557e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 fdf7 	bl	800618c <FDCAN_CalcultateRamBlockAddresses>
 800559e:	4603      	mov	r3, r0
 80055a0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80055a4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3760      	adds	r7, #96	@ 0x60
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	4000a000 	.word	0x4000a000

080055b4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80055c4:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d002      	beq.n	80055d2 <HAL_FDCAN_ConfigFilter+0x1e>
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d157      	bne.n	8005682 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d12b      	bne.n	8005632 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	2b07      	cmp	r3, #7
 80055e0:	d10d      	bne.n	80055fe <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	69db      	ldr	r3, [r3, #28]
 80055ec:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80055ee:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80055f4:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80055f6:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	e00e      	b.n	800561c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800560a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8005612:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005618:	4313      	orrs	r3, r2
 800561a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	4413      	add	r3, r2
 8005628:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	e025      	b.n	800567e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	075a      	lsls	r2, r3, #29
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	4313      	orrs	r3, r2
 800563e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	2b07      	cmp	r3, #7
 8005646:	d103      	bne.n	8005650 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	613b      	str	r3, [r7, #16]
 800564e:	e006      	b.n	800565e <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	079a      	lsls	r2, r3, #30
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	4313      	orrs	r3, r2
 800565c:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	4413      	add	r3, r2
 800566a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	3304      	adds	r3, #4
 8005676:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	e008      	b.n	8005694 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005688:	f043 0202 	orr.w	r2, r3, #2
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
  }
}
 8005694:	4618      	mov	r0, r3
 8005696:	371c      	adds	r7, #28
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d111      	bne.n	80056d8 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	699a      	ldr	r2, [r3, #24]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 0201 	bic.w	r2, r2, #1
 80056ca:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80056d4:	2300      	movs	r3, #0
 80056d6:	e008      	b.n	80056ea <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056de:	f043 0204 	orr.w	r2, r3, #4
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
  }
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b086      	sub	sp, #24
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	60f8      	str	r0, [r7, #12]
 80056fe:	60b9      	str	r1, [r7, #8]
 8005700:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d141      	bne.n	8005792 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005716:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d109      	bne.n	8005732 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005724:	f043 0220 	orr.w	r2, r3, #32
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e038      	b.n	80057a4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800573a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d009      	beq.n	8005756 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005748:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e026      	b.n	80057a4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800575e:	0c1b      	lsrs	r3, r3, #16
 8005760:	f003 031f 	and.w	r3, r3, #31
 8005764:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	68b9      	ldr	r1, [r7, #8]
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f000 fe93 	bl	8006498 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2101      	movs	r1, #1
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	fa01 f202 	lsl.w	r2, r1, r2
 800577e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005782:	2201      	movs	r2, #1
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	409a      	lsls	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	e008      	b.n	80057a4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005798:	f043 0208 	orr.w	r2, r3, #8
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
  }
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3718      	adds	r7, #24
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b08b      	sub	sp, #44	@ 0x2c
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
 80057b8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80057ba:	2300      	movs	r3, #0
 80057bc:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80057c4:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80057c6:	7efb      	ldrb	r3, [r7, #27]
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	f040 8149 	bne.w	8005a60 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2b40      	cmp	r3, #64	@ 0x40
 80057d2:	d14c      	bne.n	800586e <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80057dc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d109      	bne.n	80057f8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057ea:	f043 0220 	orr.w	r2, r3, #32
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e13c      	b.n	8005a72 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005800:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005804:	2b00      	cmp	r3, #0
 8005806:	d109      	bne.n	800581c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800580e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e12a      	b.n	8005a72 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005824:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005828:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800582c:	d10a      	bne.n	8005844 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005836:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800583a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800583e:	d101      	bne.n	8005844 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005840:	2301      	movs	r3, #1
 8005842:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800584c:	0a1b      	lsrs	r3, r3, #8
 800584e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	4413      	add	r3, r2
 8005856:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005860:	69f9      	ldr	r1, [r7, #28]
 8005862:	fb01 f303 	mul.w	r3, r1, r3
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	627b      	str	r3, [r7, #36]	@ 0x24
 800586c:	e068      	b.n	8005940 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	2b41      	cmp	r3, #65	@ 0x41
 8005872:	d14c      	bne.n	800590e <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800587c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d109      	bne.n	8005898 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800588a:	f043 0220 	orr.w	r2, r3, #32
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e0ec      	b.n	8005a72 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80058a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d109      	bne.n	80058bc <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e0da      	b.n	8005a72 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80058c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058cc:	d10a      	bne.n	80058e4 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80058d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058de:	d101      	bne.n	80058e4 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80058e0:	2301      	movs	r3, #1
 80058e2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80058ec:	0a1b      	lsrs	r3, r3, #8
 80058ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058f2:	69fa      	ldr	r2, [r7, #28]
 80058f4:	4413      	add	r3, r2
 80058f6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005900:	69f9      	ldr	r1, [r7, #28]
 8005902:	fb01 f303 	mul.w	r3, r1, r3
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	627b      	str	r3, [r7, #36]	@ 0x24
 800590c:	e018      	b.n	8005940 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	429a      	cmp	r2, r3
 8005916:	d309      	bcc.n	800592c <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800591e:	f043 0220 	orr.w	r2, r3, #32
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e0a2      	b.n	8005a72 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	fb01 f303 	mul.w	r3, r1, r3
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d107      	bne.n	8005964 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	0c9b      	lsrs	r3, r3, #18
 800595a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	601a      	str	r2, [r3, #0]
 8005962:	e005      	b.n	8005970 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800597c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598a:	3304      	adds	r3, #4
 800598c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800598e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	b29a      	uxth	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	0c1b      	lsrs	r3, r3, #16
 800599e:	f003 020f 	and.w	r2, r3, #15
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80059a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80059b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80059be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	0e1b      	lsrs	r3, r3, #24
 80059c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80059cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	0fda      	lsrs	r2, r3, #31
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80059d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d8:	3304      	adds	r3, #4
 80059da:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80059dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059de:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80059e0:	2300      	movs	r3, #0
 80059e2:	623b      	str	r3, [r7, #32]
 80059e4:	e00a      	b.n	80059fc <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	441a      	add	r2, r3
 80059ec:	6839      	ldr	r1, [r7, #0]
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	440b      	add	r3, r1
 80059f2:	7812      	ldrb	r2, [r2, #0]
 80059f4:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	3301      	adds	r3, #1
 80059fa:	623b      	str	r3, [r7, #32]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	4a1f      	ldr	r2, [pc, #124]	@ (8005a80 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8005a02:	5cd3      	ldrb	r3, [r2, r3]
 8005a04:	461a      	mov	r2, r3
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d3ec      	bcc.n	80059e6 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b40      	cmp	r3, #64	@ 0x40
 8005a10:	d105      	bne.n	8005a1e <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69fa      	ldr	r2, [r7, #28]
 8005a18:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8005a1c:	e01e      	b.n	8005a5c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2b41      	cmp	r3, #65	@ 0x41
 8005a22:	d105      	bne.n	8005a30 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8005a2e:	e015      	b.n	8005a5c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2b1f      	cmp	r3, #31
 8005a34:	d808      	bhi.n	8005a48 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8005a42:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8005a46:	e009      	b.n	8005a5c <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f003 021f 	and.w	r2, r3, #31
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2101      	movs	r1, #1
 8005a54:	fa01 f202 	lsl.w	r2, r1, r2
 8005a58:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	e008      	b.n	8005a72 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a66:	f043 0208 	orr.w	r2, r3, #8
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
  }
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	372c      	adds	r7, #44	@ 0x2c
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	0800d14c 	.word	0x0800d14c

08005a84 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005a96:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005a98:	7dfb      	ldrb	r3, [r7, #23]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d002      	beq.n	8005aa4 <HAL_FDCAN_ActivateNotification+0x20>
 8005a9e:	7dfb      	ldrb	r3, [r7, #23]
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d155      	bne.n	8005b50 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	4013      	ands	r3, r2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d108      	bne.n	8005ac4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f042 0201 	orr.w	r2, r2, #1
 8005ac0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ac2:	e014      	b.n	8005aee <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	4013      	ands	r3, r2
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d108      	bne.n	8005ae6 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0202 	orr.w	r2, r2, #2
 8005ae2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ae4:	e003      	b.n	8005aee <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2203      	movs	r2, #3
 8005aec:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d009      	beq.n	8005b0c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d009      	beq.n	8005b2a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	430a      	orrs	r2, r1
 8005b26:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	4b0f      	ldr	r3, [pc, #60]	@ (8005b70 <HAL_FDCAN_ActivateNotification+0xec>)
 8005b34:	4013      	ands	r3, r2
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	6812      	ldr	r2, [r2, #0]
 8005b3a:	430b      	orrs	r3, r1
 8005b3c:	6553      	str	r3, [r2, #84]	@ 0x54
 8005b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b74 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005b40:	695a      	ldr	r2, [r3, #20]
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	0f9b      	lsrs	r3, r3, #30
 8005b46:	490b      	ldr	r1, [pc, #44]	@ (8005b74 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	e008      	b.n	8005b62 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b56:	f043 0202 	orr.w	r2, r3, #2
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
  }
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	371c      	adds	r7, #28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	3fcfffff 	.word	0x3fcfffff
 8005b74:	4000a800 	.word	0x4000a800

08005b78 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b096      	sub	sp, #88	@ 0x58
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005b80:	4b9a      	ldr	r3, [pc, #616]	@ (8005dec <HAL_FDCAN_IRQHandler+0x274>)
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	079b      	lsls	r3, r3, #30
 8005b86:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005b88:	4b98      	ldr	r3, [pc, #608]	@ (8005dec <HAL_FDCAN_IRQHandler+0x274>)
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	079b      	lsls	r3, r3, #30
 8005b8e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005b90:	4013      	ands	r3, r2
 8005b92:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b9a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005b9e:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ba6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005ba8:	4013      	ands	r3, r2
 8005baa:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bb2:	f003 030f 	and.w	r3, r3, #15
 8005bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bbe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bd8:	4013      	ands	r3, r2
 8005bda:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005be2:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8005be6:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bfa:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8005bfe:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c08:	4013      	ands	r3, r2
 8005c0a:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c1a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005c1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c1e:	0a1b      	lsrs	r3, r3, #8
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d010      	beq.n	8005c4a <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c2a:	0a1b      	lsrs	r3, r3, #8
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00a      	beq.n	8005c4a <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c3c:	651a      	str	r2, [r3, #80]	@ 0x50
 8005c3e:	4b6b      	ldr	r3, [pc, #428]	@ (8005dec <HAL_FDCAN_IRQHandler+0x274>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 fa54 	bl	80060f2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c4c:	0a9b      	lsrs	r3, r3, #10
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d01d      	beq.n	8005c92 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c58:	0a9b      	lsrs	r3, r3, #10
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d017      	beq.n	8005c92 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005c6a:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c76:	4013      	ands	r3, r2
 8005c78:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005c82:	651a      	str	r2, [r3, #80]	@ 0x50
 8005c84:	4b59      	ldr	r3, [pc, #356]	@ (8005dec <HAL_FDCAN_IRQHandler+0x274>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005c8a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fa07 	bl	80060a0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00d      	beq.n	8005cb4 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c9e:	4b54      	ldr	r3, [pc, #336]	@ (8005df0 <HAL_FDCAN_IRQHandler+0x278>)
 8005ca0:	400b      	ands	r3, r1
 8005ca2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ca4:	4a51      	ldr	r2, [pc, #324]	@ (8005dec <HAL_FDCAN_IRQHandler+0x274>)
 8005ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ca8:	0f9b      	lsrs	r3, r3, #30
 8005caa:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005cac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f9c0 	bl	8006034 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005cb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00d      	beq.n	8005cd6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005cc0:	4b4b      	ldr	r3, [pc, #300]	@ (8005df0 <HAL_FDCAN_IRQHandler+0x278>)
 8005cc2:	400b      	ands	r3, r1
 8005cc4:	6513      	str	r3, [r2, #80]	@ 0x50
 8005cc6:	4a49      	ldr	r2, [pc, #292]	@ (8005dec <HAL_FDCAN_IRQHandler+0x274>)
 8005cc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cca:	0f9b      	lsrs	r3, r3, #30
 8005ccc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005cce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f9ba 	bl	800604a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005cd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00d      	beq.n	8005cf8 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005ce2:	4b43      	ldr	r3, [pc, #268]	@ (8005df0 <HAL_FDCAN_IRQHandler+0x278>)
 8005ce4:	400b      	ands	r3, r1
 8005ce6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ce8:	4a40      	ldr	r2, [pc, #256]	@ (8005dec <HAL_FDCAN_IRQHandler+0x274>)
 8005cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cec:	0f9b      	lsrs	r3, r3, #30
 8005cee:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005cf0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7fc f8e4 	bl	8001ec0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005cf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00d      	beq.n	8005d1a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005d04:	4b3a      	ldr	r3, [pc, #232]	@ (8005df0 <HAL_FDCAN_IRQHandler+0x278>)
 8005d06:	400b      	ands	r3, r1
 8005d08:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d0a:	4a38      	ldr	r2, [pc, #224]	@ (8005dec <HAL_FDCAN_IRQHandler+0x274>)
 8005d0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d0e:	0f9b      	lsrs	r3, r3, #30
 8005d10:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005d12:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f9a3 	bl	8006060 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d1c:	0adb      	lsrs	r3, r3, #11
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d010      	beq.n	8005d48 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d28:	0adb      	lsrs	r3, r3, #11
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00a      	beq.n	8005d48 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d3a:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8005dec <HAL_FDCAN_IRQHandler+0x274>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f997 	bl	8006076 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8005d48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d4a:	0a5b      	lsrs	r3, r3, #9
 8005d4c:	f003 0301 	and.w	r3, r3, #1
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d01d      	beq.n	8005d90 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d56:	0a5b      	lsrs	r3, r3, #9
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d017      	beq.n	8005d90 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005d68:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d74:	4013      	ands	r3, r2
 8005d76:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d80:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d82:	4b1a      	ldr	r3, [pc, #104]	@ (8005dec <HAL_FDCAN_IRQHandler+0x274>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005d88:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f97d 	bl	800608a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005d90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d92:	0cdb      	lsrs	r3, r3, #19
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d010      	beq.n	8005dbe <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d9e:	0cdb      	lsrs	r3, r3, #19
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00a      	beq.n	8005dbe <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005db0:	651a      	str	r2, [r3, #80]	@ 0x50
 8005db2:	4b0e      	ldr	r3, [pc, #56]	@ (8005dec <HAL_FDCAN_IRQHandler+0x274>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f97c 	bl	80060b6 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dc0:	0c1b      	lsrs	r3, r3, #16
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d016      	beq.n	8005df8 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dcc:	0c1b      	lsrs	r3, r3, #16
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d010      	beq.n	8005df8 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005dde:	651a      	str	r2, [r3, #80]	@ 0x50
 8005de0:	4b02      	ldr	r3, [pc, #8]	@ (8005dec <HAL_FDCAN_IRQHandler+0x274>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	e004      	b.n	8005df4 <HAL_FDCAN_IRQHandler+0x27c>
 8005dea:	bf00      	nop
 8005dec:	4000a800 	.word	0x4000a800
 8005df0:	3fcfffff 	.word	0x3fcfffff
 8005df4:	f000 f969 	bl	80060ca <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005df8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dfa:	0c9b      	lsrs	r3, r3, #18
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d010      	beq.n	8005e26 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e06:	0c9b      	lsrs	r3, r3, #18
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00a      	beq.n	8005e26 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005e18:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e1a:	4b83      	ldr	r3, [pc, #524]	@ (8006028 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 f95c 	bl	80060de <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e28:	0c5b      	lsrs	r3, r3, #17
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d015      	beq.n	8005e5e <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e34:	0c5b      	lsrs	r3, r3, #17
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00f      	beq.n	8005e5e <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005e46:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e48:	4b77      	ldr	r3, [pc, #476]	@ (8006028 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e54:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00d      	beq.n	8005e80 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e6a:	4b70      	ldr	r3, [pc, #448]	@ (800602c <HAL_FDCAN_IRQHandler+0x4b4>)
 8005e6c:	400b      	ands	r3, r1
 8005e6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e70:	4a6d      	ldr	r2, [pc, #436]	@ (8006028 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e74:	0f9b      	lsrs	r3, r3, #30
 8005e76:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005e78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f94d 	bl	800611a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005e80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d011      	beq.n	8005eaa <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005e8c:	4b67      	ldr	r3, [pc, #412]	@ (800602c <HAL_FDCAN_IRQHandler+0x4b4>)
 8005e8e:	400b      	ands	r3, r1
 8005e90:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e92:	4a65      	ldr	r2, [pc, #404]	@ (8006028 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005e94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e96:	0f9b      	lsrs	r3, r3, #30
 8005e98:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005ea0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a60      	ldr	r2, [pc, #384]	@ (8006030 <HAL_FDCAN_IRQHandler+0x4b8>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	f040 80ac 	bne.w	800600e <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f003 0303 	and.w	r3, r3, #3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 80a4 	beq.w	800600e <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	f003 030f 	and.w	r3, r3, #15
 8005ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005eda:	4013      	ands	r3, r2
 8005edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005f00:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8005f18:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f20:	6a3a      	ldr	r2, [r7, #32]
 8005f22:	4013      	ands	r3, r2
 8005f24:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
 8005f2c:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8005f30:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f38:	69fa      	ldr	r2, [r7, #28]
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f44:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d007      	beq.n	8005f64 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f5a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005f5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f8e6 	bl	8006130 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d007      	beq.n	8005f7a <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f70:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005f72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f8e6 	bl	8006146 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	099b      	lsrs	r3, r3, #6
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d01a      	beq.n	8005fbc <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	099b      	lsrs	r3, r3, #6
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d014      	beq.n	8005fbc <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f98:	0c1b      	lsrs	r3, r3, #16
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fa8:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	2240      	movs	r2, #64	@ 0x40
 8005fb0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	6939      	ldr	r1, [r7, #16]
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f8d0 	bl	800615c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d007      	beq.n	8005fd2 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fc8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005fca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f8d1 	bl	8006174 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00b      	beq.n	8005ff0 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	6a3a      	ldr	r2, [r7, #32]
 8005fde:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	431a      	orrs	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00b      	beq.n	800600e <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	69fa      	ldr	r2, [r7, #28]
 8005ffc:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	431a      	orrs	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006014:	2b00      	cmp	r3, #0
 8006016:	d002      	beq.n	800601e <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 f874 	bl	8006106 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800601e:	bf00      	nop
 8006020:	3758      	adds	r7, #88	@ 0x58
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	4000a800 	.word	0x4000a800
 800602c:	3fcfffff 	.word	0x3fcfffff
 8006030:	4000a000 	.word	0x4000a000

08006034 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800603e:	bf00      	nop
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800604a:	b480      	push	{r7}
 800604c:	b083      	sub	sp, #12
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800606a:	bf00      	nop
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006076:	b480      	push	{r7}
 8006078:	b083      	sub	sp, #12
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800607e:	bf00      	nop
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800608a:	b480      	push	{r7}
 800608c:	b083      	sub	sp, #12
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80060aa:	bf00      	nop
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80060be:	bf00      	nop
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b083      	sub	sp, #12
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80060d2:	bf00      	nop
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b083      	sub	sp, #12
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80060fa:	bf00      	nop
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006106:	b480      	push	{r7}
 8006108:	b083      	sub	sp, #12
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800610e:	bf00      	nop
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800611a:	b480      	push	{r7}
 800611c:	b083      	sub	sp, #12
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
 8006122:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800613a:	bf00      	nop
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
 800614e:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8006168:	bf00      	nop
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800617e:	bf00      	nop
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
	...

0800618c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006198:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80061a2:	4ba7      	ldr	r3, [pc, #668]	@ (8006440 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80061a4:	4013      	ands	r3, r2
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	0091      	lsls	r1, r2, #2
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	6812      	ldr	r2, [r2, #0]
 80061ae:	430b      	orrs	r3, r1
 80061b0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061bc:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c4:	041a      	lsls	r2, r3, #16
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	4413      	add	r3, r2
 80061d8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80061e2:	4b97      	ldr	r3, [pc, #604]	@ (8006440 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80061e4:	4013      	ands	r3, r2
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	0091      	lsls	r1, r2, #2
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	6812      	ldr	r2, [r2, #0]
 80061ee:	430b      	orrs	r3, r1
 80061f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061fc:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006204:	041a      	lsls	r2, r3, #16
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006214:	005b      	lsls	r3, r3, #1
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	4413      	add	r3, r2
 800621a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006224:	4b86      	ldr	r3, [pc, #536]	@ (8006440 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006226:	4013      	ands	r3, r2
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	0091      	lsls	r1, r2, #2
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	6812      	ldr	r2, [r2, #0]
 8006230:	430b      	orrs	r3, r1
 8006232:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800623e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006246:	041a      	lsls	r2, r3, #16
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800625a:	fb02 f303 	mul.w	r3, r2, r3
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	4413      	add	r3, r2
 8006262:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800626c:	4b74      	ldr	r3, [pc, #464]	@ (8006440 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800626e:	4013      	ands	r3, r2
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	0091      	lsls	r1, r2, #2
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	6812      	ldr	r2, [r2, #0]
 8006278:	430b      	orrs	r3, r1
 800627a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006286:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800628e:	041a      	lsls	r2, r3, #16
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80062a2:	fb02 f303 	mul.w	r3, r2, r3
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	4413      	add	r3, r2
 80062aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80062b4:	4b62      	ldr	r3, [pc, #392]	@ (8006440 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80062b6:	4013      	ands	r3, r2
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	0091      	lsls	r1, r2, #2
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	6812      	ldr	r2, [r2, #0]
 80062c0:	430b      	orrs	r3, r1
 80062c2:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80062ce:	fb02 f303 	mul.w	r3, r2, r3
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	4413      	add	r3, r2
 80062d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80062e0:	4b57      	ldr	r3, [pc, #348]	@ (8006440 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80062e2:	4013      	ands	r3, r2
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	0091      	lsls	r1, r2, #2
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	6812      	ldr	r2, [r2, #0]
 80062ec:	430b      	orrs	r3, r1
 80062ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062fa:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006302:	041a      	lsls	r2, r3, #16
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	430a      	orrs	r2, r1
 800630a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	4413      	add	r3, r2
 8006318:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8006322:	4b47      	ldr	r3, [pc, #284]	@ (8006440 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006324:	4013      	ands	r3, r2
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	0091      	lsls	r1, r2, #2
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	6812      	ldr	r2, [r2, #0]
 800632e:	430b      	orrs	r3, r1
 8006330:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800633c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006344:	041a      	lsls	r2, r3, #16
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006358:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006360:	061a      	lsls	r2, r3, #24
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006370:	4b34      	ldr	r3, [pc, #208]	@ (8006444 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006372:	4413      	add	r3, r2
 8006374:	009a      	lsls	r2, r3, #2
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	441a      	add	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006392:	00db      	lsls	r3, r3, #3
 8006394:	441a      	add	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a2:	6879      	ldr	r1, [r7, #4]
 80063a4:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80063a6:	fb01 f303 	mul.w	r3, r1, r3
 80063aa:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80063ac:	441a      	add	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063ba:	6879      	ldr	r1, [r7, #4]
 80063bc:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80063be:	fb01 f303 	mul.w	r3, r1, r3
 80063c2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80063c4:	441a      	add	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80063d6:	fb01 f303 	mul.w	r3, r1, r3
 80063da:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80063dc:	441a      	add	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ee:	00db      	lsls	r3, r3, #3
 80063f0:	441a      	add	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006402:	6879      	ldr	r1, [r7, #4]
 8006404:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8006406:	fb01 f303 	mul.w	r3, r1, r3
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	441a      	add	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800641e:	6879      	ldr	r1, [r7, #4]
 8006420:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8006422:	fb01 f303 	mul.w	r3, r1, r3
 8006426:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006428:	441a      	add	r2, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006436:	4a04      	ldr	r2, [pc, #16]	@ (8006448 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d915      	bls.n	8006468 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800643c:	e006      	b.n	800644c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800643e:	bf00      	nop
 8006440:	ffff0003 	.word	0xffff0003
 8006444:	10002b00 	.word	0x10002b00
 8006448:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006452:	f043 0220 	orr.w	r2, r3, #32
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2203      	movs	r2, #3
 8006460:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e010      	b.n	800648a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800646c:	60fb      	str	r3, [r7, #12]
 800646e:	e005      	b.n	800647c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	3304      	adds	r3, #4
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	429a      	cmp	r2, r3
 8006486:	d3f3      	bcc.n	8006470 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop

08006498 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8006498:	b480      	push	{r7}
 800649a:	b089      	sub	sp, #36	@ 0x24
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
 80064a4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10a      	bne.n	80064c4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80064b6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80064be:	4313      	orrs	r3, r2
 80064c0:	61fb      	str	r3, [r7, #28]
 80064c2:	e00a      	b.n	80064da <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80064cc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80064d2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80064d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80064d8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80064e4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80064ea:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80064f0:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80064f8:	4313      	orrs	r3, r2
 80064fa:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006506:	6839      	ldr	r1, [r7, #0]
 8006508:	fb01 f303 	mul.w	r3, r1, r3
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	69fa      	ldr	r2, [r7, #28]
 8006516:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	3304      	adds	r3, #4
 800651c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	3304      	adds	r3, #4
 8006528:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800652a:	2300      	movs	r3, #0
 800652c:	617b      	str	r3, [r7, #20]
 800652e:	e020      	b.n	8006572 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	3303      	adds	r3, #3
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	4413      	add	r3, r2
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	3302      	adds	r3, #2
 8006540:	6879      	ldr	r1, [r7, #4]
 8006542:	440b      	add	r3, r1
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006548:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	3301      	adds	r3, #1
 800654e:	6879      	ldr	r1, [r7, #4]
 8006550:	440b      	add	r3, r1
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006556:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006558:	6879      	ldr	r1, [r7, #4]
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	440a      	add	r2, r1
 800655e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006560:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	3304      	adds	r3, #4
 800656a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	3304      	adds	r3, #4
 8006570:	617b      	str	r3, [r7, #20]
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	4a06      	ldr	r2, [pc, #24]	@ (8006590 <FDCAN_CopyMessageToRAM+0xf8>)
 8006578:	5cd3      	ldrb	r3, [r2, r3]
 800657a:	461a      	mov	r2, r3
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	4293      	cmp	r3, r2
 8006580:	d3d6      	bcc.n	8006530 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8006582:	bf00      	nop
 8006584:	bf00      	nop
 8006586:	3724      	adds	r7, #36	@ 0x24
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	0800d14c 	.word	0x0800d14c

08006594 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006594:	b480      	push	{r7}
 8006596:	b089      	sub	sp, #36	@ 0x24
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800659e:	2300      	movs	r3, #0
 80065a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80065a2:	4b86      	ldr	r3, [pc, #536]	@ (80067bc <HAL_GPIO_Init+0x228>)
 80065a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80065a6:	e18c      	b.n	80068c2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	2101      	movs	r1, #1
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	fa01 f303 	lsl.w	r3, r1, r3
 80065b4:	4013      	ands	r3, r2
 80065b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f000 817e 	beq.w	80068bc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f003 0303 	and.w	r3, r3, #3
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d005      	beq.n	80065d8 <HAL_GPIO_Init+0x44>
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f003 0303 	and.w	r3, r3, #3
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d130      	bne.n	800663a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	2203      	movs	r2, #3
 80065e4:	fa02 f303 	lsl.w	r3, r2, r3
 80065e8:	43db      	mvns	r3, r3
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	4013      	ands	r3, r2
 80065ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	68da      	ldr	r2, [r3, #12]
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	fa02 f303 	lsl.w	r3, r2, r3
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	4313      	orrs	r3, r2
 8006600:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	69ba      	ldr	r2, [r7, #24]
 8006606:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800660e:	2201      	movs	r2, #1
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	fa02 f303 	lsl.w	r3, r2, r3
 8006616:	43db      	mvns	r3, r3
 8006618:	69ba      	ldr	r2, [r7, #24]
 800661a:	4013      	ands	r3, r2
 800661c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	091b      	lsrs	r3, r3, #4
 8006624:	f003 0201 	and.w	r2, r3, #1
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	fa02 f303 	lsl.w	r3, r2, r3
 800662e:	69ba      	ldr	r2, [r7, #24]
 8006630:	4313      	orrs	r3, r2
 8006632:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f003 0303 	and.w	r3, r3, #3
 8006642:	2b03      	cmp	r3, #3
 8006644:	d017      	beq.n	8006676 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	005b      	lsls	r3, r3, #1
 8006650:	2203      	movs	r2, #3
 8006652:	fa02 f303 	lsl.w	r3, r2, r3
 8006656:	43db      	mvns	r3, r3
 8006658:	69ba      	ldr	r2, [r7, #24]
 800665a:	4013      	ands	r3, r2
 800665c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	689a      	ldr	r2, [r3, #8]
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	005b      	lsls	r3, r3, #1
 8006666:	fa02 f303 	lsl.w	r3, r2, r3
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	4313      	orrs	r3, r2
 800666e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	69ba      	ldr	r2, [r7, #24]
 8006674:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f003 0303 	and.w	r3, r3, #3
 800667e:	2b02      	cmp	r3, #2
 8006680:	d123      	bne.n	80066ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	08da      	lsrs	r2, r3, #3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	3208      	adds	r2, #8
 800668a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800668e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	f003 0307 	and.w	r3, r3, #7
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	220f      	movs	r2, #15
 800669a:	fa02 f303 	lsl.w	r3, r2, r3
 800669e:	43db      	mvns	r3, r3
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	4013      	ands	r3, r2
 80066a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	691a      	ldr	r2, [r3, #16]
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	f003 0307 	and.w	r3, r3, #7
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	fa02 f303 	lsl.w	r3, r2, r3
 80066b6:	69ba      	ldr	r2, [r7, #24]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	08da      	lsrs	r2, r3, #3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	3208      	adds	r2, #8
 80066c4:	69b9      	ldr	r1, [r7, #24]
 80066c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	2203      	movs	r2, #3
 80066d6:	fa02 f303 	lsl.w	r3, r2, r3
 80066da:	43db      	mvns	r3, r3
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	4013      	ands	r3, r2
 80066e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f003 0203 	and.w	r2, r3, #3
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	005b      	lsls	r3, r3, #1
 80066ee:	fa02 f303 	lsl.w	r3, r2, r3
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	69ba      	ldr	r2, [r7, #24]
 80066fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006706:	2b00      	cmp	r3, #0
 8006708:	f000 80d8 	beq.w	80068bc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800670c:	4b2c      	ldr	r3, [pc, #176]	@ (80067c0 <HAL_GPIO_Init+0x22c>)
 800670e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006712:	4a2b      	ldr	r2, [pc, #172]	@ (80067c0 <HAL_GPIO_Init+0x22c>)
 8006714:	f043 0302 	orr.w	r3, r3, #2
 8006718:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800671c:	4b28      	ldr	r3, [pc, #160]	@ (80067c0 <HAL_GPIO_Init+0x22c>)
 800671e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	60fb      	str	r3, [r7, #12]
 8006728:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800672a:	4a26      	ldr	r2, [pc, #152]	@ (80067c4 <HAL_GPIO_Init+0x230>)
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	089b      	lsrs	r3, r3, #2
 8006730:	3302      	adds	r3, #2
 8006732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006736:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	f003 0303 	and.w	r3, r3, #3
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	220f      	movs	r2, #15
 8006742:	fa02 f303 	lsl.w	r3, r2, r3
 8006746:	43db      	mvns	r3, r3
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	4013      	ands	r3, r2
 800674c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a1d      	ldr	r2, [pc, #116]	@ (80067c8 <HAL_GPIO_Init+0x234>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d04a      	beq.n	80067ec <HAL_GPIO_Init+0x258>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a1c      	ldr	r2, [pc, #112]	@ (80067cc <HAL_GPIO_Init+0x238>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d02b      	beq.n	80067b6 <HAL_GPIO_Init+0x222>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a1b      	ldr	r2, [pc, #108]	@ (80067d0 <HAL_GPIO_Init+0x23c>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d025      	beq.n	80067b2 <HAL_GPIO_Init+0x21e>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a1a      	ldr	r2, [pc, #104]	@ (80067d4 <HAL_GPIO_Init+0x240>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d01f      	beq.n	80067ae <HAL_GPIO_Init+0x21a>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a19      	ldr	r2, [pc, #100]	@ (80067d8 <HAL_GPIO_Init+0x244>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d019      	beq.n	80067aa <HAL_GPIO_Init+0x216>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a18      	ldr	r2, [pc, #96]	@ (80067dc <HAL_GPIO_Init+0x248>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d013      	beq.n	80067a6 <HAL_GPIO_Init+0x212>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a17      	ldr	r2, [pc, #92]	@ (80067e0 <HAL_GPIO_Init+0x24c>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d00d      	beq.n	80067a2 <HAL_GPIO_Init+0x20e>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a16      	ldr	r2, [pc, #88]	@ (80067e4 <HAL_GPIO_Init+0x250>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d007      	beq.n	800679e <HAL_GPIO_Init+0x20a>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a15      	ldr	r2, [pc, #84]	@ (80067e8 <HAL_GPIO_Init+0x254>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d101      	bne.n	800679a <HAL_GPIO_Init+0x206>
 8006796:	2309      	movs	r3, #9
 8006798:	e029      	b.n	80067ee <HAL_GPIO_Init+0x25a>
 800679a:	230a      	movs	r3, #10
 800679c:	e027      	b.n	80067ee <HAL_GPIO_Init+0x25a>
 800679e:	2307      	movs	r3, #7
 80067a0:	e025      	b.n	80067ee <HAL_GPIO_Init+0x25a>
 80067a2:	2306      	movs	r3, #6
 80067a4:	e023      	b.n	80067ee <HAL_GPIO_Init+0x25a>
 80067a6:	2305      	movs	r3, #5
 80067a8:	e021      	b.n	80067ee <HAL_GPIO_Init+0x25a>
 80067aa:	2304      	movs	r3, #4
 80067ac:	e01f      	b.n	80067ee <HAL_GPIO_Init+0x25a>
 80067ae:	2303      	movs	r3, #3
 80067b0:	e01d      	b.n	80067ee <HAL_GPIO_Init+0x25a>
 80067b2:	2302      	movs	r3, #2
 80067b4:	e01b      	b.n	80067ee <HAL_GPIO_Init+0x25a>
 80067b6:	2301      	movs	r3, #1
 80067b8:	e019      	b.n	80067ee <HAL_GPIO_Init+0x25a>
 80067ba:	bf00      	nop
 80067bc:	58000080 	.word	0x58000080
 80067c0:	58024400 	.word	0x58024400
 80067c4:	58000400 	.word	0x58000400
 80067c8:	58020000 	.word	0x58020000
 80067cc:	58020400 	.word	0x58020400
 80067d0:	58020800 	.word	0x58020800
 80067d4:	58020c00 	.word	0x58020c00
 80067d8:	58021000 	.word	0x58021000
 80067dc:	58021400 	.word	0x58021400
 80067e0:	58021800 	.word	0x58021800
 80067e4:	58021c00 	.word	0x58021c00
 80067e8:	58022400 	.word	0x58022400
 80067ec:	2300      	movs	r3, #0
 80067ee:	69fa      	ldr	r2, [r7, #28]
 80067f0:	f002 0203 	and.w	r2, r2, #3
 80067f4:	0092      	lsls	r2, r2, #2
 80067f6:	4093      	lsls	r3, r2
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80067fe:	4938      	ldr	r1, [pc, #224]	@ (80068e0 <HAL_GPIO_Init+0x34c>)
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	089b      	lsrs	r3, r3, #2
 8006804:	3302      	adds	r3, #2
 8006806:	69ba      	ldr	r2, [r7, #24]
 8006808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800680c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	43db      	mvns	r3, r3
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	4013      	ands	r3, r2
 800681c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800682a:	69ba      	ldr	r2, [r7, #24]
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	4313      	orrs	r3, r2
 8006830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006832:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800683a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	43db      	mvns	r3, r3
 8006846:	69ba      	ldr	r2, [r7, #24]
 8006848:	4013      	ands	r3, r2
 800684a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d003      	beq.n	8006860 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	4313      	orrs	r3, r2
 800685e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006860:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	43db      	mvns	r3, r3
 8006872:	69ba      	ldr	r2, [r7, #24]
 8006874:	4013      	ands	r3, r2
 8006876:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d003      	beq.n	800688c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006884:	69ba      	ldr	r2, [r7, #24]
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	4313      	orrs	r3, r2
 800688a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	69ba      	ldr	r2, [r7, #24]
 8006890:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	43db      	mvns	r3, r3
 800689c:	69ba      	ldr	r2, [r7, #24]
 800689e:	4013      	ands	r3, r2
 80068a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80068ae:	69ba      	ldr	r2, [r7, #24]
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	3301      	adds	r3, #1
 80068c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	fa22 f303 	lsr.w	r3, r2, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f47f ae6b 	bne.w	80065a8 <HAL_GPIO_Init+0x14>
  }
}
 80068d2:	bf00      	nop
 80068d4:	bf00      	nop
 80068d6:	3724      	adds	r7, #36	@ 0x24
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr
 80068e0:	58000400 	.word	0x58000400

080068e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	460b      	mov	r3, r1
 80068ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	691a      	ldr	r2, [r3, #16]
 80068f4:	887b      	ldrh	r3, [r7, #2]
 80068f6:	4013      	ands	r3, r2
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d002      	beq.n	8006902 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80068fc:	2301      	movs	r3, #1
 80068fe:	73fb      	strb	r3, [r7, #15]
 8006900:	e001      	b.n	8006906 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006902:	2300      	movs	r3, #0
 8006904:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006906:	7bfb      	ldrb	r3, [r7, #15]
}
 8006908:	4618      	mov	r0, r3
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	460b      	mov	r3, r1
 800691e:	807b      	strh	r3, [r7, #2]
 8006920:	4613      	mov	r3, r2
 8006922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006924:	787b      	ldrb	r3, [r7, #1]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d003      	beq.n	8006932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800692a:	887a      	ldrh	r2, [r7, #2]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006930:	e003      	b.n	800693a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006932:	887b      	ldrh	r3, [r7, #2]
 8006934:	041a      	lsls	r2, r3, #16
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	619a      	str	r2, [r3, #24]
}
 800693a:	bf00      	nop
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
	...

08006948 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006950:	4b19      	ldr	r3, [pc, #100]	@ (80069b8 <HAL_PWREx_ConfigSupply+0x70>)
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	f003 0304 	and.w	r3, r3, #4
 8006958:	2b04      	cmp	r3, #4
 800695a:	d00a      	beq.n	8006972 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800695c:	4b16      	ldr	r3, [pc, #88]	@ (80069b8 <HAL_PWREx_ConfigSupply+0x70>)
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	f003 0307 	and.w	r3, r3, #7
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	429a      	cmp	r2, r3
 8006968:	d001      	beq.n	800696e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e01f      	b.n	80069ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800696e:	2300      	movs	r3, #0
 8006970:	e01d      	b.n	80069ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006972:	4b11      	ldr	r3, [pc, #68]	@ (80069b8 <HAL_PWREx_ConfigSupply+0x70>)
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	f023 0207 	bic.w	r2, r3, #7
 800697a:	490f      	ldr	r1, [pc, #60]	@ (80069b8 <HAL_PWREx_ConfigSupply+0x70>)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4313      	orrs	r3, r2
 8006980:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006982:	f7fc fb5b 	bl	800303c <HAL_GetTick>
 8006986:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006988:	e009      	b.n	800699e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800698a:	f7fc fb57 	bl	800303c <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006998:	d901      	bls.n	800699e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e007      	b.n	80069ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800699e:	4b06      	ldr	r3, [pc, #24]	@ (80069b8 <HAL_PWREx_ConfigSupply+0x70>)
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069aa:	d1ee      	bne.n	800698a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	58024800 	.word	0x58024800

080069bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08c      	sub	sp, #48	@ 0x30
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e3c8      	b.n	8007160 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f000 8087 	beq.w	8006aea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069dc:	4b88      	ldr	r3, [pc, #544]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80069e6:	4b86      	ldr	r3, [pc, #536]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 80069e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80069ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ee:	2b10      	cmp	r3, #16
 80069f0:	d007      	beq.n	8006a02 <HAL_RCC_OscConfig+0x46>
 80069f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f4:	2b18      	cmp	r3, #24
 80069f6:	d110      	bne.n	8006a1a <HAL_RCC_OscConfig+0x5e>
 80069f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069fa:	f003 0303 	and.w	r3, r3, #3
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d10b      	bne.n	8006a1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a02:	4b7f      	ldr	r3, [pc, #508]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d06c      	beq.n	8006ae8 <HAL_RCC_OscConfig+0x12c>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d168      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e3a2      	b.n	8007160 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a22:	d106      	bne.n	8006a32 <HAL_RCC_OscConfig+0x76>
 8006a24:	4b76      	ldr	r3, [pc, #472]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a75      	ldr	r2, [pc, #468]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006a2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a2e:	6013      	str	r3, [r2, #0]
 8006a30:	e02e      	b.n	8006a90 <HAL_RCC_OscConfig+0xd4>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10c      	bne.n	8006a54 <HAL_RCC_OscConfig+0x98>
 8006a3a:	4b71      	ldr	r3, [pc, #452]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a70      	ldr	r2, [pc, #448]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006a40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a44:	6013      	str	r3, [r2, #0]
 8006a46:	4b6e      	ldr	r3, [pc, #440]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a6d      	ldr	r2, [pc, #436]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006a4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a50:	6013      	str	r3, [r2, #0]
 8006a52:	e01d      	b.n	8006a90 <HAL_RCC_OscConfig+0xd4>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a5c:	d10c      	bne.n	8006a78 <HAL_RCC_OscConfig+0xbc>
 8006a5e:	4b68      	ldr	r3, [pc, #416]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a67      	ldr	r2, [pc, #412]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006a64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a68:	6013      	str	r3, [r2, #0]
 8006a6a:	4b65      	ldr	r3, [pc, #404]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a64      	ldr	r2, [pc, #400]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006a70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a74:	6013      	str	r3, [r2, #0]
 8006a76:	e00b      	b.n	8006a90 <HAL_RCC_OscConfig+0xd4>
 8006a78:	4b61      	ldr	r3, [pc, #388]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a60      	ldr	r2, [pc, #384]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006a7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a82:	6013      	str	r3, [r2, #0]
 8006a84:	4b5e      	ldr	r3, [pc, #376]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a5d      	ldr	r2, [pc, #372]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006a8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d013      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a98:	f7fc fad0 	bl	800303c <HAL_GetTick>
 8006a9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a9e:	e008      	b.n	8006ab2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006aa0:	f7fc facc 	bl	800303c <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	2b64      	cmp	r3, #100	@ 0x64
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e356      	b.n	8007160 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ab2:	4b53      	ldr	r3, [pc, #332]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d0f0      	beq.n	8006aa0 <HAL_RCC_OscConfig+0xe4>
 8006abe:	e014      	b.n	8006aea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac0:	f7fc fabc 	bl	800303c <HAL_GetTick>
 8006ac4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ac6:	e008      	b.n	8006ada <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ac8:	f7fc fab8 	bl	800303c <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	2b64      	cmp	r3, #100	@ 0x64
 8006ad4:	d901      	bls.n	8006ada <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e342      	b.n	8007160 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ada:	4b49      	ldr	r3, [pc, #292]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1f0      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x10c>
 8006ae6:	e000      	b.n	8006aea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 808c 	beq.w	8006c10 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006af8:	4b41      	ldr	r3, [pc, #260]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b00:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b02:	4b3f      	ldr	r3, [pc, #252]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b06:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d007      	beq.n	8006b1e <HAL_RCC_OscConfig+0x162>
 8006b0e:	6a3b      	ldr	r3, [r7, #32]
 8006b10:	2b18      	cmp	r3, #24
 8006b12:	d137      	bne.n	8006b84 <HAL_RCC_OscConfig+0x1c8>
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	f003 0303 	and.w	r3, r3, #3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d132      	bne.n	8006b84 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b1e:	4b38      	ldr	r3, [pc, #224]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0304 	and.w	r3, r3, #4
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d005      	beq.n	8006b36 <HAL_RCC_OscConfig+0x17a>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e314      	b.n	8007160 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b36:	4b32      	ldr	r3, [pc, #200]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f023 0219 	bic.w	r2, r3, #25
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	492f      	ldr	r1, [pc, #188]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b48:	f7fc fa78 	bl	800303c <HAL_GetTick>
 8006b4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b4e:	e008      	b.n	8006b62 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b50:	f7fc fa74 	bl	800303c <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e2fe      	b.n	8007160 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b62:	4b27      	ldr	r3, [pc, #156]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0304 	and.w	r3, r3, #4
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d0f0      	beq.n	8006b50 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b6e:	4b24      	ldr	r3, [pc, #144]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	061b      	lsls	r3, r3, #24
 8006b7c:	4920      	ldr	r1, [pc, #128]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b82:	e045      	b.n	8006c10 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d026      	beq.n	8006bda <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f023 0219 	bic.w	r2, r3, #25
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	4919      	ldr	r1, [pc, #100]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b9e:	f7fc fa4d 	bl	800303c <HAL_GetTick>
 8006ba2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ba4:	e008      	b.n	8006bb8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ba6:	f7fc fa49 	bl	800303c <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d901      	bls.n	8006bb8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e2d3      	b.n	8007160 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bb8:	4b11      	ldr	r3, [pc, #68]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0304 	and.w	r3, r3, #4
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d0f0      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	061b      	lsls	r3, r3, #24
 8006bd2:	490b      	ldr	r1, [pc, #44]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	604b      	str	r3, [r1, #4]
 8006bd8:	e01a      	b.n	8006c10 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bda:	4b09      	ldr	r3, [pc, #36]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a08      	ldr	r2, [pc, #32]	@ (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006be0:	f023 0301 	bic.w	r3, r3, #1
 8006be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be6:	f7fc fa29 	bl	800303c <HAL_GetTick>
 8006bea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006bec:	e00a      	b.n	8006c04 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bee:	f7fc fa25 	bl	800303c <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d903      	bls.n	8006c04 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e2af      	b.n	8007160 <HAL_RCC_OscConfig+0x7a4>
 8006c00:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c04:	4b96      	ldr	r3, [pc, #600]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0304 	and.w	r3, r3, #4
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1ee      	bne.n	8006bee <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0310 	and.w	r3, r3, #16
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d06a      	beq.n	8006cf2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c1c:	4b90      	ldr	r3, [pc, #576]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c24:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c26:	4b8e      	ldr	r3, [pc, #568]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c2a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	2b08      	cmp	r3, #8
 8006c30:	d007      	beq.n	8006c42 <HAL_RCC_OscConfig+0x286>
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	2b18      	cmp	r3, #24
 8006c36:	d11b      	bne.n	8006c70 <HAL_RCC_OscConfig+0x2b4>
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f003 0303 	and.w	r3, r3, #3
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d116      	bne.n	8006c70 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c42:	4b87      	ldr	r3, [pc, #540]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d005      	beq.n	8006c5a <HAL_RCC_OscConfig+0x29e>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	2b80      	cmp	r3, #128	@ 0x80
 8006c54:	d001      	beq.n	8006c5a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e282      	b.n	8007160 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c5a:	4b81      	ldr	r3, [pc, #516]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	061b      	lsls	r3, r3, #24
 8006c68:	497d      	ldr	r1, [pc, #500]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c6e:	e040      	b.n	8006cf2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d023      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006c78:	4b79      	ldr	r3, [pc, #484]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a78      	ldr	r2, [pc, #480]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c84:	f7fc f9da 	bl	800303c <HAL_GetTick>
 8006c88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c8a:	e008      	b.n	8006c9e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006c8c:	f7fc f9d6 	bl	800303c <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d901      	bls.n	8006c9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e260      	b.n	8007160 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c9e:	4b70      	ldr	r3, [pc, #448]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d0f0      	beq.n	8006c8c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006caa:	4b6d      	ldr	r3, [pc, #436]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	061b      	lsls	r3, r3, #24
 8006cb8:	4969      	ldr	r1, [pc, #420]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	60cb      	str	r3, [r1, #12]
 8006cbe:	e018      	b.n	8006cf2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006cc0:	4b67      	ldr	r3, [pc, #412]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a66      	ldr	r2, [pc, #408]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006cc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ccc:	f7fc f9b6 	bl	800303c <HAL_GetTick>
 8006cd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006cd2:	e008      	b.n	8006ce6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006cd4:	f7fc f9b2 	bl	800303c <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d901      	bls.n	8006ce6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e23c      	b.n	8007160 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ce6:	4b5e      	ldr	r3, [pc, #376]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1f0      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0308 	and.w	r3, r3, #8
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d036      	beq.n	8006d6c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d019      	beq.n	8006d3a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d06:	4b56      	ldr	r3, [pc, #344]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006d08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d0a:	4a55      	ldr	r2, [pc, #340]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006d0c:	f043 0301 	orr.w	r3, r3, #1
 8006d10:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d12:	f7fc f993 	bl	800303c <HAL_GetTick>
 8006d16:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d18:	e008      	b.n	8006d2c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d1a:	f7fc f98f 	bl	800303c <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d901      	bls.n	8006d2c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e219      	b.n	8007160 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d2c:	4b4c      	ldr	r3, [pc, #304]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006d2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d30:	f003 0302 	and.w	r3, r3, #2
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d0f0      	beq.n	8006d1a <HAL_RCC_OscConfig+0x35e>
 8006d38:	e018      	b.n	8006d6c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d3a:	4b49      	ldr	r3, [pc, #292]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006d3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d3e:	4a48      	ldr	r2, [pc, #288]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006d40:	f023 0301 	bic.w	r3, r3, #1
 8006d44:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d46:	f7fc f979 	bl	800303c <HAL_GetTick>
 8006d4a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d4c:	e008      	b.n	8006d60 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d4e:	f7fc f975 	bl	800303c <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d901      	bls.n	8006d60 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e1ff      	b.n	8007160 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d60:	4b3f      	ldr	r3, [pc, #252]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006d62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d64:	f003 0302 	and.w	r3, r3, #2
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1f0      	bne.n	8006d4e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0320 	and.w	r3, r3, #32
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d036      	beq.n	8006de6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d019      	beq.n	8006db4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d80:	4b37      	ldr	r3, [pc, #220]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a36      	ldr	r2, [pc, #216]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006d86:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006d8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d8c:	f7fc f956 	bl	800303c <HAL_GetTick>
 8006d90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d92:	e008      	b.n	8006da6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d94:	f7fc f952 	bl	800303c <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d901      	bls.n	8006da6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e1dc      	b.n	8007160 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006da6:	4b2e      	ldr	r3, [pc, #184]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d0f0      	beq.n	8006d94 <HAL_RCC_OscConfig+0x3d8>
 8006db2:	e018      	b.n	8006de6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006db4:	4b2a      	ldr	r3, [pc, #168]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a29      	ldr	r2, [pc, #164]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006dba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006dbe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006dc0:	f7fc f93c 	bl	800303c <HAL_GetTick>
 8006dc4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006dc6:	e008      	b.n	8006dda <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006dc8:	f7fc f938 	bl	800303c <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d901      	bls.n	8006dda <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e1c2      	b.n	8007160 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006dda:	4b21      	ldr	r3, [pc, #132]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1f0      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0304 	and.w	r3, r3, #4
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f000 8086 	beq.w	8006f00 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006df4:	4b1b      	ldr	r3, [pc, #108]	@ (8006e64 <HAL_RCC_OscConfig+0x4a8>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a1a      	ldr	r2, [pc, #104]	@ (8006e64 <HAL_RCC_OscConfig+0x4a8>)
 8006dfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dfe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e00:	f7fc f91c 	bl	800303c <HAL_GetTick>
 8006e04:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e06:	e008      	b.n	8006e1a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e08:	f7fc f918 	bl	800303c <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	2b64      	cmp	r3, #100	@ 0x64
 8006e14:	d901      	bls.n	8006e1a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e1a2      	b.n	8007160 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e1a:	4b12      	ldr	r3, [pc, #72]	@ (8006e64 <HAL_RCC_OscConfig+0x4a8>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d0f0      	beq.n	8006e08 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d106      	bne.n	8006e3c <HAL_RCC_OscConfig+0x480>
 8006e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e32:	4a0b      	ldr	r2, [pc, #44]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006e34:	f043 0301 	orr.w	r3, r3, #1
 8006e38:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e3a:	e032      	b.n	8006ea2 <HAL_RCC_OscConfig+0x4e6>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d111      	bne.n	8006e68 <HAL_RCC_OscConfig+0x4ac>
 8006e44:	4b06      	ldr	r3, [pc, #24]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e48:	4a05      	ldr	r2, [pc, #20]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006e4a:	f023 0301 	bic.w	r3, r3, #1
 8006e4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e50:	4b03      	ldr	r3, [pc, #12]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e54:	4a02      	ldr	r2, [pc, #8]	@ (8006e60 <HAL_RCC_OscConfig+0x4a4>)
 8006e56:	f023 0304 	bic.w	r3, r3, #4
 8006e5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e5c:	e021      	b.n	8006ea2 <HAL_RCC_OscConfig+0x4e6>
 8006e5e:	bf00      	nop
 8006e60:	58024400 	.word	0x58024400
 8006e64:	58024800 	.word	0x58024800
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	2b05      	cmp	r3, #5
 8006e6e:	d10c      	bne.n	8006e8a <HAL_RCC_OscConfig+0x4ce>
 8006e70:	4b83      	ldr	r3, [pc, #524]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8006e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e74:	4a82      	ldr	r2, [pc, #520]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8006e76:	f043 0304 	orr.w	r3, r3, #4
 8006e7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e7c:	4b80      	ldr	r3, [pc, #512]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8006e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e80:	4a7f      	ldr	r2, [pc, #508]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8006e82:	f043 0301 	orr.w	r3, r3, #1
 8006e86:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e88:	e00b      	b.n	8006ea2 <HAL_RCC_OscConfig+0x4e6>
 8006e8a:	4b7d      	ldr	r3, [pc, #500]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8006e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e8e:	4a7c      	ldr	r2, [pc, #496]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8006e90:	f023 0301 	bic.w	r3, r3, #1
 8006e94:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e96:	4b7a      	ldr	r3, [pc, #488]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8006e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e9a:	4a79      	ldr	r2, [pc, #484]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8006e9c:	f023 0304 	bic.w	r3, r3, #4
 8006ea0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d015      	beq.n	8006ed6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eaa:	f7fc f8c7 	bl	800303c <HAL_GetTick>
 8006eae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006eb0:	e00a      	b.n	8006ec8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eb2:	f7fc f8c3 	bl	800303c <HAL_GetTick>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d901      	bls.n	8006ec8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e14b      	b.n	8007160 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ec8:	4b6d      	ldr	r3, [pc, #436]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8006eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ecc:	f003 0302 	and.w	r3, r3, #2
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d0ee      	beq.n	8006eb2 <HAL_RCC_OscConfig+0x4f6>
 8006ed4:	e014      	b.n	8006f00 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ed6:	f7fc f8b1 	bl	800303c <HAL_GetTick>
 8006eda:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006edc:	e00a      	b.n	8006ef4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ede:	f7fc f8ad 	bl	800303c <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d901      	bls.n	8006ef4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	e135      	b.n	8007160 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ef4:	4b62      	ldr	r3, [pc, #392]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8006ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ef8:	f003 0302 	and.w	r3, r3, #2
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1ee      	bne.n	8006ede <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 812a 	beq.w	800715e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006f0a:	4b5d      	ldr	r3, [pc, #372]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f12:	2b18      	cmp	r3, #24
 8006f14:	f000 80ba 	beq.w	800708c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	f040 8095 	bne.w	800704c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f22:	4b57      	ldr	r3, [pc, #348]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a56      	ldr	r2, [pc, #344]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8006f28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f2e:	f7fc f885 	bl	800303c <HAL_GetTick>
 8006f32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f34:	e008      	b.n	8006f48 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f36:	f7fc f881 	bl	800303c <HAL_GetTick>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d901      	bls.n	8006f48 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e10b      	b.n	8007160 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f48:	4b4d      	ldr	r3, [pc, #308]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1f0      	bne.n	8006f36 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f54:	4b4a      	ldr	r3, [pc, #296]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8006f56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f58:	4b4a      	ldr	r3, [pc, #296]	@ (8007084 <HAL_RCC_OscConfig+0x6c8>)
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006f64:	0112      	lsls	r2, r2, #4
 8006f66:	430a      	orrs	r2, r1
 8006f68:	4945      	ldr	r1, [pc, #276]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	628b      	str	r3, [r1, #40]	@ 0x28
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f72:	3b01      	subs	r3, #1
 8006f74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	025b      	lsls	r3, r3, #9
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	431a      	orrs	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	041b      	lsls	r3, r3, #16
 8006f8c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006f90:	431a      	orrs	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f96:	3b01      	subs	r3, #1
 8006f98:	061b      	lsls	r3, r3, #24
 8006f9a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006f9e:	4938      	ldr	r1, [pc, #224]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006fa4:	4b36      	ldr	r3, [pc, #216]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8006fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa8:	4a35      	ldr	r2, [pc, #212]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8006faa:	f023 0301 	bic.w	r3, r3, #1
 8006fae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006fb0:	4b33      	ldr	r3, [pc, #204]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8006fb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fb4:	4b34      	ldr	r3, [pc, #208]	@ (8007088 <HAL_RCC_OscConfig+0x6cc>)
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006fbc:	00d2      	lsls	r2, r2, #3
 8006fbe:	4930      	ldr	r1, [pc, #192]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006fc4:	4b2e      	ldr	r3, [pc, #184]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8006fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc8:	f023 020c 	bic.w	r2, r3, #12
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd0:	492b      	ldr	r1, [pc, #172]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006fd6:	4b2a      	ldr	r3, [pc, #168]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8006fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fda:	f023 0202 	bic.w	r2, r3, #2
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fe2:	4927      	ldr	r1, [pc, #156]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006fe8:	4b25      	ldr	r3, [pc, #148]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8006fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fec:	4a24      	ldr	r2, [pc, #144]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8006fee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ff4:	4b22      	ldr	r3, [pc, #136]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8006ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff8:	4a21      	ldr	r2, [pc, #132]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8006ffa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007000:	4b1f      	ldr	r3, [pc, #124]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8007002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007004:	4a1e      	ldr	r2, [pc, #120]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8007006:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800700a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800700c:	4b1c      	ldr	r3, [pc, #112]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 800700e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007010:	4a1b      	ldr	r2, [pc, #108]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8007012:	f043 0301 	orr.w	r3, r3, #1
 8007016:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007018:	4b19      	ldr	r3, [pc, #100]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a18      	ldr	r2, [pc, #96]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 800701e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007024:	f7fc f80a 	bl	800303c <HAL_GetTick>
 8007028:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800702a:	e008      	b.n	800703e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800702c:	f7fc f806 	bl	800303c <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	2b02      	cmp	r3, #2
 8007038:	d901      	bls.n	800703e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e090      	b.n	8007160 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800703e:	4b10      	ldr	r3, [pc, #64]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d0f0      	beq.n	800702c <HAL_RCC_OscConfig+0x670>
 800704a:	e088      	b.n	800715e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800704c:	4b0c      	ldr	r3, [pc, #48]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a0b      	ldr	r2, [pc, #44]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8007052:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007058:	f7fb fff0 	bl	800303c <HAL_GetTick>
 800705c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800705e:	e008      	b.n	8007072 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007060:	f7fb ffec 	bl	800303c <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	2b02      	cmp	r3, #2
 800706c:	d901      	bls.n	8007072 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e076      	b.n	8007160 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007072:	4b03      	ldr	r3, [pc, #12]	@ (8007080 <HAL_RCC_OscConfig+0x6c4>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1f0      	bne.n	8007060 <HAL_RCC_OscConfig+0x6a4>
 800707e:	e06e      	b.n	800715e <HAL_RCC_OscConfig+0x7a2>
 8007080:	58024400 	.word	0x58024400
 8007084:	fffffc0c 	.word	0xfffffc0c
 8007088:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800708c:	4b36      	ldr	r3, [pc, #216]	@ (8007168 <HAL_RCC_OscConfig+0x7ac>)
 800708e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007090:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007092:	4b35      	ldr	r3, [pc, #212]	@ (8007168 <HAL_RCC_OscConfig+0x7ac>)
 8007094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007096:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709c:	2b01      	cmp	r3, #1
 800709e:	d031      	beq.n	8007104 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	f003 0203 	and.w	r2, r3, #3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d12a      	bne.n	8007104 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	091b      	lsrs	r3, r3, #4
 80070b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d122      	bne.n	8007104 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d11a      	bne.n	8007104 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	0a5b      	lsrs	r3, r3, #9
 80070d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070da:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80070dc:	429a      	cmp	r2, r3
 80070de:	d111      	bne.n	8007104 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	0c1b      	lsrs	r3, r3, #16
 80070e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d108      	bne.n	8007104 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	0e1b      	lsrs	r3, r3, #24
 80070f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070fe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007100:	429a      	cmp	r2, r3
 8007102:	d001      	beq.n	8007108 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e02b      	b.n	8007160 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007108:	4b17      	ldr	r3, [pc, #92]	@ (8007168 <HAL_RCC_OscConfig+0x7ac>)
 800710a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800710c:	08db      	lsrs	r3, r3, #3
 800710e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007112:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	429a      	cmp	r2, r3
 800711c:	d01f      	beq.n	800715e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800711e:	4b12      	ldr	r3, [pc, #72]	@ (8007168 <HAL_RCC_OscConfig+0x7ac>)
 8007120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007122:	4a11      	ldr	r2, [pc, #68]	@ (8007168 <HAL_RCC_OscConfig+0x7ac>)
 8007124:	f023 0301 	bic.w	r3, r3, #1
 8007128:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800712a:	f7fb ff87 	bl	800303c <HAL_GetTick>
 800712e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007130:	bf00      	nop
 8007132:	f7fb ff83 	bl	800303c <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713a:	4293      	cmp	r3, r2
 800713c:	d0f9      	beq.n	8007132 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800713e:	4b0a      	ldr	r3, [pc, #40]	@ (8007168 <HAL_RCC_OscConfig+0x7ac>)
 8007140:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007142:	4b0a      	ldr	r3, [pc, #40]	@ (800716c <HAL_RCC_OscConfig+0x7b0>)
 8007144:	4013      	ands	r3, r2
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800714a:	00d2      	lsls	r2, r2, #3
 800714c:	4906      	ldr	r1, [pc, #24]	@ (8007168 <HAL_RCC_OscConfig+0x7ac>)
 800714e:	4313      	orrs	r3, r2
 8007150:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007152:	4b05      	ldr	r3, [pc, #20]	@ (8007168 <HAL_RCC_OscConfig+0x7ac>)
 8007154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007156:	4a04      	ldr	r2, [pc, #16]	@ (8007168 <HAL_RCC_OscConfig+0x7ac>)
 8007158:	f043 0301 	orr.w	r3, r3, #1
 800715c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3730      	adds	r7, #48	@ 0x30
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	58024400 	.word	0x58024400
 800716c:	ffff0007 	.word	0xffff0007

08007170 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d101      	bne.n	8007184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e19c      	b.n	80074be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007184:	4b8a      	ldr	r3, [pc, #552]	@ (80073b0 <HAL_RCC_ClockConfig+0x240>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 030f 	and.w	r3, r3, #15
 800718c:	683a      	ldr	r2, [r7, #0]
 800718e:	429a      	cmp	r2, r3
 8007190:	d910      	bls.n	80071b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007192:	4b87      	ldr	r3, [pc, #540]	@ (80073b0 <HAL_RCC_ClockConfig+0x240>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f023 020f 	bic.w	r2, r3, #15
 800719a:	4985      	ldr	r1, [pc, #532]	@ (80073b0 <HAL_RCC_ClockConfig+0x240>)
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	4313      	orrs	r3, r2
 80071a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071a2:	4b83      	ldr	r3, [pc, #524]	@ (80073b0 <HAL_RCC_ClockConfig+0x240>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 030f 	and.w	r3, r3, #15
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d001      	beq.n	80071b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e184      	b.n	80074be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0304 	and.w	r3, r3, #4
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d010      	beq.n	80071e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	691a      	ldr	r2, [r3, #16]
 80071c4:	4b7b      	ldr	r3, [pc, #492]	@ (80073b4 <HAL_RCC_ClockConfig+0x244>)
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d908      	bls.n	80071e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80071d0:	4b78      	ldr	r3, [pc, #480]	@ (80073b4 <HAL_RCC_ClockConfig+0x244>)
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	4975      	ldr	r1, [pc, #468]	@ (80073b4 <HAL_RCC_ClockConfig+0x244>)
 80071de:	4313      	orrs	r3, r2
 80071e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0308 	and.w	r3, r3, #8
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d010      	beq.n	8007210 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	695a      	ldr	r2, [r3, #20]
 80071f2:	4b70      	ldr	r3, [pc, #448]	@ (80073b4 <HAL_RCC_ClockConfig+0x244>)
 80071f4:	69db      	ldr	r3, [r3, #28]
 80071f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d908      	bls.n	8007210 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80071fe:	4b6d      	ldr	r3, [pc, #436]	@ (80073b4 <HAL_RCC_ClockConfig+0x244>)
 8007200:	69db      	ldr	r3, [r3, #28]
 8007202:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	496a      	ldr	r1, [pc, #424]	@ (80073b4 <HAL_RCC_ClockConfig+0x244>)
 800720c:	4313      	orrs	r3, r2
 800720e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0310 	and.w	r3, r3, #16
 8007218:	2b00      	cmp	r3, #0
 800721a:	d010      	beq.n	800723e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	699a      	ldr	r2, [r3, #24]
 8007220:	4b64      	ldr	r3, [pc, #400]	@ (80073b4 <HAL_RCC_ClockConfig+0x244>)
 8007222:	69db      	ldr	r3, [r3, #28]
 8007224:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007228:	429a      	cmp	r2, r3
 800722a:	d908      	bls.n	800723e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800722c:	4b61      	ldr	r3, [pc, #388]	@ (80073b4 <HAL_RCC_ClockConfig+0x244>)
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	495e      	ldr	r1, [pc, #376]	@ (80073b4 <HAL_RCC_ClockConfig+0x244>)
 800723a:	4313      	orrs	r3, r2
 800723c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0320 	and.w	r3, r3, #32
 8007246:	2b00      	cmp	r3, #0
 8007248:	d010      	beq.n	800726c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	69da      	ldr	r2, [r3, #28]
 800724e:	4b59      	ldr	r3, [pc, #356]	@ (80073b4 <HAL_RCC_ClockConfig+0x244>)
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007256:	429a      	cmp	r2, r3
 8007258:	d908      	bls.n	800726c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800725a:	4b56      	ldr	r3, [pc, #344]	@ (80073b4 <HAL_RCC_ClockConfig+0x244>)
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	69db      	ldr	r3, [r3, #28]
 8007266:	4953      	ldr	r1, [pc, #332]	@ (80073b4 <HAL_RCC_ClockConfig+0x244>)
 8007268:	4313      	orrs	r3, r2
 800726a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0302 	and.w	r3, r3, #2
 8007274:	2b00      	cmp	r3, #0
 8007276:	d010      	beq.n	800729a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	68da      	ldr	r2, [r3, #12]
 800727c:	4b4d      	ldr	r3, [pc, #308]	@ (80073b4 <HAL_RCC_ClockConfig+0x244>)
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	f003 030f 	and.w	r3, r3, #15
 8007284:	429a      	cmp	r2, r3
 8007286:	d908      	bls.n	800729a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007288:	4b4a      	ldr	r3, [pc, #296]	@ (80073b4 <HAL_RCC_ClockConfig+0x244>)
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	f023 020f 	bic.w	r2, r3, #15
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	4947      	ldr	r1, [pc, #284]	@ (80073b4 <HAL_RCC_ClockConfig+0x244>)
 8007296:	4313      	orrs	r3, r2
 8007298:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 0301 	and.w	r3, r3, #1
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d055      	beq.n	8007352 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80072a6:	4b43      	ldr	r3, [pc, #268]	@ (80073b4 <HAL_RCC_ClockConfig+0x244>)
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	4940      	ldr	r1, [pc, #256]	@ (80073b4 <HAL_RCC_ClockConfig+0x244>)
 80072b4:	4313      	orrs	r3, r2
 80072b6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d107      	bne.n	80072d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80072c0:	4b3c      	ldr	r3, [pc, #240]	@ (80073b4 <HAL_RCC_ClockConfig+0x244>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d121      	bne.n	8007310 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e0f6      	b.n	80074be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	2b03      	cmp	r3, #3
 80072d6:	d107      	bne.n	80072e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80072d8:	4b36      	ldr	r3, [pc, #216]	@ (80073b4 <HAL_RCC_ClockConfig+0x244>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d115      	bne.n	8007310 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e0ea      	b.n	80074be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d107      	bne.n	8007300 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80072f0:	4b30      	ldr	r3, [pc, #192]	@ (80073b4 <HAL_RCC_ClockConfig+0x244>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d109      	bne.n	8007310 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e0de      	b.n	80074be <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007300:	4b2c      	ldr	r3, [pc, #176]	@ (80073b4 <HAL_RCC_ClockConfig+0x244>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0304 	and.w	r3, r3, #4
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e0d6      	b.n	80074be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007310:	4b28      	ldr	r3, [pc, #160]	@ (80073b4 <HAL_RCC_ClockConfig+0x244>)
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	f023 0207 	bic.w	r2, r3, #7
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	4925      	ldr	r1, [pc, #148]	@ (80073b4 <HAL_RCC_ClockConfig+0x244>)
 800731e:	4313      	orrs	r3, r2
 8007320:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007322:	f7fb fe8b 	bl	800303c <HAL_GetTick>
 8007326:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007328:	e00a      	b.n	8007340 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800732a:	f7fb fe87 	bl	800303c <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007338:	4293      	cmp	r3, r2
 800733a:	d901      	bls.n	8007340 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e0be      	b.n	80074be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007340:	4b1c      	ldr	r3, [pc, #112]	@ (80073b4 <HAL_RCC_ClockConfig+0x244>)
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	00db      	lsls	r3, r3, #3
 800734e:	429a      	cmp	r2, r3
 8007350:	d1eb      	bne.n	800732a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	2b00      	cmp	r3, #0
 800735c:	d010      	beq.n	8007380 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68da      	ldr	r2, [r3, #12]
 8007362:	4b14      	ldr	r3, [pc, #80]	@ (80073b4 <HAL_RCC_ClockConfig+0x244>)
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	f003 030f 	and.w	r3, r3, #15
 800736a:	429a      	cmp	r2, r3
 800736c:	d208      	bcs.n	8007380 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800736e:	4b11      	ldr	r3, [pc, #68]	@ (80073b4 <HAL_RCC_ClockConfig+0x244>)
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	f023 020f 	bic.w	r2, r3, #15
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	490e      	ldr	r1, [pc, #56]	@ (80073b4 <HAL_RCC_ClockConfig+0x244>)
 800737c:	4313      	orrs	r3, r2
 800737e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007380:	4b0b      	ldr	r3, [pc, #44]	@ (80073b0 <HAL_RCC_ClockConfig+0x240>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 030f 	and.w	r3, r3, #15
 8007388:	683a      	ldr	r2, [r7, #0]
 800738a:	429a      	cmp	r2, r3
 800738c:	d214      	bcs.n	80073b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800738e:	4b08      	ldr	r3, [pc, #32]	@ (80073b0 <HAL_RCC_ClockConfig+0x240>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f023 020f 	bic.w	r2, r3, #15
 8007396:	4906      	ldr	r1, [pc, #24]	@ (80073b0 <HAL_RCC_ClockConfig+0x240>)
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	4313      	orrs	r3, r2
 800739c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800739e:	4b04      	ldr	r3, [pc, #16]	@ (80073b0 <HAL_RCC_ClockConfig+0x240>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 030f 	and.w	r3, r3, #15
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d005      	beq.n	80073b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e086      	b.n	80074be <HAL_RCC_ClockConfig+0x34e>
 80073b0:	52002000 	.word	0x52002000
 80073b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 0304 	and.w	r3, r3, #4
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d010      	beq.n	80073e6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	691a      	ldr	r2, [r3, #16]
 80073c8:	4b3f      	ldr	r3, [pc, #252]	@ (80074c8 <HAL_RCC_ClockConfig+0x358>)
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d208      	bcs.n	80073e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80073d4:	4b3c      	ldr	r3, [pc, #240]	@ (80074c8 <HAL_RCC_ClockConfig+0x358>)
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	4939      	ldr	r1, [pc, #228]	@ (80074c8 <HAL_RCC_ClockConfig+0x358>)
 80073e2:	4313      	orrs	r3, r2
 80073e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0308 	and.w	r3, r3, #8
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d010      	beq.n	8007414 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	695a      	ldr	r2, [r3, #20]
 80073f6:	4b34      	ldr	r3, [pc, #208]	@ (80074c8 <HAL_RCC_ClockConfig+0x358>)
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073fe:	429a      	cmp	r2, r3
 8007400:	d208      	bcs.n	8007414 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007402:	4b31      	ldr	r3, [pc, #196]	@ (80074c8 <HAL_RCC_ClockConfig+0x358>)
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	492e      	ldr	r1, [pc, #184]	@ (80074c8 <HAL_RCC_ClockConfig+0x358>)
 8007410:	4313      	orrs	r3, r2
 8007412:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 0310 	and.w	r3, r3, #16
 800741c:	2b00      	cmp	r3, #0
 800741e:	d010      	beq.n	8007442 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	699a      	ldr	r2, [r3, #24]
 8007424:	4b28      	ldr	r3, [pc, #160]	@ (80074c8 <HAL_RCC_ClockConfig+0x358>)
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800742c:	429a      	cmp	r2, r3
 800742e:	d208      	bcs.n	8007442 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007430:	4b25      	ldr	r3, [pc, #148]	@ (80074c8 <HAL_RCC_ClockConfig+0x358>)
 8007432:	69db      	ldr	r3, [r3, #28]
 8007434:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	4922      	ldr	r1, [pc, #136]	@ (80074c8 <HAL_RCC_ClockConfig+0x358>)
 800743e:	4313      	orrs	r3, r2
 8007440:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0320 	and.w	r3, r3, #32
 800744a:	2b00      	cmp	r3, #0
 800744c:	d010      	beq.n	8007470 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	69da      	ldr	r2, [r3, #28]
 8007452:	4b1d      	ldr	r3, [pc, #116]	@ (80074c8 <HAL_RCC_ClockConfig+0x358>)
 8007454:	6a1b      	ldr	r3, [r3, #32]
 8007456:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800745a:	429a      	cmp	r2, r3
 800745c:	d208      	bcs.n	8007470 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800745e:	4b1a      	ldr	r3, [pc, #104]	@ (80074c8 <HAL_RCC_ClockConfig+0x358>)
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	69db      	ldr	r3, [r3, #28]
 800746a:	4917      	ldr	r1, [pc, #92]	@ (80074c8 <HAL_RCC_ClockConfig+0x358>)
 800746c:	4313      	orrs	r3, r2
 800746e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007470:	f000 f834 	bl	80074dc <HAL_RCC_GetSysClockFreq>
 8007474:	4602      	mov	r2, r0
 8007476:	4b14      	ldr	r3, [pc, #80]	@ (80074c8 <HAL_RCC_ClockConfig+0x358>)
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	0a1b      	lsrs	r3, r3, #8
 800747c:	f003 030f 	and.w	r3, r3, #15
 8007480:	4912      	ldr	r1, [pc, #72]	@ (80074cc <HAL_RCC_ClockConfig+0x35c>)
 8007482:	5ccb      	ldrb	r3, [r1, r3]
 8007484:	f003 031f 	and.w	r3, r3, #31
 8007488:	fa22 f303 	lsr.w	r3, r2, r3
 800748c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800748e:	4b0e      	ldr	r3, [pc, #56]	@ (80074c8 <HAL_RCC_ClockConfig+0x358>)
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	f003 030f 	and.w	r3, r3, #15
 8007496:	4a0d      	ldr	r2, [pc, #52]	@ (80074cc <HAL_RCC_ClockConfig+0x35c>)
 8007498:	5cd3      	ldrb	r3, [r2, r3]
 800749a:	f003 031f 	and.w	r3, r3, #31
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	fa22 f303 	lsr.w	r3, r2, r3
 80074a4:	4a0a      	ldr	r2, [pc, #40]	@ (80074d0 <HAL_RCC_ClockConfig+0x360>)
 80074a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80074a8:	4a0a      	ldr	r2, [pc, #40]	@ (80074d4 <HAL_RCC_ClockConfig+0x364>)
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80074ae:	4b0a      	ldr	r3, [pc, #40]	@ (80074d8 <HAL_RCC_ClockConfig+0x368>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fb fd78 	bl	8002fa8 <HAL_InitTick>
 80074b8:	4603      	mov	r3, r0
 80074ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80074bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3718      	adds	r7, #24
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	58024400 	.word	0x58024400
 80074cc:	0800d13c 	.word	0x0800d13c
 80074d0:	24000010 	.word	0x24000010
 80074d4:	2400000c 	.word	0x2400000c
 80074d8:	24000014 	.word	0x24000014

080074dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074dc:	b480      	push	{r7}
 80074de:	b089      	sub	sp, #36	@ 0x24
 80074e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074e2:	4bb3      	ldr	r3, [pc, #716]	@ (80077b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074ea:	2b18      	cmp	r3, #24
 80074ec:	f200 8155 	bhi.w	800779a <HAL_RCC_GetSysClockFreq+0x2be>
 80074f0:	a201      	add	r2, pc, #4	@ (adr r2, 80074f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80074f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f6:	bf00      	nop
 80074f8:	0800755d 	.word	0x0800755d
 80074fc:	0800779b 	.word	0x0800779b
 8007500:	0800779b 	.word	0x0800779b
 8007504:	0800779b 	.word	0x0800779b
 8007508:	0800779b 	.word	0x0800779b
 800750c:	0800779b 	.word	0x0800779b
 8007510:	0800779b 	.word	0x0800779b
 8007514:	0800779b 	.word	0x0800779b
 8007518:	08007583 	.word	0x08007583
 800751c:	0800779b 	.word	0x0800779b
 8007520:	0800779b 	.word	0x0800779b
 8007524:	0800779b 	.word	0x0800779b
 8007528:	0800779b 	.word	0x0800779b
 800752c:	0800779b 	.word	0x0800779b
 8007530:	0800779b 	.word	0x0800779b
 8007534:	0800779b 	.word	0x0800779b
 8007538:	08007589 	.word	0x08007589
 800753c:	0800779b 	.word	0x0800779b
 8007540:	0800779b 	.word	0x0800779b
 8007544:	0800779b 	.word	0x0800779b
 8007548:	0800779b 	.word	0x0800779b
 800754c:	0800779b 	.word	0x0800779b
 8007550:	0800779b 	.word	0x0800779b
 8007554:	0800779b 	.word	0x0800779b
 8007558:	0800758f 	.word	0x0800758f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800755c:	4b94      	ldr	r3, [pc, #592]	@ (80077b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0320 	and.w	r3, r3, #32
 8007564:	2b00      	cmp	r3, #0
 8007566:	d009      	beq.n	800757c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007568:	4b91      	ldr	r3, [pc, #580]	@ (80077b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	08db      	lsrs	r3, r3, #3
 800756e:	f003 0303 	and.w	r3, r3, #3
 8007572:	4a90      	ldr	r2, [pc, #576]	@ (80077b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007574:	fa22 f303 	lsr.w	r3, r2, r3
 8007578:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800757a:	e111      	b.n	80077a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800757c:	4b8d      	ldr	r3, [pc, #564]	@ (80077b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800757e:	61bb      	str	r3, [r7, #24]
      break;
 8007580:	e10e      	b.n	80077a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007582:	4b8d      	ldr	r3, [pc, #564]	@ (80077b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007584:	61bb      	str	r3, [r7, #24]
      break;
 8007586:	e10b      	b.n	80077a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007588:	4b8c      	ldr	r3, [pc, #560]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800758a:	61bb      	str	r3, [r7, #24]
      break;
 800758c:	e108      	b.n	80077a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800758e:	4b88      	ldr	r3, [pc, #544]	@ (80077b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007592:	f003 0303 	and.w	r3, r3, #3
 8007596:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007598:	4b85      	ldr	r3, [pc, #532]	@ (80077b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800759a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800759c:	091b      	lsrs	r3, r3, #4
 800759e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80075a4:	4b82      	ldr	r3, [pc, #520]	@ (80077b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a8:	f003 0301 	and.w	r3, r3, #1
 80075ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80075ae:	4b80      	ldr	r3, [pc, #512]	@ (80077b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075b2:	08db      	lsrs	r3, r3, #3
 80075b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	fb02 f303 	mul.w	r3, r2, r3
 80075be:	ee07 3a90 	vmov	s15, r3
 80075c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f000 80e1 	beq.w	8007794 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	f000 8083 	beq.w	80076e0 <HAL_RCC_GetSysClockFreq+0x204>
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	2b02      	cmp	r3, #2
 80075de:	f200 80a1 	bhi.w	8007724 <HAL_RCC_GetSysClockFreq+0x248>
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d003      	beq.n	80075f0 <HAL_RCC_GetSysClockFreq+0x114>
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d056      	beq.n	800769c <HAL_RCC_GetSysClockFreq+0x1c0>
 80075ee:	e099      	b.n	8007724 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075f0:	4b6f      	ldr	r3, [pc, #444]	@ (80077b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0320 	and.w	r3, r3, #32
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d02d      	beq.n	8007658 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075fc:	4b6c      	ldr	r3, [pc, #432]	@ (80077b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	08db      	lsrs	r3, r3, #3
 8007602:	f003 0303 	and.w	r3, r3, #3
 8007606:	4a6b      	ldr	r2, [pc, #428]	@ (80077b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007608:	fa22 f303 	lsr.w	r3, r2, r3
 800760c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	ee07 3a90 	vmov	s15, r3
 8007614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	ee07 3a90 	vmov	s15, r3
 800761e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007626:	4b62      	ldr	r3, [pc, #392]	@ (80077b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800762a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800762e:	ee07 3a90 	vmov	s15, r3
 8007632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007636:	ed97 6a02 	vldr	s12, [r7, #8]
 800763a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80077c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800763e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007646:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800764a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800764e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007652:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007656:	e087      	b.n	8007768 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	ee07 3a90 	vmov	s15, r3
 800765e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007662:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80077c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800766a:	4b51      	ldr	r3, [pc, #324]	@ (80077b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800766c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800766e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007672:	ee07 3a90 	vmov	s15, r3
 8007676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800767a:	ed97 6a02 	vldr	s12, [r7, #8]
 800767e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80077c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800768a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800768e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007696:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800769a:	e065      	b.n	8007768 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	ee07 3a90 	vmov	s15, r3
 80076a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80077c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80076aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ae:	4b40      	ldr	r3, [pc, #256]	@ (80077b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076b6:	ee07 3a90 	vmov	s15, r3
 80076ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076be:	ed97 6a02 	vldr	s12, [r7, #8]
 80076c2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80077c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80076c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80076de:	e043      	b.n	8007768 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	ee07 3a90 	vmov	s15, r3
 80076e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80077cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80076ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076f2:	4b2f      	ldr	r3, [pc, #188]	@ (80077b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076fa:	ee07 3a90 	vmov	s15, r3
 80076fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007702:	ed97 6a02 	vldr	s12, [r7, #8]
 8007706:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80077c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800770a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800770e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007712:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800771a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800771e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007722:	e021      	b.n	8007768 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	ee07 3a90 	vmov	s15, r3
 800772a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800772e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80077c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007736:	4b1e      	ldr	r3, [pc, #120]	@ (80077b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800773a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800773e:	ee07 3a90 	vmov	s15, r3
 8007742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007746:	ed97 6a02 	vldr	s12, [r7, #8]
 800774a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80077c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800774e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007756:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800775a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800775e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007762:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007766:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007768:	4b11      	ldr	r3, [pc, #68]	@ (80077b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800776a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800776c:	0a5b      	lsrs	r3, r3, #9
 800776e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007772:	3301      	adds	r3, #1
 8007774:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	ee07 3a90 	vmov	s15, r3
 800777c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007780:	edd7 6a07 	vldr	s13, [r7, #28]
 8007784:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007788:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800778c:	ee17 3a90 	vmov	r3, s15
 8007790:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007792:	e005      	b.n	80077a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007794:	2300      	movs	r3, #0
 8007796:	61bb      	str	r3, [r7, #24]
      break;
 8007798:	e002      	b.n	80077a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800779a:	4b07      	ldr	r3, [pc, #28]	@ (80077b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800779c:	61bb      	str	r3, [r7, #24]
      break;
 800779e:	bf00      	nop
  }

  return sysclockfreq;
 80077a0:	69bb      	ldr	r3, [r7, #24]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3724      	adds	r7, #36	@ 0x24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	58024400 	.word	0x58024400
 80077b4:	03d09000 	.word	0x03d09000
 80077b8:	003d0900 	.word	0x003d0900
 80077bc:	016e3600 	.word	0x016e3600
 80077c0:	46000000 	.word	0x46000000
 80077c4:	4c742400 	.word	0x4c742400
 80077c8:	4a742400 	.word	0x4a742400
 80077cc:	4bb71b00 	.word	0x4bb71b00

080077d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80077d6:	f7ff fe81 	bl	80074dc <HAL_RCC_GetSysClockFreq>
 80077da:	4602      	mov	r2, r0
 80077dc:	4b10      	ldr	r3, [pc, #64]	@ (8007820 <HAL_RCC_GetHCLKFreq+0x50>)
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	0a1b      	lsrs	r3, r3, #8
 80077e2:	f003 030f 	and.w	r3, r3, #15
 80077e6:	490f      	ldr	r1, [pc, #60]	@ (8007824 <HAL_RCC_GetHCLKFreq+0x54>)
 80077e8:	5ccb      	ldrb	r3, [r1, r3]
 80077ea:	f003 031f 	and.w	r3, r3, #31
 80077ee:	fa22 f303 	lsr.w	r3, r2, r3
 80077f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80077f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007820 <HAL_RCC_GetHCLKFreq+0x50>)
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	f003 030f 	and.w	r3, r3, #15
 80077fc:	4a09      	ldr	r2, [pc, #36]	@ (8007824 <HAL_RCC_GetHCLKFreq+0x54>)
 80077fe:	5cd3      	ldrb	r3, [r2, r3]
 8007800:	f003 031f 	and.w	r3, r3, #31
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	fa22 f303 	lsr.w	r3, r2, r3
 800780a:	4a07      	ldr	r2, [pc, #28]	@ (8007828 <HAL_RCC_GetHCLKFreq+0x58>)
 800780c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800780e:	4a07      	ldr	r2, [pc, #28]	@ (800782c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007814:	4b04      	ldr	r3, [pc, #16]	@ (8007828 <HAL_RCC_GetHCLKFreq+0x58>)
 8007816:	681b      	ldr	r3, [r3, #0]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3708      	adds	r7, #8
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	58024400 	.word	0x58024400
 8007824:	0800d13c 	.word	0x0800d13c
 8007828:	24000010 	.word	0x24000010
 800782c:	2400000c 	.word	0x2400000c

08007830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007834:	f7ff ffcc 	bl	80077d0 <HAL_RCC_GetHCLKFreq>
 8007838:	4602      	mov	r2, r0
 800783a:	4b06      	ldr	r3, [pc, #24]	@ (8007854 <HAL_RCC_GetPCLK1Freq+0x24>)
 800783c:	69db      	ldr	r3, [r3, #28]
 800783e:	091b      	lsrs	r3, r3, #4
 8007840:	f003 0307 	and.w	r3, r3, #7
 8007844:	4904      	ldr	r1, [pc, #16]	@ (8007858 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007846:	5ccb      	ldrb	r3, [r1, r3]
 8007848:	f003 031f 	and.w	r3, r3, #31
 800784c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007850:	4618      	mov	r0, r3
 8007852:	bd80      	pop	{r7, pc}
 8007854:	58024400 	.word	0x58024400
 8007858:	0800d13c 	.word	0x0800d13c

0800785c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007860:	f7ff ffb6 	bl	80077d0 <HAL_RCC_GetHCLKFreq>
 8007864:	4602      	mov	r2, r0
 8007866:	4b06      	ldr	r3, [pc, #24]	@ (8007880 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007868:	69db      	ldr	r3, [r3, #28]
 800786a:	0a1b      	lsrs	r3, r3, #8
 800786c:	f003 0307 	and.w	r3, r3, #7
 8007870:	4904      	ldr	r1, [pc, #16]	@ (8007884 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007872:	5ccb      	ldrb	r3, [r1, r3]
 8007874:	f003 031f 	and.w	r3, r3, #31
 8007878:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800787c:	4618      	mov	r0, r3
 800787e:	bd80      	pop	{r7, pc}
 8007880:	58024400 	.word	0x58024400
 8007884:	0800d13c 	.word	0x0800d13c

08007888 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800788c:	b0c6      	sub	sp, #280	@ 0x118
 800788e:	af00      	add	r7, sp, #0
 8007890:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007894:	2300      	movs	r3, #0
 8007896:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800789a:	2300      	movs	r3, #0
 800789c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80078a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80078ac:	2500      	movs	r5, #0
 80078ae:	ea54 0305 	orrs.w	r3, r4, r5
 80078b2:	d049      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80078b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80078be:	d02f      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80078c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80078c4:	d828      	bhi.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80078c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078ca:	d01a      	beq.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80078cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078d0:	d822      	bhi.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d003      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80078d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078da:	d007      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80078dc:	e01c      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078de:	4bab      	ldr	r3, [pc, #684]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80078e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e2:	4aaa      	ldr	r2, [pc, #680]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80078e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80078ea:	e01a      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078f0:	3308      	adds	r3, #8
 80078f2:	2102      	movs	r1, #2
 80078f4:	4618      	mov	r0, r3
 80078f6:	f002 fa49 	bl	8009d8c <RCCEx_PLL2_Config>
 80078fa:	4603      	mov	r3, r0
 80078fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007900:	e00f      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007906:	3328      	adds	r3, #40	@ 0x28
 8007908:	2102      	movs	r1, #2
 800790a:	4618      	mov	r0, r3
 800790c:	f002 faf0 	bl	8009ef0 <RCCEx_PLL3_Config>
 8007910:	4603      	mov	r3, r0
 8007912:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007916:	e004      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800791e:	e000      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007920:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007922:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10a      	bne.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800792a:	4b98      	ldr	r3, [pc, #608]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800792c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800792e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007936:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007938:	4a94      	ldr	r2, [pc, #592]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800793a:	430b      	orrs	r3, r1
 800793c:	6513      	str	r3, [r2, #80]	@ 0x50
 800793e:	e003      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007940:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007944:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800794c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007950:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007954:	f04f 0900 	mov.w	r9, #0
 8007958:	ea58 0309 	orrs.w	r3, r8, r9
 800795c:	d047      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800795e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007964:	2b04      	cmp	r3, #4
 8007966:	d82a      	bhi.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007968:	a201      	add	r2, pc, #4	@ (adr r2, 8007970 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800796a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796e:	bf00      	nop
 8007970:	08007985 	.word	0x08007985
 8007974:	08007993 	.word	0x08007993
 8007978:	080079a9 	.word	0x080079a9
 800797c:	080079c7 	.word	0x080079c7
 8007980:	080079c7 	.word	0x080079c7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007984:	4b81      	ldr	r3, [pc, #516]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007988:	4a80      	ldr	r2, [pc, #512]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800798a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800798e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007990:	e01a      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007996:	3308      	adds	r3, #8
 8007998:	2100      	movs	r1, #0
 800799a:	4618      	mov	r0, r3
 800799c:	f002 f9f6 	bl	8009d8c <RCCEx_PLL2_Config>
 80079a0:	4603      	mov	r3, r0
 80079a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079a6:	e00f      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ac:	3328      	adds	r3, #40	@ 0x28
 80079ae:	2100      	movs	r1, #0
 80079b0:	4618      	mov	r0, r3
 80079b2:	f002 fa9d 	bl	8009ef0 <RCCEx_PLL3_Config>
 80079b6:	4603      	mov	r3, r0
 80079b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079bc:	e004      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80079c4:	e000      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80079c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d10a      	bne.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079d0:	4b6e      	ldr	r3, [pc, #440]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80079d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079d4:	f023 0107 	bic.w	r1, r3, #7
 80079d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079de:	4a6b      	ldr	r2, [pc, #428]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80079e0:	430b      	orrs	r3, r1
 80079e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80079e4:	e003      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80079ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80079fa:	f04f 0b00 	mov.w	fp, #0
 80079fe:	ea5a 030b 	orrs.w	r3, sl, fp
 8007a02:	d05b      	beq.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007a0c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007a10:	d03b      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007a12:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007a16:	d834      	bhi.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007a18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a1c:	d037      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007a1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a22:	d82e      	bhi.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007a24:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007a28:	d033      	beq.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007a2a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007a2e:	d828      	bhi.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007a30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a34:	d01a      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007a36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a3a:	d822      	bhi.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d003      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007a40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a44:	d007      	beq.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8007a46:	e01c      	b.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a48:	4b50      	ldr	r3, [pc, #320]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a4c:	4a4f      	ldr	r2, [pc, #316]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007a4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a54:	e01e      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a5a:	3308      	adds	r3, #8
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f002 f994 	bl	8009d8c <RCCEx_PLL2_Config>
 8007a64:	4603      	mov	r3, r0
 8007a66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007a6a:	e013      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a70:	3328      	adds	r3, #40	@ 0x28
 8007a72:	2100      	movs	r1, #0
 8007a74:	4618      	mov	r0, r3
 8007a76:	f002 fa3b 	bl	8009ef0 <RCCEx_PLL3_Config>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a80:	e008      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a88:	e004      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007a8a:	bf00      	nop
 8007a8c:	e002      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007a8e:	bf00      	nop
 8007a90:	e000      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007a92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10b      	bne.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007a9c:	4b3b      	ldr	r3, [pc, #236]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aa0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007aac:	4a37      	ldr	r2, [pc, #220]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007aae:	430b      	orrs	r3, r1
 8007ab0:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ab2:	e003      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ab8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007ac8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007acc:	2300      	movs	r3, #0
 8007ace:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007ad2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	d05d      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ae0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007ae4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007ae8:	d03b      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007aea:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007aee:	d834      	bhi.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007af0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007af4:	d037      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007af6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007afa:	d82e      	bhi.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007afc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b00:	d033      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8007b02:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b06:	d828      	bhi.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007b08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b0c:	d01a      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8007b0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b12:	d822      	bhi.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d003      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007b18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b1c:	d007      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007b1e:	e01c      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b20:	4b1a      	ldr	r3, [pc, #104]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b24:	4a19      	ldr	r2, [pc, #100]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007b26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b2c:	e01e      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b32:	3308      	adds	r3, #8
 8007b34:	2100      	movs	r1, #0
 8007b36:	4618      	mov	r0, r3
 8007b38:	f002 f928 	bl	8009d8c <RCCEx_PLL2_Config>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007b42:	e013      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b48:	3328      	adds	r3, #40	@ 0x28
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f002 f9cf 	bl	8009ef0 <RCCEx_PLL3_Config>
 8007b52:	4603      	mov	r3, r0
 8007b54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b58:	e008      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b60:	e004      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007b62:	bf00      	nop
 8007b64:	e002      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007b66:	bf00      	nop
 8007b68:	e000      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007b6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10d      	bne.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007b74:	4b05      	ldr	r3, [pc, #20]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b78:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007b84:	4a01      	ldr	r2, [pc, #4]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007b86:	430b      	orrs	r3, r1
 8007b88:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b8a:	e005      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007b8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007ba4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007ba8:	2300      	movs	r3, #0
 8007baa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007bae:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	d03a      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bbe:	2b30      	cmp	r3, #48	@ 0x30
 8007bc0:	d01f      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8007bc2:	2b30      	cmp	r3, #48	@ 0x30
 8007bc4:	d819      	bhi.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007bc6:	2b20      	cmp	r3, #32
 8007bc8:	d00c      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007bca:	2b20      	cmp	r3, #32
 8007bcc:	d815      	bhi.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d019      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007bd2:	2b10      	cmp	r3, #16
 8007bd4:	d111      	bne.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bd6:	4baa      	ldr	r3, [pc, #680]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bda:	4aa9      	ldr	r2, [pc, #676]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007be0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007be2:	e011      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007be8:	3308      	adds	r3, #8
 8007bea:	2102      	movs	r1, #2
 8007bec:	4618      	mov	r0, r3
 8007bee:	f002 f8cd 	bl	8009d8c <RCCEx_PLL2_Config>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007bf8:	e006      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c00:	e002      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007c02:	bf00      	nop
 8007c04:	e000      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d10a      	bne.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007c10:	4b9b      	ldr	r3, [pc, #620]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c14:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c1e:	4a98      	ldr	r2, [pc, #608]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c20:	430b      	orrs	r3, r1
 8007c22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007c24:	e003      	b.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c2a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c36:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007c3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c3e:	2300      	movs	r3, #0
 8007c40:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007c44:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007c48:	460b      	mov	r3, r1
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	d051      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c58:	d035      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8007c5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c5e:	d82e      	bhi.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007c60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007c64:	d031      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x442>
 8007c66:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007c6a:	d828      	bhi.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007c6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c70:	d01a      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007c72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c76:	d822      	bhi.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d003      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007c7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c80:	d007      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007c82:	e01c      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c84:	4b7e      	ldr	r3, [pc, #504]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c88:	4a7d      	ldr	r2, [pc, #500]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007c90:	e01c      	b.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c96:	3308      	adds	r3, #8
 8007c98:	2100      	movs	r1, #0
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f002 f876 	bl	8009d8c <RCCEx_PLL2_Config>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ca6:	e011      	b.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cac:	3328      	adds	r3, #40	@ 0x28
 8007cae:	2100      	movs	r1, #0
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f002 f91d 	bl	8009ef0 <RCCEx_PLL3_Config>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007cbc:	e006      	b.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007cc4:	e002      	b.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007cc6:	bf00      	nop
 8007cc8:	e000      	b.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007cca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ccc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10a      	bne.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007cd4:	4b6a      	ldr	r3, [pc, #424]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007cd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cd8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ce2:	4a67      	ldr	r2, [pc, #412]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007ce4:	430b      	orrs	r3, r1
 8007ce6:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ce8:	e003      	b.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007cfe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d02:	2300      	movs	r3, #0
 8007d04:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d08:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	d053      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d1c:	d033      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8007d1e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d22:	d82c      	bhi.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007d24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d28:	d02f      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x502>
 8007d2a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d2e:	d826      	bhi.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007d30:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d34:	d02b      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007d36:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d3a:	d820      	bhi.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007d3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d40:	d012      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8007d42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d46:	d81a      	bhi.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d022      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d50:	d115      	bne.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d56:	3308      	adds	r3, #8
 8007d58:	2101      	movs	r1, #1
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f002 f816 	bl	8009d8c <RCCEx_PLL2_Config>
 8007d60:	4603      	mov	r3, r0
 8007d62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007d66:	e015      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d6c:	3328      	adds	r3, #40	@ 0x28
 8007d6e:	2101      	movs	r1, #1
 8007d70:	4618      	mov	r0, r3
 8007d72:	f002 f8bd 	bl	8009ef0 <RCCEx_PLL3_Config>
 8007d76:	4603      	mov	r3, r0
 8007d78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007d7c:	e00a      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d84:	e006      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007d86:	bf00      	nop
 8007d88:	e004      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007d8a:	bf00      	nop
 8007d8c:	e002      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007d8e:	bf00      	nop
 8007d90:	e000      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007d92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10a      	bne.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007d9c:	4b38      	ldr	r3, [pc, #224]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007d9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007da0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007daa:	4a35      	ldr	r2, [pc, #212]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007dac:	430b      	orrs	r3, r1
 8007dae:	6513      	str	r3, [r2, #80]	@ 0x50
 8007db0:	e003      	b.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007db2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007db6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007dc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007dca:	2300      	movs	r3, #0
 8007dcc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007dd0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	d058      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007de2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007de6:	d033      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007de8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007dec:	d82c      	bhi.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007df2:	d02f      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007df8:	d826      	bhi.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007dfa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007dfe:	d02b      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007e00:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e04:	d820      	bhi.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007e06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e0a:	d012      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007e0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e10:	d81a      	bhi.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d022      	beq.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007e16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e1a:	d115      	bne.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e20:	3308      	adds	r3, #8
 8007e22:	2101      	movs	r1, #1
 8007e24:	4618      	mov	r0, r3
 8007e26:	f001 ffb1 	bl	8009d8c <RCCEx_PLL2_Config>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007e30:	e015      	b.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e36:	3328      	adds	r3, #40	@ 0x28
 8007e38:	2101      	movs	r1, #1
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f002 f858 	bl	8009ef0 <RCCEx_PLL3_Config>
 8007e40:	4603      	mov	r3, r0
 8007e42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007e46:	e00a      	b.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e4e:	e006      	b.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007e50:	bf00      	nop
 8007e52:	e004      	b.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007e54:	bf00      	nop
 8007e56:	e002      	b.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007e58:	bf00      	nop
 8007e5a:	e000      	b.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007e5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d10e      	bne.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007e66:	4b06      	ldr	r3, [pc, #24]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e6a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007e76:	4a02      	ldr	r2, [pc, #8]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007e78:	430b      	orrs	r3, r1
 8007e7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e7c:	e006      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007e7e:	bf00      	nop
 8007e80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e94:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007e98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007ea2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	d037      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007eb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007eb6:	d00e      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007eb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ebc:	d816      	bhi.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d018      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007ec2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ec6:	d111      	bne.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ec8:	4bc4      	ldr	r3, [pc, #784]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ecc:	4ac3      	ldr	r2, [pc, #780]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ece:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ed2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007ed4:	e00f      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eda:	3308      	adds	r3, #8
 8007edc:	2101      	movs	r1, #1
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f001 ff54 	bl	8009d8c <RCCEx_PLL2_Config>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007eea:	e004      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ef2:	e000      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007ef4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ef6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10a      	bne.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007efe:	4bb7      	ldr	r3, [pc, #732]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f02:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f0c:	4ab3      	ldr	r2, [pc, #716]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f0e:	430b      	orrs	r3, r1
 8007f10:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f12:	e003      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f24:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007f28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007f32:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007f36:	460b      	mov	r3, r1
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	d039      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f42:	2b03      	cmp	r3, #3
 8007f44:	d81c      	bhi.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007f46:	a201      	add	r2, pc, #4	@ (adr r2, 8007f4c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4c:	08007f89 	.word	0x08007f89
 8007f50:	08007f5d 	.word	0x08007f5d
 8007f54:	08007f6b 	.word	0x08007f6b
 8007f58:	08007f89 	.word	0x08007f89
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f5c:	4b9f      	ldr	r3, [pc, #636]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f60:	4a9e      	ldr	r2, [pc, #632]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007f68:	e00f      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f6e:	3308      	adds	r3, #8
 8007f70:	2102      	movs	r1, #2
 8007f72:	4618      	mov	r0, r3
 8007f74:	f001 ff0a 	bl	8009d8c <RCCEx_PLL2_Config>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007f7e:	e004      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f86:	e000      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007f88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d10a      	bne.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007f92:	4b92      	ldr	r3, [pc, #584]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f96:	f023 0103 	bic.w	r1, r3, #3
 8007f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fa0:	4a8e      	ldr	r2, [pc, #568]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007fa2:	430b      	orrs	r3, r1
 8007fa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007fa6:	e003      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007fbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007fc6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	f000 8099 	beq.w	8008104 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007fd2:	4b83      	ldr	r3, [pc, #524]	@ (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a82      	ldr	r2, [pc, #520]	@ (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fdc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007fde:	f7fb f82d 	bl	800303c <HAL_GetTick>
 8007fe2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fe6:	e00b      	b.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fe8:	f7fb f828 	bl	800303c <HAL_GetTick>
 8007fec:	4602      	mov	r2, r0
 8007fee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007ff2:	1ad3      	subs	r3, r2, r3
 8007ff4:	2b64      	cmp	r3, #100	@ 0x64
 8007ff6:	d903      	bls.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007ff8:	2303      	movs	r3, #3
 8007ffa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ffe:	e005      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008000:	4b77      	ldr	r3, [pc, #476]	@ (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008008:	2b00      	cmp	r3, #0
 800800a:	d0ed      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800800c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008010:	2b00      	cmp	r3, #0
 8008012:	d173      	bne.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008014:	4b71      	ldr	r3, [pc, #452]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008016:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800801c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008020:	4053      	eors	r3, r2
 8008022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008026:	2b00      	cmp	r3, #0
 8008028:	d015      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800802a:	4b6c      	ldr	r3, [pc, #432]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800802c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800802e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008032:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008036:	4b69      	ldr	r3, [pc, #420]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800803a:	4a68      	ldr	r2, [pc, #416]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800803c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008040:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008042:	4b66      	ldr	r3, [pc, #408]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008046:	4a65      	ldr	r2, [pc, #404]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008048:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800804c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800804e:	4a63      	ldr	r2, [pc, #396]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008050:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008054:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800805a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800805e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008062:	d118      	bne.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008064:	f7fa ffea 	bl	800303c <HAL_GetTick>
 8008068:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800806c:	e00d      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800806e:	f7fa ffe5 	bl	800303c <HAL_GetTick>
 8008072:	4602      	mov	r2, r0
 8008074:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008078:	1ad2      	subs	r2, r2, r3
 800807a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800807e:	429a      	cmp	r2, r3
 8008080:	d903      	bls.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8008088:	e005      	b.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800808a:	4b54      	ldr	r3, [pc, #336]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800808c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800808e:	f003 0302 	and.w	r3, r3, #2
 8008092:	2b00      	cmp	r3, #0
 8008094:	d0eb      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8008096:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800809a:	2b00      	cmp	r3, #0
 800809c:	d129      	bne.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800809e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80080a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080ae:	d10e      	bne.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x846>
 80080b0:	4b4a      	ldr	r3, [pc, #296]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80080b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80080c0:	091a      	lsrs	r2, r3, #4
 80080c2:	4b48      	ldr	r3, [pc, #288]	@ (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80080c4:	4013      	ands	r3, r2
 80080c6:	4a45      	ldr	r2, [pc, #276]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080c8:	430b      	orrs	r3, r1
 80080ca:	6113      	str	r3, [r2, #16]
 80080cc:	e005      	b.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x852>
 80080ce:	4b43      	ldr	r3, [pc, #268]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	4a42      	ldr	r2, [pc, #264]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80080d8:	6113      	str	r3, [r2, #16]
 80080da:	4b40      	ldr	r3, [pc, #256]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080dc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80080de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80080e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080ea:	4a3c      	ldr	r2, [pc, #240]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080ec:	430b      	orrs	r3, r1
 80080ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80080f0:	e008      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80080f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80080fa:	e003      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008100:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	f002 0301 	and.w	r3, r2, #1
 8008110:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008114:	2300      	movs	r3, #0
 8008116:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800811a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800811e:	460b      	mov	r3, r1
 8008120:	4313      	orrs	r3, r2
 8008122:	f000 808f 	beq.w	8008244 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800812a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800812c:	2b28      	cmp	r3, #40	@ 0x28
 800812e:	d871      	bhi.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008130:	a201      	add	r2, pc, #4	@ (adr r2, 8008138 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008136:	bf00      	nop
 8008138:	0800821d 	.word	0x0800821d
 800813c:	08008215 	.word	0x08008215
 8008140:	08008215 	.word	0x08008215
 8008144:	08008215 	.word	0x08008215
 8008148:	08008215 	.word	0x08008215
 800814c:	08008215 	.word	0x08008215
 8008150:	08008215 	.word	0x08008215
 8008154:	08008215 	.word	0x08008215
 8008158:	080081e9 	.word	0x080081e9
 800815c:	08008215 	.word	0x08008215
 8008160:	08008215 	.word	0x08008215
 8008164:	08008215 	.word	0x08008215
 8008168:	08008215 	.word	0x08008215
 800816c:	08008215 	.word	0x08008215
 8008170:	08008215 	.word	0x08008215
 8008174:	08008215 	.word	0x08008215
 8008178:	080081ff 	.word	0x080081ff
 800817c:	08008215 	.word	0x08008215
 8008180:	08008215 	.word	0x08008215
 8008184:	08008215 	.word	0x08008215
 8008188:	08008215 	.word	0x08008215
 800818c:	08008215 	.word	0x08008215
 8008190:	08008215 	.word	0x08008215
 8008194:	08008215 	.word	0x08008215
 8008198:	0800821d 	.word	0x0800821d
 800819c:	08008215 	.word	0x08008215
 80081a0:	08008215 	.word	0x08008215
 80081a4:	08008215 	.word	0x08008215
 80081a8:	08008215 	.word	0x08008215
 80081ac:	08008215 	.word	0x08008215
 80081b0:	08008215 	.word	0x08008215
 80081b4:	08008215 	.word	0x08008215
 80081b8:	0800821d 	.word	0x0800821d
 80081bc:	08008215 	.word	0x08008215
 80081c0:	08008215 	.word	0x08008215
 80081c4:	08008215 	.word	0x08008215
 80081c8:	08008215 	.word	0x08008215
 80081cc:	08008215 	.word	0x08008215
 80081d0:	08008215 	.word	0x08008215
 80081d4:	08008215 	.word	0x08008215
 80081d8:	0800821d 	.word	0x0800821d
 80081dc:	58024400 	.word	0x58024400
 80081e0:	58024800 	.word	0x58024800
 80081e4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ec:	3308      	adds	r3, #8
 80081ee:	2101      	movs	r1, #1
 80081f0:	4618      	mov	r0, r3
 80081f2:	f001 fdcb 	bl	8009d8c <RCCEx_PLL2_Config>
 80081f6:	4603      	mov	r3, r0
 80081f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80081fc:	e00f      	b.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80081fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008202:	3328      	adds	r3, #40	@ 0x28
 8008204:	2101      	movs	r1, #1
 8008206:	4618      	mov	r0, r3
 8008208:	f001 fe72 	bl	8009ef0 <RCCEx_PLL3_Config>
 800820c:	4603      	mov	r3, r0
 800820e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008212:	e004      	b.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800821a:	e000      	b.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800821c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800821e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10a      	bne.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008226:	4bbf      	ldr	r3, [pc, #764]	@ (8008524 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800822a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800822e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008232:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008234:	4abb      	ldr	r2, [pc, #748]	@ (8008524 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008236:	430b      	orrs	r3, r1
 8008238:	6553      	str	r3, [r2, #84]	@ 0x54
 800823a:	e003      	b.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800823c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008240:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824c:	f002 0302 	and.w	r3, r2, #2
 8008250:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008254:	2300      	movs	r3, #0
 8008256:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800825a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800825e:	460b      	mov	r3, r1
 8008260:	4313      	orrs	r3, r2
 8008262:	d041      	beq.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800826a:	2b05      	cmp	r3, #5
 800826c:	d824      	bhi.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800826e:	a201      	add	r2, pc, #4	@ (adr r2, 8008274 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8008270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008274:	080082c1 	.word	0x080082c1
 8008278:	0800828d 	.word	0x0800828d
 800827c:	080082a3 	.word	0x080082a3
 8008280:	080082c1 	.word	0x080082c1
 8008284:	080082c1 	.word	0x080082c1
 8008288:	080082c1 	.word	0x080082c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800828c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008290:	3308      	adds	r3, #8
 8008292:	2101      	movs	r1, #1
 8008294:	4618      	mov	r0, r3
 8008296:	f001 fd79 	bl	8009d8c <RCCEx_PLL2_Config>
 800829a:	4603      	mov	r3, r0
 800829c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80082a0:	e00f      	b.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082a6:	3328      	adds	r3, #40	@ 0x28
 80082a8:	2101      	movs	r1, #1
 80082aa:	4618      	mov	r0, r3
 80082ac:	f001 fe20 	bl	8009ef0 <RCCEx_PLL3_Config>
 80082b0:	4603      	mov	r3, r0
 80082b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80082b6:	e004      	b.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80082be:	e000      	b.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80082c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d10a      	bne.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80082ca:	4b96      	ldr	r3, [pc, #600]	@ (8008524 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80082cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ce:	f023 0107 	bic.w	r1, r3, #7
 80082d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082d8:	4a92      	ldr	r2, [pc, #584]	@ (8008524 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80082da:	430b      	orrs	r3, r1
 80082dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80082de:	e003      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80082e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f0:	f002 0304 	and.w	r3, r2, #4
 80082f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80082f8:	2300      	movs	r3, #0
 80082fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80082fe:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008302:	460b      	mov	r3, r1
 8008304:	4313      	orrs	r3, r2
 8008306:	d044      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800830c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008310:	2b05      	cmp	r3, #5
 8008312:	d825      	bhi.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8008314:	a201      	add	r2, pc, #4	@ (adr r2, 800831c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8008316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831a:	bf00      	nop
 800831c:	08008369 	.word	0x08008369
 8008320:	08008335 	.word	0x08008335
 8008324:	0800834b 	.word	0x0800834b
 8008328:	08008369 	.word	0x08008369
 800832c:	08008369 	.word	0x08008369
 8008330:	08008369 	.word	0x08008369
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008338:	3308      	adds	r3, #8
 800833a:	2101      	movs	r1, #1
 800833c:	4618      	mov	r0, r3
 800833e:	f001 fd25 	bl	8009d8c <RCCEx_PLL2_Config>
 8008342:	4603      	mov	r3, r0
 8008344:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008348:	e00f      	b.n	800836a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800834a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800834e:	3328      	adds	r3, #40	@ 0x28
 8008350:	2101      	movs	r1, #1
 8008352:	4618      	mov	r0, r3
 8008354:	f001 fdcc 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008358:	4603      	mov	r3, r0
 800835a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800835e:	e004      	b.n	800836a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008366:	e000      	b.n	800836a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8008368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800836a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10b      	bne.n	800838a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008372:	4b6c      	ldr	r3, [pc, #432]	@ (8008524 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008376:	f023 0107 	bic.w	r1, r3, #7
 800837a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800837e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008382:	4a68      	ldr	r2, [pc, #416]	@ (8008524 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008384:	430b      	orrs	r3, r1
 8008386:	6593      	str	r3, [r2, #88]	@ 0x58
 8008388:	e003      	b.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800838a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800838e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839a:	f002 0320 	and.w	r3, r2, #32
 800839e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80083a2:	2300      	movs	r3, #0
 80083a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80083a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80083ac:	460b      	mov	r3, r1
 80083ae:	4313      	orrs	r3, r2
 80083b0:	d055      	beq.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80083b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083be:	d033      	beq.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80083c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083c4:	d82c      	bhi.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80083c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083ca:	d02f      	beq.n	800842c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80083cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083d0:	d826      	bhi.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80083d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80083d6:	d02b      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80083d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80083dc:	d820      	bhi.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80083de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083e2:	d012      	beq.n	800840a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80083e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083e8:	d81a      	bhi.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d022      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80083ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083f2:	d115      	bne.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083f8:	3308      	adds	r3, #8
 80083fa:	2100      	movs	r1, #0
 80083fc:	4618      	mov	r0, r3
 80083fe:	f001 fcc5 	bl	8009d8c <RCCEx_PLL2_Config>
 8008402:	4603      	mov	r3, r0
 8008404:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008408:	e015      	b.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800840a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800840e:	3328      	adds	r3, #40	@ 0x28
 8008410:	2102      	movs	r1, #2
 8008412:	4618      	mov	r0, r3
 8008414:	f001 fd6c 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008418:	4603      	mov	r3, r0
 800841a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800841e:	e00a      	b.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008426:	e006      	b.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008428:	bf00      	nop
 800842a:	e004      	b.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800842c:	bf00      	nop
 800842e:	e002      	b.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008430:	bf00      	nop
 8008432:	e000      	b.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008434:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008436:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10b      	bne.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800843e:	4b39      	ldr	r3, [pc, #228]	@ (8008524 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008442:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800844a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800844e:	4a35      	ldr	r2, [pc, #212]	@ (8008524 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008450:	430b      	orrs	r3, r1
 8008452:	6553      	str	r3, [r2, #84]	@ 0x54
 8008454:	e003      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008456:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800845a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800845e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008466:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800846a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800846e:	2300      	movs	r3, #0
 8008470:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008474:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008478:	460b      	mov	r3, r1
 800847a:	4313      	orrs	r3, r2
 800847c:	d058      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800847e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008482:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008486:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800848a:	d033      	beq.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800848c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008490:	d82c      	bhi.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008496:	d02f      	beq.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008498:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800849c:	d826      	bhi.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800849e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80084a2:	d02b      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80084a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80084a8:	d820      	bhi.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80084aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084ae:	d012      	beq.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80084b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084b4:	d81a      	bhi.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d022      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80084ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084be:	d115      	bne.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084c4:	3308      	adds	r3, #8
 80084c6:	2100      	movs	r1, #0
 80084c8:	4618      	mov	r0, r3
 80084ca:	f001 fc5f 	bl	8009d8c <RCCEx_PLL2_Config>
 80084ce:	4603      	mov	r3, r0
 80084d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80084d4:	e015      	b.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80084d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084da:	3328      	adds	r3, #40	@ 0x28
 80084dc:	2102      	movs	r1, #2
 80084de:	4618      	mov	r0, r3
 80084e0:	f001 fd06 	bl	8009ef0 <RCCEx_PLL3_Config>
 80084e4:	4603      	mov	r3, r0
 80084e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80084ea:	e00a      	b.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80084f2:	e006      	b.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80084f4:	bf00      	nop
 80084f6:	e004      	b.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80084f8:	bf00      	nop
 80084fa:	e002      	b.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80084fc:	bf00      	nop
 80084fe:	e000      	b.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008502:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008506:	2b00      	cmp	r3, #0
 8008508:	d10e      	bne.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800850a:	4b06      	ldr	r3, [pc, #24]	@ (8008524 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800850c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800850e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008516:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800851a:	4a02      	ldr	r2, [pc, #8]	@ (8008524 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800851c:	430b      	orrs	r3, r1
 800851e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008520:	e006      	b.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8008522:	bf00      	nop
 8008524:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008528:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800852c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008530:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008538:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800853c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008540:	2300      	movs	r3, #0
 8008542:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008546:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800854a:	460b      	mov	r3, r1
 800854c:	4313      	orrs	r3, r2
 800854e:	d055      	beq.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008554:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008558:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800855c:	d033      	beq.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800855e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008562:	d82c      	bhi.n	80085be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008564:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008568:	d02f      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800856a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800856e:	d826      	bhi.n	80085be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008570:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008574:	d02b      	beq.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008576:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800857a:	d820      	bhi.n	80085be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800857c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008580:	d012      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8008582:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008586:	d81a      	bhi.n	80085be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008588:	2b00      	cmp	r3, #0
 800858a:	d022      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800858c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008590:	d115      	bne.n	80085be <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008596:	3308      	adds	r3, #8
 8008598:	2100      	movs	r1, #0
 800859a:	4618      	mov	r0, r3
 800859c:	f001 fbf6 	bl	8009d8c <RCCEx_PLL2_Config>
 80085a0:	4603      	mov	r3, r0
 80085a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80085a6:	e015      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085ac:	3328      	adds	r3, #40	@ 0x28
 80085ae:	2102      	movs	r1, #2
 80085b0:	4618      	mov	r0, r3
 80085b2:	f001 fc9d 	bl	8009ef0 <RCCEx_PLL3_Config>
 80085b6:	4603      	mov	r3, r0
 80085b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80085bc:	e00a      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80085c4:	e006      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80085c6:	bf00      	nop
 80085c8:	e004      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80085ca:	bf00      	nop
 80085cc:	e002      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80085ce:	bf00      	nop
 80085d0:	e000      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80085d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10b      	bne.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80085dc:	4ba0      	ldr	r3, [pc, #640]	@ (8008860 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80085de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085e0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80085e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80085ec:	4a9c      	ldr	r2, [pc, #624]	@ (8008860 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80085ee:	430b      	orrs	r3, r1
 80085f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80085f2:	e003      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80085fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008604:	f002 0308 	and.w	r3, r2, #8
 8008608:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800860c:	2300      	movs	r3, #0
 800860e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008612:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008616:	460b      	mov	r3, r1
 8008618:	4313      	orrs	r3, r2
 800861a:	d01e      	beq.n	800865a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800861c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008620:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008628:	d10c      	bne.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800862a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800862e:	3328      	adds	r3, #40	@ 0x28
 8008630:	2102      	movs	r1, #2
 8008632:	4618      	mov	r0, r3
 8008634:	f001 fc5c 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d002      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008644:	4b86      	ldr	r3, [pc, #536]	@ (8008860 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008648:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800864c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008650:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008654:	4a82      	ldr	r2, [pc, #520]	@ (8008860 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008656:	430b      	orrs	r3, r1
 8008658:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800865a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800865e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008662:	f002 0310 	and.w	r3, r2, #16
 8008666:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800866a:	2300      	movs	r3, #0
 800866c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008670:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008674:	460b      	mov	r3, r1
 8008676:	4313      	orrs	r3, r2
 8008678:	d01e      	beq.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800867a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800867e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008682:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008686:	d10c      	bne.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800868c:	3328      	adds	r3, #40	@ 0x28
 800868e:	2102      	movs	r1, #2
 8008690:	4618      	mov	r0, r3
 8008692:	f001 fc2d 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d002      	beq.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80086a2:	4b6f      	ldr	r3, [pc, #444]	@ (8008860 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80086a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80086aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086b2:	4a6b      	ldr	r2, [pc, #428]	@ (8008860 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80086b4:	430b      	orrs	r3, r1
 80086b6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80086b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80086c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80086c6:	2300      	movs	r3, #0
 80086c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80086ca:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80086ce:	460b      	mov	r3, r1
 80086d0:	4313      	orrs	r3, r2
 80086d2:	d03e      	beq.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80086d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80086dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086e0:	d022      	beq.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80086e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086e6:	d81b      	bhi.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d003      	beq.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80086ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086f0:	d00b      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80086f2:	e015      	b.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086f8:	3308      	adds	r3, #8
 80086fa:	2100      	movs	r1, #0
 80086fc:	4618      	mov	r0, r3
 80086fe:	f001 fb45 	bl	8009d8c <RCCEx_PLL2_Config>
 8008702:	4603      	mov	r3, r0
 8008704:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008708:	e00f      	b.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800870a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800870e:	3328      	adds	r3, #40	@ 0x28
 8008710:	2102      	movs	r1, #2
 8008712:	4618      	mov	r0, r3
 8008714:	f001 fbec 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008718:	4603      	mov	r3, r0
 800871a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800871e:	e004      	b.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008726:	e000      	b.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8008728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800872a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800872e:	2b00      	cmp	r3, #0
 8008730:	d10b      	bne.n	800874a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008732:	4b4b      	ldr	r3, [pc, #300]	@ (8008860 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008736:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800873a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800873e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008742:	4a47      	ldr	r2, [pc, #284]	@ (8008860 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008744:	430b      	orrs	r3, r1
 8008746:	6593      	str	r3, [r2, #88]	@ 0x58
 8008748:	e003      	b.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800874a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800874e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800875e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008760:	2300      	movs	r3, #0
 8008762:	677b      	str	r3, [r7, #116]	@ 0x74
 8008764:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008768:	460b      	mov	r3, r1
 800876a:	4313      	orrs	r3, r2
 800876c:	d03b      	beq.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800876e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008772:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008776:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800877a:	d01f      	beq.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800877c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008780:	d818      	bhi.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8008782:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008786:	d003      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8008788:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800878c:	d007      	beq.n	800879e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800878e:	e011      	b.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008790:	4b33      	ldr	r3, [pc, #204]	@ (8008860 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008794:	4a32      	ldr	r2, [pc, #200]	@ (8008860 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008796:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800879a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800879c:	e00f      	b.n	80087be <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800879e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087a2:	3328      	adds	r3, #40	@ 0x28
 80087a4:	2101      	movs	r1, #1
 80087a6:	4618      	mov	r0, r3
 80087a8:	f001 fba2 	bl	8009ef0 <RCCEx_PLL3_Config>
 80087ac:	4603      	mov	r3, r0
 80087ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80087b2:	e004      	b.n	80087be <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80087ba:	e000      	b.n	80087be <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80087bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d10b      	bne.n	80087de <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80087c6:	4b26      	ldr	r3, [pc, #152]	@ (8008860 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80087c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087ca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80087ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087d6:	4a22      	ldr	r2, [pc, #136]	@ (8008860 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80087d8:	430b      	orrs	r3, r1
 80087da:	6553      	str	r3, [r2, #84]	@ 0x54
 80087dc:	e003      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80087e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ee:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80087f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80087f4:	2300      	movs	r3, #0
 80087f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80087f8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80087fc:	460b      	mov	r3, r1
 80087fe:	4313      	orrs	r3, r2
 8008800:	d034      	beq.n	800886c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008808:	2b00      	cmp	r3, #0
 800880a:	d003      	beq.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800880c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008810:	d007      	beq.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8008812:	e011      	b.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008814:	4b12      	ldr	r3, [pc, #72]	@ (8008860 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008818:	4a11      	ldr	r2, [pc, #68]	@ (8008860 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800881a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800881e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008820:	e00e      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008826:	3308      	adds	r3, #8
 8008828:	2102      	movs	r1, #2
 800882a:	4618      	mov	r0, r3
 800882c:	f001 faae 	bl	8009d8c <RCCEx_PLL2_Config>
 8008830:	4603      	mov	r3, r0
 8008832:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008836:	e003      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800883e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008840:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10d      	bne.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008848:	4b05      	ldr	r3, [pc, #20]	@ (8008860 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800884a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800884c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008854:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008856:	4a02      	ldr	r2, [pc, #8]	@ (8008860 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008858:	430b      	orrs	r3, r1
 800885a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800885c:	e006      	b.n	800886c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800885e:	bf00      	nop
 8008860:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008864:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008868:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800886c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008874:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008878:	663b      	str	r3, [r7, #96]	@ 0x60
 800887a:	2300      	movs	r3, #0
 800887c:	667b      	str	r3, [r7, #100]	@ 0x64
 800887e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008882:	460b      	mov	r3, r1
 8008884:	4313      	orrs	r3, r2
 8008886:	d00c      	beq.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800888c:	3328      	adds	r3, #40	@ 0x28
 800888e:	2102      	movs	r1, #2
 8008890:	4618      	mov	r0, r3
 8008892:	f001 fb2d 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d002      	beq.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80088a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088aa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80088ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088b0:	2300      	movs	r3, #0
 80088b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088b4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80088b8:	460b      	mov	r3, r1
 80088ba:	4313      	orrs	r3, r2
 80088bc:	d036      	beq.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80088be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80088c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088c8:	d018      	beq.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80088ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088ce:	d811      	bhi.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80088d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088d4:	d014      	beq.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80088d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088da:	d80b      	bhi.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d011      	beq.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80088e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088e4:	d106      	bne.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088e6:	4bb7      	ldr	r3, [pc, #732]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80088e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ea:	4ab6      	ldr	r2, [pc, #728]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80088ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80088f2:	e008      	b.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80088fa:	e004      	b.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80088fc:	bf00      	nop
 80088fe:	e002      	b.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008900:	bf00      	nop
 8008902:	e000      	b.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008906:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800890a:	2b00      	cmp	r3, #0
 800890c:	d10a      	bne.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800890e:	4bad      	ldr	r3, [pc, #692]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008912:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800891a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800891c:	4aa9      	ldr	r2, [pc, #676]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800891e:	430b      	orrs	r3, r1
 8008920:	6553      	str	r3, [r2, #84]	@ 0x54
 8008922:	e003      	b.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008924:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008928:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800892c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008934:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008938:	653b      	str	r3, [r7, #80]	@ 0x50
 800893a:	2300      	movs	r3, #0
 800893c:	657b      	str	r3, [r7, #84]	@ 0x54
 800893e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008942:	460b      	mov	r3, r1
 8008944:	4313      	orrs	r3, r2
 8008946:	d009      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008948:	4b9e      	ldr	r3, [pc, #632]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800894a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800894c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008956:	4a9b      	ldr	r2, [pc, #620]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008958:	430b      	orrs	r3, r1
 800895a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800895c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008964:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008968:	64bb      	str	r3, [r7, #72]	@ 0x48
 800896a:	2300      	movs	r3, #0
 800896c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800896e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008972:	460b      	mov	r3, r1
 8008974:	4313      	orrs	r3, r2
 8008976:	d009      	beq.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008978:	4b92      	ldr	r3, [pc, #584]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800897a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800897c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008984:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008986:	4a8f      	ldr	r2, [pc, #572]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008988:	430b      	orrs	r3, r1
 800898a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800898c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008994:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008998:	643b      	str	r3, [r7, #64]	@ 0x40
 800899a:	2300      	movs	r3, #0
 800899c:	647b      	str	r3, [r7, #68]	@ 0x44
 800899e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80089a2:	460b      	mov	r3, r1
 80089a4:	4313      	orrs	r3, r2
 80089a6:	d00e      	beq.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80089a8:	4b86      	ldr	r3, [pc, #536]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	4a85      	ldr	r2, [pc, #532]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80089ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80089b2:	6113      	str	r3, [r2, #16]
 80089b4:	4b83      	ldr	r3, [pc, #524]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80089b6:	6919      	ldr	r1, [r3, #16]
 80089b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80089c0:	4a80      	ldr	r2, [pc, #512]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80089c2:	430b      	orrs	r3, r1
 80089c4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80089c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ce:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80089d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80089d4:	2300      	movs	r3, #0
 80089d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089d8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80089dc:	460b      	mov	r3, r1
 80089de:	4313      	orrs	r3, r2
 80089e0:	d009      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80089e2:	4b78      	ldr	r3, [pc, #480]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80089e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089e6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80089ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089f0:	4a74      	ldr	r2, [pc, #464]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80089f2:	430b      	orrs	r3, r1
 80089f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80089f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fe:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008a02:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a04:	2300      	movs	r3, #0
 8008a06:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a08:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	d00a      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008a12:	4b6c      	ldr	r3, [pc, #432]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a16:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a22:	4a68      	ldr	r2, [pc, #416]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008a24:	430b      	orrs	r3, r1
 8008a26:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a30:	2100      	movs	r1, #0
 8008a32:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008a34:	f003 0301 	and.w	r3, r3, #1
 8008a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a3a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008a3e:	460b      	mov	r3, r1
 8008a40:	4313      	orrs	r3, r2
 8008a42:	d011      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a48:	3308      	adds	r3, #8
 8008a4a:	2100      	movs	r1, #0
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f001 f99d 	bl	8009d8c <RCCEx_PLL2_Config>
 8008a52:	4603      	mov	r3, r0
 8008a54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008a58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d003      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a70:	2100      	movs	r1, #0
 8008a72:	6239      	str	r1, [r7, #32]
 8008a74:	f003 0302 	and.w	r3, r3, #2
 8008a78:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a7a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008a7e:	460b      	mov	r3, r1
 8008a80:	4313      	orrs	r3, r2
 8008a82:	d011      	beq.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a88:	3308      	adds	r3, #8
 8008a8a:	2101      	movs	r1, #1
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f001 f97d 	bl	8009d8c <RCCEx_PLL2_Config>
 8008a92:	4603      	mov	r3, r0
 8008a94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008a98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d003      	beq.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008aa4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab0:	2100      	movs	r1, #0
 8008ab2:	61b9      	str	r1, [r7, #24]
 8008ab4:	f003 0304 	and.w	r3, r3, #4
 8008ab8:	61fb      	str	r3, [r7, #28]
 8008aba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008abe:	460b      	mov	r3, r1
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	d011      	beq.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ac8:	3308      	adds	r3, #8
 8008aca:	2102      	movs	r1, #2
 8008acc:	4618      	mov	r0, r3
 8008ace:	f001 f95d 	bl	8009d8c <RCCEx_PLL2_Config>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008ad8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d003      	beq.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ae0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ae4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af0:	2100      	movs	r1, #0
 8008af2:	6139      	str	r1, [r7, #16]
 8008af4:	f003 0308 	and.w	r3, r3, #8
 8008af8:	617b      	str	r3, [r7, #20]
 8008afa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008afe:	460b      	mov	r3, r1
 8008b00:	4313      	orrs	r3, r2
 8008b02:	d011      	beq.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b08:	3328      	adds	r3, #40	@ 0x28
 8008b0a:	2100      	movs	r1, #0
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f001 f9ef 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008b12:	4603      	mov	r3, r0
 8008b14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8008b18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d003      	beq.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b30:	2100      	movs	r1, #0
 8008b32:	60b9      	str	r1, [r7, #8]
 8008b34:	f003 0310 	and.w	r3, r3, #16
 8008b38:	60fb      	str	r3, [r7, #12]
 8008b3a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008b3e:	460b      	mov	r3, r1
 8008b40:	4313      	orrs	r3, r2
 8008b42:	d011      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b48:	3328      	adds	r3, #40	@ 0x28
 8008b4a:	2101      	movs	r1, #1
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f001 f9cf 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008b52:	4603      	mov	r3, r0
 8008b54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008b58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d003      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b70:	2100      	movs	r1, #0
 8008b72:	6039      	str	r1, [r7, #0]
 8008b74:	f003 0320 	and.w	r3, r3, #32
 8008b78:	607b      	str	r3, [r7, #4]
 8008b7a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008b7e:	460b      	mov	r3, r1
 8008b80:	4313      	orrs	r3, r2
 8008b82:	d011      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b88:	3328      	adds	r3, #40	@ 0x28
 8008b8a:	2102      	movs	r1, #2
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f001 f9af 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008b92:	4603      	mov	r3, r0
 8008b94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008b98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d003      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ba4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8008ba8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d101      	bne.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	e000      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bc2:	bf00      	nop
 8008bc4:	58024400 	.word	0x58024400

08008bc8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b090      	sub	sp, #64	@ 0x40
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008bd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bd6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008bda:	430b      	orrs	r3, r1
 8008bdc:	f040 8094 	bne.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008be0:	4b9b      	ldr	r3, [pc, #620]	@ (8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008be2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008be4:	f003 0307 	and.w	r3, r3, #7
 8008be8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bec:	2b04      	cmp	r3, #4
 8008bee:	f200 8087 	bhi.w	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf8:	08008c0d 	.word	0x08008c0d
 8008bfc:	08008c35 	.word	0x08008c35
 8008c00:	08008c5d 	.word	0x08008c5d
 8008c04:	08008cf9 	.word	0x08008cf9
 8008c08:	08008c85 	.word	0x08008c85
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c0c:	4b90      	ldr	r3, [pc, #576]	@ (8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c18:	d108      	bne.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f000 ff62 	bl	8009ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c28:	f000 bc93 	b.w	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c30:	f000 bc8f 	b.w	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c34:	4b86      	ldr	r3, [pc, #536]	@ (8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c40:	d108      	bne.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c42:	f107 0318 	add.w	r3, r7, #24
 8008c46:	4618      	mov	r0, r3
 8008c48:	f000 fca6 	bl	8009598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c50:	f000 bc7f 	b.w	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c54:	2300      	movs	r3, #0
 8008c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c58:	f000 bc7b 	b.w	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c5c:	4b7c      	ldr	r3, [pc, #496]	@ (8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c68:	d108      	bne.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c6a:	f107 030c 	add.w	r3, r7, #12
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 fde6 	bl	8009840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c78:	f000 bc6b 	b.w	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c80:	f000 bc67 	b.w	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c84:	4b72      	ldr	r3, [pc, #456]	@ (8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008c86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c88:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008c8c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c8e:	4b70      	ldr	r3, [pc, #448]	@ (8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f003 0304 	and.w	r3, r3, #4
 8008c96:	2b04      	cmp	r3, #4
 8008c98:	d10c      	bne.n	8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d109      	bne.n	8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ca0:	4b6b      	ldr	r3, [pc, #428]	@ (8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	08db      	lsrs	r3, r3, #3
 8008ca6:	f003 0303 	and.w	r3, r3, #3
 8008caa:	4a6a      	ldr	r2, [pc, #424]	@ (8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008cac:	fa22 f303 	lsr.w	r3, r2, r3
 8008cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cb2:	e01f      	b.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008cb4:	4b66      	ldr	r3, [pc, #408]	@ (8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cc0:	d106      	bne.n	8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cc8:	d102      	bne.n	8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008cca:	4b63      	ldr	r3, [pc, #396]	@ (8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cce:	e011      	b.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008cd0:	4b5f      	ldr	r3, [pc, #380]	@ (8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cdc:	d106      	bne.n	8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ce0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ce4:	d102      	bne.n	8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008ce6:	4b5d      	ldr	r3, [pc, #372]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cea:	e003      	b.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008cec:	2300      	movs	r3, #0
 8008cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008cf0:	f000 bc2f 	b.w	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008cf4:	f000 bc2d 	b.w	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008cf8:	4b59      	ldr	r3, [pc, #356]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cfc:	f000 bc29 	b.w	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008d00:	2300      	movs	r3, #0
 8008d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d04:	f000 bc25 	b.w	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008d08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d0c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008d10:	430b      	orrs	r3, r1
 8008d12:	f040 80a7 	bne.w	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008d16:	4b4e      	ldr	r3, [pc, #312]	@ (8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d1a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008d1e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008d26:	d054      	beq.n	8008dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008d2e:	f200 808b 	bhi.w	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d34:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008d38:	f000 8083 	beq.w	8008e42 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8008d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008d42:	f200 8081 	bhi.w	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d4c:	d02f      	beq.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d54:	d878      	bhi.n	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d004      	beq.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8008d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d62:	d012      	beq.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8008d64:	e070      	b.n	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d66:	4b3a      	ldr	r3, [pc, #232]	@ (8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d72:	d107      	bne.n	8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f000 feb5 	bl	8009ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d82:	e3e6      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d84:	2300      	movs	r3, #0
 8008d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d88:	e3e3      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d8a:	4b31      	ldr	r3, [pc, #196]	@ (8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d96:	d107      	bne.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d98:	f107 0318 	add.w	r3, r7, #24
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f000 fbfb 	bl	8009598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008da6:	e3d4      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008da8:	2300      	movs	r3, #0
 8008daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dac:	e3d1      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008dae:	4b28      	ldr	r3, [pc, #160]	@ (8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008db6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dba:	d107      	bne.n	8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dbc:	f107 030c 	add.w	r3, r7, #12
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f000 fd3d 	bl	8009840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dca:	e3c2      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dd0:	e3bf      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008dd2:	4b1f      	ldr	r3, [pc, #124]	@ (8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008dda:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ddc:	4b1c      	ldr	r3, [pc, #112]	@ (8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 0304 	and.w	r3, r3, #4
 8008de4:	2b04      	cmp	r3, #4
 8008de6:	d10c      	bne.n	8008e02 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8008de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d109      	bne.n	8008e02 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008dee:	4b18      	ldr	r3, [pc, #96]	@ (8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	08db      	lsrs	r3, r3, #3
 8008df4:	f003 0303 	and.w	r3, r3, #3
 8008df8:	4a16      	ldr	r2, [pc, #88]	@ (8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8008dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e00:	e01e      	b.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e02:	4b13      	ldr	r3, [pc, #76]	@ (8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e0e:	d106      	bne.n	8008e1e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e16:	d102      	bne.n	8008e1e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008e18:	4b0f      	ldr	r3, [pc, #60]	@ (8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e1c:	e010      	b.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e2a:	d106      	bne.n	8008e3a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e32:	d102      	bne.n	8008e3a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008e34:	4b09      	ldr	r3, [pc, #36]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e38:	e002      	b.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008e3e:	e388      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008e40:	e387      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008e42:	4b07      	ldr	r3, [pc, #28]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e46:	e384      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e4c:	e381      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008e4e:	bf00      	nop
 8008e50:	58024400 	.word	0x58024400
 8008e54:	03d09000 	.word	0x03d09000
 8008e58:	003d0900 	.word	0x003d0900
 8008e5c:	016e3600 	.word	0x016e3600
 8008e60:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008e64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e68:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008e6c:	430b      	orrs	r3, r1
 8008e6e:	f040 809c 	bne.w	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008e72:	4b9e      	ldr	r3, [pc, #632]	@ (80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e76:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008e7a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008e82:	d054      	beq.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008e8a:	f200 808b 	bhi.w	8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e90:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008e94:	f000 8083 	beq.w	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8008e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e9a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008e9e:	f200 8081 	bhi.w	8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ea8:	d02f      	beq.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008eb0:	d878      	bhi.n	8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d004      	beq.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008ebe:	d012      	beq.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008ec0:	e070      	b.n	8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ec2:	4b8a      	ldr	r3, [pc, #552]	@ (80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008eca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ece:	d107      	bne.n	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ed0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f000 fe07 	bl	8009ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ede:	e338      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ee4:	e335      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ee6:	4b81      	ldr	r3, [pc, #516]	@ (80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008eee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ef2:	d107      	bne.n	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ef4:	f107 0318 	add.w	r3, r7, #24
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f000 fb4d 	bl	8009598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f02:	e326      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f04:	2300      	movs	r3, #0
 8008f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f08:	e323      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f0a:	4b78      	ldr	r3, [pc, #480]	@ (80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f16:	d107      	bne.n	8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f18:	f107 030c 	add.w	r3, r7, #12
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f000 fc8f 	bl	8009840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f26:	e314      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f2c:	e311      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f2e:	4b6f      	ldr	r3, [pc, #444]	@ (80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f32:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008f36:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f38:	4b6c      	ldr	r3, [pc, #432]	@ (80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 0304 	and.w	r3, r3, #4
 8008f40:	2b04      	cmp	r3, #4
 8008f42:	d10c      	bne.n	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d109      	bne.n	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f4a:	4b68      	ldr	r3, [pc, #416]	@ (80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	08db      	lsrs	r3, r3, #3
 8008f50:	f003 0303 	and.w	r3, r3, #3
 8008f54:	4a66      	ldr	r2, [pc, #408]	@ (80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008f56:	fa22 f303 	lsr.w	r3, r2, r3
 8008f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f5c:	e01e      	b.n	8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f5e:	4b63      	ldr	r3, [pc, #396]	@ (80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f6a:	d106      	bne.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f72:	d102      	bne.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008f74:	4b5f      	ldr	r3, [pc, #380]	@ (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f78:	e010      	b.n	8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f7a:	4b5c      	ldr	r3, [pc, #368]	@ (80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f86:	d106      	bne.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f8e:	d102      	bne.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008f90:	4b59      	ldr	r3, [pc, #356]	@ (80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f94:	e002      	b.n	8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008f96:	2300      	movs	r3, #0
 8008f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008f9a:	e2da      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008f9c:	e2d9      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008f9e:	4b57      	ldr	r3, [pc, #348]	@ (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fa2:	e2d6      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fa8:	e2d3      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008faa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fae:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008fb2:	430b      	orrs	r3, r1
 8008fb4:	f040 80a7 	bne.w	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008fb8:	4b4c      	ldr	r3, [pc, #304]	@ (80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fbc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008fc0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008fc8:	d055      	beq.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008fd0:	f200 8096 	bhi.w	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fd6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008fda:	f000 8084 	beq.w	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fe0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008fe4:	f200 808c 	bhi.w	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fee:	d030      	beq.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ff6:	f200 8083 	bhi.w	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d004      	beq.n	800900a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8009000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009002:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009006:	d012      	beq.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8009008:	e07a      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800900a:	4b38      	ldr	r3, [pc, #224]	@ (80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009012:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009016:	d107      	bne.n	8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009018:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800901c:	4618      	mov	r0, r3
 800901e:	f000 fd63 	bl	8009ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009026:	e294      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009028:	2300      	movs	r3, #0
 800902a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800902c:	e291      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800902e:	4b2f      	ldr	r3, [pc, #188]	@ (80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009036:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800903a:	d107      	bne.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800903c:	f107 0318 	add.w	r3, r7, #24
 8009040:	4618      	mov	r0, r3
 8009042:	f000 faa9 	bl	8009598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800904a:	e282      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800904c:	2300      	movs	r3, #0
 800904e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009050:	e27f      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009052:	4b26      	ldr	r3, [pc, #152]	@ (80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800905a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800905e:	d107      	bne.n	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009060:	f107 030c 	add.w	r3, r7, #12
 8009064:	4618      	mov	r0, r3
 8009066:	f000 fbeb 	bl	8009840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800906e:	e270      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009070:	2300      	movs	r3, #0
 8009072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009074:	e26d      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009076:	4b1d      	ldr	r3, [pc, #116]	@ (80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800907a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800907e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009080:	4b1a      	ldr	r3, [pc, #104]	@ (80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f003 0304 	and.w	r3, r3, #4
 8009088:	2b04      	cmp	r3, #4
 800908a:	d10c      	bne.n	80090a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800908c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800908e:	2b00      	cmp	r3, #0
 8009090:	d109      	bne.n	80090a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009092:	4b16      	ldr	r3, [pc, #88]	@ (80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	08db      	lsrs	r3, r3, #3
 8009098:	f003 0303 	and.w	r3, r3, #3
 800909c:	4a14      	ldr	r2, [pc, #80]	@ (80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800909e:	fa22 f303 	lsr.w	r3, r2, r3
 80090a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090a4:	e01e      	b.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090a6:	4b11      	ldr	r3, [pc, #68]	@ (80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090b2:	d106      	bne.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80090b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090ba:	d102      	bne.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80090bc:	4b0d      	ldr	r3, [pc, #52]	@ (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80090be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090c0:	e010      	b.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090c2:	4b0a      	ldr	r3, [pc, #40]	@ (80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090ce:	d106      	bne.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80090d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090d6:	d102      	bne.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80090d8:	4b07      	ldr	r3, [pc, #28]	@ (80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090dc:	e002      	b.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80090de:	2300      	movs	r3, #0
 80090e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80090e2:	e236      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80090e4:	e235      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80090e6:	4b05      	ldr	r3, [pc, #20]	@ (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80090e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090ea:	e232      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80090ec:	58024400 	.word	0x58024400
 80090f0:	03d09000 	.word	0x03d09000
 80090f4:	003d0900 	.word	0x003d0900
 80090f8:	016e3600 	.word	0x016e3600
 80090fc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8009100:	2300      	movs	r3, #0
 8009102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009104:	e225      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009106:	e9d7 2300 	ldrd	r2, r3, [r7]
 800910a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800910e:	430b      	orrs	r3, r1
 8009110:	f040 8085 	bne.w	800921e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009114:	4b9c      	ldr	r3, [pc, #624]	@ (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009118:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800911c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800911e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009120:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009124:	d06b      	beq.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8009126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009128:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800912c:	d874      	bhi.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800912e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009130:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009134:	d056      	beq.n	80091e4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8009136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009138:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800913c:	d86c      	bhi.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800913e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009140:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009144:	d03b      	beq.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8009146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009148:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800914c:	d864      	bhi.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800914e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009150:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009154:	d021      	beq.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8009156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009158:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800915c:	d85c      	bhi.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800915e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009160:	2b00      	cmp	r3, #0
 8009162:	d004      	beq.n	800916e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8009164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009166:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800916a:	d004      	beq.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800916c:	e054      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800916e:	f7fe fb5f 	bl	8007830 <HAL_RCC_GetPCLK1Freq>
 8009172:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009174:	e1ed      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009176:	4b84      	ldr	r3, [pc, #528]	@ (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800917e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009182:	d107      	bne.n	8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009184:	f107 0318 	add.w	r3, r7, #24
 8009188:	4618      	mov	r0, r3
 800918a:	f000 fa05 	bl	8009598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009192:	e1de      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009194:	2300      	movs	r3, #0
 8009196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009198:	e1db      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800919a:	4b7b      	ldr	r3, [pc, #492]	@ (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80091a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091a6:	d107      	bne.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091a8:	f107 030c 	add.w	r3, r7, #12
 80091ac:	4618      	mov	r0, r3
 80091ae:	f000 fb47 	bl	8009840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091b6:	e1cc      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80091b8:	2300      	movs	r3, #0
 80091ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091bc:	e1c9      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80091be:	4b72      	ldr	r3, [pc, #456]	@ (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 0304 	and.w	r3, r3, #4
 80091c6:	2b04      	cmp	r3, #4
 80091c8:	d109      	bne.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091ca:	4b6f      	ldr	r3, [pc, #444]	@ (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	08db      	lsrs	r3, r3, #3
 80091d0:	f003 0303 	and.w	r3, r3, #3
 80091d4:	4a6d      	ldr	r2, [pc, #436]	@ (800938c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80091d6:	fa22 f303 	lsr.w	r3, r2, r3
 80091da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091dc:	e1b9      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80091de:	2300      	movs	r3, #0
 80091e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091e2:	e1b6      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80091e4:	4b68      	ldr	r3, [pc, #416]	@ (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091f0:	d102      	bne.n	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80091f2:	4b67      	ldr	r3, [pc, #412]	@ (8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80091f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091f6:	e1ac      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80091f8:	2300      	movs	r3, #0
 80091fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091fc:	e1a9      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80091fe:	4b62      	ldr	r3, [pc, #392]	@ (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009206:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800920a:	d102      	bne.n	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800920c:	4b61      	ldr	r3, [pc, #388]	@ (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800920e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009210:	e19f      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009212:	2300      	movs	r3, #0
 8009214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009216:	e19c      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009218:	2300      	movs	r3, #0
 800921a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800921c:	e199      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800921e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009222:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009226:	430b      	orrs	r3, r1
 8009228:	d173      	bne.n	8009312 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800922a:	4b57      	ldr	r3, [pc, #348]	@ (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800922c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800922e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009232:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009236:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800923a:	d02f      	beq.n	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800923c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800923e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009242:	d863      	bhi.n	800930c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8009244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009246:	2b00      	cmp	r3, #0
 8009248:	d004      	beq.n	8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800924a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800924c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009250:	d012      	beq.n	8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8009252:	e05b      	b.n	800930c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009254:	4b4c      	ldr	r3, [pc, #304]	@ (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800925c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009260:	d107      	bne.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009262:	f107 0318 	add.w	r3, r7, #24
 8009266:	4618      	mov	r0, r3
 8009268:	f000 f996 	bl	8009598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009270:	e16f      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009272:	2300      	movs	r3, #0
 8009274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009276:	e16c      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009278:	4b43      	ldr	r3, [pc, #268]	@ (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009280:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009284:	d107      	bne.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009286:	f107 030c 	add.w	r3, r7, #12
 800928a:	4618      	mov	r0, r3
 800928c:	f000 fad8 	bl	8009840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009294:	e15d      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009296:	2300      	movs	r3, #0
 8009298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800929a:	e15a      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800929c:	4b3a      	ldr	r3, [pc, #232]	@ (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800929e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80092a4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092a6:	4b38      	ldr	r3, [pc, #224]	@ (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 0304 	and.w	r3, r3, #4
 80092ae:	2b04      	cmp	r3, #4
 80092b0:	d10c      	bne.n	80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80092b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d109      	bne.n	80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092b8:	4b33      	ldr	r3, [pc, #204]	@ (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	08db      	lsrs	r3, r3, #3
 80092be:	f003 0303 	and.w	r3, r3, #3
 80092c2:	4a32      	ldr	r2, [pc, #200]	@ (800938c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80092c4:	fa22 f303 	lsr.w	r3, r2, r3
 80092c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092ca:	e01e      	b.n	800930a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092cc:	4b2e      	ldr	r3, [pc, #184]	@ (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092d8:	d106      	bne.n	80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80092da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092e0:	d102      	bne.n	80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80092e2:	4b2b      	ldr	r3, [pc, #172]	@ (8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80092e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092e6:	e010      	b.n	800930a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092e8:	4b27      	ldr	r3, [pc, #156]	@ (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092f4:	d106      	bne.n	8009304 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80092f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092fc:	d102      	bne.n	8009304 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80092fe:	4b25      	ldr	r3, [pc, #148]	@ (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8009300:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009302:	e002      	b.n	800930a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009304:	2300      	movs	r3, #0
 8009306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009308:	e123      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800930a:	e122      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800930c:	2300      	movs	r3, #0
 800930e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009310:	e11f      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009312:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009316:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800931a:	430b      	orrs	r3, r1
 800931c:	d13c      	bne.n	8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800931e:	4b1a      	ldr	r3, [pc, #104]	@ (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009322:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009326:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800932a:	2b00      	cmp	r3, #0
 800932c:	d004      	beq.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800932e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009334:	d012      	beq.n	800935c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8009336:	e023      	b.n	8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009338:	4b13      	ldr	r3, [pc, #76]	@ (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009340:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009344:	d107      	bne.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009346:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800934a:	4618      	mov	r0, r3
 800934c:	f000 fbcc 	bl	8009ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009354:	e0fd      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009356:	2300      	movs	r3, #0
 8009358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800935a:	e0fa      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800935c:	4b0a      	ldr	r3, [pc, #40]	@ (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009364:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009368:	d107      	bne.n	800937a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800936a:	f107 0318 	add.w	r3, r7, #24
 800936e:	4618      	mov	r0, r3
 8009370:	f000 f912 	bl	8009598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009374:	6a3b      	ldr	r3, [r7, #32]
 8009376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009378:	e0eb      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800937a:	2300      	movs	r3, #0
 800937c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800937e:	e0e8      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009380:	2300      	movs	r3, #0
 8009382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009384:	e0e5      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009386:	bf00      	nop
 8009388:	58024400 	.word	0x58024400
 800938c:	03d09000 	.word	0x03d09000
 8009390:	003d0900 	.word	0x003d0900
 8009394:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009398:	e9d7 2300 	ldrd	r2, r3, [r7]
 800939c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80093a0:	430b      	orrs	r3, r1
 80093a2:	f040 8085 	bne.w	80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80093a6:	4b6d      	ldr	r3, [pc, #436]	@ (800955c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80093a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093aa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80093ae:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80093b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80093b6:	d06b      	beq.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80093b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80093be:	d874      	bhi.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80093c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093c6:	d056      	beq.n	8009476 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80093c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093ce:	d86c      	bhi.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80093d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80093d6:	d03b      	beq.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 80093d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80093de:	d864      	bhi.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80093e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093e6:	d021      	beq.n	800942c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80093e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093ee:	d85c      	bhi.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80093f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d004      	beq.n	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80093f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093fc:	d004      	beq.n	8009408 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80093fe:	e054      	b.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009400:	f000 f8b4 	bl	800956c <HAL_RCCEx_GetD3PCLK1Freq>
 8009404:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009406:	e0a4      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009408:	4b54      	ldr	r3, [pc, #336]	@ (800955c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009410:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009414:	d107      	bne.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009416:	f107 0318 	add.w	r3, r7, #24
 800941a:	4618      	mov	r0, r3
 800941c:	f000 f8bc 	bl	8009598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009424:	e095      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009426:	2300      	movs	r3, #0
 8009428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800942a:	e092      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800942c:	4b4b      	ldr	r3, [pc, #300]	@ (800955c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009434:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009438:	d107      	bne.n	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800943a:	f107 030c 	add.w	r3, r7, #12
 800943e:	4618      	mov	r0, r3
 8009440:	f000 f9fe 	bl	8009840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009448:	e083      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800944e:	e080      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009450:	4b42      	ldr	r3, [pc, #264]	@ (800955c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f003 0304 	and.w	r3, r3, #4
 8009458:	2b04      	cmp	r3, #4
 800945a:	d109      	bne.n	8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800945c:	4b3f      	ldr	r3, [pc, #252]	@ (800955c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	08db      	lsrs	r3, r3, #3
 8009462:	f003 0303 	and.w	r3, r3, #3
 8009466:	4a3e      	ldr	r2, [pc, #248]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009468:	fa22 f303 	lsr.w	r3, r2, r3
 800946c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800946e:	e070      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009470:	2300      	movs	r3, #0
 8009472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009474:	e06d      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009476:	4b39      	ldr	r3, [pc, #228]	@ (800955c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800947e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009482:	d102      	bne.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8009484:	4b37      	ldr	r3, [pc, #220]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009488:	e063      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800948e:	e060      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009490:	4b32      	ldr	r3, [pc, #200]	@ (800955c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009498:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800949c:	d102      	bne.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800949e:	4b32      	ldr	r3, [pc, #200]	@ (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80094a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094a2:	e056      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80094a4:	2300      	movs	r3, #0
 80094a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094a8:	e053      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80094aa:	2300      	movs	r3, #0
 80094ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094ae:	e050      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80094b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094b4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80094b8:	430b      	orrs	r3, r1
 80094ba:	d148      	bne.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80094bc:	4b27      	ldr	r3, [pc, #156]	@ (800955c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80094be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80094c4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80094c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094cc:	d02a      	beq.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80094ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094d4:	d838      	bhi.n	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80094d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d004      	beq.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80094dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094e2:	d00d      	beq.n	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80094e4:	e030      	b.n	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80094e6:	4b1d      	ldr	r3, [pc, #116]	@ (800955c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094f2:	d102      	bne.n	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80094f4:	4b1c      	ldr	r3, [pc, #112]	@ (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80094f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094f8:	e02b      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80094fa:	2300      	movs	r3, #0
 80094fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094fe:	e028      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009500:	4b16      	ldr	r3, [pc, #88]	@ (800955c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009508:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800950c:	d107      	bne.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800950e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009512:	4618      	mov	r0, r3
 8009514:	f000 fae8 	bl	8009ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800951c:	e019      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800951e:	2300      	movs	r3, #0
 8009520:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009522:	e016      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009524:	4b0d      	ldr	r3, [pc, #52]	@ (800955c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800952c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009530:	d107      	bne.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009532:	f107 0318 	add.w	r3, r7, #24
 8009536:	4618      	mov	r0, r3
 8009538:	f000 f82e 	bl	8009598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009540:	e007      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009542:	2300      	movs	r3, #0
 8009544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009546:	e004      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009548:	2300      	movs	r3, #0
 800954a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800954c:	e001      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009554:	4618      	mov	r0, r3
 8009556:	3740      	adds	r7, #64	@ 0x40
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	58024400 	.word	0x58024400
 8009560:	03d09000 	.word	0x03d09000
 8009564:	003d0900 	.word	0x003d0900
 8009568:	016e3600 	.word	0x016e3600

0800956c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009570:	f7fe f92e 	bl	80077d0 <HAL_RCC_GetHCLKFreq>
 8009574:	4602      	mov	r2, r0
 8009576:	4b06      	ldr	r3, [pc, #24]	@ (8009590 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009578:	6a1b      	ldr	r3, [r3, #32]
 800957a:	091b      	lsrs	r3, r3, #4
 800957c:	f003 0307 	and.w	r3, r3, #7
 8009580:	4904      	ldr	r1, [pc, #16]	@ (8009594 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009582:	5ccb      	ldrb	r3, [r1, r3]
 8009584:	f003 031f 	and.w	r3, r3, #31
 8009588:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800958c:	4618      	mov	r0, r3
 800958e:	bd80      	pop	{r7, pc}
 8009590:	58024400 	.word	0x58024400
 8009594:	0800d13c 	.word	0x0800d13c

08009598 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009598:	b480      	push	{r7}
 800959a:	b089      	sub	sp, #36	@ 0x24
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095a0:	4ba1      	ldr	r3, [pc, #644]	@ (8009828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095a4:	f003 0303 	and.w	r3, r3, #3
 80095a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80095aa:	4b9f      	ldr	r3, [pc, #636]	@ (8009828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ae:	0b1b      	lsrs	r3, r3, #12
 80095b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80095b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80095b6:	4b9c      	ldr	r3, [pc, #624]	@ (8009828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ba:	091b      	lsrs	r3, r3, #4
 80095bc:	f003 0301 	and.w	r3, r3, #1
 80095c0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80095c2:	4b99      	ldr	r3, [pc, #612]	@ (8009828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095c6:	08db      	lsrs	r3, r3, #3
 80095c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095cc:	693a      	ldr	r2, [r7, #16]
 80095ce:	fb02 f303 	mul.w	r3, r2, r3
 80095d2:	ee07 3a90 	vmov	s15, r3
 80095d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f000 8111 	beq.w	8009808 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	2b02      	cmp	r3, #2
 80095ea:	f000 8083 	beq.w	80096f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	2b02      	cmp	r3, #2
 80095f2:	f200 80a1 	bhi.w	8009738 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d003      	beq.n	8009604 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80095fc:	69bb      	ldr	r3, [r7, #24]
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d056      	beq.n	80096b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009602:	e099      	b.n	8009738 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009604:	4b88      	ldr	r3, [pc, #544]	@ (8009828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f003 0320 	and.w	r3, r3, #32
 800960c:	2b00      	cmp	r3, #0
 800960e:	d02d      	beq.n	800966c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009610:	4b85      	ldr	r3, [pc, #532]	@ (8009828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	08db      	lsrs	r3, r3, #3
 8009616:	f003 0303 	and.w	r3, r3, #3
 800961a:	4a84      	ldr	r2, [pc, #528]	@ (800982c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800961c:	fa22 f303 	lsr.w	r3, r2, r3
 8009620:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	ee07 3a90 	vmov	s15, r3
 8009628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	ee07 3a90 	vmov	s15, r3
 8009632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800963a:	4b7b      	ldr	r3, [pc, #492]	@ (8009828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800963c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800963e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009642:	ee07 3a90 	vmov	s15, r3
 8009646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800964a:	ed97 6a03 	vldr	s12, [r7, #12]
 800964e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800965a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800965e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009666:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800966a:	e087      	b.n	800977c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	ee07 3a90 	vmov	s15, r3
 8009672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009676:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009834 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800967a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800967e:	4b6a      	ldr	r3, [pc, #424]	@ (8009828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009686:	ee07 3a90 	vmov	s15, r3
 800968a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800968e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009692:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800969a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800969e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096ae:	e065      	b.n	800977c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	ee07 3a90 	vmov	s15, r3
 80096b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009838 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80096be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096c2:	4b59      	ldr	r3, [pc, #356]	@ (8009828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ca:	ee07 3a90 	vmov	s15, r3
 80096ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80096d6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096f2:	e043      	b.n	800977c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	ee07 3a90 	vmov	s15, r3
 80096fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096fe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800983c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009706:	4b48      	ldr	r3, [pc, #288]	@ (8009828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800970a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800970e:	ee07 3a90 	vmov	s15, r3
 8009712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009716:	ed97 6a03 	vldr	s12, [r7, #12]
 800971a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800971e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009726:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800972a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800972e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009732:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009736:	e021      	b.n	800977c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	ee07 3a90 	vmov	s15, r3
 800973e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009742:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009838 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800974a:	4b37      	ldr	r3, [pc, #220]	@ (8009828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800974c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800974e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009752:	ee07 3a90 	vmov	s15, r3
 8009756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800975a:	ed97 6a03 	vldr	s12, [r7, #12]
 800975e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800976a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800976e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009776:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800977a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800977c:	4b2a      	ldr	r3, [pc, #168]	@ (8009828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800977e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009780:	0a5b      	lsrs	r3, r3, #9
 8009782:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009786:	ee07 3a90 	vmov	s15, r3
 800978a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800978e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009792:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009796:	edd7 6a07 	vldr	s13, [r7, #28]
 800979a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800979e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097a2:	ee17 2a90 	vmov	r2, s15
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80097aa:	4b1f      	ldr	r3, [pc, #124]	@ (8009828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ae:	0c1b      	lsrs	r3, r3, #16
 80097b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097b4:	ee07 3a90 	vmov	s15, r3
 80097b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80097c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097d0:	ee17 2a90 	vmov	r2, s15
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80097d8:	4b13      	ldr	r3, [pc, #76]	@ (8009828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097dc:	0e1b      	lsrs	r3, r3, #24
 80097de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097e2:	ee07 3a90 	vmov	s15, r3
 80097e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80097f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097fe:	ee17 2a90 	vmov	r2, s15
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009806:	e008      	b.n	800981a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	609a      	str	r2, [r3, #8]
}
 800981a:	bf00      	nop
 800981c:	3724      	adds	r7, #36	@ 0x24
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr
 8009826:	bf00      	nop
 8009828:	58024400 	.word	0x58024400
 800982c:	03d09000 	.word	0x03d09000
 8009830:	46000000 	.word	0x46000000
 8009834:	4c742400 	.word	0x4c742400
 8009838:	4a742400 	.word	0x4a742400
 800983c:	4bb71b00 	.word	0x4bb71b00

08009840 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009840:	b480      	push	{r7}
 8009842:	b089      	sub	sp, #36	@ 0x24
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009848:	4ba1      	ldr	r3, [pc, #644]	@ (8009ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800984a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800984c:	f003 0303 	and.w	r3, r3, #3
 8009850:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009852:	4b9f      	ldr	r3, [pc, #636]	@ (8009ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009856:	0d1b      	lsrs	r3, r3, #20
 8009858:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800985c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800985e:	4b9c      	ldr	r3, [pc, #624]	@ (8009ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009862:	0a1b      	lsrs	r3, r3, #8
 8009864:	f003 0301 	and.w	r3, r3, #1
 8009868:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800986a:	4b99      	ldr	r3, [pc, #612]	@ (8009ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800986c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800986e:	08db      	lsrs	r3, r3, #3
 8009870:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009874:	693a      	ldr	r2, [r7, #16]
 8009876:	fb02 f303 	mul.w	r3, r2, r3
 800987a:	ee07 3a90 	vmov	s15, r3
 800987e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009882:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	2b00      	cmp	r3, #0
 800988a:	f000 8111 	beq.w	8009ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	2b02      	cmp	r3, #2
 8009892:	f000 8083 	beq.w	800999c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	2b02      	cmp	r3, #2
 800989a:	f200 80a1 	bhi.w	80099e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d003      	beq.n	80098ac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d056      	beq.n	8009958 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80098aa:	e099      	b.n	80099e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098ac:	4b88      	ldr	r3, [pc, #544]	@ (8009ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 0320 	and.w	r3, r3, #32
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d02d      	beq.n	8009914 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098b8:	4b85      	ldr	r3, [pc, #532]	@ (8009ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	08db      	lsrs	r3, r3, #3
 80098be:	f003 0303 	and.w	r3, r3, #3
 80098c2:	4a84      	ldr	r2, [pc, #528]	@ (8009ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80098c4:	fa22 f303 	lsr.w	r3, r2, r3
 80098c8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	ee07 3a90 	vmov	s15, r3
 80098d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	ee07 3a90 	vmov	s15, r3
 80098da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098e2:	4b7b      	ldr	r3, [pc, #492]	@ (8009ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ea:	ee07 3a90 	vmov	s15, r3
 80098ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80098f6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80098fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800990a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800990e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009912:	e087      	b.n	8009a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	ee07 3a90 	vmov	s15, r3
 800991a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800991e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009adc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009926:	4b6a      	ldr	r3, [pc, #424]	@ (8009ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800992a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800992e:	ee07 3a90 	vmov	s15, r3
 8009932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009936:	ed97 6a03 	vldr	s12, [r7, #12]
 800993a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800993e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800994a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800994e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009956:	e065      	b.n	8009a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	ee07 3a90 	vmov	s15, r3
 800995e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009962:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800996a:	4b59      	ldr	r3, [pc, #356]	@ (8009ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800996c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800996e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009972:	ee07 3a90 	vmov	s15, r3
 8009976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800997a:	ed97 6a03 	vldr	s12, [r7, #12]
 800997e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800998a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800998e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800999a:	e043      	b.n	8009a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	ee07 3a90 	vmov	s15, r3
 80099a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099a6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80099aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ae:	4b48      	ldr	r3, [pc, #288]	@ (8009ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099b6:	ee07 3a90 	vmov	s15, r3
 80099ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099be:	ed97 6a03 	vldr	s12, [r7, #12]
 80099c2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099de:	e021      	b.n	8009a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	ee07 3a90 	vmov	s15, r3
 80099e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80099ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099f2:	4b37      	ldr	r3, [pc, #220]	@ (8009ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099fa:	ee07 3a90 	vmov	s15, r3
 80099fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a06:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a22:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009a24:	4b2a      	ldr	r3, [pc, #168]	@ (8009ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a28:	0a5b      	lsrs	r3, r3, #9
 8009a2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a2e:	ee07 3a90 	vmov	s15, r3
 8009a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a4a:	ee17 2a90 	vmov	r2, s15
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009a52:	4b1f      	ldr	r3, [pc, #124]	@ (8009ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a56:	0c1b      	lsrs	r3, r3, #16
 8009a58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a5c:	ee07 3a90 	vmov	s15, r3
 8009a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a78:	ee17 2a90 	vmov	r2, s15
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009a80:	4b13      	ldr	r3, [pc, #76]	@ (8009ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a84:	0e1b      	lsrs	r3, r3, #24
 8009a86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a8a:	ee07 3a90 	vmov	s15, r3
 8009a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009aa6:	ee17 2a90 	vmov	r2, s15
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009aae:	e008      	b.n	8009ac2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	609a      	str	r2, [r3, #8]
}
 8009ac2:	bf00      	nop
 8009ac4:	3724      	adds	r7, #36	@ 0x24
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	58024400 	.word	0x58024400
 8009ad4:	03d09000 	.word	0x03d09000
 8009ad8:	46000000 	.word	0x46000000
 8009adc:	4c742400 	.word	0x4c742400
 8009ae0:	4a742400 	.word	0x4a742400
 8009ae4:	4bb71b00 	.word	0x4bb71b00

08009ae8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b089      	sub	sp, #36	@ 0x24
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009af0:	4ba0      	ldr	r3, [pc, #640]	@ (8009d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009af4:	f003 0303 	and.w	r3, r3, #3
 8009af8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009afa:	4b9e      	ldr	r3, [pc, #632]	@ (8009d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009afe:	091b      	lsrs	r3, r3, #4
 8009b00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b04:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009b06:	4b9b      	ldr	r3, [pc, #620]	@ (8009d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b0a:	f003 0301 	and.w	r3, r3, #1
 8009b0e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009b10:	4b98      	ldr	r3, [pc, #608]	@ (8009d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b14:	08db      	lsrs	r3, r3, #3
 8009b16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b1a:	693a      	ldr	r2, [r7, #16]
 8009b1c:	fb02 f303 	mul.w	r3, r2, r3
 8009b20:	ee07 3a90 	vmov	s15, r3
 8009b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b28:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	f000 8111 	beq.w	8009d56 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	2b02      	cmp	r3, #2
 8009b38:	f000 8083 	beq.w	8009c42 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009b3c:	69bb      	ldr	r3, [r7, #24]
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	f200 80a1 	bhi.w	8009c86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d003      	beq.n	8009b52 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d056      	beq.n	8009bfe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009b50:	e099      	b.n	8009c86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b52:	4b88      	ldr	r3, [pc, #544]	@ (8009d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f003 0320 	and.w	r3, r3, #32
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d02d      	beq.n	8009bba <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b5e:	4b85      	ldr	r3, [pc, #532]	@ (8009d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	08db      	lsrs	r3, r3, #3
 8009b64:	f003 0303 	and.w	r3, r3, #3
 8009b68:	4a83      	ldr	r2, [pc, #524]	@ (8009d78 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b6e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	ee07 3a90 	vmov	s15, r3
 8009b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	ee07 3a90 	vmov	s15, r3
 8009b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b88:	4b7a      	ldr	r3, [pc, #488]	@ (8009d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b90:	ee07 3a90 	vmov	s15, r3
 8009b94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b98:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b9c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009d7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ba0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ba4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ba8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bb4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009bb8:	e087      	b.n	8009cca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	ee07 3a90 	vmov	s15, r3
 8009bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bc4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009d80 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009bc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bcc:	4b69      	ldr	r3, [pc, #420]	@ (8009d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd4:	ee07 3a90 	vmov	s15, r3
 8009bd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bdc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009be0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009d7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009be4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009be8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bf8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bfc:	e065      	b.n	8009cca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	ee07 3a90 	vmov	s15, r3
 8009c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c08:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009d84 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009c0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c10:	4b58      	ldr	r3, [pc, #352]	@ (8009d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c18:	ee07 3a90 	vmov	s15, r3
 8009c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c20:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c24:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009d7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c40:	e043      	b.n	8009cca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	ee07 3a90 	vmov	s15, r3
 8009c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c4c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009d88 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009c50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c54:	4b47      	ldr	r3, [pc, #284]	@ (8009d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c5c:	ee07 3a90 	vmov	s15, r3
 8009c60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c64:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c68:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009d7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c84:	e021      	b.n	8009cca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	ee07 3a90 	vmov	s15, r3
 8009c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c90:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009d80 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009c94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c98:	4b36      	ldr	r3, [pc, #216]	@ (8009d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ca0:	ee07 3a90 	vmov	s15, r3
 8009ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ca8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cac:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009d7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009cb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cc8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009cca:	4b2a      	ldr	r3, [pc, #168]	@ (8009d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cce:	0a5b      	lsrs	r3, r3, #9
 8009cd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cd4:	ee07 3a90 	vmov	s15, r3
 8009cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cdc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ce0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ce4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cf0:	ee17 2a90 	vmov	r2, s15
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8009d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cfc:	0c1b      	lsrs	r3, r3, #16
 8009cfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d02:	ee07 3a90 	vmov	s15, r3
 8009d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d12:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d1e:	ee17 2a90 	vmov	r2, s15
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009d26:	4b13      	ldr	r3, [pc, #76]	@ (8009d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d2a:	0e1b      	lsrs	r3, r3, #24
 8009d2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d30:	ee07 3a90 	vmov	s15, r3
 8009d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d40:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d4c:	ee17 2a90 	vmov	r2, s15
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009d54:	e008      	b.n	8009d68 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	609a      	str	r2, [r3, #8]
}
 8009d68:	bf00      	nop
 8009d6a:	3724      	adds	r7, #36	@ 0x24
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr
 8009d74:	58024400 	.word	0x58024400
 8009d78:	03d09000 	.word	0x03d09000
 8009d7c:	46000000 	.word	0x46000000
 8009d80:	4c742400 	.word	0x4c742400
 8009d84:	4a742400 	.word	0x4a742400
 8009d88:	4bb71b00 	.word	0x4bb71b00

08009d8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009d9a:	4b53      	ldr	r3, [pc, #332]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d9e:	f003 0303 	and.w	r3, r3, #3
 8009da2:	2b03      	cmp	r3, #3
 8009da4:	d101      	bne.n	8009daa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e099      	b.n	8009ede <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009daa:	4b4f      	ldr	r3, [pc, #316]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a4e      	ldr	r2, [pc, #312]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009db0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009db4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009db6:	f7f9 f941 	bl	800303c <HAL_GetTick>
 8009dba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009dbc:	e008      	b.n	8009dd0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009dbe:	f7f9 f93d 	bl	800303c <HAL_GetTick>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	1ad3      	subs	r3, r2, r3
 8009dc8:	2b02      	cmp	r3, #2
 8009dca:	d901      	bls.n	8009dd0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009dcc:	2303      	movs	r3, #3
 8009dce:	e086      	b.n	8009ede <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009dd0:	4b45      	ldr	r3, [pc, #276]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1f0      	bne.n	8009dbe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009ddc:	4b42      	ldr	r3, [pc, #264]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009de0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	031b      	lsls	r3, r3, #12
 8009dea:	493f      	ldr	r1, [pc, #252]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009dec:	4313      	orrs	r3, r2
 8009dee:	628b      	str	r3, [r1, #40]	@ 0x28
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	3b01      	subs	r3, #1
 8009df6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	3b01      	subs	r3, #1
 8009e00:	025b      	lsls	r3, r3, #9
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	431a      	orrs	r2, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	041b      	lsls	r3, r3, #16
 8009e0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009e12:	431a      	orrs	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	691b      	ldr	r3, [r3, #16]
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	061b      	lsls	r3, r3, #24
 8009e1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009e20:	4931      	ldr	r1, [pc, #196]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e22:	4313      	orrs	r3, r2
 8009e24:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009e26:	4b30      	ldr	r3, [pc, #192]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	695b      	ldr	r3, [r3, #20]
 8009e32:	492d      	ldr	r1, [pc, #180]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e34:	4313      	orrs	r3, r2
 8009e36:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009e38:	4b2b      	ldr	r3, [pc, #172]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e3c:	f023 0220 	bic.w	r2, r3, #32
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	699b      	ldr	r3, [r3, #24]
 8009e44:	4928      	ldr	r1, [pc, #160]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e46:	4313      	orrs	r3, r2
 8009e48:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009e4a:	4b27      	ldr	r3, [pc, #156]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e4e:	4a26      	ldr	r2, [pc, #152]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e50:	f023 0310 	bic.w	r3, r3, #16
 8009e54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009e56:	4b24      	ldr	r3, [pc, #144]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e5a:	4b24      	ldr	r3, [pc, #144]	@ (8009eec <RCCEx_PLL2_Config+0x160>)
 8009e5c:	4013      	ands	r3, r2
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	69d2      	ldr	r2, [r2, #28]
 8009e62:	00d2      	lsls	r2, r2, #3
 8009e64:	4920      	ldr	r1, [pc, #128]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e66:	4313      	orrs	r3, r2
 8009e68:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e70:	f043 0310 	orr.w	r3, r3, #16
 8009e74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d106      	bne.n	8009e8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e80:	4a19      	ldr	r2, [pc, #100]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009e86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009e88:	e00f      	b.n	8009eaa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d106      	bne.n	8009e9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009e90:	4b15      	ldr	r3, [pc, #84]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e94:	4a14      	ldr	r2, [pc, #80]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009e9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009e9c:	e005      	b.n	8009eaa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009e9e:	4b12      	ldr	r3, [pc, #72]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ea2:	4a11      	ldr	r2, [pc, #68]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009ea4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009ea8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a0e      	ldr	r2, [pc, #56]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009eb0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009eb6:	f7f9 f8c1 	bl	800303c <HAL_GetTick>
 8009eba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ebc:	e008      	b.n	8009ed0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009ebe:	f7f9 f8bd 	bl	800303c <HAL_GetTick>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	1ad3      	subs	r3, r2, r3
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d901      	bls.n	8009ed0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ecc:	2303      	movs	r3, #3
 8009ece:	e006      	b.n	8009ede <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ed0:	4b05      	ldr	r3, [pc, #20]	@ (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d0f0      	beq.n	8009ebe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	58024400 	.word	0x58024400
 8009eec:	ffff0007 	.word	0xffff0007

08009ef0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009efa:	2300      	movs	r3, #0
 8009efc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009efe:	4b53      	ldr	r3, [pc, #332]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f02:	f003 0303 	and.w	r3, r3, #3
 8009f06:	2b03      	cmp	r3, #3
 8009f08:	d101      	bne.n	8009f0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e099      	b.n	800a042 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009f0e:	4b4f      	ldr	r3, [pc, #316]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a4e      	ldr	r2, [pc, #312]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f1a:	f7f9 f88f 	bl	800303c <HAL_GetTick>
 8009f1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f20:	e008      	b.n	8009f34 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009f22:	f7f9 f88b 	bl	800303c <HAL_GetTick>
 8009f26:	4602      	mov	r2, r0
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	1ad3      	subs	r3, r2, r3
 8009f2c:	2b02      	cmp	r3, #2
 8009f2e:	d901      	bls.n	8009f34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009f30:	2303      	movs	r3, #3
 8009f32:	e086      	b.n	800a042 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f34:	4b45      	ldr	r3, [pc, #276]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1f0      	bne.n	8009f22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009f40:	4b42      	ldr	r3, [pc, #264]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f44:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	051b      	lsls	r3, r3, #20
 8009f4e:	493f      	ldr	r1, [pc, #252]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f50:	4313      	orrs	r3, r2
 8009f52:	628b      	str	r3, [r1, #40]	@ 0x28
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	3b01      	subs	r3, #1
 8009f64:	025b      	lsls	r3, r3, #9
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	431a      	orrs	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	041b      	lsls	r3, r3, #16
 8009f72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009f76:	431a      	orrs	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	3b01      	subs	r3, #1
 8009f7e:	061b      	lsls	r3, r3, #24
 8009f80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009f84:	4931      	ldr	r1, [pc, #196]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f86:	4313      	orrs	r3, r2
 8009f88:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009f8a:	4b30      	ldr	r3, [pc, #192]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	695b      	ldr	r3, [r3, #20]
 8009f96:	492d      	ldr	r1, [pc, #180]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	699b      	ldr	r3, [r3, #24]
 8009fa8:	4928      	ldr	r1, [pc, #160]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009faa:	4313      	orrs	r3, r2
 8009fac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009fae:	4b27      	ldr	r3, [pc, #156]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fb2:	4a26      	ldr	r2, [pc, #152]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009fb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009fb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009fba:	4b24      	ldr	r3, [pc, #144]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009fbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009fbe:	4b24      	ldr	r3, [pc, #144]	@ (800a050 <RCCEx_PLL3_Config+0x160>)
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	69d2      	ldr	r2, [r2, #28]
 8009fc6:	00d2      	lsls	r2, r2, #3
 8009fc8:	4920      	ldr	r1, [pc, #128]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009fce:	4b1f      	ldr	r3, [pc, #124]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009fd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009fd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d106      	bne.n	8009fee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fe4:	4a19      	ldr	r2, [pc, #100]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009fe6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009fea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009fec:	e00f      	b.n	800a00e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d106      	bne.n	800a002 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009ff4:	4b15      	ldr	r3, [pc, #84]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ff8:	4a14      	ldr	r2, [pc, #80]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009ffa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a000:	e005      	b.n	800a00e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a002:	4b12      	ldr	r3, [pc, #72]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 800a004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a006:	4a11      	ldr	r2, [pc, #68]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 800a008:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a00c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a00e:	4b0f      	ldr	r3, [pc, #60]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a0e      	ldr	r2, [pc, #56]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 800a014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a018:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a01a:	f7f9 f80f 	bl	800303c <HAL_GetTick>
 800a01e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a020:	e008      	b.n	800a034 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a022:	f7f9 f80b 	bl	800303c <HAL_GetTick>
 800a026:	4602      	mov	r2, r0
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	1ad3      	subs	r3, r2, r3
 800a02c:	2b02      	cmp	r3, #2
 800a02e:	d901      	bls.n	800a034 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a030:	2303      	movs	r3, #3
 800a032:	e006      	b.n	800a042 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a034:	4b05      	ldr	r3, [pc, #20]	@ (800a04c <RCCEx_PLL3_Config+0x15c>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d0f0      	beq.n	800a022 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a040:	7bfb      	ldrb	r3, [r7, #15]
}
 800a042:	4618      	mov	r0, r3
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	58024400 	.word	0x58024400
 800a050:	ffff0007 	.word	0xffff0007

0800a054 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b082      	sub	sp, #8
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d101      	bne.n	800a066 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	e049      	b.n	800a0fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d106      	bne.n	800a080 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2200      	movs	r2, #0
 800a076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f7f8 fd80 	bl	8002b80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2202      	movs	r2, #2
 800a084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	3304      	adds	r3, #4
 800a090:	4619      	mov	r1, r3
 800a092:	4610      	mov	r0, r2
 800a094:	f000 fac6 	bl	800a624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3708      	adds	r7, #8
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b082      	sub	sp, #8
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d101      	bne.n	800a114 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	e049      	b.n	800a1a8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d106      	bne.n	800a12e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 f841 	bl	800a1b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2202      	movs	r2, #2
 800a132:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	3304      	adds	r3, #4
 800a13e:	4619      	mov	r1, r3
 800a140:	4610      	mov	r0, r2
 800a142:	f000 fa6f 	bl	800a624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2201      	movs	r2, #1
 800a14a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2201      	movs	r2, #1
 800a152:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2201      	movs	r2, #1
 800a15a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2201      	movs	r2, #1
 800a162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2201      	movs	r2, #1
 800a16a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2201      	movs	r2, #1
 800a172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2201      	movs	r2, #1
 800a17a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2201      	movs	r2, #1
 800a182:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2201      	movs	r2, #1
 800a18a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2201      	movs	r2, #1
 800a192:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2201      	movs	r2, #1
 800a19a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a1a6:	2300      	movs	r3, #0
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3708      	adds	r7, #8
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a1b8:	bf00      	nop
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d109      	bne.n	800a1e8 <HAL_TIM_PWM_Start+0x24>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	bf14      	ite	ne
 800a1e0:	2301      	movne	r3, #1
 800a1e2:	2300      	moveq	r3, #0
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	e03c      	b.n	800a262 <HAL_TIM_PWM_Start+0x9e>
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	2b04      	cmp	r3, #4
 800a1ec:	d109      	bne.n	800a202 <HAL_TIM_PWM_Start+0x3e>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	bf14      	ite	ne
 800a1fa:	2301      	movne	r3, #1
 800a1fc:	2300      	moveq	r3, #0
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	e02f      	b.n	800a262 <HAL_TIM_PWM_Start+0x9e>
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	2b08      	cmp	r3, #8
 800a206:	d109      	bne.n	800a21c <HAL_TIM_PWM_Start+0x58>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	2b01      	cmp	r3, #1
 800a212:	bf14      	ite	ne
 800a214:	2301      	movne	r3, #1
 800a216:	2300      	moveq	r3, #0
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	e022      	b.n	800a262 <HAL_TIM_PWM_Start+0x9e>
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	2b0c      	cmp	r3, #12
 800a220:	d109      	bne.n	800a236 <HAL_TIM_PWM_Start+0x72>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	bf14      	ite	ne
 800a22e:	2301      	movne	r3, #1
 800a230:	2300      	moveq	r3, #0
 800a232:	b2db      	uxtb	r3, r3
 800a234:	e015      	b.n	800a262 <HAL_TIM_PWM_Start+0x9e>
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	2b10      	cmp	r3, #16
 800a23a:	d109      	bne.n	800a250 <HAL_TIM_PWM_Start+0x8c>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a242:	b2db      	uxtb	r3, r3
 800a244:	2b01      	cmp	r3, #1
 800a246:	bf14      	ite	ne
 800a248:	2301      	movne	r3, #1
 800a24a:	2300      	moveq	r3, #0
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	e008      	b.n	800a262 <HAL_TIM_PWM_Start+0x9e>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a256:	b2db      	uxtb	r3, r3
 800a258:	2b01      	cmp	r3, #1
 800a25a:	bf14      	ite	ne
 800a25c:	2301      	movne	r3, #1
 800a25e:	2300      	moveq	r3, #0
 800a260:	b2db      	uxtb	r3, r3
 800a262:	2b00      	cmp	r3, #0
 800a264:	d001      	beq.n	800a26a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a266:	2301      	movs	r3, #1
 800a268:	e0ab      	b.n	800a3c2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d104      	bne.n	800a27a <HAL_TIM_PWM_Start+0xb6>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2202      	movs	r2, #2
 800a274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a278:	e023      	b.n	800a2c2 <HAL_TIM_PWM_Start+0xfe>
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	2b04      	cmp	r3, #4
 800a27e:	d104      	bne.n	800a28a <HAL_TIM_PWM_Start+0xc6>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2202      	movs	r2, #2
 800a284:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a288:	e01b      	b.n	800a2c2 <HAL_TIM_PWM_Start+0xfe>
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	2b08      	cmp	r3, #8
 800a28e:	d104      	bne.n	800a29a <HAL_TIM_PWM_Start+0xd6>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2202      	movs	r2, #2
 800a294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a298:	e013      	b.n	800a2c2 <HAL_TIM_PWM_Start+0xfe>
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	2b0c      	cmp	r3, #12
 800a29e:	d104      	bne.n	800a2aa <HAL_TIM_PWM_Start+0xe6>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2202      	movs	r2, #2
 800a2a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a2a8:	e00b      	b.n	800a2c2 <HAL_TIM_PWM_Start+0xfe>
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	2b10      	cmp	r3, #16
 800a2ae:	d104      	bne.n	800a2ba <HAL_TIM_PWM_Start+0xf6>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a2b8:	e003      	b.n	800a2c2 <HAL_TIM_PWM_Start+0xfe>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2202      	movs	r2, #2
 800a2be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	6839      	ldr	r1, [r7, #0]
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f000 fd2c 	bl	800ad28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a3d      	ldr	r2, [pc, #244]	@ (800a3cc <HAL_TIM_PWM_Start+0x208>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d013      	beq.n	800a302 <HAL_TIM_PWM_Start+0x13e>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4a3c      	ldr	r2, [pc, #240]	@ (800a3d0 <HAL_TIM_PWM_Start+0x20c>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d00e      	beq.n	800a302 <HAL_TIM_PWM_Start+0x13e>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a3a      	ldr	r2, [pc, #232]	@ (800a3d4 <HAL_TIM_PWM_Start+0x210>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d009      	beq.n	800a302 <HAL_TIM_PWM_Start+0x13e>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4a39      	ldr	r2, [pc, #228]	@ (800a3d8 <HAL_TIM_PWM_Start+0x214>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d004      	beq.n	800a302 <HAL_TIM_PWM_Start+0x13e>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a37      	ldr	r2, [pc, #220]	@ (800a3dc <HAL_TIM_PWM_Start+0x218>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d101      	bne.n	800a306 <HAL_TIM_PWM_Start+0x142>
 800a302:	2301      	movs	r3, #1
 800a304:	e000      	b.n	800a308 <HAL_TIM_PWM_Start+0x144>
 800a306:	2300      	movs	r3, #0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d007      	beq.n	800a31c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a31a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a2a      	ldr	r2, [pc, #168]	@ (800a3cc <HAL_TIM_PWM_Start+0x208>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d02c      	beq.n	800a380 <HAL_TIM_PWM_Start+0x1bc>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a32e:	d027      	beq.n	800a380 <HAL_TIM_PWM_Start+0x1bc>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a2a      	ldr	r2, [pc, #168]	@ (800a3e0 <HAL_TIM_PWM_Start+0x21c>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d022      	beq.n	800a380 <HAL_TIM_PWM_Start+0x1bc>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a29      	ldr	r2, [pc, #164]	@ (800a3e4 <HAL_TIM_PWM_Start+0x220>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d01d      	beq.n	800a380 <HAL_TIM_PWM_Start+0x1bc>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a27      	ldr	r2, [pc, #156]	@ (800a3e8 <HAL_TIM_PWM_Start+0x224>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d018      	beq.n	800a380 <HAL_TIM_PWM_Start+0x1bc>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a1f      	ldr	r2, [pc, #124]	@ (800a3d0 <HAL_TIM_PWM_Start+0x20c>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d013      	beq.n	800a380 <HAL_TIM_PWM_Start+0x1bc>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a23      	ldr	r2, [pc, #140]	@ (800a3ec <HAL_TIM_PWM_Start+0x228>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d00e      	beq.n	800a380 <HAL_TIM_PWM_Start+0x1bc>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a1b      	ldr	r2, [pc, #108]	@ (800a3d4 <HAL_TIM_PWM_Start+0x210>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d009      	beq.n	800a380 <HAL_TIM_PWM_Start+0x1bc>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a1f      	ldr	r2, [pc, #124]	@ (800a3f0 <HAL_TIM_PWM_Start+0x22c>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d004      	beq.n	800a380 <HAL_TIM_PWM_Start+0x1bc>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a1e      	ldr	r2, [pc, #120]	@ (800a3f4 <HAL_TIM_PWM_Start+0x230>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d115      	bne.n	800a3ac <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	689a      	ldr	r2, [r3, #8]
 800a386:	4b1c      	ldr	r3, [pc, #112]	@ (800a3f8 <HAL_TIM_PWM_Start+0x234>)
 800a388:	4013      	ands	r3, r2
 800a38a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2b06      	cmp	r3, #6
 800a390:	d015      	beq.n	800a3be <HAL_TIM_PWM_Start+0x1fa>
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a398:	d011      	beq.n	800a3be <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f042 0201 	orr.w	r2, r2, #1
 800a3a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3aa:	e008      	b.n	800a3be <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f042 0201 	orr.w	r2, r2, #1
 800a3ba:	601a      	str	r2, [r3, #0]
 800a3bc:	e000      	b.n	800a3c0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a3c0:	2300      	movs	r3, #0
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	40010000 	.word	0x40010000
 800a3d0:	40010400 	.word	0x40010400
 800a3d4:	40014000 	.word	0x40014000
 800a3d8:	40014400 	.word	0x40014400
 800a3dc:	40014800 	.word	0x40014800
 800a3e0:	40000400 	.word	0x40000400
 800a3e4:	40000800 	.word	0x40000800
 800a3e8:	40000c00 	.word	0x40000c00
 800a3ec:	40001800 	.word	0x40001800
 800a3f0:	4000e000 	.word	0x4000e000
 800a3f4:	4000e400 	.word	0x4000e400
 800a3f8:	00010007 	.word	0x00010007

0800a3fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b086      	sub	sp, #24
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a408:	2300      	movs	r3, #0
 800a40a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a412:	2b01      	cmp	r3, #1
 800a414:	d101      	bne.n	800a41a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a416:	2302      	movs	r3, #2
 800a418:	e0ff      	b.n	800a61a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2201      	movs	r2, #1
 800a41e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2b14      	cmp	r3, #20
 800a426:	f200 80f0 	bhi.w	800a60a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a42a:	a201      	add	r2, pc, #4	@ (adr r2, 800a430 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a430:	0800a485 	.word	0x0800a485
 800a434:	0800a60b 	.word	0x0800a60b
 800a438:	0800a60b 	.word	0x0800a60b
 800a43c:	0800a60b 	.word	0x0800a60b
 800a440:	0800a4c5 	.word	0x0800a4c5
 800a444:	0800a60b 	.word	0x0800a60b
 800a448:	0800a60b 	.word	0x0800a60b
 800a44c:	0800a60b 	.word	0x0800a60b
 800a450:	0800a507 	.word	0x0800a507
 800a454:	0800a60b 	.word	0x0800a60b
 800a458:	0800a60b 	.word	0x0800a60b
 800a45c:	0800a60b 	.word	0x0800a60b
 800a460:	0800a547 	.word	0x0800a547
 800a464:	0800a60b 	.word	0x0800a60b
 800a468:	0800a60b 	.word	0x0800a60b
 800a46c:	0800a60b 	.word	0x0800a60b
 800a470:	0800a589 	.word	0x0800a589
 800a474:	0800a60b 	.word	0x0800a60b
 800a478:	0800a60b 	.word	0x0800a60b
 800a47c:	0800a60b 	.word	0x0800a60b
 800a480:	0800a5c9 	.word	0x0800a5c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	68b9      	ldr	r1, [r7, #8]
 800a48a:	4618      	mov	r0, r3
 800a48c:	f000 f976 	bl	800a77c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	699a      	ldr	r2, [r3, #24]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f042 0208 	orr.w	r2, r2, #8
 800a49e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	699a      	ldr	r2, [r3, #24]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f022 0204 	bic.w	r2, r2, #4
 800a4ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	6999      	ldr	r1, [r3, #24]
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	691a      	ldr	r2, [r3, #16]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	430a      	orrs	r2, r1
 800a4c0:	619a      	str	r2, [r3, #24]
      break;
 800a4c2:	e0a5      	b.n	800a610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	68b9      	ldr	r1, [r7, #8]
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f000 f9e6 	bl	800a89c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	699a      	ldr	r2, [r3, #24]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a4de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	699a      	ldr	r2, [r3, #24]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a4ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	6999      	ldr	r1, [r3, #24]
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	021a      	lsls	r2, r3, #8
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	430a      	orrs	r2, r1
 800a502:	619a      	str	r2, [r3, #24]
      break;
 800a504:	e084      	b.n	800a610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	68b9      	ldr	r1, [r7, #8]
 800a50c:	4618      	mov	r0, r3
 800a50e:	f000 fa4f 	bl	800a9b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	69da      	ldr	r2, [r3, #28]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f042 0208 	orr.w	r2, r2, #8
 800a520:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	69da      	ldr	r2, [r3, #28]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f022 0204 	bic.w	r2, r2, #4
 800a530:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	69d9      	ldr	r1, [r3, #28]
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	691a      	ldr	r2, [r3, #16]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	430a      	orrs	r2, r1
 800a542:	61da      	str	r2, [r3, #28]
      break;
 800a544:	e064      	b.n	800a610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	68b9      	ldr	r1, [r7, #8]
 800a54c:	4618      	mov	r0, r3
 800a54e:	f000 fab7 	bl	800aac0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	69da      	ldr	r2, [r3, #28]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a560:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	69da      	ldr	r2, [r3, #28]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a570:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	69d9      	ldr	r1, [r3, #28]
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	691b      	ldr	r3, [r3, #16]
 800a57c:	021a      	lsls	r2, r3, #8
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	430a      	orrs	r2, r1
 800a584:	61da      	str	r2, [r3, #28]
      break;
 800a586:	e043      	b.n	800a610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	68b9      	ldr	r1, [r7, #8]
 800a58e:	4618      	mov	r0, r3
 800a590:	f000 fb00 	bl	800ab94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f042 0208 	orr.w	r2, r2, #8
 800a5a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f022 0204 	bic.w	r2, r2, #4
 800a5b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	691a      	ldr	r2, [r3, #16]
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	430a      	orrs	r2, r1
 800a5c4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a5c6:	e023      	b.n	800a610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	68b9      	ldr	r1, [r7, #8]
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f000 fb44 	bl	800ac5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a5e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a5f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	691b      	ldr	r3, [r3, #16]
 800a5fe:	021a      	lsls	r2, r3, #8
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	430a      	orrs	r2, r1
 800a606:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a608:	e002      	b.n	800a610 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a60a:	2301      	movs	r3, #1
 800a60c:	75fb      	strb	r3, [r7, #23]
      break;
 800a60e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2200      	movs	r2, #0
 800a614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a618:	7dfb      	ldrb	r3, [r7, #23]
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3718      	adds	r7, #24
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop

0800a624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a624:	b480      	push	{r7}
 800a626:	b085      	sub	sp, #20
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	4a47      	ldr	r2, [pc, #284]	@ (800a754 <TIM_Base_SetConfig+0x130>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d013      	beq.n	800a664 <TIM_Base_SetConfig+0x40>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a642:	d00f      	beq.n	800a664 <TIM_Base_SetConfig+0x40>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	4a44      	ldr	r2, [pc, #272]	@ (800a758 <TIM_Base_SetConfig+0x134>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d00b      	beq.n	800a664 <TIM_Base_SetConfig+0x40>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	4a43      	ldr	r2, [pc, #268]	@ (800a75c <TIM_Base_SetConfig+0x138>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d007      	beq.n	800a664 <TIM_Base_SetConfig+0x40>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	4a42      	ldr	r2, [pc, #264]	@ (800a760 <TIM_Base_SetConfig+0x13c>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d003      	beq.n	800a664 <TIM_Base_SetConfig+0x40>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	4a41      	ldr	r2, [pc, #260]	@ (800a764 <TIM_Base_SetConfig+0x140>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d108      	bne.n	800a676 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a66a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	68fa      	ldr	r2, [r7, #12]
 800a672:	4313      	orrs	r3, r2
 800a674:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	4a36      	ldr	r2, [pc, #216]	@ (800a754 <TIM_Base_SetConfig+0x130>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d027      	beq.n	800a6ce <TIM_Base_SetConfig+0xaa>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a684:	d023      	beq.n	800a6ce <TIM_Base_SetConfig+0xaa>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	4a33      	ldr	r2, [pc, #204]	@ (800a758 <TIM_Base_SetConfig+0x134>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d01f      	beq.n	800a6ce <TIM_Base_SetConfig+0xaa>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4a32      	ldr	r2, [pc, #200]	@ (800a75c <TIM_Base_SetConfig+0x138>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d01b      	beq.n	800a6ce <TIM_Base_SetConfig+0xaa>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	4a31      	ldr	r2, [pc, #196]	@ (800a760 <TIM_Base_SetConfig+0x13c>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d017      	beq.n	800a6ce <TIM_Base_SetConfig+0xaa>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	4a30      	ldr	r2, [pc, #192]	@ (800a764 <TIM_Base_SetConfig+0x140>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d013      	beq.n	800a6ce <TIM_Base_SetConfig+0xaa>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	4a2f      	ldr	r2, [pc, #188]	@ (800a768 <TIM_Base_SetConfig+0x144>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d00f      	beq.n	800a6ce <TIM_Base_SetConfig+0xaa>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	4a2e      	ldr	r2, [pc, #184]	@ (800a76c <TIM_Base_SetConfig+0x148>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d00b      	beq.n	800a6ce <TIM_Base_SetConfig+0xaa>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	4a2d      	ldr	r2, [pc, #180]	@ (800a770 <TIM_Base_SetConfig+0x14c>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d007      	beq.n	800a6ce <TIM_Base_SetConfig+0xaa>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	4a2c      	ldr	r2, [pc, #176]	@ (800a774 <TIM_Base_SetConfig+0x150>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d003      	beq.n	800a6ce <TIM_Base_SetConfig+0xaa>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	4a2b      	ldr	r2, [pc, #172]	@ (800a778 <TIM_Base_SetConfig+0x154>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d108      	bne.n	800a6e0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a6d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	68fa      	ldr	r2, [r7, #12]
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	695b      	ldr	r3, [r3, #20]
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	689a      	ldr	r2, [r3, #8]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	4a14      	ldr	r2, [pc, #80]	@ (800a754 <TIM_Base_SetConfig+0x130>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d00f      	beq.n	800a726 <TIM_Base_SetConfig+0x102>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	4a16      	ldr	r2, [pc, #88]	@ (800a764 <TIM_Base_SetConfig+0x140>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d00b      	beq.n	800a726 <TIM_Base_SetConfig+0x102>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	4a15      	ldr	r2, [pc, #84]	@ (800a768 <TIM_Base_SetConfig+0x144>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d007      	beq.n	800a726 <TIM_Base_SetConfig+0x102>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	4a14      	ldr	r2, [pc, #80]	@ (800a76c <TIM_Base_SetConfig+0x148>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d003      	beq.n	800a726 <TIM_Base_SetConfig+0x102>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	4a13      	ldr	r2, [pc, #76]	@ (800a770 <TIM_Base_SetConfig+0x14c>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d103      	bne.n	800a72e <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	691a      	ldr	r2, [r3, #16]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f043 0204 	orr.w	r2, r3, #4
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2201      	movs	r2, #1
 800a73e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	68fa      	ldr	r2, [r7, #12]
 800a744:	601a      	str	r2, [r3, #0]
}
 800a746:	bf00      	nop
 800a748:	3714      	adds	r7, #20
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr
 800a752:	bf00      	nop
 800a754:	40010000 	.word	0x40010000
 800a758:	40000400 	.word	0x40000400
 800a75c:	40000800 	.word	0x40000800
 800a760:	40000c00 	.word	0x40000c00
 800a764:	40010400 	.word	0x40010400
 800a768:	40014000 	.word	0x40014000
 800a76c:	40014400 	.word	0x40014400
 800a770:	40014800 	.word	0x40014800
 800a774:	4000e000 	.word	0x4000e000
 800a778:	4000e400 	.word	0x4000e400

0800a77c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b087      	sub	sp, #28
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6a1b      	ldr	r3, [r3, #32]
 800a78a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6a1b      	ldr	r3, [r3, #32]
 800a790:	f023 0201 	bic.w	r2, r3, #1
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	699b      	ldr	r3, [r3, #24]
 800a7a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a7a4:	68fa      	ldr	r2, [r7, #12]
 800a7a6:	4b37      	ldr	r3, [pc, #220]	@ (800a884 <TIM_OC1_SetConfig+0x108>)
 800a7a8:	4013      	ands	r3, r2
 800a7aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f023 0303 	bic.w	r3, r3, #3
 800a7b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	f023 0302 	bic.w	r3, r3, #2
 800a7c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	697a      	ldr	r2, [r7, #20]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4a2d      	ldr	r2, [pc, #180]	@ (800a888 <TIM_OC1_SetConfig+0x10c>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d00f      	beq.n	800a7f8 <TIM_OC1_SetConfig+0x7c>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4a2c      	ldr	r2, [pc, #176]	@ (800a88c <TIM_OC1_SetConfig+0x110>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d00b      	beq.n	800a7f8 <TIM_OC1_SetConfig+0x7c>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	4a2b      	ldr	r2, [pc, #172]	@ (800a890 <TIM_OC1_SetConfig+0x114>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d007      	beq.n	800a7f8 <TIM_OC1_SetConfig+0x7c>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	4a2a      	ldr	r2, [pc, #168]	@ (800a894 <TIM_OC1_SetConfig+0x118>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d003      	beq.n	800a7f8 <TIM_OC1_SetConfig+0x7c>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	4a29      	ldr	r2, [pc, #164]	@ (800a898 <TIM_OC1_SetConfig+0x11c>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d10c      	bne.n	800a812 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	f023 0308 	bic.w	r3, r3, #8
 800a7fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	697a      	ldr	r2, [r7, #20]
 800a806:	4313      	orrs	r3, r2
 800a808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	f023 0304 	bic.w	r3, r3, #4
 800a810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a1c      	ldr	r2, [pc, #112]	@ (800a888 <TIM_OC1_SetConfig+0x10c>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d00f      	beq.n	800a83a <TIM_OC1_SetConfig+0xbe>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4a1b      	ldr	r2, [pc, #108]	@ (800a88c <TIM_OC1_SetConfig+0x110>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d00b      	beq.n	800a83a <TIM_OC1_SetConfig+0xbe>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4a1a      	ldr	r2, [pc, #104]	@ (800a890 <TIM_OC1_SetConfig+0x114>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d007      	beq.n	800a83a <TIM_OC1_SetConfig+0xbe>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a19      	ldr	r2, [pc, #100]	@ (800a894 <TIM_OC1_SetConfig+0x118>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d003      	beq.n	800a83a <TIM_OC1_SetConfig+0xbe>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4a18      	ldr	r2, [pc, #96]	@ (800a898 <TIM_OC1_SetConfig+0x11c>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d111      	bne.n	800a85e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	695b      	ldr	r3, [r3, #20]
 800a84e:	693a      	ldr	r2, [r7, #16]
 800a850:	4313      	orrs	r3, r2
 800a852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	699b      	ldr	r3, [r3, #24]
 800a858:	693a      	ldr	r2, [r7, #16]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	693a      	ldr	r2, [r7, #16]
 800a862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	685a      	ldr	r2, [r3, #4]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	697a      	ldr	r2, [r7, #20]
 800a876:	621a      	str	r2, [r3, #32]
}
 800a878:	bf00      	nop
 800a87a:	371c      	adds	r7, #28
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr
 800a884:	fffeff8f 	.word	0xfffeff8f
 800a888:	40010000 	.word	0x40010000
 800a88c:	40010400 	.word	0x40010400
 800a890:	40014000 	.word	0x40014000
 800a894:	40014400 	.word	0x40014400
 800a898:	40014800 	.word	0x40014800

0800a89c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b087      	sub	sp, #28
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6a1b      	ldr	r3, [r3, #32]
 800a8aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6a1b      	ldr	r3, [r3, #32]
 800a8b0:	f023 0210 	bic.w	r2, r3, #16
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	699b      	ldr	r3, [r3, #24]
 800a8c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a8c4:	68fa      	ldr	r2, [r7, #12]
 800a8c6:	4b34      	ldr	r3, [pc, #208]	@ (800a998 <TIM_OC2_SetConfig+0xfc>)
 800a8c8:	4013      	ands	r3, r2
 800a8ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a8d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	021b      	lsls	r3, r3, #8
 800a8da:	68fa      	ldr	r2, [r7, #12]
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	f023 0320 	bic.w	r3, r3, #32
 800a8e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	689b      	ldr	r3, [r3, #8]
 800a8ec:	011b      	lsls	r3, r3, #4
 800a8ee:	697a      	ldr	r2, [r7, #20]
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	4a29      	ldr	r2, [pc, #164]	@ (800a99c <TIM_OC2_SetConfig+0x100>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d003      	beq.n	800a904 <TIM_OC2_SetConfig+0x68>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4a28      	ldr	r2, [pc, #160]	@ (800a9a0 <TIM_OC2_SetConfig+0x104>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d10d      	bne.n	800a920 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a90a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	68db      	ldr	r3, [r3, #12]
 800a910:	011b      	lsls	r3, r3, #4
 800a912:	697a      	ldr	r2, [r7, #20]
 800a914:	4313      	orrs	r3, r2
 800a916:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a91e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	4a1e      	ldr	r2, [pc, #120]	@ (800a99c <TIM_OC2_SetConfig+0x100>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d00f      	beq.n	800a948 <TIM_OC2_SetConfig+0xac>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4a1d      	ldr	r2, [pc, #116]	@ (800a9a0 <TIM_OC2_SetConfig+0x104>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d00b      	beq.n	800a948 <TIM_OC2_SetConfig+0xac>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	4a1c      	ldr	r2, [pc, #112]	@ (800a9a4 <TIM_OC2_SetConfig+0x108>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d007      	beq.n	800a948 <TIM_OC2_SetConfig+0xac>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4a1b      	ldr	r2, [pc, #108]	@ (800a9a8 <TIM_OC2_SetConfig+0x10c>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d003      	beq.n	800a948 <TIM_OC2_SetConfig+0xac>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4a1a      	ldr	r2, [pc, #104]	@ (800a9ac <TIM_OC2_SetConfig+0x110>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d113      	bne.n	800a970 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a94e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a956:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	695b      	ldr	r3, [r3, #20]
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	693a      	ldr	r2, [r7, #16]
 800a960:	4313      	orrs	r3, r2
 800a962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	699b      	ldr	r3, [r3, #24]
 800a968:	009b      	lsls	r3, r3, #2
 800a96a:	693a      	ldr	r2, [r7, #16]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	693a      	ldr	r2, [r7, #16]
 800a974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	68fa      	ldr	r2, [r7, #12]
 800a97a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	685a      	ldr	r2, [r3, #4]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	697a      	ldr	r2, [r7, #20]
 800a988:	621a      	str	r2, [r3, #32]
}
 800a98a:	bf00      	nop
 800a98c:	371c      	adds	r7, #28
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop
 800a998:	feff8fff 	.word	0xfeff8fff
 800a99c:	40010000 	.word	0x40010000
 800a9a0:	40010400 	.word	0x40010400
 800a9a4:	40014000 	.word	0x40014000
 800a9a8:	40014400 	.word	0x40014400
 800a9ac:	40014800 	.word	0x40014800

0800a9b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b087      	sub	sp, #28
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6a1b      	ldr	r3, [r3, #32]
 800a9be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6a1b      	ldr	r3, [r3, #32]
 800a9c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	69db      	ldr	r3, [r3, #28]
 800a9d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a9d8:	68fa      	ldr	r2, [r7, #12]
 800a9da:	4b33      	ldr	r3, [pc, #204]	@ (800aaa8 <TIM_OC3_SetConfig+0xf8>)
 800a9dc:	4013      	ands	r3, r2
 800a9de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f023 0303 	bic.w	r3, r3, #3
 800a9e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	68fa      	ldr	r2, [r7, #12]
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a9f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	021b      	lsls	r3, r3, #8
 800aa00:	697a      	ldr	r2, [r7, #20]
 800aa02:	4313      	orrs	r3, r2
 800aa04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	4a28      	ldr	r2, [pc, #160]	@ (800aaac <TIM_OC3_SetConfig+0xfc>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d003      	beq.n	800aa16 <TIM_OC3_SetConfig+0x66>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4a27      	ldr	r2, [pc, #156]	@ (800aab0 <TIM_OC3_SetConfig+0x100>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d10d      	bne.n	800aa32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aa1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	021b      	lsls	r3, r3, #8
 800aa24:	697a      	ldr	r2, [r7, #20]
 800aa26:	4313      	orrs	r3, r2
 800aa28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aa30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	4a1d      	ldr	r2, [pc, #116]	@ (800aaac <TIM_OC3_SetConfig+0xfc>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d00f      	beq.n	800aa5a <TIM_OC3_SetConfig+0xaa>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	4a1c      	ldr	r2, [pc, #112]	@ (800aab0 <TIM_OC3_SetConfig+0x100>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d00b      	beq.n	800aa5a <TIM_OC3_SetConfig+0xaa>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	4a1b      	ldr	r2, [pc, #108]	@ (800aab4 <TIM_OC3_SetConfig+0x104>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d007      	beq.n	800aa5a <TIM_OC3_SetConfig+0xaa>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	4a1a      	ldr	r2, [pc, #104]	@ (800aab8 <TIM_OC3_SetConfig+0x108>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d003      	beq.n	800aa5a <TIM_OC3_SetConfig+0xaa>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	4a19      	ldr	r2, [pc, #100]	@ (800aabc <TIM_OC3_SetConfig+0x10c>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d113      	bne.n	800aa82 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aa60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aa68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	695b      	ldr	r3, [r3, #20]
 800aa6e:	011b      	lsls	r3, r3, #4
 800aa70:	693a      	ldr	r2, [r7, #16]
 800aa72:	4313      	orrs	r3, r2
 800aa74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	699b      	ldr	r3, [r3, #24]
 800aa7a:	011b      	lsls	r3, r3, #4
 800aa7c:	693a      	ldr	r2, [r7, #16]
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	693a      	ldr	r2, [r7, #16]
 800aa86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	68fa      	ldr	r2, [r7, #12]
 800aa8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	685a      	ldr	r2, [r3, #4]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	697a      	ldr	r2, [r7, #20]
 800aa9a:	621a      	str	r2, [r3, #32]
}
 800aa9c:	bf00      	nop
 800aa9e:	371c      	adds	r7, #28
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr
 800aaa8:	fffeff8f 	.word	0xfffeff8f
 800aaac:	40010000 	.word	0x40010000
 800aab0:	40010400 	.word	0x40010400
 800aab4:	40014000 	.word	0x40014000
 800aab8:	40014400 	.word	0x40014400
 800aabc:	40014800 	.word	0x40014800

0800aac0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b087      	sub	sp, #28
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a1b      	ldr	r3, [r3, #32]
 800aace:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a1b      	ldr	r3, [r3, #32]
 800aad4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	69db      	ldr	r3, [r3, #28]
 800aae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	4b24      	ldr	r3, [pc, #144]	@ (800ab7c <TIM_OC4_SetConfig+0xbc>)
 800aaec:	4013      	ands	r3, r2
 800aaee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aaf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	021b      	lsls	r3, r3, #8
 800aafe:	68fa      	ldr	r2, [r7, #12]
 800ab00:	4313      	orrs	r3, r2
 800ab02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ab0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	031b      	lsls	r3, r3, #12
 800ab12:	693a      	ldr	r2, [r7, #16]
 800ab14:	4313      	orrs	r3, r2
 800ab16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	4a19      	ldr	r2, [pc, #100]	@ (800ab80 <TIM_OC4_SetConfig+0xc0>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d00f      	beq.n	800ab40 <TIM_OC4_SetConfig+0x80>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4a18      	ldr	r2, [pc, #96]	@ (800ab84 <TIM_OC4_SetConfig+0xc4>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d00b      	beq.n	800ab40 <TIM_OC4_SetConfig+0x80>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	4a17      	ldr	r2, [pc, #92]	@ (800ab88 <TIM_OC4_SetConfig+0xc8>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d007      	beq.n	800ab40 <TIM_OC4_SetConfig+0x80>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	4a16      	ldr	r2, [pc, #88]	@ (800ab8c <TIM_OC4_SetConfig+0xcc>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d003      	beq.n	800ab40 <TIM_OC4_SetConfig+0x80>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	4a15      	ldr	r2, [pc, #84]	@ (800ab90 <TIM_OC4_SetConfig+0xd0>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d109      	bne.n	800ab54 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ab46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	695b      	ldr	r3, [r3, #20]
 800ab4c:	019b      	lsls	r3, r3, #6
 800ab4e:	697a      	ldr	r2, [r7, #20]
 800ab50:	4313      	orrs	r3, r2
 800ab52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	697a      	ldr	r2, [r7, #20]
 800ab58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	68fa      	ldr	r2, [r7, #12]
 800ab5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	685a      	ldr	r2, [r3, #4]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	693a      	ldr	r2, [r7, #16]
 800ab6c:	621a      	str	r2, [r3, #32]
}
 800ab6e:	bf00      	nop
 800ab70:	371c      	adds	r7, #28
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr
 800ab7a:	bf00      	nop
 800ab7c:	feff8fff 	.word	0xfeff8fff
 800ab80:	40010000 	.word	0x40010000
 800ab84:	40010400 	.word	0x40010400
 800ab88:	40014000 	.word	0x40014000
 800ab8c:	40014400 	.word	0x40014400
 800ab90:	40014800 	.word	0x40014800

0800ab94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b087      	sub	sp, #28
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6a1b      	ldr	r3, [r3, #32]
 800aba2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6a1b      	ldr	r3, [r3, #32]
 800aba8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	4b21      	ldr	r3, [pc, #132]	@ (800ac44 <TIM_OC5_SetConfig+0xb0>)
 800abc0:	4013      	ands	r3, r2
 800abc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	68fa      	ldr	r2, [r7, #12]
 800abca:	4313      	orrs	r3, r2
 800abcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800abd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	041b      	lsls	r3, r3, #16
 800abdc:	693a      	ldr	r2, [r7, #16]
 800abde:	4313      	orrs	r3, r2
 800abe0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4a18      	ldr	r2, [pc, #96]	@ (800ac48 <TIM_OC5_SetConfig+0xb4>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d00f      	beq.n	800ac0a <TIM_OC5_SetConfig+0x76>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	4a17      	ldr	r2, [pc, #92]	@ (800ac4c <TIM_OC5_SetConfig+0xb8>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d00b      	beq.n	800ac0a <TIM_OC5_SetConfig+0x76>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	4a16      	ldr	r2, [pc, #88]	@ (800ac50 <TIM_OC5_SetConfig+0xbc>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d007      	beq.n	800ac0a <TIM_OC5_SetConfig+0x76>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4a15      	ldr	r2, [pc, #84]	@ (800ac54 <TIM_OC5_SetConfig+0xc0>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d003      	beq.n	800ac0a <TIM_OC5_SetConfig+0x76>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	4a14      	ldr	r2, [pc, #80]	@ (800ac58 <TIM_OC5_SetConfig+0xc4>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d109      	bne.n	800ac1e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	695b      	ldr	r3, [r3, #20]
 800ac16:	021b      	lsls	r3, r3, #8
 800ac18:	697a      	ldr	r2, [r7, #20]
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	697a      	ldr	r2, [r7, #20]
 800ac22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	68fa      	ldr	r2, [r7, #12]
 800ac28:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	685a      	ldr	r2, [r3, #4]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	693a      	ldr	r2, [r7, #16]
 800ac36:	621a      	str	r2, [r3, #32]
}
 800ac38:	bf00      	nop
 800ac3a:	371c      	adds	r7, #28
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr
 800ac44:	fffeff8f 	.word	0xfffeff8f
 800ac48:	40010000 	.word	0x40010000
 800ac4c:	40010400 	.word	0x40010400
 800ac50:	40014000 	.word	0x40014000
 800ac54:	40014400 	.word	0x40014400
 800ac58:	40014800 	.word	0x40014800

0800ac5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b087      	sub	sp, #28
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6a1b      	ldr	r3, [r3, #32]
 800ac6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6a1b      	ldr	r3, [r3, #32]
 800ac70:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	4b22      	ldr	r3, [pc, #136]	@ (800ad10 <TIM_OC6_SetConfig+0xb4>)
 800ac88:	4013      	ands	r3, r2
 800ac8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	021b      	lsls	r3, r3, #8
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	4313      	orrs	r3, r2
 800ac96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ac9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	051b      	lsls	r3, r3, #20
 800aca6:	693a      	ldr	r2, [r7, #16]
 800aca8:	4313      	orrs	r3, r2
 800acaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	4a19      	ldr	r2, [pc, #100]	@ (800ad14 <TIM_OC6_SetConfig+0xb8>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d00f      	beq.n	800acd4 <TIM_OC6_SetConfig+0x78>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	4a18      	ldr	r2, [pc, #96]	@ (800ad18 <TIM_OC6_SetConfig+0xbc>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d00b      	beq.n	800acd4 <TIM_OC6_SetConfig+0x78>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	4a17      	ldr	r2, [pc, #92]	@ (800ad1c <TIM_OC6_SetConfig+0xc0>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d007      	beq.n	800acd4 <TIM_OC6_SetConfig+0x78>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	4a16      	ldr	r2, [pc, #88]	@ (800ad20 <TIM_OC6_SetConfig+0xc4>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d003      	beq.n	800acd4 <TIM_OC6_SetConfig+0x78>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	4a15      	ldr	r2, [pc, #84]	@ (800ad24 <TIM_OC6_SetConfig+0xc8>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d109      	bne.n	800ace8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800acda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	695b      	ldr	r3, [r3, #20]
 800ace0:	029b      	lsls	r3, r3, #10
 800ace2:	697a      	ldr	r2, [r7, #20]
 800ace4:	4313      	orrs	r3, r2
 800ace6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	697a      	ldr	r2, [r7, #20]
 800acec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	685a      	ldr	r2, [r3, #4]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	693a      	ldr	r2, [r7, #16]
 800ad00:	621a      	str	r2, [r3, #32]
}
 800ad02:	bf00      	nop
 800ad04:	371c      	adds	r7, #28
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop
 800ad10:	feff8fff 	.word	0xfeff8fff
 800ad14:	40010000 	.word	0x40010000
 800ad18:	40010400 	.word	0x40010400
 800ad1c:	40014000 	.word	0x40014000
 800ad20:	40014400 	.word	0x40014400
 800ad24:	40014800 	.word	0x40014800

0800ad28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b087      	sub	sp, #28
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	f003 031f 	and.w	r3, r3, #31
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ad40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	6a1a      	ldr	r2, [r3, #32]
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	43db      	mvns	r3, r3
 800ad4a:	401a      	ands	r2, r3
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	6a1a      	ldr	r2, [r3, #32]
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	f003 031f 	and.w	r3, r3, #31
 800ad5a:	6879      	ldr	r1, [r7, #4]
 800ad5c:	fa01 f303 	lsl.w	r3, r1, r3
 800ad60:	431a      	orrs	r2, r3
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	621a      	str	r2, [r3, #32]
}
 800ad66:	bf00      	nop
 800ad68:	371c      	adds	r7, #28
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr
	...

0800ad74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b085      	sub	sp, #20
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d101      	bne.n	800ad90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ad8c:	2302      	movs	r3, #2
 800ad8e:	e073      	b.n	800ae78 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2201      	movs	r2, #1
 800ad94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	68db      	ldr	r3, [r3, #12]
 800ada2:	4313      	orrs	r3, r2
 800ada4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	4313      	orrs	r3, r2
 800adb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	4313      	orrs	r3, r2
 800adc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4313      	orrs	r3, r2
 800adce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	691b      	ldr	r3, [r3, #16]
 800adda:	4313      	orrs	r3, r2
 800addc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	695b      	ldr	r3, [r3, #20]
 800ade8:	4313      	orrs	r3, r2
 800adea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adf6:	4313      	orrs	r3, r2
 800adf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	699b      	ldr	r3, [r3, #24]
 800ae04:	041b      	lsls	r3, r3, #16
 800ae06:	4313      	orrs	r3, r2
 800ae08:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	69db      	ldr	r3, [r3, #28]
 800ae14:	4313      	orrs	r3, r2
 800ae16:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4a19      	ldr	r2, [pc, #100]	@ (800ae84 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d004      	beq.n	800ae2c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4a18      	ldr	r2, [pc, #96]	@ (800ae88 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d11c      	bne.n	800ae66 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae36:	051b      	lsls	r3, r3, #20
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	6a1b      	ldr	r3, [r3, #32]
 800ae46:	4313      	orrs	r3, r2
 800ae48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae54:	4313      	orrs	r3, r2
 800ae56:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae62:	4313      	orrs	r3, r2
 800ae64:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	68fa      	ldr	r2, [r7, #12]
 800ae6c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ae76:	2300      	movs	r3, #0
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3714      	adds	r7, #20
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr
 800ae84:	40010000 	.word	0x40010000
 800ae88:	40010400 	.word	0x40010400

0800ae8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d101      	bne.n	800ae9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e042      	b.n	800af24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d106      	bne.n	800aeb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f7f7 fec3 	bl	8002c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2224      	movs	r2, #36	@ 0x24
 800aeba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f022 0201 	bic.w	r2, r2, #1
 800aecc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d002      	beq.n	800aedc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 ff38 	bl	800bd4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 f8c9 	bl	800b074 <UART_SetConfig>
 800aee2:	4603      	mov	r3, r0
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d101      	bne.n	800aeec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aee8:	2301      	movs	r3, #1
 800aeea:	e01b      	b.n	800af24 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	685a      	ldr	r2, [r3, #4]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aefa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	689a      	ldr	r2, [r3, #8]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800af0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f042 0201 	orr.w	r2, r2, #1
 800af1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f000 ffb7 	bl	800be90 <UART_CheckIdleState>
 800af22:	4603      	mov	r3, r0
}
 800af24:	4618      	mov	r0, r3
 800af26:	3708      	adds	r7, #8
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b08a      	sub	sp, #40	@ 0x28
 800af30:	af02      	add	r7, sp, #8
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	603b      	str	r3, [r7, #0]
 800af38:	4613      	mov	r3, r2
 800af3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af42:	2b20      	cmp	r3, #32
 800af44:	d17b      	bne.n	800b03e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d002      	beq.n	800af52 <HAL_UART_Transmit+0x26>
 800af4c:	88fb      	ldrh	r3, [r7, #6]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d101      	bne.n	800af56 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800af52:	2301      	movs	r3, #1
 800af54:	e074      	b.n	800b040 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	2200      	movs	r2, #0
 800af5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2221      	movs	r2, #33	@ 0x21
 800af62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800af66:	f7f8 f869 	bl	800303c <HAL_GetTick>
 800af6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	88fa      	ldrh	r2, [r7, #6]
 800af70:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	88fa      	ldrh	r2, [r7, #6]
 800af78:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af84:	d108      	bne.n	800af98 <HAL_UART_Transmit+0x6c>
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	691b      	ldr	r3, [r3, #16]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d104      	bne.n	800af98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800af8e:	2300      	movs	r3, #0
 800af90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	61bb      	str	r3, [r7, #24]
 800af96:	e003      	b.n	800afa0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800af9c:	2300      	movs	r3, #0
 800af9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800afa0:	e030      	b.n	800b004 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	9300      	str	r3, [sp, #0]
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	2200      	movs	r2, #0
 800afaa:	2180      	movs	r1, #128	@ 0x80
 800afac:	68f8      	ldr	r0, [r7, #12]
 800afae:	f001 f819 	bl	800bfe4 <UART_WaitOnFlagUntilTimeout>
 800afb2:	4603      	mov	r3, r0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d005      	beq.n	800afc4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2220      	movs	r2, #32
 800afbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800afc0:	2303      	movs	r3, #3
 800afc2:	e03d      	b.n	800b040 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800afc4:	69fb      	ldr	r3, [r7, #28]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d10b      	bne.n	800afe2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800afca:	69bb      	ldr	r3, [r7, #24]
 800afcc:	881b      	ldrh	r3, [r3, #0]
 800afce:	461a      	mov	r2, r3
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800afd8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800afda:	69bb      	ldr	r3, [r7, #24]
 800afdc:	3302      	adds	r3, #2
 800afde:	61bb      	str	r3, [r7, #24]
 800afe0:	e007      	b.n	800aff2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800afe2:	69fb      	ldr	r3, [r7, #28]
 800afe4:	781a      	ldrb	r2, [r3, #0]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	3301      	adds	r3, #1
 800aff0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aff8:	b29b      	uxth	r3, r3
 800affa:	3b01      	subs	r3, #1
 800affc:	b29a      	uxth	r2, r3
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d1c8      	bne.n	800afa2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	9300      	str	r3, [sp, #0]
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	2200      	movs	r2, #0
 800b018:	2140      	movs	r1, #64	@ 0x40
 800b01a:	68f8      	ldr	r0, [r7, #12]
 800b01c:	f000 ffe2 	bl	800bfe4 <UART_WaitOnFlagUntilTimeout>
 800b020:	4603      	mov	r3, r0
 800b022:	2b00      	cmp	r3, #0
 800b024:	d005      	beq.n	800b032 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2220      	movs	r2, #32
 800b02a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b02e:	2303      	movs	r3, #3
 800b030:	e006      	b.n	800b040 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2220      	movs	r2, #32
 800b036:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b03a:	2300      	movs	r3, #0
 800b03c:	e000      	b.n	800b040 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b03e:	2302      	movs	r3, #2
  }
}
 800b040:	4618      	mov	r0, r3
 800b042:	3720      	adds	r7, #32
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800b048:	b480      	push	{r7}
 800b04a:	b085      	sub	sp, #20
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b056:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b05e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800b060:	68fa      	ldr	r2, [r7, #12]
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	4313      	orrs	r3, r2
}
 800b066:	4618      	mov	r0, r3
 800b068:	3714      	adds	r7, #20
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr
	...

0800b074 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b078:	b092      	sub	sp, #72	@ 0x48
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b07e:	2300      	movs	r3, #0
 800b080:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	689a      	ldr	r2, [r3, #8]
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	691b      	ldr	r3, [r3, #16]
 800b08c:	431a      	orrs	r2, r3
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	695b      	ldr	r3, [r3, #20]
 800b092:	431a      	orrs	r2, r3
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	69db      	ldr	r3, [r3, #28]
 800b098:	4313      	orrs	r3, r2
 800b09a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	4bbe      	ldr	r3, [pc, #760]	@ (800b39c <UART_SetConfig+0x328>)
 800b0a4:	4013      	ands	r3, r2
 800b0a6:	697a      	ldr	r2, [r7, #20]
 800b0a8:	6812      	ldr	r2, [r2, #0]
 800b0aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b0ac:	430b      	orrs	r3, r1
 800b0ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	68da      	ldr	r2, [r3, #12]
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	430a      	orrs	r2, r1
 800b0c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	699b      	ldr	r3, [r3, #24]
 800b0ca:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4ab3      	ldr	r2, [pc, #716]	@ (800b3a0 <UART_SetConfig+0x32c>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d004      	beq.n	800b0e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	6a1b      	ldr	r3, [r3, #32]
 800b0da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	689a      	ldr	r2, [r3, #8]
 800b0e6:	4baf      	ldr	r3, [pc, #700]	@ (800b3a4 <UART_SetConfig+0x330>)
 800b0e8:	4013      	ands	r3, r2
 800b0ea:	697a      	ldr	r2, [r7, #20]
 800b0ec:	6812      	ldr	r2, [r2, #0]
 800b0ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b0f0:	430b      	orrs	r3, r1
 800b0f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0fa:	f023 010f 	bic.w	r1, r3, #15
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	430a      	orrs	r2, r1
 800b108:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4aa6      	ldr	r2, [pc, #664]	@ (800b3a8 <UART_SetConfig+0x334>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d177      	bne.n	800b204 <UART_SetConfig+0x190>
 800b114:	4ba5      	ldr	r3, [pc, #660]	@ (800b3ac <UART_SetConfig+0x338>)
 800b116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b118:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b11c:	2b28      	cmp	r3, #40	@ 0x28
 800b11e:	d86d      	bhi.n	800b1fc <UART_SetConfig+0x188>
 800b120:	a201      	add	r2, pc, #4	@ (adr r2, 800b128 <UART_SetConfig+0xb4>)
 800b122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b126:	bf00      	nop
 800b128:	0800b1cd 	.word	0x0800b1cd
 800b12c:	0800b1fd 	.word	0x0800b1fd
 800b130:	0800b1fd 	.word	0x0800b1fd
 800b134:	0800b1fd 	.word	0x0800b1fd
 800b138:	0800b1fd 	.word	0x0800b1fd
 800b13c:	0800b1fd 	.word	0x0800b1fd
 800b140:	0800b1fd 	.word	0x0800b1fd
 800b144:	0800b1fd 	.word	0x0800b1fd
 800b148:	0800b1d5 	.word	0x0800b1d5
 800b14c:	0800b1fd 	.word	0x0800b1fd
 800b150:	0800b1fd 	.word	0x0800b1fd
 800b154:	0800b1fd 	.word	0x0800b1fd
 800b158:	0800b1fd 	.word	0x0800b1fd
 800b15c:	0800b1fd 	.word	0x0800b1fd
 800b160:	0800b1fd 	.word	0x0800b1fd
 800b164:	0800b1fd 	.word	0x0800b1fd
 800b168:	0800b1dd 	.word	0x0800b1dd
 800b16c:	0800b1fd 	.word	0x0800b1fd
 800b170:	0800b1fd 	.word	0x0800b1fd
 800b174:	0800b1fd 	.word	0x0800b1fd
 800b178:	0800b1fd 	.word	0x0800b1fd
 800b17c:	0800b1fd 	.word	0x0800b1fd
 800b180:	0800b1fd 	.word	0x0800b1fd
 800b184:	0800b1fd 	.word	0x0800b1fd
 800b188:	0800b1e5 	.word	0x0800b1e5
 800b18c:	0800b1fd 	.word	0x0800b1fd
 800b190:	0800b1fd 	.word	0x0800b1fd
 800b194:	0800b1fd 	.word	0x0800b1fd
 800b198:	0800b1fd 	.word	0x0800b1fd
 800b19c:	0800b1fd 	.word	0x0800b1fd
 800b1a0:	0800b1fd 	.word	0x0800b1fd
 800b1a4:	0800b1fd 	.word	0x0800b1fd
 800b1a8:	0800b1ed 	.word	0x0800b1ed
 800b1ac:	0800b1fd 	.word	0x0800b1fd
 800b1b0:	0800b1fd 	.word	0x0800b1fd
 800b1b4:	0800b1fd 	.word	0x0800b1fd
 800b1b8:	0800b1fd 	.word	0x0800b1fd
 800b1bc:	0800b1fd 	.word	0x0800b1fd
 800b1c0:	0800b1fd 	.word	0x0800b1fd
 800b1c4:	0800b1fd 	.word	0x0800b1fd
 800b1c8:	0800b1f5 	.word	0x0800b1f5
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1d2:	e326      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b1d4:	2304      	movs	r3, #4
 800b1d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1da:	e322      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b1dc:	2308      	movs	r3, #8
 800b1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1e2:	e31e      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b1e4:	2310      	movs	r3, #16
 800b1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1ea:	e31a      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b1ec:	2320      	movs	r3, #32
 800b1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1f2:	e316      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b1f4:	2340      	movs	r3, #64	@ 0x40
 800b1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1fa:	e312      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b1fc:	2380      	movs	r3, #128	@ 0x80
 800b1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b202:	e30e      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4a69      	ldr	r2, [pc, #420]	@ (800b3b0 <UART_SetConfig+0x33c>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d130      	bne.n	800b270 <UART_SetConfig+0x1fc>
 800b20e:	4b67      	ldr	r3, [pc, #412]	@ (800b3ac <UART_SetConfig+0x338>)
 800b210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b212:	f003 0307 	and.w	r3, r3, #7
 800b216:	2b05      	cmp	r3, #5
 800b218:	d826      	bhi.n	800b268 <UART_SetConfig+0x1f4>
 800b21a:	a201      	add	r2, pc, #4	@ (adr r2, 800b220 <UART_SetConfig+0x1ac>)
 800b21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b220:	0800b239 	.word	0x0800b239
 800b224:	0800b241 	.word	0x0800b241
 800b228:	0800b249 	.word	0x0800b249
 800b22c:	0800b251 	.word	0x0800b251
 800b230:	0800b259 	.word	0x0800b259
 800b234:	0800b261 	.word	0x0800b261
 800b238:	2300      	movs	r3, #0
 800b23a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b23e:	e2f0      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b240:	2304      	movs	r3, #4
 800b242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b246:	e2ec      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b248:	2308      	movs	r3, #8
 800b24a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b24e:	e2e8      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b250:	2310      	movs	r3, #16
 800b252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b256:	e2e4      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b258:	2320      	movs	r3, #32
 800b25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b25e:	e2e0      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b260:	2340      	movs	r3, #64	@ 0x40
 800b262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b266:	e2dc      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b268:	2380      	movs	r3, #128	@ 0x80
 800b26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b26e:	e2d8      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4a4f      	ldr	r2, [pc, #316]	@ (800b3b4 <UART_SetConfig+0x340>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d130      	bne.n	800b2dc <UART_SetConfig+0x268>
 800b27a:	4b4c      	ldr	r3, [pc, #304]	@ (800b3ac <UART_SetConfig+0x338>)
 800b27c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b27e:	f003 0307 	and.w	r3, r3, #7
 800b282:	2b05      	cmp	r3, #5
 800b284:	d826      	bhi.n	800b2d4 <UART_SetConfig+0x260>
 800b286:	a201      	add	r2, pc, #4	@ (adr r2, 800b28c <UART_SetConfig+0x218>)
 800b288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b28c:	0800b2a5 	.word	0x0800b2a5
 800b290:	0800b2ad 	.word	0x0800b2ad
 800b294:	0800b2b5 	.word	0x0800b2b5
 800b298:	0800b2bd 	.word	0x0800b2bd
 800b29c:	0800b2c5 	.word	0x0800b2c5
 800b2a0:	0800b2cd 	.word	0x0800b2cd
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2aa:	e2ba      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b2ac:	2304      	movs	r3, #4
 800b2ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2b2:	e2b6      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b2b4:	2308      	movs	r3, #8
 800b2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2ba:	e2b2      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b2bc:	2310      	movs	r3, #16
 800b2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2c2:	e2ae      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b2c4:	2320      	movs	r3, #32
 800b2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2ca:	e2aa      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b2cc:	2340      	movs	r3, #64	@ 0x40
 800b2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2d2:	e2a6      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b2d4:	2380      	movs	r3, #128	@ 0x80
 800b2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2da:	e2a2      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a35      	ldr	r2, [pc, #212]	@ (800b3b8 <UART_SetConfig+0x344>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d130      	bne.n	800b348 <UART_SetConfig+0x2d4>
 800b2e6:	4b31      	ldr	r3, [pc, #196]	@ (800b3ac <UART_SetConfig+0x338>)
 800b2e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2ea:	f003 0307 	and.w	r3, r3, #7
 800b2ee:	2b05      	cmp	r3, #5
 800b2f0:	d826      	bhi.n	800b340 <UART_SetConfig+0x2cc>
 800b2f2:	a201      	add	r2, pc, #4	@ (adr r2, 800b2f8 <UART_SetConfig+0x284>)
 800b2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f8:	0800b311 	.word	0x0800b311
 800b2fc:	0800b319 	.word	0x0800b319
 800b300:	0800b321 	.word	0x0800b321
 800b304:	0800b329 	.word	0x0800b329
 800b308:	0800b331 	.word	0x0800b331
 800b30c:	0800b339 	.word	0x0800b339
 800b310:	2300      	movs	r3, #0
 800b312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b316:	e284      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b318:	2304      	movs	r3, #4
 800b31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b31e:	e280      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b320:	2308      	movs	r3, #8
 800b322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b326:	e27c      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b328:	2310      	movs	r3, #16
 800b32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b32e:	e278      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b330:	2320      	movs	r3, #32
 800b332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b336:	e274      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b338:	2340      	movs	r3, #64	@ 0x40
 800b33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b33e:	e270      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b340:	2380      	movs	r3, #128	@ 0x80
 800b342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b346:	e26c      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a1b      	ldr	r2, [pc, #108]	@ (800b3bc <UART_SetConfig+0x348>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d142      	bne.n	800b3d8 <UART_SetConfig+0x364>
 800b352:	4b16      	ldr	r3, [pc, #88]	@ (800b3ac <UART_SetConfig+0x338>)
 800b354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b356:	f003 0307 	and.w	r3, r3, #7
 800b35a:	2b05      	cmp	r3, #5
 800b35c:	d838      	bhi.n	800b3d0 <UART_SetConfig+0x35c>
 800b35e:	a201      	add	r2, pc, #4	@ (adr r2, 800b364 <UART_SetConfig+0x2f0>)
 800b360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b364:	0800b37d 	.word	0x0800b37d
 800b368:	0800b385 	.word	0x0800b385
 800b36c:	0800b38d 	.word	0x0800b38d
 800b370:	0800b395 	.word	0x0800b395
 800b374:	0800b3c1 	.word	0x0800b3c1
 800b378:	0800b3c9 	.word	0x0800b3c9
 800b37c:	2300      	movs	r3, #0
 800b37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b382:	e24e      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b384:	2304      	movs	r3, #4
 800b386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b38a:	e24a      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b38c:	2308      	movs	r3, #8
 800b38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b392:	e246      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b394:	2310      	movs	r3, #16
 800b396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b39a:	e242      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b39c:	cfff69f3 	.word	0xcfff69f3
 800b3a0:	58000c00 	.word	0x58000c00
 800b3a4:	11fff4ff 	.word	0x11fff4ff
 800b3a8:	40011000 	.word	0x40011000
 800b3ac:	58024400 	.word	0x58024400
 800b3b0:	40004400 	.word	0x40004400
 800b3b4:	40004800 	.word	0x40004800
 800b3b8:	40004c00 	.word	0x40004c00
 800b3bc:	40005000 	.word	0x40005000
 800b3c0:	2320      	movs	r3, #32
 800b3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3c6:	e22c      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b3c8:	2340      	movs	r3, #64	@ 0x40
 800b3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3ce:	e228      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b3d0:	2380      	movs	r3, #128	@ 0x80
 800b3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3d6:	e224      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4ab1      	ldr	r2, [pc, #708]	@ (800b6a4 <UART_SetConfig+0x630>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d176      	bne.n	800b4d0 <UART_SetConfig+0x45c>
 800b3e2:	4bb1      	ldr	r3, [pc, #708]	@ (800b6a8 <UART_SetConfig+0x634>)
 800b3e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b3ea:	2b28      	cmp	r3, #40	@ 0x28
 800b3ec:	d86c      	bhi.n	800b4c8 <UART_SetConfig+0x454>
 800b3ee:	a201      	add	r2, pc, #4	@ (adr r2, 800b3f4 <UART_SetConfig+0x380>)
 800b3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f4:	0800b499 	.word	0x0800b499
 800b3f8:	0800b4c9 	.word	0x0800b4c9
 800b3fc:	0800b4c9 	.word	0x0800b4c9
 800b400:	0800b4c9 	.word	0x0800b4c9
 800b404:	0800b4c9 	.word	0x0800b4c9
 800b408:	0800b4c9 	.word	0x0800b4c9
 800b40c:	0800b4c9 	.word	0x0800b4c9
 800b410:	0800b4c9 	.word	0x0800b4c9
 800b414:	0800b4a1 	.word	0x0800b4a1
 800b418:	0800b4c9 	.word	0x0800b4c9
 800b41c:	0800b4c9 	.word	0x0800b4c9
 800b420:	0800b4c9 	.word	0x0800b4c9
 800b424:	0800b4c9 	.word	0x0800b4c9
 800b428:	0800b4c9 	.word	0x0800b4c9
 800b42c:	0800b4c9 	.word	0x0800b4c9
 800b430:	0800b4c9 	.word	0x0800b4c9
 800b434:	0800b4a9 	.word	0x0800b4a9
 800b438:	0800b4c9 	.word	0x0800b4c9
 800b43c:	0800b4c9 	.word	0x0800b4c9
 800b440:	0800b4c9 	.word	0x0800b4c9
 800b444:	0800b4c9 	.word	0x0800b4c9
 800b448:	0800b4c9 	.word	0x0800b4c9
 800b44c:	0800b4c9 	.word	0x0800b4c9
 800b450:	0800b4c9 	.word	0x0800b4c9
 800b454:	0800b4b1 	.word	0x0800b4b1
 800b458:	0800b4c9 	.word	0x0800b4c9
 800b45c:	0800b4c9 	.word	0x0800b4c9
 800b460:	0800b4c9 	.word	0x0800b4c9
 800b464:	0800b4c9 	.word	0x0800b4c9
 800b468:	0800b4c9 	.word	0x0800b4c9
 800b46c:	0800b4c9 	.word	0x0800b4c9
 800b470:	0800b4c9 	.word	0x0800b4c9
 800b474:	0800b4b9 	.word	0x0800b4b9
 800b478:	0800b4c9 	.word	0x0800b4c9
 800b47c:	0800b4c9 	.word	0x0800b4c9
 800b480:	0800b4c9 	.word	0x0800b4c9
 800b484:	0800b4c9 	.word	0x0800b4c9
 800b488:	0800b4c9 	.word	0x0800b4c9
 800b48c:	0800b4c9 	.word	0x0800b4c9
 800b490:	0800b4c9 	.word	0x0800b4c9
 800b494:	0800b4c1 	.word	0x0800b4c1
 800b498:	2301      	movs	r3, #1
 800b49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b49e:	e1c0      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b4a0:	2304      	movs	r3, #4
 800b4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4a6:	e1bc      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b4a8:	2308      	movs	r3, #8
 800b4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4ae:	e1b8      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b4b0:	2310      	movs	r3, #16
 800b4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4b6:	e1b4      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b4b8:	2320      	movs	r3, #32
 800b4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4be:	e1b0      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b4c0:	2340      	movs	r3, #64	@ 0x40
 800b4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4c6:	e1ac      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b4c8:	2380      	movs	r3, #128	@ 0x80
 800b4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4ce:	e1a8      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a75      	ldr	r2, [pc, #468]	@ (800b6ac <UART_SetConfig+0x638>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d130      	bne.n	800b53c <UART_SetConfig+0x4c8>
 800b4da:	4b73      	ldr	r3, [pc, #460]	@ (800b6a8 <UART_SetConfig+0x634>)
 800b4dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4de:	f003 0307 	and.w	r3, r3, #7
 800b4e2:	2b05      	cmp	r3, #5
 800b4e4:	d826      	bhi.n	800b534 <UART_SetConfig+0x4c0>
 800b4e6:	a201      	add	r2, pc, #4	@ (adr r2, 800b4ec <UART_SetConfig+0x478>)
 800b4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ec:	0800b505 	.word	0x0800b505
 800b4f0:	0800b50d 	.word	0x0800b50d
 800b4f4:	0800b515 	.word	0x0800b515
 800b4f8:	0800b51d 	.word	0x0800b51d
 800b4fc:	0800b525 	.word	0x0800b525
 800b500:	0800b52d 	.word	0x0800b52d
 800b504:	2300      	movs	r3, #0
 800b506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b50a:	e18a      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b50c:	2304      	movs	r3, #4
 800b50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b512:	e186      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b514:	2308      	movs	r3, #8
 800b516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b51a:	e182      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b51c:	2310      	movs	r3, #16
 800b51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b522:	e17e      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b524:	2320      	movs	r3, #32
 800b526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b52a:	e17a      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b52c:	2340      	movs	r3, #64	@ 0x40
 800b52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b532:	e176      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b534:	2380      	movs	r3, #128	@ 0x80
 800b536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b53a:	e172      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a5b      	ldr	r2, [pc, #364]	@ (800b6b0 <UART_SetConfig+0x63c>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d130      	bne.n	800b5a8 <UART_SetConfig+0x534>
 800b546:	4b58      	ldr	r3, [pc, #352]	@ (800b6a8 <UART_SetConfig+0x634>)
 800b548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b54a:	f003 0307 	and.w	r3, r3, #7
 800b54e:	2b05      	cmp	r3, #5
 800b550:	d826      	bhi.n	800b5a0 <UART_SetConfig+0x52c>
 800b552:	a201      	add	r2, pc, #4	@ (adr r2, 800b558 <UART_SetConfig+0x4e4>)
 800b554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b558:	0800b571 	.word	0x0800b571
 800b55c:	0800b579 	.word	0x0800b579
 800b560:	0800b581 	.word	0x0800b581
 800b564:	0800b589 	.word	0x0800b589
 800b568:	0800b591 	.word	0x0800b591
 800b56c:	0800b599 	.word	0x0800b599
 800b570:	2300      	movs	r3, #0
 800b572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b576:	e154      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b578:	2304      	movs	r3, #4
 800b57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b57e:	e150      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b580:	2308      	movs	r3, #8
 800b582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b586:	e14c      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b588:	2310      	movs	r3, #16
 800b58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b58e:	e148      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b590:	2320      	movs	r3, #32
 800b592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b596:	e144      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b598:	2340      	movs	r3, #64	@ 0x40
 800b59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b59e:	e140      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b5a0:	2380      	movs	r3, #128	@ 0x80
 800b5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5a6:	e13c      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4a41      	ldr	r2, [pc, #260]	@ (800b6b4 <UART_SetConfig+0x640>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	f040 8082 	bne.w	800b6b8 <UART_SetConfig+0x644>
 800b5b4:	4b3c      	ldr	r3, [pc, #240]	@ (800b6a8 <UART_SetConfig+0x634>)
 800b5b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b5bc:	2b28      	cmp	r3, #40	@ 0x28
 800b5be:	d86d      	bhi.n	800b69c <UART_SetConfig+0x628>
 800b5c0:	a201      	add	r2, pc, #4	@ (adr r2, 800b5c8 <UART_SetConfig+0x554>)
 800b5c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5c6:	bf00      	nop
 800b5c8:	0800b66d 	.word	0x0800b66d
 800b5cc:	0800b69d 	.word	0x0800b69d
 800b5d0:	0800b69d 	.word	0x0800b69d
 800b5d4:	0800b69d 	.word	0x0800b69d
 800b5d8:	0800b69d 	.word	0x0800b69d
 800b5dc:	0800b69d 	.word	0x0800b69d
 800b5e0:	0800b69d 	.word	0x0800b69d
 800b5e4:	0800b69d 	.word	0x0800b69d
 800b5e8:	0800b675 	.word	0x0800b675
 800b5ec:	0800b69d 	.word	0x0800b69d
 800b5f0:	0800b69d 	.word	0x0800b69d
 800b5f4:	0800b69d 	.word	0x0800b69d
 800b5f8:	0800b69d 	.word	0x0800b69d
 800b5fc:	0800b69d 	.word	0x0800b69d
 800b600:	0800b69d 	.word	0x0800b69d
 800b604:	0800b69d 	.word	0x0800b69d
 800b608:	0800b67d 	.word	0x0800b67d
 800b60c:	0800b69d 	.word	0x0800b69d
 800b610:	0800b69d 	.word	0x0800b69d
 800b614:	0800b69d 	.word	0x0800b69d
 800b618:	0800b69d 	.word	0x0800b69d
 800b61c:	0800b69d 	.word	0x0800b69d
 800b620:	0800b69d 	.word	0x0800b69d
 800b624:	0800b69d 	.word	0x0800b69d
 800b628:	0800b685 	.word	0x0800b685
 800b62c:	0800b69d 	.word	0x0800b69d
 800b630:	0800b69d 	.word	0x0800b69d
 800b634:	0800b69d 	.word	0x0800b69d
 800b638:	0800b69d 	.word	0x0800b69d
 800b63c:	0800b69d 	.word	0x0800b69d
 800b640:	0800b69d 	.word	0x0800b69d
 800b644:	0800b69d 	.word	0x0800b69d
 800b648:	0800b68d 	.word	0x0800b68d
 800b64c:	0800b69d 	.word	0x0800b69d
 800b650:	0800b69d 	.word	0x0800b69d
 800b654:	0800b69d 	.word	0x0800b69d
 800b658:	0800b69d 	.word	0x0800b69d
 800b65c:	0800b69d 	.word	0x0800b69d
 800b660:	0800b69d 	.word	0x0800b69d
 800b664:	0800b69d 	.word	0x0800b69d
 800b668:	0800b695 	.word	0x0800b695
 800b66c:	2301      	movs	r3, #1
 800b66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b672:	e0d6      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b674:	2304      	movs	r3, #4
 800b676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b67a:	e0d2      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b67c:	2308      	movs	r3, #8
 800b67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b682:	e0ce      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b684:	2310      	movs	r3, #16
 800b686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b68a:	e0ca      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b68c:	2320      	movs	r3, #32
 800b68e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b692:	e0c6      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b694:	2340      	movs	r3, #64	@ 0x40
 800b696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b69a:	e0c2      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b69c:	2380      	movs	r3, #128	@ 0x80
 800b69e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6a2:	e0be      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b6a4:	40011400 	.word	0x40011400
 800b6a8:	58024400 	.word	0x58024400
 800b6ac:	40007800 	.word	0x40007800
 800b6b0:	40007c00 	.word	0x40007c00
 800b6b4:	40011800 	.word	0x40011800
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4aad      	ldr	r2, [pc, #692]	@ (800b974 <UART_SetConfig+0x900>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d176      	bne.n	800b7b0 <UART_SetConfig+0x73c>
 800b6c2:	4bad      	ldr	r3, [pc, #692]	@ (800b978 <UART_SetConfig+0x904>)
 800b6c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b6ca:	2b28      	cmp	r3, #40	@ 0x28
 800b6cc:	d86c      	bhi.n	800b7a8 <UART_SetConfig+0x734>
 800b6ce:	a201      	add	r2, pc, #4	@ (adr r2, 800b6d4 <UART_SetConfig+0x660>)
 800b6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d4:	0800b779 	.word	0x0800b779
 800b6d8:	0800b7a9 	.word	0x0800b7a9
 800b6dc:	0800b7a9 	.word	0x0800b7a9
 800b6e0:	0800b7a9 	.word	0x0800b7a9
 800b6e4:	0800b7a9 	.word	0x0800b7a9
 800b6e8:	0800b7a9 	.word	0x0800b7a9
 800b6ec:	0800b7a9 	.word	0x0800b7a9
 800b6f0:	0800b7a9 	.word	0x0800b7a9
 800b6f4:	0800b781 	.word	0x0800b781
 800b6f8:	0800b7a9 	.word	0x0800b7a9
 800b6fc:	0800b7a9 	.word	0x0800b7a9
 800b700:	0800b7a9 	.word	0x0800b7a9
 800b704:	0800b7a9 	.word	0x0800b7a9
 800b708:	0800b7a9 	.word	0x0800b7a9
 800b70c:	0800b7a9 	.word	0x0800b7a9
 800b710:	0800b7a9 	.word	0x0800b7a9
 800b714:	0800b789 	.word	0x0800b789
 800b718:	0800b7a9 	.word	0x0800b7a9
 800b71c:	0800b7a9 	.word	0x0800b7a9
 800b720:	0800b7a9 	.word	0x0800b7a9
 800b724:	0800b7a9 	.word	0x0800b7a9
 800b728:	0800b7a9 	.word	0x0800b7a9
 800b72c:	0800b7a9 	.word	0x0800b7a9
 800b730:	0800b7a9 	.word	0x0800b7a9
 800b734:	0800b791 	.word	0x0800b791
 800b738:	0800b7a9 	.word	0x0800b7a9
 800b73c:	0800b7a9 	.word	0x0800b7a9
 800b740:	0800b7a9 	.word	0x0800b7a9
 800b744:	0800b7a9 	.word	0x0800b7a9
 800b748:	0800b7a9 	.word	0x0800b7a9
 800b74c:	0800b7a9 	.word	0x0800b7a9
 800b750:	0800b7a9 	.word	0x0800b7a9
 800b754:	0800b799 	.word	0x0800b799
 800b758:	0800b7a9 	.word	0x0800b7a9
 800b75c:	0800b7a9 	.word	0x0800b7a9
 800b760:	0800b7a9 	.word	0x0800b7a9
 800b764:	0800b7a9 	.word	0x0800b7a9
 800b768:	0800b7a9 	.word	0x0800b7a9
 800b76c:	0800b7a9 	.word	0x0800b7a9
 800b770:	0800b7a9 	.word	0x0800b7a9
 800b774:	0800b7a1 	.word	0x0800b7a1
 800b778:	2301      	movs	r3, #1
 800b77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b77e:	e050      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b780:	2304      	movs	r3, #4
 800b782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b786:	e04c      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b788:	2308      	movs	r3, #8
 800b78a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b78e:	e048      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b790:	2310      	movs	r3, #16
 800b792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b796:	e044      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b798:	2320      	movs	r3, #32
 800b79a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b79e:	e040      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b7a0:	2340      	movs	r3, #64	@ 0x40
 800b7a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7a6:	e03c      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b7a8:	2380      	movs	r3, #128	@ 0x80
 800b7aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7ae:	e038      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a71      	ldr	r2, [pc, #452]	@ (800b97c <UART_SetConfig+0x908>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d130      	bne.n	800b81c <UART_SetConfig+0x7a8>
 800b7ba:	4b6f      	ldr	r3, [pc, #444]	@ (800b978 <UART_SetConfig+0x904>)
 800b7bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7be:	f003 0307 	and.w	r3, r3, #7
 800b7c2:	2b05      	cmp	r3, #5
 800b7c4:	d826      	bhi.n	800b814 <UART_SetConfig+0x7a0>
 800b7c6:	a201      	add	r2, pc, #4	@ (adr r2, 800b7cc <UART_SetConfig+0x758>)
 800b7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7cc:	0800b7e5 	.word	0x0800b7e5
 800b7d0:	0800b7ed 	.word	0x0800b7ed
 800b7d4:	0800b7f5 	.word	0x0800b7f5
 800b7d8:	0800b7fd 	.word	0x0800b7fd
 800b7dc:	0800b805 	.word	0x0800b805
 800b7e0:	0800b80d 	.word	0x0800b80d
 800b7e4:	2302      	movs	r3, #2
 800b7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7ea:	e01a      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b7ec:	2304      	movs	r3, #4
 800b7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7f2:	e016      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b7f4:	2308      	movs	r3, #8
 800b7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7fa:	e012      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b7fc:	2310      	movs	r3, #16
 800b7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b802:	e00e      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b804:	2320      	movs	r3, #32
 800b806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b80a:	e00a      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b80c:	2340      	movs	r3, #64	@ 0x40
 800b80e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b812:	e006      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b814:	2380      	movs	r3, #128	@ 0x80
 800b816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b81a:	e002      	b.n	800b822 <UART_SetConfig+0x7ae>
 800b81c:	2380      	movs	r3, #128	@ 0x80
 800b81e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a55      	ldr	r2, [pc, #340]	@ (800b97c <UART_SetConfig+0x908>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	f040 80f8 	bne.w	800ba1e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b82e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b832:	2b20      	cmp	r3, #32
 800b834:	dc46      	bgt.n	800b8c4 <UART_SetConfig+0x850>
 800b836:	2b02      	cmp	r3, #2
 800b838:	db75      	blt.n	800b926 <UART_SetConfig+0x8b2>
 800b83a:	3b02      	subs	r3, #2
 800b83c:	2b1e      	cmp	r3, #30
 800b83e:	d872      	bhi.n	800b926 <UART_SetConfig+0x8b2>
 800b840:	a201      	add	r2, pc, #4	@ (adr r2, 800b848 <UART_SetConfig+0x7d4>)
 800b842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b846:	bf00      	nop
 800b848:	0800b8cb 	.word	0x0800b8cb
 800b84c:	0800b927 	.word	0x0800b927
 800b850:	0800b8d3 	.word	0x0800b8d3
 800b854:	0800b927 	.word	0x0800b927
 800b858:	0800b927 	.word	0x0800b927
 800b85c:	0800b927 	.word	0x0800b927
 800b860:	0800b8e3 	.word	0x0800b8e3
 800b864:	0800b927 	.word	0x0800b927
 800b868:	0800b927 	.word	0x0800b927
 800b86c:	0800b927 	.word	0x0800b927
 800b870:	0800b927 	.word	0x0800b927
 800b874:	0800b927 	.word	0x0800b927
 800b878:	0800b927 	.word	0x0800b927
 800b87c:	0800b927 	.word	0x0800b927
 800b880:	0800b8f3 	.word	0x0800b8f3
 800b884:	0800b927 	.word	0x0800b927
 800b888:	0800b927 	.word	0x0800b927
 800b88c:	0800b927 	.word	0x0800b927
 800b890:	0800b927 	.word	0x0800b927
 800b894:	0800b927 	.word	0x0800b927
 800b898:	0800b927 	.word	0x0800b927
 800b89c:	0800b927 	.word	0x0800b927
 800b8a0:	0800b927 	.word	0x0800b927
 800b8a4:	0800b927 	.word	0x0800b927
 800b8a8:	0800b927 	.word	0x0800b927
 800b8ac:	0800b927 	.word	0x0800b927
 800b8b0:	0800b927 	.word	0x0800b927
 800b8b4:	0800b927 	.word	0x0800b927
 800b8b8:	0800b927 	.word	0x0800b927
 800b8bc:	0800b927 	.word	0x0800b927
 800b8c0:	0800b919 	.word	0x0800b919
 800b8c4:	2b40      	cmp	r3, #64	@ 0x40
 800b8c6:	d02a      	beq.n	800b91e <UART_SetConfig+0x8aa>
 800b8c8:	e02d      	b.n	800b926 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b8ca:	f7fd fe4f 	bl	800956c <HAL_RCCEx_GetD3PCLK1Freq>
 800b8ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b8d0:	e02f      	b.n	800b932 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7fd fe5e 	bl	8009598 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b8dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8e0:	e027      	b.n	800b932 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8e2:	f107 0318 	add.w	r3, r7, #24
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7fd ffaa 	bl	8009840 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b8ec:	69fb      	ldr	r3, [r7, #28]
 800b8ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8f0:	e01f      	b.n	800b932 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8f2:	4b21      	ldr	r3, [pc, #132]	@ (800b978 <UART_SetConfig+0x904>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f003 0320 	and.w	r3, r3, #32
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d009      	beq.n	800b912 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b8fe:	4b1e      	ldr	r3, [pc, #120]	@ (800b978 <UART_SetConfig+0x904>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	08db      	lsrs	r3, r3, #3
 800b904:	f003 0303 	and.w	r3, r3, #3
 800b908:	4a1d      	ldr	r2, [pc, #116]	@ (800b980 <UART_SetConfig+0x90c>)
 800b90a:	fa22 f303 	lsr.w	r3, r2, r3
 800b90e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b910:	e00f      	b.n	800b932 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b912:	4b1b      	ldr	r3, [pc, #108]	@ (800b980 <UART_SetConfig+0x90c>)
 800b914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b916:	e00c      	b.n	800b932 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b918:	4b1a      	ldr	r3, [pc, #104]	@ (800b984 <UART_SetConfig+0x910>)
 800b91a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b91c:	e009      	b.n	800b932 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b91e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b924:	e005      	b.n	800b932 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b926:	2300      	movs	r3, #0
 800b928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b92a:	2301      	movs	r3, #1
 800b92c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b930:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b934:	2b00      	cmp	r3, #0
 800b936:	f000 81ee 	beq.w	800bd16 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b93e:	4a12      	ldr	r2, [pc, #72]	@ (800b988 <UART_SetConfig+0x914>)
 800b940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b944:	461a      	mov	r2, r3
 800b946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b948:	fbb3 f3f2 	udiv	r3, r3, r2
 800b94c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	685a      	ldr	r2, [r3, #4]
 800b952:	4613      	mov	r3, r2
 800b954:	005b      	lsls	r3, r3, #1
 800b956:	4413      	add	r3, r2
 800b958:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d305      	bcc.n	800b96a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b964:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b966:	429a      	cmp	r2, r3
 800b968:	d910      	bls.n	800b98c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b970:	e1d1      	b.n	800bd16 <UART_SetConfig+0xca2>
 800b972:	bf00      	nop
 800b974:	40011c00 	.word	0x40011c00
 800b978:	58024400 	.word	0x58024400
 800b97c:	58000c00 	.word	0x58000c00
 800b980:	03d09000 	.word	0x03d09000
 800b984:	003d0900 	.word	0x003d0900
 800b988:	0800d15c 	.word	0x0800d15c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b98c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b98e:	2200      	movs	r2, #0
 800b990:	60bb      	str	r3, [r7, #8]
 800b992:	60fa      	str	r2, [r7, #12]
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b998:	4ac0      	ldr	r2, [pc, #768]	@ (800bc9c <UART_SetConfig+0xc28>)
 800b99a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	603b      	str	r3, [r7, #0]
 800b9a4:	607a      	str	r2, [r7, #4]
 800b9a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b9ae:	f7f4 fd07 	bl	80003c0 <__aeabi_uldivmod>
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	4610      	mov	r0, r2
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	f04f 0200 	mov.w	r2, #0
 800b9be:	f04f 0300 	mov.w	r3, #0
 800b9c2:	020b      	lsls	r3, r1, #8
 800b9c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b9c8:	0202      	lsls	r2, r0, #8
 800b9ca:	6979      	ldr	r1, [r7, #20]
 800b9cc:	6849      	ldr	r1, [r1, #4]
 800b9ce:	0849      	lsrs	r1, r1, #1
 800b9d0:	2000      	movs	r0, #0
 800b9d2:	460c      	mov	r4, r1
 800b9d4:	4605      	mov	r5, r0
 800b9d6:	eb12 0804 	adds.w	r8, r2, r4
 800b9da:	eb43 0905 	adc.w	r9, r3, r5
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	685b      	ldr	r3, [r3, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	469a      	mov	sl, r3
 800b9e6:	4693      	mov	fp, r2
 800b9e8:	4652      	mov	r2, sl
 800b9ea:	465b      	mov	r3, fp
 800b9ec:	4640      	mov	r0, r8
 800b9ee:	4649      	mov	r1, r9
 800b9f0:	f7f4 fce6 	bl	80003c0 <__aeabi_uldivmod>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	4613      	mov	r3, r2
 800b9fa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b9fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba02:	d308      	bcc.n	800ba16 <UART_SetConfig+0x9a2>
 800ba04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba0a:	d204      	bcs.n	800ba16 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba12:	60da      	str	r2, [r3, #12]
 800ba14:	e17f      	b.n	800bd16 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ba16:	2301      	movs	r3, #1
 800ba18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ba1c:	e17b      	b.n	800bd16 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	69db      	ldr	r3, [r3, #28]
 800ba22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ba26:	f040 80bd 	bne.w	800bba4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ba2a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ba2e:	2b20      	cmp	r3, #32
 800ba30:	dc48      	bgt.n	800bac4 <UART_SetConfig+0xa50>
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	db7b      	blt.n	800bb2e <UART_SetConfig+0xaba>
 800ba36:	2b20      	cmp	r3, #32
 800ba38:	d879      	bhi.n	800bb2e <UART_SetConfig+0xaba>
 800ba3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ba40 <UART_SetConfig+0x9cc>)
 800ba3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba40:	0800bacb 	.word	0x0800bacb
 800ba44:	0800bad3 	.word	0x0800bad3
 800ba48:	0800bb2f 	.word	0x0800bb2f
 800ba4c:	0800bb2f 	.word	0x0800bb2f
 800ba50:	0800badb 	.word	0x0800badb
 800ba54:	0800bb2f 	.word	0x0800bb2f
 800ba58:	0800bb2f 	.word	0x0800bb2f
 800ba5c:	0800bb2f 	.word	0x0800bb2f
 800ba60:	0800baeb 	.word	0x0800baeb
 800ba64:	0800bb2f 	.word	0x0800bb2f
 800ba68:	0800bb2f 	.word	0x0800bb2f
 800ba6c:	0800bb2f 	.word	0x0800bb2f
 800ba70:	0800bb2f 	.word	0x0800bb2f
 800ba74:	0800bb2f 	.word	0x0800bb2f
 800ba78:	0800bb2f 	.word	0x0800bb2f
 800ba7c:	0800bb2f 	.word	0x0800bb2f
 800ba80:	0800bafb 	.word	0x0800bafb
 800ba84:	0800bb2f 	.word	0x0800bb2f
 800ba88:	0800bb2f 	.word	0x0800bb2f
 800ba8c:	0800bb2f 	.word	0x0800bb2f
 800ba90:	0800bb2f 	.word	0x0800bb2f
 800ba94:	0800bb2f 	.word	0x0800bb2f
 800ba98:	0800bb2f 	.word	0x0800bb2f
 800ba9c:	0800bb2f 	.word	0x0800bb2f
 800baa0:	0800bb2f 	.word	0x0800bb2f
 800baa4:	0800bb2f 	.word	0x0800bb2f
 800baa8:	0800bb2f 	.word	0x0800bb2f
 800baac:	0800bb2f 	.word	0x0800bb2f
 800bab0:	0800bb2f 	.word	0x0800bb2f
 800bab4:	0800bb2f 	.word	0x0800bb2f
 800bab8:	0800bb2f 	.word	0x0800bb2f
 800babc:	0800bb2f 	.word	0x0800bb2f
 800bac0:	0800bb21 	.word	0x0800bb21
 800bac4:	2b40      	cmp	r3, #64	@ 0x40
 800bac6:	d02e      	beq.n	800bb26 <UART_SetConfig+0xab2>
 800bac8:	e031      	b.n	800bb2e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800baca:	f7fb feb1 	bl	8007830 <HAL_RCC_GetPCLK1Freq>
 800bace:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bad0:	e033      	b.n	800bb3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bad2:	f7fb fec3 	bl	800785c <HAL_RCC_GetPCLK2Freq>
 800bad6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bad8:	e02f      	b.n	800bb3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bada:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bade:	4618      	mov	r0, r3
 800bae0:	f7fd fd5a 	bl	8009598 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bae8:	e027      	b.n	800bb3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800baea:	f107 0318 	add.w	r3, r7, #24
 800baee:	4618      	mov	r0, r3
 800baf0:	f7fd fea6 	bl	8009840 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800baf4:	69fb      	ldr	r3, [r7, #28]
 800baf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800baf8:	e01f      	b.n	800bb3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bafa:	4b69      	ldr	r3, [pc, #420]	@ (800bca0 <UART_SetConfig+0xc2c>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f003 0320 	and.w	r3, r3, #32
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d009      	beq.n	800bb1a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bb06:	4b66      	ldr	r3, [pc, #408]	@ (800bca0 <UART_SetConfig+0xc2c>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	08db      	lsrs	r3, r3, #3
 800bb0c:	f003 0303 	and.w	r3, r3, #3
 800bb10:	4a64      	ldr	r2, [pc, #400]	@ (800bca4 <UART_SetConfig+0xc30>)
 800bb12:	fa22 f303 	lsr.w	r3, r2, r3
 800bb16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bb18:	e00f      	b.n	800bb3a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800bb1a:	4b62      	ldr	r3, [pc, #392]	@ (800bca4 <UART_SetConfig+0xc30>)
 800bb1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb1e:	e00c      	b.n	800bb3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bb20:	4b61      	ldr	r3, [pc, #388]	@ (800bca8 <UART_SetConfig+0xc34>)
 800bb22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb24:	e009      	b.n	800bb3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb2c:	e005      	b.n	800bb3a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bb32:	2301      	movs	r3, #1
 800bb34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bb38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bb3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	f000 80ea 	beq.w	800bd16 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb46:	4a55      	ldr	r2, [pc, #340]	@ (800bc9c <UART_SetConfig+0xc28>)
 800bb48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb50:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb54:	005a      	lsls	r2, r3, #1
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	085b      	lsrs	r3, r3, #1
 800bb5c:	441a      	add	r2, r3
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb66:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb6a:	2b0f      	cmp	r3, #15
 800bb6c:	d916      	bls.n	800bb9c <UART_SetConfig+0xb28>
 800bb6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb74:	d212      	bcs.n	800bb9c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bb76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	f023 030f 	bic.w	r3, r3, #15
 800bb7e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bb80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb82:	085b      	lsrs	r3, r3, #1
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	f003 0307 	and.w	r3, r3, #7
 800bb8a:	b29a      	uxth	r2, r3
 800bb8c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bb98:	60da      	str	r2, [r3, #12]
 800bb9a:	e0bc      	b.n	800bd16 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bba2:	e0b8      	b.n	800bd16 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bba4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bba8:	2b20      	cmp	r3, #32
 800bbaa:	dc4b      	bgt.n	800bc44 <UART_SetConfig+0xbd0>
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	f2c0 8087 	blt.w	800bcc0 <UART_SetConfig+0xc4c>
 800bbb2:	2b20      	cmp	r3, #32
 800bbb4:	f200 8084 	bhi.w	800bcc0 <UART_SetConfig+0xc4c>
 800bbb8:	a201      	add	r2, pc, #4	@ (adr r2, 800bbc0 <UART_SetConfig+0xb4c>)
 800bbba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbbe:	bf00      	nop
 800bbc0:	0800bc4b 	.word	0x0800bc4b
 800bbc4:	0800bc53 	.word	0x0800bc53
 800bbc8:	0800bcc1 	.word	0x0800bcc1
 800bbcc:	0800bcc1 	.word	0x0800bcc1
 800bbd0:	0800bc5b 	.word	0x0800bc5b
 800bbd4:	0800bcc1 	.word	0x0800bcc1
 800bbd8:	0800bcc1 	.word	0x0800bcc1
 800bbdc:	0800bcc1 	.word	0x0800bcc1
 800bbe0:	0800bc6b 	.word	0x0800bc6b
 800bbe4:	0800bcc1 	.word	0x0800bcc1
 800bbe8:	0800bcc1 	.word	0x0800bcc1
 800bbec:	0800bcc1 	.word	0x0800bcc1
 800bbf0:	0800bcc1 	.word	0x0800bcc1
 800bbf4:	0800bcc1 	.word	0x0800bcc1
 800bbf8:	0800bcc1 	.word	0x0800bcc1
 800bbfc:	0800bcc1 	.word	0x0800bcc1
 800bc00:	0800bc7b 	.word	0x0800bc7b
 800bc04:	0800bcc1 	.word	0x0800bcc1
 800bc08:	0800bcc1 	.word	0x0800bcc1
 800bc0c:	0800bcc1 	.word	0x0800bcc1
 800bc10:	0800bcc1 	.word	0x0800bcc1
 800bc14:	0800bcc1 	.word	0x0800bcc1
 800bc18:	0800bcc1 	.word	0x0800bcc1
 800bc1c:	0800bcc1 	.word	0x0800bcc1
 800bc20:	0800bcc1 	.word	0x0800bcc1
 800bc24:	0800bcc1 	.word	0x0800bcc1
 800bc28:	0800bcc1 	.word	0x0800bcc1
 800bc2c:	0800bcc1 	.word	0x0800bcc1
 800bc30:	0800bcc1 	.word	0x0800bcc1
 800bc34:	0800bcc1 	.word	0x0800bcc1
 800bc38:	0800bcc1 	.word	0x0800bcc1
 800bc3c:	0800bcc1 	.word	0x0800bcc1
 800bc40:	0800bcb3 	.word	0x0800bcb3
 800bc44:	2b40      	cmp	r3, #64	@ 0x40
 800bc46:	d037      	beq.n	800bcb8 <UART_SetConfig+0xc44>
 800bc48:	e03a      	b.n	800bcc0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc4a:	f7fb fdf1 	bl	8007830 <HAL_RCC_GetPCLK1Freq>
 800bc4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc50:	e03c      	b.n	800bccc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc52:	f7fb fe03 	bl	800785c <HAL_RCC_GetPCLK2Freq>
 800bc56:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc58:	e038      	b.n	800bccc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f7fd fc9a 	bl	8009598 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bc64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc68:	e030      	b.n	800bccc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc6a:	f107 0318 	add.w	r3, r7, #24
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7fd fde6 	bl	8009840 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bc74:	69fb      	ldr	r3, [r7, #28]
 800bc76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc78:	e028      	b.n	800bccc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc7a:	4b09      	ldr	r3, [pc, #36]	@ (800bca0 <UART_SetConfig+0xc2c>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f003 0320 	and.w	r3, r3, #32
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d012      	beq.n	800bcac <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bc86:	4b06      	ldr	r3, [pc, #24]	@ (800bca0 <UART_SetConfig+0xc2c>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	08db      	lsrs	r3, r3, #3
 800bc8c:	f003 0303 	and.w	r3, r3, #3
 800bc90:	4a04      	ldr	r2, [pc, #16]	@ (800bca4 <UART_SetConfig+0xc30>)
 800bc92:	fa22 f303 	lsr.w	r3, r2, r3
 800bc96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bc98:	e018      	b.n	800bccc <UART_SetConfig+0xc58>
 800bc9a:	bf00      	nop
 800bc9c:	0800d15c 	.word	0x0800d15c
 800bca0:	58024400 	.word	0x58024400
 800bca4:	03d09000 	.word	0x03d09000
 800bca8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800bcac:	4b24      	ldr	r3, [pc, #144]	@ (800bd40 <UART_SetConfig+0xccc>)
 800bcae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcb0:	e00c      	b.n	800bccc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bcb2:	4b24      	ldr	r3, [pc, #144]	@ (800bd44 <UART_SetConfig+0xcd0>)
 800bcb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcb6:	e009      	b.n	800bccc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bcb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bcbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcbe:	e005      	b.n	800bccc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bcca:	bf00      	nop
    }

    if (pclk != 0U)
 800bccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d021      	beq.n	800bd16 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcd6:	4a1c      	ldr	r2, [pc, #112]	@ (800bd48 <UART_SetConfig+0xcd4>)
 800bcd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcdc:	461a      	mov	r2, r3
 800bcde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bce0:	fbb3 f2f2 	udiv	r2, r3, r2
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	085b      	lsrs	r3, r3, #1
 800bcea:	441a      	add	r2, r3
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcf4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bcf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcf8:	2b0f      	cmp	r3, #15
 800bcfa:	d909      	bls.n	800bd10 <UART_SetConfig+0xc9c>
 800bcfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd02:	d205      	bcs.n	800bd10 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bd04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd06:	b29a      	uxth	r2, r3
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	60da      	str	r2, [r3, #12]
 800bd0e:	e002      	b.n	800bd16 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800bd10:	2301      	movs	r3, #1
 800bd12:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	2201      	movs	r2, #1
 800bd1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	2201      	movs	r2, #1
 800bd22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bd32:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3748      	adds	r7, #72	@ 0x48
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd40:	03d09000 	.word	0x03d09000
 800bd44:	003d0900 	.word	0x003d0900
 800bd48:	0800d15c 	.word	0x0800d15c

0800bd4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b083      	sub	sp, #12
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd58:	f003 0308 	and.w	r3, r3, #8
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d00a      	beq.n	800bd76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	430a      	orrs	r2, r1
 800bd74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd7a:	f003 0301 	and.w	r3, r3, #1
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d00a      	beq.n	800bd98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	430a      	orrs	r2, r1
 800bd96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd9c:	f003 0302 	and.w	r3, r3, #2
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d00a      	beq.n	800bdba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	430a      	orrs	r2, r1
 800bdb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdbe:	f003 0304 	and.w	r3, r3, #4
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d00a      	beq.n	800bddc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	430a      	orrs	r2, r1
 800bdda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bde0:	f003 0310 	and.w	r3, r3, #16
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d00a      	beq.n	800bdfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	430a      	orrs	r2, r1
 800bdfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be02:	f003 0320 	and.w	r3, r3, #32
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00a      	beq.n	800be20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	689b      	ldr	r3, [r3, #8]
 800be10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	430a      	orrs	r2, r1
 800be1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d01a      	beq.n	800be62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	430a      	orrs	r2, r1
 800be40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be4a:	d10a      	bne.n	800be62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	685b      	ldr	r3, [r3, #4]
 800be52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	430a      	orrs	r2, r1
 800be60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d00a      	beq.n	800be84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	430a      	orrs	r2, r1
 800be82:	605a      	str	r2, [r3, #4]
  }
}
 800be84:	bf00      	nop
 800be86:	370c      	adds	r7, #12
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b098      	sub	sp, #96	@ 0x60
 800be94:	af02      	add	r7, sp, #8
 800be96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bea0:	f7f7 f8cc 	bl	800303c <HAL_GetTick>
 800bea4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f003 0308 	and.w	r3, r3, #8
 800beb0:	2b08      	cmp	r3, #8
 800beb2:	d12f      	bne.n	800bf14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800beb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800beb8:	9300      	str	r3, [sp, #0]
 800beba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bebc:	2200      	movs	r2, #0
 800bebe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 f88e 	bl	800bfe4 <UART_WaitOnFlagUntilTimeout>
 800bec8:	4603      	mov	r3, r0
 800beca:	2b00      	cmp	r3, #0
 800becc:	d022      	beq.n	800bf14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bed6:	e853 3f00 	ldrex	r3, [r3]
 800beda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bedc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bede:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bee2:	653b      	str	r3, [r7, #80]	@ 0x50
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	461a      	mov	r2, r3
 800beea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800beec:	647b      	str	r3, [r7, #68]	@ 0x44
 800beee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bef2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bef4:	e841 2300 	strex	r3, r2, [r1]
 800bef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800befa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800befc:	2b00      	cmp	r3, #0
 800befe:	d1e6      	bne.n	800bece <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2220      	movs	r2, #32
 800bf04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf10:	2303      	movs	r3, #3
 800bf12:	e063      	b.n	800bfdc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f003 0304 	and.w	r3, r3, #4
 800bf1e:	2b04      	cmp	r3, #4
 800bf20:	d149      	bne.n	800bfb6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf22:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bf26:	9300      	str	r3, [sp, #0]
 800bf28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f000 f857 	bl	800bfe4 <UART_WaitOnFlagUntilTimeout>
 800bf36:	4603      	mov	r3, r0
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d03c      	beq.n	800bfb6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf44:	e853 3f00 	ldrex	r3, [r3]
 800bf48:	623b      	str	r3, [r7, #32]
   return(result);
 800bf4a:	6a3b      	ldr	r3, [r7, #32]
 800bf4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	461a      	mov	r2, r3
 800bf58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf5a:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf62:	e841 2300 	strex	r3, r2, [r1]
 800bf66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bf68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d1e6      	bne.n	800bf3c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	3308      	adds	r3, #8
 800bf74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	e853 3f00 	ldrex	r3, [r3]
 800bf7c:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f023 0301 	bic.w	r3, r3, #1
 800bf84:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	3308      	adds	r3, #8
 800bf8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bf8e:	61fa      	str	r2, [r7, #28]
 800bf90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf92:	69b9      	ldr	r1, [r7, #24]
 800bf94:	69fa      	ldr	r2, [r7, #28]
 800bf96:	e841 2300 	strex	r3, r2, [r1]
 800bf9a:	617b      	str	r3, [r7, #20]
   return(result);
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d1e5      	bne.n	800bf6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2220      	movs	r2, #32
 800bfa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2200      	movs	r2, #0
 800bfae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bfb2:	2303      	movs	r3, #3
 800bfb4:	e012      	b.n	800bfdc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2220      	movs	r2, #32
 800bfba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2220      	movs	r2, #32
 800bfc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bfda:	2300      	movs	r3, #0
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3758      	adds	r7, #88	@ 0x58
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b084      	sub	sp, #16
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	60b9      	str	r1, [r7, #8]
 800bfee:	603b      	str	r3, [r7, #0]
 800bff0:	4613      	mov	r3, r2
 800bff2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bff4:	e04f      	b.n	800c096 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bff6:	69bb      	ldr	r3, [r7, #24]
 800bff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bffc:	d04b      	beq.n	800c096 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bffe:	f7f7 f81d 	bl	800303c <HAL_GetTick>
 800c002:	4602      	mov	r2, r0
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	1ad3      	subs	r3, r2, r3
 800c008:	69ba      	ldr	r2, [r7, #24]
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d302      	bcc.n	800c014 <UART_WaitOnFlagUntilTimeout+0x30>
 800c00e:	69bb      	ldr	r3, [r7, #24]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d101      	bne.n	800c018 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c014:	2303      	movs	r3, #3
 800c016:	e04e      	b.n	800c0b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f003 0304 	and.w	r3, r3, #4
 800c022:	2b00      	cmp	r3, #0
 800c024:	d037      	beq.n	800c096 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	2b80      	cmp	r3, #128	@ 0x80
 800c02a:	d034      	beq.n	800c096 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	2b40      	cmp	r3, #64	@ 0x40
 800c030:	d031      	beq.n	800c096 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	69db      	ldr	r3, [r3, #28]
 800c038:	f003 0308 	and.w	r3, r3, #8
 800c03c:	2b08      	cmp	r3, #8
 800c03e:	d110      	bne.n	800c062 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	2208      	movs	r2, #8
 800c046:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c048:	68f8      	ldr	r0, [r7, #12]
 800c04a:	f000 f839 	bl	800c0c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	2208      	movs	r2, #8
 800c052:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2200      	movs	r2, #0
 800c05a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c05e:	2301      	movs	r3, #1
 800c060:	e029      	b.n	800c0b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	69db      	ldr	r3, [r3, #28]
 800c068:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c06c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c070:	d111      	bne.n	800c096 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c07a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c07c:	68f8      	ldr	r0, [r7, #12]
 800c07e:	f000 f81f 	bl	800c0c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	2220      	movs	r2, #32
 800c086:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2200      	movs	r2, #0
 800c08e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c092:	2303      	movs	r3, #3
 800c094:	e00f      	b.n	800c0b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	69da      	ldr	r2, [r3, #28]
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	4013      	ands	r3, r2
 800c0a0:	68ba      	ldr	r2, [r7, #8]
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	bf0c      	ite	eq
 800c0a6:	2301      	moveq	r3, #1
 800c0a8:	2300      	movne	r3, #0
 800c0aa:	b2db      	uxtb	r3, r3
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	79fb      	ldrb	r3, [r7, #7]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d0a0      	beq.n	800bff6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c0b4:	2300      	movs	r3, #0
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
	...

0800c0c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b095      	sub	sp, #84	@ 0x54
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0d0:	e853 3f00 	ldrex	r3, [r3]
 800c0d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c0dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0e6:	643b      	str	r3, [r7, #64]	@ 0x40
 800c0e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c0ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c0ee:	e841 2300 	strex	r3, r2, [r1]
 800c0f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d1e6      	bne.n	800c0c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	3308      	adds	r3, #8
 800c100:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c102:	6a3b      	ldr	r3, [r7, #32]
 800c104:	e853 3f00 	ldrex	r3, [r3]
 800c108:	61fb      	str	r3, [r7, #28]
   return(result);
 800c10a:	69fa      	ldr	r2, [r7, #28]
 800c10c:	4b1e      	ldr	r3, [pc, #120]	@ (800c188 <UART_EndRxTransfer+0xc8>)
 800c10e:	4013      	ands	r3, r2
 800c110:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	3308      	adds	r3, #8
 800c118:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c11a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c11c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c11e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c120:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c122:	e841 2300 	strex	r3, r2, [r1]
 800c126:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d1e5      	bne.n	800c0fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c132:	2b01      	cmp	r3, #1
 800c134:	d118      	bne.n	800c168 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	e853 3f00 	ldrex	r3, [r3]
 800c142:	60bb      	str	r3, [r7, #8]
   return(result);
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	f023 0310 	bic.w	r3, r3, #16
 800c14a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	461a      	mov	r2, r3
 800c152:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c154:	61bb      	str	r3, [r7, #24]
 800c156:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c158:	6979      	ldr	r1, [r7, #20]
 800c15a:	69ba      	ldr	r2, [r7, #24]
 800c15c:	e841 2300 	strex	r3, r2, [r1]
 800c160:	613b      	str	r3, [r7, #16]
   return(result);
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d1e6      	bne.n	800c136 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2220      	movs	r2, #32
 800c16c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2200      	movs	r2, #0
 800c17a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c17c:	bf00      	nop
 800c17e:	3754      	adds	r7, #84	@ 0x54
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr
 800c188:	effffffe 	.word	0xeffffffe

0800c18c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b085      	sub	sp, #20
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c19a:	2b01      	cmp	r3, #1
 800c19c:	d101      	bne.n	800c1a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800c19e:	2302      	movs	r3, #2
 800c1a0:	e027      	b.n	800c1f2 <HAL_UARTEx_DisableFifoMode+0x66>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2224      	movs	r2, #36	@ 0x24
 800c1ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	681a      	ldr	r2, [r3, #0]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f022 0201 	bic.w	r2, r2, #1
 800c1c8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c1d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	68fa      	ldr	r2, [r7, #12]
 800c1de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2220      	movs	r2, #32
 800c1e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c1f0:	2300      	movs	r3, #0
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3714      	adds	r7, #20
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fc:	4770      	bx	lr

0800c1fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c1fe:	b580      	push	{r7, lr}
 800c200:	b084      	sub	sp, #16
 800c202:	af00      	add	r7, sp, #0
 800c204:	6078      	str	r0, [r7, #4]
 800c206:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c20e:	2b01      	cmp	r3, #1
 800c210:	d101      	bne.n	800c216 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c212:	2302      	movs	r3, #2
 800c214:	e02d      	b.n	800c272 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2201      	movs	r2, #1
 800c21a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2224      	movs	r2, #36	@ 0x24
 800c222:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	681a      	ldr	r2, [r3, #0]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f022 0201 	bic.w	r2, r2, #1
 800c23c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	689b      	ldr	r3, [r3, #8]
 800c244:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	683a      	ldr	r2, [r7, #0]
 800c24e:	430a      	orrs	r2, r1
 800c250:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 f850 	bl	800c2f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	68fa      	ldr	r2, [r7, #12]
 800c25e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2220      	movs	r2, #32
 800c264:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c270:	2300      	movs	r3, #0
}
 800c272:	4618      	mov	r0, r3
 800c274:	3710      	adds	r7, #16
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}

0800c27a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b084      	sub	sp, #16
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
 800c282:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c28a:	2b01      	cmp	r3, #1
 800c28c:	d101      	bne.n	800c292 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c28e:	2302      	movs	r3, #2
 800c290:	e02d      	b.n	800c2ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2201      	movs	r2, #1
 800c296:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2224      	movs	r2, #36	@ 0x24
 800c29e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f022 0201 	bic.w	r2, r2, #1
 800c2b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	689b      	ldr	r3, [r3, #8]
 800c2c0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	683a      	ldr	r2, [r7, #0]
 800c2ca:	430a      	orrs	r2, r1
 800c2cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 f812 	bl	800c2f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	68fa      	ldr	r2, [r7, #12]
 800c2da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2220      	movs	r2, #32
 800c2e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c2ec:	2300      	movs	r3, #0
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3710      	adds	r7, #16
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
	...

0800c2f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b085      	sub	sp, #20
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c304:	2b00      	cmp	r3, #0
 800c306:	d108      	bne.n	800c31a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2201      	movs	r2, #1
 800c30c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2201      	movs	r2, #1
 800c314:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c318:	e031      	b.n	800c37e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c31a:	2310      	movs	r3, #16
 800c31c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c31e:	2310      	movs	r3, #16
 800c320:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	689b      	ldr	r3, [r3, #8]
 800c328:	0e5b      	lsrs	r3, r3, #25
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	f003 0307 	and.w	r3, r3, #7
 800c330:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	689b      	ldr	r3, [r3, #8]
 800c338:	0f5b      	lsrs	r3, r3, #29
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	f003 0307 	and.w	r3, r3, #7
 800c340:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c342:	7bbb      	ldrb	r3, [r7, #14]
 800c344:	7b3a      	ldrb	r2, [r7, #12]
 800c346:	4911      	ldr	r1, [pc, #68]	@ (800c38c <UARTEx_SetNbDataToProcess+0x94>)
 800c348:	5c8a      	ldrb	r2, [r1, r2]
 800c34a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c34e:	7b3a      	ldrb	r2, [r7, #12]
 800c350:	490f      	ldr	r1, [pc, #60]	@ (800c390 <UARTEx_SetNbDataToProcess+0x98>)
 800c352:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c354:	fb93 f3f2 	sdiv	r3, r3, r2
 800c358:	b29a      	uxth	r2, r3
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c360:	7bfb      	ldrb	r3, [r7, #15]
 800c362:	7b7a      	ldrb	r2, [r7, #13]
 800c364:	4909      	ldr	r1, [pc, #36]	@ (800c38c <UARTEx_SetNbDataToProcess+0x94>)
 800c366:	5c8a      	ldrb	r2, [r1, r2]
 800c368:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c36c:	7b7a      	ldrb	r2, [r7, #13]
 800c36e:	4908      	ldr	r1, [pc, #32]	@ (800c390 <UARTEx_SetNbDataToProcess+0x98>)
 800c370:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c372:	fb93 f3f2 	sdiv	r3, r3, r2
 800c376:	b29a      	uxth	r2, r3
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c37e:	bf00      	nop
 800c380:	3714      	adds	r7, #20
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr
 800c38a:	bf00      	nop
 800c38c:	0800d174 	.word	0x0800d174
 800c390:	0800d17c 	.word	0x0800d17c

0800c394 <siprintf>:
 800c394:	b40e      	push	{r1, r2, r3}
 800c396:	b510      	push	{r4, lr}
 800c398:	b09d      	sub	sp, #116	@ 0x74
 800c39a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c39c:	9002      	str	r0, [sp, #8]
 800c39e:	9006      	str	r0, [sp, #24]
 800c3a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c3a4:	480a      	ldr	r0, [pc, #40]	@ (800c3d0 <siprintf+0x3c>)
 800c3a6:	9107      	str	r1, [sp, #28]
 800c3a8:	9104      	str	r1, [sp, #16]
 800c3aa:	490a      	ldr	r1, [pc, #40]	@ (800c3d4 <siprintf+0x40>)
 800c3ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3b0:	9105      	str	r1, [sp, #20]
 800c3b2:	2400      	movs	r4, #0
 800c3b4:	a902      	add	r1, sp, #8
 800c3b6:	6800      	ldr	r0, [r0, #0]
 800c3b8:	9301      	str	r3, [sp, #4]
 800c3ba:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c3bc:	f000 f9a2 	bl	800c704 <_svfiprintf_r>
 800c3c0:	9b02      	ldr	r3, [sp, #8]
 800c3c2:	701c      	strb	r4, [r3, #0]
 800c3c4:	b01d      	add	sp, #116	@ 0x74
 800c3c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3ca:	b003      	add	sp, #12
 800c3cc:	4770      	bx	lr
 800c3ce:	bf00      	nop
 800c3d0:	2400001c 	.word	0x2400001c
 800c3d4:	ffff0208 	.word	0xffff0208

0800c3d8 <memset>:
 800c3d8:	4402      	add	r2, r0
 800c3da:	4603      	mov	r3, r0
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d100      	bne.n	800c3e2 <memset+0xa>
 800c3e0:	4770      	bx	lr
 800c3e2:	f803 1b01 	strb.w	r1, [r3], #1
 800c3e6:	e7f9      	b.n	800c3dc <memset+0x4>

0800c3e8 <__errno>:
 800c3e8:	4b01      	ldr	r3, [pc, #4]	@ (800c3f0 <__errno+0x8>)
 800c3ea:	6818      	ldr	r0, [r3, #0]
 800c3ec:	4770      	bx	lr
 800c3ee:	bf00      	nop
 800c3f0:	2400001c 	.word	0x2400001c

0800c3f4 <__libc_init_array>:
 800c3f4:	b570      	push	{r4, r5, r6, lr}
 800c3f6:	4d0d      	ldr	r5, [pc, #52]	@ (800c42c <__libc_init_array+0x38>)
 800c3f8:	4c0d      	ldr	r4, [pc, #52]	@ (800c430 <__libc_init_array+0x3c>)
 800c3fa:	1b64      	subs	r4, r4, r5
 800c3fc:	10a4      	asrs	r4, r4, #2
 800c3fe:	2600      	movs	r6, #0
 800c400:	42a6      	cmp	r6, r4
 800c402:	d109      	bne.n	800c418 <__libc_init_array+0x24>
 800c404:	4d0b      	ldr	r5, [pc, #44]	@ (800c434 <__libc_init_array+0x40>)
 800c406:	4c0c      	ldr	r4, [pc, #48]	@ (800c438 <__libc_init_array+0x44>)
 800c408:	f000 fc64 	bl	800ccd4 <_init>
 800c40c:	1b64      	subs	r4, r4, r5
 800c40e:	10a4      	asrs	r4, r4, #2
 800c410:	2600      	movs	r6, #0
 800c412:	42a6      	cmp	r6, r4
 800c414:	d105      	bne.n	800c422 <__libc_init_array+0x2e>
 800c416:	bd70      	pop	{r4, r5, r6, pc}
 800c418:	f855 3b04 	ldr.w	r3, [r5], #4
 800c41c:	4798      	blx	r3
 800c41e:	3601      	adds	r6, #1
 800c420:	e7ee      	b.n	800c400 <__libc_init_array+0xc>
 800c422:	f855 3b04 	ldr.w	r3, [r5], #4
 800c426:	4798      	blx	r3
 800c428:	3601      	adds	r6, #1
 800c42a:	e7f2      	b.n	800c412 <__libc_init_array+0x1e>
 800c42c:	0800d1c0 	.word	0x0800d1c0
 800c430:	0800d1c0 	.word	0x0800d1c0
 800c434:	0800d1c0 	.word	0x0800d1c0
 800c438:	0800d1c8 	.word	0x0800d1c8

0800c43c <__retarget_lock_acquire_recursive>:
 800c43c:	4770      	bx	lr

0800c43e <__retarget_lock_release_recursive>:
 800c43e:	4770      	bx	lr

0800c440 <memcpy>:
 800c440:	440a      	add	r2, r1
 800c442:	4291      	cmp	r1, r2
 800c444:	f100 33ff 	add.w	r3, r0, #4294967295
 800c448:	d100      	bne.n	800c44c <memcpy+0xc>
 800c44a:	4770      	bx	lr
 800c44c:	b510      	push	{r4, lr}
 800c44e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c452:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c456:	4291      	cmp	r1, r2
 800c458:	d1f9      	bne.n	800c44e <memcpy+0xe>
 800c45a:	bd10      	pop	{r4, pc}

0800c45c <_free_r>:
 800c45c:	b538      	push	{r3, r4, r5, lr}
 800c45e:	4605      	mov	r5, r0
 800c460:	2900      	cmp	r1, #0
 800c462:	d041      	beq.n	800c4e8 <_free_r+0x8c>
 800c464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c468:	1f0c      	subs	r4, r1, #4
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	bfb8      	it	lt
 800c46e:	18e4      	addlt	r4, r4, r3
 800c470:	f000 f8e0 	bl	800c634 <__malloc_lock>
 800c474:	4a1d      	ldr	r2, [pc, #116]	@ (800c4ec <_free_r+0x90>)
 800c476:	6813      	ldr	r3, [r2, #0]
 800c478:	b933      	cbnz	r3, 800c488 <_free_r+0x2c>
 800c47a:	6063      	str	r3, [r4, #4]
 800c47c:	6014      	str	r4, [r2, #0]
 800c47e:	4628      	mov	r0, r5
 800c480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c484:	f000 b8dc 	b.w	800c640 <__malloc_unlock>
 800c488:	42a3      	cmp	r3, r4
 800c48a:	d908      	bls.n	800c49e <_free_r+0x42>
 800c48c:	6820      	ldr	r0, [r4, #0]
 800c48e:	1821      	adds	r1, r4, r0
 800c490:	428b      	cmp	r3, r1
 800c492:	bf01      	itttt	eq
 800c494:	6819      	ldreq	r1, [r3, #0]
 800c496:	685b      	ldreq	r3, [r3, #4]
 800c498:	1809      	addeq	r1, r1, r0
 800c49a:	6021      	streq	r1, [r4, #0]
 800c49c:	e7ed      	b.n	800c47a <_free_r+0x1e>
 800c49e:	461a      	mov	r2, r3
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	b10b      	cbz	r3, 800c4a8 <_free_r+0x4c>
 800c4a4:	42a3      	cmp	r3, r4
 800c4a6:	d9fa      	bls.n	800c49e <_free_r+0x42>
 800c4a8:	6811      	ldr	r1, [r2, #0]
 800c4aa:	1850      	adds	r0, r2, r1
 800c4ac:	42a0      	cmp	r0, r4
 800c4ae:	d10b      	bne.n	800c4c8 <_free_r+0x6c>
 800c4b0:	6820      	ldr	r0, [r4, #0]
 800c4b2:	4401      	add	r1, r0
 800c4b4:	1850      	adds	r0, r2, r1
 800c4b6:	4283      	cmp	r3, r0
 800c4b8:	6011      	str	r1, [r2, #0]
 800c4ba:	d1e0      	bne.n	800c47e <_free_r+0x22>
 800c4bc:	6818      	ldr	r0, [r3, #0]
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	6053      	str	r3, [r2, #4]
 800c4c2:	4408      	add	r0, r1
 800c4c4:	6010      	str	r0, [r2, #0]
 800c4c6:	e7da      	b.n	800c47e <_free_r+0x22>
 800c4c8:	d902      	bls.n	800c4d0 <_free_r+0x74>
 800c4ca:	230c      	movs	r3, #12
 800c4cc:	602b      	str	r3, [r5, #0]
 800c4ce:	e7d6      	b.n	800c47e <_free_r+0x22>
 800c4d0:	6820      	ldr	r0, [r4, #0]
 800c4d2:	1821      	adds	r1, r4, r0
 800c4d4:	428b      	cmp	r3, r1
 800c4d6:	bf04      	itt	eq
 800c4d8:	6819      	ldreq	r1, [r3, #0]
 800c4da:	685b      	ldreq	r3, [r3, #4]
 800c4dc:	6063      	str	r3, [r4, #4]
 800c4de:	bf04      	itt	eq
 800c4e0:	1809      	addeq	r1, r1, r0
 800c4e2:	6021      	streq	r1, [r4, #0]
 800c4e4:	6054      	str	r4, [r2, #4]
 800c4e6:	e7ca      	b.n	800c47e <_free_r+0x22>
 800c4e8:	bd38      	pop	{r3, r4, r5, pc}
 800c4ea:	bf00      	nop
 800c4ec:	24000eb4 	.word	0x24000eb4

0800c4f0 <sbrk_aligned>:
 800c4f0:	b570      	push	{r4, r5, r6, lr}
 800c4f2:	4e0f      	ldr	r6, [pc, #60]	@ (800c530 <sbrk_aligned+0x40>)
 800c4f4:	460c      	mov	r4, r1
 800c4f6:	6831      	ldr	r1, [r6, #0]
 800c4f8:	4605      	mov	r5, r0
 800c4fa:	b911      	cbnz	r1, 800c502 <sbrk_aligned+0x12>
 800c4fc:	f000 fba4 	bl	800cc48 <_sbrk_r>
 800c500:	6030      	str	r0, [r6, #0]
 800c502:	4621      	mov	r1, r4
 800c504:	4628      	mov	r0, r5
 800c506:	f000 fb9f 	bl	800cc48 <_sbrk_r>
 800c50a:	1c43      	adds	r3, r0, #1
 800c50c:	d103      	bne.n	800c516 <sbrk_aligned+0x26>
 800c50e:	f04f 34ff 	mov.w	r4, #4294967295
 800c512:	4620      	mov	r0, r4
 800c514:	bd70      	pop	{r4, r5, r6, pc}
 800c516:	1cc4      	adds	r4, r0, #3
 800c518:	f024 0403 	bic.w	r4, r4, #3
 800c51c:	42a0      	cmp	r0, r4
 800c51e:	d0f8      	beq.n	800c512 <sbrk_aligned+0x22>
 800c520:	1a21      	subs	r1, r4, r0
 800c522:	4628      	mov	r0, r5
 800c524:	f000 fb90 	bl	800cc48 <_sbrk_r>
 800c528:	3001      	adds	r0, #1
 800c52a:	d1f2      	bne.n	800c512 <sbrk_aligned+0x22>
 800c52c:	e7ef      	b.n	800c50e <sbrk_aligned+0x1e>
 800c52e:	bf00      	nop
 800c530:	24000eb0 	.word	0x24000eb0

0800c534 <_malloc_r>:
 800c534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c538:	1ccd      	adds	r5, r1, #3
 800c53a:	f025 0503 	bic.w	r5, r5, #3
 800c53e:	3508      	adds	r5, #8
 800c540:	2d0c      	cmp	r5, #12
 800c542:	bf38      	it	cc
 800c544:	250c      	movcc	r5, #12
 800c546:	2d00      	cmp	r5, #0
 800c548:	4606      	mov	r6, r0
 800c54a:	db01      	blt.n	800c550 <_malloc_r+0x1c>
 800c54c:	42a9      	cmp	r1, r5
 800c54e:	d904      	bls.n	800c55a <_malloc_r+0x26>
 800c550:	230c      	movs	r3, #12
 800c552:	6033      	str	r3, [r6, #0]
 800c554:	2000      	movs	r0, #0
 800c556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c55a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c630 <_malloc_r+0xfc>
 800c55e:	f000 f869 	bl	800c634 <__malloc_lock>
 800c562:	f8d8 3000 	ldr.w	r3, [r8]
 800c566:	461c      	mov	r4, r3
 800c568:	bb44      	cbnz	r4, 800c5bc <_malloc_r+0x88>
 800c56a:	4629      	mov	r1, r5
 800c56c:	4630      	mov	r0, r6
 800c56e:	f7ff ffbf 	bl	800c4f0 <sbrk_aligned>
 800c572:	1c43      	adds	r3, r0, #1
 800c574:	4604      	mov	r4, r0
 800c576:	d158      	bne.n	800c62a <_malloc_r+0xf6>
 800c578:	f8d8 4000 	ldr.w	r4, [r8]
 800c57c:	4627      	mov	r7, r4
 800c57e:	2f00      	cmp	r7, #0
 800c580:	d143      	bne.n	800c60a <_malloc_r+0xd6>
 800c582:	2c00      	cmp	r4, #0
 800c584:	d04b      	beq.n	800c61e <_malloc_r+0xea>
 800c586:	6823      	ldr	r3, [r4, #0]
 800c588:	4639      	mov	r1, r7
 800c58a:	4630      	mov	r0, r6
 800c58c:	eb04 0903 	add.w	r9, r4, r3
 800c590:	f000 fb5a 	bl	800cc48 <_sbrk_r>
 800c594:	4581      	cmp	r9, r0
 800c596:	d142      	bne.n	800c61e <_malloc_r+0xea>
 800c598:	6821      	ldr	r1, [r4, #0]
 800c59a:	1a6d      	subs	r5, r5, r1
 800c59c:	4629      	mov	r1, r5
 800c59e:	4630      	mov	r0, r6
 800c5a0:	f7ff ffa6 	bl	800c4f0 <sbrk_aligned>
 800c5a4:	3001      	adds	r0, #1
 800c5a6:	d03a      	beq.n	800c61e <_malloc_r+0xea>
 800c5a8:	6823      	ldr	r3, [r4, #0]
 800c5aa:	442b      	add	r3, r5
 800c5ac:	6023      	str	r3, [r4, #0]
 800c5ae:	f8d8 3000 	ldr.w	r3, [r8]
 800c5b2:	685a      	ldr	r2, [r3, #4]
 800c5b4:	bb62      	cbnz	r2, 800c610 <_malloc_r+0xdc>
 800c5b6:	f8c8 7000 	str.w	r7, [r8]
 800c5ba:	e00f      	b.n	800c5dc <_malloc_r+0xa8>
 800c5bc:	6822      	ldr	r2, [r4, #0]
 800c5be:	1b52      	subs	r2, r2, r5
 800c5c0:	d420      	bmi.n	800c604 <_malloc_r+0xd0>
 800c5c2:	2a0b      	cmp	r2, #11
 800c5c4:	d917      	bls.n	800c5f6 <_malloc_r+0xc2>
 800c5c6:	1961      	adds	r1, r4, r5
 800c5c8:	42a3      	cmp	r3, r4
 800c5ca:	6025      	str	r5, [r4, #0]
 800c5cc:	bf18      	it	ne
 800c5ce:	6059      	strne	r1, [r3, #4]
 800c5d0:	6863      	ldr	r3, [r4, #4]
 800c5d2:	bf08      	it	eq
 800c5d4:	f8c8 1000 	streq.w	r1, [r8]
 800c5d8:	5162      	str	r2, [r4, r5]
 800c5da:	604b      	str	r3, [r1, #4]
 800c5dc:	4630      	mov	r0, r6
 800c5de:	f000 f82f 	bl	800c640 <__malloc_unlock>
 800c5e2:	f104 000b 	add.w	r0, r4, #11
 800c5e6:	1d23      	adds	r3, r4, #4
 800c5e8:	f020 0007 	bic.w	r0, r0, #7
 800c5ec:	1ac2      	subs	r2, r0, r3
 800c5ee:	bf1c      	itt	ne
 800c5f0:	1a1b      	subne	r3, r3, r0
 800c5f2:	50a3      	strne	r3, [r4, r2]
 800c5f4:	e7af      	b.n	800c556 <_malloc_r+0x22>
 800c5f6:	6862      	ldr	r2, [r4, #4]
 800c5f8:	42a3      	cmp	r3, r4
 800c5fa:	bf0c      	ite	eq
 800c5fc:	f8c8 2000 	streq.w	r2, [r8]
 800c600:	605a      	strne	r2, [r3, #4]
 800c602:	e7eb      	b.n	800c5dc <_malloc_r+0xa8>
 800c604:	4623      	mov	r3, r4
 800c606:	6864      	ldr	r4, [r4, #4]
 800c608:	e7ae      	b.n	800c568 <_malloc_r+0x34>
 800c60a:	463c      	mov	r4, r7
 800c60c:	687f      	ldr	r7, [r7, #4]
 800c60e:	e7b6      	b.n	800c57e <_malloc_r+0x4a>
 800c610:	461a      	mov	r2, r3
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	42a3      	cmp	r3, r4
 800c616:	d1fb      	bne.n	800c610 <_malloc_r+0xdc>
 800c618:	2300      	movs	r3, #0
 800c61a:	6053      	str	r3, [r2, #4]
 800c61c:	e7de      	b.n	800c5dc <_malloc_r+0xa8>
 800c61e:	230c      	movs	r3, #12
 800c620:	6033      	str	r3, [r6, #0]
 800c622:	4630      	mov	r0, r6
 800c624:	f000 f80c 	bl	800c640 <__malloc_unlock>
 800c628:	e794      	b.n	800c554 <_malloc_r+0x20>
 800c62a:	6005      	str	r5, [r0, #0]
 800c62c:	e7d6      	b.n	800c5dc <_malloc_r+0xa8>
 800c62e:	bf00      	nop
 800c630:	24000eb4 	.word	0x24000eb4

0800c634 <__malloc_lock>:
 800c634:	4801      	ldr	r0, [pc, #4]	@ (800c63c <__malloc_lock+0x8>)
 800c636:	f7ff bf01 	b.w	800c43c <__retarget_lock_acquire_recursive>
 800c63a:	bf00      	nop
 800c63c:	24000eac 	.word	0x24000eac

0800c640 <__malloc_unlock>:
 800c640:	4801      	ldr	r0, [pc, #4]	@ (800c648 <__malloc_unlock+0x8>)
 800c642:	f7ff befc 	b.w	800c43e <__retarget_lock_release_recursive>
 800c646:	bf00      	nop
 800c648:	24000eac 	.word	0x24000eac

0800c64c <__ssputs_r>:
 800c64c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c650:	688e      	ldr	r6, [r1, #8]
 800c652:	461f      	mov	r7, r3
 800c654:	42be      	cmp	r6, r7
 800c656:	680b      	ldr	r3, [r1, #0]
 800c658:	4682      	mov	sl, r0
 800c65a:	460c      	mov	r4, r1
 800c65c:	4690      	mov	r8, r2
 800c65e:	d82d      	bhi.n	800c6bc <__ssputs_r+0x70>
 800c660:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c664:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c668:	d026      	beq.n	800c6b8 <__ssputs_r+0x6c>
 800c66a:	6965      	ldr	r5, [r4, #20]
 800c66c:	6909      	ldr	r1, [r1, #16]
 800c66e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c672:	eba3 0901 	sub.w	r9, r3, r1
 800c676:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c67a:	1c7b      	adds	r3, r7, #1
 800c67c:	444b      	add	r3, r9
 800c67e:	106d      	asrs	r5, r5, #1
 800c680:	429d      	cmp	r5, r3
 800c682:	bf38      	it	cc
 800c684:	461d      	movcc	r5, r3
 800c686:	0553      	lsls	r3, r2, #21
 800c688:	d527      	bpl.n	800c6da <__ssputs_r+0x8e>
 800c68a:	4629      	mov	r1, r5
 800c68c:	f7ff ff52 	bl	800c534 <_malloc_r>
 800c690:	4606      	mov	r6, r0
 800c692:	b360      	cbz	r0, 800c6ee <__ssputs_r+0xa2>
 800c694:	6921      	ldr	r1, [r4, #16]
 800c696:	464a      	mov	r2, r9
 800c698:	f7ff fed2 	bl	800c440 <memcpy>
 800c69c:	89a3      	ldrh	r3, [r4, #12]
 800c69e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c6a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6a6:	81a3      	strh	r3, [r4, #12]
 800c6a8:	6126      	str	r6, [r4, #16]
 800c6aa:	6165      	str	r5, [r4, #20]
 800c6ac:	444e      	add	r6, r9
 800c6ae:	eba5 0509 	sub.w	r5, r5, r9
 800c6b2:	6026      	str	r6, [r4, #0]
 800c6b4:	60a5      	str	r5, [r4, #8]
 800c6b6:	463e      	mov	r6, r7
 800c6b8:	42be      	cmp	r6, r7
 800c6ba:	d900      	bls.n	800c6be <__ssputs_r+0x72>
 800c6bc:	463e      	mov	r6, r7
 800c6be:	6820      	ldr	r0, [r4, #0]
 800c6c0:	4632      	mov	r2, r6
 800c6c2:	4641      	mov	r1, r8
 800c6c4:	f000 faa6 	bl	800cc14 <memmove>
 800c6c8:	68a3      	ldr	r3, [r4, #8]
 800c6ca:	1b9b      	subs	r3, r3, r6
 800c6cc:	60a3      	str	r3, [r4, #8]
 800c6ce:	6823      	ldr	r3, [r4, #0]
 800c6d0:	4433      	add	r3, r6
 800c6d2:	6023      	str	r3, [r4, #0]
 800c6d4:	2000      	movs	r0, #0
 800c6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6da:	462a      	mov	r2, r5
 800c6dc:	f000 fac4 	bl	800cc68 <_realloc_r>
 800c6e0:	4606      	mov	r6, r0
 800c6e2:	2800      	cmp	r0, #0
 800c6e4:	d1e0      	bne.n	800c6a8 <__ssputs_r+0x5c>
 800c6e6:	6921      	ldr	r1, [r4, #16]
 800c6e8:	4650      	mov	r0, sl
 800c6ea:	f7ff feb7 	bl	800c45c <_free_r>
 800c6ee:	230c      	movs	r3, #12
 800c6f0:	f8ca 3000 	str.w	r3, [sl]
 800c6f4:	89a3      	ldrh	r3, [r4, #12]
 800c6f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6fa:	81a3      	strh	r3, [r4, #12]
 800c6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c700:	e7e9      	b.n	800c6d6 <__ssputs_r+0x8a>
	...

0800c704 <_svfiprintf_r>:
 800c704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c708:	4698      	mov	r8, r3
 800c70a:	898b      	ldrh	r3, [r1, #12]
 800c70c:	061b      	lsls	r3, r3, #24
 800c70e:	b09d      	sub	sp, #116	@ 0x74
 800c710:	4607      	mov	r7, r0
 800c712:	460d      	mov	r5, r1
 800c714:	4614      	mov	r4, r2
 800c716:	d510      	bpl.n	800c73a <_svfiprintf_r+0x36>
 800c718:	690b      	ldr	r3, [r1, #16]
 800c71a:	b973      	cbnz	r3, 800c73a <_svfiprintf_r+0x36>
 800c71c:	2140      	movs	r1, #64	@ 0x40
 800c71e:	f7ff ff09 	bl	800c534 <_malloc_r>
 800c722:	6028      	str	r0, [r5, #0]
 800c724:	6128      	str	r0, [r5, #16]
 800c726:	b930      	cbnz	r0, 800c736 <_svfiprintf_r+0x32>
 800c728:	230c      	movs	r3, #12
 800c72a:	603b      	str	r3, [r7, #0]
 800c72c:	f04f 30ff 	mov.w	r0, #4294967295
 800c730:	b01d      	add	sp, #116	@ 0x74
 800c732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c736:	2340      	movs	r3, #64	@ 0x40
 800c738:	616b      	str	r3, [r5, #20]
 800c73a:	2300      	movs	r3, #0
 800c73c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c73e:	2320      	movs	r3, #32
 800c740:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c744:	f8cd 800c 	str.w	r8, [sp, #12]
 800c748:	2330      	movs	r3, #48	@ 0x30
 800c74a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c8e8 <_svfiprintf_r+0x1e4>
 800c74e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c752:	f04f 0901 	mov.w	r9, #1
 800c756:	4623      	mov	r3, r4
 800c758:	469a      	mov	sl, r3
 800c75a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c75e:	b10a      	cbz	r2, 800c764 <_svfiprintf_r+0x60>
 800c760:	2a25      	cmp	r2, #37	@ 0x25
 800c762:	d1f9      	bne.n	800c758 <_svfiprintf_r+0x54>
 800c764:	ebba 0b04 	subs.w	fp, sl, r4
 800c768:	d00b      	beq.n	800c782 <_svfiprintf_r+0x7e>
 800c76a:	465b      	mov	r3, fp
 800c76c:	4622      	mov	r2, r4
 800c76e:	4629      	mov	r1, r5
 800c770:	4638      	mov	r0, r7
 800c772:	f7ff ff6b 	bl	800c64c <__ssputs_r>
 800c776:	3001      	adds	r0, #1
 800c778:	f000 80a7 	beq.w	800c8ca <_svfiprintf_r+0x1c6>
 800c77c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c77e:	445a      	add	r2, fp
 800c780:	9209      	str	r2, [sp, #36]	@ 0x24
 800c782:	f89a 3000 	ldrb.w	r3, [sl]
 800c786:	2b00      	cmp	r3, #0
 800c788:	f000 809f 	beq.w	800c8ca <_svfiprintf_r+0x1c6>
 800c78c:	2300      	movs	r3, #0
 800c78e:	f04f 32ff 	mov.w	r2, #4294967295
 800c792:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c796:	f10a 0a01 	add.w	sl, sl, #1
 800c79a:	9304      	str	r3, [sp, #16]
 800c79c:	9307      	str	r3, [sp, #28]
 800c79e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c7a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c7a4:	4654      	mov	r4, sl
 800c7a6:	2205      	movs	r2, #5
 800c7a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7ac:	484e      	ldr	r0, [pc, #312]	@ (800c8e8 <_svfiprintf_r+0x1e4>)
 800c7ae:	f7f3 fdb7 	bl	8000320 <memchr>
 800c7b2:	9a04      	ldr	r2, [sp, #16]
 800c7b4:	b9d8      	cbnz	r0, 800c7ee <_svfiprintf_r+0xea>
 800c7b6:	06d0      	lsls	r0, r2, #27
 800c7b8:	bf44      	itt	mi
 800c7ba:	2320      	movmi	r3, #32
 800c7bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7c0:	0711      	lsls	r1, r2, #28
 800c7c2:	bf44      	itt	mi
 800c7c4:	232b      	movmi	r3, #43	@ 0x2b
 800c7c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c7ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7d0:	d015      	beq.n	800c7fe <_svfiprintf_r+0xfa>
 800c7d2:	9a07      	ldr	r2, [sp, #28]
 800c7d4:	4654      	mov	r4, sl
 800c7d6:	2000      	movs	r0, #0
 800c7d8:	f04f 0c0a 	mov.w	ip, #10
 800c7dc:	4621      	mov	r1, r4
 800c7de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7e2:	3b30      	subs	r3, #48	@ 0x30
 800c7e4:	2b09      	cmp	r3, #9
 800c7e6:	d94b      	bls.n	800c880 <_svfiprintf_r+0x17c>
 800c7e8:	b1b0      	cbz	r0, 800c818 <_svfiprintf_r+0x114>
 800c7ea:	9207      	str	r2, [sp, #28]
 800c7ec:	e014      	b.n	800c818 <_svfiprintf_r+0x114>
 800c7ee:	eba0 0308 	sub.w	r3, r0, r8
 800c7f2:	fa09 f303 	lsl.w	r3, r9, r3
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	9304      	str	r3, [sp, #16]
 800c7fa:	46a2      	mov	sl, r4
 800c7fc:	e7d2      	b.n	800c7a4 <_svfiprintf_r+0xa0>
 800c7fe:	9b03      	ldr	r3, [sp, #12]
 800c800:	1d19      	adds	r1, r3, #4
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	9103      	str	r1, [sp, #12]
 800c806:	2b00      	cmp	r3, #0
 800c808:	bfbb      	ittet	lt
 800c80a:	425b      	neglt	r3, r3
 800c80c:	f042 0202 	orrlt.w	r2, r2, #2
 800c810:	9307      	strge	r3, [sp, #28]
 800c812:	9307      	strlt	r3, [sp, #28]
 800c814:	bfb8      	it	lt
 800c816:	9204      	strlt	r2, [sp, #16]
 800c818:	7823      	ldrb	r3, [r4, #0]
 800c81a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c81c:	d10a      	bne.n	800c834 <_svfiprintf_r+0x130>
 800c81e:	7863      	ldrb	r3, [r4, #1]
 800c820:	2b2a      	cmp	r3, #42	@ 0x2a
 800c822:	d132      	bne.n	800c88a <_svfiprintf_r+0x186>
 800c824:	9b03      	ldr	r3, [sp, #12]
 800c826:	1d1a      	adds	r2, r3, #4
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	9203      	str	r2, [sp, #12]
 800c82c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c830:	3402      	adds	r4, #2
 800c832:	9305      	str	r3, [sp, #20]
 800c834:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c8f8 <_svfiprintf_r+0x1f4>
 800c838:	7821      	ldrb	r1, [r4, #0]
 800c83a:	2203      	movs	r2, #3
 800c83c:	4650      	mov	r0, sl
 800c83e:	f7f3 fd6f 	bl	8000320 <memchr>
 800c842:	b138      	cbz	r0, 800c854 <_svfiprintf_r+0x150>
 800c844:	9b04      	ldr	r3, [sp, #16]
 800c846:	eba0 000a 	sub.w	r0, r0, sl
 800c84a:	2240      	movs	r2, #64	@ 0x40
 800c84c:	4082      	lsls	r2, r0
 800c84e:	4313      	orrs	r3, r2
 800c850:	3401      	adds	r4, #1
 800c852:	9304      	str	r3, [sp, #16]
 800c854:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c858:	4824      	ldr	r0, [pc, #144]	@ (800c8ec <_svfiprintf_r+0x1e8>)
 800c85a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c85e:	2206      	movs	r2, #6
 800c860:	f7f3 fd5e 	bl	8000320 <memchr>
 800c864:	2800      	cmp	r0, #0
 800c866:	d036      	beq.n	800c8d6 <_svfiprintf_r+0x1d2>
 800c868:	4b21      	ldr	r3, [pc, #132]	@ (800c8f0 <_svfiprintf_r+0x1ec>)
 800c86a:	bb1b      	cbnz	r3, 800c8b4 <_svfiprintf_r+0x1b0>
 800c86c:	9b03      	ldr	r3, [sp, #12]
 800c86e:	3307      	adds	r3, #7
 800c870:	f023 0307 	bic.w	r3, r3, #7
 800c874:	3308      	adds	r3, #8
 800c876:	9303      	str	r3, [sp, #12]
 800c878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c87a:	4433      	add	r3, r6
 800c87c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c87e:	e76a      	b.n	800c756 <_svfiprintf_r+0x52>
 800c880:	fb0c 3202 	mla	r2, ip, r2, r3
 800c884:	460c      	mov	r4, r1
 800c886:	2001      	movs	r0, #1
 800c888:	e7a8      	b.n	800c7dc <_svfiprintf_r+0xd8>
 800c88a:	2300      	movs	r3, #0
 800c88c:	3401      	adds	r4, #1
 800c88e:	9305      	str	r3, [sp, #20]
 800c890:	4619      	mov	r1, r3
 800c892:	f04f 0c0a 	mov.w	ip, #10
 800c896:	4620      	mov	r0, r4
 800c898:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c89c:	3a30      	subs	r2, #48	@ 0x30
 800c89e:	2a09      	cmp	r2, #9
 800c8a0:	d903      	bls.n	800c8aa <_svfiprintf_r+0x1a6>
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d0c6      	beq.n	800c834 <_svfiprintf_r+0x130>
 800c8a6:	9105      	str	r1, [sp, #20]
 800c8a8:	e7c4      	b.n	800c834 <_svfiprintf_r+0x130>
 800c8aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8ae:	4604      	mov	r4, r0
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	e7f0      	b.n	800c896 <_svfiprintf_r+0x192>
 800c8b4:	ab03      	add	r3, sp, #12
 800c8b6:	9300      	str	r3, [sp, #0]
 800c8b8:	462a      	mov	r2, r5
 800c8ba:	4b0e      	ldr	r3, [pc, #56]	@ (800c8f4 <_svfiprintf_r+0x1f0>)
 800c8bc:	a904      	add	r1, sp, #16
 800c8be:	4638      	mov	r0, r7
 800c8c0:	f3af 8000 	nop.w
 800c8c4:	1c42      	adds	r2, r0, #1
 800c8c6:	4606      	mov	r6, r0
 800c8c8:	d1d6      	bne.n	800c878 <_svfiprintf_r+0x174>
 800c8ca:	89ab      	ldrh	r3, [r5, #12]
 800c8cc:	065b      	lsls	r3, r3, #25
 800c8ce:	f53f af2d 	bmi.w	800c72c <_svfiprintf_r+0x28>
 800c8d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c8d4:	e72c      	b.n	800c730 <_svfiprintf_r+0x2c>
 800c8d6:	ab03      	add	r3, sp, #12
 800c8d8:	9300      	str	r3, [sp, #0]
 800c8da:	462a      	mov	r2, r5
 800c8dc:	4b05      	ldr	r3, [pc, #20]	@ (800c8f4 <_svfiprintf_r+0x1f0>)
 800c8de:	a904      	add	r1, sp, #16
 800c8e0:	4638      	mov	r0, r7
 800c8e2:	f000 f879 	bl	800c9d8 <_printf_i>
 800c8e6:	e7ed      	b.n	800c8c4 <_svfiprintf_r+0x1c0>
 800c8e8:	0800d184 	.word	0x0800d184
 800c8ec:	0800d18e 	.word	0x0800d18e
 800c8f0:	00000000 	.word	0x00000000
 800c8f4:	0800c64d 	.word	0x0800c64d
 800c8f8:	0800d18a 	.word	0x0800d18a

0800c8fc <_printf_common>:
 800c8fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c900:	4616      	mov	r6, r2
 800c902:	4698      	mov	r8, r3
 800c904:	688a      	ldr	r2, [r1, #8]
 800c906:	690b      	ldr	r3, [r1, #16]
 800c908:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c90c:	4293      	cmp	r3, r2
 800c90e:	bfb8      	it	lt
 800c910:	4613      	movlt	r3, r2
 800c912:	6033      	str	r3, [r6, #0]
 800c914:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c918:	4607      	mov	r7, r0
 800c91a:	460c      	mov	r4, r1
 800c91c:	b10a      	cbz	r2, 800c922 <_printf_common+0x26>
 800c91e:	3301      	adds	r3, #1
 800c920:	6033      	str	r3, [r6, #0]
 800c922:	6823      	ldr	r3, [r4, #0]
 800c924:	0699      	lsls	r1, r3, #26
 800c926:	bf42      	ittt	mi
 800c928:	6833      	ldrmi	r3, [r6, #0]
 800c92a:	3302      	addmi	r3, #2
 800c92c:	6033      	strmi	r3, [r6, #0]
 800c92e:	6825      	ldr	r5, [r4, #0]
 800c930:	f015 0506 	ands.w	r5, r5, #6
 800c934:	d106      	bne.n	800c944 <_printf_common+0x48>
 800c936:	f104 0a19 	add.w	sl, r4, #25
 800c93a:	68e3      	ldr	r3, [r4, #12]
 800c93c:	6832      	ldr	r2, [r6, #0]
 800c93e:	1a9b      	subs	r3, r3, r2
 800c940:	42ab      	cmp	r3, r5
 800c942:	dc26      	bgt.n	800c992 <_printf_common+0x96>
 800c944:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c948:	6822      	ldr	r2, [r4, #0]
 800c94a:	3b00      	subs	r3, #0
 800c94c:	bf18      	it	ne
 800c94e:	2301      	movne	r3, #1
 800c950:	0692      	lsls	r2, r2, #26
 800c952:	d42b      	bmi.n	800c9ac <_printf_common+0xb0>
 800c954:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c958:	4641      	mov	r1, r8
 800c95a:	4638      	mov	r0, r7
 800c95c:	47c8      	blx	r9
 800c95e:	3001      	adds	r0, #1
 800c960:	d01e      	beq.n	800c9a0 <_printf_common+0xa4>
 800c962:	6823      	ldr	r3, [r4, #0]
 800c964:	6922      	ldr	r2, [r4, #16]
 800c966:	f003 0306 	and.w	r3, r3, #6
 800c96a:	2b04      	cmp	r3, #4
 800c96c:	bf02      	ittt	eq
 800c96e:	68e5      	ldreq	r5, [r4, #12]
 800c970:	6833      	ldreq	r3, [r6, #0]
 800c972:	1aed      	subeq	r5, r5, r3
 800c974:	68a3      	ldr	r3, [r4, #8]
 800c976:	bf0c      	ite	eq
 800c978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c97c:	2500      	movne	r5, #0
 800c97e:	4293      	cmp	r3, r2
 800c980:	bfc4      	itt	gt
 800c982:	1a9b      	subgt	r3, r3, r2
 800c984:	18ed      	addgt	r5, r5, r3
 800c986:	2600      	movs	r6, #0
 800c988:	341a      	adds	r4, #26
 800c98a:	42b5      	cmp	r5, r6
 800c98c:	d11a      	bne.n	800c9c4 <_printf_common+0xc8>
 800c98e:	2000      	movs	r0, #0
 800c990:	e008      	b.n	800c9a4 <_printf_common+0xa8>
 800c992:	2301      	movs	r3, #1
 800c994:	4652      	mov	r2, sl
 800c996:	4641      	mov	r1, r8
 800c998:	4638      	mov	r0, r7
 800c99a:	47c8      	blx	r9
 800c99c:	3001      	adds	r0, #1
 800c99e:	d103      	bne.n	800c9a8 <_printf_common+0xac>
 800c9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9a8:	3501      	adds	r5, #1
 800c9aa:	e7c6      	b.n	800c93a <_printf_common+0x3e>
 800c9ac:	18e1      	adds	r1, r4, r3
 800c9ae:	1c5a      	adds	r2, r3, #1
 800c9b0:	2030      	movs	r0, #48	@ 0x30
 800c9b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c9b6:	4422      	add	r2, r4
 800c9b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c9bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c9c0:	3302      	adds	r3, #2
 800c9c2:	e7c7      	b.n	800c954 <_printf_common+0x58>
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	4622      	mov	r2, r4
 800c9c8:	4641      	mov	r1, r8
 800c9ca:	4638      	mov	r0, r7
 800c9cc:	47c8      	blx	r9
 800c9ce:	3001      	adds	r0, #1
 800c9d0:	d0e6      	beq.n	800c9a0 <_printf_common+0xa4>
 800c9d2:	3601      	adds	r6, #1
 800c9d4:	e7d9      	b.n	800c98a <_printf_common+0x8e>
	...

0800c9d8 <_printf_i>:
 800c9d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9dc:	7e0f      	ldrb	r7, [r1, #24]
 800c9de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c9e0:	2f78      	cmp	r7, #120	@ 0x78
 800c9e2:	4691      	mov	r9, r2
 800c9e4:	4680      	mov	r8, r0
 800c9e6:	460c      	mov	r4, r1
 800c9e8:	469a      	mov	sl, r3
 800c9ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c9ee:	d807      	bhi.n	800ca00 <_printf_i+0x28>
 800c9f0:	2f62      	cmp	r7, #98	@ 0x62
 800c9f2:	d80a      	bhi.n	800ca0a <_printf_i+0x32>
 800c9f4:	2f00      	cmp	r7, #0
 800c9f6:	f000 80d1 	beq.w	800cb9c <_printf_i+0x1c4>
 800c9fa:	2f58      	cmp	r7, #88	@ 0x58
 800c9fc:	f000 80b8 	beq.w	800cb70 <_printf_i+0x198>
 800ca00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ca04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ca08:	e03a      	b.n	800ca80 <_printf_i+0xa8>
 800ca0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ca0e:	2b15      	cmp	r3, #21
 800ca10:	d8f6      	bhi.n	800ca00 <_printf_i+0x28>
 800ca12:	a101      	add	r1, pc, #4	@ (adr r1, 800ca18 <_printf_i+0x40>)
 800ca14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca18:	0800ca71 	.word	0x0800ca71
 800ca1c:	0800ca85 	.word	0x0800ca85
 800ca20:	0800ca01 	.word	0x0800ca01
 800ca24:	0800ca01 	.word	0x0800ca01
 800ca28:	0800ca01 	.word	0x0800ca01
 800ca2c:	0800ca01 	.word	0x0800ca01
 800ca30:	0800ca85 	.word	0x0800ca85
 800ca34:	0800ca01 	.word	0x0800ca01
 800ca38:	0800ca01 	.word	0x0800ca01
 800ca3c:	0800ca01 	.word	0x0800ca01
 800ca40:	0800ca01 	.word	0x0800ca01
 800ca44:	0800cb83 	.word	0x0800cb83
 800ca48:	0800caaf 	.word	0x0800caaf
 800ca4c:	0800cb3d 	.word	0x0800cb3d
 800ca50:	0800ca01 	.word	0x0800ca01
 800ca54:	0800ca01 	.word	0x0800ca01
 800ca58:	0800cba5 	.word	0x0800cba5
 800ca5c:	0800ca01 	.word	0x0800ca01
 800ca60:	0800caaf 	.word	0x0800caaf
 800ca64:	0800ca01 	.word	0x0800ca01
 800ca68:	0800ca01 	.word	0x0800ca01
 800ca6c:	0800cb45 	.word	0x0800cb45
 800ca70:	6833      	ldr	r3, [r6, #0]
 800ca72:	1d1a      	adds	r2, r3, #4
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	6032      	str	r2, [r6, #0]
 800ca78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ca7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ca80:	2301      	movs	r3, #1
 800ca82:	e09c      	b.n	800cbbe <_printf_i+0x1e6>
 800ca84:	6833      	ldr	r3, [r6, #0]
 800ca86:	6820      	ldr	r0, [r4, #0]
 800ca88:	1d19      	adds	r1, r3, #4
 800ca8a:	6031      	str	r1, [r6, #0]
 800ca8c:	0606      	lsls	r6, r0, #24
 800ca8e:	d501      	bpl.n	800ca94 <_printf_i+0xbc>
 800ca90:	681d      	ldr	r5, [r3, #0]
 800ca92:	e003      	b.n	800ca9c <_printf_i+0xc4>
 800ca94:	0645      	lsls	r5, r0, #25
 800ca96:	d5fb      	bpl.n	800ca90 <_printf_i+0xb8>
 800ca98:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ca9c:	2d00      	cmp	r5, #0
 800ca9e:	da03      	bge.n	800caa8 <_printf_i+0xd0>
 800caa0:	232d      	movs	r3, #45	@ 0x2d
 800caa2:	426d      	negs	r5, r5
 800caa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800caa8:	4858      	ldr	r0, [pc, #352]	@ (800cc0c <_printf_i+0x234>)
 800caaa:	230a      	movs	r3, #10
 800caac:	e011      	b.n	800cad2 <_printf_i+0xfa>
 800caae:	6821      	ldr	r1, [r4, #0]
 800cab0:	6833      	ldr	r3, [r6, #0]
 800cab2:	0608      	lsls	r0, r1, #24
 800cab4:	f853 5b04 	ldr.w	r5, [r3], #4
 800cab8:	d402      	bmi.n	800cac0 <_printf_i+0xe8>
 800caba:	0649      	lsls	r1, r1, #25
 800cabc:	bf48      	it	mi
 800cabe:	b2ad      	uxthmi	r5, r5
 800cac0:	2f6f      	cmp	r7, #111	@ 0x6f
 800cac2:	4852      	ldr	r0, [pc, #328]	@ (800cc0c <_printf_i+0x234>)
 800cac4:	6033      	str	r3, [r6, #0]
 800cac6:	bf14      	ite	ne
 800cac8:	230a      	movne	r3, #10
 800caca:	2308      	moveq	r3, #8
 800cacc:	2100      	movs	r1, #0
 800cace:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cad2:	6866      	ldr	r6, [r4, #4]
 800cad4:	60a6      	str	r6, [r4, #8]
 800cad6:	2e00      	cmp	r6, #0
 800cad8:	db05      	blt.n	800cae6 <_printf_i+0x10e>
 800cada:	6821      	ldr	r1, [r4, #0]
 800cadc:	432e      	orrs	r6, r5
 800cade:	f021 0104 	bic.w	r1, r1, #4
 800cae2:	6021      	str	r1, [r4, #0]
 800cae4:	d04b      	beq.n	800cb7e <_printf_i+0x1a6>
 800cae6:	4616      	mov	r6, r2
 800cae8:	fbb5 f1f3 	udiv	r1, r5, r3
 800caec:	fb03 5711 	mls	r7, r3, r1, r5
 800caf0:	5dc7      	ldrb	r7, [r0, r7]
 800caf2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800caf6:	462f      	mov	r7, r5
 800caf8:	42bb      	cmp	r3, r7
 800cafa:	460d      	mov	r5, r1
 800cafc:	d9f4      	bls.n	800cae8 <_printf_i+0x110>
 800cafe:	2b08      	cmp	r3, #8
 800cb00:	d10b      	bne.n	800cb1a <_printf_i+0x142>
 800cb02:	6823      	ldr	r3, [r4, #0]
 800cb04:	07df      	lsls	r7, r3, #31
 800cb06:	d508      	bpl.n	800cb1a <_printf_i+0x142>
 800cb08:	6923      	ldr	r3, [r4, #16]
 800cb0a:	6861      	ldr	r1, [r4, #4]
 800cb0c:	4299      	cmp	r1, r3
 800cb0e:	bfde      	ittt	le
 800cb10:	2330      	movle	r3, #48	@ 0x30
 800cb12:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cb16:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cb1a:	1b92      	subs	r2, r2, r6
 800cb1c:	6122      	str	r2, [r4, #16]
 800cb1e:	f8cd a000 	str.w	sl, [sp]
 800cb22:	464b      	mov	r3, r9
 800cb24:	aa03      	add	r2, sp, #12
 800cb26:	4621      	mov	r1, r4
 800cb28:	4640      	mov	r0, r8
 800cb2a:	f7ff fee7 	bl	800c8fc <_printf_common>
 800cb2e:	3001      	adds	r0, #1
 800cb30:	d14a      	bne.n	800cbc8 <_printf_i+0x1f0>
 800cb32:	f04f 30ff 	mov.w	r0, #4294967295
 800cb36:	b004      	add	sp, #16
 800cb38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb3c:	6823      	ldr	r3, [r4, #0]
 800cb3e:	f043 0320 	orr.w	r3, r3, #32
 800cb42:	6023      	str	r3, [r4, #0]
 800cb44:	4832      	ldr	r0, [pc, #200]	@ (800cc10 <_printf_i+0x238>)
 800cb46:	2778      	movs	r7, #120	@ 0x78
 800cb48:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cb4c:	6823      	ldr	r3, [r4, #0]
 800cb4e:	6831      	ldr	r1, [r6, #0]
 800cb50:	061f      	lsls	r7, r3, #24
 800cb52:	f851 5b04 	ldr.w	r5, [r1], #4
 800cb56:	d402      	bmi.n	800cb5e <_printf_i+0x186>
 800cb58:	065f      	lsls	r7, r3, #25
 800cb5a:	bf48      	it	mi
 800cb5c:	b2ad      	uxthmi	r5, r5
 800cb5e:	6031      	str	r1, [r6, #0]
 800cb60:	07d9      	lsls	r1, r3, #31
 800cb62:	bf44      	itt	mi
 800cb64:	f043 0320 	orrmi.w	r3, r3, #32
 800cb68:	6023      	strmi	r3, [r4, #0]
 800cb6a:	b11d      	cbz	r5, 800cb74 <_printf_i+0x19c>
 800cb6c:	2310      	movs	r3, #16
 800cb6e:	e7ad      	b.n	800cacc <_printf_i+0xf4>
 800cb70:	4826      	ldr	r0, [pc, #152]	@ (800cc0c <_printf_i+0x234>)
 800cb72:	e7e9      	b.n	800cb48 <_printf_i+0x170>
 800cb74:	6823      	ldr	r3, [r4, #0]
 800cb76:	f023 0320 	bic.w	r3, r3, #32
 800cb7a:	6023      	str	r3, [r4, #0]
 800cb7c:	e7f6      	b.n	800cb6c <_printf_i+0x194>
 800cb7e:	4616      	mov	r6, r2
 800cb80:	e7bd      	b.n	800cafe <_printf_i+0x126>
 800cb82:	6833      	ldr	r3, [r6, #0]
 800cb84:	6825      	ldr	r5, [r4, #0]
 800cb86:	6961      	ldr	r1, [r4, #20]
 800cb88:	1d18      	adds	r0, r3, #4
 800cb8a:	6030      	str	r0, [r6, #0]
 800cb8c:	062e      	lsls	r6, r5, #24
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	d501      	bpl.n	800cb96 <_printf_i+0x1be>
 800cb92:	6019      	str	r1, [r3, #0]
 800cb94:	e002      	b.n	800cb9c <_printf_i+0x1c4>
 800cb96:	0668      	lsls	r0, r5, #25
 800cb98:	d5fb      	bpl.n	800cb92 <_printf_i+0x1ba>
 800cb9a:	8019      	strh	r1, [r3, #0]
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	6123      	str	r3, [r4, #16]
 800cba0:	4616      	mov	r6, r2
 800cba2:	e7bc      	b.n	800cb1e <_printf_i+0x146>
 800cba4:	6833      	ldr	r3, [r6, #0]
 800cba6:	1d1a      	adds	r2, r3, #4
 800cba8:	6032      	str	r2, [r6, #0]
 800cbaa:	681e      	ldr	r6, [r3, #0]
 800cbac:	6862      	ldr	r2, [r4, #4]
 800cbae:	2100      	movs	r1, #0
 800cbb0:	4630      	mov	r0, r6
 800cbb2:	f7f3 fbb5 	bl	8000320 <memchr>
 800cbb6:	b108      	cbz	r0, 800cbbc <_printf_i+0x1e4>
 800cbb8:	1b80      	subs	r0, r0, r6
 800cbba:	6060      	str	r0, [r4, #4]
 800cbbc:	6863      	ldr	r3, [r4, #4]
 800cbbe:	6123      	str	r3, [r4, #16]
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cbc6:	e7aa      	b.n	800cb1e <_printf_i+0x146>
 800cbc8:	6923      	ldr	r3, [r4, #16]
 800cbca:	4632      	mov	r2, r6
 800cbcc:	4649      	mov	r1, r9
 800cbce:	4640      	mov	r0, r8
 800cbd0:	47d0      	blx	sl
 800cbd2:	3001      	adds	r0, #1
 800cbd4:	d0ad      	beq.n	800cb32 <_printf_i+0x15a>
 800cbd6:	6823      	ldr	r3, [r4, #0]
 800cbd8:	079b      	lsls	r3, r3, #30
 800cbda:	d413      	bmi.n	800cc04 <_printf_i+0x22c>
 800cbdc:	68e0      	ldr	r0, [r4, #12]
 800cbde:	9b03      	ldr	r3, [sp, #12]
 800cbe0:	4298      	cmp	r0, r3
 800cbe2:	bfb8      	it	lt
 800cbe4:	4618      	movlt	r0, r3
 800cbe6:	e7a6      	b.n	800cb36 <_printf_i+0x15e>
 800cbe8:	2301      	movs	r3, #1
 800cbea:	4632      	mov	r2, r6
 800cbec:	4649      	mov	r1, r9
 800cbee:	4640      	mov	r0, r8
 800cbf0:	47d0      	blx	sl
 800cbf2:	3001      	adds	r0, #1
 800cbf4:	d09d      	beq.n	800cb32 <_printf_i+0x15a>
 800cbf6:	3501      	adds	r5, #1
 800cbf8:	68e3      	ldr	r3, [r4, #12]
 800cbfa:	9903      	ldr	r1, [sp, #12]
 800cbfc:	1a5b      	subs	r3, r3, r1
 800cbfe:	42ab      	cmp	r3, r5
 800cc00:	dcf2      	bgt.n	800cbe8 <_printf_i+0x210>
 800cc02:	e7eb      	b.n	800cbdc <_printf_i+0x204>
 800cc04:	2500      	movs	r5, #0
 800cc06:	f104 0619 	add.w	r6, r4, #25
 800cc0a:	e7f5      	b.n	800cbf8 <_printf_i+0x220>
 800cc0c:	0800d195 	.word	0x0800d195
 800cc10:	0800d1a6 	.word	0x0800d1a6

0800cc14 <memmove>:
 800cc14:	4288      	cmp	r0, r1
 800cc16:	b510      	push	{r4, lr}
 800cc18:	eb01 0402 	add.w	r4, r1, r2
 800cc1c:	d902      	bls.n	800cc24 <memmove+0x10>
 800cc1e:	4284      	cmp	r4, r0
 800cc20:	4623      	mov	r3, r4
 800cc22:	d807      	bhi.n	800cc34 <memmove+0x20>
 800cc24:	1e43      	subs	r3, r0, #1
 800cc26:	42a1      	cmp	r1, r4
 800cc28:	d008      	beq.n	800cc3c <memmove+0x28>
 800cc2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc32:	e7f8      	b.n	800cc26 <memmove+0x12>
 800cc34:	4402      	add	r2, r0
 800cc36:	4601      	mov	r1, r0
 800cc38:	428a      	cmp	r2, r1
 800cc3a:	d100      	bne.n	800cc3e <memmove+0x2a>
 800cc3c:	bd10      	pop	{r4, pc}
 800cc3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc46:	e7f7      	b.n	800cc38 <memmove+0x24>

0800cc48 <_sbrk_r>:
 800cc48:	b538      	push	{r3, r4, r5, lr}
 800cc4a:	4d06      	ldr	r5, [pc, #24]	@ (800cc64 <_sbrk_r+0x1c>)
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	4604      	mov	r4, r0
 800cc50:	4608      	mov	r0, r1
 800cc52:	602b      	str	r3, [r5, #0]
 800cc54:	f7f6 f894 	bl	8002d80 <_sbrk>
 800cc58:	1c43      	adds	r3, r0, #1
 800cc5a:	d102      	bne.n	800cc62 <_sbrk_r+0x1a>
 800cc5c:	682b      	ldr	r3, [r5, #0]
 800cc5e:	b103      	cbz	r3, 800cc62 <_sbrk_r+0x1a>
 800cc60:	6023      	str	r3, [r4, #0]
 800cc62:	bd38      	pop	{r3, r4, r5, pc}
 800cc64:	24000ea8 	.word	0x24000ea8

0800cc68 <_realloc_r>:
 800cc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc6c:	4607      	mov	r7, r0
 800cc6e:	4614      	mov	r4, r2
 800cc70:	460d      	mov	r5, r1
 800cc72:	b921      	cbnz	r1, 800cc7e <_realloc_r+0x16>
 800cc74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc78:	4611      	mov	r1, r2
 800cc7a:	f7ff bc5b 	b.w	800c534 <_malloc_r>
 800cc7e:	b92a      	cbnz	r2, 800cc8c <_realloc_r+0x24>
 800cc80:	f7ff fbec 	bl	800c45c <_free_r>
 800cc84:	4625      	mov	r5, r4
 800cc86:	4628      	mov	r0, r5
 800cc88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc8c:	f000 f81a 	bl	800ccc4 <_malloc_usable_size_r>
 800cc90:	4284      	cmp	r4, r0
 800cc92:	4606      	mov	r6, r0
 800cc94:	d802      	bhi.n	800cc9c <_realloc_r+0x34>
 800cc96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cc9a:	d8f4      	bhi.n	800cc86 <_realloc_r+0x1e>
 800cc9c:	4621      	mov	r1, r4
 800cc9e:	4638      	mov	r0, r7
 800cca0:	f7ff fc48 	bl	800c534 <_malloc_r>
 800cca4:	4680      	mov	r8, r0
 800cca6:	b908      	cbnz	r0, 800ccac <_realloc_r+0x44>
 800cca8:	4645      	mov	r5, r8
 800ccaa:	e7ec      	b.n	800cc86 <_realloc_r+0x1e>
 800ccac:	42b4      	cmp	r4, r6
 800ccae:	4622      	mov	r2, r4
 800ccb0:	4629      	mov	r1, r5
 800ccb2:	bf28      	it	cs
 800ccb4:	4632      	movcs	r2, r6
 800ccb6:	f7ff fbc3 	bl	800c440 <memcpy>
 800ccba:	4629      	mov	r1, r5
 800ccbc:	4638      	mov	r0, r7
 800ccbe:	f7ff fbcd 	bl	800c45c <_free_r>
 800ccc2:	e7f1      	b.n	800cca8 <_realloc_r+0x40>

0800ccc4 <_malloc_usable_size_r>:
 800ccc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccc8:	1f18      	subs	r0, r3, #4
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	bfbc      	itt	lt
 800ccce:	580b      	ldrlt	r3, [r1, r0]
 800ccd0:	18c0      	addlt	r0, r0, r3
 800ccd2:	4770      	bx	lr

0800ccd4 <_init>:
 800ccd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccd6:	bf00      	nop
 800ccd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccda:	bc08      	pop	{r3}
 800ccdc:	469e      	mov	lr, r3
 800ccde:	4770      	bx	lr

0800cce0 <_fini>:
 800cce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cce2:	bf00      	nop
 800cce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cce6:	bc08      	pop	{r3}
 800cce8:	469e      	mov	lr, r3
 800ccea:	4770      	bx	lr
