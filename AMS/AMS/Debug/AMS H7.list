
AMS H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b508  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  0800b7d8  0800b7d8  0000c7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bbec  0800bbec  0000cbec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800bbf4  0800bbf4  0000cbf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bbfc  0800bbfc  0000cbfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  24000000  0800bc00  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000d50  24000068  0800bc68  0000d068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000db8  0800bc68  0000ddb8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021783  00000000  00000000  0000d096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000352f  00000000  00000000  0002e819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001380  00000000  00000000  00031d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f0b  00000000  00000000  000330c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a291  00000000  00000000  00033fd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a6ff  00000000  00000000  0006e264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00169ba8  00000000  00000000  00088963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f250b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000592c  00000000  00000000  001f2550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005d  00000000  00000000  001f7e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000068 	.word	0x24000068
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b7c0 	.word	0x0800b7c0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400006c 	.word	0x2400006c
 800030c:	0800b7c0 	.word	0x0800b7c0

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <_ZN7BMS_MODC1Emiiihji>:
/*********************************************************************************************************
 ** Function name:           BMS_MOD
 ** Descriptions:            Initialization function of teh class
 *********************************************************************************************************/

BMS_MOD::BMS_MOD(uint32_t _ID, int _MAXV, int _MINV, int _MAXT,
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	603b      	str	r3, [r7, #0]
		uint8_t _NUMCELLS, unsigned int _SHUNT, int _LAG) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	3308      	adds	r3, #8
 800070c:	224c      	movs	r2, #76	@ 0x4c
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f00a fbd7 	bl	800aec4 <memset>
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	3354      	adds	r3, #84	@ 0x54
 800071a:	2298      	movs	r2, #152	@ 0x98
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f00a fbd0 	bl	800aec4 <memset>
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2200      	movs	r2, #0
 8000728:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2200      	movs	r2, #0
 8000730:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2200      	movs	r2, #0
 8000738:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	2200      	movs	r2, #0
 8000740:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800074a:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000754:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800075e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	2200      	movs	r2, #0
 8000772:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	2200      	movs	r2, #0
 800078e:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	2200      	movs	r2, #0
 8000796:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	2200      	movs	r2, #0
 800079e:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	2213      	movs	r2, #19
 80007a6:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	2203      	movs	r2, #3
 80007ae:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80007b8:	2230      	movs	r2, #48	@ 0x30
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f00a fb81 	bl	800aec4 <memset>
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	2200      	movs	r2, #0
 80007c6:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	2200      	movs	r2, #0
 80007ce:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	2200      	movs	r2, #0
 80007d6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	f241 0268 	movw	r2, #4200	@ 0x1068
 80007e0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	2200      	movs	r2, #0
 80007e8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	2200      	movs	r2, #0
 80007f0:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	2200      	movs	r2, #0
 80007f8:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
	CANID = _ID;
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	68ba      	ldr	r2, [r7, #8]
 8000800:	601a      	str	r2, [r3, #0]
	LIMIT_MAX_V = _MAXV;
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	LIMIT_MIN_V = _MINV;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	683a      	ldr	r2, [r7, #0]
 800080e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	LIMIT_MAX_T = _MAXT;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	69ba      	ldr	r2, [r7, #24]
 8000816:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
	NUM_CELLS = _NUMCELLS;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	7f3a      	ldrb	r2, [r7, #28]
 800081e:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
	time_lim_plotted += _LAG;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8000828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800082a:	441a      	add	r2, r3
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
	time_lim_sended += _LAG;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8000838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800083a:	441a      	add	r2, r3
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
	time_lim_received += _LAG;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8000848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800084a:	441a      	add	r2, r3
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
}
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	4618      	mov	r0, r3
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <_ZN7BMS_MOD12voltage_infoEPc>:

/*********************************************************************************************************
 ** Function name:           info
 ** Descriptions:            Function for printing the class data
 *********************************************************************************************************/
void BMS_MOD::voltage_info(char *buffer) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]

	if (getUARTState() == HAL_UART_STATE_READY) { // Send the message just if there is a serial por connected
 8000866:	f001 fa3d 	bl	8001ce4 <getUARTState>
 800086a:	4603      	mov	r3, r0
 800086c:	2b20      	cmp	r3, #32
 800086e:	bf0c      	ite	eq
 8000870:	2301      	moveq	r3, #1
 8000872:	2300      	movne	r3, #0
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	f000 8083 	beq.w	8000982 <_ZN7BMS_MOD12voltage_infoEPc+0x126>
		print((char*) "\n***********************");
 800087c:	4851      	ldr	r0, [pc, #324]	@ (80009c4 <_ZN7BMS_MOD12voltage_infoEPc+0x168>)
 800087e:	f001 f9d7 	bl	8001c30 <print>
		print((char*) "         BMS");
 8000882:	4851      	ldr	r0, [pc, #324]	@ (80009c8 <_ZN7BMS_MOD12voltage_infoEPc+0x16c>)
 8000884:	f001 f9d4 	bl	8001c30 <print>
		print((char*) "***********************");
 8000888:	4850      	ldr	r0, [pc, #320]	@ (80009cc <_ZN7BMS_MOD12voltage_infoEPc+0x170>)
 800088a:	f001 f9d1 	bl	8001c30 <print>
		sprintf(buffer, " - ERROR:     %i", error);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	461a      	mov	r2, r3
 8000894:	494e      	ldr	r1, [pc, #312]	@ (80009d0 <_ZN7BMS_MOD12voltage_infoEPc+0x174>)
 8000896:	6838      	ldr	r0, [r7, #0]
 8000898:	f00a faf2 	bl	800ae80 <siprintf>
		print(buffer);
 800089c:	6838      	ldr	r0, [r7, #0]
 800089e:	f001 f9c7 	bl	8001c30 <print>
		sprintf(buffer, " - CAN ID:    0x%lx", CANID);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	461a      	mov	r2, r3
 80008a8:	494a      	ldr	r1, [pc, #296]	@ (80009d4 <_ZN7BMS_MOD12voltage_infoEPc+0x178>)
 80008aa:	6838      	ldr	r0, [r7, #0]
 80008ac:	f00a fae8 	bl	800ae80 <siprintf>
		print(buffer);
 80008b0:	6838      	ldr	r0, [r7, #0]
 80008b2:	f001 f9bd 	bl	8001c30 <print>
		sprintf(buffer, " - MAX V =    %i mV", MAX_V);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80008bc:	461a      	mov	r2, r3
 80008be:	4946      	ldr	r1, [pc, #280]	@ (80009d8 <_ZN7BMS_MOD12voltage_infoEPc+0x17c>)
 80008c0:	6838      	ldr	r0, [r7, #0]
 80008c2:	f00a fadd 	bl	800ae80 <siprintf>
		print(buffer);
 80008c6:	6838      	ldr	r0, [r7, #0]
 80008c8:	f001 f9b2 	bl	8001c30 <print>
		sprintf(buffer, " - MIN V =    %i mV", MIN_V);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 80008d2:	461a      	mov	r2, r3
 80008d4:	4941      	ldr	r1, [pc, #260]	@ (80009dc <_ZN7BMS_MOD12voltage_infoEPc+0x180>)
 80008d6:	6838      	ldr	r0, [r7, #0]
 80008d8:	f00a fad2 	bl	800ae80 <siprintf>
		print(buffer);
 80008dc:	6838      	ldr	r0, [r7, #0]
 80008de:	f001 f9a7 	bl	8001c30 <print>
		print((char*) "-----------------------");
 80008e2:	483f      	ldr	r0, [pc, #252]	@ (80009e0 <_ZN7BMS_MOD12voltage_infoEPc+0x184>)
 80008e4:	f001 f9a4 	bl	8001c30 <print>
		sprintf(buffer, "VOLTS (mV): [%i", cellVoltagemV[0]);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	461a      	mov	r2, r3
 80008ee:	493d      	ldr	r1, [pc, #244]	@ (80009e4 <_ZN7BMS_MOD12voltage_infoEPc+0x188>)
 80008f0:	6838      	ldr	r0, [r7, #0]
 80008f2:	f00a fac5 	bl	800ae80 <siprintf>
		printnl(buffer);
 80008f6:	6838      	ldr	r0, [r7, #0]
 80008f8:	f001 f9b8 	bl	8001c6c <printnl>
		for (int i = 0; i < NUM_CELLS; i++) {
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	e00f      	b.n	8000922 <_ZN7BMS_MOD12voltage_infoEPc+0xc6>
			sprintf(buffer, ", %i", cellVoltagemV[i]);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	68fa      	ldr	r2, [r7, #12]
 8000906:	3202      	adds	r2, #2
 8000908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800090c:	461a      	mov	r2, r3
 800090e:	4936      	ldr	r1, [pc, #216]	@ (80009e8 <_ZN7BMS_MOD12voltage_infoEPc+0x18c>)
 8000910:	6838      	ldr	r0, [r7, #0]
 8000912:	f00a fab5 	bl	800ae80 <siprintf>
			printnl(buffer);
 8000916:	6838      	ldr	r0, [r7, #0]
 8000918:	f001 f9a8 	bl	8001c6c <printnl>
		for (int i = 0; i < NUM_CELLS; i++) {
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	3301      	adds	r3, #1
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8000928:	461a      	mov	r2, r3
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	4293      	cmp	r3, r2
 800092e:	dbe8      	blt.n	8000902 <_ZN7BMS_MOD12voltage_infoEPc+0xa6>
		}

		for (int i = 0; i < NUM_CELLS; i++) {
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	e00e      	b.n	8000954 <_ZN7BMS_MOD12voltage_infoEPc+0xf8>
			voltage_acum += cellVoltagemV[i];
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	68b9      	ldr	r1, [r7, #8]
 8000940:	3102      	adds	r1, #2
 8000942:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000946:	441a      	add	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
		for (int i = 0; i < NUM_CELLS; i++) {
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	3301      	adds	r3, #1
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800095a:	461a      	mov	r2, r3
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	4293      	cmp	r3, r2
 8000960:	dbe9      	blt.n	8000936 <_ZN7BMS_MOD12voltage_infoEPc+0xda>
		}

		print((char*) "]");
 8000962:	4822      	ldr	r0, [pc, #136]	@ (80009ec <_ZN7BMS_MOD12voltage_infoEPc+0x190>)
 8000964:	f001 f964 	bl	8001c30 <print>
		sprintf(buffer, " - V(max) = %i mV || V(min) = %i", MAX_V, MIN_V);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8000974:	491e      	ldr	r1, [pc, #120]	@ (80009f0 <_ZN7BMS_MOD12voltage_infoEPc+0x194>)
 8000976:	6838      	ldr	r0, [r7, #0]
 8000978:	f00a fa82 	bl	800ae80 <siprintf>
		print(buffer);
 800097c:	6838      	ldr	r0, [r7, #0]
 800097e:	f001 f957 	bl	8001c30 <print>
	}
	sprintf(buffer, "- BALANCING V = %i mV", BALANCING_V);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8000988:	461a      	mov	r2, r3
 800098a:	491a      	ldr	r1, [pc, #104]	@ (80009f4 <_ZN7BMS_MOD12voltage_infoEPc+0x198>)
 800098c:	6838      	ldr	r0, [r7, #0]
 800098e:	f00a fa77 	bl	800ae80 <siprintf>
	print(buffer);
 8000992:	6838      	ldr	r0, [r7, #0]
 8000994:	f001 f94c 	bl	8001c30 <print>

	sprintf(buffer, "- STACK VOLTAGE = %i V", voltage_acum / 1000);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800099e:	4a16      	ldr	r2, [pc, #88]	@ (80009f8 <_ZN7BMS_MOD12voltage_infoEPc+0x19c>)
 80009a0:	fb82 1203 	smull	r1, r2, r2, r3
 80009a4:	1192      	asrs	r2, r2, #6
 80009a6:	17db      	asrs	r3, r3, #31
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	461a      	mov	r2, r3
 80009ac:	4913      	ldr	r1, [pc, #76]	@ (80009fc <_ZN7BMS_MOD12voltage_infoEPc+0x1a0>)
 80009ae:	6838      	ldr	r0, [r7, #0]
 80009b0:	f00a fa66 	bl	800ae80 <siprintf>
	print(buffer);
 80009b4:	6838      	ldr	r0, [r7, #0]
 80009b6:	f001 f93b 	bl	8001c30 <print>
}
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	0800b7d8 	.word	0x0800b7d8
 80009c8:	0800b7f4 	.word	0x0800b7f4
 80009cc:	0800b804 	.word	0x0800b804
 80009d0:	0800b81c 	.word	0x0800b81c
 80009d4:	0800b830 	.word	0x0800b830
 80009d8:	0800b844 	.word	0x0800b844
 80009dc:	0800b858 	.word	0x0800b858
 80009e0:	0800b86c 	.word	0x0800b86c
 80009e4:	0800b884 	.word	0x0800b884
 80009e8:	0800b894 	.word	0x0800b894
 80009ec:	0800b89c 	.word	0x0800b89c
 80009f0:	0800b8a0 	.word	0x0800b8a0
 80009f4:	0800b8c4 	.word	0x0800b8c4
 80009f8:	10624dd3 	.word	0x10624dd3
 80009fc:	0800b8dc 	.word	0x0800b8dc

08000a00 <_ZN7BMS_MOD16temperature_infoEPc>:

// ********************************************************************************************************
// **Function name:           info
// **Descriptions:            Function for printing the class data
// **********************************************************************************************************
void BMS_MOD::temperature_info(char *buffer) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
	if (getUARTState() == HAL_UART_STATE_READY) //Send the message just if there is a serial por connected
 8000a0a:	f001 f96b 	bl	8001ce4 <getUARTState>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b20      	cmp	r3, #32
 8000a12:	bf0c      	ite	eq
 8000a14:	2301      	moveq	r3, #1
 8000a16:	2300      	movne	r3, #0
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d061      	beq.n	8000ae2 <_ZN7BMS_MOD16temperature_infoEPc+0xe2>
	{
		print((char*) "\n***********************");
 8000a1e:	4833      	ldr	r0, [pc, #204]	@ (8000aec <_ZN7BMS_MOD16temperature_infoEPc+0xec>)
 8000a20:	f001 f906 	bl	8001c30 <print>
		print((char*) "     Temperatures");
 8000a24:	4832      	ldr	r0, [pc, #200]	@ (8000af0 <_ZN7BMS_MOD16temperature_infoEPc+0xf0>)
 8000a26:	f001 f903 	bl	8001c30 <print>
		print((char*) "***********************");
 8000a2a:	4832      	ldr	r0, [pc, #200]	@ (8000af4 <_ZN7BMS_MOD16temperature_infoEPc+0xf4>)
 8000a2c:	f001 f900 	bl	8001c30 <print>
		sprintf(buffer, " - ERROR:     %i", error);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4930      	ldr	r1, [pc, #192]	@ (8000af8 <_ZN7BMS_MOD16temperature_infoEPc+0xf8>)
 8000a38:	6838      	ldr	r0, [r7, #0]
 8000a3a:	f00a fa21 	bl	800ae80 <siprintf>
		print(buffer);
 8000a3e:	6838      	ldr	r0, [r7, #0]
 8000a40:	f001 f8f6 	bl	8001c30 <print>
		sprintf(buffer, " - CAN ID:    0x%lx", CANID);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	492c      	ldr	r1, [pc, #176]	@ (8000afc <_ZN7BMS_MOD16temperature_infoEPc+0xfc>)
 8000a4c:	6838      	ldr	r0, [r7, #0]
 8000a4e:	f00a fa17 	bl	800ae80 <siprintf>
		print(buffer);
 8000a52:	6838      	ldr	r0, [r7, #0]
 8000a54:	f001 f8ec 	bl	8001c30 <print>
		sprintf(buffer, " - MAX T =    %i ºC", MAX_T);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4927      	ldr	r1, [pc, #156]	@ (8000b00 <_ZN7BMS_MOD16temperature_infoEPc+0x100>)
 8000a62:	6838      	ldr	r0, [r7, #0]
 8000a64:	f00a fa0c 	bl	800ae80 <siprintf>
		print(buffer);
 8000a68:	6838      	ldr	r0, [r7, #0]
 8000a6a:	f001 f8e1 	bl	8001c30 <print>
		sprintf(buffer, " - MIN T =    %i ºC", MIN_T);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8000a74:	461a      	mov	r2, r3
 8000a76:	4923      	ldr	r1, [pc, #140]	@ (8000b04 <_ZN7BMS_MOD16temperature_infoEPc+0x104>)
 8000a78:	6838      	ldr	r0, [r7, #0]
 8000a7a:	f00a fa01 	bl	800ae80 <siprintf>
		print(buffer);
 8000a7e:	6838      	ldr	r0, [r7, #0]
 8000a80:	f001 f8d6 	bl	8001c30 <print>
		sprintf(buffer, " - LIM T =    %i ºC", LIMIT_MAX_T);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	491e      	ldr	r1, [pc, #120]	@ (8000b08 <_ZN7BMS_MOD16temperature_infoEPc+0x108>)
 8000a8e:	6838      	ldr	r0, [r7, #0]
 8000a90:	f00a f9f6 	bl	800ae80 <siprintf>
		print((char*) "-----------------------");
 8000a94:	481d      	ldr	r0, [pc, #116]	@ (8000b0c <_ZN7BMS_MOD16temperature_infoEPc+0x10c>)
 8000a96:	f001 f8cb 	bl	8001c30 <print>
		sprintf(buffer, "Temperatures (ºC): [%i", cellTemperature[0]);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	491b      	ldr	r1, [pc, #108]	@ (8000b10 <_ZN7BMS_MOD16temperature_infoEPc+0x110>)
 8000aa2:	6838      	ldr	r0, [r7, #0]
 8000aa4:	f00a f9ec 	bl	800ae80 <siprintf>
		printnl(buffer);
 8000aa8:	6838      	ldr	r0, [r7, #0]
 8000aaa:	f001 f8df 	bl	8001c6c <printnl>
		for (int i = 1; i < 38; i++) {
 8000aae:	2301      	movs	r3, #1
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	e010      	b.n	8000ad6 <_ZN7BMS_MOD16temperature_infoEPc+0xd6>
			sprintf(buffer, ", %i", cellTemperature[i]);
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	3314      	adds	r3, #20
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	4413      	add	r3, r2
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4914      	ldr	r1, [pc, #80]	@ (8000b14 <_ZN7BMS_MOD16temperature_infoEPc+0x114>)
 8000ac4:	6838      	ldr	r0, [r7, #0]
 8000ac6:	f00a f9db 	bl	800ae80 <siprintf>
			printnl(buffer);
 8000aca:	6838      	ldr	r0, [r7, #0]
 8000acc:	f001 f8ce 	bl	8001c6c <printnl>
		for (int i = 1; i < 38; i++) {
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	2b25      	cmp	r3, #37	@ 0x25
 8000ada:	ddeb      	ble.n	8000ab4 <_ZN7BMS_MOD16temperature_infoEPc+0xb4>
		}
		print((char*) "]");
 8000adc:	480e      	ldr	r0, [pc, #56]	@ (8000b18 <_ZN7BMS_MOD16temperature_infoEPc+0x118>)
 8000ade:	f001 f8a7 	bl	8001c30 <print>

	}
}
 8000ae2:	bf00      	nop
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	0800b7d8 	.word	0x0800b7d8
 8000af0:	0800b8f4 	.word	0x0800b8f4
 8000af4:	0800b804 	.word	0x0800b804
 8000af8:	0800b81c 	.word	0x0800b81c
 8000afc:	0800b830 	.word	0x0800b830
 8000b00:	0800b908 	.word	0x0800b908
 8000b04:	0800b920 	.word	0x0800b920
 8000b08:	0800b938 	.word	0x0800b938
 8000b0c:	0800b86c 	.word	0x0800b86c
 8000b10:	0800b950 	.word	0x0800b950
 8000b14:	0800b894 	.word	0x0800b894
 8000b18:	0800b89c 	.word	0x0800b89c

08000b1c <_ZN7BMS_MOD5parseEmPhm>:

/*********************************************************************************************************
 ** Function name:           parse
 ** Descriptions:            Function for parsing the received data via CAN protocl
 *********************************************************************************************************/
bool BMS_MOD::parse(uint32_t id, uint8_t *buf, uint32_t t) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08c      	sub	sp, #48	@ 0x30
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
 8000b28:	603b      	str	r3, [r7, #0]
	if (id > CANID && id < CANID + 30) {
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	f240 8171 	bls.w	8000e18 <_ZN7BMS_MOD5parseEmPhm+0x2fc>
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	331e      	adds	r3, #30
 8000b3c:	68ba      	ldr	r2, [r7, #8]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	f080 816a 	bcs.w	8000e18 <_ZN7BMS_MOD5parseEmPhm+0x2fc>
		int m = id % CANID;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b4e:	fb01 f202 	mul.w	r2, r1, r2
 8000b52:	1a9b      	subs	r3, r3, r2
 8000b54:	61bb      	str	r3, [r7, #24]
		int pos = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]

		if (m >= 1 && m <= 6) {
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	f340 80a7 	ble.w	8000cb0 <_ZN7BMS_MOD5parseEmPhm+0x194>
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	2b06      	cmp	r3, #6
 8000b66:	f300 80a3 	bgt.w	8000cb0 <_ZN7BMS_MOD5parseEmPhm+0x194>
			time_lim_received = t + TIME_LIM_RECV;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	441a      	add	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110

			for (int i = 0; i < 4; i++) {
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b7e:	e056      	b.n	8000c2e <_ZN7BMS_MOD5parseEmPhm+0x112>
				pos = (m - 1) * 4 + i;
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b88:	4413      	add	r3, r2
 8000b8a:	617b      	str	r3, [r7, #20]
				cellVoltagemV[pos] = (buf[2 * i] << 8) | buf[2 * i + 1];
 8000b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	461a      	mov	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	021b      	lsls	r3, r3, #8
 8000b9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b9c:	0052      	lsls	r2, r2, #1
 8000b9e:	3201      	adds	r2, #1
 8000ba0:	6879      	ldr	r1, [r7, #4]
 8000ba2:	440a      	add	r2, r1
 8000ba4:	7812      	ldrb	r2, [r2, #0]
 8000ba6:	ea43 0102 	orr.w	r1, r3, r2
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	697a      	ldr	r2, [r7, #20]
 8000bae:	3202      	adds	r2, #2
 8000bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

				if ((cellVoltagemV[pos] > LIMIT_MAX_V
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	697a      	ldr	r2, [r7, #20]
 8000bb8:	3202      	adds	r2, #2
 8000bba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	dc09      	bgt.n	8000bdc <_ZN7BMS_MOD5parseEmPhm+0xc0>
						|| cellVoltagemV[pos] < LIMIT_MIN_V)
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	697a      	ldr	r2, [r7, #20]
 8000bcc:	3202      	adds	r2, #2
 8000bce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	da1f      	bge.n	8000c1c <_ZN7BMS_MOD5parseEmPhm+0x100>
						&& pos < NUM_CELLS) {
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8000be2:	461a      	mov	r2, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	4293      	cmp	r3, r2
 8000be8:	da18      	bge.n	8000c1c <_ZN7BMS_MOD5parseEmPhm+0x100>
					flag_error_volt[pos]++;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	697a      	ldr	r2, [r7, #20]
 8000bee:	3248      	adds	r2, #72	@ 0x48
 8000bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf4:	1c59      	adds	r1, r3, #1
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	697a      	ldr	r2, [r7, #20]
 8000bfa:	3248      	adds	r2, #72	@ 0x48
 8000bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					if (flag_error_volt[pos] >= max_flag)
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	3248      	adds	r2, #72	@ 0x48
 8000c06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8000c10:	429a      	cmp	r2, r3
 8000c12:	db09      	blt.n	8000c28 <_ZN7BMS_MOD5parseEmPhm+0x10c>
						error = BMS_ERROR_VOLTS;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	2202      	movs	r2, #2
 8000c18:	605a      	str	r2, [r3, #4]
					if (flag_error_volt[pos] >= max_flag)
 8000c1a:	e005      	b.n	8000c28 <_ZN7BMS_MOD5parseEmPhm+0x10c>
				} else {
					flag_error_volt[pos] = 0;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	697a      	ldr	r2, [r7, #20]
 8000c20:	3248      	adds	r2, #72	@ 0x48
 8000c22:	2100      	movs	r1, #0
 8000c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (int i = 0; i < 4; i++) {
 8000c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c30:	2b03      	cmp	r3, #3
 8000c32:	dda5      	ble.n	8000b80 <_ZN7BMS_MOD5parseEmPhm+0x64>
				}
			}
			MAX_V = cellVoltagemV[0];
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	689a      	ldr	r2, [r3, #8]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
			MIN_V = cellVoltagemV[0];
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
			for (int i = 0; i < NUM_CELLS; i++) {
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c4c:	e027      	b.n	8000c9e <_ZN7BMS_MOD5parseEmPhm+0x182>
				if (cellVoltagemV[i] > MAX_V)
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c52:	3202      	adds	r2, #2
 8000c54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	dd08      	ble.n	8000c74 <_ZN7BMS_MOD5parseEmPhm+0x158>
					MAX_V = cellVoltagemV[i];
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c66:	3202      	adds	r2, #2
 8000c68:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 8000c72:	e011      	b.n	8000c98 <_ZN7BMS_MOD5parseEmPhm+0x17c>
				else if (cellVoltagemV[i] < MIN_V)
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c78:	3202      	adds	r2, #2
 8000c7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8000c84:	429a      	cmp	r2, r3
 8000c86:	da07      	bge.n	8000c98 <_ZN7BMS_MOD5parseEmPhm+0x17c>
					MIN_V = cellVoltagemV[i];
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c8c:	3202      	adds	r2, #2
 8000c8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
			for (int i = 0; i < NUM_CELLS; i++) {
 8000c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	dbd0      	blt.n	8000c4e <_ZN7BMS_MOD5parseEmPhm+0x132>
			}

			return true;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e0b4      	b.n	8000e1a <_ZN7BMS_MOD5parseEmPhm+0x2fe>
		}
		//message_balancing[1] = BALANCING_V & 0xFF;           // Coment this two lines for disabling the balancing
		//message_balancing[0] = (BALANCING_V >> 8) & 0xFF;    // Coment this two lines for disabling the balancing

		else if (m >= 21 && m <= 26) {
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	2b14      	cmp	r3, #20
 8000cb4:	f340 80b0 	ble.w	8000e18 <_ZN7BMS_MOD5parseEmPhm+0x2fc>
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	2b1a      	cmp	r3, #26
 8000cbc:	f300 80ac 	bgt.w	8000e18 <_ZN7BMS_MOD5parseEmPhm+0x2fc>
			if (flag_charger == 1)
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d104      	bne.n	8000cd4 <_ZN7BMS_MOD5parseEmPhm+0x1b8>
				module_send_message_CAN1(id, buf, 8); // Reenvío por CAN1 si aplica
 8000cca:	2208      	movs	r2, #8
 8000ccc:	6879      	ldr	r1, [r7, #4]
 8000cce:	68b8      	ldr	r0, [r7, #8]
 8000cd0:	f000 ff6c 	bl	8001bac <module_send_message_CAN1>

			if (m < 26) {
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	2b19      	cmp	r3, #25
 8000cd8:	dc28      	bgt.n	8000d2c <_ZN7BMS_MOD5parseEmPhm+0x210>
				for (int i = 0; i < 8; i++) {
 8000cda:	2300      	movs	r3, #0
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cde:	e021      	b.n	8000d24 <_ZN7BMS_MOD5parseEmPhm+0x208>
					pos = (m - 1) * 8 + i;
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ce8:	4413      	add	r3, r2
 8000cea:	617b      	str	r3, [r7, #20]
					cellTemperature[pos] = buf[i];
 8000cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	3314      	adds	r3, #20
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	6059      	str	r1, [r3, #4]
					if (cellTemperature[pos] > LIMIT_MAX_T)
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	3314      	adds	r3, #20
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	4413      	add	r3, r2
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d14:	429a      	cmp	r2, r3
 8000d16:	dd02      	ble.n	8000d1e <_ZN7BMS_MOD5parseEmPhm+0x202>
						error = BMS_ERROR_TEMP;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	605a      	str	r2, [r3, #4]
				for (int i = 0; i < 8; i++) {
 8000d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d20:	3301      	adds	r3, #1
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d26:	2b07      	cmp	r3, #7
 8000d28:	ddda      	ble.n	8000ce0 <_ZN7BMS_MOD5parseEmPhm+0x1c4>
 8000d2a:	e027      	b.n	8000d7c <_ZN7BMS_MOD5parseEmPhm+0x260>
				}
			} else { // m == 26 → últimos 2–3 sensores
				for (int i = 0; i < 3; i++) {
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	623b      	str	r3, [r7, #32]
 8000d30:	e021      	b.n	8000d76 <_ZN7BMS_MOD5parseEmPhm+0x25a>
					pos = (m - 1) * 8 + i;
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	3b01      	subs	r3, #1
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	6a3a      	ldr	r2, [r7, #32]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	617b      	str	r3, [r7, #20]
					cellTemperature[pos] = buf[i];
 8000d3e:	6a3b      	ldr	r3, [r7, #32]
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	4413      	add	r3, r2
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	4619      	mov	r1, r3
 8000d48:	68fa      	ldr	r2, [r7, #12]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	3314      	adds	r3, #20
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4413      	add	r3, r2
 8000d52:	6059      	str	r1, [r3, #4]
					if (cellTemperature[pos] > LIMIT_MAX_T)
 8000d54:	68fa      	ldr	r2, [r7, #12]
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	3314      	adds	r3, #20
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4413      	add	r3, r2
 8000d5e:	685a      	ldr	r2, [r3, #4]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d66:	429a      	cmp	r2, r3
 8000d68:	dd02      	ble.n	8000d70 <_ZN7BMS_MOD5parseEmPhm+0x254>
						error = BMS_ERROR_TEMP;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	605a      	str	r2, [r3, #4]
				for (int i = 0; i < 3; i++) {
 8000d70:	6a3b      	ldr	r3, [r7, #32]
 8000d72:	3301      	adds	r3, #1
 8000d74:	623b      	str	r3, [r7, #32]
 8000d76:	6a3b      	ldr	r3, [r7, #32]
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	ddda      	ble.n	8000d32 <_ZN7BMS_MOD5parseEmPhm+0x216>
				}
			}

			MAX_T = cellTemperature[0];
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
			MIN_T = cellTemperature[0];
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
			for (int i = 0; i < 38; i++) {
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
 8000d94:	e033      	b.n	8000dfe <_ZN7BMS_MOD5parseEmPhm+0x2e2>
				if (cellTemperature[i] > MAX_T)
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	3314      	adds	r3, #20
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	4413      	add	r3, r2
 8000da0:	685a      	ldr	r2, [r3, #4]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000da8:	429a      	cmp	r2, r3
 8000daa:	dd09      	ble.n	8000dc0 <_ZN7BMS_MOD5parseEmPhm+0x2a4>
					MAX_T = cellTemperature[i];
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3314      	adds	r3, #20
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	4413      	add	r3, r2
 8000db6:	685a      	ldr	r2, [r3, #4]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
 8000dbe:	e01b      	b.n	8000df8 <_ZN7BMS_MOD5parseEmPhm+0x2dc>
				else if (cellTemperature[i] < MIN_T && cellTemperature[i] != 0)
 8000dc0:	68fa      	ldr	r2, [r7, #12]
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3314      	adds	r3, #20
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	da10      	bge.n	8000df8 <_ZN7BMS_MOD5parseEmPhm+0x2dc>
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	3314      	adds	r3, #20
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	4413      	add	r3, r2
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d008      	beq.n	8000df8 <_ZN7BMS_MOD5parseEmPhm+0x2dc>
					MIN_T = cellTemperature[i];
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	3314      	adds	r3, #20
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	4413      	add	r3, r2
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
			for (int i = 0; i < 38; i++) {
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	61fb      	str	r3, [r7, #28]
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	2b25      	cmp	r3, #37	@ 0x25
 8000e02:	ddc8      	ble.n	8000d96 <_ZN7BMS_MOD5parseEmPhm+0x27a>
			}

			time_lim_received = t + TIME_LIM_RECV;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	441a      	add	r2, r3
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
			return true;
 8000e14:	2301      	movs	r3, #1
 8000e16:	e000      	b.n	8000e1a <_ZN7BMS_MOD5parseEmPhm+0x2fe>
		}
	}

	return false;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3730      	adds	r7, #48	@ 0x30
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <_ZN7BMS_MOD13query_voltageEmPc>:

/*********************************************************************************************************
 ** Function name:           query_voltage
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/
int BMS_MOD::query_voltage(uint32_t time, char *buffer) {
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b086      	sub	sp, #24
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	60f8      	str	r0, [r7, #12]
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
	// Shunt voltage in milivolts
	uint8_t message_balancing[2] = { 0x00, 0x00 };
 8000e2e:	2300      	movs	r3, #0
 8000e30:	823b      	strh	r3, [r7, #16]

	if (time > time_lim_sended) {
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8000e38:	68ba      	ldr	r2, [r7, #8]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d913      	bls.n	8000e66 <_ZN7BMS_MOD13query_voltageEmPc+0x44>
		time_lim_sended += TIME_LIM_SEND;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000e4a:	441a      	add	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c


		if (module_send_message_CAN2(CANID, message_balancing, 2) != HAL_OK) {
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f107 0110 	add.w	r1, r7, #16
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 fec7 	bl	8001bf0 <module_send_message_CAN2>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
			//error = BMS_ERROR_COMMUNICATION;
		}
	}

	if (time > time_lim_received) {
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8000e6c:	68ba      	ldr	r2, [r7, #8]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d902      	bls.n	8000e78 <_ZN7BMS_MOD13query_voltageEmPc+0x56>
		error = BMS_ERROR_COMMUNICATION;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	2201      	movs	r2, #1
 8000e76:	605a      	str	r2, [r3, #4]
	}

	if (TIME_LIM_PLOT > 0 && time > time_lim_plotted) {
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d013      	beq.n	8000eaa <_ZN7BMS_MOD13query_voltageEmPc+0x88>
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8000e88:	68ba      	ldr	r2, [r7, #8]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d90d      	bls.n	8000eaa <_ZN7BMS_MOD13query_voltageEmPc+0x88>
		time_lim_plotted += TIME_LIM_PLOT;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8000e9a:	441a      	add	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
		voltage_info(buffer);
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	f7ff fcd9 	bl	800085c <_ZN7BMS_MOD12voltage_infoEPc>
	}

	for (int i = 0; i < NUM_CELLS; i++) {
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	e00e      	b.n	8000ece <_ZN7BMS_MOD13query_voltageEmPc+0xac>
		voltage_acum += cellVoltagemV[i];
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	6979      	ldr	r1, [r7, #20]
 8000eba:	3102      	adds	r1, #2
 8000ebc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000ec0:	441a      	add	r2, r3
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
	for (int i = 0; i < NUM_CELLS; i++) {
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	dbe9      	blt.n	8000eb0 <_ZN7BMS_MOD13query_voltageEmPc+0x8e>
	}
	return error;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	685b      	ldr	r3, [r3, #4]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <_ZN7BMS_MOD17query_temperatureEmPc>:
/*********************************************************************************************************
 ** Function name:           query_temperature
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/

int BMS_MOD::query_temperature(uint32_t time, char *buffer) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
// Function for performing a correct behavior
	if (time > time_lim_sended) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE TEMPERATURES
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d92a      	bls.n	8000f56 <_ZN7BMS_MOD17query_temperatureEmPc+0x6e>
		time_lim_sended += TIME_LIM_SEND;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000f0c:	441a      	add	r2, r3
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

		if (module_send_message_CAN2(CANID + 20, message_temperatures, 2)
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f103 0014 	add.w	r0, r3, #20
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f503 738b 	add.w	r3, r3, #278	@ 0x116
 8000f22:	2202      	movs	r2, #2
 8000f24:	4619      	mov	r1, r3
 8000f26:	f000 fe63 	bl	8001bf0 <module_send_message_CAN2>
 8000f2a:	4603      	mov	r3, r0
				!= HAL_OK) {
 8000f2c:	2b00      	cmp	r3, #0
		} else {
			/*       Serial.print("Ennvado solicitud a: ");
			 Serial.println(MODULEID,HEX); */
		}

		for (int i = 0; i < 38; i++) {
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	e00d      	b.n	8000f50 <_ZN7BMS_MOD17query_temperatureEmPc+0x68>
			if (cellTemperature[i] > 55) {
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	3314      	adds	r3, #20
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	4413      	add	r3, r2
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2b37      	cmp	r3, #55	@ 0x37
 8000f42:	dd02      	ble.n	8000f4a <_ZN7BMS_MOD17query_temperatureEmPc+0x62>
				error = 2;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2202      	movs	r2, #2
 8000f48:	605a      	str	r2, [r3, #4]
		for (int i = 0; i < 38; i++) {
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	2b25      	cmp	r3, #37	@ 0x25
 8000f54:	ddee      	ble.n	8000f34 <_ZN7BMS_MOD17query_temperatureEmPc+0x4c>
// time_lim_sended += TIME_LIM_SEND; //Si actualizas dos veces, el mensaje se envía en la mitad del periodo
	}
	if (time > time_lim_received) {
//error = Temperatures_ERROR_COMMUNICATION;
	}
	if (TIME_LIM_PLOT > 0 && time > time_lim_plotted) {
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d013      	beq.n	8000f88 <_ZN7BMS_MOD17query_temperatureEmPc+0xa0>
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d90d      	bls.n	8000f88 <_ZN7BMS_MOD17query_temperatureEmPc+0xa0>
		time_lim_plotted += TIME_LIM_PLOT;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8000f78:	441a      	add	r2, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
		temperature_info(buffer);
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	68f8      	ldr	r0, [r7, #12]
 8000f84:	f7ff fd3c 	bl	8000a00 <_ZN7BMS_MOD16temperature_infoEPc>
	 message_temperatures[0] = 0;
	 message_temperatures[1] = MAX_T & 0xFF;
	 module_send_message_CAN1(CANIDTEL, 0, 2, message_temperatures);
	 } */

	return error;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	685b      	ldr	r3, [r3, #4]

}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <_ZN7CPU_MODC1Emmi>:

// ********************************************************************************************************
// **Function name:           CPU_MOD
// **Descriptions:            Initialization function of teh class
// ********************************************************************************************************
CPU_MOD::CPU_MOD(uint32_t _ID_send, uint32_t _ID_recv, int _LAG) { /////////////////////////Habia un _LAG=0
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	2200      	movs	r2, #0
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	731a      	strb	r2, [r3, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	611a      	str	r2, [r3, #16]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fc6:	615a      	str	r2, [r3, #20]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2264      	movs	r2, #100	@ 0x64
 8000fcc:	619a      	str	r2, [r3, #24]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4a18      	ldr	r2, [pc, #96]	@ (8001034 <_ZN7CPU_MODC1Emmi+0xa0>)
 8000fd2:	61da      	str	r2, [r3, #28]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	695a      	ldr	r2, [r3, #20]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	621a      	str	r2, [r3, #32]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	@ 0x24
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	69da      	ldr	r2, [r3, #28]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2200      	movs	r2, #0
 8000fee:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	631a      	str	r2, [r3, #48]	@ 0x30
    CANID_send = _ID_send;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	68ba      	ldr	r2, [r7, #8]
 8000ffa:	601a      	str	r2, [r3, #0]
    CANID_recv = _ID_recv;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	605a      	str	r2, [r3, #4]

    time_lim_plotted += _LAG;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6a1a      	ldr	r2, [r3, #32]
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	441a      	add	r2, r3
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	621a      	str	r2, [r3, #32]
    time_lim_sended += _LAG;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	441a      	add	r2, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	625a      	str	r2, [r3, #36]	@ 0x24
    time_lim_received += _LAG;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	441a      	add	r2, r3
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4618      	mov	r0, r3
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	000f4240 	.word	0x000f4240

08001038 <_ZN7CPU_MOD5parseEmPhm>:

// ********************************************************************************************************
// **Function name:           parse
// **Descriptions:            Function for parsing the received data via CAN protocl
// ********************************************************************************************************
bool CPU_MOD::parse(uint32_t id, uint8_t* buf, uint32_t t) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	603b      	str	r3, [r7, #0]
    if (id == 0x100) {
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800104c:	d131      	bne.n	80010b2 <_ZN7CPU_MOD5parseEmPhm+0x7a>
        error = CPU_OK;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
        time_lim_received = t + TIME_LIM_RECV;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	69da      	ldr	r2, [r3, #28]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	441a      	add	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	629a      	str	r2, [r3, #40]	@ 0x28
        DC_BUS = (int)((buf[1]<<8)|buf[0]); // This direction sends the voltage in DC_BUS
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3301      	adds	r3, #1
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	7812      	ldrb	r2, [r2, #0]
 800106c:	431a      	orrs	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	631a      	str	r2, [r3, #48]	@ 0x30
        if (DC_BUS > 280) { //(DC_BUS>0.9*voltage_acum)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 800107a:	dd18      	ble.n	80010ae <_ZN7CPU_MOD5parseEmPhm+0x76>
            error = CPU_BUS_LINE_OK;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2202      	movs	r2, #2
 8001080:	609a      	str	r2, [r3, #8]
            if (module_send_message_CAN1(CANID_send, currentState, 1) != HAL_OK){
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6818      	ldr	r0, [r3, #0]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	330c      	adds	r3, #12
 800108a:	2201      	movs	r2, #1
 800108c:	4619      	mov	r1, r3
 800108e:	f000 fd8d 	bl	8001bac <module_send_message_CAN1>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	bf14      	ite	ne
 8001098:	2301      	movne	r3, #1
 800109a:	2300      	moveq	r3, #0
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d005      	beq.n	80010ae <_ZN7CPU_MOD5parseEmPhm+0x76>
                error = CPU_ERROR_COMMUNICATION;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2201      	movs	r2, #1
 80010a6:	609a      	str	r2, [r3, #8]
                print((char*)"error message");
 80010a8:	4804      	ldr	r0, [pc, #16]	@ (80010bc <_ZN7CPU_MOD5parseEmPhm+0x84>)
 80010aa:	f000 fdc1 	bl	8001c30 <print>
            }

        }
        return true;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e000      	b.n	80010b4 <_ZN7CPU_MOD5parseEmPhm+0x7c>
    }
    return false;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	0800ba50 	.word	0x0800ba50

080010c0 <_ZN7CPU_MOD11updateStateEi>:
        //info(buffer);
    }
    return error;
}

void CPU_MOD::updateState(int s) {
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
    currentState[0] = s & 0xFF;
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	731a      	strb	r2, [r3, #12]
    current_state = s;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	611a      	str	r2, [r3, #16]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <_ZN11Current_MODC1Emi>:

// ********************************************************************************************************
// **Function name:           Current_MOD
// **Descriptions:            Initialization function of current class
// **********************************************************************************************************
Current_MOD::Current_MOD(uint32_t ID, int _C_MAX)
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2200      	movs	r2, #0
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2200      	movs	r2, #0
 8001100:	721a      	strb	r2, [r3, #8]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2200      	movs	r2, #0
 8001106:	725a      	strb	r2, [r3, #9]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2200      	movs	r2, #0
 800111c:	615a      	str	r2, [r3, #20]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	619a      	str	r2, [r3, #24]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2200      	movs	r2, #0
 800112a:	621a      	str	r2, [r3, #32]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001132:	625a      	str	r2, [r3, #36]	@ 0x24
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	22fa      	movs	r2, #250	@ 0xfa
 8001138:	629a      	str	r2, [r3, #40]	@ 0x28
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2232      	movs	r2, #50	@ 0x32
 800113e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2232      	movs	r2, #50	@ 0x32
 8001144:	631a      	str	r2, [r3, #48]	@ 0x30
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2200      	movs	r2, #0
 800114a:	635a      	str	r2, [r3, #52]	@ 0x34
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2200      	movs	r2, #0
 8001150:	639a      	str	r2, [r3, #56]	@ 0x38
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2200      	movs	r2, #0
 8001156:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2200      	movs	r2, #0
 800115c:	641a      	str	r2, [r3, #64]	@ 0x40
{
    CANID = ID;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	68ba      	ldr	r2, [r7, #8]
 8001162:	605a      	str	r2, [r3, #4]
    C_MAX = _C_MAX;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	601a      	str	r2, [r3, #0]
    flag_error_current = 1;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2201      	movs	r2, #1
 800116e:	621a      	str	r2, [r3, #32]
}
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4618      	mov	r0, r3
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <_ZN11Current_MOD5queryEiPc>:
// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function that transforms the voltage measured by the sensor to its equivalent current
// **********************************************************************************************************
int Current_MOD::query(int time, char* buffer)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
    error = Current_OK;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2200      	movs	r2, #0
 8001190:	635a      	str	r2, [r3, #52]	@ 0x34

    VoltagemV = readAnalogValue();
 8001192:	f000 fdb1 	bl	8001cf8 <readAnalogValue>
 8001196:	eef0 7a40 	vmov.f32	s15, s0
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	edc3 7a04 	vstr	s15, [r3, #16]

    //printValue(VoltagemV);

    if(VoltagemV < 400){
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80011a6:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80011e8 <_ZN11Current_MOD5queryEiPc+0x68>
 80011aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b2:	d509      	bpl.n	80011c8 <_ZN11Current_MOD5queryEiPc+0x48>
    	flag_error_current = 1;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2201      	movs	r2, #1
 80011b8:	621a      	str	r2, [r3, #32]
    	flag_current = 1;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2201      	movs	r2, #1
 80011be:	641a      	str	r2, [r3, #64]	@ 0x40
    	error = 1;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2201      	movs	r2, #1
 80011c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80011c6:	e008      	b.n	80011da <_ZN11Current_MOD5queryEiPc+0x5a>
    }
    else{
    	flag_error_current = 0;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2200      	movs	r2, #0
 80011cc:	621a      	str	r2, [r3, #32]
    	flag_current = 0;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2200      	movs	r2, #0
 80011d2:	641a      	str	r2, [r3, #64]	@ 0x40
    	error = Current_OK;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2200      	movs	r2, #0
 80011d8:	635a      	str	r2, [r3, #52]	@ 0x34
        time_lim_plotted += TIME_LIM_PLOT;

    }
*/
    //info(buffer);
    return error;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	43c80000 	.word	0x43c80000

080011ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f2:	f001 fb53 	bl	800289c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f6:	f000 f89d 	bl	8001334 <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80011fa:	f000 f917 	bl	800142c <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011fe:	f000 fbc1 	bl	8001984 <_ZL12MX_GPIO_Initv>
  MX_FDCAN2_Init();
 8001202:	f000 fad5 	bl	80017b0 <_ZL14MX_FDCAN2_Initv>
  MX_FDCAN1_Init();
 8001206:	f000 fa49 	bl	800169c <_ZL14MX_FDCAN1_Initv>
  MX_USART2_UART_Init();
 800120a:	f000 fb5b 	bl	80018c4 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 800120e:	f000 f941 	bl	8001494 <_ZL12MX_ADC1_Initv>
  MX_ADC3_Init();
 8001212:	f000 f9c9 	bl	80015a8 <_ZL12MX_ADC3_Initv>
  /* USER CODE BEGIN 2 */

  if (HAL_FDCAN_Start(&hfdcan1) == HAL_OK){
 8001216:	483d      	ldr	r0, [pc, #244]	@ (800130c <main+0x120>)
 8001218:	f003 fed4 	bl	8004fc4 <HAL_FDCAN_Start>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	bf0c      	ite	eq
 8001222:	2301      	moveq	r3, #1
 8001224:	2300      	movne	r3, #0
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <main+0x46>
	  print((char*)"CAN_ACU iniciado");
 800122c:	4838      	ldr	r0, [pc, #224]	@ (8001310 <main+0x124>)
 800122e:	f000 fcff 	bl	8001c30 <print>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) == HAL_OK)
 8001232:	2200      	movs	r2, #0
 8001234:	2101      	movs	r1, #1
 8001236:	4835      	ldr	r0, [pc, #212]	@ (800130c <main+0x120>)
 8001238:	f004 f8b6 	bl	80053a8 <HAL_FDCAN_ActivateNotification>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	bf0c      	ite	eq
 8001242:	2301      	moveq	r3, #1
 8001244:	2300      	movne	r3, #0
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	d002      	beq.n	8001252 <main+0x66>
  {
	  print((char*)"CAN_ACU notification");
 800124c:	4831      	ldr	r0, [pc, #196]	@ (8001314 <main+0x128>)
 800124e:	f000 fcef 	bl	8001c30 <print>
  }

  if (HAL_FDCAN_Start(&hfdcan2) == HAL_OK){
 8001252:	4831      	ldr	r0, [pc, #196]	@ (8001318 <main+0x12c>)
 8001254:	f003 feb6 	bl	8004fc4 <HAL_FDCAN_Start>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	bf0c      	ite	eq
 800125e:	2301      	moveq	r3, #1
 8001260:	2300      	movne	r3, #0
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <main+0x82>
	  print((char*)"CAN_BMS iniciado");
 8001268:	482c      	ldr	r0, [pc, #176]	@ (800131c <main+0x130>)
 800126a:	f000 fce1 	bl	8001c30 <print>
  }

  if(HAL_ADC_Start(&hadc3) == HAL_OK){
 800126e:	482c      	ldr	r0, [pc, #176]	@ (8001320 <main+0x134>)
 8001270:	f002 f8d4 	bl	800341c <HAL_ADC_Start>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	bf0c      	ite	eq
 800127a:	2301      	moveq	r3, #1
 800127c:	2300      	movne	r3, #0
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2b00      	cmp	r3, #0
 8001282:	d002      	beq.n	800128a <main+0x9e>
	  print((char*)"ADC iniciado");
 8001284:	4827      	ldr	r0, [pc, #156]	@ (8001324 <main+0x138>)
 8001286:	f000 fcd3 	bl	8001c30 <print>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  select_state();
 800128a:	f000 fd5d 	bl	8001d48 <_Z12select_statev>
		  msg_acu.bus = 1;
		  msg_acu.time = HAL_GetTick();
		  parse_state(msg_acu);
	  }*/

	  if (HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader_bms, RxData) == HAL_OK) {
 800128e:	4b26      	ldr	r3, [pc, #152]	@ (8001328 <main+0x13c>)
 8001290:	4a26      	ldr	r2, [pc, #152]	@ (800132c <main+0x140>)
 8001292:	2140      	movs	r1, #64	@ 0x40
 8001294:	4820      	ldr	r0, [pc, #128]	@ (8001318 <main+0x12c>)
 8001296:	f003 ff1b 	bl	80050d0 <HAL_FDCAN_GetRxMessage>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	bf0c      	ite	eq
 80012a0:	2301      	moveq	r3, #1
 80012a2:	2300      	movne	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0ef      	beq.n	800128a <main+0x9e>

		  msg_bms.id = RxHeader_bms.Identifier;
 80012aa:	4b20      	ldr	r3, [pc, #128]	@ (800132c <main+0x140>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a20      	ldr	r2, [pc, #128]	@ (8001330 <main+0x144>)
 80012b0:	6013      	str	r3, [r2, #0]
		  msg_bms.len = RxHeader_bms.DataLength;
 80012b2:	4b1e      	ldr	r3, [pc, #120]	@ (800132c <main+0x140>)
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001330 <main+0x144>)
 80012ba:	711a      	strb	r2, [r3, #4]
		  for (int i = 0; i < 8; i++) {msg_bms.buf[i] = RxData[i];}
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	e00c      	b.n	80012dc <main+0xf0>
 80012c2:	4a19      	ldr	r2, [pc, #100]	@ (8001328 <main+0x13c>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4413      	add	r3, r2
 80012c8:	7819      	ldrb	r1, [r3, #0]
 80012ca:	4a19      	ldr	r2, [pc, #100]	@ (8001330 <main+0x144>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4413      	add	r3, r2
 80012d0:	3305      	adds	r3, #5
 80012d2:	460a      	mov	r2, r1
 80012d4:	701a      	strb	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3301      	adds	r3, #1
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b07      	cmp	r3, #7
 80012e0:	ddef      	ble.n	80012c2 <main+0xd6>
		  msg_bms.bus = 2;
 80012e2:	4b13      	ldr	r3, [pc, #76]	@ (8001330 <main+0x144>)
 80012e4:	2202      	movs	r2, #2
 80012e6:	611a      	str	r2, [r3, #16]
		  msg_bms.time = HAL_GetTick();
 80012e8:	f001 fb5e 	bl	80029a8 <HAL_GetTick>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4a10      	ldr	r2, [pc, #64]	@ (8001330 <main+0x144>)
 80012f0:	6153      	str	r3, [r2, #20]

		  parse_state(msg_bms);
 80012f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001330 <main+0x144>)
 80012f4:	466c      	mov	r4, sp
 80012f6:	f103 0210 	add.w	r2, r3, #16
 80012fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012fe:	e884 0003 	stmia.w	r4, {r0, r1}
 8001302:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001304:	f000 fef4 	bl	80020f0 <_Z11parse_state6CANMsg>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001308:	e7bf      	b.n	800128a <main+0x9e>
 800130a:	bf00      	nop
 800130c:	24000164 	.word	0x24000164
 8001310:	0800ba60 	.word	0x0800ba60
 8001314:	0800ba74 	.word	0x0800ba74
 8001318:	24000204 	.word	0x24000204
 800131c:	0800ba8c 	.word	0x0800ba8c
 8001320:	240000f4 	.word	0x240000f4
 8001324:	0800baa0 	.word	0x0800baa0
 8001328:	240003d0 	.word	0x240003d0
 800132c:	240003a8 	.word	0x240003a8
 8001330:	2400043c 	.word	0x2400043c

08001334 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b09c      	sub	sp, #112	@ 0x70
 8001338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800133e:	224c      	movs	r2, #76	@ 0x4c
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f009 fdbe 	bl	800aec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	2220      	movs	r2, #32
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f009 fdb8 	bl	800aec4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001354:	2002      	movs	r0, #2
 8001356:	f004 ff89 	bl	800626c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800135a:	2300      	movs	r3, #0
 800135c:	603b      	str	r3, [r7, #0]
 800135e:	4b32      	ldr	r3, [pc, #200]	@ (8001428 <_Z18SystemClock_Configv+0xf4>)
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	4a31      	ldr	r2, [pc, #196]	@ (8001428 <_Z18SystemClock_Configv+0xf4>)
 8001364:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001368:	6193      	str	r3, [r2, #24]
 800136a:	4b2f      	ldr	r3, [pc, #188]	@ (8001428 <_Z18SystemClock_Configv+0xf4>)
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001376:	bf00      	nop
 8001378:	4b2b      	ldr	r3, [pc, #172]	@ (8001428 <_Z18SystemClock_Configv+0xf4>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001380:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001384:	bf14      	ite	ne
 8001386:	2301      	movne	r3, #1
 8001388:	2300      	moveq	r3, #0
 800138a:	b2db      	uxtb	r3, r3
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1f3      	bne.n	8001378 <_Z18SystemClock_Configv+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001390:	2301      	movs	r3, #1
 8001392:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001394:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001398:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800139a:	2302      	movs	r3, #2
 800139c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800139e:	2302      	movs	r3, #2
 80013a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80013a2:	2302      	movs	r3, #2
 80013a4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80013a6:	232c      	movs	r3, #44	@ 0x2c
 80013a8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80013aa:	2301      	movs	r3, #1
 80013ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013ae:	2304      	movs	r3, #4
 80013b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013b2:	2302      	movs	r3, #2
 80013b4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80013b6:	230c      	movs	r3, #12
 80013b8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c6:	4618      	mov	r0, r3
 80013c8:	f004 ff8a 	bl	80062e0 <HAL_RCC_OscConfig>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bf14      	ite	ne
 80013d2:	2301      	movne	r3, #1
 80013d4:	2300      	moveq	r3, #0
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 80013dc:	f000 fcae 	bl	8001d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e0:	233f      	movs	r3, #63	@ 0x3f
 80013e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e4:	2303      	movs	r3, #3
 80013e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80013ec:	2308      	movs	r3, #8
 80013ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80013f0:	2340      	movs	r3, #64	@ 0x40
 80013f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80013f4:	2340      	movs	r3, #64	@ 0x40
 80013f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80013f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013fe:	2340      	movs	r3, #64	@ 0x40
 8001400:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2103      	movs	r1, #3
 8001406:	4618      	mov	r0, r3
 8001408:	f005 fb44 	bl	8006a94 <HAL_RCC_ClockConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	bf14      	ite	ne
 8001412:	2301      	movne	r3, #1
 8001414:	2300      	moveq	r3, #0
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <_Z18SystemClock_Configv+0xec>
  {
    Error_Handler();
 800141c:	f000 fc8e 	bl	8001d3c <Error_Handler>
  }
}
 8001420:	bf00      	nop
 8001422:	3770      	adds	r7, #112	@ 0x70
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	58024800 	.word	0x58024800

0800142c <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b0ae      	sub	sp, #184	@ 0xb8
 8001430:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001432:	463b      	mov	r3, r7
 8001434:	22b8      	movs	r2, #184	@ 0xb8
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f009 fd43 	bl	800aec4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800143e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001442:	f04f 0300 	mov.w	r3, #0
 8001446:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800144a:	2302      	movs	r3, #2
 800144c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 800144e:	2310      	movs	r3, #16
 8001450:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001452:	2302      	movs	r3, #2
 8001454:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001456:	2302      	movs	r3, #2
 8001458:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800145a:	2302      	movs	r3, #2
 800145c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800145e:	23c0      	movs	r3, #192	@ 0xc0
 8001460:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001470:	463b      	mov	r3, r7
 8001472:	4618      	mov	r0, r3
 8001474:	f005 fe9a 	bl	80071ac <HAL_RCCEx_PeriphCLKConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	bf14      	ite	ne
 800147e:	2301      	movne	r3, #1
 8001480:	2300      	moveq	r3, #0
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <_Z24PeriphCommonClock_Configv+0x60>
  {
    Error_Handler();
 8001488:	f000 fc58 	bl	8001d3c <Error_Handler>
  }
}
 800148c:	bf00      	nop
 800148e:	37b8      	adds	r7, #184	@ 0xb8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08c      	sub	sp, #48	@ 0x30
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800149a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014a6:	463b      	mov	r3, r7
 80014a8:	2224      	movs	r2, #36	@ 0x24
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f009 fd09 	bl	800aec4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014b2:	4b3a      	ldr	r3, [pc, #232]	@ (800159c <_ZL12MX_ADC1_Initv+0x108>)
 80014b4:	4a3a      	ldr	r2, [pc, #232]	@ (80015a0 <_ZL12MX_ADC1_Initv+0x10c>)
 80014b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014b8:	4b38      	ldr	r3, [pc, #224]	@ (800159c <_ZL12MX_ADC1_Initv+0x108>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014be:	4b37      	ldr	r3, [pc, #220]	@ (800159c <_ZL12MX_ADC1_Initv+0x108>)
 80014c0:	2208      	movs	r2, #8
 80014c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014c4:	4b35      	ldr	r3, [pc, #212]	@ (800159c <_ZL12MX_ADC1_Initv+0x108>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ca:	4b34      	ldr	r3, [pc, #208]	@ (800159c <_ZL12MX_ADC1_Initv+0x108>)
 80014cc:	2204      	movs	r2, #4
 80014ce:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014d0:	4b32      	ldr	r3, [pc, #200]	@ (800159c <_ZL12MX_ADC1_Initv+0x108>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014d6:	4b31      	ldr	r3, [pc, #196]	@ (800159c <_ZL12MX_ADC1_Initv+0x108>)
 80014d8:	2200      	movs	r2, #0
 80014da:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80014dc:	4b2f      	ldr	r3, [pc, #188]	@ (800159c <_ZL12MX_ADC1_Initv+0x108>)
 80014de:	2201      	movs	r2, #1
 80014e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014e2:	4b2e      	ldr	r3, [pc, #184]	@ (800159c <_ZL12MX_ADC1_Initv+0x108>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014ea:	4b2c      	ldr	r3, [pc, #176]	@ (800159c <_ZL12MX_ADC1_Initv+0x108>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014f0:	4b2a      	ldr	r3, [pc, #168]	@ (800159c <_ZL12MX_ADC1_Initv+0x108>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80014f6:	4b29      	ldr	r3, [pc, #164]	@ (800159c <_ZL12MX_ADC1_Initv+0x108>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014fc:	4b27      	ldr	r3, [pc, #156]	@ (800159c <_ZL12MX_ADC1_Initv+0x108>)
 80014fe:	2200      	movs	r2, #0
 8001500:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001502:	4b26      	ldr	r3, [pc, #152]	@ (800159c <_ZL12MX_ADC1_Initv+0x108>)
 8001504:	2200      	movs	r2, #0
 8001506:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001508:	4b24      	ldr	r3, [pc, #144]	@ (800159c <_ZL12MX_ADC1_Initv+0x108>)
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8001510:	4b22      	ldr	r3, [pc, #136]	@ (800159c <_ZL12MX_ADC1_Initv+0x108>)
 8001512:	2201      	movs	r2, #1
 8001514:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001516:	4821      	ldr	r0, [pc, #132]	@ (800159c <_ZL12MX_ADC1_Initv+0x108>)
 8001518:	f001 fd78 	bl	800300c <HAL_ADC_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	bf14      	ite	ne
 8001522:	2301      	movne	r3, #1
 8001524:	2300      	moveq	r3, #0
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 800152c:	f000 fc06 	bl	8001d3c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001530:	2300      	movs	r3, #0
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001534:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001538:	4619      	mov	r1, r3
 800153a:	4818      	ldr	r0, [pc, #96]	@ (800159c <_ZL12MX_ADC1_Initv+0x108>)
 800153c:	f003 f8fc 	bl	8004738 <HAL_ADCEx_MultiModeConfigChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	bf14      	ite	ne
 8001546:	2301      	movne	r3, #1
 8001548:	2300      	moveq	r3, #0
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 8001550:	f000 fbf4 	bl	8001d3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001554:	4b13      	ldr	r3, [pc, #76]	@ (80015a4 <_ZL12MX_ADC1_Initv+0x110>)
 8001556:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001558:	2306      	movs	r3, #6
 800155a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001560:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001564:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001566:	2304      	movs	r3, #4
 8001568:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001574:	463b      	mov	r3, r7
 8001576:	4619      	mov	r1, r3
 8001578:	4808      	ldr	r0, [pc, #32]	@ (800159c <_ZL12MX_ADC1_Initv+0x108>)
 800157a:	f002 f94f 	bl	800381c <HAL_ADC_ConfigChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	bf14      	ite	ne
 8001584:	2301      	movne	r3, #1
 8001586:	2300      	moveq	r3, #0
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <_ZL12MX_ADC1_Initv+0xfe>
  {
    Error_Handler();
 800158e:	f000 fbd5 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	3730      	adds	r7, #48	@ 0x30
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	24000084 	.word	0x24000084
 80015a0:	40022000 	.word	0x40022000
 80015a4:	08600004 	.word	0x08600004

080015a8 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	@ 0x28
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2224      	movs	r2, #36	@ 0x24
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f009 fc85 	bl	800aec4 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80015ba:	4b35      	ldr	r3, [pc, #212]	@ (8001690 <_ZL12MX_ADC3_Initv+0xe8>)
 80015bc:	4a35      	ldr	r2, [pc, #212]	@ (8001694 <_ZL12MX_ADC3_Initv+0xec>)
 80015be:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015c0:	4b33      	ldr	r3, [pc, #204]	@ (8001690 <_ZL12MX_ADC3_Initv+0xe8>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 80015c6:	4b32      	ldr	r3, [pc, #200]	@ (8001690 <_ZL12MX_ADC3_Initv+0xe8>)
 80015c8:	220c      	movs	r2, #12
 80015ca:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80015cc:	4b30      	ldr	r3, [pc, #192]	@ (8001690 <_ZL12MX_ADC3_Initv+0xe8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001690 <_ZL12MX_ADC3_Initv+0xe8>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001690 <_ZL12MX_ADC3_Initv+0xe8>)
 80015da:	2204      	movs	r2, #4
 80015dc:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80015de:	4b2c      	ldr	r3, [pc, #176]	@ (8001690 <_ZL12MX_ADC3_Initv+0xe8>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80015e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001690 <_ZL12MX_ADC3_Initv+0xe8>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80015ea:	4b29      	ldr	r3, [pc, #164]	@ (8001690 <_ZL12MX_ADC3_Initv+0xe8>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80015f0:	4b27      	ldr	r3, [pc, #156]	@ (8001690 <_ZL12MX_ADC3_Initv+0xe8>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015f8:	4b25      	ldr	r3, [pc, #148]	@ (8001690 <_ZL12MX_ADC3_Initv+0xe8>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015fe:	4b24      	ldr	r3, [pc, #144]	@ (8001690 <_ZL12MX_ADC3_Initv+0xe8>)
 8001600:	2200      	movs	r2, #0
 8001602:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001604:	4b22      	ldr	r3, [pc, #136]	@ (8001690 <_ZL12MX_ADC3_Initv+0xe8>)
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800160c:	4b20      	ldr	r3, [pc, #128]	@ (8001690 <_ZL12MX_ADC3_Initv+0xe8>)
 800160e:	2200      	movs	r2, #0
 8001610:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001612:	4b1f      	ldr	r3, [pc, #124]	@ (8001690 <_ZL12MX_ADC3_Initv+0xe8>)
 8001614:	2200      	movs	r2, #0
 8001616:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001618:	4b1d      	ldr	r3, [pc, #116]	@ (8001690 <_ZL12MX_ADC3_Initv+0xe8>)
 800161a:	2200      	movs	r2, #0
 800161c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800161e:	4b1c      	ldr	r3, [pc, #112]	@ (8001690 <_ZL12MX_ADC3_Initv+0xe8>)
 8001620:	2200      	movs	r2, #0
 8001622:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001624:	4b1a      	ldr	r3, [pc, #104]	@ (8001690 <_ZL12MX_ADC3_Initv+0xe8>)
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 800162c:	4b18      	ldr	r3, [pc, #96]	@ (8001690 <_ZL12MX_ADC3_Initv+0xe8>)
 800162e:	2200      	movs	r2, #0
 8001630:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001632:	4817      	ldr	r0, [pc, #92]	@ (8001690 <_ZL12MX_ADC3_Initv+0xe8>)
 8001634:	f001 fcea 	bl	800300c <HAL_ADC_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	bf14      	ite	ne
 800163e:	2301      	movne	r3, #1
 8001640:	2300      	moveq	r3, #0
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 8001648:	f000 fb78 	bl	8001d3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800164c:	4b12      	ldr	r3, [pc, #72]	@ (8001698 <_ZL12MX_ADC3_Initv+0xf0>)
 800164e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001650:	2306      	movs	r3, #6
 8001652:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001658:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800165c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800165e:	2304      	movs	r3, #4
 8001660:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001666:	2300      	movs	r3, #0
 8001668:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	4619      	mov	r1, r3
 800166e:	4808      	ldr	r0, [pc, #32]	@ (8001690 <_ZL12MX_ADC3_Initv+0xe8>)
 8001670:	f002 f8d4 	bl	800381c <HAL_ADC_ConfigChannel>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	bf14      	ite	ne
 800167a:	2301      	movne	r3, #1
 800167c:	2300      	moveq	r3, #0
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <_ZL12MX_ADC3_Initv+0xe0>
  {
    Error_Handler();
 8001684:	f000 fb5a 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001688:	bf00      	nop
 800168a:	3728      	adds	r7, #40	@ 0x28
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	240000f4 	.word	0x240000f4
 8001694:	58026000 	.word	0x58026000
 8001698:	1d500080 	.word	0x1d500080

0800169c <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80016a2:	4b41      	ldr	r3, [pc, #260]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016a4:	4a41      	ldr	r2, [pc, #260]	@ (80017ac <_ZL14MX_FDCAN1_Initv+0x110>)
 80016a6:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80016a8:	4b3f      	ldr	r3, [pc, #252]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016ae:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80016b0:	4b3d      	ldr	r3, [pc, #244]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80016b6:	4b3c      	ldr	r3, [pc, #240]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80016bc:	4b3a      	ldr	r3, [pc, #232]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80016c2:	4b39      	ldr	r3, [pc, #228]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 80016c8:	4b37      	ldr	r3, [pc, #220]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016ca:	2203      	movs	r2, #3
 80016cc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80016ce:	4b36      	ldr	r3, [pc, #216]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 80016d4:	4b34      	ldr	r3, [pc, #208]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016d6:	220a      	movs	r2, #10
 80016d8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 80016da:	4b33      	ldr	r3, [pc, #204]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016dc:	2205      	movs	r2, #5
 80016de:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80016e0:	4b31      	ldr	r3, [pc, #196]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80016e6:	4b30      	ldr	r3, [pc, #192]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80016ec:	4b2e      	ldr	r3, [pc, #184]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80016f2:	4b2d      	ldr	r3, [pc, #180]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80016f8:	4b2b      	ldr	r3, [pc, #172]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80016fe:	4b2a      	ldr	r3, [pc, #168]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001700:	2200      	movs	r2, #0
 8001702:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 5;
 8001704:	4b28      	ldr	r3, [pc, #160]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001706:	2205      	movs	r2, #5
 8001708:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 800170a:	4b27      	ldr	r3, [pc, #156]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800170c:	2220      	movs	r2, #32
 800170e:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001710:	4b25      	ldr	r3, [pc, #148]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001712:	2204      	movs	r2, #4
 8001714:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8001716:	4b24      	ldr	r3, [pc, #144]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001718:	2220      	movs	r2, #32
 800171a:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800171c:	4b22      	ldr	r3, [pc, #136]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800171e:	2204      	movs	r2, #4
 8001720:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 8001722:	4b21      	ldr	r3, [pc, #132]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001724:	2201      	movs	r2, #1
 8001726:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001728:	4b1f      	ldr	r3, [pc, #124]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800172a:	2204      	movs	r2, #4
 800172c:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 1;
 800172e:	4b1e      	ldr	r3, [pc, #120]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001730:	2201      	movs	r2, #1
 8001732:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 8001734:	4b1c      	ldr	r3, [pc, #112]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001736:	2220      	movs	r2, #32
 8001738:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 800173a:	4b1b      	ldr	r3, [pc, #108]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800173c:	2220      	movs	r2, #32
 800173e:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001740:	4b19      	ldr	r3, [pc, #100]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001742:	2200      	movs	r2, #0
 8001744:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001746:	4b18      	ldr	r3, [pc, #96]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001748:	2204      	movs	r2, #4
 800174a:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800174c:	4816      	ldr	r0, [pc, #88]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800174e:	f003 f9e5 	bl	8004b1c <HAL_FDCAN_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	bf14      	ite	ne
 8001758:	2301      	movne	r3, #1
 800175a:	2300      	moveq	r3, #0
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <_ZL14MX_FDCAN1_Initv+0xca>
  {
    Error_Handler();
 8001762:	f000 faeb 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8001766:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800176a:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001770:	2302      	movs	r3, #2
 8001772:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001774:	2301      	movs	r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0;
 8001778:	2300      	movs	r3, #0
 800177a:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x0;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001780:	463b      	mov	r3, r7
 8001782:	4619      	mov	r1, r3
 8001784:	4808      	ldr	r0, [pc, #32]	@ (80017a8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001786:	f003 fba7 	bl	8004ed8 <HAL_FDCAN_ConfigFilter>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	bf14      	ite	ne
 8001790:	2301      	movne	r3, #1
 8001792:	2300      	moveq	r3, #0
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <_ZL14MX_FDCAN1_Initv+0x102>
  {
    Error_Handler();
 800179a:	f000 facf 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	3720      	adds	r7, #32
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	24000164 	.word	0x24000164
 80017ac:	4000a000 	.word	0x4000a000

080017b0 <_ZL14MX_FDCAN2_Initv>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80017b6:	4b41      	ldr	r3, [pc, #260]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017b8:	4a41      	ldr	r2, [pc, #260]	@ (80018c0 <_ZL14MX_FDCAN2_Initv+0x110>)
 80017ba:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80017bc:	4b3f      	ldr	r3, [pc, #252]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017c2:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80017c4:	4b3d      	ldr	r3, [pc, #244]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80017ca:	4b3c      	ldr	r3, [pc, #240]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80017d0:	4b3a      	ldr	r3, [pc, #232]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80017d6:	4b39      	ldr	r3, [pc, #228]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 3;
 80017dc:	4b37      	ldr	r3, [pc, #220]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017de:	2203      	movs	r2, #3
 80017e0:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80017e2:	4b36      	ldr	r3, [pc, #216]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 10;
 80017e8:	4b34      	ldr	r3, [pc, #208]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017ea:	220a      	movs	r2, #10
 80017ec:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 80017ee:	4b33      	ldr	r3, [pc, #204]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017f0:	2205      	movs	r2, #5
 80017f2:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80017f4:	4b31      	ldr	r3, [pc, #196]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80017fa:	4b30      	ldr	r3, [pc, #192]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001800:	4b2e      	ldr	r3, [pc, #184]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001802:	2201      	movs	r2, #1
 8001804:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001806:	4b2d      	ldr	r3, [pc, #180]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001808:	2201      	movs	r2, #1
 800180a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 800180c:	4b2b      	ldr	r3, [pc, #172]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 800180e:	2200      	movs	r2, #0
 8001810:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8001812:	4b2a      	ldr	r3, [pc, #168]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001814:	2200      	movs	r2, #0
 8001816:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 5;
 8001818:	4b28      	ldr	r3, [pc, #160]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 800181a:	2205      	movs	r2, #5
 800181c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 32;
 800181e:	4b27      	ldr	r3, [pc, #156]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001820:	2220      	movs	r2, #32
 8001822:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001824:	4b25      	ldr	r3, [pc, #148]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001826:	2204      	movs	r2, #4
 8001828:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 32;
 800182a:	4b24      	ldr	r3, [pc, #144]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 800182c:	2220      	movs	r2, #32
 800182e:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001830:	4b22      	ldr	r3, [pc, #136]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001832:	2204      	movs	r2, #4
 8001834:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 1;
 8001836:	4b21      	ldr	r3, [pc, #132]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001838:	2201      	movs	r2, #1
 800183a:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800183c:	4b1f      	ldr	r3, [pc, #124]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 800183e:	2204      	movs	r2, #4
 8001840:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 1;
 8001842:	4b1e      	ldr	r3, [pc, #120]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001844:	2201      	movs	r2, #1
 8001846:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 32;
 8001848:	4b1c      	ldr	r3, [pc, #112]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 800184a:	2220      	movs	r2, #32
 800184c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 32;
 800184e:	4b1b      	ldr	r3, [pc, #108]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001850:	2220      	movs	r2, #32
 8001852:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001854:	4b19      	ldr	r3, [pc, #100]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001856:	2200      	movs	r2, #0
 8001858:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800185a:	4b18      	ldr	r3, [pc, #96]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 800185c:	2204      	movs	r2, #4
 800185e:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001860:	4816      	ldr	r0, [pc, #88]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001862:	f003 f95b 	bl	8004b1c <HAL_FDCAN_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	bf14      	ite	ne
 800186c:	2301      	movne	r3, #1
 800186e:	2300      	moveq	r3, #0
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <_ZL14MX_FDCAN2_Initv+0xca>
  {
    Error_Handler();
 8001876:	f000 fa61 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800187a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800187e:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001884:	2302      	movs	r3, #2
 8001886:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001888:	2301      	movs	r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x10;
 800188c:	2310      	movs	r3, #16
 800188e:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x10;
 8001890:	2310      	movs	r3, #16
 8001892:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8001894:	463b      	mov	r3, r7
 8001896:	4619      	mov	r1, r3
 8001898:	4808      	ldr	r0, [pc, #32]	@ (80018bc <_ZL14MX_FDCAN2_Initv+0x10c>)
 800189a:	f003 fb1d 	bl	8004ed8 <HAL_FDCAN_ConfigFilter>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	bf14      	ite	ne
 80018a4:	2301      	movne	r3, #1
 80018a6:	2300      	moveq	r3, #0
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <_ZL14MX_FDCAN2_Initv+0x102>
  {
    Error_Handler();
 80018ae:	f000 fa45 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE END FDCAN2_Init 2 */

}
 80018b2:	bf00      	nop
 80018b4:	3720      	adds	r7, #32
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	24000204 	.word	0x24000204
 80018c0:	4000a400 	.word	0x4000a400

080018c4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018c8:	4b2c      	ldr	r3, [pc, #176]	@ (800197c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80018ca:	4a2d      	ldr	r2, [pc, #180]	@ (8001980 <_ZL19MX_USART2_UART_Initv+0xbc>)
 80018cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018ce:	4b2b      	ldr	r3, [pc, #172]	@ (800197c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80018d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018d6:	4b29      	ldr	r3, [pc, #164]	@ (800197c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018dc:	4b27      	ldr	r3, [pc, #156]	@ (800197c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018e2:	4b26      	ldr	r3, [pc, #152]	@ (800197c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018e8:	4b24      	ldr	r3, [pc, #144]	@ (800197c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80018ea:	220c      	movs	r2, #12
 80018ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ee:	4b23      	ldr	r3, [pc, #140]	@ (800197c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f4:	4b21      	ldr	r3, [pc, #132]	@ (800197c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018fa:	4b20      	ldr	r3, [pc, #128]	@ (800197c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001900:	4b1e      	ldr	r3, [pc, #120]	@ (800197c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001902:	2200      	movs	r2, #0
 8001904:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001906:	4b1d      	ldr	r3, [pc, #116]	@ (800197c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001908:	2200      	movs	r2, #0
 800190a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800190c:	481b      	ldr	r0, [pc, #108]	@ (800197c <_ZL19MX_USART2_UART_Initv+0xb8>)
 800190e:	f008 f833 	bl	8009978 <HAL_UART_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	bf14      	ite	ne
 8001918:	2301      	movne	r3, #1
 800191a:	2300      	moveq	r3, #0
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8001922:	f000 fa0b 	bl	8001d3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001926:	2100      	movs	r1, #0
 8001928:	4814      	ldr	r0, [pc, #80]	@ (800197c <_ZL19MX_USART2_UART_Initv+0xb8>)
 800192a:	f009 f9de 	bl	800acea <HAL_UARTEx_SetTxFifoThreshold>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	bf14      	ite	ne
 8001934:	2301      	movne	r3, #1
 8001936:	2300      	moveq	r3, #0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 800193e:	f000 f9fd 	bl	8001d3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001942:	2100      	movs	r1, #0
 8001944:	480d      	ldr	r0, [pc, #52]	@ (800197c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001946:	f009 fa0e 	bl	800ad66 <HAL_UARTEx_SetRxFifoThreshold>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	bf14      	ite	ne
 8001950:	2301      	movne	r3, #1
 8001952:	2300      	moveq	r3, #0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 800195a:	f000 f9ef 	bl	8001d3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800195e:	4807      	ldr	r0, [pc, #28]	@ (800197c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001960:	f009 f98a 	bl	800ac78 <HAL_UARTEx_DisableFifoMode>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	bf14      	ite	ne
 800196a:	2301      	movne	r3, #1
 800196c:	2300      	moveq	r3, #0
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8001974:	f000 f9e2 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}
 800197c:	240002a4 	.word	0x240002a4
 8001980:	40004400 	.word	0x40004400

08001984 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08c      	sub	sp, #48	@ 0x30
 8001988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198a:	f107 031c 	add.w	r3, r7, #28
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	60da      	str	r2, [r3, #12]
 8001998:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800199a:	4b50      	ldr	r3, [pc, #320]	@ (8001adc <_ZL12MX_GPIO_Initv+0x158>)
 800199c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019a0:	4a4e      	ldr	r2, [pc, #312]	@ (8001adc <_ZL12MX_GPIO_Initv+0x158>)
 80019a2:	f043 0320 	orr.w	r3, r3, #32
 80019a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019aa:	4b4c      	ldr	r3, [pc, #304]	@ (8001adc <_ZL12MX_GPIO_Initv+0x158>)
 80019ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019b0:	f003 0320 	and.w	r3, r3, #32
 80019b4:	61bb      	str	r3, [r7, #24]
 80019b6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019b8:	4b48      	ldr	r3, [pc, #288]	@ (8001adc <_ZL12MX_GPIO_Initv+0x158>)
 80019ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019be:	4a47      	ldr	r2, [pc, #284]	@ (8001adc <_ZL12MX_GPIO_Initv+0x158>)
 80019c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019c8:	4b44      	ldr	r3, [pc, #272]	@ (8001adc <_ZL12MX_GPIO_Initv+0x158>)
 80019ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	4b41      	ldr	r3, [pc, #260]	@ (8001adc <_ZL12MX_GPIO_Initv+0x158>)
 80019d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019dc:	4a3f      	ldr	r2, [pc, #252]	@ (8001adc <_ZL12MX_GPIO_Initv+0x158>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019e6:	4b3d      	ldr	r3, [pc, #244]	@ (8001adc <_ZL12MX_GPIO_Initv+0x158>)
 80019e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019f4:	4b39      	ldr	r3, [pc, #228]	@ (8001adc <_ZL12MX_GPIO_Initv+0x158>)
 80019f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019fa:	4a38      	ldr	r2, [pc, #224]	@ (8001adc <_ZL12MX_GPIO_Initv+0x158>)
 80019fc:	f043 0310 	orr.w	r3, r3, #16
 8001a00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a04:	4b35      	ldr	r3, [pc, #212]	@ (8001adc <_ZL12MX_GPIO_Initv+0x158>)
 8001a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a12:	4b32      	ldr	r3, [pc, #200]	@ (8001adc <_ZL12MX_GPIO_Initv+0x158>)
 8001a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a18:	4a30      	ldr	r2, [pc, #192]	@ (8001adc <_ZL12MX_GPIO_Initv+0x158>)
 8001a1a:	f043 0302 	orr.w	r3, r3, #2
 8001a1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a22:	4b2e      	ldr	r3, [pc, #184]	@ (8001adc <_ZL12MX_GPIO_Initv+0x158>)
 8001a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a30:	4b2a      	ldr	r3, [pc, #168]	@ (8001adc <_ZL12MX_GPIO_Initv+0x158>)
 8001a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a36:	4a29      	ldr	r2, [pc, #164]	@ (8001adc <_ZL12MX_GPIO_Initv+0x158>)
 8001a38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a40:	4b26      	ldr	r3, [pc, #152]	@ (8001adc <_ZL12MX_GPIO_Initv+0x158>)
 8001a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a4e:	4b23      	ldr	r3, [pc, #140]	@ (8001adc <_ZL12MX_GPIO_Initv+0x158>)
 8001a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a54:	4a21      	ldr	r2, [pc, #132]	@ (8001adc <_ZL12MX_GPIO_Initv+0x158>)
 8001a56:	f043 0308 	orr.w	r3, r3, #8
 8001a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001adc <_ZL12MX_GPIO_Initv+0x158>)
 8001a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a64:	f003 0308 	and.w	r3, r3, #8
 8001a68:	603b      	str	r3, [r7, #0]
 8001a6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, GPIO_PIN_RESET);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2180      	movs	r1, #128	@ 0x80
 8001a70:	481b      	ldr	r0, [pc, #108]	@ (8001ae0 <_ZL12MX_GPIO_Initv+0x15c>)
 8001a72:	f004 fbe1 	bl	8006238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin, GPIO_PIN_RESET);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2138      	movs	r1, #56	@ 0x38
 8001a7a:	481a      	ldr	r0, [pc, #104]	@ (8001ae4 <_ZL12MX_GPIO_Initv+0x160>)
 8001a7c:	f004 fbdc 	bl	8006238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIGITAL1_Pin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin;
 8001a80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a86:	2300      	movs	r3, #0
 8001a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIGITAL1_GPIO_Port, &GPIO_InitStruct);
 8001a8e:	f107 031c 	add.w	r3, r7, #28
 8001a92:	4619      	mov	r1, r3
 8001a94:	4814      	ldr	r0, [pc, #80]	@ (8001ae8 <_ZL12MX_GPIO_Initv+0x164>)
 8001a96:	f004 fa0f 	bl	8005eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : AMS_OK_Pin */
  GPIO_InitStruct.Pin = AMS_OK_Pin;
 8001a9a:	2380      	movs	r3, #128	@ 0x80
 8001a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AMS_OK_GPIO_Port, &GPIO_InitStruct);
 8001aaa:	f107 031c 	add.w	r3, r7, #28
 8001aae:	4619      	mov	r1, r3
 8001ab0:	480b      	ldr	r0, [pc, #44]	@ (8001ae0 <_ZL12MX_GPIO_Initv+0x15c>)
 8001ab2:	f004 fa01 	bl	8005eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_AIR_N_Pin RELAY_AIR_P_Pin RELAY_PRECHARGE_Pin */
  GPIO_InitStruct.Pin = RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin;
 8001ab6:	2338      	movs	r3, #56	@ 0x38
 8001ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aba:	2301      	movs	r3, #1
 8001abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac6:	f107 031c 	add.w	r3, r7, #28
 8001aca:	4619      	mov	r1, r3
 8001acc:	4805      	ldr	r0, [pc, #20]	@ (8001ae4 <_ZL12MX_GPIO_Initv+0x160>)
 8001ace:	f004 f9f3 	bl	8005eb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ad2:	bf00      	nop
 8001ad4:	3730      	adds	r7, #48	@ 0x30
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	58024400 	.word	0x58024400
 8001ae0:	58021800 	.word	0x58021800
 8001ae4:	58020c00 	.word	0x58020c00
 8001ae8:	58021000 	.word	0x58021000

08001aec <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001aec:	b590      	push	{r4, r7, lr}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af02      	add	r7, sp, #8
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d04b      	beq.n	8001b98 <HAL_FDCAN_RxFifo0Callback+0xac>
	{
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_acu, RxData) == HAL_OK)
 8001b00:	4b27      	ldr	r3, [pc, #156]	@ (8001ba0 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001b02:	4a28      	ldr	r2, [pc, #160]	@ (8001ba4 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001b04:	2140      	movs	r1, #64	@ 0x40
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f003 fae2 	bl	80050d0 <HAL_FDCAN_GetRxMessage>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	bf0c      	ite	eq
 8001b12:	2301      	moveq	r3, #1
 8001b14:	2300      	movne	r3, #0
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d02e      	beq.n	8001b7a <HAL_FDCAN_RxFifo0Callback+0x8e>
    {
		msg_acu.id = RxHeader_acu.Identifier;
 8001b1c:	4b21      	ldr	r3, [pc, #132]	@ (8001ba4 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a21      	ldr	r2, [pc, #132]	@ (8001ba8 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001b22:	6013      	str	r3, [r2, #0]
		msg_acu.len = RxHeader_acu.DataLength;
 8001b24:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba4 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba8 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001b2c:	711a      	strb	r2, [r3, #4]
		for (int i = 0; i < 8; i++) {msg_acu.buf[i] = RxData[i];}
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	e00c      	b.n	8001b4e <HAL_FDCAN_RxFifo0Callback+0x62>
 8001b34:	4a1a      	ldr	r2, [pc, #104]	@ (8001ba0 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4413      	add	r3, r2
 8001b3a:	7819      	ldrb	r1, [r3, #0]
 8001b3c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ba8 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4413      	add	r3, r2
 8001b42:	3305      	adds	r3, #5
 8001b44:	460a      	mov	r2, r1
 8001b46:	701a      	strb	r2, [r3, #0]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2b07      	cmp	r3, #7
 8001b52:	ddef      	ble.n	8001b34 <HAL_FDCAN_RxFifo0Callback+0x48>
		msg_acu.bus = 1;
 8001b54:	4b14      	ldr	r3, [pc, #80]	@ (8001ba8 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	611a      	str	r2, [r3, #16]
		msg_acu.time = HAL_GetTick();
 8001b5a:	f000 ff25 	bl	80029a8 <HAL_GetTick>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4a11      	ldr	r2, [pc, #68]	@ (8001ba8 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001b62:	6153      	str	r3, [r2, #20]
		parse_state(msg_acu);
 8001b64:	4b10      	ldr	r3, [pc, #64]	@ (8001ba8 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001b66:	466c      	mov	r4, sp
 8001b68:	f103 0210 	add.w	r2, r3, #16
 8001b6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b70:	e884 0003 	stmia.w	r4, {r0, r1}
 8001b74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b76:	f000 fabb 	bl	80020f0 <_Z11parse_state6CANMsg>

    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f003 fc12 	bl	80053a8 <HAL_FDCAN_ActivateNotification>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	bf14      	ite	ne
 8001b8a:	2301      	movne	r3, #1
 8001b8c:	2300      	moveq	r3, #0
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <HAL_FDCAN_RxFifo0Callback+0xac>
    {
      /* Notification Error */
      Error_Handler();
 8001b94:	f000 f8d2 	bl	8001d3c <Error_Handler>
    }
  }
}
 8001b98:	bf00      	nop
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd90      	pop	{r4, r7, pc}
 8001ba0:	240003d0 	.word	0x240003d0
 8001ba4:	24000380 	.word	0x24000380
 8001ba8:	24000454 	.word	0x24000454

08001bac <module_send_message_CAN1>:

//extended ID
HAL_StatusTypeDef module_send_message_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 8001bba:	4a0b      	ldr	r2, [pc, #44]	@ (8001be8 <module_send_message_CAN1+0x3c>)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_EXTENDED_ID;
 8001bc0:	4b09      	ldr	r3, [pc, #36]	@ (8001be8 <module_send_message_CAN1+0x3c>)
 8001bc2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bc6:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	4a07      	ldr	r2, [pc, #28]	@ (8001be8 <module_send_message_CAN1+0x3c>)
 8001bcc:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	4905      	ldr	r1, [pc, #20]	@ (8001be8 <module_send_message_CAN1+0x3c>)
 8001bd2:	4806      	ldr	r0, [pc, #24]	@ (8001bec <module_send_message_CAN1+0x40>)
 8001bd4:	f003 fa21 	bl	800501a <HAL_FDCAN_AddMessageToTxFifoQ>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	75fb      	strb	r3, [r7, #23]

	return status;
 8001bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	24000338 	.word	0x24000338
 8001bec:	24000164 	.word	0x24000164

08001bf0 <module_send_message_CAN2>:
	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);

	return status;
}

HAL_StatusTypeDef module_send_message_CAN2(uint32_t id, uint8_t* data, uint8_t length) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	71fb      	strb	r3, [r7, #7]
	TxHeader_bms.Identifier = id;
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8001c28 <module_send_message_CAN2+0x38>)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6013      	str	r3, [r2, #0]
	TxHeader_bms.IdType = FDCAN_STANDARD_ID;
 8001c04:	4b08      	ldr	r3, [pc, #32]	@ (8001c28 <module_send_message_CAN2+0x38>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	605a      	str	r2, [r3, #4]
	TxHeader_bms.DataLength = length;
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	4a06      	ldr	r2, [pc, #24]	@ (8001c28 <module_send_message_CAN2+0x38>)
 8001c0e:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_bms, data);
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	4905      	ldr	r1, [pc, #20]	@ (8001c28 <module_send_message_CAN2+0x38>)
 8001c14:	4805      	ldr	r0, [pc, #20]	@ (8001c2c <module_send_message_CAN2+0x3c>)
 8001c16:	f003 fa00 	bl	800501a <HAL_FDCAN_AddMessageToTxFifoQ>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	75fb      	strb	r3, [r7, #23]

	return status;
 8001c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	2400035c 	.word	0x2400035c
 8001c2c:	24000204 	.word	0x24000204

08001c30 <print>:

void print(char uart_buffer[]){
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	4909      	ldr	r1, [pc, #36]	@ (8001c60 <print+0x30>)
 8001c3c:	4809      	ldr	r0, [pc, #36]	@ (8001c64 <print+0x34>)
 8001c3e:	f009 f91f 	bl	800ae80 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001c42:	4808      	ldr	r0, [pc, #32]	@ (8001c64 <print+0x34>)
 8001c44:	f7fe fb64 	bl	8000310 <strlen>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c50:	4904      	ldr	r1, [pc, #16]	@ (8001c64 <print+0x34>)
 8001c52:	4805      	ldr	r0, [pc, #20]	@ (8001c68 <print+0x38>)
 8001c54:	f007 fee0 	bl	8009a18 <HAL_UART_Transmit>
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	0800bab0 	.word	0x0800bab0
 8001c64:	240003d8 	.word	0x240003d8
 8001c68:	240002a4 	.word	0x240002a4

08001c6c <printnl>:

void printnl(char uart_buffer[]){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s", uart_buffer);
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	4909      	ldr	r1, [pc, #36]	@ (8001c9c <printnl+0x30>)
 8001c78:	4809      	ldr	r0, [pc, #36]	@ (8001ca0 <printnl+0x34>)
 8001c7a:	f009 f901 	bl	800ae80 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001c7e:	4808      	ldr	r0, [pc, #32]	@ (8001ca0 <printnl+0x34>)
 8001c80:	f7fe fb46 	bl	8000310 <strlen>
 8001c84:	4603      	mov	r3, r0
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8c:	4904      	ldr	r1, [pc, #16]	@ (8001ca0 <printnl+0x34>)
 8001c8e:	4805      	ldr	r0, [pc, #20]	@ (8001ca4 <printnl+0x38>)
 8001c90:	f007 fec2 	bl	8009a18 <HAL_UART_Transmit>
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	0800bab8 	.word	0x0800bab8
 8001ca0:	240003d8 	.word	0x240003d8
 8001ca4:	240002a4 	.word	0x240002a4

08001ca8 <printValue>:

void printValue(int value){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	4909      	ldr	r1, [pc, #36]	@ (8001cd8 <printValue+0x30>)
 8001cb4:	4809      	ldr	r0, [pc, #36]	@ (8001cdc <printValue+0x34>)
 8001cb6:	f009 f8e3 	bl	800ae80 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001cba:	4808      	ldr	r0, [pc, #32]	@ (8001cdc <printValue+0x34>)
 8001cbc:	f7fe fb28 	bl	8000310 <strlen>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc8:	4904      	ldr	r1, [pc, #16]	@ (8001cdc <printValue+0x34>)
 8001cca:	4805      	ldr	r0, [pc, #20]	@ (8001ce0 <printValue+0x38>)
 8001ccc:	f007 fea4 	bl	8009a18 <HAL_UART_Transmit>
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	0800babc 	.word	0x0800babc
 8001cdc:	240003d8 	.word	0x240003d8
 8001ce0:	240002a4 	.word	0x240002a4

08001ce4 <getUARTState>:

HAL_UART_StateTypeDef getUARTState(){
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
	return HAL_UART_GetState(&huart2);
 8001ce8:	4802      	ldr	r0, [pc, #8]	@ (8001cf4 <getUARTState+0x10>)
 8001cea:	f007 ff23 	bl	8009b34 <HAL_UART_GetState>
 8001cee:	4603      	mov	r3, r0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	240002a4 	.word	0x240002a4

08001cf8 <readAnalogValue>:

float readAnalogValue(void){
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
	float analogValue;

	HAL_ADC_Start(&hadc3);
 8001cfe:	480e      	ldr	r0, [pc, #56]	@ (8001d38 <readAnalogValue+0x40>)
 8001d00:	f001 fb8c 	bl	800341c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8001d04:	f04f 31ff 	mov.w	r1, #4294967295
 8001d08:	480b      	ldr	r0, [pc, #44]	@ (8001d38 <readAnalogValue+0x40>)
 8001d0a:	f001 fc85 	bl	8003618 <HAL_ADC_PollForConversion>
	analogValue = HAL_ADC_GetValue(&hadc3);
 8001d0e:	480a      	ldr	r0, [pc, #40]	@ (8001d38 <readAnalogValue+0x40>)
 8001d10:	f001 fd76 	bl	8003800 <HAL_ADC_GetValue>
 8001d14:	ee07 0a90 	vmov	s15, r0
 8001d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d1c:	edc7 7a01 	vstr	s15, [r7, #4]
	HAL_ADC_Stop(&hadc3);
 8001d20:	4805      	ldr	r0, [pc, #20]	@ (8001d38 <readAnalogValue+0x40>)
 8001d22:	f001 fc45 	bl	80035b0 <HAL_ADC_Stop>
	return analogValue;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	ee07 3a90 	vmov	s15, r3
}
 8001d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	240000f4 	.word	0x240000f4

08001d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d40:	b672      	cpsid	i
}
 8001d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <Error_Handler+0x8>

08001d48 <_Z12select_statev>:

/*********************************************************************************************************
 ** Function name:           select_state
 ** Descriptions:            check what should they do on the state machine
 *********************************************************************************************************/
void select_state() {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	@ 0x28
 8001d4c:	af00      	add	r7, sp, #0
	int state_air_n = 0;     // 0 means open, 1 closed     // Turn on SEVCON
 8001d4e:	2300      	movs	r3, #0
 8001d50:	627b      	str	r3, [r7, #36]	@ 0x24
	int state_air_p = 0;     // 0 means open, 1 closed     // Energize HV relay
 8001d52:	2300      	movs	r3, #0
 8001d54:	623b      	str	r3, [r7, #32]
	int state_precharge = 0; // 0 means open, 1 closed
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
	int flag_cpu = CPU_ERROR_COMMUNICATION;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	613b      	str	r3, [r7, #16]
	int flag_current = Current_ERROR_Comunication;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	60fb      	str	r3, [r7, #12]
	 * 1 ms interruption => 1ms * 264MHz = 264000
	 * prescalado 264 (por ejemplo)
	 * timer count = 264000 / 264 = 1000
	 */

	uint32_t time = HAL_GetTick();
 8001d62:	f000 fe21 	bl	80029a8 <HAL_GetTick>
 8001d66:	60b8      	str	r0, [r7, #8]
	int time_s = HAL_GetTick();
 8001d68:	f000 fe1e 	bl	80029a8 <HAL_GetTick>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	607b      	str	r3, [r7, #4]

	CPU.voltage_acum = 0; // For precharge
 8001d70:	4ba6      	ldr	r3, [pc, #664]	@ (800200c <_Z12select_statev+0x2c4>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	62da      	str	r2, [r3, #44]	@ 0x2c


	MIN_V = 4200; /// I reset the number each cycle cause if the voltages goes up again I wanna has it risen again on telemetry
 8001d76:	4ba6      	ldr	r3, [pc, #664]	@ (8002010 <_Z12select_statev+0x2c8>)
 8001d78:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001d7c:	601a      	str	r2, [r3, #0]
	MAX_T = 0;
 8001d7e:	4ba5      	ldr	r3, [pc, #660]	@ (8002014 <_Z12select_statev+0x2cc>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001d84:	2300      	movs	r3, #0
 8001d86:	61bb      	str	r3, [r7, #24]
 8001d88:	e06c      	b.n	8001e64 <_Z12select_statev+0x11c>
		BMS[i].voltage_acum = 0;                  // For precharge
 8001d8a:	4aa3      	ldr	r2, [pc, #652]	@ (8002018 <_Z12select_statev+0x2d0>)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8001d92:	fb01 f303 	mul.w	r3, r1, r3
 8001d96:	4413      	add	r3, r2
 8001d98:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
		if (BMS[i].query_voltage(time, buffer) != BMS_OK) //I ask the BMS about voltages and cheking their states
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8001da6:	fb02 f303 	mul.w	r3, r2, r3
 8001daa:	4a9b      	ldr	r2, [pc, #620]	@ (8002018 <_Z12select_statev+0x2d0>)
 8001dac:	4413      	add	r3, r2
 8001dae:	4a9b      	ldr	r2, [pc, #620]	@ (800201c <_Z12select_statev+0x2d4>)
 8001db0:	68b9      	ldr	r1, [r7, #8]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff f835 	bl	8000e22 <_ZN7BMS_MOD13query_voltageEmPc>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
		{
			//state = error;
		}
		CPU.voltage_acum += BMS[i].voltage_acum; // For precharge
 8001dbc:	4b93      	ldr	r3, [pc, #588]	@ (800200c <_Z12select_statev+0x2c4>)
 8001dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dc0:	4995      	ldr	r1, [pc, #596]	@ (8002018 <_Z12select_statev+0x2d0>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	f44f 70b6 	mov.w	r0, #364	@ 0x16c
 8001dc8:	fb00 f303 	mul.w	r3, r0, r3
 8001dcc:	440b      	add	r3, r1
 8001dce:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4a8d      	ldr	r2, [pc, #564]	@ (800200c <_Z12select_statev+0x2c4>)
 8001dd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if (BMS[i].MIN_V < MIN_V)
 8001dda:	4a8f      	ldr	r2, [pc, #572]	@ (8002018 <_Z12select_statev+0x2d0>)
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8001de2:	fb01 f303 	mul.w	r3, r1, r3
 8001de6:	4413      	add	r3, r2
 8001de8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	4b88      	ldr	r3, [pc, #544]	@ (8002010 <_Z12select_statev+0x2c8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	da0b      	bge.n	8001e0e <_Z12select_statev+0xc6>
			MIN_V = BMS[i].MIN_V; //Checking the minimun voltage of cell in the whole battery
 8001df6:	4a88      	ldr	r2, [pc, #544]	@ (8002018 <_Z12select_statev+0x2d0>)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8001dfe:	fb01 f303 	mul.w	r3, r1, r3
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a81      	ldr	r2, [pc, #516]	@ (8002010 <_Z12select_statev+0x2c8>)
 8001e0c:	6013      	str	r3, [r2, #0]

		if (BMS[i].query_temperature(time, buffer) != Temperatures_OK){
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8001e14:	fb02 f303 	mul.w	r3, r2, r3
 8001e18:	4a7f      	ldr	r2, [pc, #508]	@ (8002018 <_Z12select_statev+0x2d0>)
 8001e1a:	4413      	add	r3, r2
 8001e1c:	4a7f      	ldr	r2, [pc, #508]	@ (800201c <_Z12select_statev+0x2d4>)
 8001e1e:	68b9      	ldr	r1, [r7, #8]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff f861 	bl	8000ee8 <_ZN7BMS_MOD17query_temperatureEmPc>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
			//state = error;
		}

		if (BMS[i].MAX_T > MAX_T)
 8001e2a:	4a7b      	ldr	r2, [pc, #492]	@ (8002018 <_Z12select_statev+0x2d0>)
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8001e32:	fb01 f303 	mul.w	r3, r1, r3
 8001e36:	4413      	add	r3, r2
 8001e38:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	4b75      	ldr	r3, [pc, #468]	@ (8002014 <_Z12select_statev+0x2cc>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	dd0b      	ble.n	8001e5e <_Z12select_statev+0x116>
			MAX_T = BMS[i].MAX_T;
 8001e46:	4a74      	ldr	r2, [pc, #464]	@ (8002018 <_Z12select_statev+0x2d0>)
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8001e4e:	fb01 f303 	mul.w	r3, r1, r3
 8001e52:	4413      	add	r3, r2
 8001e54:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a6e      	ldr	r2, [pc, #440]	@ (8002014 <_Z12select_statev+0x2cc>)
 8001e5c:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	3301      	adds	r3, #1
 8001e62:	61bb      	str	r3, [r7, #24]
 8001e64:	4b6e      	ldr	r3, [pc, #440]	@ (8002020 <_Z12select_statev+0x2d8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	db8d      	blt.n	8001d8a <_Z12select_statev+0x42>
	}

	if (time_s > time_sending_minV + 500) {
 8001e6e:	4b6d      	ldr	r3, [pc, #436]	@ (8002024 <_Z12select_statev+0x2dc>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	dd23      	ble.n	8001ec4 <_Z12select_statev+0x17c>
		message_MINV[1] = MIN_V & 0xFF;
 8001e7c:	4b64      	ldr	r3, [pc, #400]	@ (8002010 <_Z12select_statev+0x2c8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	4b69      	ldr	r3, [pc, #420]	@ (8002028 <_Z12select_statev+0x2e0>)
 8001e84:	705a      	strb	r2, [r3, #1]
		message_MINV[0] = (MIN_V >> 8) & 0xFF;
 8001e86:	4b62      	ldr	r3, [pc, #392]	@ (8002010 <_Z12select_statev+0x2c8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	121b      	asrs	r3, r3, #8
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	4b66      	ldr	r3, [pc, #408]	@ (8002028 <_Z12select_statev+0x2e0>)
 8001e90:	701a      	strb	r2, [r3, #0]
		if (BMS[0].flag_charger != 1) {
 8001e92:	4b61      	ldr	r3, [pc, #388]	@ (8002018 <_Z12select_statev+0x2d0>)
 8001e94:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d010      	beq.n	8001ebe <_Z12select_statev+0x176>
			if (module_send_message_CAN1(BMS_ID, message_MINV, 2) != HAL_OK)
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	4962      	ldr	r1, [pc, #392]	@ (8002028 <_Z12select_statev+0x2e0>)
 8001ea0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001ea4:	f7ff fe82 	bl	8001bac <module_send_message_CAN1>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	bf14      	ite	ne
 8001eae:	2301      	movne	r3, #1
 8001eb0:	2300      	moveq	r3, #0
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <_Z12select_statev+0x176>
				print((char*) "Error al enviar tension minima"); //Sending the message through telemtry each 500 ms
 8001eb8:	485c      	ldr	r0, [pc, #368]	@ (800202c <_Z12select_statev+0x2e4>)
 8001eba:	f7ff feb9 	bl	8001c30 <print>
		}
		time_sending_minV = time_s;
 8001ebe:	4a59      	ldr	r2, [pc, #356]	@ (8002024 <_Z12select_statev+0x2dc>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6013      	str	r3, [r2, #0]
	}
	for (int i = 0; i < BMS_N; i++) {
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	e00e      	b.n	8001ee8 <_Z12select_statev+0x1a0>
		BMS[i].BALANCING_V = MIN_V; //Here I say I wanna balance all the cells in the battery to the minimun
 8001eca:	4b51      	ldr	r3, [pc, #324]	@ (8002010 <_Z12select_statev+0x2c8>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	4952      	ldr	r1, [pc, #328]	@ (8002018 <_Z12select_statev+0x2d0>)
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f44f 70b6 	mov.w	r0, #364	@ 0x16c
 8001ed6:	fb00 f303 	mul.w	r3, r0, r3
 8001eda:	440b      	add	r3, r1
 8001edc:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8001ee0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	4b4d      	ldr	r3, [pc, #308]	@ (8002020 <_Z12select_statev+0x2d8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	dbeb      	blt.n	8001eca <_Z12select_statev+0x182>

	}


	//flag_cpu = CPU.query(time, buffer); //Asking the rest of the car how is it
	flag_cpu = CPU_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]

	flag_current = current.query(time, buffer); //asking current how is it
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	4a48      	ldr	r2, [pc, #288]	@ (800201c <_Z12select_statev+0x2d4>)
 8001efa:	4619      	mov	r1, r3
 8001efc:	484c      	ldr	r0, [pc, #304]	@ (8002030 <_Z12select_statev+0x2e8>)
 8001efe:	f7ff f93f 	bl	8001180 <_ZN11Current_MOD5queryEiPc>
 8001f02:	60f8      	str	r0, [r7, #12]
	print((char*)"voltage acu");
	printValue(CPU.voltage_acum);
	print((char*)"dc bus");
	printValue(CPU.DC_BUS);*/
	//printValue(state);
	switch (state) {
 8001f04:	4b4b      	ldr	r3, [pc, #300]	@ (8002034 <_Z12select_statev+0x2ec>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d879      	bhi.n	8002000 <_Z12select_statev+0x2b8>
 8001f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f14 <_Z12select_statev+0x1cc>)
 8001f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f12:	bf00      	nop
 8001f14:	08001f29 	.word	0x08001f29
 8001f18:	08001f4b 	.word	0x08001f4b
 8001f1c:	08001f7b 	.word	0x08001f7b
 8001f20:	08001f97 	.word	0x08001f97
 8001f24:	08001fe1 	.word	0x08001fe1
	case start:
		state_air_n = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	623b      	str	r3, [r7, #32]
		state_precharge = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_DISCONNECTED);
 8001f34:	2102      	movs	r1, #2
 8001f36:	4835      	ldr	r0, [pc, #212]	@ (800200c <_Z12select_statev+0x2c4>)
 8001f38:	f7ff f8c2 	bl	80010c0 <_ZN7CPU_MOD11updateStateEi>
		if (flag_cpu != CPU_ERROR_COMMUNICATION)
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d059      	beq.n	8001ff6 <_Z12select_statev+0x2ae>
			state = precharge; //If I do comunicate with the rest of the car, I go to precharge
 8001f42:	4b3c      	ldr	r3, [pc, #240]	@ (8002034 <_Z12select_statev+0x2ec>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]
		break;
 8001f48:	e055      	b.n	8001ff6 <_Z12select_statev+0x2ae>
	case precharge:
		state_air_n = 1;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	623b      	str	r3, [r7, #32]
		state_precharge = 1;
 8001f52:	2301      	movs	r3, #1
 8001f54:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_PRECHARGE);
 8001f56:	2101      	movs	r1, #1
 8001f58:	482c      	ldr	r0, [pc, #176]	@ (800200c <_Z12select_statev+0x2c4>)
 8001f5a:	f7ff f8b1 	bl	80010c0 <_ZN7CPU_MOD11updateStateEi>
		if (flag_cpu == CPU_OK) {
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d103      	bne.n	8001f6c <_Z12select_statev+0x224>
			state = transition;
 8001f64:	4b33      	ldr	r3, [pc, #204]	@ (8002034 <_Z12select_statev+0x2ec>)
 8001f66:	2202      	movs	r2, #2
 8001f68:	701a      	strb	r2, [r3, #0]
		} else if (flag_cpu == CPU_ERROR_COMMUNICATION)
			state = error;
		 //else if(flag_current != Current_OK) state = error; //I take this out cause in precharge current can be very high, but probably can be uncommented,
		break;
 8001f6a:	e046      	b.n	8001ffa <_Z12select_statev+0x2b2>
		} else if (flag_cpu == CPU_ERROR_COMMUNICATION)
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d143      	bne.n	8001ffa <_Z12select_statev+0x2b2>
			state = error;
 8001f72:	4b30      	ldr	r3, [pc, #192]	@ (8002034 <_Z12select_statev+0x2ec>)
 8001f74:	2204      	movs	r2, #4
 8001f76:	701a      	strb	r2, [r3, #0]
		break;
 8001f78:	e03f      	b.n	8001ffa <_Z12select_statev+0x2b2>
	case transition:
		state_air_n = 1;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	623b      	str	r3, [r7, #32]
		state_precharge = 1;
 8001f82:	2301      	movs	r3, #1
 8001f84:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_PRECHARGE);
 8001f86:	2101      	movs	r1, #1
 8001f88:	4820      	ldr	r0, [pc, #128]	@ (800200c <_Z12select_statev+0x2c4>)
 8001f8a:	f7ff f899 	bl	80010c0 <_ZN7CPU_MOD11updateStateEi>
		//if ((((CPU.voltage_acum)/1000) * 0.9 < CPU.DC_BUS)){//&&(CPU.voltage_acum != 0)){
			state = run; //If DC_BUS voltage is higher than 90% of battery voltage, precharge finish
 8001f8e:	4b29      	ldr	r3, [pc, #164]	@ (8002034 <_Z12select_statev+0x2ec>)
 8001f90:	2203      	movs	r2, #3
 8001f92:	701a      	strb	r2, [r3, #0]
		// else if((flag_cpu == CPU_ERROR_COMMUNICATION)&&(flag_charger == 1)) state = error;
		// else if(flag_current != Current_OK) state = error;
		//}
		break;
 8001f94:	e034      	b.n	8002000 <_Z12select_statev+0x2b8>
	case run:
		state_air_n = 1;
 8001f96:	2301      	movs	r3, #1
 8001f98:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 1;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	623b      	str	r3, [r7, #32]
		state_precharge = 1;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_POWER);
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4819      	ldr	r0, [pc, #100]	@ (800200c <_Z12select_statev+0x2c4>)
 8001fa6:	f7ff f88b 	bl	80010c0 <_ZN7CPU_MOD11updateStateEi>
		if ((flag_cpu == CPU_ERROR_COMMUNICATION) && (flag_charger == 1)){
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d106      	bne.n	8001fbe <_Z12select_statev+0x276>
 8001fb0:	4b21      	ldr	r3, [pc, #132]	@ (8002038 <_Z12select_statev+0x2f0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d102      	bne.n	8001fbe <_Z12select_statev+0x276>
			//state = error; //If I disconnect the charger, error
			print((char*)"CPU");
 8001fb8:	4820      	ldr	r0, [pc, #128]	@ (800203c <_Z12select_statev+0x2f4>)
 8001fba:	f7ff fe39 	bl	8001c30 <print>
		}
		if (flag_current != Current_OK){
			//state = error; //If current is too high, error
		}
		if(HAL_GPIO_ReadPin(DIGITAL1_GPIO_Port, DIGITAL1_Pin) == GPIO_PIN_RESET){ //SDC IO
 8001fbe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fc2:	481f      	ldr	r0, [pc, #124]	@ (8002040 <_Z12select_statev+0x2f8>)
 8001fc4:	f004 f920 	bl	8006208 <HAL_GPIO_ReadPin>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	bf0c      	ite	eq
 8001fce:	2301      	moveq	r3, #1
 8001fd0:	2300      	movne	r3, #0
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d012      	beq.n	8001ffe <_Z12select_statev+0x2b6>
			//state = error;
			print((char*)"DIGITAL");
 8001fd8:	481a      	ldr	r0, [pc, #104]	@ (8002044 <_Z12select_statev+0x2fc>)
 8001fda:	f7ff fe29 	bl	8001c30 <print>
		}
		break;
 8001fde:	e00e      	b.n	8001ffe <_Z12select_statev+0x2b6>
	case error:
		state_air_n = 0; //All relés closed
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	623b      	str	r3, [r7, #32]
		state_precharge = 0;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_ERROR);
 8001fec:	2103      	movs	r1, #3
 8001fee:	4807      	ldr	r0, [pc, #28]	@ (800200c <_Z12select_statev+0x2c4>)
 8001ff0:	f7ff f866 	bl	80010c0 <_ZN7CPU_MOD11updateStateEi>
		break;
 8001ff4:	e004      	b.n	8002000 <_Z12select_statev+0x2b8>
		break;
 8001ff6:	bf00      	nop
 8001ff8:	e002      	b.n	8002000 <_Z12select_statev+0x2b8>
		break;
 8001ffa:	bf00      	nop
 8001ffc:	e000      	b.n	8002000 <_Z12select_statev+0x2b8>
		break;
 8001ffe:	bf00      	nop
	 print(buffer);
	 sprintf(buffer, " - STATE:     %i\n", state);
	 print(buffer);
	 sprintf(buffer, "***********************\n");
	 print(buffer);*/
	HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin,
 8002000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002002:	2b00      	cmp	r3, #0
 8002004:	d020      	beq.n	8002048 <_Z12select_statev+0x300>
 8002006:	2301      	movs	r3, #1
 8002008:	e01f      	b.n	800204a <_Z12select_statev+0x302>
 800200a:	bf00      	nop
 800200c:	24000b94 	.word	0x24000b94
 8002010:	24000004 	.word	0x24000004
 8002014:	24000b88 	.word	0x24000b88
 8002018:	2400046c 	.word	0x2400046c
 800201c:	24000c14 	.word	0x24000c14
 8002020:	24000000 	.word	0x24000000
 8002024:	24000b90 	.word	0x24000b90
 8002028:	24000b8c 	.word	0x24000b8c
 800202c:	0800bac4 	.word	0x0800bac4
 8002030:	24000bcc 	.word	0x24000bcc
 8002034:	24000c10 	.word	0x24000c10
 8002038:	24000bc8 	.word	0x24000bc8
 800203c:	0800bae4 	.word	0x0800bae4
 8002040:	58021000 	.word	0x58021000
 8002044:	0800bae8 	.word	0x0800bae8
 8002048:	2300      	movs	r3, #0
 800204a:	461a      	mov	r2, r3
 800204c:	2180      	movs	r1, #128	@ 0x80
 800204e:	4821      	ldr	r0, [pc, #132]	@ (80020d4 <_Z12select_statev+0x38c>)
 8002050:	f004 f8f2 	bl	8006238 <HAL_GPIO_WritePin>
			state_air_n ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_AIR_N_GPIO_Port, RELAY_AIR_N_Pin,
 8002054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <_Z12select_statev+0x316>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <_Z12select_statev+0x318>
 800205e:	2300      	movs	r3, #0
 8002060:	461a      	mov	r2, r3
 8002062:	2108      	movs	r1, #8
 8002064:	481c      	ldr	r0, [pc, #112]	@ (80020d8 <_Z12select_statev+0x390>)
 8002066:	f004 f8e7 	bl	8006238 <HAL_GPIO_WritePin>
			state_air_n ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_AIR_P_GPIO_Port, RELAY_AIR_P_Pin,
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <_Z12select_statev+0x32c>
 8002070:	2301      	movs	r3, #1
 8002072:	e000      	b.n	8002076 <_Z12select_statev+0x32e>
 8002074:	2300      	movs	r3, #0
 8002076:	461a      	mov	r2, r3
 8002078:	2110      	movs	r1, #16
 800207a:	4817      	ldr	r0, [pc, #92]	@ (80020d8 <_Z12select_statev+0x390>)
 800207c:	f004 f8dc 	bl	8006238 <HAL_GPIO_WritePin>
			state_air_p ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_PRECHARGE_GPIO_Port, RELAY_PRECHARGE_Pin,
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <_Z12select_statev+0x342>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <_Z12select_statev+0x344>
 800208a:	2300      	movs	r3, #0
 800208c:	461a      	mov	r2, r3
 800208e:	2120      	movs	r1, #32
 8002090:	4811      	ldr	r0, [pc, #68]	@ (80020d8 <_Z12select_statev+0x390>)
 8002092:	f004 f8d1 	bl	8006238 <HAL_GPIO_WritePin>
			state_precharge ? GPIO_PIN_SET : GPIO_PIN_RESET);
	if(1){
		printnl((char*)"State: ");
 8002096:	4811      	ldr	r0, [pc, #68]	@ (80020dc <_Z12select_statev+0x394>)
 8002098:	f7ff fde8 	bl	8001c6c <printnl>
		printValue(state);
 800209c:	4b10      	ldr	r3, [pc, #64]	@ (80020e0 <_Z12select_statev+0x398>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fe01 	bl	8001ca8 <printValue>
		printnl((char*)"State AIR+: ");
 80020a6:	480f      	ldr	r0, [pc, #60]	@ (80020e4 <_Z12select_statev+0x39c>)
 80020a8:	f7ff fde0 	bl	8001c6c <printnl>
		printValue(state_air_p);
 80020ac:	6a38      	ldr	r0, [r7, #32]
 80020ae:	f7ff fdfb 	bl	8001ca8 <printValue>
		printnl((char*)"State AIR-: ");
 80020b2:	480d      	ldr	r0, [pc, #52]	@ (80020e8 <_Z12select_statev+0x3a0>)
 80020b4:	f7ff fdda 	bl	8001c6c <printnl>
		printValue(state_air_n);
 80020b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020ba:	f7ff fdf5 	bl	8001ca8 <printValue>
		printnl((char*)"Relee Prec:");
 80020be:	480b      	ldr	r0, [pc, #44]	@ (80020ec <_Z12select_statev+0x3a4>)
 80020c0:	f7ff fdd4 	bl	8001c6c <printnl>
		printValue(state_precharge);
 80020c4:	69f8      	ldr	r0, [r7, #28]
 80020c6:	f7ff fdef 	bl	8001ca8 <printValue>
	}


}
 80020ca:	bf00      	nop
 80020cc:	3728      	adds	r7, #40	@ 0x28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	58021800 	.word	0x58021800
 80020d8:	58020c00 	.word	0x58020c00
 80020dc:	0800baf0 	.word	0x0800baf0
 80020e0:	24000c10 	.word	0x24000c10
 80020e4:	0800baf8 	.word	0x0800baf8
 80020e8:	0800bb08 	.word	0x0800bb08
 80020ec:	0800bb18 	.word	0x0800bb18

080020f0 <_Z11parse_state6CANMsg>:

/*********************************************************************************************************
 ** Function name:           parse_state
 ** Descriptions:            Function for analysing the data from the CAN
 *********************************************************************************************************/
void parse_state(CANMsg data) {
 80020f0:	b084      	sub	sp, #16
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	f107 0c18 	add.w	ip, r7, #24
 80020fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t time = HAL_GetTick();
 8002100:	f000 fc52 	bl	80029a8 <HAL_GetTick>
 8002104:	6038      	str	r0, [r7, #0]
	bool flag_bms = false;
 8002106:	2300      	movs	r3, #0
 8002108:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; i < BMS_N; i++) {
 800210a:	2300      	movs	r3, #0
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	e017      	b.n	8002140 <_Z11parse_state6CANMsg+0x50>
		flag_bms = BMS[i].parse(data.id, &data.buf[0], time); //Checking if the message received is for  BMS
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8002116:	fb02 f303 	mul.w	r3, r2, r3
 800211a:	4a26      	ldr	r2, [pc, #152]	@ (80021b4 <_Z11parse_state6CANMsg+0xc4>)
 800211c:	1898      	adds	r0, r3, r2
 800211e:	69b9      	ldr	r1, [r7, #24]
 8002120:	f107 021d 	add.w	r2, r7, #29
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	f7fe fcf9 	bl	8000b1c <_ZN7BMS_MOD5parseEmPhm>
 800212a:	4603      	mov	r3, r0
 800212c:	73fb      	strb	r3, [r7, #15]
		if (flag_bms)
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <_Z11parse_state6CANMsg+0x4a>
			i = BMS_N;
 8002134:	4b20      	ldr	r3, [pc, #128]	@ (80021b8 <_Z11parse_state6CANMsg+0xc8>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < BMS_N; i++) {
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	3301      	adds	r3, #1
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	4b1d      	ldr	r3, [pc, #116]	@ (80021b8 <_Z11parse_state6CANMsg+0xc8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68ba      	ldr	r2, [r7, #8]
 8002146:	429a      	cmp	r2, r3
 8002148:	dbe2      	blt.n	8002110 <_Z11parse_state6CANMsg+0x20>
	}

	if (!flag_bms) {
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	f083 0301 	eor.w	r3, r3, #1
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d026      	beq.n	80021a4 <_Z11parse_state6CANMsg+0xb4>
		if (CPU.parse(data.id, &data.buf[0], time))
 8002156:	69b9      	ldr	r1, [r7, #24]
 8002158:	f107 021d 	add.w	r2, r7, #29
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	4817      	ldr	r0, [pc, #92]	@ (80021bc <_Z11parse_state6CANMsg+0xcc>)
 8002160:	f7fe ff6a 	bl	8001038 <_ZN7CPU_MOD5parseEmPhm>
			;                       //Cheking if message is for CPU
		if (data.id == 419385575) //If message from this direction received, it is because the charger is connected and the accu is for charging
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	4a16      	ldr	r2, [pc, #88]	@ (80021c0 <_Z11parse_state6CANMsg+0xd0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d11b      	bne.n	80021a4 <_Z11parse_state6CANMsg+0xb4>
				{
			for (int i = 0; i < BMS_N; i++) {
 800216c:	2300      	movs	r3, #0
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	e00d      	b.n	800218e <_Z11parse_state6CANMsg+0x9e>
				BMS[i].flag_charger = 1;
 8002172:	4a10      	ldr	r2, [pc, #64]	@ (80021b4 <_Z11parse_state6CANMsg+0xc4>)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 800217a:	fb01 f303 	mul.w	r3, r1, r3
 800217e:	4413      	add	r3, r2
 8002180:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002184:	2201      	movs	r2, #1
 8002186:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < BMS_N; i++) {
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3301      	adds	r3, #1
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	4b0a      	ldr	r3, [pc, #40]	@ (80021b8 <_Z11parse_state6CANMsg+0xc8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	429a      	cmp	r2, r3
 8002196:	dbec      	blt.n	8002172 <_Z11parse_state6CANMsg+0x82>
			}

			current.flag_charger = 1;
 8002198:	4b0a      	ldr	r3, [pc, #40]	@ (80021c4 <_Z11parse_state6CANMsg+0xd4>)
 800219a:	2201      	movs	r2, #1
 800219c:	63da      	str	r2, [r3, #60]	@ 0x3c
			flag_charger = 1;
 800219e:	4b0a      	ldr	r3, [pc, #40]	@ (80021c8 <_Z11parse_state6CANMsg+0xd8>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	601a      	str	r2, [r3, #0]
		} else {
			// Serial.print("ID: ");
			// Serial.println(data.id);
		}
	}
}
 80021a4:	bf00      	nop
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021ae:	b004      	add	sp, #16
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	2400046c 	.word	0x2400046c
 80021b8:	24000000 	.word	0x24000000
 80021bc:	24000b94 	.word	0x24000b94
 80021c0:	18ff50e7 	.word	0x18ff50e7
 80021c4:	24000bcc 	.word	0x24000bcc
 80021c8:	24000bc8 	.word	0x24000bc8

080021cc <_Z41__static_initialization_and_destruction_0v>:
 80021cc:	b590      	push	{r4, r7, lr}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af04      	add	r7, sp, #16
		};
 80021d2:	4c3a      	ldr	r4, [pc, #232]	@ (80022bc <_Z41__static_initialization_and_destruction_0v+0xf0>)
 80021d4:	2300      	movs	r3, #0
 80021d6:	9303      	str	r3, [sp, #12]
 80021d8:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80021dc:	9302      	str	r3, [sp, #8]
 80021de:	2318      	movs	r3, #24
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	233c      	movs	r3, #60	@ 0x3c
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80021ea:	f241 0268 	movw	r2, #4200	@ 0x1068
 80021ee:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80021f2:	4620      	mov	r0, r4
 80021f4:	f7fe fa7a 	bl	80006ec <_ZN7BMS_MODC1Emiiihji>
 80021f8:	f504 74b6 	add.w	r4, r4, #364	@ 0x16c
 80021fc:	2332      	movs	r3, #50	@ 0x32
 80021fe:	9303      	str	r3, [sp, #12]
 8002200:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002204:	9302      	str	r3, [sp, #8]
 8002206:	2318      	movs	r3, #24
 8002208:	9301      	str	r3, [sp, #4]
 800220a:	233c      	movs	r3, #60	@ 0x3c
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8002212:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002216:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 800221a:	4620      	mov	r0, r4
 800221c:	f7fe fa66 	bl	80006ec <_ZN7BMS_MODC1Emiiihji>
 8002220:	f504 74b6 	add.w	r4, r4, #364	@ 0x16c
 8002224:	2364      	movs	r3, #100	@ 0x64
 8002226:	9303      	str	r3, [sp, #12]
 8002228:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800222c:	9302      	str	r3, [sp, #8]
 800222e:	2318      	movs	r3, #24
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	233c      	movs	r3, #60	@ 0x3c
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 800223a:	f241 0268 	movw	r2, #4200	@ 0x1068
 800223e:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8002242:	4620      	mov	r0, r4
 8002244:	f7fe fa52 	bl	80006ec <_ZN7BMS_MODC1Emiiihji>
 8002248:	f504 74b6 	add.w	r4, r4, #364	@ 0x16c
 800224c:	2396      	movs	r3, #150	@ 0x96
 800224e:	9303      	str	r3, [sp, #12]
 8002250:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002254:	9302      	str	r3, [sp, #8]
 8002256:	2318      	movs	r3, #24
 8002258:	9301      	str	r3, [sp, #4]
 800225a:	233c      	movs	r3, #60	@ 0x3c
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8002262:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002266:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 800226a:	4620      	mov	r0, r4
 800226c:	f7fe fa3e 	bl	80006ec <_ZN7BMS_MODC1Emiiihji>
 8002270:	f504 70b6 	add.w	r0, r4, #364	@ 0x16c
 8002274:	23c8      	movs	r3, #200	@ 0xc8
 8002276:	9303      	str	r3, [sp, #12]
 8002278:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800227c:	9302      	str	r3, [sp, #8]
 800227e:	2318      	movs	r3, #24
 8002280:	9301      	str	r3, [sp, #4]
 8002282:	233c      	movs	r3, #60	@ 0x3c
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 800228a:	f241 0268 	movw	r2, #4200	@ 0x1068
 800228e:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8002292:	f7fe fa2b 	bl	80006ec <_ZN7BMS_MODC1Emiiihji>
CPU_MOD CPU(CPU_ID_send, CPU_ID_recv, 500); //Same with CPU, rest of vehicle
 8002296:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800229a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800229e:	2120      	movs	r1, #32
 80022a0:	4807      	ldr	r0, [pc, #28]	@ (80022c0 <_Z41__static_initialization_and_destruction_0v+0xf4>)
 80022a2:	f7fe fe77 	bl	8000f94 <_ZN7CPU_MODC1Emmi>
Current_MOD current(Current_ID, Current_max); //Class for current measurement
 80022a6:	22c8      	movs	r2, #200	@ 0xc8
 80022a8:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80022ac:	4805      	ldr	r0, [pc, #20]	@ (80022c4 <_Z41__static_initialization_and_destruction_0v+0xf8>)
 80022ae:	f7fe ff19 	bl	80010e4 <_ZN11Current_MODC1Emi>
}
 80022b2:	bf00      	nop
 80022b4:	3704      	adds	r7, #4
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd90      	pop	{r4, r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2400046c 	.word	0x2400046c
 80022c0:	24000b94 	.word	0x24000b94
 80022c4:	24000bcc 	.word	0x24000bcc

080022c8 <_GLOBAL__sub_I_BMS>:
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	f7ff ff7e 	bl	80021cc <_Z41__static_initialization_and_destruction_0v>
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022da:	4b0a      	ldr	r3, [pc, #40]	@ (8002304 <HAL_MspInit+0x30>)
 80022dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80022e0:	4a08      	ldr	r2, [pc, #32]	@ (8002304 <HAL_MspInit+0x30>)
 80022e2:	f043 0302 	orr.w	r3, r3, #2
 80022e6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80022ea:	4b06      	ldr	r3, [pc, #24]	@ (8002304 <HAL_MspInit+0x30>)
 80022ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	607b      	str	r3, [r7, #4]
 80022f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	58024400 	.word	0x58024400

08002308 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08c      	sub	sp, #48	@ 0x30
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 031c 	add.w	r3, r7, #28
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a31      	ldr	r2, [pc, #196]	@ (80023ec <HAL_ADC_MspInit+0xe4>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d12b      	bne.n	8002382 <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800232a:	4b31      	ldr	r3, [pc, #196]	@ (80023f0 <HAL_ADC_MspInit+0xe8>)
 800232c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002330:	4a2f      	ldr	r2, [pc, #188]	@ (80023f0 <HAL_ADC_MspInit+0xe8>)
 8002332:	f043 0320 	orr.w	r3, r3, #32
 8002336:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800233a:	4b2d      	ldr	r3, [pc, #180]	@ (80023f0 <HAL_ADC_MspInit+0xe8>)
 800233c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002340:	f003 0320 	and.w	r3, r3, #32
 8002344:	61bb      	str	r3, [r7, #24]
 8002346:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002348:	4b29      	ldr	r3, [pc, #164]	@ (80023f0 <HAL_ADC_MspInit+0xe8>)
 800234a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800234e:	4a28      	ldr	r2, [pc, #160]	@ (80023f0 <HAL_ADC_MspInit+0xe8>)
 8002350:	f043 0320 	orr.w	r3, r3, #32
 8002354:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002358:	4b25      	ldr	r3, [pc, #148]	@ (80023f0 <HAL_ADC_MspInit+0xe8>)
 800235a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800235e:	f003 0320 	and.w	r3, r3, #32
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002366:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800236a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800236c:	2303      	movs	r3, #3
 800236e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002374:	f107 031c 	add.w	r3, r7, #28
 8002378:	4619      	mov	r1, r3
 800237a:	481e      	ldr	r0, [pc, #120]	@ (80023f4 <HAL_ADC_MspInit+0xec>)
 800237c:	f003 fd9c 	bl	8005eb8 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002380:	e02f      	b.n	80023e2 <HAL_ADC_MspInit+0xda>
  else if(hadc->Instance==ADC3)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a1c      	ldr	r2, [pc, #112]	@ (80023f8 <HAL_ADC_MspInit+0xf0>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d12a      	bne.n	80023e2 <HAL_ADC_MspInit+0xda>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800238c:	4b18      	ldr	r3, [pc, #96]	@ (80023f0 <HAL_ADC_MspInit+0xe8>)
 800238e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002392:	4a17      	ldr	r2, [pc, #92]	@ (80023f0 <HAL_ADC_MspInit+0xe8>)
 8002394:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002398:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800239c:	4b14      	ldr	r3, [pc, #80]	@ (80023f0 <HAL_ADC_MspInit+0xe8>)
 800239e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80023aa:	4b11      	ldr	r3, [pc, #68]	@ (80023f0 <HAL_ADC_MspInit+0xe8>)
 80023ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023b0:	4a0f      	ldr	r2, [pc, #60]	@ (80023f0 <HAL_ADC_MspInit+0xe8>)
 80023b2:	f043 0320 	orr.w	r3, r3, #32
 80023b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023ba:	4b0d      	ldr	r3, [pc, #52]	@ (80023f0 <HAL_ADC_MspInit+0xe8>)
 80023bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023c0:	f003 0320 	and.w	r3, r3, #32
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023ce:	2303      	movs	r3, #3
 80023d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023d6:	f107 031c 	add.w	r3, r7, #28
 80023da:	4619      	mov	r1, r3
 80023dc:	4805      	ldr	r0, [pc, #20]	@ (80023f4 <HAL_ADC_MspInit+0xec>)
 80023de:	f003 fd6b 	bl	8005eb8 <HAL_GPIO_Init>
}
 80023e2:	bf00      	nop
 80023e4:	3730      	adds	r7, #48	@ 0x30
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40022000 	.word	0x40022000
 80023f0:	58024400 	.word	0x58024400
 80023f4:	58021400 	.word	0x58021400
 80023f8:	58026000 	.word	0x58026000

080023fc <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b0ba      	sub	sp, #232	@ 0xe8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002414:	f107 0318 	add.w	r3, r7, #24
 8002418:	22b8      	movs	r2, #184	@ 0xb8
 800241a:	2100      	movs	r1, #0
 800241c:	4618      	mov	r0, r3
 800241e:	f008 fd51 	bl	800aec4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a5a      	ldr	r2, [pc, #360]	@ (8002590 <HAL_FDCAN_MspInit+0x194>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d157      	bne.n	80024dc <HAL_FDCAN_MspInit+0xe0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800242c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002438:	2300      	movs	r3, #0
 800243a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800243e:	f107 0318 	add.w	r3, r7, #24
 8002442:	4618      	mov	r0, r3
 8002444:	f004 feb2 	bl	80071ac <HAL_RCCEx_PeriphCLKConfig>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 800244e:	f7ff fc75 	bl	8001d3c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002452:	4b50      	ldr	r3, [pc, #320]	@ (8002594 <HAL_FDCAN_MspInit+0x198>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	3301      	adds	r3, #1
 8002458:	4a4e      	ldr	r2, [pc, #312]	@ (8002594 <HAL_FDCAN_MspInit+0x198>)
 800245a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800245c:	4b4d      	ldr	r3, [pc, #308]	@ (8002594 <HAL_FDCAN_MspInit+0x198>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d10e      	bne.n	8002482 <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002464:	4b4c      	ldr	r3, [pc, #304]	@ (8002598 <HAL_FDCAN_MspInit+0x19c>)
 8002466:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800246a:	4a4b      	ldr	r2, [pc, #300]	@ (8002598 <HAL_FDCAN_MspInit+0x19c>)
 800246c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002470:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002474:	4b48      	ldr	r3, [pc, #288]	@ (8002598 <HAL_FDCAN_MspInit+0x19c>)
 8002476:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800247a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002482:	4b45      	ldr	r3, [pc, #276]	@ (8002598 <HAL_FDCAN_MspInit+0x19c>)
 8002484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002488:	4a43      	ldr	r2, [pc, #268]	@ (8002598 <HAL_FDCAN_MspInit+0x19c>)
 800248a:	f043 0308 	orr.w	r3, r3, #8
 800248e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002492:	4b41      	ldr	r3, [pc, #260]	@ (8002598 <HAL_FDCAN_MspInit+0x19c>)
 8002494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024a0:	2303      	movs	r3, #3
 80024a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b2:	2300      	movs	r3, #0
 80024b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80024b8:	2309      	movs	r3, #9
 80024ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024be:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80024c2:	4619      	mov	r1, r3
 80024c4:	4835      	ldr	r0, [pc, #212]	@ (800259c <HAL_FDCAN_MspInit+0x1a0>)
 80024c6:	f003 fcf7 	bl	8005eb8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80024ca:	2200      	movs	r2, #0
 80024cc:	2100      	movs	r1, #0
 80024ce:	2013      	movs	r0, #19
 80024d0:	f002 faef 	bl	8004ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80024d4:	2013      	movs	r0, #19
 80024d6:	f002 fb06 	bl	8004ae6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN FDCAN2_MspInit 1 */

    /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80024da:	e054      	b.n	8002586 <HAL_FDCAN_MspInit+0x18a>
  else if(hfdcan->Instance==FDCAN2)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a2f      	ldr	r2, [pc, #188]	@ (80025a0 <HAL_FDCAN_MspInit+0x1a4>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d14f      	bne.n	8002586 <HAL_FDCAN_MspInit+0x18a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80024e6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80024ea:	f04f 0300 	mov.w	r3, #0
 80024ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024f8:	f107 0318 	add.w	r3, r7, #24
 80024fc:	4618      	mov	r0, r3
 80024fe:	f004 fe55 	bl	80071ac <HAL_RCCEx_PeriphCLKConfig>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 8002508:	f7ff fc18 	bl	8001d3c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800250c:	4b21      	ldr	r3, [pc, #132]	@ (8002594 <HAL_FDCAN_MspInit+0x198>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	3301      	adds	r3, #1
 8002512:	4a20      	ldr	r2, [pc, #128]	@ (8002594 <HAL_FDCAN_MspInit+0x198>)
 8002514:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002516:	4b1f      	ldr	r3, [pc, #124]	@ (8002594 <HAL_FDCAN_MspInit+0x198>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d10e      	bne.n	800253c <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800251e:	4b1e      	ldr	r3, [pc, #120]	@ (8002598 <HAL_FDCAN_MspInit+0x19c>)
 8002520:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002524:	4a1c      	ldr	r2, [pc, #112]	@ (8002598 <HAL_FDCAN_MspInit+0x19c>)
 8002526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800252a:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800252e:	4b1a      	ldr	r3, [pc, #104]	@ (8002598 <HAL_FDCAN_MspInit+0x19c>)
 8002530:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800253c:	4b16      	ldr	r3, [pc, #88]	@ (8002598 <HAL_FDCAN_MspInit+0x19c>)
 800253e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002542:	4a15      	ldr	r2, [pc, #84]	@ (8002598 <HAL_FDCAN_MspInit+0x19c>)
 8002544:	f043 0302 	orr.w	r3, r3, #2
 8002548:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800254c:	4b12      	ldr	r3, [pc, #72]	@ (8002598 <HAL_FDCAN_MspInit+0x19c>)
 800254e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800255a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800255e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002562:	2302      	movs	r3, #2
 8002564:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256e:	2300      	movs	r3, #0
 8002570:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002574:	2309      	movs	r3, #9
 8002576:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800257e:	4619      	mov	r1, r3
 8002580:	4808      	ldr	r0, [pc, #32]	@ (80025a4 <HAL_FDCAN_MspInit+0x1a8>)
 8002582:	f003 fc99 	bl	8005eb8 <HAL_GPIO_Init>
}
 8002586:	bf00      	nop
 8002588:	37e8      	adds	r7, #232	@ 0xe8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	4000a000 	.word	0x4000a000
 8002594:	24000c64 	.word	0x24000c64
 8002598:	58024400 	.word	0x58024400
 800259c:	58020c00 	.word	0x58020c00
 80025a0:	4000a400 	.word	0x4000a400
 80025a4:	58020400 	.word	0x58020400

080025a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b0b8      	sub	sp, #224	@ 0xe0
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025c0:	f107 0310 	add.w	r3, r7, #16
 80025c4:	22b8      	movs	r2, #184	@ 0xb8
 80025c6:	2100      	movs	r1, #0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f008 fc7b 	bl	800aec4 <memset>
  if(huart->Instance==USART2)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a26      	ldr	r2, [pc, #152]	@ (800266c <HAL_UART_MspInit+0xc4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d145      	bne.n	8002664 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025d8:	f04f 0202 	mov.w	r2, #2
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025ea:	f107 0310 	add.w	r3, r7, #16
 80025ee:	4618      	mov	r0, r3
 80025f0:	f004 fddc 	bl	80071ac <HAL_RCCEx_PeriphCLKConfig>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80025fa:	f7ff fb9f 	bl	8001d3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002670 <HAL_UART_MspInit+0xc8>)
 8002600:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002604:	4a1a      	ldr	r2, [pc, #104]	@ (8002670 <HAL_UART_MspInit+0xc8>)
 8002606:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800260a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800260e:	4b18      	ldr	r3, [pc, #96]	@ (8002670 <HAL_UART_MspInit+0xc8>)
 8002610:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261c:	4b14      	ldr	r3, [pc, #80]	@ (8002670 <HAL_UART_MspInit+0xc8>)
 800261e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002622:	4a13      	ldr	r2, [pc, #76]	@ (8002670 <HAL_UART_MspInit+0xc8>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800262c:	4b10      	ldr	r3, [pc, #64]	@ (8002670 <HAL_UART_MspInit+0xc8>)
 800262e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	60bb      	str	r3, [r7, #8]
 8002638:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800263a:	230c      	movs	r3, #12
 800263c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002640:	2302      	movs	r3, #2
 8002642:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264c:	2300      	movs	r3, #0
 800264e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002652:	2307      	movs	r3, #7
 8002654:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002658:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800265c:	4619      	mov	r1, r3
 800265e:	4805      	ldr	r0, [pc, #20]	@ (8002674 <HAL_UART_MspInit+0xcc>)
 8002660:	f003 fc2a 	bl	8005eb8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002664:	bf00      	nop
 8002666:	37e0      	adds	r7, #224	@ 0xe0
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40004400 	.word	0x40004400
 8002670:	58024400 	.word	0x58024400
 8002674:	58020000 	.word	0x58020000

08002678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800267c:	bf00      	nop
 800267e:	e7fd      	b.n	800267c <NMI_Handler+0x4>

08002680 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002684:	bf00      	nop
 8002686:	e7fd      	b.n	8002684 <HardFault_Handler+0x4>

08002688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800268c:	bf00      	nop
 800268e:	e7fd      	b.n	800268c <MemManage_Handler+0x4>

08002690 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002694:	bf00      	nop
 8002696:	e7fd      	b.n	8002694 <BusFault_Handler+0x4>

08002698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800269c:	bf00      	nop
 800269e:	e7fd      	b.n	800269c <UsageFault_Handler+0x4>

080026a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026ce:	f000 f957 	bl	8002980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80026dc:	4802      	ldr	r0, [pc, #8]	@ (80026e8 <FDCAN1_IT0_IRQHandler+0x10>)
 80026de:	f002 fedd 	bl	800549c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	24000164 	.word	0x24000164

080026ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026f4:	4a14      	ldr	r2, [pc, #80]	@ (8002748 <_sbrk+0x5c>)
 80026f6:	4b15      	ldr	r3, [pc, #84]	@ (800274c <_sbrk+0x60>)
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002700:	4b13      	ldr	r3, [pc, #76]	@ (8002750 <_sbrk+0x64>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d102      	bne.n	800270e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002708:	4b11      	ldr	r3, [pc, #68]	@ (8002750 <_sbrk+0x64>)
 800270a:	4a12      	ldr	r2, [pc, #72]	@ (8002754 <_sbrk+0x68>)
 800270c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800270e:	4b10      	ldr	r3, [pc, #64]	@ (8002750 <_sbrk+0x64>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	429a      	cmp	r2, r3
 800271a:	d207      	bcs.n	800272c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800271c:	f008 fbda 	bl	800aed4 <__errno>
 8002720:	4603      	mov	r3, r0
 8002722:	220c      	movs	r2, #12
 8002724:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002726:	f04f 33ff 	mov.w	r3, #4294967295
 800272a:	e009      	b.n	8002740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800272c:	4b08      	ldr	r3, [pc, #32]	@ (8002750 <_sbrk+0x64>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002732:	4b07      	ldr	r3, [pc, #28]	@ (8002750 <_sbrk+0x64>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4413      	add	r3, r2
 800273a:	4a05      	ldr	r2, [pc, #20]	@ (8002750 <_sbrk+0x64>)
 800273c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800273e:	68fb      	ldr	r3, [r7, #12]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	24050000 	.word	0x24050000
 800274c:	00000400 	.word	0x00000400
 8002750:	24000c68 	.word	0x24000c68
 8002754:	24000db8 	.word	0x24000db8

08002758 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800275c:	4b32      	ldr	r3, [pc, #200]	@ (8002828 <SystemInit+0xd0>)
 800275e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002762:	4a31      	ldr	r2, [pc, #196]	@ (8002828 <SystemInit+0xd0>)
 8002764:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002768:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800276c:	4b2f      	ldr	r3, [pc, #188]	@ (800282c <SystemInit+0xd4>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 030f 	and.w	r3, r3, #15
 8002774:	2b06      	cmp	r3, #6
 8002776:	d807      	bhi.n	8002788 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002778:	4b2c      	ldr	r3, [pc, #176]	@ (800282c <SystemInit+0xd4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f023 030f 	bic.w	r3, r3, #15
 8002780:	4a2a      	ldr	r2, [pc, #168]	@ (800282c <SystemInit+0xd4>)
 8002782:	f043 0307 	orr.w	r3, r3, #7
 8002786:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002788:	4b29      	ldr	r3, [pc, #164]	@ (8002830 <SystemInit+0xd8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a28      	ldr	r2, [pc, #160]	@ (8002830 <SystemInit+0xd8>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002794:	4b26      	ldr	r3, [pc, #152]	@ (8002830 <SystemInit+0xd8>)
 8002796:	2200      	movs	r2, #0
 8002798:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800279a:	4b25      	ldr	r3, [pc, #148]	@ (8002830 <SystemInit+0xd8>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4924      	ldr	r1, [pc, #144]	@ (8002830 <SystemInit+0xd8>)
 80027a0:	4b24      	ldr	r3, [pc, #144]	@ (8002834 <SystemInit+0xdc>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027a6:	4b21      	ldr	r3, [pc, #132]	@ (800282c <SystemInit+0xd4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d007      	beq.n	80027c2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027b2:	4b1e      	ldr	r3, [pc, #120]	@ (800282c <SystemInit+0xd4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 030f 	bic.w	r3, r3, #15
 80027ba:	4a1c      	ldr	r2, [pc, #112]	@ (800282c <SystemInit+0xd4>)
 80027bc:	f043 0307 	orr.w	r3, r3, #7
 80027c0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80027c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002830 <SystemInit+0xd8>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80027c8:	4b19      	ldr	r3, [pc, #100]	@ (8002830 <SystemInit+0xd8>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80027ce:	4b18      	ldr	r3, [pc, #96]	@ (8002830 <SystemInit+0xd8>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80027d4:	4b16      	ldr	r3, [pc, #88]	@ (8002830 <SystemInit+0xd8>)
 80027d6:	4a18      	ldr	r2, [pc, #96]	@ (8002838 <SystemInit+0xe0>)
 80027d8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80027da:	4b15      	ldr	r3, [pc, #84]	@ (8002830 <SystemInit+0xd8>)
 80027dc:	4a17      	ldr	r2, [pc, #92]	@ (800283c <SystemInit+0xe4>)
 80027de:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80027e0:	4b13      	ldr	r3, [pc, #76]	@ (8002830 <SystemInit+0xd8>)
 80027e2:	4a17      	ldr	r2, [pc, #92]	@ (8002840 <SystemInit+0xe8>)
 80027e4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80027e6:	4b12      	ldr	r3, [pc, #72]	@ (8002830 <SystemInit+0xd8>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80027ec:	4b10      	ldr	r3, [pc, #64]	@ (8002830 <SystemInit+0xd8>)
 80027ee:	4a14      	ldr	r2, [pc, #80]	@ (8002840 <SystemInit+0xe8>)
 80027f0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80027f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002830 <SystemInit+0xd8>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80027f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002830 <SystemInit+0xd8>)
 80027fa:	4a11      	ldr	r2, [pc, #68]	@ (8002840 <SystemInit+0xe8>)
 80027fc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80027fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002830 <SystemInit+0xd8>)
 8002800:	2200      	movs	r2, #0
 8002802:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002804:	4b0a      	ldr	r3, [pc, #40]	@ (8002830 <SystemInit+0xd8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a09      	ldr	r2, [pc, #36]	@ (8002830 <SystemInit+0xd8>)
 800280a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800280e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002810:	4b07      	ldr	r3, [pc, #28]	@ (8002830 <SystemInit+0xd8>)
 8002812:	2200      	movs	r2, #0
 8002814:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002816:	4b0b      	ldr	r3, [pc, #44]	@ (8002844 <SystemInit+0xec>)
 8002818:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800281c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800281e:	bf00      	nop
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	e000ed00 	.word	0xe000ed00
 800282c:	52002000 	.word	0x52002000
 8002830:	58024400 	.word	0x58024400
 8002834:	eaf6ed7f 	.word	0xeaf6ed7f
 8002838:	02020200 	.word	0x02020200
 800283c:	01ff0000 	.word	0x01ff0000
 8002840:	01010280 	.word	0x01010280
 8002844:	52004000 	.word	0x52004000

08002848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002848:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002880 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800284c:	f7ff ff84 	bl	8002758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002850:	480c      	ldr	r0, [pc, #48]	@ (8002884 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002852:	490d      	ldr	r1, [pc, #52]	@ (8002888 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002854:	4a0d      	ldr	r2, [pc, #52]	@ (800288c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002858:	e002      	b.n	8002860 <LoopCopyDataInit>

0800285a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800285a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800285c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800285e:	3304      	adds	r3, #4

08002860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002864:	d3f9      	bcc.n	800285a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002866:	4a0a      	ldr	r2, [pc, #40]	@ (8002890 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002868:	4c0a      	ldr	r4, [pc, #40]	@ (8002894 <LoopFillZerobss+0x22>)
  movs r3, #0
 800286a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800286c:	e001      	b.n	8002872 <LoopFillZerobss>

0800286e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800286e:	6013      	str	r3, [r2, #0]
   adds r2, r2, #4
 8002870:	3204      	adds	r2, #4

08002872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002874:	d3fb      	bcc.n	800286e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002876:	f008 fb33 	bl	800aee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800287a:	f7fe fcb7 	bl	80011ec <main>
  bx  lr
 800287e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002880:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002884:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002888:	24000068 	.word	0x24000068
  ldr r2, =_sidata
 800288c:	0800bc00 	.word	0x0800bc00
  ldr r2, =_sbss
 8002890:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 8002894:	24000db8 	.word	0x24000db8

08002898 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002898:	e7fe      	b.n	8002898 <ADC3_IRQHandler>
	...

0800289c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028a2:	2003      	movs	r0, #3
 80028a4:	f002 f8fa 	bl	8004a9c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80028a8:	f004 faaa 	bl	8006e00 <HAL_RCC_GetSysClockFreq>
 80028ac:	4602      	mov	r2, r0
 80028ae:	4b15      	ldr	r3, [pc, #84]	@ (8002904 <HAL_Init+0x68>)
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	0a1b      	lsrs	r3, r3, #8
 80028b4:	f003 030f 	and.w	r3, r3, #15
 80028b8:	4913      	ldr	r1, [pc, #76]	@ (8002908 <HAL_Init+0x6c>)
 80028ba:	5ccb      	ldrb	r3, [r1, r3]
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
 80028c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002904 <HAL_Init+0x68>)
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002908 <HAL_Init+0x6c>)
 80028d0:	5cd3      	ldrb	r3, [r2, r3]
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	fa22 f303 	lsr.w	r3, r2, r3
 80028dc:	4a0b      	ldr	r2, [pc, #44]	@ (800290c <HAL_Init+0x70>)
 80028de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002910 <HAL_Init+0x74>)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028e6:	200f      	movs	r0, #15
 80028e8:	f000 f814 	bl	8002914 <HAL_InitTick>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e002      	b.n	80028fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80028f6:	f7ff fced 	bl	80022d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	58024400 	.word	0x58024400
 8002908:	0800bb70 	.word	0x0800bb70
 800290c:	2400000c 	.word	0x2400000c
 8002910:	24000008 	.word	0x24000008

08002914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800291c:	4b15      	ldr	r3, [pc, #84]	@ (8002974 <HAL_InitTick+0x60>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e021      	b.n	800296c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002928:	4b13      	ldr	r3, [pc, #76]	@ (8002978 <HAL_InitTick+0x64>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	4b11      	ldr	r3, [pc, #68]	@ (8002974 <HAL_InitTick+0x60>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	4619      	mov	r1, r3
 8002932:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002936:	fbb3 f3f1 	udiv	r3, r3, r1
 800293a:	fbb2 f3f3 	udiv	r3, r2, r3
 800293e:	4618      	mov	r0, r3
 8002940:	f002 f8df 	bl	8004b02 <HAL_SYSTICK_Config>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e00e      	b.n	800296c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b0f      	cmp	r3, #15
 8002952:	d80a      	bhi.n	800296a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002954:	2200      	movs	r2, #0
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	f04f 30ff 	mov.w	r0, #4294967295
 800295c:	f002 f8a9 	bl	8004ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002960:	4a06      	ldr	r2, [pc, #24]	@ (800297c <HAL_InitTick+0x68>)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002966:	2300      	movs	r3, #0
 8002968:	e000      	b.n	800296c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
}
 800296c:	4618      	mov	r0, r3
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	24000014 	.word	0x24000014
 8002978:	24000008 	.word	0x24000008
 800297c:	24000010 	.word	0x24000010

08002980 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002984:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <HAL_IncTick+0x20>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	461a      	mov	r2, r3
 800298a:	4b06      	ldr	r3, [pc, #24]	@ (80029a4 <HAL_IncTick+0x24>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4413      	add	r3, r2
 8002990:	4a04      	ldr	r2, [pc, #16]	@ (80029a4 <HAL_IncTick+0x24>)
 8002992:	6013      	str	r3, [r2, #0]
}
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	24000014 	.word	0x24000014
 80029a4:	24000c6c 	.word	0x24000c6c

080029a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return uwTick;
 80029ac:	4b03      	ldr	r3, [pc, #12]	@ (80029bc <HAL_GetTick+0x14>)
 80029ae:	681b      	ldr	r3, [r3, #0]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	24000c6c 	.word	0x24000c6c

080029c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	609a      	str	r2, [r3, #8]
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	609a      	str	r2, [r3, #8]
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a18      	ldr	r2, [pc, #96]	@ (8002a98 <LL_ADC_SetChannelPreselection+0x70>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d027      	beq.n	8002a8a <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d107      	bne.n	8002a54 <LL_ADC_SetChannelPreselection+0x2c>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	0e9b      	lsrs	r3, r3, #26
 8002a48:	f003 031f 	and.w	r3, r3, #31
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	e015      	b.n	8002a80 <LL_ADC_SetChannelPreselection+0x58>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8002a6a:	2320      	movs	r3, #32
 8002a6c:	e003      	b.n	8002a76 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f003 031f 	and.w	r3, r3, #31
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	69d2      	ldr	r2, [r2, #28]
 8002a84:	431a      	orrs	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8002a8a:	bf00      	nop
 8002a8c:	371c      	adds	r7, #28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	58026000 	.word	0x58026000

08002a9c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	3360      	adds	r3, #96	@ 0x60
 8002aae:	461a      	mov	r2, r3
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4a10      	ldr	r2, [pc, #64]	@ (8002afc <LL_ADC_SetOffset+0x60>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d10b      	bne.n	8002ad8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002ad6:	e00b      	b.n	8002af0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	430b      	orrs	r3, r1
 8002aea:	431a      	orrs	r2, r3
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	601a      	str	r2, [r3, #0]
}
 8002af0:	bf00      	nop
 8002af2:	371c      	adds	r7, #28
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	58026000 	.word	0x58026000

08002b00 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	3360      	adds	r3, #96	@ 0x60
 8002b0e:	461a      	mov	r2, r3
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f003 031f 	and.w	r3, r3, #31
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	611a      	str	r2, [r3, #16]
}
 8002b52:	bf00      	nop
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
	...

08002b60 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ba0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d00e      	beq.n	8002b92 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	3360      	adds	r3, #96	@ 0x60
 8002b78:	461a      	mov	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	601a      	str	r2, [r3, #0]
  }
}
 8002b92:	bf00      	nop
 8002b94:	371c      	adds	r7, #28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	58026000 	.word	0x58026000

08002ba4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4a0c      	ldr	r2, [pc, #48]	@ (8002be4 <LL_ADC_SetOffsetSaturation+0x40>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d10e      	bne.n	8002bd6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	3360      	adds	r3, #96	@ 0x60
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002bd6:	bf00      	nop
 8002bd8:	371c      	adds	r7, #28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	58026000 	.word	0x58026000

08002be8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4a0c      	ldr	r2, [pc, #48]	@ (8002c28 <LL_ADC_SetOffsetSign+0x40>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d10e      	bne.n	8002c1a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	3360      	adds	r3, #96	@ 0x60
 8002c00:	461a      	mov	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	431a      	orrs	r2, r3
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002c1a:	bf00      	nop
 8002c1c:	371c      	adds	r7, #28
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	58026000 	.word	0x58026000

08002c2c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	3360      	adds	r3, #96	@ 0x60
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	4a0c      	ldr	r2, [pc, #48]	@ (8002c7c <LL_ADC_SetOffsetState+0x50>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d108      	bne.n	8002c60 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002c5e:	e007      	b.n	8002c70 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	601a      	str	r2, [r3, #0]
}
 8002c70:	bf00      	nop
 8002c72:	371c      	adds	r7, #28
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	58026000 	.word	0x58026000

08002c80 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b087      	sub	sp, #28
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	3330      	adds	r3, #48	@ 0x30
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	0a1b      	lsrs	r3, r3, #8
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	4413      	add	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	f003 031f 	and.w	r3, r3, #31
 8002cd0:	211f      	movs	r1, #31
 8002cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	401a      	ands	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	0e9b      	lsrs	r3, r3, #26
 8002cde:	f003 011f 	and.w	r1, r3, #31
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	f003 031f 	and.w	r3, r3, #31
 8002ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cec:	431a      	orrs	r2, r3
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002cf2:	bf00      	nop
 8002cf4:	371c      	adds	r7, #28
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b087      	sub	sp, #28
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	3314      	adds	r3, #20
 8002d0e:	461a      	mov	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	0e5b      	lsrs	r3, r3, #25
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	4413      	add	r3, r2
 8002d1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	0d1b      	lsrs	r3, r3, #20
 8002d26:	f003 031f 	and.w	r3, r3, #31
 8002d2a:	2107      	movs	r1, #7
 8002d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	401a      	ands	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	0d1b      	lsrs	r3, r3, #20
 8002d38:	f003 031f 	and.w	r3, r3, #31
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d42:	431a      	orrs	r2, r3
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d48:	bf00      	nop
 8002d4a:	371c      	adds	r7, #28
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4a1a      	ldr	r2, [pc, #104]	@ (8002dcc <LL_ADC_SetChannelSingleDiff+0x78>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d115      	bne.n	8002d94 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d74:	43db      	mvns	r3, r3
 8002d76:	401a      	ands	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f003 0318 	and.w	r3, r3, #24
 8002d7e:	4914      	ldr	r1, [pc, #80]	@ (8002dd0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002d80:	40d9      	lsrs	r1, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	400b      	ands	r3, r1
 8002d86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002d92:	e014      	b.n	8002dbe <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002da0:	43db      	mvns	r3, r3
 8002da2:	401a      	ands	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f003 0318 	and.w	r3, r3, #24
 8002daa:	4909      	ldr	r1, [pc, #36]	@ (8002dd0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002dac:	40d9      	lsrs	r1, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	400b      	ands	r3, r1
 8002db2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002db6:	431a      	orrs	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002dbe:	bf00      	nop
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	58026000 	.word	0x58026000
 8002dd0:	000fffff 	.word	0x000fffff

08002dd4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 031f 	and.w	r3, r3, #31
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	4b04      	ldr	r3, [pc, #16]	@ (8002e2c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6093      	str	r3, [r2, #8]
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	5fffffc0 	.word	0x5fffffc0

08002e30 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e44:	d101      	bne.n	8002e4a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	4b05      	ldr	r3, [pc, #20]	@ (8002e7c <LL_ADC_EnableInternalRegulator+0x24>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	6fffffc0 	.word	0x6fffffc0

08002e80 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e94:	d101      	bne.n	8002e9a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ecc <LL_ADC_Enable+0x24>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	f043 0201 	orr.w	r2, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	7fffffc0 	.word	0x7fffffc0

08002ed0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	4b05      	ldr	r3, [pc, #20]	@ (8002ef4 <LL_ADC_Disable+0x24>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	f043 0202 	orr.w	r2, r3, #2
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	7fffffc0 	.word	0x7fffffc0

08002ef8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <LL_ADC_IsEnabled+0x18>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e000      	b.n	8002f12 <LL_ADC_IsEnabled+0x1a>
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d101      	bne.n	8002f36 <LL_ADC_IsDisableOngoing+0x18>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <LL_ADC_IsDisableOngoing+0x1a>
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	4b05      	ldr	r3, [pc, #20]	@ (8002f68 <LL_ADC_REG_StartConversion+0x24>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	f043 0204 	orr.w	r2, r3, #4
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	7fffffc0 	.word	0x7fffffc0

08002f6c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	4b05      	ldr	r3, [pc, #20]	@ (8002f90 <LL_ADC_REG_StopConversion+0x24>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	f043 0210 	orr.w	r2, r3, #16
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	7fffffc0 	.word	0x7fffffc0

08002f94 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d101      	bne.n	8002fac <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e000      	b.n	8002fae <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
	...

08002fbc <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	4b05      	ldr	r3, [pc, #20]	@ (8002fe0 <LL_ADC_INJ_StopConversion+0x24>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	f043 0220 	orr.w	r2, r3, #32
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	7fffffc0 	.word	0x7fffffc0

08002fe4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0308 	and.w	r3, r3, #8
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d101      	bne.n	8002ffc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e000      	b.n	8002ffe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
	...

0800300c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800300c:	b590      	push	{r4, r7, lr}
 800300e:	b089      	sub	sp, #36	@ 0x24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003018:	2300      	movs	r3, #0
 800301a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e1ee      	b.n	8003404 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003030:	2b00      	cmp	r3, #0
 8003032:	d109      	bne.n	8003048 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff f967 	bl	8002308 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff feef 	bl	8002e30 <LL_ADC_IsDeepPowerDownEnabled>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d004      	beq.n	8003062 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff fed5 	bl	8002e0c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff ff0a 	bl	8002e80 <LL_ADC_IsInternalRegulatorEnabled>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d114      	bne.n	800309c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff feee 	bl	8002e58 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800307c:	4b8e      	ldr	r3, [pc, #568]	@ (80032b8 <HAL_ADC_Init+0x2ac>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	099b      	lsrs	r3, r3, #6
 8003082:	4a8e      	ldr	r2, [pc, #568]	@ (80032bc <HAL_ADC_Init+0x2b0>)
 8003084:	fba2 2303 	umull	r2, r3, r2, r3
 8003088:	099b      	lsrs	r3, r3, #6
 800308a:	3301      	adds	r3, #1
 800308c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800308e:	e002      	b.n	8003096 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	3b01      	subs	r3, #1
 8003094:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1f9      	bne.n	8003090 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff feed 	bl	8002e80 <LL_ADC_IsInternalRegulatorEnabled>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10d      	bne.n	80030c8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030b0:	f043 0210 	orr.w	r2, r3, #16
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030bc:	f043 0201 	orr.w	r2, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff ff61 	bl	8002f94 <LL_ADC_REG_IsConversionOngoing>
 80030d2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f040 8188 	bne.w	80033f2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f040 8184 	bne.w	80033f2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ee:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80030f2:	f043 0202 	orr.w	r2, r3, #2
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fefa 	bl	8002ef8 <LL_ADC_IsEnabled>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d136      	bne.n	8003178 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a6c      	ldr	r2, [pc, #432]	@ (80032c0 <HAL_ADC_Init+0x2b4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d004      	beq.n	800311e <HAL_ADC_Init+0x112>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a6a      	ldr	r2, [pc, #424]	@ (80032c4 <HAL_ADC_Init+0x2b8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d10e      	bne.n	800313c <HAL_ADC_Init+0x130>
 800311e:	4868      	ldr	r0, [pc, #416]	@ (80032c0 <HAL_ADC_Init+0x2b4>)
 8003120:	f7ff feea 	bl	8002ef8 <LL_ADC_IsEnabled>
 8003124:	4604      	mov	r4, r0
 8003126:	4867      	ldr	r0, [pc, #412]	@ (80032c4 <HAL_ADC_Init+0x2b8>)
 8003128:	f7ff fee6 	bl	8002ef8 <LL_ADC_IsEnabled>
 800312c:	4603      	mov	r3, r0
 800312e:	4323      	orrs	r3, r4
 8003130:	2b00      	cmp	r3, #0
 8003132:	bf0c      	ite	eq
 8003134:	2301      	moveq	r3, #1
 8003136:	2300      	movne	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	e008      	b.n	800314e <HAL_ADC_Init+0x142>
 800313c:	4862      	ldr	r0, [pc, #392]	@ (80032c8 <HAL_ADC_Init+0x2bc>)
 800313e:	f7ff fedb 	bl	8002ef8 <LL_ADC_IsEnabled>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	bf0c      	ite	eq
 8003148:	2301      	moveq	r3, #1
 800314a:	2300      	movne	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d012      	beq.n	8003178 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a5a      	ldr	r2, [pc, #360]	@ (80032c0 <HAL_ADC_Init+0x2b4>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d004      	beq.n	8003166 <HAL_ADC_Init+0x15a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a58      	ldr	r2, [pc, #352]	@ (80032c4 <HAL_ADC_Init+0x2b8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d101      	bne.n	800316a <HAL_ADC_Init+0x15e>
 8003166:	4a59      	ldr	r2, [pc, #356]	@ (80032cc <HAL_ADC_Init+0x2c0>)
 8003168:	e000      	b.n	800316c <HAL_ADC_Init+0x160>
 800316a:	4a59      	ldr	r2, [pc, #356]	@ (80032d0 <HAL_ADC_Init+0x2c4>)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	4619      	mov	r1, r3
 8003172:	4610      	mov	r0, r2
 8003174:	f7ff fc24 	bl	80029c0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a52      	ldr	r2, [pc, #328]	@ (80032c8 <HAL_ADC_Init+0x2bc>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d129      	bne.n	80031d6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	7e5b      	ldrb	r3, [r3, #25]
 8003186:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800318c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003192:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b08      	cmp	r3, #8
 800319a:	d013      	beq.n	80031c4 <HAL_ADC_Init+0x1b8>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2b0c      	cmp	r3, #12
 80031a2:	d00d      	beq.n	80031c0 <HAL_ADC_Init+0x1b4>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b1c      	cmp	r3, #28
 80031aa:	d007      	beq.n	80031bc <HAL_ADC_Init+0x1b0>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2b18      	cmp	r3, #24
 80031b2:	d101      	bne.n	80031b8 <HAL_ADC_Init+0x1ac>
 80031b4:	2318      	movs	r3, #24
 80031b6:	e006      	b.n	80031c6 <HAL_ADC_Init+0x1ba>
 80031b8:	2300      	movs	r3, #0
 80031ba:	e004      	b.n	80031c6 <HAL_ADC_Init+0x1ba>
 80031bc:	2310      	movs	r3, #16
 80031be:	e002      	b.n	80031c6 <HAL_ADC_Init+0x1ba>
 80031c0:	2308      	movs	r3, #8
 80031c2:	e000      	b.n	80031c6 <HAL_ADC_Init+0x1ba>
 80031c4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80031c6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031ce:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
 80031d4:	e00e      	b.n	80031f4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	7e5b      	ldrb	r3, [r3, #25]
 80031da:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031e0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80031e6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031ee:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031f0:	4313      	orrs	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d106      	bne.n	800320c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003202:	3b01      	subs	r3, #1
 8003204:	045b      	lsls	r3, r3, #17
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4313      	orrs	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003210:	2b00      	cmp	r3, #0
 8003212:	d009      	beq.n	8003228 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003218:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003220:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4313      	orrs	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a26      	ldr	r2, [pc, #152]	@ (80032c8 <HAL_ADC_Init+0x2bc>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d115      	bne.n	800325e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	4b26      	ldr	r3, [pc, #152]	@ (80032d4 <HAL_ADC_Init+0x2c8>)
 800323a:	4013      	ands	r3, r2
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	69b9      	ldr	r1, [r7, #24]
 8003242:	430b      	orrs	r3, r1
 8003244:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	611a      	str	r2, [r3, #16]
 800325c:	e009      	b.n	8003272 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	4b1c      	ldr	r3, [pc, #112]	@ (80032d8 <HAL_ADC_Init+0x2cc>)
 8003266:	4013      	ands	r3, r2
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	69b9      	ldr	r1, [r7, #24]
 800326e:	430b      	orrs	r3, r1
 8003270:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff fe8c 	bl	8002f94 <LL_ADC_REG_IsConversionOngoing>
 800327c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff feae 	bl	8002fe4 <LL_ADC_INJ_IsConversionOngoing>
 8003288:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	2b00      	cmp	r3, #0
 800328e:	f040 808e 	bne.w	80033ae <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2b00      	cmp	r3, #0
 8003296:	f040 808a 	bne.w	80033ae <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a0a      	ldr	r2, [pc, #40]	@ (80032c8 <HAL_ADC_Init+0x2bc>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d11b      	bne.n	80032dc <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	7e1b      	ldrb	r3, [r3, #24]
 80032a8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80032b0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
 80032b6:	e018      	b.n	80032ea <HAL_ADC_Init+0x2de>
 80032b8:	24000008 	.word	0x24000008
 80032bc:	053e2d63 	.word	0x053e2d63
 80032c0:	40022000 	.word	0x40022000
 80032c4:	40022100 	.word	0x40022100
 80032c8:	58026000 	.word	0x58026000
 80032cc:	40022300 	.word	0x40022300
 80032d0:	58026300 	.word	0x58026300
 80032d4:	fff04007 	.word	0xfff04007
 80032d8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	7e1b      	ldrb	r3, [r3, #24]
 80032e0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	4b46      	ldr	r3, [pc, #280]	@ (800340c <HAL_ADC_Init+0x400>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	69b9      	ldr	r1, [r7, #24]
 80032fa:	430b      	orrs	r3, r1
 80032fc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003304:	2b01      	cmp	r3, #1
 8003306:	d137      	bne.n	8003378 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a3f      	ldr	r2, [pc, #252]	@ (8003410 <HAL_ADC_Init+0x404>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d116      	bne.n	8003346 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691a      	ldr	r2, [r3, #16]
 800331e:	4b3d      	ldr	r3, [pc, #244]	@ (8003414 <HAL_ADC_Init+0x408>)
 8003320:	4013      	ands	r3, r2
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800332a:	4311      	orrs	r1, r2
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003330:	4311      	orrs	r1, r2
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003336:	430a      	orrs	r2, r1
 8003338:	431a      	orrs	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	611a      	str	r2, [r3, #16]
 8003344:	e020      	b.n	8003388 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	4b32      	ldr	r3, [pc, #200]	@ (8003418 <HAL_ADC_Init+0x40c>)
 800334e:	4013      	ands	r3, r2
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003354:	3a01      	subs	r2, #1
 8003356:	0411      	lsls	r1, r2, #16
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800335c:	4311      	orrs	r1, r2
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003362:	4311      	orrs	r1, r2
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003368:	430a      	orrs	r2, r1
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 0201 	orr.w	r2, r2, #1
 8003374:	611a      	str	r2, [r3, #16]
 8003376:	e007      	b.n	8003388 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691a      	ldr	r2, [r3, #16]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0201 	bic.w	r2, r2, #1
 8003386:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003410 <HAL_ADC_Init+0x404>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d002      	beq.n	80033ae <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f001 f8b1 	bl	8004510 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d10c      	bne.n	80033d0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033bc:	f023 010f 	bic.w	r1, r3, #15
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	1e5a      	subs	r2, r3, #1
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80033ce:	e007      	b.n	80033e0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 020f 	bic.w	r2, r2, #15
 80033de:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e4:	f023 0303 	bic.w	r3, r3, #3
 80033e8:	f043 0201 	orr.w	r2, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	661a      	str	r2, [r3, #96]	@ 0x60
 80033f0:	e007      	b.n	8003402 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033f6:	f043 0210 	orr.w	r2, r3, #16
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003402:	7ffb      	ldrb	r3, [r7, #31]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3724      	adds	r7, #36	@ 0x24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd90      	pop	{r4, r7, pc}
 800340c:	ffffbffc 	.word	0xffffbffc
 8003410:	58026000 	.word	0x58026000
 8003414:	fc00f81f 	.word	0xfc00f81f
 8003418:	fc00f81e 	.word	0xfc00f81e

0800341c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a5c      	ldr	r2, [pc, #368]	@ (800359c <HAL_ADC_Start+0x180>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d004      	beq.n	8003438 <HAL_ADC_Start+0x1c>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a5b      	ldr	r2, [pc, #364]	@ (80035a0 <HAL_ADC_Start+0x184>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d101      	bne.n	800343c <HAL_ADC_Start+0x20>
 8003438:	4b5a      	ldr	r3, [pc, #360]	@ (80035a4 <HAL_ADC_Start+0x188>)
 800343a:	e000      	b.n	800343e <HAL_ADC_Start+0x22>
 800343c:	4b5a      	ldr	r3, [pc, #360]	@ (80035a8 <HAL_ADC_Start+0x18c>)
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff fcc8 	bl	8002dd4 <LL_ADC_GetMultimode>
 8003444:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff fda2 	bl	8002f94 <LL_ADC_REG_IsConversionOngoing>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	f040 809a 	bne.w	800358c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800345e:	2b01      	cmp	r3, #1
 8003460:	d101      	bne.n	8003466 <HAL_ADC_Start+0x4a>
 8003462:	2302      	movs	r3, #2
 8003464:	e095      	b.n	8003592 <HAL_ADC_Start+0x176>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 ff64 	bl	800433c <ADC_Enable>
 8003474:	4603      	mov	r3, r0
 8003476:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003478:	7dfb      	ldrb	r3, [r7, #23]
 800347a:	2b00      	cmp	r3, #0
 800347c:	f040 8081 	bne.w	8003582 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003484:	4b49      	ldr	r3, [pc, #292]	@ (80035ac <HAL_ADC_Start+0x190>)
 8003486:	4013      	ands	r3, r2
 8003488:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a42      	ldr	r2, [pc, #264]	@ (80035a0 <HAL_ADC_Start+0x184>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d002      	beq.n	80034a0 <HAL_ADC_Start+0x84>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	e000      	b.n	80034a2 <HAL_ADC_Start+0x86>
 80034a0:	4b3e      	ldr	r3, [pc, #248]	@ (800359c <HAL_ADC_Start+0x180>)
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6812      	ldr	r2, [r2, #0]
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d002      	beq.n	80034b0 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d105      	bne.n	80034bc <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034c8:	d106      	bne.n	80034d8 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034ce:	f023 0206 	bic.w	r2, r3, #6
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	665a      	str	r2, [r3, #100]	@ 0x64
 80034d6:	e002      	b.n	80034de <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	221c      	movs	r2, #28
 80034e4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a2b      	ldr	r2, [pc, #172]	@ (80035a0 <HAL_ADC_Start+0x184>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d002      	beq.n	80034fe <HAL_ADC_Start+0xe2>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	e000      	b.n	8003500 <HAL_ADC_Start+0xe4>
 80034fe:	4b27      	ldr	r3, [pc, #156]	@ (800359c <HAL_ADC_Start+0x180>)
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6812      	ldr	r2, [r2, #0]
 8003504:	4293      	cmp	r3, r2
 8003506:	d008      	beq.n	800351a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d005      	beq.n	800351a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	2b05      	cmp	r3, #5
 8003512:	d002      	beq.n	800351a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	2b09      	cmp	r3, #9
 8003518:	d114      	bne.n	8003544 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d007      	beq.n	8003538 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800352c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003530:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff fd01 	bl	8002f44 <LL_ADC_REG_StartConversion>
 8003542:	e025      	b.n	8003590 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003548:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a12      	ldr	r2, [pc, #72]	@ (80035a0 <HAL_ADC_Start+0x184>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d002      	beq.n	8003560 <HAL_ADC_Start+0x144>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	e000      	b.n	8003562 <HAL_ADC_Start+0x146>
 8003560:	4b0e      	ldr	r3, [pc, #56]	@ (800359c <HAL_ADC_Start+0x180>)
 8003562:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00f      	beq.n	8003590 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003574:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003578:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	661a      	str	r2, [r3, #96]	@ 0x60
 8003580:	e006      	b.n	8003590 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800358a:	e001      	b.n	8003590 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800358c:	2302      	movs	r3, #2
 800358e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003590:	7dfb      	ldrb	r3, [r7, #23]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40022000 	.word	0x40022000
 80035a0:	40022100 	.word	0x40022100
 80035a4:	40022300 	.word	0x40022300
 80035a8:	58026300 	.word	0x58026300
 80035ac:	fffff0fe 	.word	0xfffff0fe

080035b0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d101      	bne.n	80035c6 <HAL_ADC_Stop+0x16>
 80035c2:	2302      	movs	r3, #2
 80035c4:	e021      	b.n	800360a <HAL_ADC_Stop+0x5a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80035ce:	2103      	movs	r1, #3
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 fdf7 	bl	80041c4 <ADC_ConversionStop>
 80035d6:	4603      	mov	r3, r0
 80035d8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80035da:	7bfb      	ldrb	r3, [r7, #15]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10f      	bne.n	8003600 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 ff35 	bl	8004450 <ADC_Disable>
 80035e6:	4603      	mov	r3, r0
 80035e8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d107      	bne.n	8003600 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80035f4:	4b07      	ldr	r3, [pc, #28]	@ (8003614 <HAL_ADC_Stop+0x64>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	f043 0201 	orr.w	r2, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003608:	7bfb      	ldrb	r3, [r7, #15]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	ffffeefe 	.word	0xffffeefe

08003618 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b088      	sub	sp, #32
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a72      	ldr	r2, [pc, #456]	@ (80037f0 <HAL_ADC_PollForConversion+0x1d8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d004      	beq.n	8003636 <HAL_ADC_PollForConversion+0x1e>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a70      	ldr	r2, [pc, #448]	@ (80037f4 <HAL_ADC_PollForConversion+0x1dc>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d101      	bne.n	800363a <HAL_ADC_PollForConversion+0x22>
 8003636:	4b70      	ldr	r3, [pc, #448]	@ (80037f8 <HAL_ADC_PollForConversion+0x1e0>)
 8003638:	e000      	b.n	800363c <HAL_ADC_PollForConversion+0x24>
 800363a:	4b70      	ldr	r3, [pc, #448]	@ (80037fc <HAL_ADC_PollForConversion+0x1e4>)
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff fbc9 	bl	8002dd4 <LL_ADC_GetMultimode>
 8003642:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	2b08      	cmp	r3, #8
 800364a:	d102      	bne.n	8003652 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800364c:	2308      	movs	r3, #8
 800364e:	61fb      	str	r3, [r7, #28]
 8003650:	e037      	b.n	80036c2 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	2b05      	cmp	r3, #5
 800365c:	d002      	beq.n	8003664 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2b09      	cmp	r3, #9
 8003662:	d111      	bne.n	8003688 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d007      	beq.n	8003682 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003676:	f043 0220 	orr.w	r2, r3, #32
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e0b1      	b.n	80037e6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003682:	2304      	movs	r3, #4
 8003684:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003686:	e01c      	b.n	80036c2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a58      	ldr	r2, [pc, #352]	@ (80037f0 <HAL_ADC_PollForConversion+0x1d8>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d004      	beq.n	800369c <HAL_ADC_PollForConversion+0x84>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a57      	ldr	r2, [pc, #348]	@ (80037f4 <HAL_ADC_PollForConversion+0x1dc>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d101      	bne.n	80036a0 <HAL_ADC_PollForConversion+0x88>
 800369c:	4b56      	ldr	r3, [pc, #344]	@ (80037f8 <HAL_ADC_PollForConversion+0x1e0>)
 800369e:	e000      	b.n	80036a2 <HAL_ADC_PollForConversion+0x8a>
 80036a0:	4b56      	ldr	r3, [pc, #344]	@ (80037fc <HAL_ADC_PollForConversion+0x1e4>)
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff fba4 	bl	8002df0 <LL_ADC_GetMultiDMATransfer>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d007      	beq.n	80036be <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b2:	f043 0220 	orr.w	r2, r3, #32
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e093      	b.n	80037e6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80036be:	2304      	movs	r3, #4
 80036c0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80036c2:	f7ff f971 	bl	80029a8 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80036c8:	e021      	b.n	800370e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d0:	d01d      	beq.n	800370e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80036d2:	f7ff f969 	bl	80029a8 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d302      	bcc.n	80036e8 <HAL_ADC_PollForConversion+0xd0>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d112      	bne.n	800370e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10b      	bne.n	800370e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036fa:	f043 0204 	orr.w	r2, r3, #4
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e06b      	b.n	80037e6 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	4013      	ands	r3, r2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0d6      	beq.n	80036ca <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003720:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff faa7 	bl	8002c80 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d01c      	beq.n	8003772 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	7e5b      	ldrb	r3, [r3, #25]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d118      	bne.n	8003772 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b08      	cmp	r3, #8
 800374c:	d111      	bne.n	8003772 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003752:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800375e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d105      	bne.n	8003772 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800376a:	f043 0201 	orr.w	r2, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a1f      	ldr	r2, [pc, #124]	@ (80037f4 <HAL_ADC_PollForConversion+0x1dc>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d002      	beq.n	8003782 <HAL_ADC_PollForConversion+0x16a>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	e000      	b.n	8003784 <HAL_ADC_PollForConversion+0x16c>
 8003782:	4b1b      	ldr	r3, [pc, #108]	@ (80037f0 <HAL_ADC_PollForConversion+0x1d8>)
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	4293      	cmp	r3, r2
 800378a:	d008      	beq.n	800379e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d005      	beq.n	800379e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	2b05      	cmp	r3, #5
 8003796:	d002      	beq.n	800379e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	2b09      	cmp	r3, #9
 800379c:	d104      	bne.n	80037a8 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	61bb      	str	r3, [r7, #24]
 80037a6:	e00c      	b.n	80037c2 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a11      	ldr	r2, [pc, #68]	@ (80037f4 <HAL_ADC_PollForConversion+0x1dc>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d002      	beq.n	80037b8 <HAL_ADC_PollForConversion+0x1a0>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	e000      	b.n	80037ba <HAL_ADC_PollForConversion+0x1a2>
 80037b8:	4b0d      	ldr	r3, [pc, #52]	@ (80037f0 <HAL_ADC_PollForConversion+0x1d8>)
 80037ba:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d104      	bne.n	80037d2 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2208      	movs	r2, #8
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	e008      	b.n	80037e4 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d103      	bne.n	80037e4 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	220c      	movs	r2, #12
 80037e2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3720      	adds	r7, #32
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40022000 	.word	0x40022000
 80037f4:	40022100 	.word	0x40022100
 80037f8:	40022300 	.word	0x40022300
 80037fc:	58026300 	.word	0x58026300

08003800 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800380e:	4618      	mov	r0, r3
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
	...

0800381c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800381c:	b590      	push	{r4, r7, lr}
 800381e:	b0a5      	sub	sp, #148	@ 0x94
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800382c:	2300      	movs	r3, #0
 800382e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003836:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	4aa4      	ldr	r2, [pc, #656]	@ (8003ad0 <HAL_ADC_ConfigChannel+0x2b4>)
 800383e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003846:	2b01      	cmp	r3, #1
 8003848:	d102      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x34>
 800384a:	2302      	movs	r3, #2
 800384c:	f000 bca2 	b.w	8004194 <HAL_ADC_ConfigChannel+0x978>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff fb99 	bl	8002f94 <LL_ADC_REG_IsConversionOngoing>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	f040 8486 	bne.w	8004176 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	db31      	blt.n	80038d6 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a97      	ldr	r2, [pc, #604]	@ (8003ad4 <HAL_ADC_ConfigChannel+0x2b8>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d02c      	beq.n	80038d6 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003884:	2b00      	cmp	r3, #0
 8003886:	d108      	bne.n	800389a <HAL_ADC_ConfigChannel+0x7e>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	0e9b      	lsrs	r3, r3, #26
 800388e:	f003 031f 	and.w	r3, r3, #31
 8003892:	2201      	movs	r2, #1
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	e016      	b.n	80038c8 <HAL_ADC_ConfigChannel+0xac>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038a2:	fa93 f3a3 	rbit	r3, r3
 80038a6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80038a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038aa:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80038ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 80038b2:	2320      	movs	r3, #32
 80038b4:	e003      	b.n	80038be <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 80038b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038b8:	fab3 f383 	clz	r3, r3
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	f003 031f 	and.w	r3, r3, #31
 80038c2:	2201      	movs	r2, #1
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6812      	ldr	r2, [r2, #0]
 80038cc:	69d1      	ldr	r1, [r2, #28]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6812      	ldr	r2, [r2, #0]
 80038d2:	430b      	orrs	r3, r1
 80038d4:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	6859      	ldr	r1, [r3, #4]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	f7ff f9df 	bl	8002ca6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fb51 	bl	8002f94 <LL_ADC_REG_IsConversionOngoing>
 80038f2:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff fb72 	bl	8002fe4 <LL_ADC_INJ_IsConversionOngoing>
 8003900:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003904:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003908:	2b00      	cmp	r3, #0
 800390a:	f040 824a 	bne.w	8003da2 <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800390e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003912:	2b00      	cmp	r3, #0
 8003914:	f040 8245 	bne.w	8003da2 <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6818      	ldr	r0, [r3, #0]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	6819      	ldr	r1, [r3, #0]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	461a      	mov	r2, r3
 8003926:	f7ff f9ea 	bl	8002cfe <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a69      	ldr	r2, [pc, #420]	@ (8003ad4 <HAL_ADC_ConfigChannel+0x2b8>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d10d      	bne.n	8003950 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	695a      	ldr	r2, [r3, #20]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	08db      	lsrs	r3, r3, #3
 8003940:	f003 0303 	and.w	r3, r3, #3
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800394e:	e032      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003950:	4b61      	ldr	r3, [pc, #388]	@ (8003ad8 <HAL_ADC_ConfigChannel+0x2bc>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003958:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800395c:	d10b      	bne.n	8003976 <HAL_ADC_ConfigChannel+0x15a>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	089b      	lsrs	r3, r3, #2
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	e01d      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x196>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f003 0310 	and.w	r3, r3, #16
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10b      	bne.n	800399c <HAL_ADC_ConfigChannel+0x180>
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	695a      	ldr	r2, [r3, #20]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	089b      	lsrs	r3, r3, #2
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	e00a      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x196>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	695a      	ldr	r2, [r3, #20]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	089b      	lsrs	r3, r3, #2
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d048      	beq.n	8003a50 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	6919      	ldr	r1, [r3, #16]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039ce:	f7ff f865 	bl	8002a9c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a3f      	ldr	r2, [pc, #252]	@ (8003ad4 <HAL_ADC_ConfigChannel+0x2b8>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d119      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6818      	ldr	r0, [r3, #0]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	6919      	ldr	r1, [r3, #16]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	461a      	mov	r2, r3
 80039ea:	f7ff f8fd 	bl	8002be8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6818      	ldr	r0, [r3, #0]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	6919      	ldr	r1, [r3, #16]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d102      	bne.n	8003a06 <HAL_ADC_ConfigChannel+0x1ea>
 8003a00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a04:	e000      	b.n	8003a08 <HAL_ADC_ConfigChannel+0x1ec>
 8003a06:	2300      	movs	r3, #0
 8003a08:	461a      	mov	r2, r3
 8003a0a:	f7ff f8cb 	bl	8002ba4 <LL_ADC_SetOffsetSaturation>
 8003a0e:	e1c8      	b.n	8003da2 <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	6919      	ldr	r1, [r3, #16]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d102      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x20c>
 8003a22:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003a26:	e000      	b.n	8003a2a <HAL_ADC_ConfigChannel+0x20e>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	f7ff f898 	bl	8002b60 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6818      	ldr	r0, [r3, #0]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	6919      	ldr	r1, [r3, #16]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	7e1b      	ldrb	r3, [r3, #24]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d102      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x22a>
 8003a40:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003a44:	e000      	b.n	8003a48 <HAL_ADC_ConfigChannel+0x22c>
 8003a46:	2300      	movs	r3, #0
 8003a48:	461a      	mov	r2, r3
 8003a4a:	f7ff f86f 	bl	8002b2c <LL_ADC_SetDataRightShift>
 8003a4e:	e1a8      	b.n	8003da2 <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a1f      	ldr	r2, [pc, #124]	@ (8003ad4 <HAL_ADC_ConfigChannel+0x2b8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	f040 815b 	bne.w	8003d12 <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2100      	movs	r1, #0
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff f84c 	bl	8002b00 <LL_ADC_GetOffsetChannel>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10a      	bne.n	8003a88 <HAL_ADC_ConfigChannel+0x26c>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2100      	movs	r1, #0
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff f841 	bl	8002b00 <LL_ADC_GetOffsetChannel>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	0e9b      	lsrs	r3, r3, #26
 8003a82:	f003 021f 	and.w	r2, r3, #31
 8003a86:	e017      	b.n	8003ab8 <HAL_ADC_ConfigChannel+0x29c>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff f836 	bl	8002b00 <LL_ADC_GetOffsetChannel>
 8003a94:	4603      	mov	r3, r0
 8003a96:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a9a:	fa93 f3a3 	rbit	r3, r3
 8003a9e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003aa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003aa2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003aa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003aaa:	2320      	movs	r3, #32
 8003aac:	e003      	b.n	8003ab6 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8003aae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ab0:	fab3 f383 	clz	r3, r3
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10b      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x2c0>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	0e9b      	lsrs	r3, r3, #26
 8003aca:	f003 031f 	and.w	r3, r3, #31
 8003ace:	e017      	b.n	8003b00 <HAL_ADC_ConfigChannel+0x2e4>
 8003ad0:	47ff0000 	.word	0x47ff0000
 8003ad4:	58026000 	.word	0x58026000
 8003ad8:	5c001000 	.word	0x5c001000
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ae4:	fa93 f3a3 	rbit	r3, r3
 8003ae8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003aea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003aec:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003aee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8003af4:	2320      	movs	r3, #32
 8003af6:	e003      	b.n	8003b00 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8003af8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003afa:	fab3 f383 	clz	r3, r3
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d106      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff f88d 	bl	8002c2c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2101      	movs	r1, #1
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fe fff1 	bl	8002b00 <LL_ADC_GetOffsetChannel>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10a      	bne.n	8003b3e <HAL_ADC_ConfigChannel+0x322>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fe ffe6 	bl	8002b00 <LL_ADC_GetOffsetChannel>
 8003b34:	4603      	mov	r3, r0
 8003b36:	0e9b      	lsrs	r3, r3, #26
 8003b38:	f003 021f 	and.w	r2, r3, #31
 8003b3c:	e017      	b.n	8003b6e <HAL_ADC_ConfigChannel+0x352>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2101      	movs	r1, #1
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fe ffdb 	bl	8002b00 <LL_ADC_GetOffsetChannel>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b50:	fa93 f3a3 	rbit	r3, r3
 8003b54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003b56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b58:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003b5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8003b60:	2320      	movs	r3, #32
 8003b62:	e003      	b.n	8003b6c <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8003b64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b66:	fab3 f383 	clz	r3, r3
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d105      	bne.n	8003b86 <HAL_ADC_ConfigChannel+0x36a>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	0e9b      	lsrs	r3, r3, #26
 8003b80:	f003 031f 	and.w	r3, r3, #31
 8003b84:	e011      	b.n	8003baa <HAL_ADC_ConfigChannel+0x38e>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b8e:	fa93 f3a3 	rbit	r3, r3
 8003b92:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003b94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b96:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003b98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003b9e:	2320      	movs	r3, #32
 8003ba0:	e003      	b.n	8003baa <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003ba2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ba4:	fab3 f383 	clz	r3, r3
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d106      	bne.n	8003bbc <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff f838 	bl	8002c2c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2102      	movs	r1, #2
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe ff9c 	bl	8002b00 <LL_ADC_GetOffsetChannel>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10a      	bne.n	8003be8 <HAL_ADC_ConfigChannel+0x3cc>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2102      	movs	r1, #2
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fe ff91 	bl	8002b00 <LL_ADC_GetOffsetChannel>
 8003bde:	4603      	mov	r3, r0
 8003be0:	0e9b      	lsrs	r3, r3, #26
 8003be2:	f003 021f 	and.w	r2, r3, #31
 8003be6:	e017      	b.n	8003c18 <HAL_ADC_ConfigChannel+0x3fc>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2102      	movs	r1, #2
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fe ff86 	bl	8002b00 <LL_ADC_GetOffsetChannel>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bfa:	fa93 f3a3 	rbit	r3, r3
 8003bfe:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003c04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003c0a:	2320      	movs	r3, #32
 8003c0c:	e003      	b.n	8003c16 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c10:	fab3 f383 	clz	r3, r3
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	461a      	mov	r2, r3
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d105      	bne.n	8003c30 <HAL_ADC_ConfigChannel+0x414>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	0e9b      	lsrs	r3, r3, #26
 8003c2a:	f003 031f 	and.w	r3, r3, #31
 8003c2e:	e011      	b.n	8003c54 <HAL_ADC_ConfigChannel+0x438>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c38:	fa93 f3a3 	rbit	r3, r3
 8003c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c40:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003c48:	2320      	movs	r3, #32
 8003c4a:	e003      	b.n	8003c54 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4e:	fab3 f383 	clz	r3, r3
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d106      	bne.n	8003c66 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	2102      	movs	r1, #2
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fe ffe3 	bl	8002c2c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2103      	movs	r1, #3
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7fe ff47 	bl	8002b00 <LL_ADC_GetOffsetChannel>
 8003c72:	4603      	mov	r3, r0
 8003c74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10a      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x476>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2103      	movs	r1, #3
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fe ff3c 	bl	8002b00 <LL_ADC_GetOffsetChannel>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	0e9b      	lsrs	r3, r3, #26
 8003c8c:	f003 021f 	and.w	r2, r3, #31
 8003c90:	e017      	b.n	8003cc2 <HAL_ADC_ConfigChannel+0x4a6>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2103      	movs	r1, #3
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fe ff31 	bl	8002b00 <LL_ADC_GetOffsetChannel>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	fa93 f3a3 	rbit	r3, r3
 8003ca8:	61fb      	str	r3, [r7, #28]
  return result;
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003cb4:	2320      	movs	r3, #32
 8003cb6:	e003      	b.n	8003cc0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cba:	fab3 f383 	clz	r3, r3
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d105      	bne.n	8003cda <HAL_ADC_ConfigChannel+0x4be>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	0e9b      	lsrs	r3, r3, #26
 8003cd4:	f003 031f 	and.w	r3, r3, #31
 8003cd8:	e011      	b.n	8003cfe <HAL_ADC_ConfigChannel+0x4e2>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	fa93 f3a3 	rbit	r3, r3
 8003ce6:	613b      	str	r3, [r7, #16]
  return result;
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8003cf2:	2320      	movs	r3, #32
 8003cf4:	e003      	b.n	8003cfe <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	fab3 f383 	clz	r3, r3
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d14f      	bne.n	8003da2 <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2200      	movs	r2, #0
 8003d08:	2103      	movs	r1, #3
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fe ff8e 	bl	8002c2c <LL_ADC_SetOffsetState>
 8003d10:	e047      	b.n	8003da2 <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d18:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	069b      	lsls	r3, r3, #26
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d107      	bne.n	8003d36 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003d34:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d3c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	069b      	lsls	r3, r3, #26
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d107      	bne.n	8003d5a <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003d58:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d60:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	069b      	lsls	r3, r3, #26
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d107      	bne.n	8003d7e <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003d7c:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d84:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	069b      	lsls	r3, r3, #26
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d107      	bne.n	8003da2 <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003da0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff f8a6 	bl	8002ef8 <LL_ADC_IsEnabled>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f040 81ea 	bne.w	8004188 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6818      	ldr	r0, [r3, #0]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	6819      	ldr	r1, [r3, #0]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	f7fe ffc7 	bl	8002d54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	4a7a      	ldr	r2, [pc, #488]	@ (8003fb4 <HAL_ADC_ConfigChannel+0x798>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	f040 80e0 	bne.w	8003f92 <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4977      	ldr	r1, [pc, #476]	@ (8003fb8 <HAL_ADC_ConfigChannel+0x79c>)
 8003ddc:	428b      	cmp	r3, r1
 8003dde:	d147      	bne.n	8003e70 <HAL_ADC_ConfigChannel+0x654>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4975      	ldr	r1, [pc, #468]	@ (8003fbc <HAL_ADC_ConfigChannel+0x7a0>)
 8003de6:	428b      	cmp	r3, r1
 8003de8:	d040      	beq.n	8003e6c <HAL_ADC_ConfigChannel+0x650>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4974      	ldr	r1, [pc, #464]	@ (8003fc0 <HAL_ADC_ConfigChannel+0x7a4>)
 8003df0:	428b      	cmp	r3, r1
 8003df2:	d039      	beq.n	8003e68 <HAL_ADC_ConfigChannel+0x64c>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4972      	ldr	r1, [pc, #456]	@ (8003fc4 <HAL_ADC_ConfigChannel+0x7a8>)
 8003dfa:	428b      	cmp	r3, r1
 8003dfc:	d032      	beq.n	8003e64 <HAL_ADC_ConfigChannel+0x648>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4971      	ldr	r1, [pc, #452]	@ (8003fc8 <HAL_ADC_ConfigChannel+0x7ac>)
 8003e04:	428b      	cmp	r3, r1
 8003e06:	d02b      	beq.n	8003e60 <HAL_ADC_ConfigChannel+0x644>
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	496f      	ldr	r1, [pc, #444]	@ (8003fcc <HAL_ADC_ConfigChannel+0x7b0>)
 8003e0e:	428b      	cmp	r3, r1
 8003e10:	d024      	beq.n	8003e5c <HAL_ADC_ConfigChannel+0x640>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	496e      	ldr	r1, [pc, #440]	@ (8003fd0 <HAL_ADC_ConfigChannel+0x7b4>)
 8003e18:	428b      	cmp	r3, r1
 8003e1a:	d01d      	beq.n	8003e58 <HAL_ADC_ConfigChannel+0x63c>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	496c      	ldr	r1, [pc, #432]	@ (8003fd4 <HAL_ADC_ConfigChannel+0x7b8>)
 8003e22:	428b      	cmp	r3, r1
 8003e24:	d016      	beq.n	8003e54 <HAL_ADC_ConfigChannel+0x638>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	496b      	ldr	r1, [pc, #428]	@ (8003fd8 <HAL_ADC_ConfigChannel+0x7bc>)
 8003e2c:	428b      	cmp	r3, r1
 8003e2e:	d00f      	beq.n	8003e50 <HAL_ADC_ConfigChannel+0x634>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4969      	ldr	r1, [pc, #420]	@ (8003fdc <HAL_ADC_ConfigChannel+0x7c0>)
 8003e36:	428b      	cmp	r3, r1
 8003e38:	d008      	beq.n	8003e4c <HAL_ADC_ConfigChannel+0x630>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4968      	ldr	r1, [pc, #416]	@ (8003fe0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003e40:	428b      	cmp	r3, r1
 8003e42:	d101      	bne.n	8003e48 <HAL_ADC_ConfigChannel+0x62c>
 8003e44:	4b67      	ldr	r3, [pc, #412]	@ (8003fe4 <HAL_ADC_ConfigChannel+0x7c8>)
 8003e46:	e0a0      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	e09e      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003e4c:	4b66      	ldr	r3, [pc, #408]	@ (8003fe8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003e4e:	e09c      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003e50:	4b66      	ldr	r3, [pc, #408]	@ (8003fec <HAL_ADC_ConfigChannel+0x7d0>)
 8003e52:	e09a      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003e54:	4b60      	ldr	r3, [pc, #384]	@ (8003fd8 <HAL_ADC_ConfigChannel+0x7bc>)
 8003e56:	e098      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003e58:	4b5e      	ldr	r3, [pc, #376]	@ (8003fd4 <HAL_ADC_ConfigChannel+0x7b8>)
 8003e5a:	e096      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003e5c:	4b64      	ldr	r3, [pc, #400]	@ (8003ff0 <HAL_ADC_ConfigChannel+0x7d4>)
 8003e5e:	e094      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003e60:	4b64      	ldr	r3, [pc, #400]	@ (8003ff4 <HAL_ADC_ConfigChannel+0x7d8>)
 8003e62:	e092      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003e64:	4b64      	ldr	r3, [pc, #400]	@ (8003ff8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003e66:	e090      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003e68:	4b64      	ldr	r3, [pc, #400]	@ (8003ffc <HAL_ADC_ConfigChannel+0x7e0>)
 8003e6a:	e08e      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e08c      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4962      	ldr	r1, [pc, #392]	@ (8004000 <HAL_ADC_ConfigChannel+0x7e4>)
 8003e76:	428b      	cmp	r3, r1
 8003e78:	d140      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x6e0>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	494f      	ldr	r1, [pc, #316]	@ (8003fbc <HAL_ADC_ConfigChannel+0x7a0>)
 8003e80:	428b      	cmp	r3, r1
 8003e82:	d039      	beq.n	8003ef8 <HAL_ADC_ConfigChannel+0x6dc>
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	494d      	ldr	r1, [pc, #308]	@ (8003fc0 <HAL_ADC_ConfigChannel+0x7a4>)
 8003e8a:	428b      	cmp	r3, r1
 8003e8c:	d032      	beq.n	8003ef4 <HAL_ADC_ConfigChannel+0x6d8>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	494c      	ldr	r1, [pc, #304]	@ (8003fc4 <HAL_ADC_ConfigChannel+0x7a8>)
 8003e94:	428b      	cmp	r3, r1
 8003e96:	d02b      	beq.n	8003ef0 <HAL_ADC_ConfigChannel+0x6d4>
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	494a      	ldr	r1, [pc, #296]	@ (8003fc8 <HAL_ADC_ConfigChannel+0x7ac>)
 8003e9e:	428b      	cmp	r3, r1
 8003ea0:	d024      	beq.n	8003eec <HAL_ADC_ConfigChannel+0x6d0>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4949      	ldr	r1, [pc, #292]	@ (8003fcc <HAL_ADC_ConfigChannel+0x7b0>)
 8003ea8:	428b      	cmp	r3, r1
 8003eaa:	d01d      	beq.n	8003ee8 <HAL_ADC_ConfigChannel+0x6cc>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4947      	ldr	r1, [pc, #284]	@ (8003fd0 <HAL_ADC_ConfigChannel+0x7b4>)
 8003eb2:	428b      	cmp	r3, r1
 8003eb4:	d016      	beq.n	8003ee4 <HAL_ADC_ConfigChannel+0x6c8>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4946      	ldr	r1, [pc, #280]	@ (8003fd4 <HAL_ADC_ConfigChannel+0x7b8>)
 8003ebc:	428b      	cmp	r3, r1
 8003ebe:	d00f      	beq.n	8003ee0 <HAL_ADC_ConfigChannel+0x6c4>
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4944      	ldr	r1, [pc, #272]	@ (8003fd8 <HAL_ADC_ConfigChannel+0x7bc>)
 8003ec6:	428b      	cmp	r3, r1
 8003ec8:	d008      	beq.n	8003edc <HAL_ADC_ConfigChannel+0x6c0>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4944      	ldr	r1, [pc, #272]	@ (8003fe0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003ed0:	428b      	cmp	r3, r1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x6bc>
 8003ed4:	4b43      	ldr	r3, [pc, #268]	@ (8003fe4 <HAL_ADC_ConfigChannel+0x7c8>)
 8003ed6:	e058      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	e056      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003edc:	4b43      	ldr	r3, [pc, #268]	@ (8003fec <HAL_ADC_ConfigChannel+0x7d0>)
 8003ede:	e054      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003ee0:	4b3d      	ldr	r3, [pc, #244]	@ (8003fd8 <HAL_ADC_ConfigChannel+0x7bc>)
 8003ee2:	e052      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003ee4:	4b3b      	ldr	r3, [pc, #236]	@ (8003fd4 <HAL_ADC_ConfigChannel+0x7b8>)
 8003ee6:	e050      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003ee8:	4b41      	ldr	r3, [pc, #260]	@ (8003ff0 <HAL_ADC_ConfigChannel+0x7d4>)
 8003eea:	e04e      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003eec:	4b41      	ldr	r3, [pc, #260]	@ (8003ff4 <HAL_ADC_ConfigChannel+0x7d8>)
 8003eee:	e04c      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003ef0:	4b41      	ldr	r3, [pc, #260]	@ (8003ff8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003ef2:	e04a      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003ef4:	4b41      	ldr	r3, [pc, #260]	@ (8003ffc <HAL_ADC_ConfigChannel+0x7e0>)
 8003ef6:	e048      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e046      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4940      	ldr	r1, [pc, #256]	@ (8004004 <HAL_ADC_ConfigChannel+0x7e8>)
 8003f02:	428b      	cmp	r3, r1
 8003f04:	d140      	bne.n	8003f88 <HAL_ADC_ConfigChannel+0x76c>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	492c      	ldr	r1, [pc, #176]	@ (8003fbc <HAL_ADC_ConfigChannel+0x7a0>)
 8003f0c:	428b      	cmp	r3, r1
 8003f0e:	d039      	beq.n	8003f84 <HAL_ADC_ConfigChannel+0x768>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	492a      	ldr	r1, [pc, #168]	@ (8003fc0 <HAL_ADC_ConfigChannel+0x7a4>)
 8003f16:	428b      	cmp	r3, r1
 8003f18:	d032      	beq.n	8003f80 <HAL_ADC_ConfigChannel+0x764>
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4929      	ldr	r1, [pc, #164]	@ (8003fc4 <HAL_ADC_ConfigChannel+0x7a8>)
 8003f20:	428b      	cmp	r3, r1
 8003f22:	d02b      	beq.n	8003f7c <HAL_ADC_ConfigChannel+0x760>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4927      	ldr	r1, [pc, #156]	@ (8003fc8 <HAL_ADC_ConfigChannel+0x7ac>)
 8003f2a:	428b      	cmp	r3, r1
 8003f2c:	d024      	beq.n	8003f78 <HAL_ADC_ConfigChannel+0x75c>
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4926      	ldr	r1, [pc, #152]	@ (8003fcc <HAL_ADC_ConfigChannel+0x7b0>)
 8003f34:	428b      	cmp	r3, r1
 8003f36:	d01d      	beq.n	8003f74 <HAL_ADC_ConfigChannel+0x758>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4924      	ldr	r1, [pc, #144]	@ (8003fd0 <HAL_ADC_ConfigChannel+0x7b4>)
 8003f3e:	428b      	cmp	r3, r1
 8003f40:	d016      	beq.n	8003f70 <HAL_ADC_ConfigChannel+0x754>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4923      	ldr	r1, [pc, #140]	@ (8003fd4 <HAL_ADC_ConfigChannel+0x7b8>)
 8003f48:	428b      	cmp	r3, r1
 8003f4a:	d00f      	beq.n	8003f6c <HAL_ADC_ConfigChannel+0x750>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4926      	ldr	r1, [pc, #152]	@ (8003fec <HAL_ADC_ConfigChannel+0x7d0>)
 8003f52:	428b      	cmp	r3, r1
 8003f54:	d008      	beq.n	8003f68 <HAL_ADC_ConfigChannel+0x74c>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	492b      	ldr	r1, [pc, #172]	@ (8004008 <HAL_ADC_ConfigChannel+0x7ec>)
 8003f5c:	428b      	cmp	r3, r1
 8003f5e:	d101      	bne.n	8003f64 <HAL_ADC_ConfigChannel+0x748>
 8003f60:	4b2a      	ldr	r3, [pc, #168]	@ (800400c <HAL_ADC_ConfigChannel+0x7f0>)
 8003f62:	e012      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003f64:	2300      	movs	r3, #0
 8003f66:	e010      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003f68:	4b27      	ldr	r3, [pc, #156]	@ (8004008 <HAL_ADC_ConfigChannel+0x7ec>)
 8003f6a:	e00e      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8003fd8 <HAL_ADC_ConfigChannel+0x7bc>)
 8003f6e:	e00c      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003f70:	4b18      	ldr	r3, [pc, #96]	@ (8003fd4 <HAL_ADC_ConfigChannel+0x7b8>)
 8003f72:	e00a      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003f74:	4b1e      	ldr	r3, [pc, #120]	@ (8003ff0 <HAL_ADC_ConfigChannel+0x7d4>)
 8003f76:	e008      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003f78:	4b1e      	ldr	r3, [pc, #120]	@ (8003ff4 <HAL_ADC_ConfigChannel+0x7d8>)
 8003f7a:	e006      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003f7c:	4b1e      	ldr	r3, [pc, #120]	@ (8003ff8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003f7e:	e004      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003f80:	4b1e      	ldr	r3, [pc, #120]	@ (8003ffc <HAL_ADC_ConfigChannel+0x7e0>)
 8003f82:	e002      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003f84:	2301      	movs	r3, #1
 8003f86:	e000      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x76e>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	f7fe fd4b 	bl	8002a28 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f280 80f6 	bge.w	8004188 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a05      	ldr	r2, [pc, #20]	@ (8003fb8 <HAL_ADC_ConfigChannel+0x79c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d004      	beq.n	8003fb0 <HAL_ADC_ConfigChannel+0x794>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a15      	ldr	r2, [pc, #84]	@ (8004000 <HAL_ADC_ConfigChannel+0x7e4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d131      	bne.n	8004014 <HAL_ADC_ConfigChannel+0x7f8>
 8003fb0:	4b17      	ldr	r3, [pc, #92]	@ (8004010 <HAL_ADC_ConfigChannel+0x7f4>)
 8003fb2:	e030      	b.n	8004016 <HAL_ADC_ConfigChannel+0x7fa>
 8003fb4:	47ff0000 	.word	0x47ff0000
 8003fb8:	40022000 	.word	0x40022000
 8003fbc:	04300002 	.word	0x04300002
 8003fc0:	08600004 	.word	0x08600004
 8003fc4:	0c900008 	.word	0x0c900008
 8003fc8:	10c00010 	.word	0x10c00010
 8003fcc:	14f00020 	.word	0x14f00020
 8003fd0:	2a000400 	.word	0x2a000400
 8003fd4:	2e300800 	.word	0x2e300800
 8003fd8:	32601000 	.word	0x32601000
 8003fdc:	43210000 	.word	0x43210000
 8003fe0:	4b840000 	.word	0x4b840000
 8003fe4:	4fb80000 	.word	0x4fb80000
 8003fe8:	47520000 	.word	0x47520000
 8003fec:	36902000 	.word	0x36902000
 8003ff0:	25b00200 	.word	0x25b00200
 8003ff4:	21800100 	.word	0x21800100
 8003ff8:	1d500080 	.word	0x1d500080
 8003ffc:	19200040 	.word	0x19200040
 8004000:	40022100 	.word	0x40022100
 8004004:	58026000 	.word	0x58026000
 8004008:	3ac04000 	.word	0x3ac04000
 800400c:	3ef08000 	.word	0x3ef08000
 8004010:	40022300 	.word	0x40022300
 8004014:	4b61      	ldr	r3, [pc, #388]	@ (800419c <HAL_ADC_ConfigChannel+0x980>)
 8004016:	4618      	mov	r0, r3
 8004018:	f7fe fcf8 	bl	8002a0c <LL_ADC_GetCommonPathInternalCh>
 800401c:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a5f      	ldr	r2, [pc, #380]	@ (80041a0 <HAL_ADC_ConfigChannel+0x984>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d004      	beq.n	8004032 <HAL_ADC_ConfigChannel+0x816>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a5d      	ldr	r2, [pc, #372]	@ (80041a4 <HAL_ADC_ConfigChannel+0x988>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d10e      	bne.n	8004050 <HAL_ADC_ConfigChannel+0x834>
 8004032:	485b      	ldr	r0, [pc, #364]	@ (80041a0 <HAL_ADC_ConfigChannel+0x984>)
 8004034:	f7fe ff60 	bl	8002ef8 <LL_ADC_IsEnabled>
 8004038:	4604      	mov	r4, r0
 800403a:	485a      	ldr	r0, [pc, #360]	@ (80041a4 <HAL_ADC_ConfigChannel+0x988>)
 800403c:	f7fe ff5c 	bl	8002ef8 <LL_ADC_IsEnabled>
 8004040:	4603      	mov	r3, r0
 8004042:	4323      	orrs	r3, r4
 8004044:	2b00      	cmp	r3, #0
 8004046:	bf0c      	ite	eq
 8004048:	2301      	moveq	r3, #1
 800404a:	2300      	movne	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	e008      	b.n	8004062 <HAL_ADC_ConfigChannel+0x846>
 8004050:	4855      	ldr	r0, [pc, #340]	@ (80041a8 <HAL_ADC_ConfigChannel+0x98c>)
 8004052:	f7fe ff51 	bl	8002ef8 <LL_ADC_IsEnabled>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	bf0c      	ite	eq
 800405c:	2301      	moveq	r3, #1
 800405e:	2300      	movne	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d07d      	beq.n	8004162 <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a50      	ldr	r2, [pc, #320]	@ (80041ac <HAL_ADC_ConfigChannel+0x990>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d130      	bne.n	80040d2 <HAL_ADC_ConfigChannel+0x8b6>
 8004070:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004072:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d12b      	bne.n	80040d2 <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a4a      	ldr	r2, [pc, #296]	@ (80041a8 <HAL_ADC_ConfigChannel+0x98c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	f040 8081 	bne.w	8004188 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a45      	ldr	r2, [pc, #276]	@ (80041a0 <HAL_ADC_ConfigChannel+0x984>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d004      	beq.n	800409a <HAL_ADC_ConfigChannel+0x87e>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a43      	ldr	r2, [pc, #268]	@ (80041a4 <HAL_ADC_ConfigChannel+0x988>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d101      	bne.n	800409e <HAL_ADC_ConfigChannel+0x882>
 800409a:	4a45      	ldr	r2, [pc, #276]	@ (80041b0 <HAL_ADC_ConfigChannel+0x994>)
 800409c:	e000      	b.n	80040a0 <HAL_ADC_ConfigChannel+0x884>
 800409e:	4a3f      	ldr	r2, [pc, #252]	@ (800419c <HAL_ADC_ConfigChannel+0x980>)
 80040a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80040a6:	4619      	mov	r1, r3
 80040a8:	4610      	mov	r0, r2
 80040aa:	f7fe fc9c 	bl	80029e6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040ae:	4b41      	ldr	r3, [pc, #260]	@ (80041b4 <HAL_ADC_ConfigChannel+0x998>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	099b      	lsrs	r3, r3, #6
 80040b4:	4a40      	ldr	r2, [pc, #256]	@ (80041b8 <HAL_ADC_ConfigChannel+0x99c>)
 80040b6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ba:	099b      	lsrs	r3, r3, #6
 80040bc:	3301      	adds	r3, #1
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80040c2:	e002      	b.n	80040ca <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1f9      	bne.n	80040c4 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040d0:	e05a      	b.n	8004188 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a39      	ldr	r2, [pc, #228]	@ (80041bc <HAL_ADC_ConfigChannel+0x9a0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d11e      	bne.n	800411a <HAL_ADC_ConfigChannel+0x8fe>
 80040dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d119      	bne.n	800411a <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a2f      	ldr	r2, [pc, #188]	@ (80041a8 <HAL_ADC_ConfigChannel+0x98c>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d14b      	bne.n	8004188 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a2a      	ldr	r2, [pc, #168]	@ (80041a0 <HAL_ADC_ConfigChannel+0x984>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d004      	beq.n	8004104 <HAL_ADC_ConfigChannel+0x8e8>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a29      	ldr	r2, [pc, #164]	@ (80041a4 <HAL_ADC_ConfigChannel+0x988>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d101      	bne.n	8004108 <HAL_ADC_ConfigChannel+0x8ec>
 8004104:	4a2a      	ldr	r2, [pc, #168]	@ (80041b0 <HAL_ADC_ConfigChannel+0x994>)
 8004106:	e000      	b.n	800410a <HAL_ADC_ConfigChannel+0x8ee>
 8004108:	4a24      	ldr	r2, [pc, #144]	@ (800419c <HAL_ADC_ConfigChannel+0x980>)
 800410a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800410c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004110:	4619      	mov	r1, r3
 8004112:	4610      	mov	r0, r2
 8004114:	f7fe fc67 	bl	80029e6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004118:	e036      	b.n	8004188 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a28      	ldr	r2, [pc, #160]	@ (80041c0 <HAL_ADC_ConfigChannel+0x9a4>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d131      	bne.n	8004188 <HAL_ADC_ConfigChannel+0x96c>
 8004124:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d12c      	bne.n	8004188 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a1d      	ldr	r2, [pc, #116]	@ (80041a8 <HAL_ADC_ConfigChannel+0x98c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d127      	bne.n	8004188 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a18      	ldr	r2, [pc, #96]	@ (80041a0 <HAL_ADC_ConfigChannel+0x984>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d004      	beq.n	800414c <HAL_ADC_ConfigChannel+0x930>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a17      	ldr	r2, [pc, #92]	@ (80041a4 <HAL_ADC_ConfigChannel+0x988>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d101      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x934>
 800414c:	4a18      	ldr	r2, [pc, #96]	@ (80041b0 <HAL_ADC_ConfigChannel+0x994>)
 800414e:	e000      	b.n	8004152 <HAL_ADC_ConfigChannel+0x936>
 8004150:	4a12      	ldr	r2, [pc, #72]	@ (800419c <HAL_ADC_ConfigChannel+0x980>)
 8004152:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004154:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004158:	4619      	mov	r1, r3
 800415a:	4610      	mov	r0, r2
 800415c:	f7fe fc43 	bl	80029e6 <LL_ADC_SetCommonPathInternalCh>
 8004160:	e012      	b.n	8004188 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004166:	f043 0220 	orr.w	r2, r3, #32
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8004174:	e008      	b.n	8004188 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800417a:	f043 0220 	orr.w	r2, r3, #32
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004190:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8004194:	4618      	mov	r0, r3
 8004196:	3794      	adds	r7, #148	@ 0x94
 8004198:	46bd      	mov	sp, r7
 800419a:	bd90      	pop	{r4, r7, pc}
 800419c:	58026300 	.word	0x58026300
 80041a0:	40022000 	.word	0x40022000
 80041a4:	40022100 	.word	0x40022100
 80041a8:	58026000 	.word	0x58026000
 80041ac:	c7520000 	.word	0xc7520000
 80041b0:	40022300 	.word	0x40022300
 80041b4:	24000008 	.word	0x24000008
 80041b8:	053e2d63 	.word	0x053e2d63
 80041bc:	c3210000 	.word	0xc3210000
 80041c0:	cb840000 	.word	0xcb840000

080041c4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b088      	sub	sp, #32
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80041ce:	2300      	movs	r3, #0
 80041d0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fe feda 	bl	8002f94 <LL_ADC_REG_IsConversionOngoing>
 80041e0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fe fefc 	bl	8002fe4 <LL_ADC_INJ_IsConversionOngoing>
 80041ec:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d103      	bne.n	80041fc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 8098 	beq.w	800432c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d02a      	beq.n	8004260 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	7e5b      	ldrb	r3, [r3, #25]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d126      	bne.n	8004260 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	7e1b      	ldrb	r3, [r3, #24]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d122      	bne.n	8004260 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800421a:	2301      	movs	r3, #1
 800421c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800421e:	e014      	b.n	800424a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	4a45      	ldr	r2, [pc, #276]	@ (8004338 <ADC_ConversionStop+0x174>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d90d      	bls.n	8004244 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800422c:	f043 0210 	orr.w	r2, r3, #16
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004238:	f043 0201 	orr.w	r2, r3, #1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e074      	b.n	800432e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	3301      	adds	r3, #1
 8004248:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004254:	2b40      	cmp	r3, #64	@ 0x40
 8004256:	d1e3      	bne.n	8004220 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2240      	movs	r2, #64	@ 0x40
 800425e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d014      	beq.n	8004290 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7fe fe92 	bl	8002f94 <LL_ADC_REG_IsConversionOngoing>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00c      	beq.n	8004290 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f7fe fe4f 	bl	8002f1e <LL_ADC_IsDisableOngoing>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d104      	bne.n	8004290 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f7fe fe6e 	bl	8002f6c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d014      	beq.n	80042c0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f7fe fea2 	bl	8002fe4 <LL_ADC_INJ_IsConversionOngoing>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00c      	beq.n	80042c0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fe fe37 	bl	8002f1e <LL_ADC_IsDisableOngoing>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d104      	bne.n	80042c0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fe fe7e 	bl	8002fbc <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d005      	beq.n	80042d2 <ADC_ConversionStop+0x10e>
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	2b03      	cmp	r3, #3
 80042ca:	d105      	bne.n	80042d8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80042cc:	230c      	movs	r3, #12
 80042ce:	617b      	str	r3, [r7, #20]
        break;
 80042d0:	e005      	b.n	80042de <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80042d2:	2308      	movs	r3, #8
 80042d4:	617b      	str	r3, [r7, #20]
        break;
 80042d6:	e002      	b.n	80042de <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80042d8:	2304      	movs	r3, #4
 80042da:	617b      	str	r3, [r7, #20]
        break;
 80042dc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80042de:	f7fe fb63 	bl	80029a8 <HAL_GetTick>
 80042e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80042e4:	e01b      	b.n	800431e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80042e6:	f7fe fb5f 	bl	80029a8 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b05      	cmp	r3, #5
 80042f2:	d914      	bls.n	800431e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	4013      	ands	r3, r2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00d      	beq.n	800431e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004306:	f043 0210 	orr.w	r2, r3, #16
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004312:	f043 0201 	orr.w	r2, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e007      	b.n	800432e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	4013      	ands	r3, r2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1dc      	bne.n	80042e6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3720      	adds	r7, #32
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	000cdbff 	.word	0x000cdbff

0800433c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f7fe fdd5 	bl	8002ef8 <LL_ADC_IsEnabled>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d16e      	bne.n	8004432 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689a      	ldr	r2, [r3, #8]
 800435a:	4b38      	ldr	r3, [pc, #224]	@ (800443c <ADC_Enable+0x100>)
 800435c:	4013      	ands	r3, r2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00d      	beq.n	800437e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004366:	f043 0210 	orr.w	r2, r3, #16
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004372:	f043 0201 	orr.w	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e05a      	b.n	8004434 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f7fe fd90 	bl	8002ea8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004388:	f7fe fb0e 	bl	80029a8 <HAL_GetTick>
 800438c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a2b      	ldr	r2, [pc, #172]	@ (8004440 <ADC_Enable+0x104>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d004      	beq.n	80043a2 <ADC_Enable+0x66>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a29      	ldr	r2, [pc, #164]	@ (8004444 <ADC_Enable+0x108>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d101      	bne.n	80043a6 <ADC_Enable+0x6a>
 80043a2:	4b29      	ldr	r3, [pc, #164]	@ (8004448 <ADC_Enable+0x10c>)
 80043a4:	e000      	b.n	80043a8 <ADC_Enable+0x6c>
 80043a6:	4b29      	ldr	r3, [pc, #164]	@ (800444c <ADC_Enable+0x110>)
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fe fd13 	bl	8002dd4 <LL_ADC_GetMultimode>
 80043ae:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a23      	ldr	r2, [pc, #140]	@ (8004444 <ADC_Enable+0x108>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d002      	beq.n	80043c0 <ADC_Enable+0x84>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	e000      	b.n	80043c2 <ADC_Enable+0x86>
 80043c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004440 <ADC_Enable+0x104>)
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6812      	ldr	r2, [r2, #0]
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d02c      	beq.n	8004424 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d130      	bne.n	8004432 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043d0:	e028      	b.n	8004424 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fe fd8e 	bl	8002ef8 <LL_ADC_IsEnabled>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d104      	bne.n	80043ec <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fe fd5e 	bl	8002ea8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80043ec:	f7fe fadc 	bl	80029a8 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d914      	bls.n	8004424 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b01      	cmp	r3, #1
 8004406:	d00d      	beq.n	8004424 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800440c:	f043 0210 	orr.w	r2, r3, #16
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004418:	f043 0201 	orr.w	r2, r3, #1
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e007      	b.n	8004434 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b01      	cmp	r3, #1
 8004430:	d1cf      	bne.n	80043d2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	8000003f 	.word	0x8000003f
 8004440:	40022000 	.word	0x40022000
 8004444:	40022100 	.word	0x40022100
 8004448:	40022300 	.word	0x40022300
 800444c:	58026300 	.word	0x58026300

08004450 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4618      	mov	r0, r3
 800445e:	f7fe fd5e 	bl	8002f1e <LL_ADC_IsDisableOngoing>
 8004462:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f7fe fd45 	bl	8002ef8 <LL_ADC_IsEnabled>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d047      	beq.n	8004504 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d144      	bne.n	8004504 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 030d 	and.w	r3, r3, #13
 8004484:	2b01      	cmp	r3, #1
 8004486:	d10c      	bne.n	80044a2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4618      	mov	r0, r3
 800448e:	f7fe fd1f 	bl	8002ed0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2203      	movs	r2, #3
 8004498:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800449a:	f7fe fa85 	bl	80029a8 <HAL_GetTick>
 800449e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80044a0:	e029      	b.n	80044f6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044a6:	f043 0210 	orr.w	r2, r3, #16
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044b2:	f043 0201 	orr.w	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e023      	b.n	8004506 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80044be:	f7fe fa73 	bl	80029a8 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d914      	bls.n	80044f6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00d      	beq.n	80044f6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044de:	f043 0210 	orr.w	r2, r3, #16
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044ea:	f043 0201 	orr.w	r2, r3, #1
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e007      	b.n	8004506 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1dc      	bne.n	80044be <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
	...

08004510 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a6c      	ldr	r2, [pc, #432]	@ (80046d0 <ADC_ConfigureBoostMode+0x1c0>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d004      	beq.n	800452c <ADC_ConfigureBoostMode+0x1c>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a6b      	ldr	r2, [pc, #428]	@ (80046d4 <ADC_ConfigureBoostMode+0x1c4>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d109      	bne.n	8004540 <ADC_ConfigureBoostMode+0x30>
 800452c:	4b6a      	ldr	r3, [pc, #424]	@ (80046d8 <ADC_ConfigureBoostMode+0x1c8>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004534:	2b00      	cmp	r3, #0
 8004536:	bf14      	ite	ne
 8004538:	2301      	movne	r3, #1
 800453a:	2300      	moveq	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	e008      	b.n	8004552 <ADC_ConfigureBoostMode+0x42>
 8004540:	4b66      	ldr	r3, [pc, #408]	@ (80046dc <ADC_ConfigureBoostMode+0x1cc>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004548:	2b00      	cmp	r3, #0
 800454a:	bf14      	ite	ne
 800454c:	2301      	movne	r3, #1
 800454e:	2300      	moveq	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d01c      	beq.n	8004590 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004556:	f002 fdcd 	bl	80070f4 <HAL_RCC_GetHCLKFreq>
 800455a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004564:	d010      	beq.n	8004588 <ADC_ConfigureBoostMode+0x78>
 8004566:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800456a:	d873      	bhi.n	8004654 <ADC_ConfigureBoostMode+0x144>
 800456c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004570:	d002      	beq.n	8004578 <ADC_ConfigureBoostMode+0x68>
 8004572:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004576:	d16d      	bne.n	8004654 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	0c1b      	lsrs	r3, r3, #16
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	fbb2 f3f3 	udiv	r3, r2, r3
 8004584:	60fb      	str	r3, [r7, #12]
        break;
 8004586:	e068      	b.n	800465a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	089b      	lsrs	r3, r3, #2
 800458c:	60fb      	str	r3, [r7, #12]
        break;
 800458e:	e064      	b.n	800465a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004590:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004594:	f04f 0100 	mov.w	r1, #0
 8004598:	f003 ffa8 	bl	80084ec <HAL_RCCEx_GetPeriphCLKFreq>
 800459c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80045a6:	d051      	beq.n	800464c <ADC_ConfigureBoostMode+0x13c>
 80045a8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80045ac:	d854      	bhi.n	8004658 <ADC_ConfigureBoostMode+0x148>
 80045ae:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80045b2:	d047      	beq.n	8004644 <ADC_ConfigureBoostMode+0x134>
 80045b4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80045b8:	d84e      	bhi.n	8004658 <ADC_ConfigureBoostMode+0x148>
 80045ba:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80045be:	d03d      	beq.n	800463c <ADC_ConfigureBoostMode+0x12c>
 80045c0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80045c4:	d848      	bhi.n	8004658 <ADC_ConfigureBoostMode+0x148>
 80045c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045ca:	d033      	beq.n	8004634 <ADC_ConfigureBoostMode+0x124>
 80045cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045d0:	d842      	bhi.n	8004658 <ADC_ConfigureBoostMode+0x148>
 80045d2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80045d6:	d029      	beq.n	800462c <ADC_ConfigureBoostMode+0x11c>
 80045d8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80045dc:	d83c      	bhi.n	8004658 <ADC_ConfigureBoostMode+0x148>
 80045de:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80045e2:	d01a      	beq.n	800461a <ADC_ConfigureBoostMode+0x10a>
 80045e4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80045e8:	d836      	bhi.n	8004658 <ADC_ConfigureBoostMode+0x148>
 80045ea:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80045ee:	d014      	beq.n	800461a <ADC_ConfigureBoostMode+0x10a>
 80045f0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80045f4:	d830      	bhi.n	8004658 <ADC_ConfigureBoostMode+0x148>
 80045f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045fa:	d00e      	beq.n	800461a <ADC_ConfigureBoostMode+0x10a>
 80045fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004600:	d82a      	bhi.n	8004658 <ADC_ConfigureBoostMode+0x148>
 8004602:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004606:	d008      	beq.n	800461a <ADC_ConfigureBoostMode+0x10a>
 8004608:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800460c:	d824      	bhi.n	8004658 <ADC_ConfigureBoostMode+0x148>
 800460e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004612:	d002      	beq.n	800461a <ADC_ConfigureBoostMode+0x10a>
 8004614:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004618:	d11e      	bne.n	8004658 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	0c9b      	lsrs	r3, r3, #18
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	fbb2 f3f3 	udiv	r3, r2, r3
 8004628:	60fb      	str	r3, [r7, #12]
        break;
 800462a:	e016      	b.n	800465a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	091b      	lsrs	r3, r3, #4
 8004630:	60fb      	str	r3, [r7, #12]
        break;
 8004632:	e012      	b.n	800465a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	095b      	lsrs	r3, r3, #5
 8004638:	60fb      	str	r3, [r7, #12]
        break;
 800463a:	e00e      	b.n	800465a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	099b      	lsrs	r3, r3, #6
 8004640:	60fb      	str	r3, [r7, #12]
        break;
 8004642:	e00a      	b.n	800465a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	09db      	lsrs	r3, r3, #7
 8004648:	60fb      	str	r3, [r7, #12]
        break;
 800464a:	e006      	b.n	800465a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	0a1b      	lsrs	r3, r3, #8
 8004650:	60fb      	str	r3, [r7, #12]
        break;
 8004652:	e002      	b.n	800465a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004654:	bf00      	nop
 8004656:	e000      	b.n	800465a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004658:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	085b      	lsrs	r3, r3, #1
 800465e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4a1f      	ldr	r2, [pc, #124]	@ (80046e0 <ADC_ConfigureBoostMode+0x1d0>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d808      	bhi.n	800467a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689a      	ldr	r2, [r3, #8]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004676:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004678:	e025      	b.n	80046c6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4a19      	ldr	r2, [pc, #100]	@ (80046e4 <ADC_ConfigureBoostMode+0x1d4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d80a      	bhi.n	8004698 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004694:	609a      	str	r2, [r3, #8]
}
 8004696:	e016      	b.n	80046c6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4a13      	ldr	r2, [pc, #76]	@ (80046e8 <ADC_ConfigureBoostMode+0x1d8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d80a      	bhi.n	80046b6 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046b2:	609a      	str	r2, [r3, #8]
}
 80046b4:	e007      	b.n	80046c6 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80046c4:	609a      	str	r2, [r3, #8]
}
 80046c6:	bf00      	nop
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	40022000 	.word	0x40022000
 80046d4:	40022100 	.word	0x40022100
 80046d8:	40022300 	.word	0x40022300
 80046dc:	58026300 	.word	0x58026300
 80046e0:	005f5e10 	.word	0x005f5e10
 80046e4:	00bebc20 	.word	0x00bebc20
 80046e8:	017d7840 	.word	0x017d7840

080046ec <LL_ADC_IsEnabled>:
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d101      	bne.n	8004704 <LL_ADC_IsEnabled+0x18>
 8004700:	2301      	movs	r3, #1
 8004702:	e000      	b.n	8004706 <LL_ADC_IsEnabled+0x1a>
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <LL_ADC_REG_IsConversionOngoing>:
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 0304 	and.w	r3, r3, #4
 8004722:	2b04      	cmp	r3, #4
 8004724:	d101      	bne.n	800472a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004738:	b590      	push	{r4, r7, lr}
 800473a:	b0a3      	sub	sp, #140	@ 0x8c
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800474e:	2b01      	cmp	r3, #1
 8004750:	d101      	bne.n	8004756 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004752:	2302      	movs	r3, #2
 8004754:	e0c1      	b.n	80048da <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800475e:	2300      	movs	r3, #0
 8004760:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004762:	2300      	movs	r3, #0
 8004764:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a5e      	ldr	r2, [pc, #376]	@ (80048e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d102      	bne.n	8004776 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004770:	4b5d      	ldr	r3, [pc, #372]	@ (80048e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	e001      	b.n	800477a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10b      	bne.n	8004798 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004784:	f043 0220 	orr.w	r2, r3, #32
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e0a0      	b.n	80048da <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff ffb9 	bl	8004712 <LL_ADC_REG_IsConversionOngoing>
 80047a0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff ffb2 	bl	8004712 <LL_ADC_REG_IsConversionOngoing>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f040 8081 	bne.w	80048b8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80047b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d17c      	bne.n	80048b8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a48      	ldr	r2, [pc, #288]	@ (80048e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d004      	beq.n	80047d2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a46      	ldr	r2, [pc, #280]	@ (80048e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d101      	bne.n	80047d6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80047d2:	4b46      	ldr	r3, [pc, #280]	@ (80048ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80047d4:	e000      	b.n	80047d8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80047d6:	4b46      	ldr	r3, [pc, #280]	@ (80048f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80047d8:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d039      	beq.n	8004856 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80047e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	431a      	orrs	r2, r3
 80047f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047f2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a3a      	ldr	r2, [pc, #232]	@ (80048e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d004      	beq.n	8004808 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a39      	ldr	r2, [pc, #228]	@ (80048e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d10e      	bne.n	8004826 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004808:	4836      	ldr	r0, [pc, #216]	@ (80048e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800480a:	f7ff ff6f 	bl	80046ec <LL_ADC_IsEnabled>
 800480e:	4604      	mov	r4, r0
 8004810:	4835      	ldr	r0, [pc, #212]	@ (80048e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004812:	f7ff ff6b 	bl	80046ec <LL_ADC_IsEnabled>
 8004816:	4603      	mov	r3, r0
 8004818:	4323      	orrs	r3, r4
 800481a:	2b00      	cmp	r3, #0
 800481c:	bf0c      	ite	eq
 800481e:	2301      	moveq	r3, #1
 8004820:	2300      	movne	r3, #0
 8004822:	b2db      	uxtb	r3, r3
 8004824:	e008      	b.n	8004838 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004826:	4833      	ldr	r0, [pc, #204]	@ (80048f4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004828:	f7ff ff60 	bl	80046ec <LL_ADC_IsEnabled>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	bf0c      	ite	eq
 8004832:	2301      	moveq	r3, #1
 8004834:	2300      	movne	r3, #0
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d047      	beq.n	80048cc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800483c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	4b2d      	ldr	r3, [pc, #180]	@ (80048f8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004842:	4013      	ands	r3, r2
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	6811      	ldr	r1, [r2, #0]
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	6892      	ldr	r2, [r2, #8]
 800484c:	430a      	orrs	r2, r1
 800484e:	431a      	orrs	r2, r3
 8004850:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004852:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004854:	e03a      	b.n	80048cc <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004856:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800485e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004860:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a1f      	ldr	r2, [pc, #124]	@ (80048e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d004      	beq.n	8004876 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a1d      	ldr	r2, [pc, #116]	@ (80048e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d10e      	bne.n	8004894 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004876:	481b      	ldr	r0, [pc, #108]	@ (80048e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004878:	f7ff ff38 	bl	80046ec <LL_ADC_IsEnabled>
 800487c:	4604      	mov	r4, r0
 800487e:	481a      	ldr	r0, [pc, #104]	@ (80048e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004880:	f7ff ff34 	bl	80046ec <LL_ADC_IsEnabled>
 8004884:	4603      	mov	r3, r0
 8004886:	4323      	orrs	r3, r4
 8004888:	2b00      	cmp	r3, #0
 800488a:	bf0c      	ite	eq
 800488c:	2301      	moveq	r3, #1
 800488e:	2300      	movne	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	e008      	b.n	80048a6 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004894:	4817      	ldr	r0, [pc, #92]	@ (80048f4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004896:	f7ff ff29 	bl	80046ec <LL_ADC_IsEnabled>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	bf0c      	ite	eq
 80048a0:	2301      	moveq	r3, #1
 80048a2:	2300      	movne	r3, #0
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d010      	beq.n	80048cc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80048aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	4b12      	ldr	r3, [pc, #72]	@ (80048f8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80048b0:	4013      	ands	r3, r2
 80048b2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80048b4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048b6:	e009      	b.n	80048cc <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048bc:	f043 0220 	orr.w	r2, r3, #32
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80048ca:	e000      	b.n	80048ce <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80048d6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80048da:	4618      	mov	r0, r3
 80048dc:	378c      	adds	r7, #140	@ 0x8c
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd90      	pop	{r4, r7, pc}
 80048e2:	bf00      	nop
 80048e4:	40022000 	.word	0x40022000
 80048e8:	40022100 	.word	0x40022100
 80048ec:	40022300 	.word	0x40022300
 80048f0:	58026300 	.word	0x58026300
 80048f4:	58026000 	.word	0x58026000
 80048f8:	fffff0e0 	.word	0xfffff0e0

080048fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800490c:	4b0b      	ldr	r3, [pc, #44]	@ (800493c <__NVIC_SetPriorityGrouping+0x40>)
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004918:	4013      	ands	r3, r2
 800491a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004924:	4b06      	ldr	r3, [pc, #24]	@ (8004940 <__NVIC_SetPriorityGrouping+0x44>)
 8004926:	4313      	orrs	r3, r2
 8004928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800492a:	4a04      	ldr	r2, [pc, #16]	@ (800493c <__NVIC_SetPriorityGrouping+0x40>)
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	60d3      	str	r3, [r2, #12]
}
 8004930:	bf00      	nop
 8004932:	3714      	adds	r7, #20
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	e000ed00 	.word	0xe000ed00
 8004940:	05fa0000 	.word	0x05fa0000

08004944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004948:	4b04      	ldr	r3, [pc, #16]	@ (800495c <__NVIC_GetPriorityGrouping+0x18>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	0a1b      	lsrs	r3, r3, #8
 800494e:	f003 0307 	and.w	r3, r3, #7
}
 8004952:	4618      	mov	r0, r3
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	e000ed00 	.word	0xe000ed00

08004960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	4603      	mov	r3, r0
 8004968:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800496a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800496e:	2b00      	cmp	r3, #0
 8004970:	db0b      	blt.n	800498a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004972:	88fb      	ldrh	r3, [r7, #6]
 8004974:	f003 021f 	and.w	r2, r3, #31
 8004978:	4907      	ldr	r1, [pc, #28]	@ (8004998 <__NVIC_EnableIRQ+0x38>)
 800497a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	2001      	movs	r0, #1
 8004982:	fa00 f202 	lsl.w	r2, r0, r2
 8004986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	e000e100 	.word	0xe000e100

0800499c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	4603      	mov	r3, r0
 80049a4:	6039      	str	r1, [r7, #0]
 80049a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80049a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	db0a      	blt.n	80049c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	490c      	ldr	r1, [pc, #48]	@ (80049e8 <__NVIC_SetPriority+0x4c>)
 80049b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049ba:	0112      	lsls	r2, r2, #4
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	440b      	add	r3, r1
 80049c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049c4:	e00a      	b.n	80049dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	4908      	ldr	r1, [pc, #32]	@ (80049ec <__NVIC_SetPriority+0x50>)
 80049cc:	88fb      	ldrh	r3, [r7, #6]
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	3b04      	subs	r3, #4
 80049d4:	0112      	lsls	r2, r2, #4
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	440b      	add	r3, r1
 80049da:	761a      	strb	r2, [r3, #24]
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	e000e100 	.word	0xe000e100
 80049ec:	e000ed00 	.word	0xe000ed00

080049f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b089      	sub	sp, #36	@ 0x24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f003 0307 	and.w	r3, r3, #7
 8004a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	f1c3 0307 	rsb	r3, r3, #7
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	bf28      	it	cs
 8004a0e:	2304      	movcs	r3, #4
 8004a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	3304      	adds	r3, #4
 8004a16:	2b06      	cmp	r3, #6
 8004a18:	d902      	bls.n	8004a20 <NVIC_EncodePriority+0x30>
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	3b03      	subs	r3, #3
 8004a1e:	e000      	b.n	8004a22 <NVIC_EncodePriority+0x32>
 8004a20:	2300      	movs	r3, #0
 8004a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a24:	f04f 32ff 	mov.w	r2, #4294967295
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	43da      	mvns	r2, r3
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	401a      	ands	r2, r3
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a38:	f04f 31ff 	mov.w	r1, #4294967295
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a42:	43d9      	mvns	r1, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a48:	4313      	orrs	r3, r2
         );
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3724      	adds	r7, #36	@ 0x24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
	...

08004a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a68:	d301      	bcc.n	8004a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e00f      	b.n	8004a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8004a98 <SysTick_Config+0x40>)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a76:	210f      	movs	r1, #15
 8004a78:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7c:	f7ff ff8e 	bl	800499c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a80:	4b05      	ldr	r3, [pc, #20]	@ (8004a98 <SysTick_Config+0x40>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a86:	4b04      	ldr	r3, [pc, #16]	@ (8004a98 <SysTick_Config+0x40>)
 8004a88:	2207      	movs	r2, #7
 8004a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	e000e010 	.word	0xe000e010

08004a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7ff ff29 	bl	80048fc <__NVIC_SetPriorityGrouping>
}
 8004aaa:	bf00      	nop
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b086      	sub	sp, #24
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	4603      	mov	r3, r0
 8004aba:	60b9      	str	r1, [r7, #8]
 8004abc:	607a      	str	r2, [r7, #4]
 8004abe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ac0:	f7ff ff40 	bl	8004944 <__NVIC_GetPriorityGrouping>
 8004ac4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	68b9      	ldr	r1, [r7, #8]
 8004aca:	6978      	ldr	r0, [r7, #20]
 8004acc:	f7ff ff90 	bl	80049f0 <NVIC_EncodePriority>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7ff ff5f 	bl	800499c <__NVIC_SetPriority>
}
 8004ade:	bf00      	nop
 8004ae0:	3718      	adds	r7, #24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b082      	sub	sp, #8
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	4603      	mov	r3, r0
 8004aee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004af0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff ff33 	bl	8004960 <__NVIC_EnableIRQ>
}
 8004afa:	bf00      	nop
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b082      	sub	sp, #8
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7ff ffa4 	bl	8004a58 <SysTick_Config>
 8004b10:	4603      	mov	r3, r0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b098      	sub	sp, #96	@ 0x60
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004b24:	4a84      	ldr	r2, [pc, #528]	@ (8004d38 <HAL_FDCAN_Init+0x21c>)
 8004b26:	f107 030c 	add.w	r3, r7, #12
 8004b2a:	4611      	mov	r1, r2
 8004b2c:	224c      	movs	r2, #76	@ 0x4c
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f006 f9fc 	bl	800af2c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e1c6      	b.n	8004ecc <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a7e      	ldr	r2, [pc, #504]	@ (8004d3c <HAL_FDCAN_Init+0x220>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d106      	bne.n	8004b56 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004b50:	461a      	mov	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d106      	bne.n	8004b70 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7fd fc46 	bl	80023fc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699a      	ldr	r2, [r3, #24]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0210 	bic.w	r2, r2, #16
 8004b7e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b80:	f7fd ff12 	bl	80029a8 <HAL_GetTick>
 8004b84:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004b86:	e014      	b.n	8004bb2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004b88:	f7fd ff0e 	bl	80029a8 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b0a      	cmp	r3, #10
 8004b94:	d90d      	bls.n	8004bb2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b9c:	f043 0201 	orr.w	r2, r3, #1
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2203      	movs	r2, #3
 8004baa:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e18c      	b.n	8004ecc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d0e3      	beq.n	8004b88 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699a      	ldr	r2, [r3, #24]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0201 	orr.w	r2, r2, #1
 8004bce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bd0:	f7fd feea 	bl	80029a8 <HAL_GetTick>
 8004bd4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004bd6:	e014      	b.n	8004c02 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004bd8:	f7fd fee6 	bl	80029a8 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b0a      	cmp	r3, #10
 8004be4:	d90d      	bls.n	8004c02 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004bec:	f043 0201 	orr.w	r2, r3, #1
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2203      	movs	r2, #3
 8004bfa:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e164      	b.n	8004ecc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0e3      	beq.n	8004bd8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699a      	ldr	r2, [r3, #24]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0202 	orr.w	r2, r2, #2
 8004c1e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	7c1b      	ldrb	r3, [r3, #16]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d108      	bne.n	8004c3a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c36:	619a      	str	r2, [r3, #24]
 8004c38:	e007      	b.n	8004c4a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	699a      	ldr	r2, [r3, #24]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c48:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	7c5b      	ldrb	r3, [r3, #17]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d108      	bne.n	8004c64 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	699a      	ldr	r2, [r3, #24]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c60:	619a      	str	r2, [r3, #24]
 8004c62:	e007      	b.n	8004c74 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699a      	ldr	r2, [r3, #24]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004c72:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	7c9b      	ldrb	r3, [r3, #18]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d108      	bne.n	8004c8e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	699a      	ldr	r2, [r3, #24]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c8a:	619a      	str	r2, [r3, #24]
 8004c8c:	e007      	b.n	8004c9e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	699a      	ldr	r2, [r3, #24]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c9c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689a      	ldr	r2, [r3, #8]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699a      	ldr	r2, [r3, #24]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004cc2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	691a      	ldr	r2, [r3, #16]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0210 	bic.w	r2, r2, #16
 8004cd2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d108      	bne.n	8004cee <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	699a      	ldr	r2, [r3, #24]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0204 	orr.w	r2, r2, #4
 8004cea:	619a      	str	r2, [r3, #24]
 8004cec:	e030      	b.n	8004d50 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d02c      	beq.n	8004d50 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d020      	beq.n	8004d40 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	699a      	ldr	r2, [r3, #24]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004d0c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f042 0210 	orr.w	r2, r2, #16
 8004d1c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	d114      	bne.n	8004d50 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	699a      	ldr	r2, [r3, #24]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0220 	orr.w	r2, r2, #32
 8004d34:	619a      	str	r2, [r3, #24]
 8004d36:	e00b      	b.n	8004d50 <HAL_FDCAN_Init+0x234>
 8004d38:	0800bb24 	.word	0x0800bb24
 8004d3c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699a      	ldr	r2, [r3, #24]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0220 	orr.w	r2, r2, #32
 8004d4e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	3b01      	subs	r3, #1
 8004d56:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004d60:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004d68:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	3b01      	subs	r3, #1
 8004d72:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004d78:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004d7a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d84:	d115      	bne.n	8004db2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d90:	3b01      	subs	r3, #1
 8004d92:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004d94:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004d9e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da6:	3b01      	subs	r3, #1
 8004da8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004dae:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004db0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dd8:	4413      	add	r3, r2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d011      	beq.n	8004e02 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004de6:	f023 0107 	bic.w	r1, r3, #7
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	3360      	adds	r3, #96	@ 0x60
 8004df2:	443b      	add	r3, r7
 8004df4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d011      	beq.n	8004e2e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004e12:	f023 0107 	bic.w	r1, r3, #7
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	3360      	adds	r3, #96	@ 0x60
 8004e1e:	443b      	add	r3, r7
 8004e20:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d012      	beq.n	8004e5c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004e3e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	3360      	adds	r3, #96	@ 0x60
 8004e4a:	443b      	add	r3, r7
 8004e4c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004e50:	011a      	lsls	r2, r3, #4
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d012      	beq.n	8004e8a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004e6c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	3360      	adds	r3, #96	@ 0x60
 8004e78:	443b      	add	r3, r7
 8004e7a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004e7e:	021a      	lsls	r2, r3, #8
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a11      	ldr	r2, [pc, #68]	@ (8004ed4 <HAL_FDCAN_Init+0x3b8>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d107      	bne.n	8004ea4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f022 0203 	bic.w	r2, r2, #3
 8004ea2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 fdf7 	bl	8005ab0 <FDCAN_CalcultateRamBlockAddresses>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8004ec8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3760      	adds	r7, #96	@ 0x60
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	4000a000 	.word	0x4000a000

08004ed8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004ee8:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004eea:	7bfb      	ldrb	r3, [r7, #15]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d002      	beq.n	8004ef6 <HAL_FDCAN_ConfigFilter+0x1e>
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d157      	bne.n	8004fa6 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d12b      	bne.n	8004f56 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	2b07      	cmp	r3, #7
 8004f04:	d10d      	bne.n	8004f22 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8004f12:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004f18:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8004f1a:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	e00e      	b.n	8004f40 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004f2e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8004f36:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	e025      	b.n	8004fa2 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	075a      	lsls	r2, r3, #29
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	2b07      	cmp	r3, #7
 8004f6a:	d103      	bne.n	8004f74 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	613b      	str	r3, [r7, #16]
 8004f72:	e006      	b.n	8004f82 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	079a      	lsls	r2, r3, #30
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	4413      	add	r3, r2
 8004f8e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	3304      	adds	r3, #4
 8004f9a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	e008      	b.n	8004fb8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004fac:	f043 0202 	orr.w	r2, r3, #2
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
  }
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	371c      	adds	r7, #28
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d111      	bne.n	8004ffc <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699a      	ldr	r2, [r3, #24]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 0201 	bic.w	r2, r2, #1
 8004fee:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	e008      	b.n	800500e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005002:	f043 0204 	orr.w	r2, r3, #4
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
  }
}
 800500e:	4618      	mov	r0, r3
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b086      	sub	sp, #24
 800501e:	af00      	add	r7, sp, #0
 8005020:	60f8      	str	r0, [r7, #12]
 8005022:	60b9      	str	r1, [r7, #8]
 8005024:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d141      	bne.n	80050b6 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800503a:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d109      	bne.n	8005056 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005048:	f043 0220 	orr.w	r2, r3, #32
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e038      	b.n	80050c8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800505e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d009      	beq.n	800507a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800506c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e026      	b.n	80050c8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005082:	0c1b      	lsrs	r3, r3, #16
 8005084:	f003 031f 	and.w	r3, r3, #31
 8005088:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	68b9      	ldr	r1, [r7, #8]
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 fe93 	bl	8005dbc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2101      	movs	r1, #1
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	fa01 f202 	lsl.w	r2, r1, r2
 80050a2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80050a6:	2201      	movs	r2, #1
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	409a      	lsls	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 80050b2:	2300      	movs	r3, #0
 80050b4:	e008      	b.n	80050c8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050bc:	f043 0208 	orr.w	r2, r3, #8
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
  }
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b08b      	sub	sp, #44	@ 0x2c
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80050de:	2300      	movs	r3, #0
 80050e0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80050e8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80050ea:	7efb      	ldrb	r3, [r7, #27]
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	f040 8149 	bne.w	8005384 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	2b40      	cmp	r3, #64	@ 0x40
 80050f6:	d14c      	bne.n	8005192 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005100:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d109      	bne.n	800511c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800510e:	f043 0220 	orr.w	r2, r3, #32
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e13c      	b.n	8005396 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005124:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005128:	2b00      	cmp	r3, #0
 800512a:	d109      	bne.n	8005140 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005132:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e12a      	b.n	8005396 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005148:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800514c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005150:	d10a      	bne.n	8005168 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800515a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800515e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005162:	d101      	bne.n	8005168 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005164:	2301      	movs	r3, #1
 8005166:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005170:	0a1b      	lsrs	r3, r3, #8
 8005172:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005176:	69fa      	ldr	r2, [r7, #28]
 8005178:	4413      	add	r3, r2
 800517a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005184:	69f9      	ldr	r1, [r7, #28]
 8005186:	fb01 f303 	mul.w	r3, r1, r3
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005190:	e068      	b.n	8005264 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b41      	cmp	r3, #65	@ 0x41
 8005196:	d14c      	bne.n	8005232 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80051a0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d109      	bne.n	80051bc <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051ae:	f043 0220 	orr.w	r2, r3, #32
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e0ec      	b.n	8005396 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80051c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d109      	bne.n	80051e0 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e0da      	b.n	8005396 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80051e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051f0:	d10a      	bne.n	8005208 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80051fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005202:	d101      	bne.n	8005208 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005204:	2301      	movs	r3, #1
 8005206:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005210:	0a1b      	lsrs	r3, r3, #8
 8005212:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005216:	69fa      	ldr	r2, [r7, #28]
 8005218:	4413      	add	r3, r2
 800521a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005224:	69f9      	ldr	r1, [r7, #28]
 8005226:	fb01 f303 	mul.w	r3, r1, r3
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005230:	e018      	b.n	8005264 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	429a      	cmp	r2, r3
 800523a:	d309      	bcc.n	8005250 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005242:	f043 0220 	orr.w	r2, r3, #32
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e0a2      	b.n	8005396 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005258:	68b9      	ldr	r1, [r7, #8]
 800525a:	fb01 f303 	mul.w	r3, r1, r3
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4413      	add	r3, r2
 8005262:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d107      	bne.n	8005288 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	0c9b      	lsrs	r3, r3, #18
 800527e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	601a      	str	r2, [r3, #0]
 8005286:	e005      	b.n	8005294 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80052a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80052ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ae:	3304      	adds	r3, #4
 80052b0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80052b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80052bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	0c1b      	lsrs	r3, r3, #16
 80052c2:	f003 020f 	and.w	r2, r3, #15
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80052ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80052d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80052e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	0e1b      	lsrs	r3, r3, #24
 80052e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80052f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	0fda      	lsrs	r2, r3, #31
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	3304      	adds	r3, #4
 80052fe:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005302:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005304:	2300      	movs	r3, #0
 8005306:	623b      	str	r3, [r7, #32]
 8005308:	e00a      	b.n	8005320 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	441a      	add	r2, r3
 8005310:	6839      	ldr	r1, [r7, #0]
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	440b      	add	r3, r1
 8005316:	7812      	ldrb	r2, [r2, #0]
 8005318:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	3301      	adds	r3, #1
 800531e:	623b      	str	r3, [r7, #32]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	4a1f      	ldr	r2, [pc, #124]	@ (80053a4 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8005326:	5cd3      	ldrb	r3, [r2, r3]
 8005328:	461a      	mov	r2, r3
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	4293      	cmp	r3, r2
 800532e:	d3ec      	bcc.n	800530a <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	2b40      	cmp	r3, #64	@ 0x40
 8005334:	d105      	bne.n	8005342 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	69fa      	ldr	r2, [r7, #28]
 800533c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8005340:	e01e      	b.n	8005380 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2b41      	cmp	r3, #65	@ 0x41
 8005346:	d105      	bne.n	8005354 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	69fa      	ldr	r2, [r7, #28]
 800534e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8005352:	e015      	b.n	8005380 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	2b1f      	cmp	r3, #31
 8005358:	d808      	bhi.n	800536c <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2101      	movs	r1, #1
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	fa01 f202 	lsl.w	r2, r1, r2
 8005366:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800536a:	e009      	b.n	8005380 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f003 021f 	and.w	r2, r3, #31
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2101      	movs	r1, #1
 8005378:	fa01 f202 	lsl.w	r2, r1, r2
 800537c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	e008      	b.n	8005396 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800538a:	f043 0208 	orr.w	r2, r3, #8
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
  }
}
 8005396:	4618      	mov	r0, r3
 8005398:	372c      	adds	r7, #44	@ 0x2c
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	0800bb80 	.word	0x0800bb80

080053a8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b087      	sub	sp, #28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80053ba:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80053bc:	7dfb      	ldrb	r3, [r7, #23]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d002      	beq.n	80053c8 <HAL_FDCAN_ActivateNotification+0x20>
 80053c2:	7dfb      	ldrb	r3, [r7, #23]
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d155      	bne.n	8005474 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	4013      	ands	r3, r2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d108      	bne.n	80053e8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f042 0201 	orr.w	r2, r2, #1
 80053e4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80053e6:	e014      	b.n	8005412 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	4013      	ands	r3, r2
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d108      	bne.n	800540a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0202 	orr.w	r2, r2, #2
 8005406:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005408:	e003      	b.n	8005412 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2203      	movs	r2, #3
 8005410:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005418:	2b00      	cmp	r3, #0
 800541a:	d009      	beq.n	8005430 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	430a      	orrs	r2, r1
 800542c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005436:	2b00      	cmp	r3, #0
 8005438:	d009      	beq.n	800544e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	430a      	orrs	r2, r1
 800544a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	4b0f      	ldr	r3, [pc, #60]	@ (8005494 <HAL_FDCAN_ActivateNotification+0xec>)
 8005458:	4013      	ands	r3, r2
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	6812      	ldr	r2, [r2, #0]
 800545e:	430b      	orrs	r3, r1
 8005460:	6553      	str	r3, [r2, #84]	@ 0x54
 8005462:	4b0d      	ldr	r3, [pc, #52]	@ (8005498 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005464:	695a      	ldr	r2, [r3, #20]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	0f9b      	lsrs	r3, r3, #30
 800546a:	490b      	ldr	r1, [pc, #44]	@ (8005498 <HAL_FDCAN_ActivateNotification+0xf0>)
 800546c:	4313      	orrs	r3, r2
 800546e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8005470:	2300      	movs	r3, #0
 8005472:	e008      	b.n	8005486 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800547a:	f043 0202 	orr.w	r2, r3, #2
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
  }
}
 8005486:	4618      	mov	r0, r3
 8005488:	371c      	adds	r7, #28
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	3fcfffff 	.word	0x3fcfffff
 8005498:	4000a800 	.word	0x4000a800

0800549c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b096      	sub	sp, #88	@ 0x58
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80054a4:	4b9a      	ldr	r3, [pc, #616]	@ (8005710 <HAL_FDCAN_IRQHandler+0x274>)
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	079b      	lsls	r3, r3, #30
 80054aa:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80054ac:	4b98      	ldr	r3, [pc, #608]	@ (8005710 <HAL_FDCAN_IRQHandler+0x274>)
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	079b      	lsls	r3, r3, #30
 80054b2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80054b4:	4013      	ands	r3, r2
 80054b6:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054be:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80054c2:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80054cc:	4013      	ands	r3, r2
 80054ce:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054d6:	f003 030f 	and.w	r3, r3, #15
 80054da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054e4:	4013      	ands	r3, r2
 80054e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054fc:	4013      	ands	r3, r2
 80054fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005506:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 800550a:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005512:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005514:	4013      	ands	r3, r2
 8005516:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800551e:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8005522:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800552a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800552c:	4013      	ands	r3, r2
 800552e:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005536:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800553e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005542:	0a1b      	lsrs	r3, r3, #8
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	2b00      	cmp	r3, #0
 800554a:	d010      	beq.n	800556e <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800554c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800554e:	0a1b      	lsrs	r3, r3, #8
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00a      	beq.n	800556e <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005560:	651a      	str	r2, [r3, #80]	@ 0x50
 8005562:	4b6b      	ldr	r3, [pc, #428]	@ (8005710 <HAL_FDCAN_IRQHandler+0x274>)
 8005564:	2200      	movs	r2, #0
 8005566:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fa54 	bl	8005a16 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800556e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005570:	0a9b      	lsrs	r3, r3, #10
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d01d      	beq.n	80055b6 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800557a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800557c:	0a9b      	lsrs	r3, r3, #10
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d017      	beq.n	80055b6 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800558e:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005598:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800559a:	4013      	ands	r3, r2
 800559c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80055a6:	651a      	str	r2, [r3, #80]	@ 0x50
 80055a8:	4b59      	ldr	r3, [pc, #356]	@ (8005710 <HAL_FDCAN_IRQHandler+0x274>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80055ae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 fa07 	bl	80059c4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80055b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00d      	beq.n	80055d8 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055c2:	4b54      	ldr	r3, [pc, #336]	@ (8005714 <HAL_FDCAN_IRQHandler+0x278>)
 80055c4:	400b      	ands	r3, r1
 80055c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80055c8:	4a51      	ldr	r2, [pc, #324]	@ (8005710 <HAL_FDCAN_IRQHandler+0x274>)
 80055ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055cc:	0f9b      	lsrs	r3, r3, #30
 80055ce:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80055d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f9c0 	bl	8005958 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80055d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00d      	beq.n	80055fa <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80055e4:	4b4b      	ldr	r3, [pc, #300]	@ (8005714 <HAL_FDCAN_IRQHandler+0x278>)
 80055e6:	400b      	ands	r3, r1
 80055e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80055ea:	4a49      	ldr	r2, [pc, #292]	@ (8005710 <HAL_FDCAN_IRQHandler+0x274>)
 80055ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055ee:	0f9b      	lsrs	r3, r3, #30
 80055f0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80055f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f9ba 	bl	800596e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80055fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00d      	beq.n	800561c <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005606:	4b43      	ldr	r3, [pc, #268]	@ (8005714 <HAL_FDCAN_IRQHandler+0x278>)
 8005608:	400b      	ands	r3, r1
 800560a:	6513      	str	r3, [r2, #80]	@ 0x50
 800560c:	4a40      	ldr	r2, [pc, #256]	@ (8005710 <HAL_FDCAN_IRQHandler+0x274>)
 800560e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005610:	0f9b      	lsrs	r3, r3, #30
 8005612:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005614:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7fc fa68 	bl	8001aec <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800561c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00d      	beq.n	800563e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005628:	4b3a      	ldr	r3, [pc, #232]	@ (8005714 <HAL_FDCAN_IRQHandler+0x278>)
 800562a:	400b      	ands	r3, r1
 800562c:	6513      	str	r3, [r2, #80]	@ 0x50
 800562e:	4a38      	ldr	r2, [pc, #224]	@ (8005710 <HAL_FDCAN_IRQHandler+0x274>)
 8005630:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005632:	0f9b      	lsrs	r3, r3, #30
 8005634:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005636:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f9a3 	bl	8005984 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800563e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005640:	0adb      	lsrs	r3, r3, #11
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d010      	beq.n	800566c <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800564a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564c:	0adb      	lsrs	r3, r3, #11
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800565e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005660:	4b2b      	ldr	r3, [pc, #172]	@ (8005710 <HAL_FDCAN_IRQHandler+0x274>)
 8005662:	2200      	movs	r2, #0
 8005664:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f997 	bl	800599a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 800566c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800566e:	0a5b      	lsrs	r3, r3, #9
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	d01d      	beq.n	80056b4 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800567a:	0a5b      	lsrs	r3, r3, #9
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	d017      	beq.n	80056b4 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800568c:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005696:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005698:	4013      	ands	r3, r2
 800569a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056a4:	651a      	str	r2, [r3, #80]	@ 0x50
 80056a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005710 <HAL_FDCAN_IRQHandler+0x274>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80056ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f97d 	bl	80059ae <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80056b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056b6:	0cdb      	lsrs	r3, r3, #19
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d010      	beq.n	80056e2 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80056c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c2:	0cdb      	lsrs	r3, r3, #19
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00a      	beq.n	80056e2 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80056d4:	651a      	str	r2, [r3, #80]	@ 0x50
 80056d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005710 <HAL_FDCAN_IRQHandler+0x274>)
 80056d8:	2200      	movs	r2, #0
 80056da:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f97c 	bl	80059da <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80056e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056e4:	0c1b      	lsrs	r3, r3, #16
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d016      	beq.n	800571c <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80056ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f0:	0c1b      	lsrs	r3, r3, #16
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d010      	beq.n	800571c <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005702:	651a      	str	r2, [r3, #80]	@ 0x50
 8005704:	4b02      	ldr	r3, [pc, #8]	@ (8005710 <HAL_FDCAN_IRQHandler+0x274>)
 8005706:	2200      	movs	r2, #0
 8005708:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	e004      	b.n	8005718 <HAL_FDCAN_IRQHandler+0x27c>
 800570e:	bf00      	nop
 8005710:	4000a800 	.word	0x4000a800
 8005714:	3fcfffff 	.word	0x3fcfffff
 8005718:	f000 f969 	bl	80059ee <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800571c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800571e:	0c9b      	lsrs	r3, r3, #18
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b00      	cmp	r3, #0
 8005726:	d010      	beq.n	800574a <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572a:	0c9b      	lsrs	r3, r3, #18
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00a      	beq.n	800574a <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800573c:	651a      	str	r2, [r3, #80]	@ 0x50
 800573e:	4b83      	ldr	r3, [pc, #524]	@ (800594c <HAL_FDCAN_IRQHandler+0x4b0>)
 8005740:	2200      	movs	r2, #0
 8005742:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f95c 	bl	8005a02 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800574a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800574c:	0c5b      	lsrs	r3, r3, #17
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d015      	beq.n	8005782 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005758:	0c5b      	lsrs	r3, r3, #17
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00f      	beq.n	8005782 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800576a:	651a      	str	r2, [r3, #80]	@ 0x50
 800576c:	4b77      	ldr	r3, [pc, #476]	@ (800594c <HAL_FDCAN_IRQHandler+0x4b0>)
 800576e:	2200      	movs	r2, #0
 8005770:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005778:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005782:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00d      	beq.n	80057a4 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800578e:	4b70      	ldr	r3, [pc, #448]	@ (8005950 <HAL_FDCAN_IRQHandler+0x4b4>)
 8005790:	400b      	ands	r3, r1
 8005792:	6513      	str	r3, [r2, #80]	@ 0x50
 8005794:	4a6d      	ldr	r2, [pc, #436]	@ (800594c <HAL_FDCAN_IRQHandler+0x4b0>)
 8005796:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005798:	0f9b      	lsrs	r3, r3, #30
 800579a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800579c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f94d 	bl	8005a3e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80057a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d011      	beq.n	80057ce <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80057b0:	4b67      	ldr	r3, [pc, #412]	@ (8005950 <HAL_FDCAN_IRQHandler+0x4b4>)
 80057b2:	400b      	ands	r3, r1
 80057b4:	6513      	str	r3, [r2, #80]	@ 0x50
 80057b6:	4a65      	ldr	r2, [pc, #404]	@ (800594c <HAL_FDCAN_IRQHandler+0x4b0>)
 80057b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057ba:	0f9b      	lsrs	r3, r3, #30
 80057bc:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80057c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a60      	ldr	r2, [pc, #384]	@ (8005954 <HAL_FDCAN_IRQHandler+0x4b8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	f040 80ac 	bne.w	8005932 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f003 0303 	and.w	r3, r3, #3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 80a4 	beq.w	8005932 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	f003 030f 	and.w	r3, r3, #15
 80057f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057fe:	4013      	ands	r3, r2
 8005800:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800580c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005814:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005816:	4013      	ands	r3, r2
 8005818:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005824:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800582e:	4013      	ands	r3, r2
 8005830:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 800583c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005844:	6a3a      	ldr	r2, [r7, #32]
 8005846:	4013      	ands	r3, r2
 8005848:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8005854:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585c:	69fa      	ldr	r2, [r7, #28]
 800585e:	4013      	ands	r3, r2
 8005860:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005868:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005874:	2b00      	cmp	r3, #0
 8005876:	d007      	beq.n	8005888 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800587e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005880:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f8e6 	bl	8005a54 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800588a:	2b00      	cmp	r3, #0
 800588c:	d007      	beq.n	800589e <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005894:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005896:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f8e6 	bl	8005a6a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	099b      	lsrs	r3, r3, #6
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d01a      	beq.n	80058e0 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	099b      	lsrs	r3, r3, #6
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d014      	beq.n	80058e0 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058bc:	0c1b      	lsrs	r3, r3, #16
 80058be:	b29b      	uxth	r3, r3
 80058c0:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058cc:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	2240      	movs	r2, #64	@ 0x40
 80058d4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	6939      	ldr	r1, [r7, #16]
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f8d0 	bl	8005a80 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80058e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d007      	beq.n	80058f6 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058ec:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80058ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f8d1 	bl	8005a98 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00b      	beq.n	8005914 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	6a3a      	ldr	r2, [r7, #32]
 8005902:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800590a:	6a3b      	ldr	r3, [r7, #32]
 800590c:	431a      	orrs	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00b      	beq.n	8005932 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	69fa      	ldr	r2, [r7, #28]
 8005920:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	431a      	orrs	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005938:	2b00      	cmp	r3, #0
 800593a:	d002      	beq.n	8005942 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f874 	bl	8005a2a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005942:	bf00      	nop
 8005944:	3758      	adds	r7, #88	@ 0x58
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	4000a800 	.word	0x4000a800
 8005950:	3fcfffff 	.word	0x3fcfffff
 8005954:	4000a000 	.word	0x4000a000

08005958 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005962:	bf00      	nop
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
 8005976:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80059e2:	bf00      	nop
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b083      	sub	sp, #12
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80059f6:	bf00      	nop
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005a0a:	bf00      	nop
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b083      	sub	sp, #12
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b083      	sub	sp, #12
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b083      	sub	sp, #12
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8005a5e:	bf00      	nop
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b083      	sub	sp, #12
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
 8005a72:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005a8c:	bf00      	nop
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
	...

08005ab0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005abc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005ac6:	4ba7      	ldr	r3, [pc, #668]	@ (8005d64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ac8:	4013      	ands	r3, r2
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	0091      	lsls	r1, r2, #2
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	6812      	ldr	r2, [r2, #0]
 8005ad2:	430b      	orrs	r3, r1
 8005ad4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ae0:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae8:	041a      	lsls	r2, r3, #16
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	4413      	add	r3, r2
 8005afc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005b06:	4b97      	ldr	r3, [pc, #604]	@ (8005d64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005b08:	4013      	ands	r3, r2
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	0091      	lsls	r1, r2, #2
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	6812      	ldr	r2, [r2, #0]
 8005b12:	430b      	orrs	r3, r1
 8005b14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b20:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b28:	041a      	lsls	r2, r3, #16
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b38:	005b      	lsls	r3, r3, #1
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005b48:	4b86      	ldr	r3, [pc, #536]	@ (8005d64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	0091      	lsls	r1, r2, #2
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	6812      	ldr	r2, [r2, #0]
 8005b54:	430b      	orrs	r3, r1
 8005b56:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005b62:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6a:	041a      	lsls	r2, r3, #16
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005b7e:	fb02 f303 	mul.w	r3, r2, r3
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	4413      	add	r3, r2
 8005b86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005b90:	4b74      	ldr	r3, [pc, #464]	@ (8005d64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005b92:	4013      	ands	r3, r2
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	0091      	lsls	r1, r2, #2
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	6812      	ldr	r2, [r2, #0]
 8005b9c:	430b      	orrs	r3, r1
 8005b9e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005baa:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bb2:	041a      	lsls	r2, r3, #16
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005bc6:	fb02 f303 	mul.w	r3, r2, r3
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	4413      	add	r3, r2
 8005bce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005bd8:	4b62      	ldr	r3, [pc, #392]	@ (8005d64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005bda:	4013      	ands	r3, r2
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	0091      	lsls	r1, r2, #2
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6812      	ldr	r2, [r2, #0]
 8005be4:	430b      	orrs	r3, r1
 8005be6:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005bf2:	fb02 f303 	mul.w	r3, r2, r3
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005c04:	4b57      	ldr	r3, [pc, #348]	@ (8005d64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c06:	4013      	ands	r3, r2
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	0091      	lsls	r1, r2, #2
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	6812      	ldr	r2, [r2, #0]
 8005c10:	430b      	orrs	r3, r1
 8005c12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c1e:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c26:	041a      	lsls	r2, r3, #16
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005c46:	4b47      	ldr	r3, [pc, #284]	@ (8005d64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	0091      	lsls	r1, r2, #2
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	6812      	ldr	r2, [r2, #0]
 8005c52:	430b      	orrs	r3, r1
 8005c54:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005c60:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c68:	041a      	lsls	r2, r3, #16
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005c7c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c84:	061a      	lsls	r2, r3, #24
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c94:	4b34      	ldr	r3, [pc, #208]	@ (8005d68 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005c96:	4413      	add	r3, r2
 8005c98:	009a      	lsls	r2, r3, #2
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	441a      	add	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	441a      	add	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc6:	6879      	ldr	r1, [r7, #4]
 8005cc8:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8005cca:	fb01 f303 	mul.w	r3, r1, r3
 8005cce:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005cd0:	441a      	add	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cde:	6879      	ldr	r1, [r7, #4]
 8005ce0:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8005ce2:	fb01 f303 	mul.w	r3, r1, r3
 8005ce6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005ce8:	441a      	add	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cf6:	6879      	ldr	r1, [r7, #4]
 8005cf8:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8005cfa:	fb01 f303 	mul.w	r3, r1, r3
 8005cfe:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005d00:	441a      	add	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d12:	00db      	lsls	r3, r3, #3
 8005d14:	441a      	add	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d26:	6879      	ldr	r1, [r7, #4]
 8005d28:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005d2a:	fb01 f303 	mul.w	r3, r1, r3
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	441a      	add	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d42:	6879      	ldr	r1, [r7, #4]
 8005d44:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005d46:	fb01 f303 	mul.w	r3, r1, r3
 8005d4a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005d4c:	441a      	add	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d5a:	4a04      	ldr	r2, [pc, #16]	@ (8005d6c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d915      	bls.n	8005d8c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005d60:	e006      	b.n	8005d70 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005d62:	bf00      	nop
 8005d64:	ffff0003 	.word	0xffff0003
 8005d68:	10002b00 	.word	0x10002b00
 8005d6c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d76:	f043 0220 	orr.w	r2, r3, #32
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2203      	movs	r2, #3
 8005d84:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e010      	b.n	8005dae <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	e005      	b.n	8005da0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d3f3      	bcc.n	8005d94 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop

08005dbc <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b089      	sub	sp, #36	@ 0x24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
 8005dc8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10a      	bne.n	8005de8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005dda:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005de2:	4313      	orrs	r3, r2
 8005de4:	61fb      	str	r3, [r7, #28]
 8005de6:	e00a      	b.n	8005dfe <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005df0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005df6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005df8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005dfc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005e08:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005e0e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005e14:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e2a:	6839      	ldr	r1, [r7, #0]
 8005e2c:	fb01 f303 	mul.w	r3, r1, r3
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4413      	add	r3, r2
 8005e34:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	69fa      	ldr	r2, [r7, #28]
 8005e3a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	3304      	adds	r3, #4
 8005e40:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005e4e:	2300      	movs	r3, #0
 8005e50:	617b      	str	r3, [r7, #20]
 8005e52:	e020      	b.n	8005e96 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	3303      	adds	r3, #3
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	3302      	adds	r3, #2
 8005e64:	6879      	ldr	r1, [r7, #4]
 8005e66:	440b      	add	r3, r1
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005e6c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	3301      	adds	r3, #1
 8005e72:	6879      	ldr	r1, [r7, #4]
 8005e74:	440b      	add	r3, r1
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005e7a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005e7c:	6879      	ldr	r1, [r7, #4]
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	440a      	add	r2, r1
 8005e82:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005e84:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	3304      	adds	r3, #4
 8005e94:	617b      	str	r3, [r7, #20]
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	4a06      	ldr	r2, [pc, #24]	@ (8005eb4 <FDCAN_CopyMessageToRAM+0xf8>)
 8005e9c:	5cd3      	ldrb	r3, [r2, r3]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d3d6      	bcc.n	8005e54 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8005ea6:	bf00      	nop
 8005ea8:	bf00      	nop
 8005eaa:	3724      	adds	r7, #36	@ 0x24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	0800bb80 	.word	0x0800bb80

08005eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b089      	sub	sp, #36	@ 0x24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005ec6:	4b86      	ldr	r3, [pc, #536]	@ (80060e0 <HAL_GPIO_Init+0x228>)
 8005ec8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005eca:	e18c      	b.n	80061e6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	2101      	movs	r1, #1
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed8:	4013      	ands	r3, r2
 8005eda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 817e 	beq.w	80061e0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f003 0303 	and.w	r3, r3, #3
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d005      	beq.n	8005efc <HAL_GPIO_Init+0x44>
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f003 0303 	and.w	r3, r3, #3
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d130      	bne.n	8005f5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	2203      	movs	r2, #3
 8005f08:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0c:	43db      	mvns	r3, r3
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	4013      	ands	r3, r2
 8005f12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	68da      	ldr	r2, [r3, #12]
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	005b      	lsls	r3, r3, #1
 8005f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f32:	2201      	movs	r2, #1
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3a:	43db      	mvns	r3, r3
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	4013      	ands	r3, r2
 8005f40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	091b      	lsrs	r3, r3, #4
 8005f48:	f003 0201 	and.w	r2, r3, #1
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	69ba      	ldr	r2, [r7, #24]
 8005f5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f003 0303 	and.w	r3, r3, #3
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	d017      	beq.n	8005f9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	005b      	lsls	r3, r3, #1
 8005f74:	2203      	movs	r2, #3
 8005f76:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7a:	43db      	mvns	r3, r3
 8005f7c:	69ba      	ldr	r2, [r7, #24]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	689a      	ldr	r2, [r3, #8]
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	005b      	lsls	r3, r3, #1
 8005f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f003 0303 	and.w	r3, r3, #3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d123      	bne.n	8005fee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	08da      	lsrs	r2, r3, #3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	3208      	adds	r2, #8
 8005fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	f003 0307 	and.w	r3, r3, #7
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	220f      	movs	r2, #15
 8005fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc2:	43db      	mvns	r3, r3
 8005fc4:	69ba      	ldr	r2, [r7, #24]
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	691a      	ldr	r2, [r3, #16]
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	f003 0307 	and.w	r3, r3, #7
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fda:	69ba      	ldr	r2, [r7, #24]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	08da      	lsrs	r2, r3, #3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3208      	adds	r2, #8
 8005fe8:	69b9      	ldr	r1, [r7, #24]
 8005fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	005b      	lsls	r3, r3, #1
 8005ff8:	2203      	movs	r2, #3
 8005ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffe:	43db      	mvns	r3, r3
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	4013      	ands	r3, r2
 8006004:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f003 0203 	and.w	r2, r3, #3
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	005b      	lsls	r3, r3, #1
 8006012:	fa02 f303 	lsl.w	r3, r2, r3
 8006016:	69ba      	ldr	r2, [r7, #24]
 8006018:	4313      	orrs	r3, r2
 800601a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800602a:	2b00      	cmp	r3, #0
 800602c:	f000 80d8 	beq.w	80061e0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006030:	4b2c      	ldr	r3, [pc, #176]	@ (80060e4 <HAL_GPIO_Init+0x22c>)
 8006032:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006036:	4a2b      	ldr	r2, [pc, #172]	@ (80060e4 <HAL_GPIO_Init+0x22c>)
 8006038:	f043 0302 	orr.w	r3, r3, #2
 800603c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006040:	4b28      	ldr	r3, [pc, #160]	@ (80060e4 <HAL_GPIO_Init+0x22c>)
 8006042:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800604e:	4a26      	ldr	r2, [pc, #152]	@ (80060e8 <HAL_GPIO_Init+0x230>)
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	089b      	lsrs	r3, r3, #2
 8006054:	3302      	adds	r3, #2
 8006056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800605a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	f003 0303 	and.w	r3, r3, #3
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	220f      	movs	r2, #15
 8006066:	fa02 f303 	lsl.w	r3, r2, r3
 800606a:	43db      	mvns	r3, r3
 800606c:	69ba      	ldr	r2, [r7, #24]
 800606e:	4013      	ands	r3, r2
 8006070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a1d      	ldr	r2, [pc, #116]	@ (80060ec <HAL_GPIO_Init+0x234>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d04a      	beq.n	8006110 <HAL_GPIO_Init+0x258>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a1c      	ldr	r2, [pc, #112]	@ (80060f0 <HAL_GPIO_Init+0x238>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d02b      	beq.n	80060da <HAL_GPIO_Init+0x222>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a1b      	ldr	r2, [pc, #108]	@ (80060f4 <HAL_GPIO_Init+0x23c>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d025      	beq.n	80060d6 <HAL_GPIO_Init+0x21e>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a1a      	ldr	r2, [pc, #104]	@ (80060f8 <HAL_GPIO_Init+0x240>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d01f      	beq.n	80060d2 <HAL_GPIO_Init+0x21a>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a19      	ldr	r2, [pc, #100]	@ (80060fc <HAL_GPIO_Init+0x244>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d019      	beq.n	80060ce <HAL_GPIO_Init+0x216>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a18      	ldr	r2, [pc, #96]	@ (8006100 <HAL_GPIO_Init+0x248>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d013      	beq.n	80060ca <HAL_GPIO_Init+0x212>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a17      	ldr	r2, [pc, #92]	@ (8006104 <HAL_GPIO_Init+0x24c>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d00d      	beq.n	80060c6 <HAL_GPIO_Init+0x20e>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a16      	ldr	r2, [pc, #88]	@ (8006108 <HAL_GPIO_Init+0x250>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d007      	beq.n	80060c2 <HAL_GPIO_Init+0x20a>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a15      	ldr	r2, [pc, #84]	@ (800610c <HAL_GPIO_Init+0x254>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d101      	bne.n	80060be <HAL_GPIO_Init+0x206>
 80060ba:	2309      	movs	r3, #9
 80060bc:	e029      	b.n	8006112 <HAL_GPIO_Init+0x25a>
 80060be:	230a      	movs	r3, #10
 80060c0:	e027      	b.n	8006112 <HAL_GPIO_Init+0x25a>
 80060c2:	2307      	movs	r3, #7
 80060c4:	e025      	b.n	8006112 <HAL_GPIO_Init+0x25a>
 80060c6:	2306      	movs	r3, #6
 80060c8:	e023      	b.n	8006112 <HAL_GPIO_Init+0x25a>
 80060ca:	2305      	movs	r3, #5
 80060cc:	e021      	b.n	8006112 <HAL_GPIO_Init+0x25a>
 80060ce:	2304      	movs	r3, #4
 80060d0:	e01f      	b.n	8006112 <HAL_GPIO_Init+0x25a>
 80060d2:	2303      	movs	r3, #3
 80060d4:	e01d      	b.n	8006112 <HAL_GPIO_Init+0x25a>
 80060d6:	2302      	movs	r3, #2
 80060d8:	e01b      	b.n	8006112 <HAL_GPIO_Init+0x25a>
 80060da:	2301      	movs	r3, #1
 80060dc:	e019      	b.n	8006112 <HAL_GPIO_Init+0x25a>
 80060de:	bf00      	nop
 80060e0:	58000080 	.word	0x58000080
 80060e4:	58024400 	.word	0x58024400
 80060e8:	58000400 	.word	0x58000400
 80060ec:	58020000 	.word	0x58020000
 80060f0:	58020400 	.word	0x58020400
 80060f4:	58020800 	.word	0x58020800
 80060f8:	58020c00 	.word	0x58020c00
 80060fc:	58021000 	.word	0x58021000
 8006100:	58021400 	.word	0x58021400
 8006104:	58021800 	.word	0x58021800
 8006108:	58021c00 	.word	0x58021c00
 800610c:	58022400 	.word	0x58022400
 8006110:	2300      	movs	r3, #0
 8006112:	69fa      	ldr	r2, [r7, #28]
 8006114:	f002 0203 	and.w	r2, r2, #3
 8006118:	0092      	lsls	r2, r2, #2
 800611a:	4093      	lsls	r3, r2
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	4313      	orrs	r3, r2
 8006120:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006122:	4938      	ldr	r1, [pc, #224]	@ (8006204 <HAL_GPIO_Init+0x34c>)
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	089b      	lsrs	r3, r3, #2
 8006128:	3302      	adds	r3, #2
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006130:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	43db      	mvns	r3, r3
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	4013      	ands	r3, r2
 8006140:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	4313      	orrs	r3, r2
 8006154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006156:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800615e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	43db      	mvns	r3, r3
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	4013      	ands	r3, r2
 800616e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d003      	beq.n	8006184 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	4313      	orrs	r3, r2
 8006182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006184:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	43db      	mvns	r3, r3
 8006196:	69ba      	ldr	r2, [r7, #24]
 8006198:	4013      	ands	r3, r2
 800619a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d003      	beq.n	80061b0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	43db      	mvns	r3, r3
 80061c0:	69ba      	ldr	r2, [r7, #24]
 80061c2:	4013      	ands	r3, r2
 80061c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	3301      	adds	r3, #1
 80061e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	fa22 f303 	lsr.w	r3, r2, r3
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f47f ae6b 	bne.w	8005ecc <HAL_GPIO_Init+0x14>
  }
}
 80061f6:	bf00      	nop
 80061f8:	bf00      	nop
 80061fa:	3724      	adds	r7, #36	@ 0x24
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr
 8006204:	58000400 	.word	0x58000400

08006208 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	460b      	mov	r3, r1
 8006212:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	691a      	ldr	r2, [r3, #16]
 8006218:	887b      	ldrh	r3, [r7, #2]
 800621a:	4013      	ands	r3, r2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006220:	2301      	movs	r3, #1
 8006222:	73fb      	strb	r3, [r7, #15]
 8006224:	e001      	b.n	800622a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006226:	2300      	movs	r3, #0
 8006228:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800622a:	7bfb      	ldrb	r3, [r7, #15]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	460b      	mov	r3, r1
 8006242:	807b      	strh	r3, [r7, #2]
 8006244:	4613      	mov	r3, r2
 8006246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006248:	787b      	ldrb	r3, [r7, #1]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d003      	beq.n	8006256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800624e:	887a      	ldrh	r2, [r7, #2]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006254:	e003      	b.n	800625e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006256:	887b      	ldrh	r3, [r7, #2]
 8006258:	041a      	lsls	r2, r3, #16
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	619a      	str	r2, [r3, #24]
}
 800625e:	bf00      	nop
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
	...

0800626c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006274:	4b19      	ldr	r3, [pc, #100]	@ (80062dc <HAL_PWREx_ConfigSupply+0x70>)
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f003 0304 	and.w	r3, r3, #4
 800627c:	2b04      	cmp	r3, #4
 800627e:	d00a      	beq.n	8006296 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006280:	4b16      	ldr	r3, [pc, #88]	@ (80062dc <HAL_PWREx_ConfigSupply+0x70>)
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	f003 0307 	and.w	r3, r3, #7
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	429a      	cmp	r2, r3
 800628c:	d001      	beq.n	8006292 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e01f      	b.n	80062d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006292:	2300      	movs	r3, #0
 8006294:	e01d      	b.n	80062d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006296:	4b11      	ldr	r3, [pc, #68]	@ (80062dc <HAL_PWREx_ConfigSupply+0x70>)
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	f023 0207 	bic.w	r2, r3, #7
 800629e:	490f      	ldr	r1, [pc, #60]	@ (80062dc <HAL_PWREx_ConfigSupply+0x70>)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80062a6:	f7fc fb7f 	bl	80029a8 <HAL_GetTick>
 80062aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80062ac:	e009      	b.n	80062c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80062ae:	f7fc fb7b 	bl	80029a8 <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80062bc:	d901      	bls.n	80062c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e007      	b.n	80062d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80062c2:	4b06      	ldr	r3, [pc, #24]	@ (80062dc <HAL_PWREx_ConfigSupply+0x70>)
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062ce:	d1ee      	bne.n	80062ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	58024800 	.word	0x58024800

080062e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b08c      	sub	sp, #48	@ 0x30
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e3c8      	b.n	8006a84 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 8087 	beq.w	800640e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006300:	4b88      	ldr	r3, [pc, #544]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006308:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800630a:	4b86      	ldr	r3, [pc, #536]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 800630c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006312:	2b10      	cmp	r3, #16
 8006314:	d007      	beq.n	8006326 <HAL_RCC_OscConfig+0x46>
 8006316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006318:	2b18      	cmp	r3, #24
 800631a:	d110      	bne.n	800633e <HAL_RCC_OscConfig+0x5e>
 800631c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800631e:	f003 0303 	and.w	r3, r3, #3
 8006322:	2b02      	cmp	r3, #2
 8006324:	d10b      	bne.n	800633e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006326:	4b7f      	ldr	r3, [pc, #508]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d06c      	beq.n	800640c <HAL_RCC_OscConfig+0x12c>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d168      	bne.n	800640c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e3a2      	b.n	8006a84 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006346:	d106      	bne.n	8006356 <HAL_RCC_OscConfig+0x76>
 8006348:	4b76      	ldr	r3, [pc, #472]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a75      	ldr	r2, [pc, #468]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 800634e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006352:	6013      	str	r3, [r2, #0]
 8006354:	e02e      	b.n	80063b4 <HAL_RCC_OscConfig+0xd4>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10c      	bne.n	8006378 <HAL_RCC_OscConfig+0x98>
 800635e:	4b71      	ldr	r3, [pc, #452]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a70      	ldr	r2, [pc, #448]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 8006364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006368:	6013      	str	r3, [r2, #0]
 800636a:	4b6e      	ldr	r3, [pc, #440]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a6d      	ldr	r2, [pc, #436]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 8006370:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006374:	6013      	str	r3, [r2, #0]
 8006376:	e01d      	b.n	80063b4 <HAL_RCC_OscConfig+0xd4>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006380:	d10c      	bne.n	800639c <HAL_RCC_OscConfig+0xbc>
 8006382:	4b68      	ldr	r3, [pc, #416]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a67      	ldr	r2, [pc, #412]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 8006388:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800638c:	6013      	str	r3, [r2, #0]
 800638e:	4b65      	ldr	r3, [pc, #404]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a64      	ldr	r2, [pc, #400]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 8006394:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006398:	6013      	str	r3, [r2, #0]
 800639a:	e00b      	b.n	80063b4 <HAL_RCC_OscConfig+0xd4>
 800639c:	4b61      	ldr	r3, [pc, #388]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a60      	ldr	r2, [pc, #384]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 80063a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063a6:	6013      	str	r3, [r2, #0]
 80063a8:	4b5e      	ldr	r3, [pc, #376]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a5d      	ldr	r2, [pc, #372]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 80063ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d013      	beq.n	80063e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063bc:	f7fc faf4 	bl	80029a8 <HAL_GetTick>
 80063c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063c2:	e008      	b.n	80063d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063c4:	f7fc faf0 	bl	80029a8 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	2b64      	cmp	r3, #100	@ 0x64
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e356      	b.n	8006a84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063d6:	4b53      	ldr	r3, [pc, #332]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d0f0      	beq.n	80063c4 <HAL_RCC_OscConfig+0xe4>
 80063e2:	e014      	b.n	800640e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e4:	f7fc fae0 	bl	80029a8 <HAL_GetTick>
 80063e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80063ea:	e008      	b.n	80063fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063ec:	f7fc fadc 	bl	80029a8 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	2b64      	cmp	r3, #100	@ 0x64
 80063f8:	d901      	bls.n	80063fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e342      	b.n	8006a84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80063fe:	4b49      	ldr	r3, [pc, #292]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1f0      	bne.n	80063ec <HAL_RCC_OscConfig+0x10c>
 800640a:	e000      	b.n	800640e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800640c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0302 	and.w	r3, r3, #2
 8006416:	2b00      	cmp	r3, #0
 8006418:	f000 808c 	beq.w	8006534 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800641c:	4b41      	ldr	r3, [pc, #260]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006424:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006426:	4b3f      	ldr	r3, [pc, #252]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 8006428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800642a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800642c:	6a3b      	ldr	r3, [r7, #32]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d007      	beq.n	8006442 <HAL_RCC_OscConfig+0x162>
 8006432:	6a3b      	ldr	r3, [r7, #32]
 8006434:	2b18      	cmp	r3, #24
 8006436:	d137      	bne.n	80064a8 <HAL_RCC_OscConfig+0x1c8>
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	f003 0303 	and.w	r3, r3, #3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d132      	bne.n	80064a8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006442:	4b38      	ldr	r3, [pc, #224]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0304 	and.w	r3, r3, #4
 800644a:	2b00      	cmp	r3, #0
 800644c:	d005      	beq.n	800645a <HAL_RCC_OscConfig+0x17a>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e314      	b.n	8006a84 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800645a:	4b32      	ldr	r3, [pc, #200]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f023 0219 	bic.w	r2, r3, #25
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	492f      	ldr	r1, [pc, #188]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 8006468:	4313      	orrs	r3, r2
 800646a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800646c:	f7fc fa9c 	bl	80029a8 <HAL_GetTick>
 8006470:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006472:	e008      	b.n	8006486 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006474:	f7fc fa98 	bl	80029a8 <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	2b02      	cmp	r3, #2
 8006480:	d901      	bls.n	8006486 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e2fe      	b.n	8006a84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006486:	4b27      	ldr	r3, [pc, #156]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0304 	and.w	r3, r3, #4
 800648e:	2b00      	cmp	r3, #0
 8006490:	d0f0      	beq.n	8006474 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006492:	4b24      	ldr	r3, [pc, #144]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	061b      	lsls	r3, r3, #24
 80064a0:	4920      	ldr	r1, [pc, #128]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064a6:	e045      	b.n	8006534 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d026      	beq.n	80064fe <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80064b0:	4b1c      	ldr	r3, [pc, #112]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f023 0219 	bic.w	r2, r3, #25
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	4919      	ldr	r1, [pc, #100]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c2:	f7fc fa71 	bl	80029a8 <HAL_GetTick>
 80064c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064c8:	e008      	b.n	80064dc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064ca:	f7fc fa6d 	bl	80029a8 <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d901      	bls.n	80064dc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e2d3      	b.n	8006a84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064dc:	4b11      	ldr	r3, [pc, #68]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d0f0      	beq.n	80064ca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064e8:	4b0e      	ldr	r3, [pc, #56]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	061b      	lsls	r3, r3, #24
 80064f6:	490b      	ldr	r1, [pc, #44]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	604b      	str	r3, [r1, #4]
 80064fc:	e01a      	b.n	8006534 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064fe:	4b09      	ldr	r3, [pc, #36]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a08      	ldr	r2, [pc, #32]	@ (8006524 <HAL_RCC_OscConfig+0x244>)
 8006504:	f023 0301 	bic.w	r3, r3, #1
 8006508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800650a:	f7fc fa4d 	bl	80029a8 <HAL_GetTick>
 800650e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006510:	e00a      	b.n	8006528 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006512:	f7fc fa49 	bl	80029a8 <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	2b02      	cmp	r3, #2
 800651e:	d903      	bls.n	8006528 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e2af      	b.n	8006a84 <HAL_RCC_OscConfig+0x7a4>
 8006524:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006528:	4b96      	ldr	r3, [pc, #600]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0304 	and.w	r3, r3, #4
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1ee      	bne.n	8006512 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0310 	and.w	r3, r3, #16
 800653c:	2b00      	cmp	r3, #0
 800653e:	d06a      	beq.n	8006616 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006540:	4b90      	ldr	r3, [pc, #576]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006548:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800654a:	4b8e      	ldr	r3, [pc, #568]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 800654c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	2b08      	cmp	r3, #8
 8006554:	d007      	beq.n	8006566 <HAL_RCC_OscConfig+0x286>
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	2b18      	cmp	r3, #24
 800655a:	d11b      	bne.n	8006594 <HAL_RCC_OscConfig+0x2b4>
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f003 0303 	and.w	r3, r3, #3
 8006562:	2b01      	cmp	r3, #1
 8006564:	d116      	bne.n	8006594 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006566:	4b87      	ldr	r3, [pc, #540]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800656e:	2b00      	cmp	r3, #0
 8006570:	d005      	beq.n	800657e <HAL_RCC_OscConfig+0x29e>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	2b80      	cmp	r3, #128	@ 0x80
 8006578:	d001      	beq.n	800657e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e282      	b.n	8006a84 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800657e:	4b81      	ldr	r3, [pc, #516]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	061b      	lsls	r3, r3, #24
 800658c:	497d      	ldr	r1, [pc, #500]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 800658e:	4313      	orrs	r3, r2
 8006590:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006592:	e040      	b.n	8006616 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d023      	beq.n	80065e4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800659c:	4b79      	ldr	r3, [pc, #484]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a78      	ldr	r2, [pc, #480]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 80065a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065a8:	f7fc f9fe 	bl	80029a8 <HAL_GetTick>
 80065ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80065ae:	e008      	b.n	80065c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80065b0:	f7fc f9fa 	bl	80029a8 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e260      	b.n	8006a84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80065c2:	4b70      	ldr	r3, [pc, #448]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d0f0      	beq.n	80065b0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065ce:	4b6d      	ldr	r3, [pc, #436]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	061b      	lsls	r3, r3, #24
 80065dc:	4969      	ldr	r1, [pc, #420]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	60cb      	str	r3, [r1, #12]
 80065e2:	e018      	b.n	8006616 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80065e4:	4b67      	ldr	r3, [pc, #412]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a66      	ldr	r2, [pc, #408]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 80065ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f0:	f7fc f9da 	bl	80029a8 <HAL_GetTick>
 80065f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80065f6:	e008      	b.n	800660a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80065f8:	f7fc f9d6 	bl	80029a8 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b02      	cmp	r3, #2
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e23c      	b.n	8006a84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800660a:	4b5e      	ldr	r3, [pc, #376]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1f0      	bne.n	80065f8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0308 	and.w	r3, r3, #8
 800661e:	2b00      	cmp	r3, #0
 8006620:	d036      	beq.n	8006690 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d019      	beq.n	800665e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800662a:	4b56      	ldr	r3, [pc, #344]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 800662c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800662e:	4a55      	ldr	r2, [pc, #340]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 8006630:	f043 0301 	orr.w	r3, r3, #1
 8006634:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006636:	f7fc f9b7 	bl	80029a8 <HAL_GetTick>
 800663a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800663c:	e008      	b.n	8006650 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800663e:	f7fc f9b3 	bl	80029a8 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	2b02      	cmp	r3, #2
 800664a:	d901      	bls.n	8006650 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e219      	b.n	8006a84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006650:	4b4c      	ldr	r3, [pc, #304]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 8006652:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006654:	f003 0302 	and.w	r3, r3, #2
 8006658:	2b00      	cmp	r3, #0
 800665a:	d0f0      	beq.n	800663e <HAL_RCC_OscConfig+0x35e>
 800665c:	e018      	b.n	8006690 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800665e:	4b49      	ldr	r3, [pc, #292]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 8006660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006662:	4a48      	ldr	r2, [pc, #288]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 8006664:	f023 0301 	bic.w	r3, r3, #1
 8006668:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800666a:	f7fc f99d 	bl	80029a8 <HAL_GetTick>
 800666e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006670:	e008      	b.n	8006684 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006672:	f7fc f999 	bl	80029a8 <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	2b02      	cmp	r3, #2
 800667e:	d901      	bls.n	8006684 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e1ff      	b.n	8006a84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006684:	4b3f      	ldr	r3, [pc, #252]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 8006686:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006688:	f003 0302 	and.w	r3, r3, #2
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1f0      	bne.n	8006672 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0320 	and.w	r3, r3, #32
 8006698:	2b00      	cmp	r3, #0
 800669a:	d036      	beq.n	800670a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d019      	beq.n	80066d8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80066a4:	4b37      	ldr	r3, [pc, #220]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a36      	ldr	r2, [pc, #216]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 80066aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80066ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80066b0:	f7fc f97a 	bl	80029a8 <HAL_GetTick>
 80066b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80066b6:	e008      	b.n	80066ca <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066b8:	f7fc f976 	bl	80029a8 <HAL_GetTick>
 80066bc:	4602      	mov	r2, r0
 80066be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d901      	bls.n	80066ca <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e1dc      	b.n	8006a84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80066ca:	4b2e      	ldr	r3, [pc, #184]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d0f0      	beq.n	80066b8 <HAL_RCC_OscConfig+0x3d8>
 80066d6:	e018      	b.n	800670a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80066d8:	4b2a      	ldr	r3, [pc, #168]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a29      	ldr	r2, [pc, #164]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 80066de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80066e4:	f7fc f960 	bl	80029a8 <HAL_GetTick>
 80066e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80066ea:	e008      	b.n	80066fe <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066ec:	f7fc f95c 	bl	80029a8 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d901      	bls.n	80066fe <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e1c2      	b.n	8006a84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80066fe:	4b21      	ldr	r3, [pc, #132]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1f0      	bne.n	80066ec <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 0304 	and.w	r3, r3, #4
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 8086 	beq.w	8006824 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006718:	4b1b      	ldr	r3, [pc, #108]	@ (8006788 <HAL_RCC_OscConfig+0x4a8>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a1a      	ldr	r2, [pc, #104]	@ (8006788 <HAL_RCC_OscConfig+0x4a8>)
 800671e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006722:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006724:	f7fc f940 	bl	80029a8 <HAL_GetTick>
 8006728:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800672a:	e008      	b.n	800673e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800672c:	f7fc f93c 	bl	80029a8 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b64      	cmp	r3, #100	@ 0x64
 8006738:	d901      	bls.n	800673e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e1a2      	b.n	8006a84 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800673e:	4b12      	ldr	r3, [pc, #72]	@ (8006788 <HAL_RCC_OscConfig+0x4a8>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006746:	2b00      	cmp	r3, #0
 8006748:	d0f0      	beq.n	800672c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d106      	bne.n	8006760 <HAL_RCC_OscConfig+0x480>
 8006752:	4b0c      	ldr	r3, [pc, #48]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 8006754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006756:	4a0b      	ldr	r2, [pc, #44]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 8006758:	f043 0301 	orr.w	r3, r3, #1
 800675c:	6713      	str	r3, [r2, #112]	@ 0x70
 800675e:	e032      	b.n	80067c6 <HAL_RCC_OscConfig+0x4e6>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d111      	bne.n	800678c <HAL_RCC_OscConfig+0x4ac>
 8006768:	4b06      	ldr	r3, [pc, #24]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 800676a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800676c:	4a05      	ldr	r2, [pc, #20]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 800676e:	f023 0301 	bic.w	r3, r3, #1
 8006772:	6713      	str	r3, [r2, #112]	@ 0x70
 8006774:	4b03      	ldr	r3, [pc, #12]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 8006776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006778:	4a02      	ldr	r2, [pc, #8]	@ (8006784 <HAL_RCC_OscConfig+0x4a4>)
 800677a:	f023 0304 	bic.w	r3, r3, #4
 800677e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006780:	e021      	b.n	80067c6 <HAL_RCC_OscConfig+0x4e6>
 8006782:	bf00      	nop
 8006784:	58024400 	.word	0x58024400
 8006788:	58024800 	.word	0x58024800
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	2b05      	cmp	r3, #5
 8006792:	d10c      	bne.n	80067ae <HAL_RCC_OscConfig+0x4ce>
 8006794:	4b83      	ldr	r3, [pc, #524]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 8006796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006798:	4a82      	ldr	r2, [pc, #520]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 800679a:	f043 0304 	orr.w	r3, r3, #4
 800679e:	6713      	str	r3, [r2, #112]	@ 0x70
 80067a0:	4b80      	ldr	r3, [pc, #512]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 80067a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067a4:	4a7f      	ldr	r2, [pc, #508]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 80067a6:	f043 0301 	orr.w	r3, r3, #1
 80067aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80067ac:	e00b      	b.n	80067c6 <HAL_RCC_OscConfig+0x4e6>
 80067ae:	4b7d      	ldr	r3, [pc, #500]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 80067b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067b2:	4a7c      	ldr	r2, [pc, #496]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 80067b4:	f023 0301 	bic.w	r3, r3, #1
 80067b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80067ba:	4b7a      	ldr	r3, [pc, #488]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 80067bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067be:	4a79      	ldr	r2, [pc, #484]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 80067c0:	f023 0304 	bic.w	r3, r3, #4
 80067c4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d015      	beq.n	80067fa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ce:	f7fc f8eb 	bl	80029a8 <HAL_GetTick>
 80067d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067d4:	e00a      	b.n	80067ec <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067d6:	f7fc f8e7 	bl	80029a8 <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d901      	bls.n	80067ec <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e14b      	b.n	8006a84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067ec:	4b6d      	ldr	r3, [pc, #436]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 80067ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d0ee      	beq.n	80067d6 <HAL_RCC_OscConfig+0x4f6>
 80067f8:	e014      	b.n	8006824 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067fa:	f7fc f8d5 	bl	80029a8 <HAL_GetTick>
 80067fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006800:	e00a      	b.n	8006818 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006802:	f7fc f8d1 	bl	80029a8 <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006810:	4293      	cmp	r3, r2
 8006812:	d901      	bls.n	8006818 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e135      	b.n	8006a84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006818:	4b62      	ldr	r3, [pc, #392]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 800681a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800681c:	f003 0302 	and.w	r3, r3, #2
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1ee      	bne.n	8006802 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 812a 	beq.w	8006a82 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800682e:	4b5d      	ldr	r3, [pc, #372]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006836:	2b18      	cmp	r3, #24
 8006838:	f000 80ba 	beq.w	80069b0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006840:	2b02      	cmp	r3, #2
 8006842:	f040 8095 	bne.w	8006970 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006846:	4b57      	ldr	r3, [pc, #348]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a56      	ldr	r2, [pc, #344]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 800684c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006852:	f7fc f8a9 	bl	80029a8 <HAL_GetTick>
 8006856:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006858:	e008      	b.n	800686c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800685a:	f7fc f8a5 	bl	80029a8 <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	2b02      	cmp	r3, #2
 8006866:	d901      	bls.n	800686c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e10b      	b.n	8006a84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800686c:	4b4d      	ldr	r3, [pc, #308]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1f0      	bne.n	800685a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006878:	4b4a      	ldr	r3, [pc, #296]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 800687a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800687c:	4b4a      	ldr	r3, [pc, #296]	@ (80069a8 <HAL_RCC_OscConfig+0x6c8>)
 800687e:	4013      	ands	r3, r2
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006888:	0112      	lsls	r2, r2, #4
 800688a:	430a      	orrs	r2, r1
 800688c:	4945      	ldr	r1, [pc, #276]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 800688e:	4313      	orrs	r3, r2
 8006890:	628b      	str	r3, [r1, #40]	@ 0x28
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006896:	3b01      	subs	r3, #1
 8006898:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068a0:	3b01      	subs	r3, #1
 80068a2:	025b      	lsls	r3, r3, #9
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	431a      	orrs	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ac:	3b01      	subs	r3, #1
 80068ae:	041b      	lsls	r3, r3, #16
 80068b0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80068b4:	431a      	orrs	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068ba:	3b01      	subs	r3, #1
 80068bc:	061b      	lsls	r3, r3, #24
 80068be:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80068c2:	4938      	ldr	r1, [pc, #224]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 80068c4:	4313      	orrs	r3, r2
 80068c6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80068c8:	4b36      	ldr	r3, [pc, #216]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 80068ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068cc:	4a35      	ldr	r2, [pc, #212]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 80068ce:	f023 0301 	bic.w	r3, r3, #1
 80068d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80068d4:	4b33      	ldr	r3, [pc, #204]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 80068d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068d8:	4b34      	ldr	r3, [pc, #208]	@ (80069ac <HAL_RCC_OscConfig+0x6cc>)
 80068da:	4013      	ands	r3, r2
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80068e0:	00d2      	lsls	r2, r2, #3
 80068e2:	4930      	ldr	r1, [pc, #192]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80068e8:	4b2e      	ldr	r3, [pc, #184]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 80068ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ec:	f023 020c 	bic.w	r2, r3, #12
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f4:	492b      	ldr	r1, [pc, #172]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80068fa:	4b2a      	ldr	r3, [pc, #168]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 80068fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068fe:	f023 0202 	bic.w	r2, r3, #2
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006906:	4927      	ldr	r1, [pc, #156]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 8006908:	4313      	orrs	r3, r2
 800690a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800690c:	4b25      	ldr	r3, [pc, #148]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 800690e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006910:	4a24      	ldr	r2, [pc, #144]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 8006912:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006916:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006918:	4b22      	ldr	r3, [pc, #136]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 800691a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800691c:	4a21      	ldr	r2, [pc, #132]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 800691e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006922:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006924:	4b1f      	ldr	r3, [pc, #124]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 8006926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006928:	4a1e      	ldr	r2, [pc, #120]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 800692a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800692e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006930:	4b1c      	ldr	r3, [pc, #112]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 8006932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006934:	4a1b      	ldr	r2, [pc, #108]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 8006936:	f043 0301 	orr.w	r3, r3, #1
 800693a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800693c:	4b19      	ldr	r3, [pc, #100]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a18      	ldr	r2, [pc, #96]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 8006942:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006948:	f7fc f82e 	bl	80029a8 <HAL_GetTick>
 800694c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800694e:	e008      	b.n	8006962 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006950:	f7fc f82a 	bl	80029a8 <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	2b02      	cmp	r3, #2
 800695c:	d901      	bls.n	8006962 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e090      	b.n	8006a84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006962:	4b10      	ldr	r3, [pc, #64]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d0f0      	beq.n	8006950 <HAL_RCC_OscConfig+0x670>
 800696e:	e088      	b.n	8006a82 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006970:	4b0c      	ldr	r3, [pc, #48]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a0b      	ldr	r2, [pc, #44]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 8006976:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800697a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800697c:	f7fc f814 	bl	80029a8 <HAL_GetTick>
 8006980:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006982:	e008      	b.n	8006996 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006984:	f7fc f810 	bl	80029a8 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	2b02      	cmp	r3, #2
 8006990:	d901      	bls.n	8006996 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e076      	b.n	8006a84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006996:	4b03      	ldr	r3, [pc, #12]	@ (80069a4 <HAL_RCC_OscConfig+0x6c4>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1f0      	bne.n	8006984 <HAL_RCC_OscConfig+0x6a4>
 80069a2:	e06e      	b.n	8006a82 <HAL_RCC_OscConfig+0x7a2>
 80069a4:	58024400 	.word	0x58024400
 80069a8:	fffffc0c 	.word	0xfffffc0c
 80069ac:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80069b0:	4b36      	ldr	r3, [pc, #216]	@ (8006a8c <HAL_RCC_OscConfig+0x7ac>)
 80069b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80069b6:	4b35      	ldr	r3, [pc, #212]	@ (8006a8c <HAL_RCC_OscConfig+0x7ac>)
 80069b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d031      	beq.n	8006a28 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	f003 0203 	and.w	r2, r3, #3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d12a      	bne.n	8006a28 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	091b      	lsrs	r3, r3, #4
 80069d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069de:	429a      	cmp	r2, r3
 80069e0:	d122      	bne.n	8006a28 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d11a      	bne.n	8006a28 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	0a5b      	lsrs	r3, r3, #9
 80069f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d111      	bne.n	8006a28 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	0c1b      	lsrs	r3, r3, #16
 8006a08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a10:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d108      	bne.n	8006a28 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	0e1b      	lsrs	r3, r3, #24
 8006a1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a22:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d001      	beq.n	8006a2c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e02b      	b.n	8006a84 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006a2c:	4b17      	ldr	r3, [pc, #92]	@ (8006a8c <HAL_RCC_OscConfig+0x7ac>)
 8006a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a30:	08db      	lsrs	r3, r3, #3
 8006a32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a36:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d01f      	beq.n	8006a82 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006a42:	4b12      	ldr	r3, [pc, #72]	@ (8006a8c <HAL_RCC_OscConfig+0x7ac>)
 8006a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a46:	4a11      	ldr	r2, [pc, #68]	@ (8006a8c <HAL_RCC_OscConfig+0x7ac>)
 8006a48:	f023 0301 	bic.w	r3, r3, #1
 8006a4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a4e:	f7fb ffab 	bl	80029a8 <HAL_GetTick>
 8006a52:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006a54:	bf00      	nop
 8006a56:	f7fb ffa7 	bl	80029a8 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d0f9      	beq.n	8006a56 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a62:	4b0a      	ldr	r3, [pc, #40]	@ (8006a8c <HAL_RCC_OscConfig+0x7ac>)
 8006a64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a66:	4b0a      	ldr	r3, [pc, #40]	@ (8006a90 <HAL_RCC_OscConfig+0x7b0>)
 8006a68:	4013      	ands	r3, r2
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006a6e:	00d2      	lsls	r2, r2, #3
 8006a70:	4906      	ldr	r1, [pc, #24]	@ (8006a8c <HAL_RCC_OscConfig+0x7ac>)
 8006a72:	4313      	orrs	r3, r2
 8006a74:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006a76:	4b05      	ldr	r3, [pc, #20]	@ (8006a8c <HAL_RCC_OscConfig+0x7ac>)
 8006a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7a:	4a04      	ldr	r2, [pc, #16]	@ (8006a8c <HAL_RCC_OscConfig+0x7ac>)
 8006a7c:	f043 0301 	orr.w	r3, r3, #1
 8006a80:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3730      	adds	r7, #48	@ 0x30
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	58024400 	.word	0x58024400
 8006a90:	ffff0007 	.word	0xffff0007

08006a94 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d101      	bne.n	8006aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e19c      	b.n	8006de2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006aa8:	4b8a      	ldr	r3, [pc, #552]	@ (8006cd4 <HAL_RCC_ClockConfig+0x240>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 030f 	and.w	r3, r3, #15
 8006ab0:	683a      	ldr	r2, [r7, #0]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d910      	bls.n	8006ad8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ab6:	4b87      	ldr	r3, [pc, #540]	@ (8006cd4 <HAL_RCC_ClockConfig+0x240>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f023 020f 	bic.w	r2, r3, #15
 8006abe:	4985      	ldr	r1, [pc, #532]	@ (8006cd4 <HAL_RCC_ClockConfig+0x240>)
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ac6:	4b83      	ldr	r3, [pc, #524]	@ (8006cd4 <HAL_RCC_ClockConfig+0x240>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 030f 	and.w	r3, r3, #15
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d001      	beq.n	8006ad8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e184      	b.n	8006de2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0304 	and.w	r3, r3, #4
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d010      	beq.n	8006b06 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	691a      	ldr	r2, [r3, #16]
 8006ae8:	4b7b      	ldr	r3, [pc, #492]	@ (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d908      	bls.n	8006b06 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006af4:	4b78      	ldr	r3, [pc, #480]	@ (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	4975      	ldr	r1, [pc, #468]	@ (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0308 	and.w	r3, r3, #8
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d010      	beq.n	8006b34 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	695a      	ldr	r2, [r3, #20]
 8006b16:	4b70      	ldr	r3, [pc, #448]	@ (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006b18:	69db      	ldr	r3, [r3, #28]
 8006b1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d908      	bls.n	8006b34 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b22:	4b6d      	ldr	r3, [pc, #436]	@ (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	496a      	ldr	r1, [pc, #424]	@ (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0310 	and.w	r3, r3, #16
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d010      	beq.n	8006b62 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	699a      	ldr	r2, [r3, #24]
 8006b44:	4b64      	ldr	r3, [pc, #400]	@ (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006b46:	69db      	ldr	r3, [r3, #28]
 8006b48:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d908      	bls.n	8006b62 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b50:	4b61      	ldr	r3, [pc, #388]	@ (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	495e      	ldr	r1, [pc, #376]	@ (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d010      	beq.n	8006b90 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	69da      	ldr	r2, [r3, #28]
 8006b72:	4b59      	ldr	r3, [pc, #356]	@ (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d908      	bls.n	8006b90 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006b7e:	4b56      	ldr	r3, [pc, #344]	@ (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	69db      	ldr	r3, [r3, #28]
 8006b8a:	4953      	ldr	r1, [pc, #332]	@ (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0302 	and.w	r3, r3, #2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d010      	beq.n	8006bbe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68da      	ldr	r2, [r3, #12]
 8006ba0:	4b4d      	ldr	r3, [pc, #308]	@ (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	f003 030f 	and.w	r3, r3, #15
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d908      	bls.n	8006bbe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bac:	4b4a      	ldr	r3, [pc, #296]	@ (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	f023 020f 	bic.w	r2, r3, #15
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	4947      	ldr	r1, [pc, #284]	@ (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d055      	beq.n	8006c76 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006bca:	4b43      	ldr	r3, [pc, #268]	@ (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	4940      	ldr	r1, [pc, #256]	@ (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d107      	bne.n	8006bf4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006be4:	4b3c      	ldr	r3, [pc, #240]	@ (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d121      	bne.n	8006c34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e0f6      	b.n	8006de2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	d107      	bne.n	8006c0c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006bfc:	4b36      	ldr	r3, [pc, #216]	@ (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d115      	bne.n	8006c34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e0ea      	b.n	8006de2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d107      	bne.n	8006c24 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c14:	4b30      	ldr	r3, [pc, #192]	@ (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d109      	bne.n	8006c34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e0de      	b.n	8006de2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c24:	4b2c      	ldr	r3, [pc, #176]	@ (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0304 	and.w	r3, r3, #4
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e0d6      	b.n	8006de2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c34:	4b28      	ldr	r3, [pc, #160]	@ (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	f023 0207 	bic.w	r2, r3, #7
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	4925      	ldr	r1, [pc, #148]	@ (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c46:	f7fb feaf 	bl	80029a8 <HAL_GetTick>
 8006c4a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c4c:	e00a      	b.n	8006c64 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c4e:	f7fb feab 	bl	80029a8 <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d901      	bls.n	8006c64 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e0be      	b.n	8006de2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c64:	4b1c      	ldr	r3, [pc, #112]	@ (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	00db      	lsls	r3, r3, #3
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d1eb      	bne.n	8006c4e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d010      	beq.n	8006ca4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68da      	ldr	r2, [r3, #12]
 8006c86:	4b14      	ldr	r3, [pc, #80]	@ (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	f003 030f 	and.w	r3, r3, #15
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d208      	bcs.n	8006ca4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c92:	4b11      	ldr	r3, [pc, #68]	@ (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	f023 020f 	bic.w	r2, r3, #15
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	490e      	ldr	r1, [pc, #56]	@ (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8006cd4 <HAL_RCC_ClockConfig+0x240>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 030f 	and.w	r3, r3, #15
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d214      	bcs.n	8006cdc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cb2:	4b08      	ldr	r3, [pc, #32]	@ (8006cd4 <HAL_RCC_ClockConfig+0x240>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f023 020f 	bic.w	r2, r3, #15
 8006cba:	4906      	ldr	r1, [pc, #24]	@ (8006cd4 <HAL_RCC_ClockConfig+0x240>)
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cc2:	4b04      	ldr	r3, [pc, #16]	@ (8006cd4 <HAL_RCC_ClockConfig+0x240>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 030f 	and.w	r3, r3, #15
 8006cca:	683a      	ldr	r2, [r7, #0]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d005      	beq.n	8006cdc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e086      	b.n	8006de2 <HAL_RCC_ClockConfig+0x34e>
 8006cd4:	52002000 	.word	0x52002000
 8006cd8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0304 	and.w	r3, r3, #4
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d010      	beq.n	8006d0a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	691a      	ldr	r2, [r3, #16]
 8006cec:	4b3f      	ldr	r3, [pc, #252]	@ (8006dec <HAL_RCC_ClockConfig+0x358>)
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d208      	bcs.n	8006d0a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006cf8:	4b3c      	ldr	r3, [pc, #240]	@ (8006dec <HAL_RCC_ClockConfig+0x358>)
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	4939      	ldr	r1, [pc, #228]	@ (8006dec <HAL_RCC_ClockConfig+0x358>)
 8006d06:	4313      	orrs	r3, r2
 8006d08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0308 	and.w	r3, r3, #8
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d010      	beq.n	8006d38 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	695a      	ldr	r2, [r3, #20]
 8006d1a:	4b34      	ldr	r3, [pc, #208]	@ (8006dec <HAL_RCC_ClockConfig+0x358>)
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d208      	bcs.n	8006d38 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d26:	4b31      	ldr	r3, [pc, #196]	@ (8006dec <HAL_RCC_ClockConfig+0x358>)
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	492e      	ldr	r1, [pc, #184]	@ (8006dec <HAL_RCC_ClockConfig+0x358>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0310 	and.w	r3, r3, #16
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d010      	beq.n	8006d66 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	699a      	ldr	r2, [r3, #24]
 8006d48:	4b28      	ldr	r3, [pc, #160]	@ (8006dec <HAL_RCC_ClockConfig+0x358>)
 8006d4a:	69db      	ldr	r3, [r3, #28]
 8006d4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d208      	bcs.n	8006d66 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d54:	4b25      	ldr	r3, [pc, #148]	@ (8006dec <HAL_RCC_ClockConfig+0x358>)
 8006d56:	69db      	ldr	r3, [r3, #28]
 8006d58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	4922      	ldr	r1, [pc, #136]	@ (8006dec <HAL_RCC_ClockConfig+0x358>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0320 	and.w	r3, r3, #32
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d010      	beq.n	8006d94 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	69da      	ldr	r2, [r3, #28]
 8006d76:	4b1d      	ldr	r3, [pc, #116]	@ (8006dec <HAL_RCC_ClockConfig+0x358>)
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d208      	bcs.n	8006d94 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006d82:	4b1a      	ldr	r3, [pc, #104]	@ (8006dec <HAL_RCC_ClockConfig+0x358>)
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	4917      	ldr	r1, [pc, #92]	@ (8006dec <HAL_RCC_ClockConfig+0x358>)
 8006d90:	4313      	orrs	r3, r2
 8006d92:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006d94:	f000 f834 	bl	8006e00 <HAL_RCC_GetSysClockFreq>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	4b14      	ldr	r3, [pc, #80]	@ (8006dec <HAL_RCC_ClockConfig+0x358>)
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	0a1b      	lsrs	r3, r3, #8
 8006da0:	f003 030f 	and.w	r3, r3, #15
 8006da4:	4912      	ldr	r1, [pc, #72]	@ (8006df0 <HAL_RCC_ClockConfig+0x35c>)
 8006da6:	5ccb      	ldrb	r3, [r1, r3]
 8006da8:	f003 031f 	and.w	r3, r3, #31
 8006dac:	fa22 f303 	lsr.w	r3, r2, r3
 8006db0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006db2:	4b0e      	ldr	r3, [pc, #56]	@ (8006dec <HAL_RCC_ClockConfig+0x358>)
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	f003 030f 	and.w	r3, r3, #15
 8006dba:	4a0d      	ldr	r2, [pc, #52]	@ (8006df0 <HAL_RCC_ClockConfig+0x35c>)
 8006dbc:	5cd3      	ldrb	r3, [r2, r3]
 8006dbe:	f003 031f 	and.w	r3, r3, #31
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8006dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8006df4 <HAL_RCC_ClockConfig+0x360>)
 8006dca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8006df8 <HAL_RCC_ClockConfig+0x364>)
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8006dfc <HAL_RCC_ClockConfig+0x368>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fb fd9c 	bl	8002914 <HAL_InitTick>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3718      	adds	r7, #24
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	58024400 	.word	0x58024400
 8006df0:	0800bb70 	.word	0x0800bb70
 8006df4:	2400000c 	.word	0x2400000c
 8006df8:	24000008 	.word	0x24000008
 8006dfc:	24000010 	.word	0x24000010

08006e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b089      	sub	sp, #36	@ 0x24
 8006e04:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e06:	4bb3      	ldr	r3, [pc, #716]	@ (80070d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e0e:	2b18      	cmp	r3, #24
 8006e10:	f200 8155 	bhi.w	80070be <HAL_RCC_GetSysClockFreq+0x2be>
 8006e14:	a201      	add	r2, pc, #4	@ (adr r2, 8006e1c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1a:	bf00      	nop
 8006e1c:	08006e81 	.word	0x08006e81
 8006e20:	080070bf 	.word	0x080070bf
 8006e24:	080070bf 	.word	0x080070bf
 8006e28:	080070bf 	.word	0x080070bf
 8006e2c:	080070bf 	.word	0x080070bf
 8006e30:	080070bf 	.word	0x080070bf
 8006e34:	080070bf 	.word	0x080070bf
 8006e38:	080070bf 	.word	0x080070bf
 8006e3c:	08006ea7 	.word	0x08006ea7
 8006e40:	080070bf 	.word	0x080070bf
 8006e44:	080070bf 	.word	0x080070bf
 8006e48:	080070bf 	.word	0x080070bf
 8006e4c:	080070bf 	.word	0x080070bf
 8006e50:	080070bf 	.word	0x080070bf
 8006e54:	080070bf 	.word	0x080070bf
 8006e58:	080070bf 	.word	0x080070bf
 8006e5c:	08006ead 	.word	0x08006ead
 8006e60:	080070bf 	.word	0x080070bf
 8006e64:	080070bf 	.word	0x080070bf
 8006e68:	080070bf 	.word	0x080070bf
 8006e6c:	080070bf 	.word	0x080070bf
 8006e70:	080070bf 	.word	0x080070bf
 8006e74:	080070bf 	.word	0x080070bf
 8006e78:	080070bf 	.word	0x080070bf
 8006e7c:	08006eb3 	.word	0x08006eb3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e80:	4b94      	ldr	r3, [pc, #592]	@ (80070d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0320 	and.w	r3, r3, #32
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d009      	beq.n	8006ea0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e8c:	4b91      	ldr	r3, [pc, #580]	@ (80070d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	08db      	lsrs	r3, r3, #3
 8006e92:	f003 0303 	and.w	r3, r3, #3
 8006e96:	4a90      	ldr	r2, [pc, #576]	@ (80070d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e98:	fa22 f303 	lsr.w	r3, r2, r3
 8006e9c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006e9e:	e111      	b.n	80070c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006ea0:	4b8d      	ldr	r3, [pc, #564]	@ (80070d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ea2:	61bb      	str	r3, [r7, #24]
      break;
 8006ea4:	e10e      	b.n	80070c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006ea6:	4b8d      	ldr	r3, [pc, #564]	@ (80070dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006ea8:	61bb      	str	r3, [r7, #24]
      break;
 8006eaa:	e10b      	b.n	80070c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006eac:	4b8c      	ldr	r3, [pc, #560]	@ (80070e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006eae:	61bb      	str	r3, [r7, #24]
      break;
 8006eb0:	e108      	b.n	80070c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006eb2:	4b88      	ldr	r3, [pc, #544]	@ (80070d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb6:	f003 0303 	and.w	r3, r3, #3
 8006eba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006ebc:	4b85      	ldr	r3, [pc, #532]	@ (80070d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec0:	091b      	lsrs	r3, r3, #4
 8006ec2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ec6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006ec8:	4b82      	ldr	r3, [pc, #520]	@ (80070d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006ed2:	4b80      	ldr	r3, [pc, #512]	@ (80070d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ed6:	08db      	lsrs	r3, r3, #3
 8006ed8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	fb02 f303 	mul.w	r3, r2, r3
 8006ee2:	ee07 3a90 	vmov	s15, r3
 8006ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 80e1 	beq.w	80070b8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	f000 8083 	beq.w	8007004 <HAL_RCC_GetSysClockFreq+0x204>
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	f200 80a1 	bhi.w	8007048 <HAL_RCC_GetSysClockFreq+0x248>
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d003      	beq.n	8006f14 <HAL_RCC_GetSysClockFreq+0x114>
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d056      	beq.n	8006fc0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006f12:	e099      	b.n	8007048 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f14:	4b6f      	ldr	r3, [pc, #444]	@ (80070d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0320 	and.w	r3, r3, #32
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d02d      	beq.n	8006f7c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f20:	4b6c      	ldr	r3, [pc, #432]	@ (80070d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	08db      	lsrs	r3, r3, #3
 8006f26:	f003 0303 	and.w	r3, r3, #3
 8006f2a:	4a6b      	ldr	r2, [pc, #428]	@ (80070d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f30:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	ee07 3a90 	vmov	s15, r3
 8006f38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	ee07 3a90 	vmov	s15, r3
 8006f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f4a:	4b62      	ldr	r3, [pc, #392]	@ (80070d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f52:	ee07 3a90 	vmov	s15, r3
 8006f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f5e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80070e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f76:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006f7a:	e087      	b.n	800708c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	ee07 3a90 	vmov	s15, r3
 8006f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f86:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80070e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f8e:	4b51      	ldr	r3, [pc, #324]	@ (80070d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f96:	ee07 3a90 	vmov	s15, r3
 8006f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fa2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80070e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006fbe:	e065      	b.n	800708c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	ee07 3a90 	vmov	s15, r3
 8006fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fca:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80070ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8006fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fd2:	4b40      	ldr	r3, [pc, #256]	@ (80070d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fda:	ee07 3a90 	vmov	s15, r3
 8006fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fe2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fe6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80070e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ff2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ffe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007002:	e043      	b.n	800708c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	ee07 3a90 	vmov	s15, r3
 800700a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800700e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80070f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007016:	4b2f      	ldr	r3, [pc, #188]	@ (80070d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800701a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800701e:	ee07 3a90 	vmov	s15, r3
 8007022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007026:	ed97 6a02 	vldr	s12, [r7, #8]
 800702a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80070e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800702e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800703a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800703e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007042:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007046:	e021      	b.n	800708c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	ee07 3a90 	vmov	s15, r3
 800704e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007052:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80070ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8007056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800705a:	4b1e      	ldr	r3, [pc, #120]	@ (80070d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800705c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800705e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007062:	ee07 3a90 	vmov	s15, r3
 8007066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800706a:	ed97 6a02 	vldr	s12, [r7, #8]
 800706e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80070e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800707a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800707e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007086:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800708a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800708c:	4b11      	ldr	r3, [pc, #68]	@ (80070d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800708e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007090:	0a5b      	lsrs	r3, r3, #9
 8007092:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007096:	3301      	adds	r3, #1
 8007098:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	ee07 3a90 	vmov	s15, r3
 80070a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80070a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80070a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070b0:	ee17 3a90 	vmov	r3, s15
 80070b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80070b6:	e005      	b.n	80070c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80070b8:	2300      	movs	r3, #0
 80070ba:	61bb      	str	r3, [r7, #24]
      break;
 80070bc:	e002      	b.n	80070c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80070be:	4b07      	ldr	r3, [pc, #28]	@ (80070dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80070c0:	61bb      	str	r3, [r7, #24]
      break;
 80070c2:	bf00      	nop
  }

  return sysclockfreq;
 80070c4:	69bb      	ldr	r3, [r7, #24]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3724      	adds	r7, #36	@ 0x24
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	58024400 	.word	0x58024400
 80070d8:	03d09000 	.word	0x03d09000
 80070dc:	003d0900 	.word	0x003d0900
 80070e0:	016e3600 	.word	0x016e3600
 80070e4:	46000000 	.word	0x46000000
 80070e8:	4c742400 	.word	0x4c742400
 80070ec:	4a742400 	.word	0x4a742400
 80070f0:	4bb71b00 	.word	0x4bb71b00

080070f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80070fa:	f7ff fe81 	bl	8006e00 <HAL_RCC_GetSysClockFreq>
 80070fe:	4602      	mov	r2, r0
 8007100:	4b10      	ldr	r3, [pc, #64]	@ (8007144 <HAL_RCC_GetHCLKFreq+0x50>)
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	0a1b      	lsrs	r3, r3, #8
 8007106:	f003 030f 	and.w	r3, r3, #15
 800710a:	490f      	ldr	r1, [pc, #60]	@ (8007148 <HAL_RCC_GetHCLKFreq+0x54>)
 800710c:	5ccb      	ldrb	r3, [r1, r3]
 800710e:	f003 031f 	and.w	r3, r3, #31
 8007112:	fa22 f303 	lsr.w	r3, r2, r3
 8007116:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007118:	4b0a      	ldr	r3, [pc, #40]	@ (8007144 <HAL_RCC_GetHCLKFreq+0x50>)
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	f003 030f 	and.w	r3, r3, #15
 8007120:	4a09      	ldr	r2, [pc, #36]	@ (8007148 <HAL_RCC_GetHCLKFreq+0x54>)
 8007122:	5cd3      	ldrb	r3, [r2, r3]
 8007124:	f003 031f 	and.w	r3, r3, #31
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	fa22 f303 	lsr.w	r3, r2, r3
 800712e:	4a07      	ldr	r2, [pc, #28]	@ (800714c <HAL_RCC_GetHCLKFreq+0x58>)
 8007130:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007132:	4a07      	ldr	r2, [pc, #28]	@ (8007150 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007138:	4b04      	ldr	r3, [pc, #16]	@ (800714c <HAL_RCC_GetHCLKFreq+0x58>)
 800713a:	681b      	ldr	r3, [r3, #0]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	58024400 	.word	0x58024400
 8007148:	0800bb70 	.word	0x0800bb70
 800714c:	2400000c 	.word	0x2400000c
 8007150:	24000008 	.word	0x24000008

08007154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007158:	f7ff ffcc 	bl	80070f4 <HAL_RCC_GetHCLKFreq>
 800715c:	4602      	mov	r2, r0
 800715e:	4b06      	ldr	r3, [pc, #24]	@ (8007178 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007160:	69db      	ldr	r3, [r3, #28]
 8007162:	091b      	lsrs	r3, r3, #4
 8007164:	f003 0307 	and.w	r3, r3, #7
 8007168:	4904      	ldr	r1, [pc, #16]	@ (800717c <HAL_RCC_GetPCLK1Freq+0x28>)
 800716a:	5ccb      	ldrb	r3, [r1, r3]
 800716c:	f003 031f 	and.w	r3, r3, #31
 8007170:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007174:	4618      	mov	r0, r3
 8007176:	bd80      	pop	{r7, pc}
 8007178:	58024400 	.word	0x58024400
 800717c:	0800bb70 	.word	0x0800bb70

08007180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007184:	f7ff ffb6 	bl	80070f4 <HAL_RCC_GetHCLKFreq>
 8007188:	4602      	mov	r2, r0
 800718a:	4b06      	ldr	r3, [pc, #24]	@ (80071a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	0a1b      	lsrs	r3, r3, #8
 8007190:	f003 0307 	and.w	r3, r3, #7
 8007194:	4904      	ldr	r1, [pc, #16]	@ (80071a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007196:	5ccb      	ldrb	r3, [r1, r3]
 8007198:	f003 031f 	and.w	r3, r3, #31
 800719c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	58024400 	.word	0x58024400
 80071a8:	0800bb70 	.word	0x0800bb70

080071ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071b0:	b0c6      	sub	sp, #280	@ 0x118
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80071b8:	2300      	movs	r3, #0
 80071ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80071be:	2300      	movs	r3, #0
 80071c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80071c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071cc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80071d0:	2500      	movs	r5, #0
 80071d2:	ea54 0305 	orrs.w	r3, r4, r5
 80071d6:	d049      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80071d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80071e2:	d02f      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80071e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80071e8:	d828      	bhi.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80071ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071ee:	d01a      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80071f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071f4:	d822      	bhi.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d003      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80071fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071fe:	d007      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007200:	e01c      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007202:	4bab      	ldr	r3, [pc, #684]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007206:	4aaa      	ldr	r2, [pc, #680]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007208:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800720c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800720e:	e01a      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007214:	3308      	adds	r3, #8
 8007216:	2102      	movs	r1, #2
 8007218:	4618      	mov	r0, r3
 800721a:	f002 fa49 	bl	80096b0 <RCCEx_PLL2_Config>
 800721e:	4603      	mov	r3, r0
 8007220:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007224:	e00f      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800722a:	3328      	adds	r3, #40	@ 0x28
 800722c:	2102      	movs	r1, #2
 800722e:	4618      	mov	r0, r3
 8007230:	f002 faf0 	bl	8009814 <RCCEx_PLL3_Config>
 8007234:	4603      	mov	r3, r0
 8007236:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800723a:	e004      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007242:	e000      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007246:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10a      	bne.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800724e:	4b98      	ldr	r3, [pc, #608]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007252:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800725a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800725c:	4a94      	ldr	r2, [pc, #592]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800725e:	430b      	orrs	r3, r1
 8007260:	6513      	str	r3, [r2, #80]	@ 0x50
 8007262:	e003      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007264:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007268:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800726c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007274:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007278:	f04f 0900 	mov.w	r9, #0
 800727c:	ea58 0309 	orrs.w	r3, r8, r9
 8007280:	d047      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007288:	2b04      	cmp	r3, #4
 800728a:	d82a      	bhi.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800728c:	a201      	add	r2, pc, #4	@ (adr r2, 8007294 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800728e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007292:	bf00      	nop
 8007294:	080072a9 	.word	0x080072a9
 8007298:	080072b7 	.word	0x080072b7
 800729c:	080072cd 	.word	0x080072cd
 80072a0:	080072eb 	.word	0x080072eb
 80072a4:	080072eb 	.word	0x080072eb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072a8:	4b81      	ldr	r3, [pc, #516]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80072aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ac:	4a80      	ldr	r2, [pc, #512]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80072ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072b4:	e01a      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ba:	3308      	adds	r3, #8
 80072bc:	2100      	movs	r1, #0
 80072be:	4618      	mov	r0, r3
 80072c0:	f002 f9f6 	bl	80096b0 <RCCEx_PLL2_Config>
 80072c4:	4603      	mov	r3, r0
 80072c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072ca:	e00f      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072d0:	3328      	adds	r3, #40	@ 0x28
 80072d2:	2100      	movs	r1, #0
 80072d4:	4618      	mov	r0, r3
 80072d6:	f002 fa9d 	bl	8009814 <RCCEx_PLL3_Config>
 80072da:	4603      	mov	r3, r0
 80072dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072e0:	e004      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80072e8:	e000      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80072ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10a      	bne.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80072f4:	4b6e      	ldr	r3, [pc, #440]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80072f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072f8:	f023 0107 	bic.w	r1, r3, #7
 80072fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007302:	4a6b      	ldr	r2, [pc, #428]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007304:	430b      	orrs	r3, r1
 8007306:	6513      	str	r3, [r2, #80]	@ 0x50
 8007308:	e003      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800730a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800730e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800731e:	f04f 0b00 	mov.w	fp, #0
 8007322:	ea5a 030b 	orrs.w	r3, sl, fp
 8007326:	d05b      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800732c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007330:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007334:	d03b      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007336:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800733a:	d834      	bhi.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800733c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007340:	d037      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007342:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007346:	d82e      	bhi.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007348:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800734c:	d033      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800734e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007352:	d828      	bhi.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007354:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007358:	d01a      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800735a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800735e:	d822      	bhi.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007360:	2b00      	cmp	r3, #0
 8007362:	d003      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007364:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007368:	d007      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800736a:	e01c      	b.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800736c:	4b50      	ldr	r3, [pc, #320]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800736e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007370:	4a4f      	ldr	r2, [pc, #316]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007372:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007376:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007378:	e01e      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800737a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800737e:	3308      	adds	r3, #8
 8007380:	2100      	movs	r1, #0
 8007382:	4618      	mov	r0, r3
 8007384:	f002 f994 	bl	80096b0 <RCCEx_PLL2_Config>
 8007388:	4603      	mov	r3, r0
 800738a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800738e:	e013      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007394:	3328      	adds	r3, #40	@ 0x28
 8007396:	2100      	movs	r1, #0
 8007398:	4618      	mov	r0, r3
 800739a:	f002 fa3b 	bl	8009814 <RCCEx_PLL3_Config>
 800739e:	4603      	mov	r3, r0
 80073a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073a4:	e008      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80073ac:	e004      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80073ae:	bf00      	nop
 80073b0:	e002      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80073b2:	bf00      	nop
 80073b4:	e000      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80073b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10b      	bne.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80073c0:	4b3b      	ldr	r3, [pc, #236]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80073c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073c4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80073c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80073d0:	4a37      	ldr	r2, [pc, #220]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80073d2:	430b      	orrs	r3, r1
 80073d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80073d6:	e003      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80073e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80073ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80073f0:	2300      	movs	r3, #0
 80073f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80073f6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80073fa:	460b      	mov	r3, r1
 80073fc:	4313      	orrs	r3, r2
 80073fe:	d05d      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007404:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007408:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800740c:	d03b      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800740e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007412:	d834      	bhi.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007414:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007418:	d037      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800741a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800741e:	d82e      	bhi.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007420:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007424:	d033      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8007426:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800742a:	d828      	bhi.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800742c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007430:	d01a      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8007432:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007436:	d822      	bhi.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007438:	2b00      	cmp	r3, #0
 800743a:	d003      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800743c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007440:	d007      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007442:	e01c      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007444:	4b1a      	ldr	r3, [pc, #104]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007448:	4a19      	ldr	r2, [pc, #100]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800744a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800744e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007450:	e01e      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007456:	3308      	adds	r3, #8
 8007458:	2100      	movs	r1, #0
 800745a:	4618      	mov	r0, r3
 800745c:	f002 f928 	bl	80096b0 <RCCEx_PLL2_Config>
 8007460:	4603      	mov	r3, r0
 8007462:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007466:	e013      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800746c:	3328      	adds	r3, #40	@ 0x28
 800746e:	2100      	movs	r1, #0
 8007470:	4618      	mov	r0, r3
 8007472:	f002 f9cf 	bl	8009814 <RCCEx_PLL3_Config>
 8007476:	4603      	mov	r3, r0
 8007478:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800747c:	e008      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007484:	e004      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007486:	bf00      	nop
 8007488:	e002      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800748a:	bf00      	nop
 800748c:	e000      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800748e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007490:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10d      	bne.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007498:	4b05      	ldr	r3, [pc, #20]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800749a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800749c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80074a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80074a8:	4a01      	ldr	r2, [pc, #4]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80074aa:	430b      	orrs	r3, r1
 80074ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80074ae:	e005      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80074b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80074bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80074c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80074cc:	2300      	movs	r3, #0
 80074ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80074d2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80074d6:	460b      	mov	r3, r1
 80074d8:	4313      	orrs	r3, r2
 80074da:	d03a      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80074dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074e2:	2b30      	cmp	r3, #48	@ 0x30
 80074e4:	d01f      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80074e6:	2b30      	cmp	r3, #48	@ 0x30
 80074e8:	d819      	bhi.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80074ea:	2b20      	cmp	r3, #32
 80074ec:	d00c      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80074ee:	2b20      	cmp	r3, #32
 80074f0:	d815      	bhi.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d019      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80074f6:	2b10      	cmp	r3, #16
 80074f8:	d111      	bne.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074fa:	4baa      	ldr	r3, [pc, #680]	@ (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80074fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074fe:	4aa9      	ldr	r2, [pc, #676]	@ (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007500:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007504:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007506:	e011      	b.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800750c:	3308      	adds	r3, #8
 800750e:	2102      	movs	r1, #2
 8007510:	4618      	mov	r0, r3
 8007512:	f002 f8cd 	bl	80096b0 <RCCEx_PLL2_Config>
 8007516:	4603      	mov	r3, r0
 8007518:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800751c:	e006      	b.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007524:	e002      	b.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007526:	bf00      	nop
 8007528:	e000      	b.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800752a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800752c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10a      	bne.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007534:	4b9b      	ldr	r3, [pc, #620]	@ (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007538:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800753c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007542:	4a98      	ldr	r2, [pc, #608]	@ (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007544:	430b      	orrs	r3, r1
 8007546:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007548:	e003      	b.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800754a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800754e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800755e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007562:	2300      	movs	r3, #0
 8007564:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007568:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800756c:	460b      	mov	r3, r1
 800756e:	4313      	orrs	r3, r2
 8007570:	d051      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007578:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800757c:	d035      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800757e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007582:	d82e      	bhi.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007584:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007588:	d031      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x442>
 800758a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800758e:	d828      	bhi.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007590:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007594:	d01a      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007596:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800759a:	d822      	bhi.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800759c:	2b00      	cmp	r3, #0
 800759e:	d003      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80075a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075a4:	d007      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80075a6:	e01c      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075a8:	4b7e      	ldr	r3, [pc, #504]	@ (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ac:	4a7d      	ldr	r2, [pc, #500]	@ (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80075b4:	e01c      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ba:	3308      	adds	r3, #8
 80075bc:	2100      	movs	r1, #0
 80075be:	4618      	mov	r0, r3
 80075c0:	f002 f876 	bl	80096b0 <RCCEx_PLL2_Config>
 80075c4:	4603      	mov	r3, r0
 80075c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80075ca:	e011      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075d0:	3328      	adds	r3, #40	@ 0x28
 80075d2:	2100      	movs	r1, #0
 80075d4:	4618      	mov	r0, r3
 80075d6:	f002 f91d 	bl	8009814 <RCCEx_PLL3_Config>
 80075da:	4603      	mov	r3, r0
 80075dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80075e0:	e006      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80075e8:	e002      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80075ea:	bf00      	nop
 80075ec:	e000      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80075ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10a      	bne.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80075f8:	4b6a      	ldr	r3, [pc, #424]	@ (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075fc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007606:	4a67      	ldr	r2, [pc, #412]	@ (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007608:	430b      	orrs	r3, r1
 800760a:	6513      	str	r3, [r2, #80]	@ 0x50
 800760c:	e003      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800760e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007612:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800761a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007622:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007626:	2300      	movs	r3, #0
 8007628:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800762c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007630:	460b      	mov	r3, r1
 8007632:	4313      	orrs	r3, r2
 8007634:	d053      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800763a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800763c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007640:	d033      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8007642:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007646:	d82c      	bhi.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007648:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800764c:	d02f      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x502>
 800764e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007652:	d826      	bhi.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007654:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007658:	d02b      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800765a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800765e:	d820      	bhi.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007660:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007664:	d012      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8007666:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800766a:	d81a      	bhi.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800766c:	2b00      	cmp	r3, #0
 800766e:	d022      	beq.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007674:	d115      	bne.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800767a:	3308      	adds	r3, #8
 800767c:	2101      	movs	r1, #1
 800767e:	4618      	mov	r0, r3
 8007680:	f002 f816 	bl	80096b0 <RCCEx_PLL2_Config>
 8007684:	4603      	mov	r3, r0
 8007686:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800768a:	e015      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800768c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007690:	3328      	adds	r3, #40	@ 0x28
 8007692:	2101      	movs	r1, #1
 8007694:	4618      	mov	r0, r3
 8007696:	f002 f8bd 	bl	8009814 <RCCEx_PLL3_Config>
 800769a:	4603      	mov	r3, r0
 800769c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80076a0:	e00a      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80076a8:	e006      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80076aa:	bf00      	nop
 80076ac:	e004      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80076ae:	bf00      	nop
 80076b0:	e002      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80076b2:	bf00      	nop
 80076b4:	e000      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80076b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d10a      	bne.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80076c0:	4b38      	ldr	r3, [pc, #224]	@ (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076c4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80076c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076ce:	4a35      	ldr	r2, [pc, #212]	@ (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076d0:	430b      	orrs	r3, r1
 80076d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80076d4:	e003      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80076de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80076ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80076ee:	2300      	movs	r3, #0
 80076f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80076f4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80076f8:	460b      	mov	r3, r1
 80076fa:	4313      	orrs	r3, r2
 80076fc:	d058      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80076fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007702:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007706:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800770a:	d033      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800770c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007710:	d82c      	bhi.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007712:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007716:	d02f      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007718:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800771c:	d826      	bhi.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800771e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007722:	d02b      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007724:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007728:	d820      	bhi.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800772a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800772e:	d012      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007730:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007734:	d81a      	bhi.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007736:	2b00      	cmp	r3, #0
 8007738:	d022      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800773a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800773e:	d115      	bne.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007744:	3308      	adds	r3, #8
 8007746:	2101      	movs	r1, #1
 8007748:	4618      	mov	r0, r3
 800774a:	f001 ffb1 	bl	80096b0 <RCCEx_PLL2_Config>
 800774e:	4603      	mov	r3, r0
 8007750:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007754:	e015      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800775a:	3328      	adds	r3, #40	@ 0x28
 800775c:	2101      	movs	r1, #1
 800775e:	4618      	mov	r0, r3
 8007760:	f002 f858 	bl	8009814 <RCCEx_PLL3_Config>
 8007764:	4603      	mov	r3, r0
 8007766:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800776a:	e00a      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007772:	e006      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007774:	bf00      	nop
 8007776:	e004      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007778:	bf00      	nop
 800777a:	e002      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800777c:	bf00      	nop
 800777e:	e000      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007782:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10e      	bne.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800778a:	4b06      	ldr	r3, [pc, #24]	@ (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800778c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800778e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007796:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800779a:	4a02      	ldr	r2, [pc, #8]	@ (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800779c:	430b      	orrs	r3, r1
 800779e:	6593      	str	r3, [r2, #88]	@ 0x58
 80077a0:	e006      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80077a2:	bf00      	nop
 80077a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80077b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80077bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80077c0:	2300      	movs	r3, #0
 80077c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80077c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80077ca:	460b      	mov	r3, r1
 80077cc:	4313      	orrs	r3, r2
 80077ce:	d037      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80077d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077da:	d00e      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80077dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077e0:	d816      	bhi.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d018      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80077e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077ea:	d111      	bne.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077ec:	4bc4      	ldr	r3, [pc, #784]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f0:	4ac3      	ldr	r2, [pc, #780]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80077f8:	e00f      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077fe:	3308      	adds	r3, #8
 8007800:	2101      	movs	r1, #1
 8007802:	4618      	mov	r0, r3
 8007804:	f001 ff54 	bl	80096b0 <RCCEx_PLL2_Config>
 8007808:	4603      	mov	r3, r0
 800780a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800780e:	e004      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007816:	e000      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800781a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10a      	bne.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007822:	4bb7      	ldr	r3, [pc, #732]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007826:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800782a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800782e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007830:	4ab3      	ldr	r2, [pc, #716]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007832:	430b      	orrs	r3, r1
 8007834:	6513      	str	r3, [r2, #80]	@ 0x50
 8007836:	e003      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007838:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800783c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007848:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800784c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007850:	2300      	movs	r3, #0
 8007852:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007856:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800785a:	460b      	mov	r3, r1
 800785c:	4313      	orrs	r3, r2
 800785e:	d039      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007864:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007866:	2b03      	cmp	r3, #3
 8007868:	d81c      	bhi.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800786a:	a201      	add	r2, pc, #4	@ (adr r2, 8007870 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800786c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007870:	080078ad 	.word	0x080078ad
 8007874:	08007881 	.word	0x08007881
 8007878:	0800788f 	.word	0x0800788f
 800787c:	080078ad 	.word	0x080078ad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007880:	4b9f      	ldr	r3, [pc, #636]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007884:	4a9e      	ldr	r2, [pc, #632]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007886:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800788a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800788c:	e00f      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800788e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007892:	3308      	adds	r3, #8
 8007894:	2102      	movs	r1, #2
 8007896:	4618      	mov	r0, r3
 8007898:	f001 ff0a 	bl	80096b0 <RCCEx_PLL2_Config>
 800789c:	4603      	mov	r3, r0
 800789e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80078a2:	e004      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80078aa:	e000      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80078ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10a      	bne.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80078b6:	4b92      	ldr	r3, [pc, #584]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078ba:	f023 0103 	bic.w	r1, r3, #3
 80078be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078c4:	4a8e      	ldr	r2, [pc, #568]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078c6:	430b      	orrs	r3, r1
 80078c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80078ca:	e003      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80078d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078dc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80078e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80078e4:	2300      	movs	r3, #0
 80078e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80078ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80078ee:	460b      	mov	r3, r1
 80078f0:	4313      	orrs	r3, r2
 80078f2:	f000 8099 	beq.w	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078f6:	4b83      	ldr	r3, [pc, #524]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a82      	ldr	r2, [pc, #520]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80078fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007900:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007902:	f7fb f851 	bl	80029a8 <HAL_GetTick>
 8007906:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800790a:	e00b      	b.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800790c:	f7fb f84c 	bl	80029a8 <HAL_GetTick>
 8007910:	4602      	mov	r2, r0
 8007912:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	2b64      	cmp	r3, #100	@ 0x64
 800791a:	d903      	bls.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800791c:	2303      	movs	r3, #3
 800791e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007922:	e005      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007924:	4b77      	ldr	r3, [pc, #476]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800792c:	2b00      	cmp	r3, #0
 800792e:	d0ed      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007930:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007934:	2b00      	cmp	r3, #0
 8007936:	d173      	bne.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007938:	4b71      	ldr	r3, [pc, #452]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800793a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800793c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007940:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007944:	4053      	eors	r3, r2
 8007946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800794a:	2b00      	cmp	r3, #0
 800794c:	d015      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800794e:	4b6c      	ldr	r3, [pc, #432]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007952:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007956:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800795a:	4b69      	ldr	r3, [pc, #420]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800795c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800795e:	4a68      	ldr	r2, [pc, #416]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007964:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007966:	4b66      	ldr	r3, [pc, #408]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800796a:	4a65      	ldr	r2, [pc, #404]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800796c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007970:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007972:	4a63      	ldr	r2, [pc, #396]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007974:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007978:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800797a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800797e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007982:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007986:	d118      	bne.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007988:	f7fb f80e 	bl	80029a8 <HAL_GetTick>
 800798c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007990:	e00d      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007992:	f7fb f809 	bl	80029a8 <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800799c:	1ad2      	subs	r2, r2, r3
 800799e:	f241 3388 	movw	r3, #5000	@ 0x1388
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d903      	bls.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80079a6:	2303      	movs	r3, #3
 80079a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80079ac:	e005      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079ae:	4b54      	ldr	r3, [pc, #336]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079b2:	f003 0302 	and.w	r3, r3, #2
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d0eb      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80079ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d129      	bne.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80079ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079d2:	d10e      	bne.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80079d4:	4b4a      	ldr	r3, [pc, #296]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80079dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80079e4:	091a      	lsrs	r2, r3, #4
 80079e6:	4b48      	ldr	r3, [pc, #288]	@ (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80079e8:	4013      	ands	r3, r2
 80079ea:	4a45      	ldr	r2, [pc, #276]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079ec:	430b      	orrs	r3, r1
 80079ee:	6113      	str	r3, [r2, #16]
 80079f0:	e005      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x852>
 80079f2:	4b43      	ldr	r3, [pc, #268]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	4a42      	ldr	r2, [pc, #264]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80079fc:	6113      	str	r3, [r2, #16]
 80079fe:	4b40      	ldr	r3, [pc, #256]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a00:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a0e:	4a3c      	ldr	r2, [pc, #240]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a10:	430b      	orrs	r3, r1
 8007a12:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a14:	e008      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a1a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8007a1e:	e003      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a30:	f002 0301 	and.w	r3, r2, #1
 8007a34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a38:	2300      	movs	r3, #0
 8007a3a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007a3e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007a42:	460b      	mov	r3, r1
 8007a44:	4313      	orrs	r3, r2
 8007a46:	f000 808f 	beq.w	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a50:	2b28      	cmp	r3, #40	@ 0x28
 8007a52:	d871      	bhi.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007a54:	a201      	add	r2, pc, #4	@ (adr r2, 8007a5c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5a:	bf00      	nop
 8007a5c:	08007b41 	.word	0x08007b41
 8007a60:	08007b39 	.word	0x08007b39
 8007a64:	08007b39 	.word	0x08007b39
 8007a68:	08007b39 	.word	0x08007b39
 8007a6c:	08007b39 	.word	0x08007b39
 8007a70:	08007b39 	.word	0x08007b39
 8007a74:	08007b39 	.word	0x08007b39
 8007a78:	08007b39 	.word	0x08007b39
 8007a7c:	08007b0d 	.word	0x08007b0d
 8007a80:	08007b39 	.word	0x08007b39
 8007a84:	08007b39 	.word	0x08007b39
 8007a88:	08007b39 	.word	0x08007b39
 8007a8c:	08007b39 	.word	0x08007b39
 8007a90:	08007b39 	.word	0x08007b39
 8007a94:	08007b39 	.word	0x08007b39
 8007a98:	08007b39 	.word	0x08007b39
 8007a9c:	08007b23 	.word	0x08007b23
 8007aa0:	08007b39 	.word	0x08007b39
 8007aa4:	08007b39 	.word	0x08007b39
 8007aa8:	08007b39 	.word	0x08007b39
 8007aac:	08007b39 	.word	0x08007b39
 8007ab0:	08007b39 	.word	0x08007b39
 8007ab4:	08007b39 	.word	0x08007b39
 8007ab8:	08007b39 	.word	0x08007b39
 8007abc:	08007b41 	.word	0x08007b41
 8007ac0:	08007b39 	.word	0x08007b39
 8007ac4:	08007b39 	.word	0x08007b39
 8007ac8:	08007b39 	.word	0x08007b39
 8007acc:	08007b39 	.word	0x08007b39
 8007ad0:	08007b39 	.word	0x08007b39
 8007ad4:	08007b39 	.word	0x08007b39
 8007ad8:	08007b39 	.word	0x08007b39
 8007adc:	08007b41 	.word	0x08007b41
 8007ae0:	08007b39 	.word	0x08007b39
 8007ae4:	08007b39 	.word	0x08007b39
 8007ae8:	08007b39 	.word	0x08007b39
 8007aec:	08007b39 	.word	0x08007b39
 8007af0:	08007b39 	.word	0x08007b39
 8007af4:	08007b39 	.word	0x08007b39
 8007af8:	08007b39 	.word	0x08007b39
 8007afc:	08007b41 	.word	0x08007b41
 8007b00:	58024400 	.word	0x58024400
 8007b04:	58024800 	.word	0x58024800
 8007b08:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b10:	3308      	adds	r3, #8
 8007b12:	2101      	movs	r1, #1
 8007b14:	4618      	mov	r0, r3
 8007b16:	f001 fdcb 	bl	80096b0 <RCCEx_PLL2_Config>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007b20:	e00f      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b26:	3328      	adds	r3, #40	@ 0x28
 8007b28:	2101      	movs	r1, #1
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f001 fe72 	bl	8009814 <RCCEx_PLL3_Config>
 8007b30:	4603      	mov	r3, r0
 8007b32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007b36:	e004      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b3e:	e000      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d10a      	bne.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007b4a:	4bbf      	ldr	r3, [pc, #764]	@ (8007e48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b4e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b58:	4abb      	ldr	r2, [pc, #748]	@ (8007e48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007b5a:	430b      	orrs	r3, r1
 8007b5c:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b5e:	e003      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b70:	f002 0302 	and.w	r3, r2, #2
 8007b74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b78:	2300      	movs	r3, #0
 8007b7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b7e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007b82:	460b      	mov	r3, r1
 8007b84:	4313      	orrs	r3, r2
 8007b86:	d041      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b8e:	2b05      	cmp	r3, #5
 8007b90:	d824      	bhi.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007b92:	a201      	add	r2, pc, #4	@ (adr r2, 8007b98 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b98:	08007be5 	.word	0x08007be5
 8007b9c:	08007bb1 	.word	0x08007bb1
 8007ba0:	08007bc7 	.word	0x08007bc7
 8007ba4:	08007be5 	.word	0x08007be5
 8007ba8:	08007be5 	.word	0x08007be5
 8007bac:	08007be5 	.word	0x08007be5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bb4:	3308      	adds	r3, #8
 8007bb6:	2101      	movs	r1, #1
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f001 fd79 	bl	80096b0 <RCCEx_PLL2_Config>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007bc4:	e00f      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bca:	3328      	adds	r3, #40	@ 0x28
 8007bcc:	2101      	movs	r1, #1
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f001 fe20 	bl	8009814 <RCCEx_PLL3_Config>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007bda:	e004      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007be2:	e000      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007be4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007be6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10a      	bne.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007bee:	4b96      	ldr	r3, [pc, #600]	@ (8007e48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bf2:	f023 0107 	bic.w	r1, r3, #7
 8007bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bfc:	4a92      	ldr	r2, [pc, #584]	@ (8007e48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007bfe:	430b      	orrs	r3, r1
 8007c00:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c02:	e003      	b.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c14:	f002 0304 	and.w	r3, r2, #4
 8007c18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c22:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007c26:	460b      	mov	r3, r1
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	d044      	beq.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c34:	2b05      	cmp	r3, #5
 8007c36:	d825      	bhi.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007c38:	a201      	add	r2, pc, #4	@ (adr r2, 8007c40 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3e:	bf00      	nop
 8007c40:	08007c8d 	.word	0x08007c8d
 8007c44:	08007c59 	.word	0x08007c59
 8007c48:	08007c6f 	.word	0x08007c6f
 8007c4c:	08007c8d 	.word	0x08007c8d
 8007c50:	08007c8d 	.word	0x08007c8d
 8007c54:	08007c8d 	.word	0x08007c8d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c5c:	3308      	adds	r3, #8
 8007c5e:	2101      	movs	r1, #1
 8007c60:	4618      	mov	r0, r3
 8007c62:	f001 fd25 	bl	80096b0 <RCCEx_PLL2_Config>
 8007c66:	4603      	mov	r3, r0
 8007c68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007c6c:	e00f      	b.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c72:	3328      	adds	r3, #40	@ 0x28
 8007c74:	2101      	movs	r1, #1
 8007c76:	4618      	mov	r0, r3
 8007c78:	f001 fdcc 	bl	8009814 <RCCEx_PLL3_Config>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007c82:	e004      	b.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c8a:	e000      	b.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007c8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10b      	bne.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c96:	4b6c      	ldr	r3, [pc, #432]	@ (8007e48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c9a:	f023 0107 	bic.w	r1, r3, #7
 8007c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ca6:	4a68      	ldr	r2, [pc, #416]	@ (8007e48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ca8:	430b      	orrs	r3, r1
 8007caa:	6593      	str	r3, [r2, #88]	@ 0x58
 8007cac:	e003      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cb2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbe:	f002 0320 	and.w	r3, r2, #32
 8007cc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007ccc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	d055      	beq.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ce2:	d033      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007ce4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ce8:	d82c      	bhi.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cee:	d02f      	beq.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cf4:	d826      	bhi.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007cf6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007cfa:	d02b      	beq.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007cfc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d00:	d820      	bhi.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007d02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d06:	d012      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007d08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d0c:	d81a      	bhi.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d022      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007d12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d16:	d115      	bne.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d1c:	3308      	adds	r3, #8
 8007d1e:	2100      	movs	r1, #0
 8007d20:	4618      	mov	r0, r3
 8007d22:	f001 fcc5 	bl	80096b0 <RCCEx_PLL2_Config>
 8007d26:	4603      	mov	r3, r0
 8007d28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007d2c:	e015      	b.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d32:	3328      	adds	r3, #40	@ 0x28
 8007d34:	2102      	movs	r1, #2
 8007d36:	4618      	mov	r0, r3
 8007d38:	f001 fd6c 	bl	8009814 <RCCEx_PLL3_Config>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007d42:	e00a      	b.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d4a:	e006      	b.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007d4c:	bf00      	nop
 8007d4e:	e004      	b.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007d50:	bf00      	nop
 8007d52:	e002      	b.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007d54:	bf00      	nop
 8007d56:	e000      	b.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007d58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10b      	bne.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d62:	4b39      	ldr	r3, [pc, #228]	@ (8007e48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d66:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d72:	4a35      	ldr	r2, [pc, #212]	@ (8007e48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007d74:	430b      	orrs	r3, r1
 8007d76:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d78:	e003      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007d8e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d92:	2300      	movs	r3, #0
 8007d94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d98:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	d058      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007da6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007daa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007dae:	d033      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007db0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007db4:	d82c      	bhi.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007db6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dba:	d02f      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007dbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dc0:	d826      	bhi.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007dc2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007dc6:	d02b      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007dc8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007dcc:	d820      	bhi.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007dce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dd2:	d012      	beq.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007dd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dd8:	d81a      	bhi.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d022      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007de2:	d115      	bne.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007de8:	3308      	adds	r3, #8
 8007dea:	2100      	movs	r1, #0
 8007dec:	4618      	mov	r0, r3
 8007dee:	f001 fc5f 	bl	80096b0 <RCCEx_PLL2_Config>
 8007df2:	4603      	mov	r3, r0
 8007df4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007df8:	e015      	b.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dfe:	3328      	adds	r3, #40	@ 0x28
 8007e00:	2102      	movs	r1, #2
 8007e02:	4618      	mov	r0, r3
 8007e04:	f001 fd06 	bl	8009814 <RCCEx_PLL3_Config>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007e0e:	e00a      	b.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e16:	e006      	b.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007e18:	bf00      	nop
 8007e1a:	e004      	b.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007e1c:	bf00      	nop
 8007e1e:	e002      	b.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007e20:	bf00      	nop
 8007e22:	e000      	b.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007e24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d10e      	bne.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e2e:	4b06      	ldr	r3, [pc, #24]	@ (8007e48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e32:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e3e:	4a02      	ldr	r2, [pc, #8]	@ (8007e48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007e40:	430b      	orrs	r3, r1
 8007e42:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e44:	e006      	b.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007e46:	bf00      	nop
 8007e48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007e60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e64:	2300      	movs	r3, #0
 8007e66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007e6a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007e6e:	460b      	mov	r3, r1
 8007e70:	4313      	orrs	r3, r2
 8007e72:	d055      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e7c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007e80:	d033      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007e82:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007e86:	d82c      	bhi.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007e88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e8c:	d02f      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007e8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e92:	d826      	bhi.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007e94:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007e98:	d02b      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007e9a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007e9e:	d820      	bhi.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007ea0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ea4:	d012      	beq.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007ea6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007eaa:	d81a      	bhi.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d022      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007eb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007eb4:	d115      	bne.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eba:	3308      	adds	r3, #8
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f001 fbf6 	bl	80096b0 <RCCEx_PLL2_Config>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007eca:	e015      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ed0:	3328      	adds	r3, #40	@ 0x28
 8007ed2:	2102      	movs	r1, #2
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f001 fc9d 	bl	8009814 <RCCEx_PLL3_Config>
 8007eda:	4603      	mov	r3, r0
 8007edc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007ee0:	e00a      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ee8:	e006      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007eea:	bf00      	nop
 8007eec:	e004      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007eee:	bf00      	nop
 8007ef0:	e002      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007ef2:	bf00      	nop
 8007ef4:	e000      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007ef6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ef8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10b      	bne.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007f00:	4ba0      	ldr	r3, [pc, #640]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f04:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f10:	4a9c      	ldr	r2, [pc, #624]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f12:	430b      	orrs	r3, r1
 8007f14:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f16:	e003      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f28:	f002 0308 	and.w	r3, r2, #8
 8007f2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f30:	2300      	movs	r3, #0
 8007f32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007f36:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	d01e      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f4c:	d10c      	bne.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f52:	3328      	adds	r3, #40	@ 0x28
 8007f54:	2102      	movs	r1, #2
 8007f56:	4618      	mov	r0, r3
 8007f58:	f001 fc5c 	bl	8009814 <RCCEx_PLL3_Config>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d002      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007f68:	4b86      	ldr	r3, [pc, #536]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f6c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f78:	4a82      	ldr	r2, [pc, #520]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f7a:	430b      	orrs	r3, r1
 8007f7c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f86:	f002 0310 	and.w	r3, r2, #16
 8007f8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f8e:	2300      	movs	r3, #0
 8007f90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f94:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007f98:	460b      	mov	r3, r1
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	d01e      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007faa:	d10c      	bne.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fb0:	3328      	adds	r3, #40	@ 0x28
 8007fb2:	2102      	movs	r1, #2
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f001 fc2d 	bl	8009814 <RCCEx_PLL3_Config>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d002      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007fc6:	4b6f      	ldr	r3, [pc, #444]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fd6:	4a6b      	ldr	r2, [pc, #428]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007fd8:	430b      	orrs	r3, r1
 8007fda:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007fe8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007fea:	2300      	movs	r3, #0
 8007fec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007fee:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	d03e      	beq.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ffc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008000:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008004:	d022      	beq.n	800804c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008006:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800800a:	d81b      	bhi.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800800c:	2b00      	cmp	r3, #0
 800800e:	d003      	beq.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8008010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008014:	d00b      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8008016:	e015      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800801c:	3308      	adds	r3, #8
 800801e:	2100      	movs	r1, #0
 8008020:	4618      	mov	r0, r3
 8008022:	f001 fb45 	bl	80096b0 <RCCEx_PLL2_Config>
 8008026:	4603      	mov	r3, r0
 8008028:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800802c:	e00f      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800802e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008032:	3328      	adds	r3, #40	@ 0x28
 8008034:	2102      	movs	r1, #2
 8008036:	4618      	mov	r0, r3
 8008038:	f001 fbec 	bl	8009814 <RCCEx_PLL3_Config>
 800803c:	4603      	mov	r3, r0
 800803e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008042:	e004      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800804a:	e000      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800804c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800804e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10b      	bne.n	800806e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008056:	4b4b      	ldr	r3, [pc, #300]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800805a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800805e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008062:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008066:	4a47      	ldr	r2, [pc, #284]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008068:	430b      	orrs	r3, r1
 800806a:	6593      	str	r3, [r2, #88]	@ 0x58
 800806c:	e003      	b.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800806e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008072:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008076:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800807a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008082:	673b      	str	r3, [r7, #112]	@ 0x70
 8008084:	2300      	movs	r3, #0
 8008086:	677b      	str	r3, [r7, #116]	@ 0x74
 8008088:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800808c:	460b      	mov	r3, r1
 800808e:	4313      	orrs	r3, r2
 8008090:	d03b      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008096:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800809a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800809e:	d01f      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80080a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80080a4:	d818      	bhi.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80080a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080aa:	d003      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80080ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080b0:	d007      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80080b2:	e011      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080b4:	4b33      	ldr	r3, [pc, #204]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80080b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b8:	4a32      	ldr	r2, [pc, #200]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80080ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80080c0:	e00f      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080c6:	3328      	adds	r3, #40	@ 0x28
 80080c8:	2101      	movs	r1, #1
 80080ca:	4618      	mov	r0, r3
 80080cc:	f001 fba2 	bl	8009814 <RCCEx_PLL3_Config>
 80080d0:	4603      	mov	r3, r0
 80080d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80080d6:	e004      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80080de:	e000      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80080e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d10b      	bne.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80080ea:	4b26      	ldr	r3, [pc, #152]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80080ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80080f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080fa:	4a22      	ldr	r2, [pc, #136]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80080fc:	430b      	orrs	r3, r1
 80080fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8008100:	e003      	b.n	800810a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008102:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008106:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800810a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800810e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008112:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008116:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008118:	2300      	movs	r3, #0
 800811a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800811c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008120:	460b      	mov	r3, r1
 8008122:	4313      	orrs	r3, r2
 8008124:	d034      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800812a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800812c:	2b00      	cmp	r3, #0
 800812e:	d003      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8008130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008134:	d007      	beq.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8008136:	e011      	b.n	800815c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008138:	4b12      	ldr	r3, [pc, #72]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800813a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800813c:	4a11      	ldr	r2, [pc, #68]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800813e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008142:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008144:	e00e      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800814a:	3308      	adds	r3, #8
 800814c:	2102      	movs	r1, #2
 800814e:	4618      	mov	r0, r3
 8008150:	f001 faae 	bl	80096b0 <RCCEx_PLL2_Config>
 8008154:	4603      	mov	r3, r0
 8008156:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800815a:	e003      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008164:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10d      	bne.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800816c:	4b05      	ldr	r3, [pc, #20]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800816e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008170:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008178:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800817a:	4a02      	ldr	r2, [pc, #8]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800817c:	430b      	orrs	r3, r1
 800817e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008180:	e006      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8008182:	bf00      	nop
 8008184:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008188:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800818c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008198:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800819c:	663b      	str	r3, [r7, #96]	@ 0x60
 800819e:	2300      	movs	r3, #0
 80081a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80081a2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80081a6:	460b      	mov	r3, r1
 80081a8:	4313      	orrs	r3, r2
 80081aa:	d00c      	beq.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80081ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081b0:	3328      	adds	r3, #40	@ 0x28
 80081b2:	2102      	movs	r1, #2
 80081b4:	4618      	mov	r0, r3
 80081b6:	f001 fb2d 	bl	8009814 <RCCEx_PLL3_Config>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d002      	beq.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80081c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ce:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80081d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80081d4:	2300      	movs	r3, #0
 80081d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80081d8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80081dc:	460b      	mov	r3, r1
 80081de:	4313      	orrs	r3, r2
 80081e0:	d036      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80081e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80081e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081ec:	d018      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80081ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081f2:	d811      	bhi.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80081f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081f8:	d014      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80081fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081fe:	d80b      	bhi.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008200:	2b00      	cmp	r3, #0
 8008202:	d011      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008204:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008208:	d106      	bne.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800820a:	4bb7      	ldr	r3, [pc, #732]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800820c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800820e:	4ab6      	ldr	r2, [pc, #728]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008210:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008214:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008216:	e008      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800821e:	e004      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008220:	bf00      	nop
 8008222:	e002      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008224:	bf00      	nop
 8008226:	e000      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800822a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10a      	bne.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008232:	4bad      	ldr	r3, [pc, #692]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008236:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800823a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800823e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008240:	4aa9      	ldr	r2, [pc, #676]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008242:	430b      	orrs	r3, r1
 8008244:	6553      	str	r3, [r2, #84]	@ 0x54
 8008246:	e003      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008248:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800824c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008258:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800825c:	653b      	str	r3, [r7, #80]	@ 0x50
 800825e:	2300      	movs	r3, #0
 8008260:	657b      	str	r3, [r7, #84]	@ 0x54
 8008262:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008266:	460b      	mov	r3, r1
 8008268:	4313      	orrs	r3, r2
 800826a:	d009      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800826c:	4b9e      	ldr	r3, [pc, #632]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800826e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008270:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800827a:	4a9b      	ldr	r2, [pc, #620]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800827c:	430b      	orrs	r3, r1
 800827e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008288:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800828c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800828e:	2300      	movs	r3, #0
 8008290:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008292:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008296:	460b      	mov	r3, r1
 8008298:	4313      	orrs	r3, r2
 800829a:	d009      	beq.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800829c:	4b92      	ldr	r3, [pc, #584]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800829e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082a0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80082a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80082aa:	4a8f      	ldr	r2, [pc, #572]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80082ac:	430b      	orrs	r3, r1
 80082ae:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80082b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80082bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80082be:	2300      	movs	r3, #0
 80082c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80082c2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80082c6:	460b      	mov	r3, r1
 80082c8:	4313      	orrs	r3, r2
 80082ca:	d00e      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80082cc:	4b86      	ldr	r3, [pc, #536]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	4a85      	ldr	r2, [pc, #532]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80082d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80082d6:	6113      	str	r3, [r2, #16]
 80082d8:	4b83      	ldr	r3, [pc, #524]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80082da:	6919      	ldr	r1, [r3, #16]
 80082dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80082e4:	4a80      	ldr	r2, [pc, #512]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80082e6:	430b      	orrs	r3, r1
 80082e8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80082ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80082f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80082f8:	2300      	movs	r3, #0
 80082fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082fc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008300:	460b      	mov	r3, r1
 8008302:	4313      	orrs	r3, r2
 8008304:	d009      	beq.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008306:	4b78      	ldr	r3, [pc, #480]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800830a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800830e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008314:	4a74      	ldr	r2, [pc, #464]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008316:	430b      	orrs	r3, r1
 8008318:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800831a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800831e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008322:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008326:	633b      	str	r3, [r7, #48]	@ 0x30
 8008328:	2300      	movs	r3, #0
 800832a:	637b      	str	r3, [r7, #52]	@ 0x34
 800832c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008330:	460b      	mov	r3, r1
 8008332:	4313      	orrs	r3, r2
 8008334:	d00a      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008336:	4b6c      	ldr	r3, [pc, #432]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800833a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800833e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008346:	4a68      	ldr	r2, [pc, #416]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008348:	430b      	orrs	r3, r1
 800834a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800834c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008354:	2100      	movs	r1, #0
 8008356:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008358:	f003 0301 	and.w	r3, r3, #1
 800835c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800835e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008362:	460b      	mov	r3, r1
 8008364:	4313      	orrs	r3, r2
 8008366:	d011      	beq.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800836c:	3308      	adds	r3, #8
 800836e:	2100      	movs	r1, #0
 8008370:	4618      	mov	r0, r3
 8008372:	f001 f99d 	bl	80096b0 <RCCEx_PLL2_Config>
 8008376:	4603      	mov	r3, r0
 8008378:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800837c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008380:	2b00      	cmp	r3, #0
 8008382:	d003      	beq.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008384:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008388:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800838c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008394:	2100      	movs	r1, #0
 8008396:	6239      	str	r1, [r7, #32]
 8008398:	f003 0302 	and.w	r3, r3, #2
 800839c:	627b      	str	r3, [r7, #36]	@ 0x24
 800839e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80083a2:	460b      	mov	r3, r1
 80083a4:	4313      	orrs	r3, r2
 80083a6:	d011      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ac:	3308      	adds	r3, #8
 80083ae:	2101      	movs	r1, #1
 80083b0:	4618      	mov	r0, r3
 80083b2:	f001 f97d 	bl	80096b0 <RCCEx_PLL2_Config>
 80083b6:	4603      	mov	r3, r0
 80083b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80083bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d003      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80083cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d4:	2100      	movs	r1, #0
 80083d6:	61b9      	str	r1, [r7, #24]
 80083d8:	f003 0304 	and.w	r3, r3, #4
 80083dc:	61fb      	str	r3, [r7, #28]
 80083de:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80083e2:	460b      	mov	r3, r1
 80083e4:	4313      	orrs	r3, r2
 80083e6:	d011      	beq.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80083e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ec:	3308      	adds	r3, #8
 80083ee:	2102      	movs	r1, #2
 80083f0:	4618      	mov	r0, r3
 80083f2:	f001 f95d 	bl	80096b0 <RCCEx_PLL2_Config>
 80083f6:	4603      	mov	r3, r0
 80083f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80083fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008400:	2b00      	cmp	r3, #0
 8008402:	d003      	beq.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008404:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008408:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800840c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008414:	2100      	movs	r1, #0
 8008416:	6139      	str	r1, [r7, #16]
 8008418:	f003 0308 	and.w	r3, r3, #8
 800841c:	617b      	str	r3, [r7, #20]
 800841e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008422:	460b      	mov	r3, r1
 8008424:	4313      	orrs	r3, r2
 8008426:	d011      	beq.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800842c:	3328      	adds	r3, #40	@ 0x28
 800842e:	2100      	movs	r1, #0
 8008430:	4618      	mov	r0, r3
 8008432:	f001 f9ef 	bl	8009814 <RCCEx_PLL3_Config>
 8008436:	4603      	mov	r3, r0
 8008438:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800843c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008440:	2b00      	cmp	r3, #0
 8008442:	d003      	beq.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008444:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008448:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800844c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008454:	2100      	movs	r1, #0
 8008456:	60b9      	str	r1, [r7, #8]
 8008458:	f003 0310 	and.w	r3, r3, #16
 800845c:	60fb      	str	r3, [r7, #12]
 800845e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008462:	460b      	mov	r3, r1
 8008464:	4313      	orrs	r3, r2
 8008466:	d011      	beq.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800846c:	3328      	adds	r3, #40	@ 0x28
 800846e:	2101      	movs	r1, #1
 8008470:	4618      	mov	r0, r3
 8008472:	f001 f9cf 	bl	8009814 <RCCEx_PLL3_Config>
 8008476:	4603      	mov	r3, r0
 8008478:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800847c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008480:	2b00      	cmp	r3, #0
 8008482:	d003      	beq.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008484:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008488:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800848c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008494:	2100      	movs	r1, #0
 8008496:	6039      	str	r1, [r7, #0]
 8008498:	f003 0320 	and.w	r3, r3, #32
 800849c:	607b      	str	r3, [r7, #4]
 800849e:	e9d7 1200 	ldrd	r1, r2, [r7]
 80084a2:	460b      	mov	r3, r1
 80084a4:	4313      	orrs	r3, r2
 80084a6:	d011      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80084a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ac:	3328      	adds	r3, #40	@ 0x28
 80084ae:	2102      	movs	r1, #2
 80084b0:	4618      	mov	r0, r3
 80084b2:	f001 f9af 	bl	8009814 <RCCEx_PLL3_Config>
 80084b6:	4603      	mov	r3, r0
 80084b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80084bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d003      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80084cc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d101      	bne.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80084d4:	2300      	movs	r3, #0
 80084d6:	e000      	b.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
}
 80084da:	4618      	mov	r0, r3
 80084dc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80084e0:	46bd      	mov	sp, r7
 80084e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084e6:	bf00      	nop
 80084e8:	58024400 	.word	0x58024400

080084ec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b090      	sub	sp, #64	@ 0x40
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80084f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084fa:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80084fe:	430b      	orrs	r3, r1
 8008500:	f040 8094 	bne.w	800862c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008504:	4b9b      	ldr	r3, [pc, #620]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008508:	f003 0307 	and.w	r3, r3, #7
 800850c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800850e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008510:	2b04      	cmp	r3, #4
 8008512:	f200 8087 	bhi.w	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008516:	a201      	add	r2, pc, #4	@ (adr r2, 800851c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851c:	08008531 	.word	0x08008531
 8008520:	08008559 	.word	0x08008559
 8008524:	08008581 	.word	0x08008581
 8008528:	0800861d 	.word	0x0800861d
 800852c:	080085a9 	.word	0x080085a9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008530:	4b90      	ldr	r3, [pc, #576]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008538:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800853c:	d108      	bne.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800853e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008542:	4618      	mov	r0, r3
 8008544:	f000 ff62 	bl	800940c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800854a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800854c:	f000 bc93 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008550:	2300      	movs	r3, #0
 8008552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008554:	f000 bc8f 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008558:	4b86      	ldr	r3, [pc, #536]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008560:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008564:	d108      	bne.n	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008566:	f107 0318 	add.w	r3, r7, #24
 800856a:	4618      	mov	r0, r3
 800856c:	f000 fca6 	bl	8008ebc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008574:	f000 bc7f 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008578:	2300      	movs	r3, #0
 800857a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800857c:	f000 bc7b 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008580:	4b7c      	ldr	r3, [pc, #496]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008588:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800858c:	d108      	bne.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800858e:	f107 030c 	add.w	r3, r7, #12
 8008592:	4618      	mov	r0, r3
 8008594:	f000 fde6 	bl	8009164 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800859c:	f000 bc6b 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085a0:	2300      	movs	r3, #0
 80085a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085a4:	f000 bc67 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80085a8:	4b72      	ldr	r3, [pc, #456]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80085aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80085b0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085b2:	4b70      	ldr	r3, [pc, #448]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f003 0304 	and.w	r3, r3, #4
 80085ba:	2b04      	cmp	r3, #4
 80085bc:	d10c      	bne.n	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80085be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d109      	bne.n	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085c4:	4b6b      	ldr	r3, [pc, #428]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	08db      	lsrs	r3, r3, #3
 80085ca:	f003 0303 	and.w	r3, r3, #3
 80085ce:	4a6a      	ldr	r2, [pc, #424]	@ (8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80085d0:	fa22 f303 	lsr.w	r3, r2, r3
 80085d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085d6:	e01f      	b.n	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085d8:	4b66      	ldr	r3, [pc, #408]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085e4:	d106      	bne.n	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80085e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085ec:	d102      	bne.n	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80085ee:	4b63      	ldr	r3, [pc, #396]	@ (800877c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80085f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085f2:	e011      	b.n	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085f4:	4b5f      	ldr	r3, [pc, #380]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008600:	d106      	bne.n	8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008604:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008608:	d102      	bne.n	8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800860a:	4b5d      	ldr	r3, [pc, #372]	@ (8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800860c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800860e:	e003      	b.n	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008610:	2300      	movs	r3, #0
 8008612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008614:	f000 bc2f 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008618:	f000 bc2d 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800861c:	4b59      	ldr	r3, [pc, #356]	@ (8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800861e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008620:	f000 bc29 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008624:	2300      	movs	r3, #0
 8008626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008628:	f000 bc25 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800862c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008630:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008634:	430b      	orrs	r3, r1
 8008636:	f040 80a7 	bne.w	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800863a:	4b4e      	ldr	r3, [pc, #312]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800863c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800863e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008642:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008646:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800864a:	d054      	beq.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800864c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008652:	f200 808b 	bhi.w	800876c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008658:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800865c:	f000 8083 	beq.w	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8008660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008662:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008666:	f200 8081 	bhi.w	800876c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800866a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800866c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008670:	d02f      	beq.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008674:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008678:	d878      	bhi.n	800876c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800867a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867c:	2b00      	cmp	r3, #0
 800867e:	d004      	beq.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8008680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008682:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008686:	d012      	beq.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8008688:	e070      	b.n	800876c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800868a:	4b3a      	ldr	r3, [pc, #232]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008692:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008696:	d107      	bne.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008698:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800869c:	4618      	mov	r0, r3
 800869e:	f000 feb5 	bl	800940c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086a6:	e3e6      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086a8:	2300      	movs	r3, #0
 80086aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086ac:	e3e3      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086ae:	4b31      	ldr	r3, [pc, #196]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086ba:	d107      	bne.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086bc:	f107 0318 	add.w	r3, r7, #24
 80086c0:	4618      	mov	r0, r3
 80086c2:	f000 fbfb 	bl	8008ebc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ca:	e3d4      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086cc:	2300      	movs	r3, #0
 80086ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086d0:	e3d1      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086d2:	4b28      	ldr	r3, [pc, #160]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086de:	d107      	bne.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086e0:	f107 030c 	add.w	r3, r7, #12
 80086e4:	4618      	mov	r0, r3
 80086e6:	f000 fd3d 	bl	8009164 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ee:	e3c2      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086f0:	2300      	movs	r3, #0
 80086f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086f4:	e3bf      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086f6:	4b1f      	ldr	r3, [pc, #124]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80086f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80086fe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008700:	4b1c      	ldr	r3, [pc, #112]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f003 0304 	and.w	r3, r3, #4
 8008708:	2b04      	cmp	r3, #4
 800870a:	d10c      	bne.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800870c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800870e:	2b00      	cmp	r3, #0
 8008710:	d109      	bne.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008712:	4b18      	ldr	r3, [pc, #96]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	08db      	lsrs	r3, r3, #3
 8008718:	f003 0303 	and.w	r3, r3, #3
 800871c:	4a16      	ldr	r2, [pc, #88]	@ (8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800871e:	fa22 f303 	lsr.w	r3, r2, r3
 8008722:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008724:	e01e      	b.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008726:	4b13      	ldr	r3, [pc, #76]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800872e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008732:	d106      	bne.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008736:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800873a:	d102      	bne.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800873c:	4b0f      	ldr	r3, [pc, #60]	@ (800877c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800873e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008740:	e010      	b.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008742:	4b0c      	ldr	r3, [pc, #48]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800874a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800874e:	d106      	bne.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008752:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008756:	d102      	bne.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008758:	4b09      	ldr	r3, [pc, #36]	@ (8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800875a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800875c:	e002      	b.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800875e:	2300      	movs	r3, #0
 8008760:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008762:	e388      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008764:	e387      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008766:	4b07      	ldr	r3, [pc, #28]	@ (8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800876a:	e384      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800876c:	2300      	movs	r3, #0
 800876e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008770:	e381      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008772:	bf00      	nop
 8008774:	58024400 	.word	0x58024400
 8008778:	03d09000 	.word	0x03d09000
 800877c:	003d0900 	.word	0x003d0900
 8008780:	016e3600 	.word	0x016e3600
 8008784:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008788:	e9d7 2300 	ldrd	r2, r3, [r7]
 800878c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008790:	430b      	orrs	r3, r1
 8008792:	f040 809c 	bne.w	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008796:	4b9e      	ldr	r3, [pc, #632]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800879a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800879e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80087a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80087a6:	d054      	beq.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80087a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80087ae:	f200 808b 	bhi.w	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80087b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80087b8:	f000 8083 	beq.w	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80087bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80087c2:	f200 8081 	bhi.w	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80087c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087cc:	d02f      	beq.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80087ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087d4:	d878      	bhi.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80087d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d004      	beq.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80087dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80087e2:	d012      	beq.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80087e4:	e070      	b.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087e6:	4b8a      	ldr	r3, [pc, #552]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087f2:	d107      	bne.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087f8:	4618      	mov	r0, r3
 80087fa:	f000 fe07 	bl	800940c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008802:	e338      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008804:	2300      	movs	r3, #0
 8008806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008808:	e335      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800880a:	4b81      	ldr	r3, [pc, #516]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008812:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008816:	d107      	bne.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008818:	f107 0318 	add.w	r3, r7, #24
 800881c:	4618      	mov	r0, r3
 800881e:	f000 fb4d 	bl	8008ebc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008826:	e326      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008828:	2300      	movs	r3, #0
 800882a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800882c:	e323      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800882e:	4b78      	ldr	r3, [pc, #480]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008836:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800883a:	d107      	bne.n	800884c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800883c:	f107 030c 	add.w	r3, r7, #12
 8008840:	4618      	mov	r0, r3
 8008842:	f000 fc8f 	bl	8009164 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800884a:	e314      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800884c:	2300      	movs	r3, #0
 800884e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008850:	e311      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008852:	4b6f      	ldr	r3, [pc, #444]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008856:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800885a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800885c:	4b6c      	ldr	r3, [pc, #432]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 0304 	and.w	r3, r3, #4
 8008864:	2b04      	cmp	r3, #4
 8008866:	d10c      	bne.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800886a:	2b00      	cmp	r3, #0
 800886c:	d109      	bne.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800886e:	4b68      	ldr	r3, [pc, #416]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	08db      	lsrs	r3, r3, #3
 8008874:	f003 0303 	and.w	r3, r3, #3
 8008878:	4a66      	ldr	r2, [pc, #408]	@ (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800887a:	fa22 f303 	lsr.w	r3, r2, r3
 800887e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008880:	e01e      	b.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008882:	4b63      	ldr	r3, [pc, #396]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800888a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800888e:	d106      	bne.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008892:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008896:	d102      	bne.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008898:	4b5f      	ldr	r3, [pc, #380]	@ (8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800889a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800889c:	e010      	b.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800889e:	4b5c      	ldr	r3, [pc, #368]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088aa:	d106      	bne.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80088ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088b2:	d102      	bne.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80088b4:	4b59      	ldr	r3, [pc, #356]	@ (8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088b8:	e002      	b.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80088ba:	2300      	movs	r3, #0
 80088bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80088be:	e2da      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80088c0:	e2d9      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80088c2:	4b57      	ldr	r3, [pc, #348]	@ (8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80088c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088c6:	e2d6      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80088c8:	2300      	movs	r3, #0
 80088ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088cc:	e2d3      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80088ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088d2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80088d6:	430b      	orrs	r3, r1
 80088d8:	f040 80a7 	bne.w	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80088dc:	4b4c      	ldr	r3, [pc, #304]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80088de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088e0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80088e4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80088e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088ec:	d055      	beq.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80088ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088f4:	f200 8096 	bhi.w	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80088f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80088fe:	f000 8084 	beq.w	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008904:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008908:	f200 808c 	bhi.w	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800890c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800890e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008912:	d030      	beq.n	8008976 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008916:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800891a:	f200 8083 	bhi.w	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800891e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008920:	2b00      	cmp	r3, #0
 8008922:	d004      	beq.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008926:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800892a:	d012      	beq.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800892c:	e07a      	b.n	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800892e:	4b38      	ldr	r3, [pc, #224]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008936:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800893a:	d107      	bne.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800893c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008940:	4618      	mov	r0, r3
 8008942:	f000 fd63 	bl	800940c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800894a:	e294      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800894c:	2300      	movs	r3, #0
 800894e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008950:	e291      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008952:	4b2f      	ldr	r3, [pc, #188]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800895a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800895e:	d107      	bne.n	8008970 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008960:	f107 0318 	add.w	r3, r7, #24
 8008964:	4618      	mov	r0, r3
 8008966:	f000 faa9 	bl	8008ebc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800896e:	e282      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008970:	2300      	movs	r3, #0
 8008972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008974:	e27f      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008976:	4b26      	ldr	r3, [pc, #152]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800897e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008982:	d107      	bne.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008984:	f107 030c 	add.w	r3, r7, #12
 8008988:	4618      	mov	r0, r3
 800898a:	f000 fbeb 	bl	8009164 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008992:	e270      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008994:	2300      	movs	r3, #0
 8008996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008998:	e26d      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800899a:	4b1d      	ldr	r3, [pc, #116]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800899c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800899e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80089a2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089a4:	4b1a      	ldr	r3, [pc, #104]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f003 0304 	and.w	r3, r3, #4
 80089ac:	2b04      	cmp	r3, #4
 80089ae:	d10c      	bne.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80089b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d109      	bne.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089b6:	4b16      	ldr	r3, [pc, #88]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	08db      	lsrs	r3, r3, #3
 80089bc:	f003 0303 	and.w	r3, r3, #3
 80089c0:	4a14      	ldr	r2, [pc, #80]	@ (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80089c2:	fa22 f303 	lsr.w	r3, r2, r3
 80089c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089c8:	e01e      	b.n	8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089ca:	4b11      	ldr	r3, [pc, #68]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089d6:	d106      	bne.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80089d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089de:	d102      	bne.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80089e0:	4b0d      	ldr	r3, [pc, #52]	@ (8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80089e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089e4:	e010      	b.n	8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089e6:	4b0a      	ldr	r3, [pc, #40]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089f2:	d106      	bne.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80089f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089fa:	d102      	bne.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80089fc:	4b07      	ldr	r3, [pc, #28]	@ (8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a00:	e002      	b.n	8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008a02:	2300      	movs	r3, #0
 8008a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008a06:	e236      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008a08:	e235      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008a0a:	4b05      	ldr	r3, [pc, #20]	@ (8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a0e:	e232      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008a10:	58024400 	.word	0x58024400
 8008a14:	03d09000 	.word	0x03d09000
 8008a18:	003d0900 	.word	0x003d0900
 8008a1c:	016e3600 	.word	0x016e3600
 8008a20:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008a24:	2300      	movs	r3, #0
 8008a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a28:	e225      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008a2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a2e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008a32:	430b      	orrs	r3, r1
 8008a34:	f040 8085 	bne.w	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008a38:	4b9c      	ldr	r3, [pc, #624]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008a3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a3c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008a40:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a48:	d06b      	beq.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a50:	d874      	bhi.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a54:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008a58:	d056      	beq.n	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8008a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008a60:	d86c      	bhi.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008a68:	d03b      	beq.n	8008ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a6c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008a70:	d864      	bhi.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a78:	d021      	beq.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a80:	d85c      	bhi.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d004      	beq.n	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8008a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a8e:	d004      	beq.n	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8008a90:	e054      	b.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008a92:	f7fe fb5f 	bl	8007154 <HAL_RCC_GetPCLK1Freq>
 8008a96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a98:	e1ed      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a9a:	4b84      	ldr	r3, [pc, #528]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008aa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008aa6:	d107      	bne.n	8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008aa8:	f107 0318 	add.w	r3, r7, #24
 8008aac:	4618      	mov	r0, r3
 8008aae:	f000 fa05 	bl	8008ebc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ab6:	e1de      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008abc:	e1db      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008abe:	4b7b      	ldr	r3, [pc, #492]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ac6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008aca:	d107      	bne.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008acc:	f107 030c 	add.w	r3, r7, #12
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f000 fb47 	bl	8009164 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ada:	e1cc      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008adc:	2300      	movs	r3, #0
 8008ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ae0:	e1c9      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008ae2:	4b72      	ldr	r3, [pc, #456]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 0304 	and.w	r3, r3, #4
 8008aea:	2b04      	cmp	r3, #4
 8008aec:	d109      	bne.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008aee:	4b6f      	ldr	r3, [pc, #444]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	08db      	lsrs	r3, r3, #3
 8008af4:	f003 0303 	and.w	r3, r3, #3
 8008af8:	4a6d      	ldr	r2, [pc, #436]	@ (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008afa:	fa22 f303 	lsr.w	r3, r2, r3
 8008afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b00:	e1b9      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b02:	2300      	movs	r3, #0
 8008b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b06:	e1b6      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008b08:	4b68      	ldr	r3, [pc, #416]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b14:	d102      	bne.n	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8008b16:	4b67      	ldr	r3, [pc, #412]	@ (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b1a:	e1ac      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b20:	e1a9      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008b22:	4b62      	ldr	r3, [pc, #392]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b2e:	d102      	bne.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8008b30:	4b61      	ldr	r3, [pc, #388]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b34:	e19f      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b36:	2300      	movs	r3, #0
 8008b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b3a:	e19c      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b40:	e199      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008b42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b46:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008b4a:	430b      	orrs	r3, r1
 8008b4c:	d173      	bne.n	8008c36 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008b4e:	4b57      	ldr	r3, [pc, #348]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008b56:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b5e:	d02f      	beq.n	8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8008b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b66:	d863      	bhi.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8008b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d004      	beq.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8008b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b74:	d012      	beq.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8008b76:	e05b      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b78:	4b4c      	ldr	r3, [pc, #304]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b84:	d107      	bne.n	8008b96 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b86:	f107 0318 	add.w	r3, r7, #24
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 f996 	bl	8008ebc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b94:	e16f      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b96:	2300      	movs	r3, #0
 8008b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b9a:	e16c      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b9c:	4b43      	ldr	r3, [pc, #268]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ba4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ba8:	d107      	bne.n	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008baa:	f107 030c 	add.w	r3, r7, #12
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f000 fad8 	bl	8009164 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bb8:	e15d      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bbe:	e15a      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008bc0:	4b3a      	ldr	r3, [pc, #232]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bc4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008bc8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bca:	4b38      	ldr	r3, [pc, #224]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f003 0304 	and.w	r3, r3, #4
 8008bd2:	2b04      	cmp	r3, #4
 8008bd4:	d10c      	bne.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d109      	bne.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bdc:	4b33      	ldr	r3, [pc, #204]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	08db      	lsrs	r3, r3, #3
 8008be2:	f003 0303 	and.w	r3, r3, #3
 8008be6:	4a32      	ldr	r2, [pc, #200]	@ (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008be8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bee:	e01e      	b.n	8008c2e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bf0:	4b2e      	ldr	r3, [pc, #184]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bfc:	d106      	bne.n	8008c0c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c04:	d102      	bne.n	8008c0c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c06:	4b2b      	ldr	r3, [pc, #172]	@ (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c0a:	e010      	b.n	8008c2e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c0c:	4b27      	ldr	r3, [pc, #156]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c18:	d106      	bne.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c20:	d102      	bne.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c22:	4b25      	ldr	r3, [pc, #148]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c26:	e002      	b.n	8008c2e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008c2c:	e123      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008c2e:	e122      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008c30:	2300      	movs	r3, #0
 8008c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c34:	e11f      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008c36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c3a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008c3e:	430b      	orrs	r3, r1
 8008c40:	d13c      	bne.n	8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008c42:	4b1a      	ldr	r3, [pc, #104]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c4a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d004      	beq.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c58:	d012      	beq.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8008c5a:	e023      	b.n	8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c5c:	4b13      	ldr	r3, [pc, #76]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c68:	d107      	bne.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 fbcc 	bl	800940c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c78:	e0fd      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c7e:	e0fa      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c80:	4b0a      	ldr	r3, [pc, #40]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c8c:	d107      	bne.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c8e:	f107 0318 	add.w	r3, r7, #24
 8008c92:	4618      	mov	r0, r3
 8008c94:	f000 f912 	bl	8008ebc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008c98:	6a3b      	ldr	r3, [r7, #32]
 8008c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c9c:	e0eb      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ca2:	e0e8      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ca8:	e0e5      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008caa:	bf00      	nop
 8008cac:	58024400 	.word	0x58024400
 8008cb0:	03d09000 	.word	0x03d09000
 8008cb4:	003d0900 	.word	0x003d0900
 8008cb8:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008cbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cc0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008cc4:	430b      	orrs	r3, r1
 8008cc6:	f040 8085 	bne.w	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008cca:	4b6d      	ldr	r3, [pc, #436]	@ (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cce:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008cd2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008cda:	d06b      	beq.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ce2:	d874      	bhi.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cea:	d056      	beq.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cf2:	d86c      	bhi.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cf6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008cfa:	d03b      	beq.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8008cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cfe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d02:	d864      	bhi.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d0a:	d021      	beq.n	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8008d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d12:	d85c      	bhi.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d004      	beq.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8008d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d20:	d004      	beq.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008d22:	e054      	b.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008d24:	f000 f8b4 	bl	8008e90 <HAL_RCCEx_GetD3PCLK1Freq>
 8008d28:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d2a:	e0a4      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d2c:	4b54      	ldr	r3, [pc, #336]	@ (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d38:	d107      	bne.n	8008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d3a:	f107 0318 	add.w	r3, r7, #24
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 f8bc 	bl	8008ebc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d48:	e095      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d4e:	e092      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d50:	4b4b      	ldr	r3, [pc, #300]	@ (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d5c:	d107      	bne.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d5e:	f107 030c 	add.w	r3, r7, #12
 8008d62:	4618      	mov	r0, r3
 8008d64:	f000 f9fe 	bl	8009164 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d6c:	e083      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d72:	e080      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008d74:	4b42      	ldr	r3, [pc, #264]	@ (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 0304 	and.w	r3, r3, #4
 8008d7c:	2b04      	cmp	r3, #4
 8008d7e:	d109      	bne.n	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d80:	4b3f      	ldr	r3, [pc, #252]	@ (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	08db      	lsrs	r3, r3, #3
 8008d86:	f003 0303 	and.w	r3, r3, #3
 8008d8a:	4a3e      	ldr	r2, [pc, #248]	@ (8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d92:	e070      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d94:	2300      	movs	r3, #0
 8008d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d98:	e06d      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008d9a:	4b39      	ldr	r3, [pc, #228]	@ (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008da2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008da6:	d102      	bne.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008da8:	4b37      	ldr	r3, [pc, #220]	@ (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dac:	e063      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008dae:	2300      	movs	r3, #0
 8008db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008db2:	e060      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008db4:	4b32      	ldr	r3, [pc, #200]	@ (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008dc0:	d102      	bne.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8008dc2:	4b32      	ldr	r3, [pc, #200]	@ (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dc6:	e056      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dcc:	e053      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dd2:	e050      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008dd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dd8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008ddc:	430b      	orrs	r3, r1
 8008dde:	d148      	bne.n	8008e72 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008de0:	4b27      	ldr	r3, [pc, #156]	@ (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008de4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008de8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008df0:	d02a      	beq.n	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008df8:	d838      	bhi.n	8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d004      	beq.n	8008e0a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e06:	d00d      	beq.n	8008e24 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008e08:	e030      	b.n	8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e16:	d102      	bne.n	8008e1e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8008e18:	4b1c      	ldr	r3, [pc, #112]	@ (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e1c:	e02b      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e22:	e028      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e24:	4b16      	ldr	r3, [pc, #88]	@ (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e30:	d107      	bne.n	8008e42 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e36:	4618      	mov	r0, r3
 8008e38:	f000 fae8 	bl	800940c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e40:	e019      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e42:	2300      	movs	r3, #0
 8008e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e46:	e016      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e48:	4b0d      	ldr	r3, [pc, #52]	@ (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e54:	d107      	bne.n	8008e66 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e56:	f107 0318 	add.w	r3, r7, #24
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 f82e 	bl	8008ebc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e64:	e007      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e66:	2300      	movs	r3, #0
 8008e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e6a:	e004      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e70:	e001      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8008e72:	2300      	movs	r3, #0
 8008e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3740      	adds	r7, #64	@ 0x40
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	58024400 	.word	0x58024400
 8008e84:	03d09000 	.word	0x03d09000
 8008e88:	003d0900 	.word	0x003d0900
 8008e8c:	016e3600 	.word	0x016e3600

08008e90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008e94:	f7fe f92e 	bl	80070f4 <HAL_RCC_GetHCLKFreq>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	4b06      	ldr	r3, [pc, #24]	@ (8008eb4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008e9c:	6a1b      	ldr	r3, [r3, #32]
 8008e9e:	091b      	lsrs	r3, r3, #4
 8008ea0:	f003 0307 	and.w	r3, r3, #7
 8008ea4:	4904      	ldr	r1, [pc, #16]	@ (8008eb8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008ea6:	5ccb      	ldrb	r3, [r1, r3]
 8008ea8:	f003 031f 	and.w	r3, r3, #31
 8008eac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	58024400 	.word	0x58024400
 8008eb8:	0800bb70 	.word	0x0800bb70

08008ebc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b089      	sub	sp, #36	@ 0x24
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ec4:	4ba1      	ldr	r3, [pc, #644]	@ (800914c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ec8:	f003 0303 	and.w	r3, r3, #3
 8008ecc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008ece:	4b9f      	ldr	r3, [pc, #636]	@ (800914c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ed2:	0b1b      	lsrs	r3, r3, #12
 8008ed4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ed8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008eda:	4b9c      	ldr	r3, [pc, #624]	@ (800914c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ede:	091b      	lsrs	r3, r3, #4
 8008ee0:	f003 0301 	and.w	r3, r3, #1
 8008ee4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008ee6:	4b99      	ldr	r3, [pc, #612]	@ (800914c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eea:	08db      	lsrs	r3, r3, #3
 8008eec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ef0:	693a      	ldr	r2, [r7, #16]
 8008ef2:	fb02 f303 	mul.w	r3, r2, r3
 8008ef6:	ee07 3a90 	vmov	s15, r3
 8008efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008efe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f000 8111 	beq.w	800912c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	f000 8083 	beq.w	8009018 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	f200 80a1 	bhi.w	800905c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d003      	beq.n	8008f28 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d056      	beq.n	8008fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008f26:	e099      	b.n	800905c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f28:	4b88      	ldr	r3, [pc, #544]	@ (800914c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f003 0320 	and.w	r3, r3, #32
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d02d      	beq.n	8008f90 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f34:	4b85      	ldr	r3, [pc, #532]	@ (800914c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	08db      	lsrs	r3, r3, #3
 8008f3a:	f003 0303 	and.w	r3, r3, #3
 8008f3e:	4a84      	ldr	r2, [pc, #528]	@ (8009150 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008f40:	fa22 f303 	lsr.w	r3, r2, r3
 8008f44:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	ee07 3a90 	vmov	s15, r3
 8008f4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	ee07 3a90 	vmov	s15, r3
 8008f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f5e:	4b7b      	ldr	r3, [pc, #492]	@ (800914c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f66:	ee07 3a90 	vmov	s15, r3
 8008f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f72:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009154 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008f8e:	e087      	b.n	80090a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	ee07 3a90 	vmov	s15, r3
 8008f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f9a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009158 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fa2:	4b6a      	ldr	r3, [pc, #424]	@ (800914c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008faa:	ee07 3a90 	vmov	s15, r3
 8008fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fb6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009154 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fd2:	e065      	b.n	80090a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	ee07 3a90 	vmov	s15, r3
 8008fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fde:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800915c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fe6:	4b59      	ldr	r3, [pc, #356]	@ (800914c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fee:	ee07 3a90 	vmov	s15, r3
 8008ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ffa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009154 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800900a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800900e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009016:	e043      	b.n	80090a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	ee07 3a90 	vmov	s15, r3
 800901e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009022:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009160 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800902a:	4b48      	ldr	r3, [pc, #288]	@ (800914c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800902c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800902e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009032:	ee07 3a90 	vmov	s15, r3
 8009036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800903a:	ed97 6a03 	vldr	s12, [r7, #12]
 800903e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009154 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800904a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800904e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800905a:	e021      	b.n	80090a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	ee07 3a90 	vmov	s15, r3
 8009062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009066:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800915c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800906a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800906e:	4b37      	ldr	r3, [pc, #220]	@ (800914c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009076:	ee07 3a90 	vmov	s15, r3
 800907a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800907e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009082:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009154 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800908a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800908e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800909a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800909e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80090a0:	4b2a      	ldr	r3, [pc, #168]	@ (800914c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090a4:	0a5b      	lsrs	r3, r3, #9
 80090a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090aa:	ee07 3a90 	vmov	s15, r3
 80090ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80090be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090c6:	ee17 2a90 	vmov	r2, s15
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80090ce:	4b1f      	ldr	r3, [pc, #124]	@ (800914c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090d2:	0c1b      	lsrs	r3, r3, #16
 80090d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090d8:	ee07 3a90 	vmov	s15, r3
 80090dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80090ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090f4:	ee17 2a90 	vmov	r2, s15
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80090fc:	4b13      	ldr	r3, [pc, #76]	@ (800914c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009100:	0e1b      	lsrs	r3, r3, #24
 8009102:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009106:	ee07 3a90 	vmov	s15, r3
 800910a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800910e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009112:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009116:	edd7 6a07 	vldr	s13, [r7, #28]
 800911a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800911e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009122:	ee17 2a90 	vmov	r2, s15
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800912a:	e008      	b.n	800913e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	609a      	str	r2, [r3, #8]
}
 800913e:	bf00      	nop
 8009140:	3724      	adds	r7, #36	@ 0x24
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop
 800914c:	58024400 	.word	0x58024400
 8009150:	03d09000 	.word	0x03d09000
 8009154:	46000000 	.word	0x46000000
 8009158:	4c742400 	.word	0x4c742400
 800915c:	4a742400 	.word	0x4a742400
 8009160:	4bb71b00 	.word	0x4bb71b00

08009164 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009164:	b480      	push	{r7}
 8009166:	b089      	sub	sp, #36	@ 0x24
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800916c:	4ba1      	ldr	r3, [pc, #644]	@ (80093f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800916e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009170:	f003 0303 	and.w	r3, r3, #3
 8009174:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009176:	4b9f      	ldr	r3, [pc, #636]	@ (80093f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800917a:	0d1b      	lsrs	r3, r3, #20
 800917c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009180:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009182:	4b9c      	ldr	r3, [pc, #624]	@ (80093f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009186:	0a1b      	lsrs	r3, r3, #8
 8009188:	f003 0301 	and.w	r3, r3, #1
 800918c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800918e:	4b99      	ldr	r3, [pc, #612]	@ (80093f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009192:	08db      	lsrs	r3, r3, #3
 8009194:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009198:	693a      	ldr	r2, [r7, #16]
 800919a:	fb02 f303 	mul.w	r3, r2, r3
 800919e:	ee07 3a90 	vmov	s15, r3
 80091a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f000 8111 	beq.w	80093d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	f000 8083 	beq.w	80092c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	2b02      	cmp	r3, #2
 80091be:	f200 80a1 	bhi.w	8009304 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d003      	beq.n	80091d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d056      	beq.n	800927c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80091ce:	e099      	b.n	8009304 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091d0:	4b88      	ldr	r3, [pc, #544]	@ (80093f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 0320 	and.w	r3, r3, #32
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d02d      	beq.n	8009238 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091dc:	4b85      	ldr	r3, [pc, #532]	@ (80093f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	08db      	lsrs	r3, r3, #3
 80091e2:	f003 0303 	and.w	r3, r3, #3
 80091e6:	4a84      	ldr	r2, [pc, #528]	@ (80093f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80091e8:	fa22 f303 	lsr.w	r3, r2, r3
 80091ec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	ee07 3a90 	vmov	s15, r3
 80091f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	ee07 3a90 	vmov	s15, r3
 80091fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009206:	4b7b      	ldr	r3, [pc, #492]	@ (80093f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800920a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800920e:	ee07 3a90 	vmov	s15, r3
 8009212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009216:	ed97 6a03 	vldr	s12, [r7, #12]
 800921a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80093fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800921e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009226:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800922a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800922e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009232:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009236:	e087      	b.n	8009348 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	ee07 3a90 	vmov	s15, r3
 800923e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009242:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009400 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800924a:	4b6a      	ldr	r3, [pc, #424]	@ (80093f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800924c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800924e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009252:	ee07 3a90 	vmov	s15, r3
 8009256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800925a:	ed97 6a03 	vldr	s12, [r7, #12]
 800925e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80093fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800926a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800926e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009276:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800927a:	e065      	b.n	8009348 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	ee07 3a90 	vmov	s15, r3
 8009282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009286:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009404 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800928a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800928e:	4b59      	ldr	r3, [pc, #356]	@ (80093f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009296:	ee07 3a90 	vmov	s15, r3
 800929a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800929e:	ed97 6a03 	vldr	s12, [r7, #12]
 80092a2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80093fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80092a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092be:	e043      	b.n	8009348 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	ee07 3a90 	vmov	s15, r3
 80092c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009408 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80092ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092d2:	4b48      	ldr	r3, [pc, #288]	@ (80093f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092da:	ee07 3a90 	vmov	s15, r3
 80092de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80092e6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80093fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80092ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009302:	e021      	b.n	8009348 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	ee07 3a90 	vmov	s15, r3
 800930a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800930e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009404 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009316:	4b37      	ldr	r3, [pc, #220]	@ (80093f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800931a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800931e:	ee07 3a90 	vmov	s15, r3
 8009322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009326:	ed97 6a03 	vldr	s12, [r7, #12]
 800932a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80093fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800932e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009336:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800933a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800933e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009342:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009346:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009348:	4b2a      	ldr	r3, [pc, #168]	@ (80093f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800934a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800934c:	0a5b      	lsrs	r3, r3, #9
 800934e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009352:	ee07 3a90 	vmov	s15, r3
 8009356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800935a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800935e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009362:	edd7 6a07 	vldr	s13, [r7, #28]
 8009366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800936a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800936e:	ee17 2a90 	vmov	r2, s15
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009376:	4b1f      	ldr	r3, [pc, #124]	@ (80093f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800937a:	0c1b      	lsrs	r3, r3, #16
 800937c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009380:	ee07 3a90 	vmov	s15, r3
 8009384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009388:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800938c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009390:	edd7 6a07 	vldr	s13, [r7, #28]
 8009394:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800939c:	ee17 2a90 	vmov	r2, s15
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80093a4:	4b13      	ldr	r3, [pc, #76]	@ (80093f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093a8:	0e1b      	lsrs	r3, r3, #24
 80093aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093ae:	ee07 3a90 	vmov	s15, r3
 80093b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093be:	edd7 6a07 	vldr	s13, [r7, #28]
 80093c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093ca:	ee17 2a90 	vmov	r2, s15
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80093d2:	e008      	b.n	80093e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	609a      	str	r2, [r3, #8]
}
 80093e6:	bf00      	nop
 80093e8:	3724      	adds	r7, #36	@ 0x24
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	58024400 	.word	0x58024400
 80093f8:	03d09000 	.word	0x03d09000
 80093fc:	46000000 	.word	0x46000000
 8009400:	4c742400 	.word	0x4c742400
 8009404:	4a742400 	.word	0x4a742400
 8009408:	4bb71b00 	.word	0x4bb71b00

0800940c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800940c:	b480      	push	{r7}
 800940e:	b089      	sub	sp, #36	@ 0x24
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009414:	4ba0      	ldr	r3, [pc, #640]	@ (8009698 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009418:	f003 0303 	and.w	r3, r3, #3
 800941c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800941e:	4b9e      	ldr	r3, [pc, #632]	@ (8009698 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009422:	091b      	lsrs	r3, r3, #4
 8009424:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009428:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800942a:	4b9b      	ldr	r3, [pc, #620]	@ (8009698 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800942c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800942e:	f003 0301 	and.w	r3, r3, #1
 8009432:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009434:	4b98      	ldr	r3, [pc, #608]	@ (8009698 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009438:	08db      	lsrs	r3, r3, #3
 800943a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800943e:	693a      	ldr	r2, [r7, #16]
 8009440:	fb02 f303 	mul.w	r3, r2, r3
 8009444:	ee07 3a90 	vmov	s15, r3
 8009448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800944c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	2b00      	cmp	r3, #0
 8009454:	f000 8111 	beq.w	800967a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	2b02      	cmp	r3, #2
 800945c:	f000 8083 	beq.w	8009566 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	2b02      	cmp	r3, #2
 8009464:	f200 80a1 	bhi.w	80095aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009468:	69bb      	ldr	r3, [r7, #24]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d003      	beq.n	8009476 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	2b01      	cmp	r3, #1
 8009472:	d056      	beq.n	8009522 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009474:	e099      	b.n	80095aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009476:	4b88      	ldr	r3, [pc, #544]	@ (8009698 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f003 0320 	and.w	r3, r3, #32
 800947e:	2b00      	cmp	r3, #0
 8009480:	d02d      	beq.n	80094de <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009482:	4b85      	ldr	r3, [pc, #532]	@ (8009698 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	08db      	lsrs	r3, r3, #3
 8009488:	f003 0303 	and.w	r3, r3, #3
 800948c:	4a83      	ldr	r2, [pc, #524]	@ (800969c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800948e:	fa22 f303 	lsr.w	r3, r2, r3
 8009492:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	ee07 3a90 	vmov	s15, r3
 800949a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	ee07 3a90 	vmov	s15, r3
 80094a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ac:	4b7a      	ldr	r3, [pc, #488]	@ (8009698 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094b4:	ee07 3a90 	vmov	s15, r3
 80094b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80094c0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80096a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80094c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094d8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80094dc:	e087      	b.n	80095ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	ee07 3a90 	vmov	s15, r3
 80094e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094e8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80096a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80094ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094f0:	4b69      	ldr	r3, [pc, #420]	@ (8009698 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094f8:	ee07 3a90 	vmov	s15, r3
 80094fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009500:	ed97 6a03 	vldr	s12, [r7, #12]
 8009504:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80096a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009508:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800950c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009510:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009514:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800951c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009520:	e065      	b.n	80095ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	ee07 3a90 	vmov	s15, r3
 8009528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800952c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80096a8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009534:	4b58      	ldr	r3, [pc, #352]	@ (8009698 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800953c:	ee07 3a90 	vmov	s15, r3
 8009540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009544:	ed97 6a03 	vldr	s12, [r7, #12]
 8009548:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80096a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800954c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009550:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009554:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009558:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800955c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009560:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009564:	e043      	b.n	80095ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	ee07 3a90 	vmov	s15, r3
 800956c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009570:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80096ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009574:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009578:	4b47      	ldr	r3, [pc, #284]	@ (8009698 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800957a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800957c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009580:	ee07 3a90 	vmov	s15, r3
 8009584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009588:	ed97 6a03 	vldr	s12, [r7, #12]
 800958c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80096a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009590:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009594:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009598:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800959c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095a8:	e021      	b.n	80095ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	ee07 3a90 	vmov	s15, r3
 80095b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095b4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80096a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80095b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095bc:	4b36      	ldr	r3, [pc, #216]	@ (8009698 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095c4:	ee07 3a90 	vmov	s15, r3
 80095c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80095d0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80096a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80095d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095ec:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80095ee:	4b2a      	ldr	r3, [pc, #168]	@ (8009698 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095f2:	0a5b      	lsrs	r3, r3, #9
 80095f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095f8:	ee07 3a90 	vmov	s15, r3
 80095fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009600:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009604:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009608:	edd7 6a07 	vldr	s13, [r7, #28]
 800960c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009614:	ee17 2a90 	vmov	r2, s15
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800961c:	4b1e      	ldr	r3, [pc, #120]	@ (8009698 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800961e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009620:	0c1b      	lsrs	r3, r3, #16
 8009622:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009626:	ee07 3a90 	vmov	s15, r3
 800962a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800962e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009632:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009636:	edd7 6a07 	vldr	s13, [r7, #28]
 800963a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800963e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009642:	ee17 2a90 	vmov	r2, s15
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800964a:	4b13      	ldr	r3, [pc, #76]	@ (8009698 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800964c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800964e:	0e1b      	lsrs	r3, r3, #24
 8009650:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009654:	ee07 3a90 	vmov	s15, r3
 8009658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800965c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009660:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009664:	edd7 6a07 	vldr	s13, [r7, #28]
 8009668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800966c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009670:	ee17 2a90 	vmov	r2, s15
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009678:	e008      	b.n	800968c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	609a      	str	r2, [r3, #8]
}
 800968c:	bf00      	nop
 800968e:	3724      	adds	r7, #36	@ 0x24
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr
 8009698:	58024400 	.word	0x58024400
 800969c:	03d09000 	.word	0x03d09000
 80096a0:	46000000 	.word	0x46000000
 80096a4:	4c742400 	.word	0x4c742400
 80096a8:	4a742400 	.word	0x4a742400
 80096ac:	4bb71b00 	.word	0x4bb71b00

080096b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80096ba:	2300      	movs	r3, #0
 80096bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80096be:	4b53      	ldr	r3, [pc, #332]	@ (800980c <RCCEx_PLL2_Config+0x15c>)
 80096c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096c2:	f003 0303 	and.w	r3, r3, #3
 80096c6:	2b03      	cmp	r3, #3
 80096c8:	d101      	bne.n	80096ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e099      	b.n	8009802 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80096ce:	4b4f      	ldr	r3, [pc, #316]	@ (800980c <RCCEx_PLL2_Config+0x15c>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a4e      	ldr	r2, [pc, #312]	@ (800980c <RCCEx_PLL2_Config+0x15c>)
 80096d4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80096d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096da:	f7f9 f965 	bl	80029a8 <HAL_GetTick>
 80096de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80096e0:	e008      	b.n	80096f4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80096e2:	f7f9 f961 	bl	80029a8 <HAL_GetTick>
 80096e6:	4602      	mov	r2, r0
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	1ad3      	subs	r3, r2, r3
 80096ec:	2b02      	cmp	r3, #2
 80096ee:	d901      	bls.n	80096f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80096f0:	2303      	movs	r3, #3
 80096f2:	e086      	b.n	8009802 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80096f4:	4b45      	ldr	r3, [pc, #276]	@ (800980c <RCCEx_PLL2_Config+0x15c>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d1f0      	bne.n	80096e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009700:	4b42      	ldr	r3, [pc, #264]	@ (800980c <RCCEx_PLL2_Config+0x15c>)
 8009702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009704:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	031b      	lsls	r3, r3, #12
 800970e:	493f      	ldr	r1, [pc, #252]	@ (800980c <RCCEx_PLL2_Config+0x15c>)
 8009710:	4313      	orrs	r3, r2
 8009712:	628b      	str	r3, [r1, #40]	@ 0x28
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	3b01      	subs	r3, #1
 800971a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	3b01      	subs	r3, #1
 8009724:	025b      	lsls	r3, r3, #9
 8009726:	b29b      	uxth	r3, r3
 8009728:	431a      	orrs	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	3b01      	subs	r3, #1
 8009730:	041b      	lsls	r3, r3, #16
 8009732:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009736:	431a      	orrs	r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	691b      	ldr	r3, [r3, #16]
 800973c:	3b01      	subs	r3, #1
 800973e:	061b      	lsls	r3, r3, #24
 8009740:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009744:	4931      	ldr	r1, [pc, #196]	@ (800980c <RCCEx_PLL2_Config+0x15c>)
 8009746:	4313      	orrs	r3, r2
 8009748:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800974a:	4b30      	ldr	r3, [pc, #192]	@ (800980c <RCCEx_PLL2_Config+0x15c>)
 800974c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800974e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	695b      	ldr	r3, [r3, #20]
 8009756:	492d      	ldr	r1, [pc, #180]	@ (800980c <RCCEx_PLL2_Config+0x15c>)
 8009758:	4313      	orrs	r3, r2
 800975a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800975c:	4b2b      	ldr	r3, [pc, #172]	@ (800980c <RCCEx_PLL2_Config+0x15c>)
 800975e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009760:	f023 0220 	bic.w	r2, r3, #32
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	699b      	ldr	r3, [r3, #24]
 8009768:	4928      	ldr	r1, [pc, #160]	@ (800980c <RCCEx_PLL2_Config+0x15c>)
 800976a:	4313      	orrs	r3, r2
 800976c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800976e:	4b27      	ldr	r3, [pc, #156]	@ (800980c <RCCEx_PLL2_Config+0x15c>)
 8009770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009772:	4a26      	ldr	r2, [pc, #152]	@ (800980c <RCCEx_PLL2_Config+0x15c>)
 8009774:	f023 0310 	bic.w	r3, r3, #16
 8009778:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800977a:	4b24      	ldr	r3, [pc, #144]	@ (800980c <RCCEx_PLL2_Config+0x15c>)
 800977c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800977e:	4b24      	ldr	r3, [pc, #144]	@ (8009810 <RCCEx_PLL2_Config+0x160>)
 8009780:	4013      	ands	r3, r2
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	69d2      	ldr	r2, [r2, #28]
 8009786:	00d2      	lsls	r2, r2, #3
 8009788:	4920      	ldr	r1, [pc, #128]	@ (800980c <RCCEx_PLL2_Config+0x15c>)
 800978a:	4313      	orrs	r3, r2
 800978c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800978e:	4b1f      	ldr	r3, [pc, #124]	@ (800980c <RCCEx_PLL2_Config+0x15c>)
 8009790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009792:	4a1e      	ldr	r2, [pc, #120]	@ (800980c <RCCEx_PLL2_Config+0x15c>)
 8009794:	f043 0310 	orr.w	r3, r3, #16
 8009798:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d106      	bne.n	80097ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80097a0:	4b1a      	ldr	r3, [pc, #104]	@ (800980c <RCCEx_PLL2_Config+0x15c>)
 80097a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097a4:	4a19      	ldr	r2, [pc, #100]	@ (800980c <RCCEx_PLL2_Config+0x15c>)
 80097a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80097aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80097ac:	e00f      	b.n	80097ce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d106      	bne.n	80097c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80097b4:	4b15      	ldr	r3, [pc, #84]	@ (800980c <RCCEx_PLL2_Config+0x15c>)
 80097b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b8:	4a14      	ldr	r2, [pc, #80]	@ (800980c <RCCEx_PLL2_Config+0x15c>)
 80097ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80097be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80097c0:	e005      	b.n	80097ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80097c2:	4b12      	ldr	r3, [pc, #72]	@ (800980c <RCCEx_PLL2_Config+0x15c>)
 80097c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097c6:	4a11      	ldr	r2, [pc, #68]	@ (800980c <RCCEx_PLL2_Config+0x15c>)
 80097c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80097cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80097ce:	4b0f      	ldr	r3, [pc, #60]	@ (800980c <RCCEx_PLL2_Config+0x15c>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a0e      	ldr	r2, [pc, #56]	@ (800980c <RCCEx_PLL2_Config+0x15c>)
 80097d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80097d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097da:	f7f9 f8e5 	bl	80029a8 <HAL_GetTick>
 80097de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80097e0:	e008      	b.n	80097f4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80097e2:	f7f9 f8e1 	bl	80029a8 <HAL_GetTick>
 80097e6:	4602      	mov	r2, r0
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	1ad3      	subs	r3, r2, r3
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d901      	bls.n	80097f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80097f0:	2303      	movs	r3, #3
 80097f2:	e006      	b.n	8009802 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80097f4:	4b05      	ldr	r3, [pc, #20]	@ (800980c <RCCEx_PLL2_Config+0x15c>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d0f0      	beq.n	80097e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009800:	7bfb      	ldrb	r3, [r7, #15]
}
 8009802:	4618      	mov	r0, r3
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	58024400 	.word	0x58024400
 8009810:	ffff0007 	.word	0xffff0007

08009814 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800981e:	2300      	movs	r3, #0
 8009820:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009822:	4b53      	ldr	r3, [pc, #332]	@ (8009970 <RCCEx_PLL3_Config+0x15c>)
 8009824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009826:	f003 0303 	and.w	r3, r3, #3
 800982a:	2b03      	cmp	r3, #3
 800982c:	d101      	bne.n	8009832 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	e099      	b.n	8009966 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009832:	4b4f      	ldr	r3, [pc, #316]	@ (8009970 <RCCEx_PLL3_Config+0x15c>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a4e      	ldr	r2, [pc, #312]	@ (8009970 <RCCEx_PLL3_Config+0x15c>)
 8009838:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800983c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800983e:	f7f9 f8b3 	bl	80029a8 <HAL_GetTick>
 8009842:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009844:	e008      	b.n	8009858 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009846:	f7f9 f8af 	bl	80029a8 <HAL_GetTick>
 800984a:	4602      	mov	r2, r0
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	1ad3      	subs	r3, r2, r3
 8009850:	2b02      	cmp	r3, #2
 8009852:	d901      	bls.n	8009858 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009854:	2303      	movs	r3, #3
 8009856:	e086      	b.n	8009966 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009858:	4b45      	ldr	r3, [pc, #276]	@ (8009970 <RCCEx_PLL3_Config+0x15c>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009860:	2b00      	cmp	r3, #0
 8009862:	d1f0      	bne.n	8009846 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009864:	4b42      	ldr	r3, [pc, #264]	@ (8009970 <RCCEx_PLL3_Config+0x15c>)
 8009866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009868:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	051b      	lsls	r3, r3, #20
 8009872:	493f      	ldr	r1, [pc, #252]	@ (8009970 <RCCEx_PLL3_Config+0x15c>)
 8009874:	4313      	orrs	r3, r2
 8009876:	628b      	str	r3, [r1, #40]	@ 0x28
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	3b01      	subs	r3, #1
 800987e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	3b01      	subs	r3, #1
 8009888:	025b      	lsls	r3, r3, #9
 800988a:	b29b      	uxth	r3, r3
 800988c:	431a      	orrs	r2, r3
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	3b01      	subs	r3, #1
 8009894:	041b      	lsls	r3, r3, #16
 8009896:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800989a:	431a      	orrs	r2, r3
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	3b01      	subs	r3, #1
 80098a2:	061b      	lsls	r3, r3, #24
 80098a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80098a8:	4931      	ldr	r1, [pc, #196]	@ (8009970 <RCCEx_PLL3_Config+0x15c>)
 80098aa:	4313      	orrs	r3, r2
 80098ac:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80098ae:	4b30      	ldr	r3, [pc, #192]	@ (8009970 <RCCEx_PLL3_Config+0x15c>)
 80098b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	695b      	ldr	r3, [r3, #20]
 80098ba:	492d      	ldr	r1, [pc, #180]	@ (8009970 <RCCEx_PLL3_Config+0x15c>)
 80098bc:	4313      	orrs	r3, r2
 80098be:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80098c0:	4b2b      	ldr	r3, [pc, #172]	@ (8009970 <RCCEx_PLL3_Config+0x15c>)
 80098c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098c4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	699b      	ldr	r3, [r3, #24]
 80098cc:	4928      	ldr	r1, [pc, #160]	@ (8009970 <RCCEx_PLL3_Config+0x15c>)
 80098ce:	4313      	orrs	r3, r2
 80098d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80098d2:	4b27      	ldr	r3, [pc, #156]	@ (8009970 <RCCEx_PLL3_Config+0x15c>)
 80098d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098d6:	4a26      	ldr	r2, [pc, #152]	@ (8009970 <RCCEx_PLL3_Config+0x15c>)
 80098d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80098de:	4b24      	ldr	r3, [pc, #144]	@ (8009970 <RCCEx_PLL3_Config+0x15c>)
 80098e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80098e2:	4b24      	ldr	r3, [pc, #144]	@ (8009974 <RCCEx_PLL3_Config+0x160>)
 80098e4:	4013      	ands	r3, r2
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	69d2      	ldr	r2, [r2, #28]
 80098ea:	00d2      	lsls	r2, r2, #3
 80098ec:	4920      	ldr	r1, [pc, #128]	@ (8009970 <RCCEx_PLL3_Config+0x15c>)
 80098ee:	4313      	orrs	r3, r2
 80098f0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80098f2:	4b1f      	ldr	r3, [pc, #124]	@ (8009970 <RCCEx_PLL3_Config+0x15c>)
 80098f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098f6:	4a1e      	ldr	r2, [pc, #120]	@ (8009970 <RCCEx_PLL3_Config+0x15c>)
 80098f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80098fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d106      	bne.n	8009912 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009904:	4b1a      	ldr	r3, [pc, #104]	@ (8009970 <RCCEx_PLL3_Config+0x15c>)
 8009906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009908:	4a19      	ldr	r2, [pc, #100]	@ (8009970 <RCCEx_PLL3_Config+0x15c>)
 800990a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800990e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009910:	e00f      	b.n	8009932 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d106      	bne.n	8009926 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009918:	4b15      	ldr	r3, [pc, #84]	@ (8009970 <RCCEx_PLL3_Config+0x15c>)
 800991a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800991c:	4a14      	ldr	r2, [pc, #80]	@ (8009970 <RCCEx_PLL3_Config+0x15c>)
 800991e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009922:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009924:	e005      	b.n	8009932 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009926:	4b12      	ldr	r3, [pc, #72]	@ (8009970 <RCCEx_PLL3_Config+0x15c>)
 8009928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800992a:	4a11      	ldr	r2, [pc, #68]	@ (8009970 <RCCEx_PLL3_Config+0x15c>)
 800992c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009930:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009932:	4b0f      	ldr	r3, [pc, #60]	@ (8009970 <RCCEx_PLL3_Config+0x15c>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a0e      	ldr	r2, [pc, #56]	@ (8009970 <RCCEx_PLL3_Config+0x15c>)
 8009938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800993c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800993e:	f7f9 f833 	bl	80029a8 <HAL_GetTick>
 8009942:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009944:	e008      	b.n	8009958 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009946:	f7f9 f82f 	bl	80029a8 <HAL_GetTick>
 800994a:	4602      	mov	r2, r0
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	1ad3      	subs	r3, r2, r3
 8009950:	2b02      	cmp	r3, #2
 8009952:	d901      	bls.n	8009958 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009954:	2303      	movs	r3, #3
 8009956:	e006      	b.n	8009966 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009958:	4b05      	ldr	r3, [pc, #20]	@ (8009970 <RCCEx_PLL3_Config+0x15c>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009960:	2b00      	cmp	r3, #0
 8009962:	d0f0      	beq.n	8009946 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009964:	7bfb      	ldrb	r3, [r7, #15]
}
 8009966:	4618      	mov	r0, r3
 8009968:	3710      	adds	r7, #16
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	58024400 	.word	0x58024400
 8009974:	ffff0007 	.word	0xffff0007

08009978 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d101      	bne.n	800998a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	e042      	b.n	8009a10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009990:	2b00      	cmp	r3, #0
 8009992:	d106      	bne.n	80099a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f7f8 fe03 	bl	80025a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2224      	movs	r2, #36	@ 0x24
 80099a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f022 0201 	bic.w	r2, r2, #1
 80099b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d002      	beq.n	80099c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 ff38 	bl	800a838 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 f8c9 	bl	8009b60 <UART_SetConfig>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d101      	bne.n	80099d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80099d4:	2301      	movs	r3, #1
 80099d6:	e01b      	b.n	8009a10 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	685a      	ldr	r2, [r3, #4]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80099e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	689a      	ldr	r2, [r3, #8]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80099f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f042 0201 	orr.w	r2, r2, #1
 8009a06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 ffb7 	bl	800a97c <UART_CheckIdleState>
 8009a0e:	4603      	mov	r3, r0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b08a      	sub	sp, #40	@ 0x28
 8009a1c:	af02      	add	r7, sp, #8
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	603b      	str	r3, [r7, #0]
 8009a24:	4613      	mov	r3, r2
 8009a26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a2e:	2b20      	cmp	r3, #32
 8009a30:	d17b      	bne.n	8009b2a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d002      	beq.n	8009a3e <HAL_UART_Transmit+0x26>
 8009a38:	88fb      	ldrh	r3, [r7, #6]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d101      	bne.n	8009a42 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e074      	b.n	8009b2c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2221      	movs	r2, #33	@ 0x21
 8009a4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a52:	f7f8 ffa9 	bl	80029a8 <HAL_GetTick>
 8009a56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	88fa      	ldrh	r2, [r7, #6]
 8009a5c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	88fa      	ldrh	r2, [r7, #6]
 8009a64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a70:	d108      	bne.n	8009a84 <HAL_UART_Transmit+0x6c>
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	691b      	ldr	r3, [r3, #16]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d104      	bne.n	8009a84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	61bb      	str	r3, [r7, #24]
 8009a82:	e003      	b.n	8009a8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009a8c:	e030      	b.n	8009af0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	9300      	str	r3, [sp, #0]
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	2200      	movs	r2, #0
 8009a96:	2180      	movs	r1, #128	@ 0x80
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f001 f819 	bl	800aad0 <UART_WaitOnFlagUntilTimeout>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d005      	beq.n	8009ab0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2220      	movs	r2, #32
 8009aa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009aac:	2303      	movs	r3, #3
 8009aae:	e03d      	b.n	8009b2c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d10b      	bne.n	8009ace <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	881b      	ldrh	r3, [r3, #0]
 8009aba:	461a      	mov	r2, r3
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ac4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	3302      	adds	r3, #2
 8009aca:	61bb      	str	r3, [r7, #24]
 8009acc:	e007      	b.n	8009ade <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009ace:	69fb      	ldr	r3, [r7, #28]
 8009ad0:	781a      	ldrb	r2, [r3, #0]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009ad8:	69fb      	ldr	r3, [r7, #28]
 8009ada:	3301      	adds	r3, #1
 8009adc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	b29a      	uxth	r2, r3
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1c8      	bne.n	8009a8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	9300      	str	r3, [sp, #0]
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	2200      	movs	r2, #0
 8009b04:	2140      	movs	r1, #64	@ 0x40
 8009b06:	68f8      	ldr	r0, [r7, #12]
 8009b08:	f000 ffe2 	bl	800aad0 <UART_WaitOnFlagUntilTimeout>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d005      	beq.n	8009b1e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2220      	movs	r2, #32
 8009b16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	e006      	b.n	8009b2c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2220      	movs	r2, #32
 8009b22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009b26:	2300      	movs	r3, #0
 8009b28:	e000      	b.n	8009b2c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009b2a:	2302      	movs	r3, #2
  }
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3720      	adds	r7, #32
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b42:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b4a:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8009b4c:	68fa      	ldr	r2, [r7, #12]
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	4313      	orrs	r3, r2
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3714      	adds	r7, #20
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr
	...

08009b60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b64:	b092      	sub	sp, #72	@ 0x48
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	689a      	ldr	r2, [r3, #8]
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	691b      	ldr	r3, [r3, #16]
 8009b78:	431a      	orrs	r2, r3
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	695b      	ldr	r3, [r3, #20]
 8009b7e:	431a      	orrs	r2, r3
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	69db      	ldr	r3, [r3, #28]
 8009b84:	4313      	orrs	r3, r2
 8009b86:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	4bbe      	ldr	r3, [pc, #760]	@ (8009e88 <UART_SetConfig+0x328>)
 8009b90:	4013      	ands	r3, r2
 8009b92:	697a      	ldr	r2, [r7, #20]
 8009b94:	6812      	ldr	r2, [r2, #0]
 8009b96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009b98:	430b      	orrs	r3, r1
 8009b9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	68da      	ldr	r2, [r3, #12]
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	430a      	orrs	r2, r1
 8009bb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	699b      	ldr	r3, [r3, #24]
 8009bb6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4ab3      	ldr	r2, [pc, #716]	@ (8009e8c <UART_SetConfig+0x32c>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d004      	beq.n	8009bcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	6a1b      	ldr	r3, [r3, #32]
 8009bc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	689a      	ldr	r2, [r3, #8]
 8009bd2:	4baf      	ldr	r3, [pc, #700]	@ (8009e90 <UART_SetConfig+0x330>)
 8009bd4:	4013      	ands	r3, r2
 8009bd6:	697a      	ldr	r2, [r7, #20]
 8009bd8:	6812      	ldr	r2, [r2, #0]
 8009bda:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009bdc:	430b      	orrs	r3, r1
 8009bde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009be6:	f023 010f 	bic.w	r1, r3, #15
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	430a      	orrs	r2, r1
 8009bf4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4aa6      	ldr	r2, [pc, #664]	@ (8009e94 <UART_SetConfig+0x334>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d177      	bne.n	8009cf0 <UART_SetConfig+0x190>
 8009c00:	4ba5      	ldr	r3, [pc, #660]	@ (8009e98 <UART_SetConfig+0x338>)
 8009c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c08:	2b28      	cmp	r3, #40	@ 0x28
 8009c0a:	d86d      	bhi.n	8009ce8 <UART_SetConfig+0x188>
 8009c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c14 <UART_SetConfig+0xb4>)
 8009c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c12:	bf00      	nop
 8009c14:	08009cb9 	.word	0x08009cb9
 8009c18:	08009ce9 	.word	0x08009ce9
 8009c1c:	08009ce9 	.word	0x08009ce9
 8009c20:	08009ce9 	.word	0x08009ce9
 8009c24:	08009ce9 	.word	0x08009ce9
 8009c28:	08009ce9 	.word	0x08009ce9
 8009c2c:	08009ce9 	.word	0x08009ce9
 8009c30:	08009ce9 	.word	0x08009ce9
 8009c34:	08009cc1 	.word	0x08009cc1
 8009c38:	08009ce9 	.word	0x08009ce9
 8009c3c:	08009ce9 	.word	0x08009ce9
 8009c40:	08009ce9 	.word	0x08009ce9
 8009c44:	08009ce9 	.word	0x08009ce9
 8009c48:	08009ce9 	.word	0x08009ce9
 8009c4c:	08009ce9 	.word	0x08009ce9
 8009c50:	08009ce9 	.word	0x08009ce9
 8009c54:	08009cc9 	.word	0x08009cc9
 8009c58:	08009ce9 	.word	0x08009ce9
 8009c5c:	08009ce9 	.word	0x08009ce9
 8009c60:	08009ce9 	.word	0x08009ce9
 8009c64:	08009ce9 	.word	0x08009ce9
 8009c68:	08009ce9 	.word	0x08009ce9
 8009c6c:	08009ce9 	.word	0x08009ce9
 8009c70:	08009ce9 	.word	0x08009ce9
 8009c74:	08009cd1 	.word	0x08009cd1
 8009c78:	08009ce9 	.word	0x08009ce9
 8009c7c:	08009ce9 	.word	0x08009ce9
 8009c80:	08009ce9 	.word	0x08009ce9
 8009c84:	08009ce9 	.word	0x08009ce9
 8009c88:	08009ce9 	.word	0x08009ce9
 8009c8c:	08009ce9 	.word	0x08009ce9
 8009c90:	08009ce9 	.word	0x08009ce9
 8009c94:	08009cd9 	.word	0x08009cd9
 8009c98:	08009ce9 	.word	0x08009ce9
 8009c9c:	08009ce9 	.word	0x08009ce9
 8009ca0:	08009ce9 	.word	0x08009ce9
 8009ca4:	08009ce9 	.word	0x08009ce9
 8009ca8:	08009ce9 	.word	0x08009ce9
 8009cac:	08009ce9 	.word	0x08009ce9
 8009cb0:	08009ce9 	.word	0x08009ce9
 8009cb4:	08009ce1 	.word	0x08009ce1
 8009cb8:	2301      	movs	r3, #1
 8009cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cbe:	e326      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009cc0:	2304      	movs	r3, #4
 8009cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cc6:	e322      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009cc8:	2308      	movs	r3, #8
 8009cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cce:	e31e      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009cd0:	2310      	movs	r3, #16
 8009cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cd6:	e31a      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009cd8:	2320      	movs	r3, #32
 8009cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cde:	e316      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009ce0:	2340      	movs	r3, #64	@ 0x40
 8009ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ce6:	e312      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009ce8:	2380      	movs	r3, #128	@ 0x80
 8009cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cee:	e30e      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a69      	ldr	r2, [pc, #420]	@ (8009e9c <UART_SetConfig+0x33c>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d130      	bne.n	8009d5c <UART_SetConfig+0x1fc>
 8009cfa:	4b67      	ldr	r3, [pc, #412]	@ (8009e98 <UART_SetConfig+0x338>)
 8009cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cfe:	f003 0307 	and.w	r3, r3, #7
 8009d02:	2b05      	cmp	r3, #5
 8009d04:	d826      	bhi.n	8009d54 <UART_SetConfig+0x1f4>
 8009d06:	a201      	add	r2, pc, #4	@ (adr r2, 8009d0c <UART_SetConfig+0x1ac>)
 8009d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d0c:	08009d25 	.word	0x08009d25
 8009d10:	08009d2d 	.word	0x08009d2d
 8009d14:	08009d35 	.word	0x08009d35
 8009d18:	08009d3d 	.word	0x08009d3d
 8009d1c:	08009d45 	.word	0x08009d45
 8009d20:	08009d4d 	.word	0x08009d4d
 8009d24:	2300      	movs	r3, #0
 8009d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d2a:	e2f0      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009d2c:	2304      	movs	r3, #4
 8009d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d32:	e2ec      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009d34:	2308      	movs	r3, #8
 8009d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d3a:	e2e8      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009d3c:	2310      	movs	r3, #16
 8009d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d42:	e2e4      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009d44:	2320      	movs	r3, #32
 8009d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d4a:	e2e0      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009d4c:	2340      	movs	r3, #64	@ 0x40
 8009d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d52:	e2dc      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009d54:	2380      	movs	r3, #128	@ 0x80
 8009d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d5a:	e2d8      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a4f      	ldr	r2, [pc, #316]	@ (8009ea0 <UART_SetConfig+0x340>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d130      	bne.n	8009dc8 <UART_SetConfig+0x268>
 8009d66:	4b4c      	ldr	r3, [pc, #304]	@ (8009e98 <UART_SetConfig+0x338>)
 8009d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d6a:	f003 0307 	and.w	r3, r3, #7
 8009d6e:	2b05      	cmp	r3, #5
 8009d70:	d826      	bhi.n	8009dc0 <UART_SetConfig+0x260>
 8009d72:	a201      	add	r2, pc, #4	@ (adr r2, 8009d78 <UART_SetConfig+0x218>)
 8009d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d78:	08009d91 	.word	0x08009d91
 8009d7c:	08009d99 	.word	0x08009d99
 8009d80:	08009da1 	.word	0x08009da1
 8009d84:	08009da9 	.word	0x08009da9
 8009d88:	08009db1 	.word	0x08009db1
 8009d8c:	08009db9 	.word	0x08009db9
 8009d90:	2300      	movs	r3, #0
 8009d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d96:	e2ba      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009d98:	2304      	movs	r3, #4
 8009d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d9e:	e2b6      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009da0:	2308      	movs	r3, #8
 8009da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009da6:	e2b2      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009da8:	2310      	movs	r3, #16
 8009daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dae:	e2ae      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009db0:	2320      	movs	r3, #32
 8009db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009db6:	e2aa      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009db8:	2340      	movs	r3, #64	@ 0x40
 8009dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dbe:	e2a6      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009dc0:	2380      	movs	r3, #128	@ 0x80
 8009dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dc6:	e2a2      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a35      	ldr	r2, [pc, #212]	@ (8009ea4 <UART_SetConfig+0x344>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d130      	bne.n	8009e34 <UART_SetConfig+0x2d4>
 8009dd2:	4b31      	ldr	r3, [pc, #196]	@ (8009e98 <UART_SetConfig+0x338>)
 8009dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dd6:	f003 0307 	and.w	r3, r3, #7
 8009dda:	2b05      	cmp	r3, #5
 8009ddc:	d826      	bhi.n	8009e2c <UART_SetConfig+0x2cc>
 8009dde:	a201      	add	r2, pc, #4	@ (adr r2, 8009de4 <UART_SetConfig+0x284>)
 8009de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de4:	08009dfd 	.word	0x08009dfd
 8009de8:	08009e05 	.word	0x08009e05
 8009dec:	08009e0d 	.word	0x08009e0d
 8009df0:	08009e15 	.word	0x08009e15
 8009df4:	08009e1d 	.word	0x08009e1d
 8009df8:	08009e25 	.word	0x08009e25
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e02:	e284      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009e04:	2304      	movs	r3, #4
 8009e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e0a:	e280      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009e0c:	2308      	movs	r3, #8
 8009e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e12:	e27c      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009e14:	2310      	movs	r3, #16
 8009e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e1a:	e278      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009e1c:	2320      	movs	r3, #32
 8009e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e22:	e274      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009e24:	2340      	movs	r3, #64	@ 0x40
 8009e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e2a:	e270      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009e2c:	2380      	movs	r3, #128	@ 0x80
 8009e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e32:	e26c      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a1b      	ldr	r2, [pc, #108]	@ (8009ea8 <UART_SetConfig+0x348>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d142      	bne.n	8009ec4 <UART_SetConfig+0x364>
 8009e3e:	4b16      	ldr	r3, [pc, #88]	@ (8009e98 <UART_SetConfig+0x338>)
 8009e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e42:	f003 0307 	and.w	r3, r3, #7
 8009e46:	2b05      	cmp	r3, #5
 8009e48:	d838      	bhi.n	8009ebc <UART_SetConfig+0x35c>
 8009e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8009e50 <UART_SetConfig+0x2f0>)
 8009e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e50:	08009e69 	.word	0x08009e69
 8009e54:	08009e71 	.word	0x08009e71
 8009e58:	08009e79 	.word	0x08009e79
 8009e5c:	08009e81 	.word	0x08009e81
 8009e60:	08009ead 	.word	0x08009ead
 8009e64:	08009eb5 	.word	0x08009eb5
 8009e68:	2300      	movs	r3, #0
 8009e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e6e:	e24e      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009e70:	2304      	movs	r3, #4
 8009e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e76:	e24a      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009e78:	2308      	movs	r3, #8
 8009e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e7e:	e246      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009e80:	2310      	movs	r3, #16
 8009e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e86:	e242      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009e88:	cfff69f3 	.word	0xcfff69f3
 8009e8c:	58000c00 	.word	0x58000c00
 8009e90:	11fff4ff 	.word	0x11fff4ff
 8009e94:	40011000 	.word	0x40011000
 8009e98:	58024400 	.word	0x58024400
 8009e9c:	40004400 	.word	0x40004400
 8009ea0:	40004800 	.word	0x40004800
 8009ea4:	40004c00 	.word	0x40004c00
 8009ea8:	40005000 	.word	0x40005000
 8009eac:	2320      	movs	r3, #32
 8009eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eb2:	e22c      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009eb4:	2340      	movs	r3, #64	@ 0x40
 8009eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eba:	e228      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009ebc:	2380      	movs	r3, #128	@ 0x80
 8009ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ec2:	e224      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4ab1      	ldr	r2, [pc, #708]	@ (800a190 <UART_SetConfig+0x630>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d176      	bne.n	8009fbc <UART_SetConfig+0x45c>
 8009ece:	4bb1      	ldr	r3, [pc, #708]	@ (800a194 <UART_SetConfig+0x634>)
 8009ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ed2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009ed6:	2b28      	cmp	r3, #40	@ 0x28
 8009ed8:	d86c      	bhi.n	8009fb4 <UART_SetConfig+0x454>
 8009eda:	a201      	add	r2, pc, #4	@ (adr r2, 8009ee0 <UART_SetConfig+0x380>)
 8009edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee0:	08009f85 	.word	0x08009f85
 8009ee4:	08009fb5 	.word	0x08009fb5
 8009ee8:	08009fb5 	.word	0x08009fb5
 8009eec:	08009fb5 	.word	0x08009fb5
 8009ef0:	08009fb5 	.word	0x08009fb5
 8009ef4:	08009fb5 	.word	0x08009fb5
 8009ef8:	08009fb5 	.word	0x08009fb5
 8009efc:	08009fb5 	.word	0x08009fb5
 8009f00:	08009f8d 	.word	0x08009f8d
 8009f04:	08009fb5 	.word	0x08009fb5
 8009f08:	08009fb5 	.word	0x08009fb5
 8009f0c:	08009fb5 	.word	0x08009fb5
 8009f10:	08009fb5 	.word	0x08009fb5
 8009f14:	08009fb5 	.word	0x08009fb5
 8009f18:	08009fb5 	.word	0x08009fb5
 8009f1c:	08009fb5 	.word	0x08009fb5
 8009f20:	08009f95 	.word	0x08009f95
 8009f24:	08009fb5 	.word	0x08009fb5
 8009f28:	08009fb5 	.word	0x08009fb5
 8009f2c:	08009fb5 	.word	0x08009fb5
 8009f30:	08009fb5 	.word	0x08009fb5
 8009f34:	08009fb5 	.word	0x08009fb5
 8009f38:	08009fb5 	.word	0x08009fb5
 8009f3c:	08009fb5 	.word	0x08009fb5
 8009f40:	08009f9d 	.word	0x08009f9d
 8009f44:	08009fb5 	.word	0x08009fb5
 8009f48:	08009fb5 	.word	0x08009fb5
 8009f4c:	08009fb5 	.word	0x08009fb5
 8009f50:	08009fb5 	.word	0x08009fb5
 8009f54:	08009fb5 	.word	0x08009fb5
 8009f58:	08009fb5 	.word	0x08009fb5
 8009f5c:	08009fb5 	.word	0x08009fb5
 8009f60:	08009fa5 	.word	0x08009fa5
 8009f64:	08009fb5 	.word	0x08009fb5
 8009f68:	08009fb5 	.word	0x08009fb5
 8009f6c:	08009fb5 	.word	0x08009fb5
 8009f70:	08009fb5 	.word	0x08009fb5
 8009f74:	08009fb5 	.word	0x08009fb5
 8009f78:	08009fb5 	.word	0x08009fb5
 8009f7c:	08009fb5 	.word	0x08009fb5
 8009f80:	08009fad 	.word	0x08009fad
 8009f84:	2301      	movs	r3, #1
 8009f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f8a:	e1c0      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009f8c:	2304      	movs	r3, #4
 8009f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f92:	e1bc      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009f94:	2308      	movs	r3, #8
 8009f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f9a:	e1b8      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009f9c:	2310      	movs	r3, #16
 8009f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fa2:	e1b4      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009fa4:	2320      	movs	r3, #32
 8009fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009faa:	e1b0      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009fac:	2340      	movs	r3, #64	@ 0x40
 8009fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fb2:	e1ac      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009fb4:	2380      	movs	r3, #128	@ 0x80
 8009fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fba:	e1a8      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a75      	ldr	r2, [pc, #468]	@ (800a198 <UART_SetConfig+0x638>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d130      	bne.n	800a028 <UART_SetConfig+0x4c8>
 8009fc6:	4b73      	ldr	r3, [pc, #460]	@ (800a194 <UART_SetConfig+0x634>)
 8009fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fca:	f003 0307 	and.w	r3, r3, #7
 8009fce:	2b05      	cmp	r3, #5
 8009fd0:	d826      	bhi.n	800a020 <UART_SetConfig+0x4c0>
 8009fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8009fd8 <UART_SetConfig+0x478>)
 8009fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd8:	08009ff1 	.word	0x08009ff1
 8009fdc:	08009ff9 	.word	0x08009ff9
 8009fe0:	0800a001 	.word	0x0800a001
 8009fe4:	0800a009 	.word	0x0800a009
 8009fe8:	0800a011 	.word	0x0800a011
 8009fec:	0800a019 	.word	0x0800a019
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ff6:	e18a      	b.n	800a30e <UART_SetConfig+0x7ae>
 8009ff8:	2304      	movs	r3, #4
 8009ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ffe:	e186      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a000:	2308      	movs	r3, #8
 800a002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a006:	e182      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a008:	2310      	movs	r3, #16
 800a00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a00e:	e17e      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a010:	2320      	movs	r3, #32
 800a012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a016:	e17a      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a018:	2340      	movs	r3, #64	@ 0x40
 800a01a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a01e:	e176      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a020:	2380      	movs	r3, #128	@ 0x80
 800a022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a026:	e172      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a5b      	ldr	r2, [pc, #364]	@ (800a19c <UART_SetConfig+0x63c>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d130      	bne.n	800a094 <UART_SetConfig+0x534>
 800a032:	4b58      	ldr	r3, [pc, #352]	@ (800a194 <UART_SetConfig+0x634>)
 800a034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a036:	f003 0307 	and.w	r3, r3, #7
 800a03a:	2b05      	cmp	r3, #5
 800a03c:	d826      	bhi.n	800a08c <UART_SetConfig+0x52c>
 800a03e:	a201      	add	r2, pc, #4	@ (adr r2, 800a044 <UART_SetConfig+0x4e4>)
 800a040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a044:	0800a05d 	.word	0x0800a05d
 800a048:	0800a065 	.word	0x0800a065
 800a04c:	0800a06d 	.word	0x0800a06d
 800a050:	0800a075 	.word	0x0800a075
 800a054:	0800a07d 	.word	0x0800a07d
 800a058:	0800a085 	.word	0x0800a085
 800a05c:	2300      	movs	r3, #0
 800a05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a062:	e154      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a064:	2304      	movs	r3, #4
 800a066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a06a:	e150      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a06c:	2308      	movs	r3, #8
 800a06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a072:	e14c      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a074:	2310      	movs	r3, #16
 800a076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a07a:	e148      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a07c:	2320      	movs	r3, #32
 800a07e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a082:	e144      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a084:	2340      	movs	r3, #64	@ 0x40
 800a086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a08a:	e140      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a08c:	2380      	movs	r3, #128	@ 0x80
 800a08e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a092:	e13c      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a41      	ldr	r2, [pc, #260]	@ (800a1a0 <UART_SetConfig+0x640>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	f040 8082 	bne.w	800a1a4 <UART_SetConfig+0x644>
 800a0a0:	4b3c      	ldr	r3, [pc, #240]	@ (800a194 <UART_SetConfig+0x634>)
 800a0a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a0a8:	2b28      	cmp	r3, #40	@ 0x28
 800a0aa:	d86d      	bhi.n	800a188 <UART_SetConfig+0x628>
 800a0ac:	a201      	add	r2, pc, #4	@ (adr r2, 800a0b4 <UART_SetConfig+0x554>)
 800a0ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b2:	bf00      	nop
 800a0b4:	0800a159 	.word	0x0800a159
 800a0b8:	0800a189 	.word	0x0800a189
 800a0bc:	0800a189 	.word	0x0800a189
 800a0c0:	0800a189 	.word	0x0800a189
 800a0c4:	0800a189 	.word	0x0800a189
 800a0c8:	0800a189 	.word	0x0800a189
 800a0cc:	0800a189 	.word	0x0800a189
 800a0d0:	0800a189 	.word	0x0800a189
 800a0d4:	0800a161 	.word	0x0800a161
 800a0d8:	0800a189 	.word	0x0800a189
 800a0dc:	0800a189 	.word	0x0800a189
 800a0e0:	0800a189 	.word	0x0800a189
 800a0e4:	0800a189 	.word	0x0800a189
 800a0e8:	0800a189 	.word	0x0800a189
 800a0ec:	0800a189 	.word	0x0800a189
 800a0f0:	0800a189 	.word	0x0800a189
 800a0f4:	0800a169 	.word	0x0800a169
 800a0f8:	0800a189 	.word	0x0800a189
 800a0fc:	0800a189 	.word	0x0800a189
 800a100:	0800a189 	.word	0x0800a189
 800a104:	0800a189 	.word	0x0800a189
 800a108:	0800a189 	.word	0x0800a189
 800a10c:	0800a189 	.word	0x0800a189
 800a110:	0800a189 	.word	0x0800a189
 800a114:	0800a171 	.word	0x0800a171
 800a118:	0800a189 	.word	0x0800a189
 800a11c:	0800a189 	.word	0x0800a189
 800a120:	0800a189 	.word	0x0800a189
 800a124:	0800a189 	.word	0x0800a189
 800a128:	0800a189 	.word	0x0800a189
 800a12c:	0800a189 	.word	0x0800a189
 800a130:	0800a189 	.word	0x0800a189
 800a134:	0800a179 	.word	0x0800a179
 800a138:	0800a189 	.word	0x0800a189
 800a13c:	0800a189 	.word	0x0800a189
 800a140:	0800a189 	.word	0x0800a189
 800a144:	0800a189 	.word	0x0800a189
 800a148:	0800a189 	.word	0x0800a189
 800a14c:	0800a189 	.word	0x0800a189
 800a150:	0800a189 	.word	0x0800a189
 800a154:	0800a181 	.word	0x0800a181
 800a158:	2301      	movs	r3, #1
 800a15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a15e:	e0d6      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a160:	2304      	movs	r3, #4
 800a162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a166:	e0d2      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a168:	2308      	movs	r3, #8
 800a16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a16e:	e0ce      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a170:	2310      	movs	r3, #16
 800a172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a176:	e0ca      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a178:	2320      	movs	r3, #32
 800a17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a17e:	e0c6      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a180:	2340      	movs	r3, #64	@ 0x40
 800a182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a186:	e0c2      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a188:	2380      	movs	r3, #128	@ 0x80
 800a18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a18e:	e0be      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a190:	40011400 	.word	0x40011400
 800a194:	58024400 	.word	0x58024400
 800a198:	40007800 	.word	0x40007800
 800a19c:	40007c00 	.word	0x40007c00
 800a1a0:	40011800 	.word	0x40011800
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4aad      	ldr	r2, [pc, #692]	@ (800a460 <UART_SetConfig+0x900>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d176      	bne.n	800a29c <UART_SetConfig+0x73c>
 800a1ae:	4bad      	ldr	r3, [pc, #692]	@ (800a464 <UART_SetConfig+0x904>)
 800a1b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a1b6:	2b28      	cmp	r3, #40	@ 0x28
 800a1b8:	d86c      	bhi.n	800a294 <UART_SetConfig+0x734>
 800a1ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a1c0 <UART_SetConfig+0x660>)
 800a1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c0:	0800a265 	.word	0x0800a265
 800a1c4:	0800a295 	.word	0x0800a295
 800a1c8:	0800a295 	.word	0x0800a295
 800a1cc:	0800a295 	.word	0x0800a295
 800a1d0:	0800a295 	.word	0x0800a295
 800a1d4:	0800a295 	.word	0x0800a295
 800a1d8:	0800a295 	.word	0x0800a295
 800a1dc:	0800a295 	.word	0x0800a295
 800a1e0:	0800a26d 	.word	0x0800a26d
 800a1e4:	0800a295 	.word	0x0800a295
 800a1e8:	0800a295 	.word	0x0800a295
 800a1ec:	0800a295 	.word	0x0800a295
 800a1f0:	0800a295 	.word	0x0800a295
 800a1f4:	0800a295 	.word	0x0800a295
 800a1f8:	0800a295 	.word	0x0800a295
 800a1fc:	0800a295 	.word	0x0800a295
 800a200:	0800a275 	.word	0x0800a275
 800a204:	0800a295 	.word	0x0800a295
 800a208:	0800a295 	.word	0x0800a295
 800a20c:	0800a295 	.word	0x0800a295
 800a210:	0800a295 	.word	0x0800a295
 800a214:	0800a295 	.word	0x0800a295
 800a218:	0800a295 	.word	0x0800a295
 800a21c:	0800a295 	.word	0x0800a295
 800a220:	0800a27d 	.word	0x0800a27d
 800a224:	0800a295 	.word	0x0800a295
 800a228:	0800a295 	.word	0x0800a295
 800a22c:	0800a295 	.word	0x0800a295
 800a230:	0800a295 	.word	0x0800a295
 800a234:	0800a295 	.word	0x0800a295
 800a238:	0800a295 	.word	0x0800a295
 800a23c:	0800a295 	.word	0x0800a295
 800a240:	0800a285 	.word	0x0800a285
 800a244:	0800a295 	.word	0x0800a295
 800a248:	0800a295 	.word	0x0800a295
 800a24c:	0800a295 	.word	0x0800a295
 800a250:	0800a295 	.word	0x0800a295
 800a254:	0800a295 	.word	0x0800a295
 800a258:	0800a295 	.word	0x0800a295
 800a25c:	0800a295 	.word	0x0800a295
 800a260:	0800a28d 	.word	0x0800a28d
 800a264:	2301      	movs	r3, #1
 800a266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a26a:	e050      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a26c:	2304      	movs	r3, #4
 800a26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a272:	e04c      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a274:	2308      	movs	r3, #8
 800a276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a27a:	e048      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a27c:	2310      	movs	r3, #16
 800a27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a282:	e044      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a284:	2320      	movs	r3, #32
 800a286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a28a:	e040      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a28c:	2340      	movs	r3, #64	@ 0x40
 800a28e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a292:	e03c      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a294:	2380      	movs	r3, #128	@ 0x80
 800a296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a29a:	e038      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a71      	ldr	r2, [pc, #452]	@ (800a468 <UART_SetConfig+0x908>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d130      	bne.n	800a308 <UART_SetConfig+0x7a8>
 800a2a6:	4b6f      	ldr	r3, [pc, #444]	@ (800a464 <UART_SetConfig+0x904>)
 800a2a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2aa:	f003 0307 	and.w	r3, r3, #7
 800a2ae:	2b05      	cmp	r3, #5
 800a2b0:	d826      	bhi.n	800a300 <UART_SetConfig+0x7a0>
 800a2b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a2b8 <UART_SetConfig+0x758>)
 800a2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b8:	0800a2d1 	.word	0x0800a2d1
 800a2bc:	0800a2d9 	.word	0x0800a2d9
 800a2c0:	0800a2e1 	.word	0x0800a2e1
 800a2c4:	0800a2e9 	.word	0x0800a2e9
 800a2c8:	0800a2f1 	.word	0x0800a2f1
 800a2cc:	0800a2f9 	.word	0x0800a2f9
 800a2d0:	2302      	movs	r3, #2
 800a2d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2d6:	e01a      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a2d8:	2304      	movs	r3, #4
 800a2da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2de:	e016      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a2e0:	2308      	movs	r3, #8
 800a2e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2e6:	e012      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a2e8:	2310      	movs	r3, #16
 800a2ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ee:	e00e      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a2f0:	2320      	movs	r3, #32
 800a2f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2f6:	e00a      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a2f8:	2340      	movs	r3, #64	@ 0x40
 800a2fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2fe:	e006      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a300:	2380      	movs	r3, #128	@ 0x80
 800a302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a306:	e002      	b.n	800a30e <UART_SetConfig+0x7ae>
 800a308:	2380      	movs	r3, #128	@ 0x80
 800a30a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4a55      	ldr	r2, [pc, #340]	@ (800a468 <UART_SetConfig+0x908>)
 800a314:	4293      	cmp	r3, r2
 800a316:	f040 80f8 	bne.w	800a50a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a31a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a31e:	2b20      	cmp	r3, #32
 800a320:	dc46      	bgt.n	800a3b0 <UART_SetConfig+0x850>
 800a322:	2b02      	cmp	r3, #2
 800a324:	db75      	blt.n	800a412 <UART_SetConfig+0x8b2>
 800a326:	3b02      	subs	r3, #2
 800a328:	2b1e      	cmp	r3, #30
 800a32a:	d872      	bhi.n	800a412 <UART_SetConfig+0x8b2>
 800a32c:	a201      	add	r2, pc, #4	@ (adr r2, 800a334 <UART_SetConfig+0x7d4>)
 800a32e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a332:	bf00      	nop
 800a334:	0800a3b7 	.word	0x0800a3b7
 800a338:	0800a413 	.word	0x0800a413
 800a33c:	0800a3bf 	.word	0x0800a3bf
 800a340:	0800a413 	.word	0x0800a413
 800a344:	0800a413 	.word	0x0800a413
 800a348:	0800a413 	.word	0x0800a413
 800a34c:	0800a3cf 	.word	0x0800a3cf
 800a350:	0800a413 	.word	0x0800a413
 800a354:	0800a413 	.word	0x0800a413
 800a358:	0800a413 	.word	0x0800a413
 800a35c:	0800a413 	.word	0x0800a413
 800a360:	0800a413 	.word	0x0800a413
 800a364:	0800a413 	.word	0x0800a413
 800a368:	0800a413 	.word	0x0800a413
 800a36c:	0800a3df 	.word	0x0800a3df
 800a370:	0800a413 	.word	0x0800a413
 800a374:	0800a413 	.word	0x0800a413
 800a378:	0800a413 	.word	0x0800a413
 800a37c:	0800a413 	.word	0x0800a413
 800a380:	0800a413 	.word	0x0800a413
 800a384:	0800a413 	.word	0x0800a413
 800a388:	0800a413 	.word	0x0800a413
 800a38c:	0800a413 	.word	0x0800a413
 800a390:	0800a413 	.word	0x0800a413
 800a394:	0800a413 	.word	0x0800a413
 800a398:	0800a413 	.word	0x0800a413
 800a39c:	0800a413 	.word	0x0800a413
 800a3a0:	0800a413 	.word	0x0800a413
 800a3a4:	0800a413 	.word	0x0800a413
 800a3a8:	0800a413 	.word	0x0800a413
 800a3ac:	0800a405 	.word	0x0800a405
 800a3b0:	2b40      	cmp	r3, #64	@ 0x40
 800a3b2:	d02a      	beq.n	800a40a <UART_SetConfig+0x8aa>
 800a3b4:	e02d      	b.n	800a412 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a3b6:	f7fe fd6b 	bl	8008e90 <HAL_RCCEx_GetD3PCLK1Freq>
 800a3ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a3bc:	e02f      	b.n	800a41e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7fe fd7a 	bl	8008ebc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a3c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3cc:	e027      	b.n	800a41e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3ce:	f107 0318 	add.w	r3, r7, #24
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7fe fec6 	bl	8009164 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3dc:	e01f      	b.n	800a41e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3de:	4b21      	ldr	r3, [pc, #132]	@ (800a464 <UART_SetConfig+0x904>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f003 0320 	and.w	r3, r3, #32
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d009      	beq.n	800a3fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a3ea:	4b1e      	ldr	r3, [pc, #120]	@ (800a464 <UART_SetConfig+0x904>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	08db      	lsrs	r3, r3, #3
 800a3f0:	f003 0303 	and.w	r3, r3, #3
 800a3f4:	4a1d      	ldr	r2, [pc, #116]	@ (800a46c <UART_SetConfig+0x90c>)
 800a3f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a3fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a3fc:	e00f      	b.n	800a41e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a3fe:	4b1b      	ldr	r3, [pc, #108]	@ (800a46c <UART_SetConfig+0x90c>)
 800a400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a402:	e00c      	b.n	800a41e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a404:	4b1a      	ldr	r3, [pc, #104]	@ (800a470 <UART_SetConfig+0x910>)
 800a406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a408:	e009      	b.n	800a41e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a40a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a40e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a410:	e005      	b.n	800a41e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a412:	2300      	movs	r3, #0
 800a414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a41c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a41e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a420:	2b00      	cmp	r3, #0
 800a422:	f000 81ee 	beq.w	800a802 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a42a:	4a12      	ldr	r2, [pc, #72]	@ (800a474 <UART_SetConfig+0x914>)
 800a42c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a430:	461a      	mov	r2, r3
 800a432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a434:	fbb3 f3f2 	udiv	r3, r3, r2
 800a438:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	685a      	ldr	r2, [r3, #4]
 800a43e:	4613      	mov	r3, r2
 800a440:	005b      	lsls	r3, r3, #1
 800a442:	4413      	add	r3, r2
 800a444:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a446:	429a      	cmp	r2, r3
 800a448:	d305      	bcc.n	800a456 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a450:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a452:	429a      	cmp	r2, r3
 800a454:	d910      	bls.n	800a478 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a456:	2301      	movs	r3, #1
 800a458:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a45c:	e1d1      	b.n	800a802 <UART_SetConfig+0xca2>
 800a45e:	bf00      	nop
 800a460:	40011c00 	.word	0x40011c00
 800a464:	58024400 	.word	0x58024400
 800a468:	58000c00 	.word	0x58000c00
 800a46c:	03d09000 	.word	0x03d09000
 800a470:	003d0900 	.word	0x003d0900
 800a474:	0800bb90 	.word	0x0800bb90
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a47a:	2200      	movs	r2, #0
 800a47c:	60bb      	str	r3, [r7, #8]
 800a47e:	60fa      	str	r2, [r7, #12]
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a484:	4ac0      	ldr	r2, [pc, #768]	@ (800a788 <UART_SetConfig+0xc28>)
 800a486:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	2200      	movs	r2, #0
 800a48e:	603b      	str	r3, [r7, #0]
 800a490:	607a      	str	r2, [r7, #4]
 800a492:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a496:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a49a:	f7f5 ff91 	bl	80003c0 <__aeabi_uldivmod>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	4610      	mov	r0, r2
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	f04f 0200 	mov.w	r2, #0
 800a4aa:	f04f 0300 	mov.w	r3, #0
 800a4ae:	020b      	lsls	r3, r1, #8
 800a4b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a4b4:	0202      	lsls	r2, r0, #8
 800a4b6:	6979      	ldr	r1, [r7, #20]
 800a4b8:	6849      	ldr	r1, [r1, #4]
 800a4ba:	0849      	lsrs	r1, r1, #1
 800a4bc:	2000      	movs	r0, #0
 800a4be:	460c      	mov	r4, r1
 800a4c0:	4605      	mov	r5, r0
 800a4c2:	eb12 0804 	adds.w	r8, r2, r4
 800a4c6:	eb43 0905 	adc.w	r9, r3, r5
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	469a      	mov	sl, r3
 800a4d2:	4693      	mov	fp, r2
 800a4d4:	4652      	mov	r2, sl
 800a4d6:	465b      	mov	r3, fp
 800a4d8:	4640      	mov	r0, r8
 800a4da:	4649      	mov	r1, r9
 800a4dc:	f7f5 ff70 	bl	80003c0 <__aeabi_uldivmod>
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	4613      	mov	r3, r2
 800a4e6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a4ee:	d308      	bcc.n	800a502 <UART_SetConfig+0x9a2>
 800a4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4f6:	d204      	bcs.n	800a502 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a4fe:	60da      	str	r2, [r3, #12]
 800a500:	e17f      	b.n	800a802 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a502:	2301      	movs	r3, #1
 800a504:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a508:	e17b      	b.n	800a802 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	69db      	ldr	r3, [r3, #28]
 800a50e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a512:	f040 80bd 	bne.w	800a690 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a516:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a51a:	2b20      	cmp	r3, #32
 800a51c:	dc48      	bgt.n	800a5b0 <UART_SetConfig+0xa50>
 800a51e:	2b00      	cmp	r3, #0
 800a520:	db7b      	blt.n	800a61a <UART_SetConfig+0xaba>
 800a522:	2b20      	cmp	r3, #32
 800a524:	d879      	bhi.n	800a61a <UART_SetConfig+0xaba>
 800a526:	a201      	add	r2, pc, #4	@ (adr r2, 800a52c <UART_SetConfig+0x9cc>)
 800a528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a52c:	0800a5b7 	.word	0x0800a5b7
 800a530:	0800a5bf 	.word	0x0800a5bf
 800a534:	0800a61b 	.word	0x0800a61b
 800a538:	0800a61b 	.word	0x0800a61b
 800a53c:	0800a5c7 	.word	0x0800a5c7
 800a540:	0800a61b 	.word	0x0800a61b
 800a544:	0800a61b 	.word	0x0800a61b
 800a548:	0800a61b 	.word	0x0800a61b
 800a54c:	0800a5d7 	.word	0x0800a5d7
 800a550:	0800a61b 	.word	0x0800a61b
 800a554:	0800a61b 	.word	0x0800a61b
 800a558:	0800a61b 	.word	0x0800a61b
 800a55c:	0800a61b 	.word	0x0800a61b
 800a560:	0800a61b 	.word	0x0800a61b
 800a564:	0800a61b 	.word	0x0800a61b
 800a568:	0800a61b 	.word	0x0800a61b
 800a56c:	0800a5e7 	.word	0x0800a5e7
 800a570:	0800a61b 	.word	0x0800a61b
 800a574:	0800a61b 	.word	0x0800a61b
 800a578:	0800a61b 	.word	0x0800a61b
 800a57c:	0800a61b 	.word	0x0800a61b
 800a580:	0800a61b 	.word	0x0800a61b
 800a584:	0800a61b 	.word	0x0800a61b
 800a588:	0800a61b 	.word	0x0800a61b
 800a58c:	0800a61b 	.word	0x0800a61b
 800a590:	0800a61b 	.word	0x0800a61b
 800a594:	0800a61b 	.word	0x0800a61b
 800a598:	0800a61b 	.word	0x0800a61b
 800a59c:	0800a61b 	.word	0x0800a61b
 800a5a0:	0800a61b 	.word	0x0800a61b
 800a5a4:	0800a61b 	.word	0x0800a61b
 800a5a8:	0800a61b 	.word	0x0800a61b
 800a5ac:	0800a60d 	.word	0x0800a60d
 800a5b0:	2b40      	cmp	r3, #64	@ 0x40
 800a5b2:	d02e      	beq.n	800a612 <UART_SetConfig+0xab2>
 800a5b4:	e031      	b.n	800a61a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5b6:	f7fc fdcd 	bl	8007154 <HAL_RCC_GetPCLK1Freq>
 800a5ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a5bc:	e033      	b.n	800a626 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5be:	f7fc fddf 	bl	8007180 <HAL_RCC_GetPCLK2Freq>
 800a5c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a5c4:	e02f      	b.n	800a626 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7fe fc76 	bl	8008ebc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5d4:	e027      	b.n	800a626 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5d6:	f107 0318 	add.w	r3, r7, #24
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7fe fdc2 	bl	8009164 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5e4:	e01f      	b.n	800a626 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5e6:	4b69      	ldr	r3, [pc, #420]	@ (800a78c <UART_SetConfig+0xc2c>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f003 0320 	and.w	r3, r3, #32
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d009      	beq.n	800a606 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a5f2:	4b66      	ldr	r3, [pc, #408]	@ (800a78c <UART_SetConfig+0xc2c>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	08db      	lsrs	r3, r3, #3
 800a5f8:	f003 0303 	and.w	r3, r3, #3
 800a5fc:	4a64      	ldr	r2, [pc, #400]	@ (800a790 <UART_SetConfig+0xc30>)
 800a5fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a604:	e00f      	b.n	800a626 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a606:	4b62      	ldr	r3, [pc, #392]	@ (800a790 <UART_SetConfig+0xc30>)
 800a608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a60a:	e00c      	b.n	800a626 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a60c:	4b61      	ldr	r3, [pc, #388]	@ (800a794 <UART_SetConfig+0xc34>)
 800a60e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a610:	e009      	b.n	800a626 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a612:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a618:	e005      	b.n	800a626 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a61a:	2300      	movs	r3, #0
 800a61c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a61e:	2301      	movs	r3, #1
 800a620:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a624:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a628:	2b00      	cmp	r3, #0
 800a62a:	f000 80ea 	beq.w	800a802 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a632:	4a55      	ldr	r2, [pc, #340]	@ (800a788 <UART_SetConfig+0xc28>)
 800a634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a638:	461a      	mov	r2, r3
 800a63a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a63c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a640:	005a      	lsls	r2, r3, #1
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	085b      	lsrs	r3, r3, #1
 800a648:	441a      	add	r2, r3
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a652:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a656:	2b0f      	cmp	r3, #15
 800a658:	d916      	bls.n	800a688 <UART_SetConfig+0xb28>
 800a65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a65c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a660:	d212      	bcs.n	800a688 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a664:	b29b      	uxth	r3, r3
 800a666:	f023 030f 	bic.w	r3, r3, #15
 800a66a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a66c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a66e:	085b      	lsrs	r3, r3, #1
 800a670:	b29b      	uxth	r3, r3
 800a672:	f003 0307 	and.w	r3, r3, #7
 800a676:	b29a      	uxth	r2, r3
 800a678:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a67a:	4313      	orrs	r3, r2
 800a67c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a684:	60da      	str	r2, [r3, #12]
 800a686:	e0bc      	b.n	800a802 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a688:	2301      	movs	r3, #1
 800a68a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a68e:	e0b8      	b.n	800a802 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a690:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a694:	2b20      	cmp	r3, #32
 800a696:	dc4b      	bgt.n	800a730 <UART_SetConfig+0xbd0>
 800a698:	2b00      	cmp	r3, #0
 800a69a:	f2c0 8087 	blt.w	800a7ac <UART_SetConfig+0xc4c>
 800a69e:	2b20      	cmp	r3, #32
 800a6a0:	f200 8084 	bhi.w	800a7ac <UART_SetConfig+0xc4c>
 800a6a4:	a201      	add	r2, pc, #4	@ (adr r2, 800a6ac <UART_SetConfig+0xb4c>)
 800a6a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6aa:	bf00      	nop
 800a6ac:	0800a737 	.word	0x0800a737
 800a6b0:	0800a73f 	.word	0x0800a73f
 800a6b4:	0800a7ad 	.word	0x0800a7ad
 800a6b8:	0800a7ad 	.word	0x0800a7ad
 800a6bc:	0800a747 	.word	0x0800a747
 800a6c0:	0800a7ad 	.word	0x0800a7ad
 800a6c4:	0800a7ad 	.word	0x0800a7ad
 800a6c8:	0800a7ad 	.word	0x0800a7ad
 800a6cc:	0800a757 	.word	0x0800a757
 800a6d0:	0800a7ad 	.word	0x0800a7ad
 800a6d4:	0800a7ad 	.word	0x0800a7ad
 800a6d8:	0800a7ad 	.word	0x0800a7ad
 800a6dc:	0800a7ad 	.word	0x0800a7ad
 800a6e0:	0800a7ad 	.word	0x0800a7ad
 800a6e4:	0800a7ad 	.word	0x0800a7ad
 800a6e8:	0800a7ad 	.word	0x0800a7ad
 800a6ec:	0800a767 	.word	0x0800a767
 800a6f0:	0800a7ad 	.word	0x0800a7ad
 800a6f4:	0800a7ad 	.word	0x0800a7ad
 800a6f8:	0800a7ad 	.word	0x0800a7ad
 800a6fc:	0800a7ad 	.word	0x0800a7ad
 800a700:	0800a7ad 	.word	0x0800a7ad
 800a704:	0800a7ad 	.word	0x0800a7ad
 800a708:	0800a7ad 	.word	0x0800a7ad
 800a70c:	0800a7ad 	.word	0x0800a7ad
 800a710:	0800a7ad 	.word	0x0800a7ad
 800a714:	0800a7ad 	.word	0x0800a7ad
 800a718:	0800a7ad 	.word	0x0800a7ad
 800a71c:	0800a7ad 	.word	0x0800a7ad
 800a720:	0800a7ad 	.word	0x0800a7ad
 800a724:	0800a7ad 	.word	0x0800a7ad
 800a728:	0800a7ad 	.word	0x0800a7ad
 800a72c:	0800a79f 	.word	0x0800a79f
 800a730:	2b40      	cmp	r3, #64	@ 0x40
 800a732:	d037      	beq.n	800a7a4 <UART_SetConfig+0xc44>
 800a734:	e03a      	b.n	800a7ac <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a736:	f7fc fd0d 	bl	8007154 <HAL_RCC_GetPCLK1Freq>
 800a73a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a73c:	e03c      	b.n	800a7b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a73e:	f7fc fd1f 	bl	8007180 <HAL_RCC_GetPCLK2Freq>
 800a742:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a744:	e038      	b.n	800a7b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a746:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7fe fbb6 	bl	8008ebc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a754:	e030      	b.n	800a7b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a756:	f107 0318 	add.w	r3, r7, #24
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7fe fd02 	bl	8009164 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a760:	69fb      	ldr	r3, [r7, #28]
 800a762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a764:	e028      	b.n	800a7b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a766:	4b09      	ldr	r3, [pc, #36]	@ (800a78c <UART_SetConfig+0xc2c>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f003 0320 	and.w	r3, r3, #32
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d012      	beq.n	800a798 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a772:	4b06      	ldr	r3, [pc, #24]	@ (800a78c <UART_SetConfig+0xc2c>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	08db      	lsrs	r3, r3, #3
 800a778:	f003 0303 	and.w	r3, r3, #3
 800a77c:	4a04      	ldr	r2, [pc, #16]	@ (800a790 <UART_SetConfig+0xc30>)
 800a77e:	fa22 f303 	lsr.w	r3, r2, r3
 800a782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a784:	e018      	b.n	800a7b8 <UART_SetConfig+0xc58>
 800a786:	bf00      	nop
 800a788:	0800bb90 	.word	0x0800bb90
 800a78c:	58024400 	.word	0x58024400
 800a790:	03d09000 	.word	0x03d09000
 800a794:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a798:	4b24      	ldr	r3, [pc, #144]	@ (800a82c <UART_SetConfig+0xccc>)
 800a79a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a79c:	e00c      	b.n	800a7b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a79e:	4b24      	ldr	r3, [pc, #144]	@ (800a830 <UART_SetConfig+0xcd0>)
 800a7a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7a2:	e009      	b.n	800a7b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a7a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7aa:	e005      	b.n	800a7b8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a7b6:	bf00      	nop
    }

    if (pclk != 0U)
 800a7b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d021      	beq.n	800a802 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7c2:	4a1c      	ldr	r2, [pc, #112]	@ (800a834 <UART_SetConfig+0xcd4>)
 800a7c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7cc:	fbb3 f2f2 	udiv	r2, r3, r2
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	085b      	lsrs	r3, r3, #1
 800a7d6:	441a      	add	r2, r3
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7e4:	2b0f      	cmp	r3, #15
 800a7e6:	d909      	bls.n	800a7fc <UART_SetConfig+0xc9c>
 800a7e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7ee:	d205      	bcs.n	800a7fc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a7f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7f2:	b29a      	uxth	r2, r3
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	60da      	str	r2, [r3, #12]
 800a7fa:	e002      	b.n	800a802 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	2201      	movs	r2, #1
 800a806:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	2201      	movs	r2, #1
 800a80e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	2200      	movs	r2, #0
 800a816:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	2200      	movs	r2, #0
 800a81c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a81e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a822:	4618      	mov	r0, r3
 800a824:	3748      	adds	r7, #72	@ 0x48
 800a826:	46bd      	mov	sp, r7
 800a828:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a82c:	03d09000 	.word	0x03d09000
 800a830:	003d0900 	.word	0x003d0900
 800a834:	0800bb90 	.word	0x0800bb90

0800a838 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a844:	f003 0308 	and.w	r3, r3, #8
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d00a      	beq.n	800a862 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	430a      	orrs	r2, r1
 800a860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a866:	f003 0301 	and.w	r3, r3, #1
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d00a      	beq.n	800a884 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	430a      	orrs	r2, r1
 800a882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a888:	f003 0302 	and.w	r3, r3, #2
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d00a      	beq.n	800a8a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	430a      	orrs	r2, r1
 800a8a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8aa:	f003 0304 	and.w	r3, r3, #4
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00a      	beq.n	800a8c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	430a      	orrs	r2, r1
 800a8c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8cc:	f003 0310 	and.w	r3, r3, #16
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d00a      	beq.n	800a8ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	689b      	ldr	r3, [r3, #8]
 800a8da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	430a      	orrs	r2, r1
 800a8e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ee:	f003 0320 	and.w	r3, r3, #32
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d00a      	beq.n	800a90c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	430a      	orrs	r2, r1
 800a90a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a914:	2b00      	cmp	r3, #0
 800a916:	d01a      	beq.n	800a94e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	430a      	orrs	r2, r1
 800a92c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a932:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a936:	d10a      	bne.n	800a94e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	430a      	orrs	r2, r1
 800a94c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00a      	beq.n	800a970 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	430a      	orrs	r2, r1
 800a96e:	605a      	str	r2, [r3, #4]
  }
}
 800a970:	bf00      	nop
 800a972:	370c      	adds	r7, #12
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b098      	sub	sp, #96	@ 0x60
 800a980:	af02      	add	r7, sp, #8
 800a982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2200      	movs	r2, #0
 800a988:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a98c:	f7f8 f80c 	bl	80029a8 <HAL_GetTick>
 800a990:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f003 0308 	and.w	r3, r3, #8
 800a99c:	2b08      	cmp	r3, #8
 800a99e:	d12f      	bne.n	800aa00 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a9a4:	9300      	str	r3, [sp, #0]
 800a9a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 f88e 	bl	800aad0 <UART_WaitOnFlagUntilTimeout>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d022      	beq.n	800aa00 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c2:	e853 3f00 	ldrex	r3, [r3]
 800a9c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a9c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9ce:	653b      	str	r3, [r7, #80]	@ 0x50
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a9da:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a9de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a9e0:	e841 2300 	strex	r3, r2, [r1]
 800a9e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a9e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d1e6      	bne.n	800a9ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2220      	movs	r2, #32
 800a9f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9fc:	2303      	movs	r3, #3
 800a9fe:	e063      	b.n	800aac8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f003 0304 	and.w	r3, r3, #4
 800aa0a:	2b04      	cmp	r3, #4
 800aa0c:	d149      	bne.n	800aaa2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa0e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aa12:	9300      	str	r3, [sp, #0]
 800aa14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa16:	2200      	movs	r2, #0
 800aa18:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 f857 	bl	800aad0 <UART_WaitOnFlagUntilTimeout>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d03c      	beq.n	800aaa2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa30:	e853 3f00 	ldrex	r3, [r3]
 800aa34:	623b      	str	r3, [r7, #32]
   return(result);
 800aa36:	6a3b      	ldr	r3, [r7, #32]
 800aa38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	461a      	mov	r2, r3
 800aa44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa46:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa48:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa4e:	e841 2300 	strex	r3, r2, [r1]
 800aa52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d1e6      	bne.n	800aa28 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	3308      	adds	r3, #8
 800aa60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	e853 3f00 	ldrex	r3, [r3]
 800aa68:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f023 0301 	bic.w	r3, r3, #1
 800aa70:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	3308      	adds	r3, #8
 800aa78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa7a:	61fa      	str	r2, [r7, #28]
 800aa7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa7e:	69b9      	ldr	r1, [r7, #24]
 800aa80:	69fa      	ldr	r2, [r7, #28]
 800aa82:	e841 2300 	strex	r3, r2, [r1]
 800aa86:	617b      	str	r3, [r7, #20]
   return(result);
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d1e5      	bne.n	800aa5a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2220      	movs	r2, #32
 800aa92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa9e:	2303      	movs	r3, #3
 800aaa0:	e012      	b.n	800aac8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2220      	movs	r2, #32
 800aaa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2220      	movs	r2, #32
 800aaae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2200      	movs	r2, #0
 800aac2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aac6:	2300      	movs	r3, #0
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3758      	adds	r7, #88	@ 0x58
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	603b      	str	r3, [r7, #0]
 800aadc:	4613      	mov	r3, r2
 800aade:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aae0:	e04f      	b.n	800ab82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aae2:	69bb      	ldr	r3, [r7, #24]
 800aae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aae8:	d04b      	beq.n	800ab82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aaea:	f7f7 ff5d 	bl	80029a8 <HAL_GetTick>
 800aaee:	4602      	mov	r2, r0
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	1ad3      	subs	r3, r2, r3
 800aaf4:	69ba      	ldr	r2, [r7, #24]
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d302      	bcc.n	800ab00 <UART_WaitOnFlagUntilTimeout+0x30>
 800aafa:	69bb      	ldr	r3, [r7, #24]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d101      	bne.n	800ab04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ab00:	2303      	movs	r3, #3
 800ab02:	e04e      	b.n	800aba2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f003 0304 	and.w	r3, r3, #4
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d037      	beq.n	800ab82 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	2b80      	cmp	r3, #128	@ 0x80
 800ab16:	d034      	beq.n	800ab82 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	2b40      	cmp	r3, #64	@ 0x40
 800ab1c:	d031      	beq.n	800ab82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	69db      	ldr	r3, [r3, #28]
 800ab24:	f003 0308 	and.w	r3, r3, #8
 800ab28:	2b08      	cmp	r3, #8
 800ab2a:	d110      	bne.n	800ab4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2208      	movs	r2, #8
 800ab32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ab34:	68f8      	ldr	r0, [r7, #12]
 800ab36:	f000 f839 	bl	800abac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2208      	movs	r2, #8
 800ab3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2200      	movs	r2, #0
 800ab46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e029      	b.n	800aba2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	69db      	ldr	r3, [r3, #28]
 800ab54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab5c:	d111      	bne.n	800ab82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ab66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ab68:	68f8      	ldr	r0, [r7, #12]
 800ab6a:	f000 f81f 	bl	800abac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2220      	movs	r2, #32
 800ab72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ab7e:	2303      	movs	r3, #3
 800ab80:	e00f      	b.n	800aba2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	69da      	ldr	r2, [r3, #28]
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	4013      	ands	r3, r2
 800ab8c:	68ba      	ldr	r2, [r7, #8]
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	bf0c      	ite	eq
 800ab92:	2301      	moveq	r3, #1
 800ab94:	2300      	movne	r3, #0
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	461a      	mov	r2, r3
 800ab9a:	79fb      	ldrb	r3, [r7, #7]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d0a0      	beq.n	800aae2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aba0:	2300      	movs	r3, #0
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3710      	adds	r7, #16
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
	...

0800abac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800abac:	b480      	push	{r7}
 800abae:	b095      	sub	sp, #84	@ 0x54
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abbc:	e853 3f00 	ldrex	r3, [r3]
 800abc0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800abc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800abc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	461a      	mov	r2, r3
 800abd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abd2:	643b      	str	r3, [r7, #64]	@ 0x40
 800abd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abd6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800abd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800abda:	e841 2300 	strex	r3, r2, [r1]
 800abde:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800abe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d1e6      	bne.n	800abb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	3308      	adds	r3, #8
 800abec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abee:	6a3b      	ldr	r3, [r7, #32]
 800abf0:	e853 3f00 	ldrex	r3, [r3]
 800abf4:	61fb      	str	r3, [r7, #28]
   return(result);
 800abf6:	69fa      	ldr	r2, [r7, #28]
 800abf8:	4b1e      	ldr	r3, [pc, #120]	@ (800ac74 <UART_EndRxTransfer+0xc8>)
 800abfa:	4013      	ands	r3, r2
 800abfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	3308      	adds	r3, #8
 800ac04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ac08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac0e:	e841 2300 	strex	r3, r2, [r1]
 800ac12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d1e5      	bne.n	800abe6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d118      	bne.n	800ac54 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	e853 3f00 	ldrex	r3, [r3]
 800ac2e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	f023 0310 	bic.w	r3, r3, #16
 800ac36:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac40:	61bb      	str	r3, [r7, #24]
 800ac42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac44:	6979      	ldr	r1, [r7, #20]
 800ac46:	69ba      	ldr	r2, [r7, #24]
 800ac48:	e841 2300 	strex	r3, r2, [r1]
 800ac4c:	613b      	str	r3, [r7, #16]
   return(result);
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d1e6      	bne.n	800ac22 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2220      	movs	r2, #32
 800ac58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ac68:	bf00      	nop
 800ac6a:	3754      	adds	r7, #84	@ 0x54
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr
 800ac74:	effffffe 	.word	0xeffffffe

0800ac78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d101      	bne.n	800ac8e <HAL_UARTEx_DisableFifoMode+0x16>
 800ac8a:	2302      	movs	r3, #2
 800ac8c:	e027      	b.n	800acde <HAL_UARTEx_DisableFifoMode+0x66>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2201      	movs	r2, #1
 800ac92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2224      	movs	r2, #36	@ 0x24
 800ac9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f022 0201 	bic.w	r2, r2, #1
 800acb4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800acbc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2200      	movs	r2, #0
 800acc2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2220      	movs	r2, #32
 800acd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2200      	movs	r2, #0
 800acd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800acdc:	2300      	movs	r3, #0
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3714      	adds	r7, #20
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr

0800acea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b084      	sub	sp, #16
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
 800acf2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d101      	bne.n	800ad02 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800acfe:	2302      	movs	r3, #2
 800ad00:	e02d      	b.n	800ad5e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2201      	movs	r2, #1
 800ad06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2224      	movs	r2, #36	@ 0x24
 800ad0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	681a      	ldr	r2, [r3, #0]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f022 0201 	bic.w	r2, r2, #1
 800ad28:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	683a      	ldr	r2, [r7, #0]
 800ad3a:	430a      	orrs	r2, r1
 800ad3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 f850 	bl	800ade4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	68fa      	ldr	r2, [r7, #12]
 800ad4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2220      	movs	r2, #32
 800ad50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad5c:	2300      	movs	r3, #0
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b084      	sub	sp, #16
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
 800ad6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d101      	bne.n	800ad7e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ad7a:	2302      	movs	r3, #2
 800ad7c:	e02d      	b.n	800adda <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2201      	movs	r2, #1
 800ad82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2224      	movs	r2, #36	@ 0x24
 800ad8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f022 0201 	bic.w	r2, r2, #1
 800ada4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	683a      	ldr	r2, [r7, #0]
 800adb6:	430a      	orrs	r2, r1
 800adb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 f812 	bl	800ade4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	68fa      	ldr	r2, [r7, #12]
 800adc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2220      	movs	r2, #32
 800adcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2200      	movs	r2, #0
 800add4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800add8:	2300      	movs	r3, #0
}
 800adda:	4618      	mov	r0, r3
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
	...

0800ade4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b085      	sub	sp, #20
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d108      	bne.n	800ae06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2201      	movs	r2, #1
 800adf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2201      	movs	r2, #1
 800ae00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ae04:	e031      	b.n	800ae6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ae06:	2310      	movs	r3, #16
 800ae08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ae0a:	2310      	movs	r3, #16
 800ae0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	0e5b      	lsrs	r3, r3, #25
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	f003 0307 	and.w	r3, r3, #7
 800ae1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	0f5b      	lsrs	r3, r3, #29
 800ae26:	b2db      	uxtb	r3, r3
 800ae28:	f003 0307 	and.w	r3, r3, #7
 800ae2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae2e:	7bbb      	ldrb	r3, [r7, #14]
 800ae30:	7b3a      	ldrb	r2, [r7, #12]
 800ae32:	4911      	ldr	r1, [pc, #68]	@ (800ae78 <UARTEx_SetNbDataToProcess+0x94>)
 800ae34:	5c8a      	ldrb	r2, [r1, r2]
 800ae36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ae3a:	7b3a      	ldrb	r2, [r7, #12]
 800ae3c:	490f      	ldr	r1, [pc, #60]	@ (800ae7c <UARTEx_SetNbDataToProcess+0x98>)
 800ae3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae40:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae44:	b29a      	uxth	r2, r3
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae4c:	7bfb      	ldrb	r3, [r7, #15]
 800ae4e:	7b7a      	ldrb	r2, [r7, #13]
 800ae50:	4909      	ldr	r1, [pc, #36]	@ (800ae78 <UARTEx_SetNbDataToProcess+0x94>)
 800ae52:	5c8a      	ldrb	r2, [r1, r2]
 800ae54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ae58:	7b7a      	ldrb	r2, [r7, #13]
 800ae5a:	4908      	ldr	r1, [pc, #32]	@ (800ae7c <UARTEx_SetNbDataToProcess+0x98>)
 800ae5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae5e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae62:	b29a      	uxth	r2, r3
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ae6a:	bf00      	nop
 800ae6c:	3714      	adds	r7, #20
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr
 800ae76:	bf00      	nop
 800ae78:	0800bba8 	.word	0x0800bba8
 800ae7c:	0800bbb0 	.word	0x0800bbb0

0800ae80 <siprintf>:
 800ae80:	b40e      	push	{r1, r2, r3}
 800ae82:	b510      	push	{r4, lr}
 800ae84:	b09d      	sub	sp, #116	@ 0x74
 800ae86:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ae88:	9002      	str	r0, [sp, #8]
 800ae8a:	9006      	str	r0, [sp, #24]
 800ae8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ae90:	480a      	ldr	r0, [pc, #40]	@ (800aebc <siprintf+0x3c>)
 800ae92:	9107      	str	r1, [sp, #28]
 800ae94:	9104      	str	r1, [sp, #16]
 800ae96:	490a      	ldr	r1, [pc, #40]	@ (800aec0 <siprintf+0x40>)
 800ae98:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae9c:	9105      	str	r1, [sp, #20]
 800ae9e:	2400      	movs	r4, #0
 800aea0:	a902      	add	r1, sp, #8
 800aea2:	6800      	ldr	r0, [r0, #0]
 800aea4:	9301      	str	r3, [sp, #4]
 800aea6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800aea8:	f000 f9a2 	bl	800b1f0 <_svfiprintf_r>
 800aeac:	9b02      	ldr	r3, [sp, #8]
 800aeae:	701c      	strb	r4, [r3, #0]
 800aeb0:	b01d      	add	sp, #116	@ 0x74
 800aeb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aeb6:	b003      	add	sp, #12
 800aeb8:	4770      	bx	lr
 800aeba:	bf00      	nop
 800aebc:	24000018 	.word	0x24000018
 800aec0:	ffff0208 	.word	0xffff0208

0800aec4 <memset>:
 800aec4:	4402      	add	r2, r0
 800aec6:	4603      	mov	r3, r0
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d100      	bne.n	800aece <memset+0xa>
 800aecc:	4770      	bx	lr
 800aece:	f803 1b01 	strb.w	r1, [r3], #1
 800aed2:	e7f9      	b.n	800aec8 <memset+0x4>

0800aed4 <__errno>:
 800aed4:	4b01      	ldr	r3, [pc, #4]	@ (800aedc <__errno+0x8>)
 800aed6:	6818      	ldr	r0, [r3, #0]
 800aed8:	4770      	bx	lr
 800aeda:	bf00      	nop
 800aedc:	24000018 	.word	0x24000018

0800aee0 <__libc_init_array>:
 800aee0:	b570      	push	{r4, r5, r6, lr}
 800aee2:	4d0d      	ldr	r5, [pc, #52]	@ (800af18 <__libc_init_array+0x38>)
 800aee4:	4c0d      	ldr	r4, [pc, #52]	@ (800af1c <__libc_init_array+0x3c>)
 800aee6:	1b64      	subs	r4, r4, r5
 800aee8:	10a4      	asrs	r4, r4, #2
 800aeea:	2600      	movs	r6, #0
 800aeec:	42a6      	cmp	r6, r4
 800aeee:	d109      	bne.n	800af04 <__libc_init_array+0x24>
 800aef0:	4d0b      	ldr	r5, [pc, #44]	@ (800af20 <__libc_init_array+0x40>)
 800aef2:	4c0c      	ldr	r4, [pc, #48]	@ (800af24 <__libc_init_array+0x44>)
 800aef4:	f000 fc64 	bl	800b7c0 <_init>
 800aef8:	1b64      	subs	r4, r4, r5
 800aefa:	10a4      	asrs	r4, r4, #2
 800aefc:	2600      	movs	r6, #0
 800aefe:	42a6      	cmp	r6, r4
 800af00:	d105      	bne.n	800af0e <__libc_init_array+0x2e>
 800af02:	bd70      	pop	{r4, r5, r6, pc}
 800af04:	f855 3b04 	ldr.w	r3, [r5], #4
 800af08:	4798      	blx	r3
 800af0a:	3601      	adds	r6, #1
 800af0c:	e7ee      	b.n	800aeec <__libc_init_array+0xc>
 800af0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800af12:	4798      	blx	r3
 800af14:	3601      	adds	r6, #1
 800af16:	e7f2      	b.n	800aefe <__libc_init_array+0x1e>
 800af18:	0800bbf4 	.word	0x0800bbf4
 800af1c:	0800bbf4 	.word	0x0800bbf4
 800af20:	0800bbf4 	.word	0x0800bbf4
 800af24:	0800bbfc 	.word	0x0800bbfc

0800af28 <__retarget_lock_acquire_recursive>:
 800af28:	4770      	bx	lr

0800af2a <__retarget_lock_release_recursive>:
 800af2a:	4770      	bx	lr

0800af2c <memcpy>:
 800af2c:	440a      	add	r2, r1
 800af2e:	4291      	cmp	r1, r2
 800af30:	f100 33ff 	add.w	r3, r0, #4294967295
 800af34:	d100      	bne.n	800af38 <memcpy+0xc>
 800af36:	4770      	bx	lr
 800af38:	b510      	push	{r4, lr}
 800af3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af42:	4291      	cmp	r1, r2
 800af44:	d1f9      	bne.n	800af3a <memcpy+0xe>
 800af46:	bd10      	pop	{r4, pc}

0800af48 <_free_r>:
 800af48:	b538      	push	{r3, r4, r5, lr}
 800af4a:	4605      	mov	r5, r0
 800af4c:	2900      	cmp	r1, #0
 800af4e:	d041      	beq.n	800afd4 <_free_r+0x8c>
 800af50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af54:	1f0c      	subs	r4, r1, #4
 800af56:	2b00      	cmp	r3, #0
 800af58:	bfb8      	it	lt
 800af5a:	18e4      	addlt	r4, r4, r3
 800af5c:	f000 f8e0 	bl	800b120 <__malloc_lock>
 800af60:	4a1d      	ldr	r2, [pc, #116]	@ (800afd8 <_free_r+0x90>)
 800af62:	6813      	ldr	r3, [r2, #0]
 800af64:	b933      	cbnz	r3, 800af74 <_free_r+0x2c>
 800af66:	6063      	str	r3, [r4, #4]
 800af68:	6014      	str	r4, [r2, #0]
 800af6a:	4628      	mov	r0, r5
 800af6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af70:	f000 b8dc 	b.w	800b12c <__malloc_unlock>
 800af74:	42a3      	cmp	r3, r4
 800af76:	d908      	bls.n	800af8a <_free_r+0x42>
 800af78:	6820      	ldr	r0, [r4, #0]
 800af7a:	1821      	adds	r1, r4, r0
 800af7c:	428b      	cmp	r3, r1
 800af7e:	bf01      	itttt	eq
 800af80:	6819      	ldreq	r1, [r3, #0]
 800af82:	685b      	ldreq	r3, [r3, #4]
 800af84:	1809      	addeq	r1, r1, r0
 800af86:	6021      	streq	r1, [r4, #0]
 800af88:	e7ed      	b.n	800af66 <_free_r+0x1e>
 800af8a:	461a      	mov	r2, r3
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	b10b      	cbz	r3, 800af94 <_free_r+0x4c>
 800af90:	42a3      	cmp	r3, r4
 800af92:	d9fa      	bls.n	800af8a <_free_r+0x42>
 800af94:	6811      	ldr	r1, [r2, #0]
 800af96:	1850      	adds	r0, r2, r1
 800af98:	42a0      	cmp	r0, r4
 800af9a:	d10b      	bne.n	800afb4 <_free_r+0x6c>
 800af9c:	6820      	ldr	r0, [r4, #0]
 800af9e:	4401      	add	r1, r0
 800afa0:	1850      	adds	r0, r2, r1
 800afa2:	4283      	cmp	r3, r0
 800afa4:	6011      	str	r1, [r2, #0]
 800afa6:	d1e0      	bne.n	800af6a <_free_r+0x22>
 800afa8:	6818      	ldr	r0, [r3, #0]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	6053      	str	r3, [r2, #4]
 800afae:	4408      	add	r0, r1
 800afb0:	6010      	str	r0, [r2, #0]
 800afb2:	e7da      	b.n	800af6a <_free_r+0x22>
 800afb4:	d902      	bls.n	800afbc <_free_r+0x74>
 800afb6:	230c      	movs	r3, #12
 800afb8:	602b      	str	r3, [r5, #0]
 800afba:	e7d6      	b.n	800af6a <_free_r+0x22>
 800afbc:	6820      	ldr	r0, [r4, #0]
 800afbe:	1821      	adds	r1, r4, r0
 800afc0:	428b      	cmp	r3, r1
 800afc2:	bf04      	itt	eq
 800afc4:	6819      	ldreq	r1, [r3, #0]
 800afc6:	685b      	ldreq	r3, [r3, #4]
 800afc8:	6063      	str	r3, [r4, #4]
 800afca:	bf04      	itt	eq
 800afcc:	1809      	addeq	r1, r1, r0
 800afce:	6021      	streq	r1, [r4, #0]
 800afd0:	6054      	str	r4, [r2, #4]
 800afd2:	e7ca      	b.n	800af6a <_free_r+0x22>
 800afd4:	bd38      	pop	{r3, r4, r5, pc}
 800afd6:	bf00      	nop
 800afd8:	24000db4 	.word	0x24000db4

0800afdc <sbrk_aligned>:
 800afdc:	b570      	push	{r4, r5, r6, lr}
 800afde:	4e0f      	ldr	r6, [pc, #60]	@ (800b01c <sbrk_aligned+0x40>)
 800afe0:	460c      	mov	r4, r1
 800afe2:	6831      	ldr	r1, [r6, #0]
 800afe4:	4605      	mov	r5, r0
 800afe6:	b911      	cbnz	r1, 800afee <sbrk_aligned+0x12>
 800afe8:	f000 fba4 	bl	800b734 <_sbrk_r>
 800afec:	6030      	str	r0, [r6, #0]
 800afee:	4621      	mov	r1, r4
 800aff0:	4628      	mov	r0, r5
 800aff2:	f000 fb9f 	bl	800b734 <_sbrk_r>
 800aff6:	1c43      	adds	r3, r0, #1
 800aff8:	d103      	bne.n	800b002 <sbrk_aligned+0x26>
 800affa:	f04f 34ff 	mov.w	r4, #4294967295
 800affe:	4620      	mov	r0, r4
 800b000:	bd70      	pop	{r4, r5, r6, pc}
 800b002:	1cc4      	adds	r4, r0, #3
 800b004:	f024 0403 	bic.w	r4, r4, #3
 800b008:	42a0      	cmp	r0, r4
 800b00a:	d0f8      	beq.n	800affe <sbrk_aligned+0x22>
 800b00c:	1a21      	subs	r1, r4, r0
 800b00e:	4628      	mov	r0, r5
 800b010:	f000 fb90 	bl	800b734 <_sbrk_r>
 800b014:	3001      	adds	r0, #1
 800b016:	d1f2      	bne.n	800affe <sbrk_aligned+0x22>
 800b018:	e7ef      	b.n	800affa <sbrk_aligned+0x1e>
 800b01a:	bf00      	nop
 800b01c:	24000db0 	.word	0x24000db0

0800b020 <_malloc_r>:
 800b020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b024:	1ccd      	adds	r5, r1, #3
 800b026:	f025 0503 	bic.w	r5, r5, #3
 800b02a:	3508      	adds	r5, #8
 800b02c:	2d0c      	cmp	r5, #12
 800b02e:	bf38      	it	cc
 800b030:	250c      	movcc	r5, #12
 800b032:	2d00      	cmp	r5, #0
 800b034:	4606      	mov	r6, r0
 800b036:	db01      	blt.n	800b03c <_malloc_r+0x1c>
 800b038:	42a9      	cmp	r1, r5
 800b03a:	d904      	bls.n	800b046 <_malloc_r+0x26>
 800b03c:	230c      	movs	r3, #12
 800b03e:	6033      	str	r3, [r6, #0]
 800b040:	2000      	movs	r0, #0
 800b042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b046:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b11c <_malloc_r+0xfc>
 800b04a:	f000 f869 	bl	800b120 <__malloc_lock>
 800b04e:	f8d8 3000 	ldr.w	r3, [r8]
 800b052:	461c      	mov	r4, r3
 800b054:	bb44      	cbnz	r4, 800b0a8 <_malloc_r+0x88>
 800b056:	4629      	mov	r1, r5
 800b058:	4630      	mov	r0, r6
 800b05a:	f7ff ffbf 	bl	800afdc <sbrk_aligned>
 800b05e:	1c43      	adds	r3, r0, #1
 800b060:	4604      	mov	r4, r0
 800b062:	d158      	bne.n	800b116 <_malloc_r+0xf6>
 800b064:	f8d8 4000 	ldr.w	r4, [r8]
 800b068:	4627      	mov	r7, r4
 800b06a:	2f00      	cmp	r7, #0
 800b06c:	d143      	bne.n	800b0f6 <_malloc_r+0xd6>
 800b06e:	2c00      	cmp	r4, #0
 800b070:	d04b      	beq.n	800b10a <_malloc_r+0xea>
 800b072:	6823      	ldr	r3, [r4, #0]
 800b074:	4639      	mov	r1, r7
 800b076:	4630      	mov	r0, r6
 800b078:	eb04 0903 	add.w	r9, r4, r3
 800b07c:	f000 fb5a 	bl	800b734 <_sbrk_r>
 800b080:	4581      	cmp	r9, r0
 800b082:	d142      	bne.n	800b10a <_malloc_r+0xea>
 800b084:	6821      	ldr	r1, [r4, #0]
 800b086:	1a6d      	subs	r5, r5, r1
 800b088:	4629      	mov	r1, r5
 800b08a:	4630      	mov	r0, r6
 800b08c:	f7ff ffa6 	bl	800afdc <sbrk_aligned>
 800b090:	3001      	adds	r0, #1
 800b092:	d03a      	beq.n	800b10a <_malloc_r+0xea>
 800b094:	6823      	ldr	r3, [r4, #0]
 800b096:	442b      	add	r3, r5
 800b098:	6023      	str	r3, [r4, #0]
 800b09a:	f8d8 3000 	ldr.w	r3, [r8]
 800b09e:	685a      	ldr	r2, [r3, #4]
 800b0a0:	bb62      	cbnz	r2, 800b0fc <_malloc_r+0xdc>
 800b0a2:	f8c8 7000 	str.w	r7, [r8]
 800b0a6:	e00f      	b.n	800b0c8 <_malloc_r+0xa8>
 800b0a8:	6822      	ldr	r2, [r4, #0]
 800b0aa:	1b52      	subs	r2, r2, r5
 800b0ac:	d420      	bmi.n	800b0f0 <_malloc_r+0xd0>
 800b0ae:	2a0b      	cmp	r2, #11
 800b0b0:	d917      	bls.n	800b0e2 <_malloc_r+0xc2>
 800b0b2:	1961      	adds	r1, r4, r5
 800b0b4:	42a3      	cmp	r3, r4
 800b0b6:	6025      	str	r5, [r4, #0]
 800b0b8:	bf18      	it	ne
 800b0ba:	6059      	strne	r1, [r3, #4]
 800b0bc:	6863      	ldr	r3, [r4, #4]
 800b0be:	bf08      	it	eq
 800b0c0:	f8c8 1000 	streq.w	r1, [r8]
 800b0c4:	5162      	str	r2, [r4, r5]
 800b0c6:	604b      	str	r3, [r1, #4]
 800b0c8:	4630      	mov	r0, r6
 800b0ca:	f000 f82f 	bl	800b12c <__malloc_unlock>
 800b0ce:	f104 000b 	add.w	r0, r4, #11
 800b0d2:	1d23      	adds	r3, r4, #4
 800b0d4:	f020 0007 	bic.w	r0, r0, #7
 800b0d8:	1ac2      	subs	r2, r0, r3
 800b0da:	bf1c      	itt	ne
 800b0dc:	1a1b      	subne	r3, r3, r0
 800b0de:	50a3      	strne	r3, [r4, r2]
 800b0e0:	e7af      	b.n	800b042 <_malloc_r+0x22>
 800b0e2:	6862      	ldr	r2, [r4, #4]
 800b0e4:	42a3      	cmp	r3, r4
 800b0e6:	bf0c      	ite	eq
 800b0e8:	f8c8 2000 	streq.w	r2, [r8]
 800b0ec:	605a      	strne	r2, [r3, #4]
 800b0ee:	e7eb      	b.n	800b0c8 <_malloc_r+0xa8>
 800b0f0:	4623      	mov	r3, r4
 800b0f2:	6864      	ldr	r4, [r4, #4]
 800b0f4:	e7ae      	b.n	800b054 <_malloc_r+0x34>
 800b0f6:	463c      	mov	r4, r7
 800b0f8:	687f      	ldr	r7, [r7, #4]
 800b0fa:	e7b6      	b.n	800b06a <_malloc_r+0x4a>
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	42a3      	cmp	r3, r4
 800b102:	d1fb      	bne.n	800b0fc <_malloc_r+0xdc>
 800b104:	2300      	movs	r3, #0
 800b106:	6053      	str	r3, [r2, #4]
 800b108:	e7de      	b.n	800b0c8 <_malloc_r+0xa8>
 800b10a:	230c      	movs	r3, #12
 800b10c:	6033      	str	r3, [r6, #0]
 800b10e:	4630      	mov	r0, r6
 800b110:	f000 f80c 	bl	800b12c <__malloc_unlock>
 800b114:	e794      	b.n	800b040 <_malloc_r+0x20>
 800b116:	6005      	str	r5, [r0, #0]
 800b118:	e7d6      	b.n	800b0c8 <_malloc_r+0xa8>
 800b11a:	bf00      	nop
 800b11c:	24000db4 	.word	0x24000db4

0800b120 <__malloc_lock>:
 800b120:	4801      	ldr	r0, [pc, #4]	@ (800b128 <__malloc_lock+0x8>)
 800b122:	f7ff bf01 	b.w	800af28 <__retarget_lock_acquire_recursive>
 800b126:	bf00      	nop
 800b128:	24000dac 	.word	0x24000dac

0800b12c <__malloc_unlock>:
 800b12c:	4801      	ldr	r0, [pc, #4]	@ (800b134 <__malloc_unlock+0x8>)
 800b12e:	f7ff befc 	b.w	800af2a <__retarget_lock_release_recursive>
 800b132:	bf00      	nop
 800b134:	24000dac 	.word	0x24000dac

0800b138 <__ssputs_r>:
 800b138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b13c:	688e      	ldr	r6, [r1, #8]
 800b13e:	461f      	mov	r7, r3
 800b140:	42be      	cmp	r6, r7
 800b142:	680b      	ldr	r3, [r1, #0]
 800b144:	4682      	mov	sl, r0
 800b146:	460c      	mov	r4, r1
 800b148:	4690      	mov	r8, r2
 800b14a:	d82d      	bhi.n	800b1a8 <__ssputs_r+0x70>
 800b14c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b150:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b154:	d026      	beq.n	800b1a4 <__ssputs_r+0x6c>
 800b156:	6965      	ldr	r5, [r4, #20]
 800b158:	6909      	ldr	r1, [r1, #16]
 800b15a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b15e:	eba3 0901 	sub.w	r9, r3, r1
 800b162:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b166:	1c7b      	adds	r3, r7, #1
 800b168:	444b      	add	r3, r9
 800b16a:	106d      	asrs	r5, r5, #1
 800b16c:	429d      	cmp	r5, r3
 800b16e:	bf38      	it	cc
 800b170:	461d      	movcc	r5, r3
 800b172:	0553      	lsls	r3, r2, #21
 800b174:	d527      	bpl.n	800b1c6 <__ssputs_r+0x8e>
 800b176:	4629      	mov	r1, r5
 800b178:	f7ff ff52 	bl	800b020 <_malloc_r>
 800b17c:	4606      	mov	r6, r0
 800b17e:	b360      	cbz	r0, 800b1da <__ssputs_r+0xa2>
 800b180:	6921      	ldr	r1, [r4, #16]
 800b182:	464a      	mov	r2, r9
 800b184:	f7ff fed2 	bl	800af2c <memcpy>
 800b188:	89a3      	ldrh	r3, [r4, #12]
 800b18a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b18e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b192:	81a3      	strh	r3, [r4, #12]
 800b194:	6126      	str	r6, [r4, #16]
 800b196:	6165      	str	r5, [r4, #20]
 800b198:	444e      	add	r6, r9
 800b19a:	eba5 0509 	sub.w	r5, r5, r9
 800b19e:	6026      	str	r6, [r4, #0]
 800b1a0:	60a5      	str	r5, [r4, #8]
 800b1a2:	463e      	mov	r6, r7
 800b1a4:	42be      	cmp	r6, r7
 800b1a6:	d900      	bls.n	800b1aa <__ssputs_r+0x72>
 800b1a8:	463e      	mov	r6, r7
 800b1aa:	6820      	ldr	r0, [r4, #0]
 800b1ac:	4632      	mov	r2, r6
 800b1ae:	4641      	mov	r1, r8
 800b1b0:	f000 faa6 	bl	800b700 <memmove>
 800b1b4:	68a3      	ldr	r3, [r4, #8]
 800b1b6:	1b9b      	subs	r3, r3, r6
 800b1b8:	60a3      	str	r3, [r4, #8]
 800b1ba:	6823      	ldr	r3, [r4, #0]
 800b1bc:	4433      	add	r3, r6
 800b1be:	6023      	str	r3, [r4, #0]
 800b1c0:	2000      	movs	r0, #0
 800b1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1c6:	462a      	mov	r2, r5
 800b1c8:	f000 fac4 	bl	800b754 <_realloc_r>
 800b1cc:	4606      	mov	r6, r0
 800b1ce:	2800      	cmp	r0, #0
 800b1d0:	d1e0      	bne.n	800b194 <__ssputs_r+0x5c>
 800b1d2:	6921      	ldr	r1, [r4, #16]
 800b1d4:	4650      	mov	r0, sl
 800b1d6:	f7ff feb7 	bl	800af48 <_free_r>
 800b1da:	230c      	movs	r3, #12
 800b1dc:	f8ca 3000 	str.w	r3, [sl]
 800b1e0:	89a3      	ldrh	r3, [r4, #12]
 800b1e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1e6:	81a3      	strh	r3, [r4, #12]
 800b1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ec:	e7e9      	b.n	800b1c2 <__ssputs_r+0x8a>
	...

0800b1f0 <_svfiprintf_r>:
 800b1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1f4:	4698      	mov	r8, r3
 800b1f6:	898b      	ldrh	r3, [r1, #12]
 800b1f8:	061b      	lsls	r3, r3, #24
 800b1fa:	b09d      	sub	sp, #116	@ 0x74
 800b1fc:	4607      	mov	r7, r0
 800b1fe:	460d      	mov	r5, r1
 800b200:	4614      	mov	r4, r2
 800b202:	d510      	bpl.n	800b226 <_svfiprintf_r+0x36>
 800b204:	690b      	ldr	r3, [r1, #16]
 800b206:	b973      	cbnz	r3, 800b226 <_svfiprintf_r+0x36>
 800b208:	2140      	movs	r1, #64	@ 0x40
 800b20a:	f7ff ff09 	bl	800b020 <_malloc_r>
 800b20e:	6028      	str	r0, [r5, #0]
 800b210:	6128      	str	r0, [r5, #16]
 800b212:	b930      	cbnz	r0, 800b222 <_svfiprintf_r+0x32>
 800b214:	230c      	movs	r3, #12
 800b216:	603b      	str	r3, [r7, #0]
 800b218:	f04f 30ff 	mov.w	r0, #4294967295
 800b21c:	b01d      	add	sp, #116	@ 0x74
 800b21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b222:	2340      	movs	r3, #64	@ 0x40
 800b224:	616b      	str	r3, [r5, #20]
 800b226:	2300      	movs	r3, #0
 800b228:	9309      	str	r3, [sp, #36]	@ 0x24
 800b22a:	2320      	movs	r3, #32
 800b22c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b230:	f8cd 800c 	str.w	r8, [sp, #12]
 800b234:	2330      	movs	r3, #48	@ 0x30
 800b236:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b3d4 <_svfiprintf_r+0x1e4>
 800b23a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b23e:	f04f 0901 	mov.w	r9, #1
 800b242:	4623      	mov	r3, r4
 800b244:	469a      	mov	sl, r3
 800b246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b24a:	b10a      	cbz	r2, 800b250 <_svfiprintf_r+0x60>
 800b24c:	2a25      	cmp	r2, #37	@ 0x25
 800b24e:	d1f9      	bne.n	800b244 <_svfiprintf_r+0x54>
 800b250:	ebba 0b04 	subs.w	fp, sl, r4
 800b254:	d00b      	beq.n	800b26e <_svfiprintf_r+0x7e>
 800b256:	465b      	mov	r3, fp
 800b258:	4622      	mov	r2, r4
 800b25a:	4629      	mov	r1, r5
 800b25c:	4638      	mov	r0, r7
 800b25e:	f7ff ff6b 	bl	800b138 <__ssputs_r>
 800b262:	3001      	adds	r0, #1
 800b264:	f000 80a7 	beq.w	800b3b6 <_svfiprintf_r+0x1c6>
 800b268:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b26a:	445a      	add	r2, fp
 800b26c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b26e:	f89a 3000 	ldrb.w	r3, [sl]
 800b272:	2b00      	cmp	r3, #0
 800b274:	f000 809f 	beq.w	800b3b6 <_svfiprintf_r+0x1c6>
 800b278:	2300      	movs	r3, #0
 800b27a:	f04f 32ff 	mov.w	r2, #4294967295
 800b27e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b282:	f10a 0a01 	add.w	sl, sl, #1
 800b286:	9304      	str	r3, [sp, #16]
 800b288:	9307      	str	r3, [sp, #28]
 800b28a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b28e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b290:	4654      	mov	r4, sl
 800b292:	2205      	movs	r2, #5
 800b294:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b298:	484e      	ldr	r0, [pc, #312]	@ (800b3d4 <_svfiprintf_r+0x1e4>)
 800b29a:	f7f5 f841 	bl	8000320 <memchr>
 800b29e:	9a04      	ldr	r2, [sp, #16]
 800b2a0:	b9d8      	cbnz	r0, 800b2da <_svfiprintf_r+0xea>
 800b2a2:	06d0      	lsls	r0, r2, #27
 800b2a4:	bf44      	itt	mi
 800b2a6:	2320      	movmi	r3, #32
 800b2a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b2ac:	0711      	lsls	r1, r2, #28
 800b2ae:	bf44      	itt	mi
 800b2b0:	232b      	movmi	r3, #43	@ 0x2b
 800b2b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b2b6:	f89a 3000 	ldrb.w	r3, [sl]
 800b2ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2bc:	d015      	beq.n	800b2ea <_svfiprintf_r+0xfa>
 800b2be:	9a07      	ldr	r2, [sp, #28]
 800b2c0:	4654      	mov	r4, sl
 800b2c2:	2000      	movs	r0, #0
 800b2c4:	f04f 0c0a 	mov.w	ip, #10
 800b2c8:	4621      	mov	r1, r4
 800b2ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2ce:	3b30      	subs	r3, #48	@ 0x30
 800b2d0:	2b09      	cmp	r3, #9
 800b2d2:	d94b      	bls.n	800b36c <_svfiprintf_r+0x17c>
 800b2d4:	b1b0      	cbz	r0, 800b304 <_svfiprintf_r+0x114>
 800b2d6:	9207      	str	r2, [sp, #28]
 800b2d8:	e014      	b.n	800b304 <_svfiprintf_r+0x114>
 800b2da:	eba0 0308 	sub.w	r3, r0, r8
 800b2de:	fa09 f303 	lsl.w	r3, r9, r3
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	9304      	str	r3, [sp, #16]
 800b2e6:	46a2      	mov	sl, r4
 800b2e8:	e7d2      	b.n	800b290 <_svfiprintf_r+0xa0>
 800b2ea:	9b03      	ldr	r3, [sp, #12]
 800b2ec:	1d19      	adds	r1, r3, #4
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	9103      	str	r1, [sp, #12]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	bfbb      	ittet	lt
 800b2f6:	425b      	neglt	r3, r3
 800b2f8:	f042 0202 	orrlt.w	r2, r2, #2
 800b2fc:	9307      	strge	r3, [sp, #28]
 800b2fe:	9307      	strlt	r3, [sp, #28]
 800b300:	bfb8      	it	lt
 800b302:	9204      	strlt	r2, [sp, #16]
 800b304:	7823      	ldrb	r3, [r4, #0]
 800b306:	2b2e      	cmp	r3, #46	@ 0x2e
 800b308:	d10a      	bne.n	800b320 <_svfiprintf_r+0x130>
 800b30a:	7863      	ldrb	r3, [r4, #1]
 800b30c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b30e:	d132      	bne.n	800b376 <_svfiprintf_r+0x186>
 800b310:	9b03      	ldr	r3, [sp, #12]
 800b312:	1d1a      	adds	r2, r3, #4
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	9203      	str	r2, [sp, #12]
 800b318:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b31c:	3402      	adds	r4, #2
 800b31e:	9305      	str	r3, [sp, #20]
 800b320:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b3e4 <_svfiprintf_r+0x1f4>
 800b324:	7821      	ldrb	r1, [r4, #0]
 800b326:	2203      	movs	r2, #3
 800b328:	4650      	mov	r0, sl
 800b32a:	f7f4 fff9 	bl	8000320 <memchr>
 800b32e:	b138      	cbz	r0, 800b340 <_svfiprintf_r+0x150>
 800b330:	9b04      	ldr	r3, [sp, #16]
 800b332:	eba0 000a 	sub.w	r0, r0, sl
 800b336:	2240      	movs	r2, #64	@ 0x40
 800b338:	4082      	lsls	r2, r0
 800b33a:	4313      	orrs	r3, r2
 800b33c:	3401      	adds	r4, #1
 800b33e:	9304      	str	r3, [sp, #16]
 800b340:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b344:	4824      	ldr	r0, [pc, #144]	@ (800b3d8 <_svfiprintf_r+0x1e8>)
 800b346:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b34a:	2206      	movs	r2, #6
 800b34c:	f7f4 ffe8 	bl	8000320 <memchr>
 800b350:	2800      	cmp	r0, #0
 800b352:	d036      	beq.n	800b3c2 <_svfiprintf_r+0x1d2>
 800b354:	4b21      	ldr	r3, [pc, #132]	@ (800b3dc <_svfiprintf_r+0x1ec>)
 800b356:	bb1b      	cbnz	r3, 800b3a0 <_svfiprintf_r+0x1b0>
 800b358:	9b03      	ldr	r3, [sp, #12]
 800b35a:	3307      	adds	r3, #7
 800b35c:	f023 0307 	bic.w	r3, r3, #7
 800b360:	3308      	adds	r3, #8
 800b362:	9303      	str	r3, [sp, #12]
 800b364:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b366:	4433      	add	r3, r6
 800b368:	9309      	str	r3, [sp, #36]	@ 0x24
 800b36a:	e76a      	b.n	800b242 <_svfiprintf_r+0x52>
 800b36c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b370:	460c      	mov	r4, r1
 800b372:	2001      	movs	r0, #1
 800b374:	e7a8      	b.n	800b2c8 <_svfiprintf_r+0xd8>
 800b376:	2300      	movs	r3, #0
 800b378:	3401      	adds	r4, #1
 800b37a:	9305      	str	r3, [sp, #20]
 800b37c:	4619      	mov	r1, r3
 800b37e:	f04f 0c0a 	mov.w	ip, #10
 800b382:	4620      	mov	r0, r4
 800b384:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b388:	3a30      	subs	r2, #48	@ 0x30
 800b38a:	2a09      	cmp	r2, #9
 800b38c:	d903      	bls.n	800b396 <_svfiprintf_r+0x1a6>
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d0c6      	beq.n	800b320 <_svfiprintf_r+0x130>
 800b392:	9105      	str	r1, [sp, #20]
 800b394:	e7c4      	b.n	800b320 <_svfiprintf_r+0x130>
 800b396:	fb0c 2101 	mla	r1, ip, r1, r2
 800b39a:	4604      	mov	r4, r0
 800b39c:	2301      	movs	r3, #1
 800b39e:	e7f0      	b.n	800b382 <_svfiprintf_r+0x192>
 800b3a0:	ab03      	add	r3, sp, #12
 800b3a2:	9300      	str	r3, [sp, #0]
 800b3a4:	462a      	mov	r2, r5
 800b3a6:	4b0e      	ldr	r3, [pc, #56]	@ (800b3e0 <_svfiprintf_r+0x1f0>)
 800b3a8:	a904      	add	r1, sp, #16
 800b3aa:	4638      	mov	r0, r7
 800b3ac:	f3af 8000 	nop.w
 800b3b0:	1c42      	adds	r2, r0, #1
 800b3b2:	4606      	mov	r6, r0
 800b3b4:	d1d6      	bne.n	800b364 <_svfiprintf_r+0x174>
 800b3b6:	89ab      	ldrh	r3, [r5, #12]
 800b3b8:	065b      	lsls	r3, r3, #25
 800b3ba:	f53f af2d 	bmi.w	800b218 <_svfiprintf_r+0x28>
 800b3be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b3c0:	e72c      	b.n	800b21c <_svfiprintf_r+0x2c>
 800b3c2:	ab03      	add	r3, sp, #12
 800b3c4:	9300      	str	r3, [sp, #0]
 800b3c6:	462a      	mov	r2, r5
 800b3c8:	4b05      	ldr	r3, [pc, #20]	@ (800b3e0 <_svfiprintf_r+0x1f0>)
 800b3ca:	a904      	add	r1, sp, #16
 800b3cc:	4638      	mov	r0, r7
 800b3ce:	f000 f879 	bl	800b4c4 <_printf_i>
 800b3d2:	e7ed      	b.n	800b3b0 <_svfiprintf_r+0x1c0>
 800b3d4:	0800bbb8 	.word	0x0800bbb8
 800b3d8:	0800bbc2 	.word	0x0800bbc2
 800b3dc:	00000000 	.word	0x00000000
 800b3e0:	0800b139 	.word	0x0800b139
 800b3e4:	0800bbbe 	.word	0x0800bbbe

0800b3e8 <_printf_common>:
 800b3e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3ec:	4616      	mov	r6, r2
 800b3ee:	4698      	mov	r8, r3
 800b3f0:	688a      	ldr	r2, [r1, #8]
 800b3f2:	690b      	ldr	r3, [r1, #16]
 800b3f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	bfb8      	it	lt
 800b3fc:	4613      	movlt	r3, r2
 800b3fe:	6033      	str	r3, [r6, #0]
 800b400:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b404:	4607      	mov	r7, r0
 800b406:	460c      	mov	r4, r1
 800b408:	b10a      	cbz	r2, 800b40e <_printf_common+0x26>
 800b40a:	3301      	adds	r3, #1
 800b40c:	6033      	str	r3, [r6, #0]
 800b40e:	6823      	ldr	r3, [r4, #0]
 800b410:	0699      	lsls	r1, r3, #26
 800b412:	bf42      	ittt	mi
 800b414:	6833      	ldrmi	r3, [r6, #0]
 800b416:	3302      	addmi	r3, #2
 800b418:	6033      	strmi	r3, [r6, #0]
 800b41a:	6825      	ldr	r5, [r4, #0]
 800b41c:	f015 0506 	ands.w	r5, r5, #6
 800b420:	d106      	bne.n	800b430 <_printf_common+0x48>
 800b422:	f104 0a19 	add.w	sl, r4, #25
 800b426:	68e3      	ldr	r3, [r4, #12]
 800b428:	6832      	ldr	r2, [r6, #0]
 800b42a:	1a9b      	subs	r3, r3, r2
 800b42c:	42ab      	cmp	r3, r5
 800b42e:	dc26      	bgt.n	800b47e <_printf_common+0x96>
 800b430:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b434:	6822      	ldr	r2, [r4, #0]
 800b436:	3b00      	subs	r3, #0
 800b438:	bf18      	it	ne
 800b43a:	2301      	movne	r3, #1
 800b43c:	0692      	lsls	r2, r2, #26
 800b43e:	d42b      	bmi.n	800b498 <_printf_common+0xb0>
 800b440:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b444:	4641      	mov	r1, r8
 800b446:	4638      	mov	r0, r7
 800b448:	47c8      	blx	r9
 800b44a:	3001      	adds	r0, #1
 800b44c:	d01e      	beq.n	800b48c <_printf_common+0xa4>
 800b44e:	6823      	ldr	r3, [r4, #0]
 800b450:	6922      	ldr	r2, [r4, #16]
 800b452:	f003 0306 	and.w	r3, r3, #6
 800b456:	2b04      	cmp	r3, #4
 800b458:	bf02      	ittt	eq
 800b45a:	68e5      	ldreq	r5, [r4, #12]
 800b45c:	6833      	ldreq	r3, [r6, #0]
 800b45e:	1aed      	subeq	r5, r5, r3
 800b460:	68a3      	ldr	r3, [r4, #8]
 800b462:	bf0c      	ite	eq
 800b464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b468:	2500      	movne	r5, #0
 800b46a:	4293      	cmp	r3, r2
 800b46c:	bfc4      	itt	gt
 800b46e:	1a9b      	subgt	r3, r3, r2
 800b470:	18ed      	addgt	r5, r5, r3
 800b472:	2600      	movs	r6, #0
 800b474:	341a      	adds	r4, #26
 800b476:	42b5      	cmp	r5, r6
 800b478:	d11a      	bne.n	800b4b0 <_printf_common+0xc8>
 800b47a:	2000      	movs	r0, #0
 800b47c:	e008      	b.n	800b490 <_printf_common+0xa8>
 800b47e:	2301      	movs	r3, #1
 800b480:	4652      	mov	r2, sl
 800b482:	4641      	mov	r1, r8
 800b484:	4638      	mov	r0, r7
 800b486:	47c8      	blx	r9
 800b488:	3001      	adds	r0, #1
 800b48a:	d103      	bne.n	800b494 <_printf_common+0xac>
 800b48c:	f04f 30ff 	mov.w	r0, #4294967295
 800b490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b494:	3501      	adds	r5, #1
 800b496:	e7c6      	b.n	800b426 <_printf_common+0x3e>
 800b498:	18e1      	adds	r1, r4, r3
 800b49a:	1c5a      	adds	r2, r3, #1
 800b49c:	2030      	movs	r0, #48	@ 0x30
 800b49e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b4a2:	4422      	add	r2, r4
 800b4a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b4a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b4ac:	3302      	adds	r3, #2
 800b4ae:	e7c7      	b.n	800b440 <_printf_common+0x58>
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	4622      	mov	r2, r4
 800b4b4:	4641      	mov	r1, r8
 800b4b6:	4638      	mov	r0, r7
 800b4b8:	47c8      	blx	r9
 800b4ba:	3001      	adds	r0, #1
 800b4bc:	d0e6      	beq.n	800b48c <_printf_common+0xa4>
 800b4be:	3601      	adds	r6, #1
 800b4c0:	e7d9      	b.n	800b476 <_printf_common+0x8e>
	...

0800b4c4 <_printf_i>:
 800b4c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4c8:	7e0f      	ldrb	r7, [r1, #24]
 800b4ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b4cc:	2f78      	cmp	r7, #120	@ 0x78
 800b4ce:	4691      	mov	r9, r2
 800b4d0:	4680      	mov	r8, r0
 800b4d2:	460c      	mov	r4, r1
 800b4d4:	469a      	mov	sl, r3
 800b4d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b4da:	d807      	bhi.n	800b4ec <_printf_i+0x28>
 800b4dc:	2f62      	cmp	r7, #98	@ 0x62
 800b4de:	d80a      	bhi.n	800b4f6 <_printf_i+0x32>
 800b4e0:	2f00      	cmp	r7, #0
 800b4e2:	f000 80d1 	beq.w	800b688 <_printf_i+0x1c4>
 800b4e6:	2f58      	cmp	r7, #88	@ 0x58
 800b4e8:	f000 80b8 	beq.w	800b65c <_printf_i+0x198>
 800b4ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b4f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b4f4:	e03a      	b.n	800b56c <_printf_i+0xa8>
 800b4f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b4fa:	2b15      	cmp	r3, #21
 800b4fc:	d8f6      	bhi.n	800b4ec <_printf_i+0x28>
 800b4fe:	a101      	add	r1, pc, #4	@ (adr r1, 800b504 <_printf_i+0x40>)
 800b500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b504:	0800b55d 	.word	0x0800b55d
 800b508:	0800b571 	.word	0x0800b571
 800b50c:	0800b4ed 	.word	0x0800b4ed
 800b510:	0800b4ed 	.word	0x0800b4ed
 800b514:	0800b4ed 	.word	0x0800b4ed
 800b518:	0800b4ed 	.word	0x0800b4ed
 800b51c:	0800b571 	.word	0x0800b571
 800b520:	0800b4ed 	.word	0x0800b4ed
 800b524:	0800b4ed 	.word	0x0800b4ed
 800b528:	0800b4ed 	.word	0x0800b4ed
 800b52c:	0800b4ed 	.word	0x0800b4ed
 800b530:	0800b66f 	.word	0x0800b66f
 800b534:	0800b59b 	.word	0x0800b59b
 800b538:	0800b629 	.word	0x0800b629
 800b53c:	0800b4ed 	.word	0x0800b4ed
 800b540:	0800b4ed 	.word	0x0800b4ed
 800b544:	0800b691 	.word	0x0800b691
 800b548:	0800b4ed 	.word	0x0800b4ed
 800b54c:	0800b59b 	.word	0x0800b59b
 800b550:	0800b4ed 	.word	0x0800b4ed
 800b554:	0800b4ed 	.word	0x0800b4ed
 800b558:	0800b631 	.word	0x0800b631
 800b55c:	6833      	ldr	r3, [r6, #0]
 800b55e:	1d1a      	adds	r2, r3, #4
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	6032      	str	r2, [r6, #0]
 800b564:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b568:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b56c:	2301      	movs	r3, #1
 800b56e:	e09c      	b.n	800b6aa <_printf_i+0x1e6>
 800b570:	6833      	ldr	r3, [r6, #0]
 800b572:	6820      	ldr	r0, [r4, #0]
 800b574:	1d19      	adds	r1, r3, #4
 800b576:	6031      	str	r1, [r6, #0]
 800b578:	0606      	lsls	r6, r0, #24
 800b57a:	d501      	bpl.n	800b580 <_printf_i+0xbc>
 800b57c:	681d      	ldr	r5, [r3, #0]
 800b57e:	e003      	b.n	800b588 <_printf_i+0xc4>
 800b580:	0645      	lsls	r5, r0, #25
 800b582:	d5fb      	bpl.n	800b57c <_printf_i+0xb8>
 800b584:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b588:	2d00      	cmp	r5, #0
 800b58a:	da03      	bge.n	800b594 <_printf_i+0xd0>
 800b58c:	232d      	movs	r3, #45	@ 0x2d
 800b58e:	426d      	negs	r5, r5
 800b590:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b594:	4858      	ldr	r0, [pc, #352]	@ (800b6f8 <_printf_i+0x234>)
 800b596:	230a      	movs	r3, #10
 800b598:	e011      	b.n	800b5be <_printf_i+0xfa>
 800b59a:	6821      	ldr	r1, [r4, #0]
 800b59c:	6833      	ldr	r3, [r6, #0]
 800b59e:	0608      	lsls	r0, r1, #24
 800b5a0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b5a4:	d402      	bmi.n	800b5ac <_printf_i+0xe8>
 800b5a6:	0649      	lsls	r1, r1, #25
 800b5a8:	bf48      	it	mi
 800b5aa:	b2ad      	uxthmi	r5, r5
 800b5ac:	2f6f      	cmp	r7, #111	@ 0x6f
 800b5ae:	4852      	ldr	r0, [pc, #328]	@ (800b6f8 <_printf_i+0x234>)
 800b5b0:	6033      	str	r3, [r6, #0]
 800b5b2:	bf14      	ite	ne
 800b5b4:	230a      	movne	r3, #10
 800b5b6:	2308      	moveq	r3, #8
 800b5b8:	2100      	movs	r1, #0
 800b5ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b5be:	6866      	ldr	r6, [r4, #4]
 800b5c0:	60a6      	str	r6, [r4, #8]
 800b5c2:	2e00      	cmp	r6, #0
 800b5c4:	db05      	blt.n	800b5d2 <_printf_i+0x10e>
 800b5c6:	6821      	ldr	r1, [r4, #0]
 800b5c8:	432e      	orrs	r6, r5
 800b5ca:	f021 0104 	bic.w	r1, r1, #4
 800b5ce:	6021      	str	r1, [r4, #0]
 800b5d0:	d04b      	beq.n	800b66a <_printf_i+0x1a6>
 800b5d2:	4616      	mov	r6, r2
 800b5d4:	fbb5 f1f3 	udiv	r1, r5, r3
 800b5d8:	fb03 5711 	mls	r7, r3, r1, r5
 800b5dc:	5dc7      	ldrb	r7, [r0, r7]
 800b5de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b5e2:	462f      	mov	r7, r5
 800b5e4:	42bb      	cmp	r3, r7
 800b5e6:	460d      	mov	r5, r1
 800b5e8:	d9f4      	bls.n	800b5d4 <_printf_i+0x110>
 800b5ea:	2b08      	cmp	r3, #8
 800b5ec:	d10b      	bne.n	800b606 <_printf_i+0x142>
 800b5ee:	6823      	ldr	r3, [r4, #0]
 800b5f0:	07df      	lsls	r7, r3, #31
 800b5f2:	d508      	bpl.n	800b606 <_printf_i+0x142>
 800b5f4:	6923      	ldr	r3, [r4, #16]
 800b5f6:	6861      	ldr	r1, [r4, #4]
 800b5f8:	4299      	cmp	r1, r3
 800b5fa:	bfde      	ittt	le
 800b5fc:	2330      	movle	r3, #48	@ 0x30
 800b5fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b602:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b606:	1b92      	subs	r2, r2, r6
 800b608:	6122      	str	r2, [r4, #16]
 800b60a:	f8cd a000 	str.w	sl, [sp]
 800b60e:	464b      	mov	r3, r9
 800b610:	aa03      	add	r2, sp, #12
 800b612:	4621      	mov	r1, r4
 800b614:	4640      	mov	r0, r8
 800b616:	f7ff fee7 	bl	800b3e8 <_printf_common>
 800b61a:	3001      	adds	r0, #1
 800b61c:	d14a      	bne.n	800b6b4 <_printf_i+0x1f0>
 800b61e:	f04f 30ff 	mov.w	r0, #4294967295
 800b622:	b004      	add	sp, #16
 800b624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b628:	6823      	ldr	r3, [r4, #0]
 800b62a:	f043 0320 	orr.w	r3, r3, #32
 800b62e:	6023      	str	r3, [r4, #0]
 800b630:	4832      	ldr	r0, [pc, #200]	@ (800b6fc <_printf_i+0x238>)
 800b632:	2778      	movs	r7, #120	@ 0x78
 800b634:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b638:	6823      	ldr	r3, [r4, #0]
 800b63a:	6831      	ldr	r1, [r6, #0]
 800b63c:	061f      	lsls	r7, r3, #24
 800b63e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b642:	d402      	bmi.n	800b64a <_printf_i+0x186>
 800b644:	065f      	lsls	r7, r3, #25
 800b646:	bf48      	it	mi
 800b648:	b2ad      	uxthmi	r5, r5
 800b64a:	6031      	str	r1, [r6, #0]
 800b64c:	07d9      	lsls	r1, r3, #31
 800b64e:	bf44      	itt	mi
 800b650:	f043 0320 	orrmi.w	r3, r3, #32
 800b654:	6023      	strmi	r3, [r4, #0]
 800b656:	b11d      	cbz	r5, 800b660 <_printf_i+0x19c>
 800b658:	2310      	movs	r3, #16
 800b65a:	e7ad      	b.n	800b5b8 <_printf_i+0xf4>
 800b65c:	4826      	ldr	r0, [pc, #152]	@ (800b6f8 <_printf_i+0x234>)
 800b65e:	e7e9      	b.n	800b634 <_printf_i+0x170>
 800b660:	6823      	ldr	r3, [r4, #0]
 800b662:	f023 0320 	bic.w	r3, r3, #32
 800b666:	6023      	str	r3, [r4, #0]
 800b668:	e7f6      	b.n	800b658 <_printf_i+0x194>
 800b66a:	4616      	mov	r6, r2
 800b66c:	e7bd      	b.n	800b5ea <_printf_i+0x126>
 800b66e:	6833      	ldr	r3, [r6, #0]
 800b670:	6825      	ldr	r5, [r4, #0]
 800b672:	6961      	ldr	r1, [r4, #20]
 800b674:	1d18      	adds	r0, r3, #4
 800b676:	6030      	str	r0, [r6, #0]
 800b678:	062e      	lsls	r6, r5, #24
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	d501      	bpl.n	800b682 <_printf_i+0x1be>
 800b67e:	6019      	str	r1, [r3, #0]
 800b680:	e002      	b.n	800b688 <_printf_i+0x1c4>
 800b682:	0668      	lsls	r0, r5, #25
 800b684:	d5fb      	bpl.n	800b67e <_printf_i+0x1ba>
 800b686:	8019      	strh	r1, [r3, #0]
 800b688:	2300      	movs	r3, #0
 800b68a:	6123      	str	r3, [r4, #16]
 800b68c:	4616      	mov	r6, r2
 800b68e:	e7bc      	b.n	800b60a <_printf_i+0x146>
 800b690:	6833      	ldr	r3, [r6, #0]
 800b692:	1d1a      	adds	r2, r3, #4
 800b694:	6032      	str	r2, [r6, #0]
 800b696:	681e      	ldr	r6, [r3, #0]
 800b698:	6862      	ldr	r2, [r4, #4]
 800b69a:	2100      	movs	r1, #0
 800b69c:	4630      	mov	r0, r6
 800b69e:	f7f4 fe3f 	bl	8000320 <memchr>
 800b6a2:	b108      	cbz	r0, 800b6a8 <_printf_i+0x1e4>
 800b6a4:	1b80      	subs	r0, r0, r6
 800b6a6:	6060      	str	r0, [r4, #4]
 800b6a8:	6863      	ldr	r3, [r4, #4]
 800b6aa:	6123      	str	r3, [r4, #16]
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6b2:	e7aa      	b.n	800b60a <_printf_i+0x146>
 800b6b4:	6923      	ldr	r3, [r4, #16]
 800b6b6:	4632      	mov	r2, r6
 800b6b8:	4649      	mov	r1, r9
 800b6ba:	4640      	mov	r0, r8
 800b6bc:	47d0      	blx	sl
 800b6be:	3001      	adds	r0, #1
 800b6c0:	d0ad      	beq.n	800b61e <_printf_i+0x15a>
 800b6c2:	6823      	ldr	r3, [r4, #0]
 800b6c4:	079b      	lsls	r3, r3, #30
 800b6c6:	d413      	bmi.n	800b6f0 <_printf_i+0x22c>
 800b6c8:	68e0      	ldr	r0, [r4, #12]
 800b6ca:	9b03      	ldr	r3, [sp, #12]
 800b6cc:	4298      	cmp	r0, r3
 800b6ce:	bfb8      	it	lt
 800b6d0:	4618      	movlt	r0, r3
 800b6d2:	e7a6      	b.n	800b622 <_printf_i+0x15e>
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	4632      	mov	r2, r6
 800b6d8:	4649      	mov	r1, r9
 800b6da:	4640      	mov	r0, r8
 800b6dc:	47d0      	blx	sl
 800b6de:	3001      	adds	r0, #1
 800b6e0:	d09d      	beq.n	800b61e <_printf_i+0x15a>
 800b6e2:	3501      	adds	r5, #1
 800b6e4:	68e3      	ldr	r3, [r4, #12]
 800b6e6:	9903      	ldr	r1, [sp, #12]
 800b6e8:	1a5b      	subs	r3, r3, r1
 800b6ea:	42ab      	cmp	r3, r5
 800b6ec:	dcf2      	bgt.n	800b6d4 <_printf_i+0x210>
 800b6ee:	e7eb      	b.n	800b6c8 <_printf_i+0x204>
 800b6f0:	2500      	movs	r5, #0
 800b6f2:	f104 0619 	add.w	r6, r4, #25
 800b6f6:	e7f5      	b.n	800b6e4 <_printf_i+0x220>
 800b6f8:	0800bbc9 	.word	0x0800bbc9
 800b6fc:	0800bbda 	.word	0x0800bbda

0800b700 <memmove>:
 800b700:	4288      	cmp	r0, r1
 800b702:	b510      	push	{r4, lr}
 800b704:	eb01 0402 	add.w	r4, r1, r2
 800b708:	d902      	bls.n	800b710 <memmove+0x10>
 800b70a:	4284      	cmp	r4, r0
 800b70c:	4623      	mov	r3, r4
 800b70e:	d807      	bhi.n	800b720 <memmove+0x20>
 800b710:	1e43      	subs	r3, r0, #1
 800b712:	42a1      	cmp	r1, r4
 800b714:	d008      	beq.n	800b728 <memmove+0x28>
 800b716:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b71a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b71e:	e7f8      	b.n	800b712 <memmove+0x12>
 800b720:	4402      	add	r2, r0
 800b722:	4601      	mov	r1, r0
 800b724:	428a      	cmp	r2, r1
 800b726:	d100      	bne.n	800b72a <memmove+0x2a>
 800b728:	bd10      	pop	{r4, pc}
 800b72a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b72e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b732:	e7f7      	b.n	800b724 <memmove+0x24>

0800b734 <_sbrk_r>:
 800b734:	b538      	push	{r3, r4, r5, lr}
 800b736:	4d06      	ldr	r5, [pc, #24]	@ (800b750 <_sbrk_r+0x1c>)
 800b738:	2300      	movs	r3, #0
 800b73a:	4604      	mov	r4, r0
 800b73c:	4608      	mov	r0, r1
 800b73e:	602b      	str	r3, [r5, #0]
 800b740:	f7f6 ffd4 	bl	80026ec <_sbrk>
 800b744:	1c43      	adds	r3, r0, #1
 800b746:	d102      	bne.n	800b74e <_sbrk_r+0x1a>
 800b748:	682b      	ldr	r3, [r5, #0]
 800b74a:	b103      	cbz	r3, 800b74e <_sbrk_r+0x1a>
 800b74c:	6023      	str	r3, [r4, #0]
 800b74e:	bd38      	pop	{r3, r4, r5, pc}
 800b750:	24000da8 	.word	0x24000da8

0800b754 <_realloc_r>:
 800b754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b758:	4607      	mov	r7, r0
 800b75a:	4614      	mov	r4, r2
 800b75c:	460d      	mov	r5, r1
 800b75e:	b921      	cbnz	r1, 800b76a <_realloc_r+0x16>
 800b760:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b764:	4611      	mov	r1, r2
 800b766:	f7ff bc5b 	b.w	800b020 <_malloc_r>
 800b76a:	b92a      	cbnz	r2, 800b778 <_realloc_r+0x24>
 800b76c:	f7ff fbec 	bl	800af48 <_free_r>
 800b770:	4625      	mov	r5, r4
 800b772:	4628      	mov	r0, r5
 800b774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b778:	f000 f81a 	bl	800b7b0 <_malloc_usable_size_r>
 800b77c:	4284      	cmp	r4, r0
 800b77e:	4606      	mov	r6, r0
 800b780:	d802      	bhi.n	800b788 <_realloc_r+0x34>
 800b782:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b786:	d8f4      	bhi.n	800b772 <_realloc_r+0x1e>
 800b788:	4621      	mov	r1, r4
 800b78a:	4638      	mov	r0, r7
 800b78c:	f7ff fc48 	bl	800b020 <_malloc_r>
 800b790:	4680      	mov	r8, r0
 800b792:	b908      	cbnz	r0, 800b798 <_realloc_r+0x44>
 800b794:	4645      	mov	r5, r8
 800b796:	e7ec      	b.n	800b772 <_realloc_r+0x1e>
 800b798:	42b4      	cmp	r4, r6
 800b79a:	4622      	mov	r2, r4
 800b79c:	4629      	mov	r1, r5
 800b79e:	bf28      	it	cs
 800b7a0:	4632      	movcs	r2, r6
 800b7a2:	f7ff fbc3 	bl	800af2c <memcpy>
 800b7a6:	4629      	mov	r1, r5
 800b7a8:	4638      	mov	r0, r7
 800b7aa:	f7ff fbcd 	bl	800af48 <_free_r>
 800b7ae:	e7f1      	b.n	800b794 <_realloc_r+0x40>

0800b7b0 <_malloc_usable_size_r>:
 800b7b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7b4:	1f18      	subs	r0, r3, #4
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	bfbc      	itt	lt
 800b7ba:	580b      	ldrlt	r3, [r1, r0]
 800b7bc:	18c0      	addlt	r0, r0, r3
 800b7be:	4770      	bx	lr

0800b7c0 <_init>:
 800b7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7c2:	bf00      	nop
 800b7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7c6:	bc08      	pop	{r3}
 800b7c8:	469e      	mov	lr, r3
 800b7ca:	4770      	bx	lr

0800b7cc <_fini>:
 800b7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ce:	bf00      	nop
 800b7d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7d2:	bc08      	pop	{r3}
 800b7d4:	469e      	mov	lr, r3
 800b7d6:	4770      	bx	lr
