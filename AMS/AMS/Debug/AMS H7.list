
AMS H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c97c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800cc4c  0800cc4c  0000dc4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d0e4  0800d0e4  0000e0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800d0ec  0800d0ec  0000e0ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d0f4  0800d0f4  0000e0f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  24000000  0800d0f8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e48  24000068  0800d160  0000f068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000eb0  0800d160  0000feb0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f068  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002702d  00000000  00000000  0000f096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c45  00000000  00000000  000360c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001928  00000000  00000000  00039d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000013a7  00000000  00000000  0003b630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b7cc  00000000  00000000  0003c9d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020e02  00000000  00000000  000781a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017626e  00000000  00000000  00098fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020f213  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000734c  00000000  00000000  0020f258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000042  00000000  00000000  002165a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000068 	.word	0x24000068
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800cc34 	.word	0x0800cc34

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400006c 	.word	0x2400006c
 800030c:	0800cc34 	.word	0x0800cc34

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <_ZN7BMS_MODC1Emiiihjii>:
/*********************************************************************************************************
 ** Function name:           BMS_MOD
 ** Descriptions:            Initialization function of teh class
 *********************************************************************************************************/

BMS_MOD::BMS_MOD(uint32_t _ID, int _MAXV, int _MINV, int _MAXT,
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	603b      	str	r3, [r7, #0]
		uint8_t _NUMCELLS, unsigned int _SHUNT, int _LAG_V, int _LAG_T) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	2200      	movs	r2, #0
 800071e:	751a      	strb	r2, [r3, #20]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000726:	619a      	str	r2, [r3, #24]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	22fa      	movs	r2, #250	@ 0xfa
 800072c:	61da      	str	r2, [r3, #28]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000734:	621a      	str	r2, [r3, #32]
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800073c:	625a      	str	r2, [r3, #36]	@ 0x24
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000744:	629a      	str	r2, [r3, #40]	@ 0x28
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800074c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	699a      	ldr	r2, [r3, #24]
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	631a      	str	r2, [r3, #48]	@ 0x30
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	2200      	movs	r2, #0
 800075a:	635a      	str	r2, [r3, #52]	@ 0x34
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	6a1a      	ldr	r2, [r3, #32]
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	639a      	str	r2, [r3, #56]	@ 0x38
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	2200      	movs	r2, #0
 8000770:	641a      	str	r2, [r3, #64]	@ 0x40
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	645a      	str	r2, [r3, #68]	@ 0x44
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	2200      	movs	r2, #0
 800077e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	2200      	movs	r2, #0
 800078e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	2200      	movs	r2, #0
 8000796:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	2213      	movs	r2, #19
 800079e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	220a      	movs	r2, #10
 80007a6:	651a      	str	r2, [r3, #80]	@ 0x50
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	3354      	adds	r3, #84	@ 0x54
 80007ac:	2230      	movs	r2, #48	@ 0x30
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f00b fdc1 	bl	800c338 <memset>
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	2200      	movs	r2, #0
 80007ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	2200      	movs	r2, #0
 80007c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	2200      	movs	r2, #0
 80007ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	f241 0268 	movw	r2, #4200	@ 0x1068
 80007d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	2200      	movs	r2, #0
 80007dc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	2200      	movs	r2, #0
 80007e4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	2200      	movs	r2, #0
 80007ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	2200      	movs	r2, #0
 80007f4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	2200      	movs	r2, #0
 80007fc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	33a8      	adds	r3, #168	@ 0xa8
 8000804:	224c      	movs	r2, #76	@ 0x4c
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f00b fd95 	bl	800c338 <memset>
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	33f4      	adds	r3, #244	@ 0xf4
 8000812:	2298      	movs	r2, #152	@ 0x98
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f00b fd8e 	bl	800c338 <memset>
	CANID = _ID;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	601a      	str	r2, [r3, #0]
	LIMIT_MAX_V = _MAXV;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	605a      	str	r2, [r3, #4]
	LIMIT_MIN_V = _MINV;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	683a      	ldr	r2, [r7, #0]
 800082c:	609a      	str	r2, [r3, #8]
	LIMIT_MAX_T = _MAXT;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	6a3a      	ldr	r2, [r7, #32]
 8000832:	60da      	str	r2, [r3, #12]
	NUM_CELLS = _NUMCELLS;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800083a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

	uint32_t now = HAL_GetTick();
 800083e:	f002 fbd1 	bl	8002fe4 <HAL_GetTick>
 8000842:	6178      	str	r0, [r7, #20]

	time_lim_plotted_volts = now + _LAG_V;
 8000844:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	441a      	add	r2, r3
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	631a      	str	r2, [r3, #48]	@ 0x30
	time_lim_sent_volts = now + _LAG_V;
 800084e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	441a      	add	r2, r3
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	635a      	str	r2, [r3, #52]	@ 0x34
	time_lim_received_volts = now + TIME_LIM_RECV_VOLTS + _LAG_V;
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	6a1a      	ldr	r2, [r3, #32]
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	441a      	add	r2, r3
 8000860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000862:	441a      	add	r2, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	639a      	str	r2, [r3, #56]	@ 0x38

	time_lim_plotted_temps = now + _LAG_T;
 8000868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	441a      	add	r2, r3
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	63da      	str	r2, [r3, #60]	@ 0x3c
	time_lim_sent_temps = now + _LAG_T;
 8000872:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	441a      	add	r2, r3
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	641a      	str	r2, [r3, #64]	@ 0x40
	time_lim_received_temps = now + TIME_LIM_RECV_TEMPS + _LAG_T;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	441a      	add	r2, r3
 8000884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000886:	441a      	add	r2, r3
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	645a      	str	r2, [r3, #68]	@ 0x44
}
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	4618      	mov	r0, r3
 8000890:	3718      	adds	r7, #24
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <_ZN7BMS_MOD12voltage_infoEPc>:

/*********************************************************************************************************
 ** Function name:           info
 ** Descriptions:            Function for printing the class data
 *********************************************************************************************************/
void BMS_MOD::voltage_info(char *buffer) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]

	if (getUARTState() == HAL_UART_STATE_READY) { // Send the message just if there is a serial por connected
 80008a2:	f001 fc31 	bl	8002108 <getUARTState>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b20      	cmp	r3, #32
 80008aa:	bf0c      	ite	eq
 80008ac:	2301      	moveq	r3, #1
 80008ae:	2300      	movne	r3, #0
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f000 8083 	beq.w	80009be <_ZN7BMS_MOD12voltage_infoEPc+0x126>
		print((char*) "\n***********************");
 80008b8:	4851      	ldr	r0, [pc, #324]	@ (8000a00 <_ZN7BMS_MOD12voltage_infoEPc+0x168>)
 80008ba:	f001 fbcb 	bl	8002054 <print>
		print((char*) "         BMS");
 80008be:	4851      	ldr	r0, [pc, #324]	@ (8000a04 <_ZN7BMS_MOD12voltage_infoEPc+0x16c>)
 80008c0:	f001 fbc8 	bl	8002054 <print>
		print((char*) "***********************");
 80008c4:	4850      	ldr	r0, [pc, #320]	@ (8000a08 <_ZN7BMS_MOD12voltage_infoEPc+0x170>)
 80008c6:	f001 fbc5 	bl	8002054 <print>
		sprintf(buffer, " - ERROR:     %i", error_volt);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80008d0:	461a      	mov	r2, r3
 80008d2:	494e      	ldr	r1, [pc, #312]	@ (8000a0c <_ZN7BMS_MOD12voltage_infoEPc+0x174>)
 80008d4:	6838      	ldr	r0, [r7, #0]
 80008d6:	f00b fd0d 	bl	800c2f4 <siprintf>
		print(buffer);
 80008da:	6838      	ldr	r0, [r7, #0]
 80008dc:	f001 fbba 	bl	8002054 <print>
		sprintf(buffer, " - CAN ID:    0x%lx", CANID);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	461a      	mov	r2, r3
 80008e6:	494a      	ldr	r1, [pc, #296]	@ (8000a10 <_ZN7BMS_MOD12voltage_infoEPc+0x178>)
 80008e8:	6838      	ldr	r0, [r7, #0]
 80008ea:	f00b fd03 	bl	800c2f4 <siprintf>
		print(buffer);
 80008ee:	6838      	ldr	r0, [r7, #0]
 80008f0:	f001 fbb0 	bl	8002054 <print>
		sprintf(buffer, " - MAX V =    %i mV", MAX_V);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	691b      	ldr	r3, [r3, #16]
 80008f8:	461a      	mov	r2, r3
 80008fa:	4946      	ldr	r1, [pc, #280]	@ (8000a14 <_ZN7BMS_MOD12voltage_infoEPc+0x17c>)
 80008fc:	6838      	ldr	r0, [r7, #0]
 80008fe:	f00b fcf9 	bl	800c2f4 <siprintf>
		print(buffer);
 8000902:	6838      	ldr	r0, [r7, #0]
 8000904:	f001 fba6 	bl	8002054 <print>
		sprintf(buffer, " - MIN V =    %i mV", MIN_V);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800090e:	461a      	mov	r2, r3
 8000910:	4941      	ldr	r1, [pc, #260]	@ (8000a18 <_ZN7BMS_MOD12voltage_infoEPc+0x180>)
 8000912:	6838      	ldr	r0, [r7, #0]
 8000914:	f00b fcee 	bl	800c2f4 <siprintf>
		print(buffer);
 8000918:	6838      	ldr	r0, [r7, #0]
 800091a:	f001 fb9b 	bl	8002054 <print>
		print((char*) "-----------------------");
 800091e:	483f      	ldr	r0, [pc, #252]	@ (8000a1c <_ZN7BMS_MOD12voltage_infoEPc+0x184>)
 8000920:	f001 fb98 	bl	8002054 <print>
		sprintf(buffer, "VOLTS (mV): [%i", cellVoltagemV[0]);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800092a:	461a      	mov	r2, r3
 800092c:	493c      	ldr	r1, [pc, #240]	@ (8000a20 <_ZN7BMS_MOD12voltage_infoEPc+0x188>)
 800092e:	6838      	ldr	r0, [r7, #0]
 8000930:	f00b fce0 	bl	800c2f4 <siprintf>
		printnl(buffer);
 8000934:	6838      	ldr	r0, [r7, #0]
 8000936:	f001 fbab 	bl	8002090 <printnl>
		for (int i = 0; i < NUM_CELLS; i++) {
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	e00f      	b.n	8000960 <_ZN7BMS_MOD12voltage_infoEPc+0xc8>
			sprintf(buffer, ", %i", cellVoltagemV[i]);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	322a      	adds	r2, #42	@ 0x2a
 8000946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800094a:	461a      	mov	r2, r3
 800094c:	4935      	ldr	r1, [pc, #212]	@ (8000a24 <_ZN7BMS_MOD12voltage_infoEPc+0x18c>)
 800094e:	6838      	ldr	r0, [r7, #0]
 8000950:	f00b fcd0 	bl	800c2f4 <siprintf>
			printnl(buffer);
 8000954:	6838      	ldr	r0, [r7, #0]
 8000956:	f001 fb9b 	bl	8002090 <printnl>
		for (int i = 0; i < NUM_CELLS; i++) {
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	3301      	adds	r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8000966:	461a      	mov	r2, r3
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	4293      	cmp	r3, r2
 800096c:	dbe8      	blt.n	8000940 <_ZN7BMS_MOD12voltage_infoEPc+0xa8>
		}

		for (int i = 0; i < NUM_CELLS; i++) {
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	e00e      	b.n	8000992 <_ZN7BMS_MOD12voltage_infoEPc+0xfa>
			voltage_acum += cellVoltagemV[i];
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	68b9      	ldr	r1, [r7, #8]
 800097e:	312a      	adds	r1, #42	@ 0x2a
 8000980:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000984:	441a      	add	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		for (int i = 0; i < NUM_CELLS; i++) {
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	3301      	adds	r3, #1
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8000998:	461a      	mov	r2, r3
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	4293      	cmp	r3, r2
 800099e:	dbe9      	blt.n	8000974 <_ZN7BMS_MOD12voltage_infoEPc+0xdc>
		}

		print((char*) "]");
 80009a0:	4821      	ldr	r0, [pc, #132]	@ (8000a28 <_ZN7BMS_MOD12voltage_infoEPc+0x190>)
 80009a2:	f001 fb57 	bl	8002054 <print>
		sprintf(buffer, " - V(max) = %i mV || V(min) = %i", MAX_V, MIN_V);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	691a      	ldr	r2, [r3, #16]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009b0:	491e      	ldr	r1, [pc, #120]	@ (8000a2c <_ZN7BMS_MOD12voltage_infoEPc+0x194>)
 80009b2:	6838      	ldr	r0, [r7, #0]
 80009b4:	f00b fc9e 	bl	800c2f4 <siprintf>
		print(buffer);
 80009b8:	6838      	ldr	r0, [r7, #0]
 80009ba:	f001 fb4b 	bl	8002054 <print>
	}
	sprintf(buffer, "- BALANCING V = %i mV", BALANCING_V);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009c4:	461a      	mov	r2, r3
 80009c6:	491a      	ldr	r1, [pc, #104]	@ (8000a30 <_ZN7BMS_MOD12voltage_infoEPc+0x198>)
 80009c8:	6838      	ldr	r0, [r7, #0]
 80009ca:	f00b fc93 	bl	800c2f4 <siprintf>
	print(buffer);
 80009ce:	6838      	ldr	r0, [r7, #0]
 80009d0:	f001 fb40 	bl	8002054 <print>

	sprintf(buffer, "- STACK VOLTAGE = %i V", voltage_acum / 1000);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009da:	4a16      	ldr	r2, [pc, #88]	@ (8000a34 <_ZN7BMS_MOD12voltage_infoEPc+0x19c>)
 80009dc:	fb82 1203 	smull	r1, r2, r2, r3
 80009e0:	1192      	asrs	r2, r2, #6
 80009e2:	17db      	asrs	r3, r3, #31
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	461a      	mov	r2, r3
 80009e8:	4913      	ldr	r1, [pc, #76]	@ (8000a38 <_ZN7BMS_MOD12voltage_infoEPc+0x1a0>)
 80009ea:	6838      	ldr	r0, [r7, #0]
 80009ec:	f00b fc82 	bl	800c2f4 <siprintf>
	print(buffer);
 80009f0:	6838      	ldr	r0, [r7, #0]
 80009f2:	f001 fb2f 	bl	8002054 <print>
}
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	0800cc4c 	.word	0x0800cc4c
 8000a04:	0800cc68 	.word	0x0800cc68
 8000a08:	0800cc78 	.word	0x0800cc78
 8000a0c:	0800cc90 	.word	0x0800cc90
 8000a10:	0800cca4 	.word	0x0800cca4
 8000a14:	0800ccb8 	.word	0x0800ccb8
 8000a18:	0800cccc 	.word	0x0800cccc
 8000a1c:	0800cce0 	.word	0x0800cce0
 8000a20:	0800ccf8 	.word	0x0800ccf8
 8000a24:	0800cd08 	.word	0x0800cd08
 8000a28:	0800cd10 	.word	0x0800cd10
 8000a2c:	0800cd14 	.word	0x0800cd14
 8000a30:	0800cd38 	.word	0x0800cd38
 8000a34:	10624dd3 	.word	0x10624dd3
 8000a38:	0800cd50 	.word	0x0800cd50

08000a3c <_ZN7BMS_MOD16temperature_infoEPc>:

// ********************************************************************************************************
// **Function name:           info
// **Descriptions:            Function for printing the class data
// **********************************************************************************************************
void BMS_MOD::temperature_info(char *buffer) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
	if (getUARTState() == HAL_UART_STATE_READY) //Send the message just if there is a serial por connected
 8000a46:	f001 fb5f 	bl	8002108 <getUARTState>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b20      	cmp	r3, #32
 8000a4e:	bf0c      	ite	eq
 8000a50:	2301      	moveq	r3, #1
 8000a52:	2300      	movne	r3, #0
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d063      	beq.n	8000b22 <_ZN7BMS_MOD16temperature_infoEPc+0xe6>
	{
		print((char*) "\n***********************");
 8000a5a:	4834      	ldr	r0, [pc, #208]	@ (8000b2c <_ZN7BMS_MOD16temperature_infoEPc+0xf0>)
 8000a5c:	f001 fafa 	bl	8002054 <print>
		print((char*) "     Temperatures");
 8000a60:	4833      	ldr	r0, [pc, #204]	@ (8000b30 <_ZN7BMS_MOD16temperature_infoEPc+0xf4>)
 8000a62:	f001 faf7 	bl	8002054 <print>
		print((char*) "***********************");
 8000a66:	4833      	ldr	r0, [pc, #204]	@ (8000b34 <_ZN7BMS_MOD16temperature_infoEPc+0xf8>)
 8000a68:	f001 faf4 	bl	8002054 <print>
		sprintf(buffer, " - ERROR:     %i", error_temp);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000a72:	461a      	mov	r2, r3
 8000a74:	4930      	ldr	r1, [pc, #192]	@ (8000b38 <_ZN7BMS_MOD16temperature_infoEPc+0xfc>)
 8000a76:	6838      	ldr	r0, [r7, #0]
 8000a78:	f00b fc3c 	bl	800c2f4 <siprintf>
		print(buffer);
 8000a7c:	6838      	ldr	r0, [r7, #0]
 8000a7e:	f001 fae9 	bl	8002054 <print>
		sprintf(buffer, " - CAN ID:    0x%lx", CANID + 20);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	3314      	adds	r3, #20
 8000a88:	461a      	mov	r2, r3
 8000a8a:	492c      	ldr	r1, [pc, #176]	@ (8000b3c <_ZN7BMS_MOD16temperature_infoEPc+0x100>)
 8000a8c:	6838      	ldr	r0, [r7, #0]
 8000a8e:	f00b fc31 	bl	800c2f4 <siprintf>
		print(buffer);
 8000a92:	6838      	ldr	r0, [r7, #0]
 8000a94:	f001 fade 	bl	8002054 <print>
		sprintf(buffer, " - MAX T =    %i ºC", MAX_T);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	4927      	ldr	r1, [pc, #156]	@ (8000b40 <_ZN7BMS_MOD16temperature_infoEPc+0x104>)
 8000aa2:	6838      	ldr	r0, [r7, #0]
 8000aa4:	f00b fc26 	bl	800c2f4 <siprintf>
		print(buffer);
 8000aa8:	6838      	ldr	r0, [r7, #0]
 8000aaa:	f001 fad3 	bl	8002054 <print>
		sprintf(buffer, " - MIN T =    %i ºC", MIN_T);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4923      	ldr	r1, [pc, #140]	@ (8000b44 <_ZN7BMS_MOD16temperature_infoEPc+0x108>)
 8000ab8:	6838      	ldr	r0, [r7, #0]
 8000aba:	f00b fc1b 	bl	800c2f4 <siprintf>
		print(buffer);
 8000abe:	6838      	ldr	r0, [r7, #0]
 8000ac0:	f001 fac8 	bl	8002054 <print>
		sprintf(buffer, " - LIM T =    %i ºC", LIMIT_MAX_T);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	491f      	ldr	r1, [pc, #124]	@ (8000b48 <_ZN7BMS_MOD16temperature_infoEPc+0x10c>)
 8000acc:	6838      	ldr	r0, [r7, #0]
 8000ace:	f00b fc11 	bl	800c2f4 <siprintf>
		print((char*) "-----------------------");
 8000ad2:	481e      	ldr	r0, [pc, #120]	@ (8000b4c <_ZN7BMS_MOD16temperature_infoEPc+0x110>)
 8000ad4:	f001 fabe 	bl	8002054 <print>
		sprintf(buffer, "Temperatures (ºC): [%i", cellTemperature[0]);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ade:	461a      	mov	r2, r3
 8000ae0:	491b      	ldr	r1, [pc, #108]	@ (8000b50 <_ZN7BMS_MOD16temperature_infoEPc+0x114>)
 8000ae2:	6838      	ldr	r0, [r7, #0]
 8000ae4:	f00b fc06 	bl	800c2f4 <siprintf>
		printnl(buffer);
 8000ae8:	6838      	ldr	r0, [r7, #0]
 8000aea:	f001 fad1 	bl	8002090 <printnl>
		for (int i = 1; i < 38; i++) {
 8000aee:	2301      	movs	r3, #1
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	e010      	b.n	8000b16 <_ZN7BMS_MOD16temperature_infoEPc+0xda>
			sprintf(buffer, ", %i", cellTemperature[i]);
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	333c      	adds	r3, #60	@ 0x3c
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	4413      	add	r3, r2
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4914      	ldr	r1, [pc, #80]	@ (8000b54 <_ZN7BMS_MOD16temperature_infoEPc+0x118>)
 8000b04:	6838      	ldr	r0, [r7, #0]
 8000b06:	f00b fbf5 	bl	800c2f4 <siprintf>
			printnl(buffer);
 8000b0a:	6838      	ldr	r0, [r7, #0]
 8000b0c:	f001 fac0 	bl	8002090 <printnl>
		for (int i = 1; i < 38; i++) {
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	3301      	adds	r3, #1
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	2b25      	cmp	r3, #37	@ 0x25
 8000b1a:	ddeb      	ble.n	8000af4 <_ZN7BMS_MOD16temperature_infoEPc+0xb8>
		}
		print((char*) "]");
 8000b1c:	480e      	ldr	r0, [pc, #56]	@ (8000b58 <_ZN7BMS_MOD16temperature_infoEPc+0x11c>)
 8000b1e:	f001 fa99 	bl	8002054 <print>

	}
}
 8000b22:	bf00      	nop
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	0800cc4c 	.word	0x0800cc4c
 8000b30:	0800cd68 	.word	0x0800cd68
 8000b34:	0800cc78 	.word	0x0800cc78
 8000b38:	0800cc90 	.word	0x0800cc90
 8000b3c:	0800cca4 	.word	0x0800cca4
 8000b40:	0800cd7c 	.word	0x0800cd7c
 8000b44:	0800cd94 	.word	0x0800cd94
 8000b48:	0800cdac 	.word	0x0800cdac
 8000b4c:	0800cce0 	.word	0x0800cce0
 8000b50:	0800cdc4 	.word	0x0800cdc4
 8000b54:	0800cd08 	.word	0x0800cd08
 8000b58:	0800cd10 	.word	0x0800cd10

08000b5c <_ZN7BMS_MOD5parseEmPhm>:

/*********************************************************************************************************
 ** Function name:           parse
 ** Descriptions:            Function for parsing the received data via CAN protocol
 *********************************************************************************************************/
bool BMS_MOD::parse(uint32_t id, uint8_t *buf, uint32_t t) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	@ 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	603b      	str	r3, [r7, #0]
	if (id > CANID && id < CANID + 30) {
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	f240 8113 	bls.w	8000d9c <_ZN7BMS_MOD5parseEmPhm+0x240>
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	331e      	adds	r3, #30
 8000b7c:	68ba      	ldr	r2, [r7, #8]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	f080 810c 	bcs.w	8000d9c <_ZN7BMS_MOD5parseEmPhm+0x240>
		int m = id % CANID;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b8e:	fb01 f202 	mul.w	r2, r1, r2
 8000b92:	1a9b      	subs	r3, r3, r2
 8000b94:	617b      	str	r3, [r7, #20]
		int pos = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
		if (m >= 1 && m <= 5) {
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f340 8088 	ble.w	8000cb2 <_ZN7BMS_MOD5parseEmPhm+0x156>
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	2b05      	cmp	r3, #5
 8000ba6:	f300 8084 	bgt.w	8000cb2 <_ZN7BMS_MOD5parseEmPhm+0x156>
			time_lim_received_volts = t + TIME_LIM_RECV_VOLTS;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	6a1a      	ldr	r2, [r3, #32]
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	441a      	add	r2, r3
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	639a      	str	r2, [r3, #56]	@ 0x38

			for (int i = 0; i < 4; i++) {
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bba:	e03c      	b.n	8000c36 <_ZN7BMS_MOD5parseEmPhm+0xda>
				pos = (m - 1) * 4 + i;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bc4:	4413      	add	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
				if (pos >= 19)
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	2b12      	cmp	r3, #18
 8000bcc:	dc37      	bgt.n	8000c3e <_ZN7BMS_MOD5parseEmPhm+0xe2>
					break;

				cellVoltagemV[pos] = (buf[2 * i] << 8) | buf[2 * i + 1];
 8000bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	021b      	lsls	r3, r3, #8
 8000bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bde:	0052      	lsls	r2, r2, #1
 8000be0:	3201      	adds	r2, #1
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	440a      	add	r2, r1
 8000be6:	7812      	ldrb	r2, [r2, #0]
 8000be8:	ea43 0102 	orr.w	r1, r3, r2
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	322a      	adds	r2, #42	@ 0x2a
 8000bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				 //error_volt = BMS_OK;
				 } else {
				 flag_error_volt[pos] = 0;
				 }*/

				if ((cellVoltagemV[pos] > LIMIT_MAX_V) && pos < NUM_CELLS) {
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	322a      	adds	r2, #42	@ 0x2a
 8000bfc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	dd13      	ble.n	8000c30 <_ZN7BMS_MOD5parseEmPhm+0xd4>
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8000c0e:	461a      	mov	r2, r3
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	4293      	cmp	r3, r2
 8000c14:	da0c      	bge.n	8000c30 <_ZN7BMS_MOD5parseEmPhm+0xd4>
					flag_error_volt[pos]++;
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	3314      	adds	r3, #20
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	4413      	add	r3, r2
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	1c5a      	adds	r2, r3, #1
 8000c24:	68f9      	ldr	r1, [r7, #12]
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	3314      	adds	r3, #20
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	605a      	str	r2, [r3, #4]
			for (int i = 0; i < 4; i++) {
 8000c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c32:	3301      	adds	r3, #1
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	ddbf      	ble.n	8000bbc <_ZN7BMS_MOD5parseEmPhm+0x60>
 8000c3c:	e000      	b.n	8000c40 <_ZN7BMS_MOD5parseEmPhm+0xe4>
					break;
 8000c3e:	bf00      	nop
					//} else {
					//flag_error_volt[pos] = 0;
				}
			}

			MAX_V = cellVoltagemV[0];
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	611a      	str	r2, [r3, #16]
			MIN_V = cellVoltagemV[0];
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
			for (int i = 1; i < 19; i++) {
 8000c56:	2301      	movs	r3, #1
 8000c58:	623b      	str	r3, [r7, #32]
 8000c5a:	e025      	b.n	8000ca8 <_ZN7BMS_MOD5parseEmPhm+0x14c>
				if (cellVoltagemV[i] > MAX_V)
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	6a3a      	ldr	r2, [r7, #32]
 8000c60:	322a      	adds	r2, #42	@ 0x2a
 8000c62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	691b      	ldr	r3, [r3, #16]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	dd07      	ble.n	8000c7e <_ZN7BMS_MOD5parseEmPhm+0x122>
					MAX_V = cellVoltagemV[i];
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	6a3a      	ldr	r2, [r7, #32]
 8000c72:	322a      	adds	r2, #42	@ 0x2a
 8000c74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
 8000c7c:	e011      	b.n	8000ca2 <_ZN7BMS_MOD5parseEmPhm+0x146>
				else if (cellVoltagemV[i] < MIN_V)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	6a3a      	ldr	r2, [r7, #32]
 8000c82:	322a      	adds	r2, #42	@ 0x2a
 8000c84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	da07      	bge.n	8000ca2 <_ZN7BMS_MOD5parseEmPhm+0x146>
					MIN_V = cellVoltagemV[i];
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	6a3a      	ldr	r2, [r7, #32]
 8000c96:	322a      	adds	r2, #42	@ 0x2a
 8000c98:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
			for (int i = 1; i < 19; i++) {
 8000ca2:	6a3b      	ldr	r3, [r7, #32]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	623b      	str	r3, [r7, #32]
 8000ca8:	6a3b      	ldr	r3, [r7, #32]
 8000caa:	2b12      	cmp	r3, #18
 8000cac:	ddd6      	ble.n	8000c5c <_ZN7BMS_MOD5parseEmPhm+0x100>
			}

			return true;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e075      	b.n	8000d9e <_ZN7BMS_MOD5parseEmPhm+0x242>

		} else if (m >= 21 && m <= 25) {
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	2b14      	cmp	r3, #20
 8000cb6:	dd71      	ble.n	8000d9c <_ZN7BMS_MOD5parseEmPhm+0x240>
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	2b19      	cmp	r3, #25
 8000cbc:	dc6e      	bgt.n	8000d9c <_ZN7BMS_MOD5parseEmPhm+0x240>
			// m = 21 → packet 0, m = 25 → packet 4
			time_lim_received_temps = t + TIME_LIM_RECV_TEMPS;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	441a      	add	r2, r3
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	645a      	str	r2, [r3, #68]	@ 0x44
			if (flag_charger == 1)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d104      	bne.n	8000cde <_ZN7BMS_MOD5parseEmPhm+0x182>
				module_send_message_CAN1(id, buf, 8);
 8000cd4:	2208      	movs	r2, #8
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	68b8      	ldr	r0, [r7, #8]
 8000cda:	f001 f959 	bl	8001f90 <module_send_message_CAN1>

			for (int i = 0; i < 8; i++) {
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
 8000ce2:	e016      	b.n	8000d12 <_ZN7BMS_MOD5parseEmPhm+0x1b6>
				pos = (m - 21) * 8 + i;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	3b15      	subs	r3, #21
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	69fa      	ldr	r2, [r7, #28]
 8000cec:	4413      	add	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
				if (pos >= 38)
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	2b25      	cmp	r3, #37	@ 0x25
 8000cf4:	dc11      	bgt.n	8000d1a <_ZN7BMS_MOD5parseEmPhm+0x1be>
					break;

				cellTemperature[pos] = buf[i];
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	4619      	mov	r1, r3
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	333c      	adds	r3, #60	@ 0x3c
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4413      	add	r3, r2
 8000d0a:	6059      	str	r1, [r3, #4]
			for (int i = 0; i < 8; i++) {
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	61fb      	str	r3, [r7, #28]
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	2b07      	cmp	r3, #7
 8000d16:	dde5      	ble.n	8000ce4 <_ZN7BMS_MOD5parseEmPhm+0x188>
 8000d18:	e000      	b.n	8000d1c <_ZN7BMS_MOD5parseEmPhm+0x1c0>
					break;
 8000d1a:	bf00      	nop
				//if (cellTemperature[pos] > LIMIT_MAX_T)
				//	error_temp = BMS_ERROR_TEMP;

			}

			MAX_T = cellTemperature[0];
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
			MIN_T = cellTemperature[0];
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			for (int i = 0; i < 38; i++) {
 8000d34:	2300      	movs	r3, #0
 8000d36:	61bb      	str	r3, [r7, #24]
 8000d38:	e02b      	b.n	8000d92 <_ZN7BMS_MOD5parseEmPhm+0x236>
				if (cellTemperature[i] > MAX_T)
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	333c      	adds	r3, #60	@ 0x3c
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	4413      	add	r3, r2
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	dd09      	ble.n	8000d64 <_ZN7BMS_MOD5parseEmPhm+0x208>
					MAX_T = cellTemperature[i];
 8000d50:	68fa      	ldr	r2, [r7, #12]
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	333c      	adds	r3, #60	@ 0x3c
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	685a      	ldr	r2, [r3, #4]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8000d62:	e013      	b.n	8000d8c <_ZN7BMS_MOD5parseEmPhm+0x230>
				else if (cellTemperature[i] < MIN_T)
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	333c      	adds	r3, #60	@ 0x3c
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	4413      	add	r3, r2
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000d76:	429a      	cmp	r2, r3
 8000d78:	da08      	bge.n	8000d8c <_ZN7BMS_MOD5parseEmPhm+0x230>
					MIN_T = cellTemperature[i];
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	333c      	adds	r3, #60	@ 0x3c
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4413      	add	r3, r2
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			for (int i = 0; i < 38; i++) {
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	61bb      	str	r3, [r7, #24]
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	2b25      	cmp	r3, #37	@ 0x25
 8000d96:	ddd0      	ble.n	8000d3a <_ZN7BMS_MOD5parseEmPhm+0x1de>
			}

			return true;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e000      	b.n	8000d9e <_ZN7BMS_MOD5parseEmPhm+0x242>
			error_temp = 0;
		}*/

	}

	return false;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3728      	adds	r7, #40	@ 0x28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <_ZN7BMS_MOD13query_voltageEmPc>:

/*********************************************************************************************************
 ** Function name:           query_voltage
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/
int BMS_MOD::query_voltage(uint32_t time, char *buffer) {
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b086      	sub	sp, #24
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	60f8      	str	r0, [r7, #12]
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
	// Shunt voltage in milivolts

	if (get_state() == charge) {
 8000db2:	f001 f9d9 	bl	8002168 <_Z9get_statev>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b04      	cmp	r3, #4
 8000dba:	bf0c      	ite	eq
 8000dbc:	2301      	moveq	r3, #1
 8000dbe:	2300      	movne	r3, #0
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d107      	bne.n	8000dd6 <_ZN7BMS_MOD13query_voltageEmPc+0x30>

	} else {

		//Don't do anything

		message_balancing[0] = 0;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		message_balancing[1] = 0;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
	}

	if (time > time_lim_sent_volts) {
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d91e      	bls.n	8000e1e <_ZN7BMS_MOD13query_voltageEmPc+0x78>
		time_lim_sent_volts += TIME_LIM_SEND_VOLTS;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	69db      	ldr	r3, [r3, #28]
 8000de8:	441a      	add	r2, r3
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	635a      	str	r2, [r3, #52]	@ 0x34
		if (CANID != 0x00) { //It keeps sending 0x00 and dont know where
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d013      	beq.n	8000e1e <_ZN7BMS_MOD13query_voltageEmPc+0x78>
			if (module_send_message_CAN2(CANID, message_balancing, 2)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6818      	ldr	r0, [r3, #0]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	3348      	adds	r3, #72	@ 0x48
 8000dfe:	2202      	movs	r2, #2
 8000e00:	4619      	mov	r1, r3
 8000e02:	f001 f907 	bl	8002014 <module_send_message_CAN2>
 8000e06:	4603      	mov	r3, r0
					!= HAL_OK) {
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	bf14      	ite	ne
 8000e0c:	2301      	movne	r3, #1
 8000e0e:	2300      	moveq	r3, #0
 8000e10:	b2db      	uxtb	r3, r3
			if (module_send_message_CAN2(CANID, message_balancing, 2)
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <_ZN7BMS_MOD13query_voltageEmPc+0x78>
				error_volt = BMS_ERROR_COMMUNICATION;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			}
		}

	}

	if (time > time_lim_received_volts) {
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d904      	bls.n	8000e32 <_ZN7BMS_MOD13query_voltageEmPc+0x8c>

		error_volt = BMS_ERROR_COMMUNICATION;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8000e30:	e003      	b.n	8000e3a <_ZN7BMS_MOD13query_voltageEmPc+0x94>
	}
	else{
		error_volt = BMS_OK;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	2200      	movs	r2, #0
 8000e36:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	}

	if (TIME_LIM_PLOT_VOLTS > 0 && time > time_lim_plotted_volts) {
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d00f      	beq.n	8000e62 <_ZN7BMS_MOD13query_voltageEmPc+0xbc>
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d90a      	bls.n	8000e62 <_ZN7BMS_MOD13query_voltageEmPc+0xbc>
		time_lim_plotted_volts += TIME_LIM_PLOT_VOLTS;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	441a      	add	r2, r3
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	631a      	str	r2, [r3, #48]	@ 0x30
		voltage_info(buffer);
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	68f8      	ldr	r0, [r7, #12]
 8000e5e:	f7ff fd1b 	bl	8000898 <_ZN7BMS_MOD12voltage_infoEPc>
	}

	for (int i = 0; i < NUM_CELLS; i++) {
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	e00e      	b.n	8000e86 <_ZN7BMS_MOD13query_voltageEmPc+0xe0>
		voltage_acum += cellVoltagemV[i];
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6979      	ldr	r1, [r7, #20]
 8000e72:	312a      	adds	r1, #42	@ 0x2a
 8000e74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000e78:	441a      	add	r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	for (int i = 0; i < NUM_CELLS; i++) {
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	3301      	adds	r3, #1
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	4293      	cmp	r3, r2
 8000e92:	dbe9      	blt.n	8000e68 <_ZN7BMS_MOD13query_voltageEmPc+0xc2>
	}
	return error_volt;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <_ZN7BMS_MOD17query_temperatureEmPc>:
/*********************************************************************************************************
 ** Function name:           query_temperature
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/

int BMS_MOD::query_temperature(uint32_t time, char *buffer) {
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b084      	sub	sp, #16
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	60f8      	str	r0, [r7, #12]
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
// Function for performing a correct behavior
	if (time > time_lim_sent_temps) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE TEMPERATURES
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d912      	bls.n	8000ede <_ZN7BMS_MOD17query_temperatureEmPc+0x3c>
		time_lim_sent_temps += TIME_LIM_SEND_TEMPS;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ec0:	441a      	add	r2, r3
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	641a      	str	r2, [r3, #64]	@ 0x40

		if (module_send_message_CAN2(CANID + 20, message_temperatures, 2)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f103 0014 	add.w	r0, r3, #20
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	334a      	adds	r3, #74	@ 0x4a
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f001 f89d 	bl	8002014 <module_send_message_CAN2>
 8000eda:	4603      	mov	r3, r0
				!= HAL_OK) {
 8000edc:	2b00      	cmp	r3, #0
			//error_temp = BMS_ERROR_TEMP; // If the message is not sended then, error
		}
	}

	if (time_lim_sent_temps > 0 && time > time_lim_received_temps
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <_ZN7BMS_MOD17query_temperatureEmPc+0x4c>
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	429a      	cmp	r2, r3
			&& time - time_lim_received_temps > TIME_LIM_RECV_TEMPS) {
		//error_temp = BMS_ERROR_COMMUNICATION;
	}

	if (TIME_LIM_PLOT_TEMPS > 0 && time > time_lim_plotted_temps) {
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00f      	beq.n	8000f16 <_ZN7BMS_MOD17query_temperatureEmPc+0x74>
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d90a      	bls.n	8000f16 <_ZN7BMS_MOD17query_temperatureEmPc+0x74>
		time_lim_plotted_temps += TIME_LIM_PLOT_TEMPS;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f08:	441a      	add	r2, r3
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	63da      	str	r2, [r3, #60]	@ 0x3c
		temperature_info(buffer);
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	68f8      	ldr	r0, [r7, #12]
 8000f12:	f7ff fd93 	bl	8000a3c <_ZN7BMS_MOD16temperature_infoEPc>
	}

	return error_temp;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0

}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <_ZN7CPU_MODC1Emmi>:

// ********************************************************************************************************
// **Function name:           CPU_MOD
// **Descriptions:            Initialization function of teh class
// ********************************************************************************************************
CPU_MOD::CPU_MOD(uint32_t _ID_send, uint32_t _ID_recv, int _LAG) { /////////////////////////Habia un _LAG=0
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2201      	movs	r2, #1
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2202      	movs	r2, #2
 8000f48:	731a      	strb	r2, [r3, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	611a      	str	r2, [r3, #16]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f56:	615a      	str	r2, [r3, #20]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2264      	movs	r2, #100	@ 0x64
 8000f5c:	619a      	str	r2, [r3, #24]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4a18      	ldr	r2, [pc, #96]	@ (8000fc4 <_ZN7CPU_MODC1Emmi+0xa0>)
 8000f62:	61da      	str	r2, [r3, #28]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	695a      	ldr	r2, [r3, #20]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	621a      	str	r2, [r3, #32]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	625a      	str	r2, [r3, #36]	@ 0x24
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	69da      	ldr	r2, [r3, #28]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2200      	movs	r2, #0
 8000f84:	631a      	str	r2, [r3, #48]	@ 0x30
    CANID_send = _ID_send;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	68ba      	ldr	r2, [r7, #8]
 8000f8a:	601a      	str	r2, [r3, #0]
    CANID_recv = _ID_recv;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	605a      	str	r2, [r3, #4]

    time_lim_plotted += _LAG;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6a1a      	ldr	r2, [r3, #32]
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	441a      	add	r2, r3
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	621a      	str	r2, [r3, #32]
    time_lim_sended += _LAG;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	441a      	add	r2, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	625a      	str	r2, [r3, #36]	@ 0x24
    time_lim_received += _LAG;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	441a      	add	r2, r3
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	000f4240 	.word	0x000f4240

08000fc8 <_ZN7CPU_MOD5parseEmPhm>:

// ********************************************************************************************************
// **Function name:           parse
// **Descriptions:            Function for parsing the received data via CAN protocl
// ********************************************************************************************************
bool CPU_MOD::parse(uint32_t id, uint8_t* buf, uint32_t t) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	603b      	str	r3, [r7, #0]
    if (id == 0x100) {
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fdc:	d131      	bne.n	8001042 <_ZN7CPU_MOD5parseEmPhm+0x7a>
        error = CPU_OK;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
        time_lim_received = t + TIME_LIM_RECV;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	69da      	ldr	r2, [r3, #28]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	441a      	add	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	629a      	str	r2, [r3, #40]	@ 0x28
        DC_BUS = (int)((buf[1]<<8)|buf[0]); // This direction sends the voltage in DC_BUS
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	021b      	lsls	r3, r3, #8
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	7812      	ldrb	r2, [r2, #0]
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	631a      	str	r2, [r3, #48]	@ 0x30
        if (DC_BUS > 280) { //(DC_BUS>0.9*voltage_acum)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 800100a:	dd18      	ble.n	800103e <_ZN7CPU_MOD5parseEmPhm+0x76>
            error = CPU_BUS_LINE_OK;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2202      	movs	r2, #2
 8001010:	609a      	str	r2, [r3, #8]
            if (module_send_message_CAN1(CANID_send, currentState, 1) != HAL_OK){
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	6818      	ldr	r0, [r3, #0]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	330c      	adds	r3, #12
 800101a:	2201      	movs	r2, #1
 800101c:	4619      	mov	r1, r3
 800101e:	f000 ffb7 	bl	8001f90 <module_send_message_CAN1>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	bf14      	ite	ne
 8001028:	2301      	movne	r3, #1
 800102a:	2300      	moveq	r3, #0
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d005      	beq.n	800103e <_ZN7CPU_MOD5parseEmPhm+0x76>
                error = CPU_ERROR_COMMUNICATION;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2201      	movs	r2, #1
 8001036:	609a      	str	r2, [r3, #8]
                print((char*)"error message");
 8001038:	4804      	ldr	r0, [pc, #16]	@ (800104c <_ZN7CPU_MOD5parseEmPhm+0x84>)
 800103a:	f001 f80b 	bl	8002054 <print>
            }

        }
        return true;
 800103e:	2301      	movs	r3, #1
 8001040:	e000      	b.n	8001044 <_ZN7CPU_MOD5parseEmPhm+0x7c>
    }
    return false;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	0800cec4 	.word	0x0800cec4

08001050 <_ZN7CPU_MOD5queryEmPc>:

// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function to check if i need to send a mesage new mesage and the received mesajes interval are within the limits
// ********************************************************************************************************
int CPU_MOD::query(uint32_t time, char* buffer) {
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
	// Function for performing a correct behaivour
    if (time > time_lim_sended) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE BMS
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001060:	68ba      	ldr	r2, [r7, #8]
 8001062:	429a      	cmp	r2, r3
 8001064:	d906      	bls.n	8001074 <_ZN7CPU_MOD5queryEmPc+0x24>
        time_lim_sended += TIME_LIM_SEND;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	441a      	add	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    if (time > time_lim_received)
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001078:	68ba      	ldr	r2, [r7, #8]
 800107a:	429a      	cmp	r2, r3
 800107c:	d902      	bls.n	8001084 <_ZN7CPU_MOD5queryEmPc+0x34>
        error = CPU_ERROR_COMMUNICATION; ///////Cheking if everything is alright each time
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2201      	movs	r2, #1
 8001082:	609a      	str	r2, [r3, #8]

    if (TIME_LIM_PLOT > 0 && time > time_lim_plotted) {
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d00b      	beq.n	80010a4 <_ZN7CPU_MOD5queryEmPc+0x54>
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	68ba      	ldr	r2, [r7, #8]
 8001092:	429a      	cmp	r2, r3
 8001094:	d906      	bls.n	80010a4 <_ZN7CPU_MOD5queryEmPc+0x54>
        time_lim_plotted += TIME_LIM_PLOT;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	6a1a      	ldr	r2, [r3, #32]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	441a      	add	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	621a      	str	r2, [r3, #32]
        //info(buffer);
    }
    return error;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	689b      	ldr	r3, [r3, #8]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <_ZN7CPU_MOD11updateStateEi>:

void CPU_MOD::updateState(int s) {
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
    currentState[0] = s & 0xFF;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	731a      	strb	r2, [r3, #12]
    current_state = s;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	611a      	str	r2, [r3, #16]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <_ZN11Current_MODC1Emi>:

// ********************************************************************************************************
// **Function name:           Current_MOD
// **Descriptions:            Initialization function of current class
// **********************************************************************************************************
Current_MOD::Current_MOD(uint32_t ID, int _C_MAX)
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2200      	movs	r2, #0
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2200      	movs	r2, #0
 80010f4:	721a      	strb	r2, [r3, #8]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2200      	movs	r2, #0
 80010fa:	725a      	strb	r2, [r3, #9]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	615a      	str	r2, [r3, #20]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001120:	621a      	str	r2, [r3, #32]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	22fa      	movs	r2, #250	@ 0xfa
 8001126:	625a      	str	r2, [r3, #36]	@ 0x24
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2232      	movs	r2, #50	@ 0x32
 800112c:	629a      	str	r2, [r3, #40]	@ 0x28
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2232      	movs	r2, #50	@ 0x32
 8001132:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2200      	movs	r2, #0
 8001138:	631a      	str	r2, [r3, #48]	@ 0x30
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2200      	movs	r2, #0
 800113e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2200      	movs	r2, #0
 8001144:	639a      	str	r2, [r3, #56]	@ 0x38
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2200      	movs	r2, #0
 800114a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2200      	movs	r2, #0
 8001150:	641a      	str	r2, [r3, #64]	@ 0x40
{
    CANID = ID;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	68ba      	ldr	r2, [r7, #8]
 8001156:	605a      	str	r2, [r3, #4]
    C_MAX = _C_MAX;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	601a      	str	r2, [r3, #0]
    flag_error_current = 1;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2201      	movs	r2, #1
 8001162:	61da      	str	r2, [r3, #28]
}
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4618      	mov	r0, r3
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	0000      	movs	r0, r0
 8001174:	0000      	movs	r0, r0
	...

08001178 <_ZN11Current_MOD5queryEiPc>:
// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function that transforms the voltage measured by the sensor to its equivalent current
// **********************************************************************************************************
int Current_MOD::query(int time, char* buffer)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08c      	sub	sp, #48	@ 0x30
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
    error = Current_OK;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2200      	movs	r2, #0
 8001188:	631a      	str	r2, [r3, #48]	@ 0x30
    //printValue(Current);
    Current=(2.5-VoltageV)/0.0057; //Sensitivity is 5,7 mv/A
    */

    int Current1,Current2,Current3,Current4,Current5,Current6,Current7;
    Current1 = readAnalogValue();
 800118a:	f000 ffc7 	bl	800211c <readAnalogValue>
 800118e:	eef0 7a40 	vmov.f32	s15, s0
 8001192:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001196:	ee17 3a90 	vmov	r3, s15
 800119a:	62bb      	str	r3, [r7, #40]	@ 0x28
    //HAL_Delay(3);
    Current2 = readAnalogValue();
 800119c:	f000 ffbe 	bl	800211c <readAnalogValue>
 80011a0:	eef0 7a40 	vmov.f32	s15, s0
 80011a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a8:	ee17 3a90 	vmov	r3, s15
 80011ac:	627b      	str	r3, [r7, #36]	@ 0x24
    //HAL_Delay(3);
    Current3 = readAnalogValue();
 80011ae:	f000 ffb5 	bl	800211c <readAnalogValue>
 80011b2:	eef0 7a40 	vmov.f32	s15, s0
 80011b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ba:	ee17 3a90 	vmov	r3, s15
 80011be:	623b      	str	r3, [r7, #32]
    //HAL_Delay(3);
    Current4 = readAnalogValue();
 80011c0:	f000 ffac 	bl	800211c <readAnalogValue>
 80011c4:	eef0 7a40 	vmov.f32	s15, s0
 80011c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011cc:	ee17 3a90 	vmov	r3, s15
 80011d0:	61fb      	str	r3, [r7, #28]
    //HAL_Delay(3);
    Current5 = readAnalogValue();
 80011d2:	f000 ffa3 	bl	800211c <readAnalogValue>
 80011d6:	eef0 7a40 	vmov.f32	s15, s0
 80011da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011de:	ee17 3a90 	vmov	r3, s15
 80011e2:	61bb      	str	r3, [r7, #24]
    //HAL_Delay(3);
    Current6 = readAnalogValue();
 80011e4:	f000 ff9a 	bl	800211c <readAnalogValue>
 80011e8:	eef0 7a40 	vmov.f32	s15, s0
 80011ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f0:	ee17 3a90 	vmov	r3, s15
 80011f4:	617b      	str	r3, [r7, #20]
    //HAL_Delay(3);
    Current7 = readAnalogValue();
 80011f6:	f000 ff91 	bl	800211c <readAnalogValue>
 80011fa:	eef0 7a40 	vmov.f32	s15, s0
 80011fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001202:	ee17 3a90 	vmov	r3, s15
 8001206:	613b      	str	r3, [r7, #16]
    //HAL_Delay(3);

    Current = (Current1+Current2+Current3+Current4+Current5+Current6+Current7)/7;
 8001208:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800120a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120c:	441a      	add	r2, r3
 800120e:	6a3b      	ldr	r3, [r7, #32]
 8001210:	441a      	add	r2, r3
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	441a      	add	r2, r3
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	441a      	add	r2, r3
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	441a      	add	r2, r3
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4413      	add	r3, r2
 8001222:	4a5f      	ldr	r2, [pc, #380]	@ (80013a0 <_ZN11Current_MOD5queryEiPc+0x228>)
 8001224:	fb82 1203 	smull	r1, r2, r2, r3
 8001228:	441a      	add	r2, r3
 800122a:	1092      	asrs	r2, r2, #2
 800122c:	17db      	asrs	r3, r3, #31
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	63da      	str	r2, [r3, #60]	@ 0x3c

    Current = 0.22727 * Current - 489.455 + 0.5;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001238:	ee07 3a90 	vmov	s15, r3
 800123c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001240:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8001388 <_ZN11Current_MOD5queryEiPc+0x210>
 8001244:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001248:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8001390 <_ZN11Current_MOD5queryEiPc+0x218>
 800124c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001250:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001254:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001258:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800125c:	ee17 2a90 	vmov	r2, s15
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	63da      	str	r2, [r3, #60]	@ 0x3c

    //printValue(Current);
    //printValue(Current);

    if(Current > C_MAX*0.8 && Current < C_MAX)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001268:	ee07 3a90 	vmov	s15, r3
 800126c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	ee07 3a90 	vmov	s15, r3
 8001278:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800127c:	ed9f 5b46 	vldr	d5, [pc, #280]	@ 8001398 <_ZN11Current_MOD5queryEiPc+0x220>
 8001280:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001284:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128c:	dd11      	ble.n	80012b2 <_ZN11Current_MOD5queryEiPc+0x13a>
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	da0b      	bge.n	80012b2 <_ZN11Current_MOD5queryEiPc+0x13a>
    {
        if(flag_error_current == 0) module_send_message_NoExtId_CAN1(0x500,message,1); //If current between 80 and 100% of maximun, sends alert
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d107      	bne.n	80012b2 <_ZN11Current_MOD5queryEiPc+0x13a>
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	3308      	adds	r3, #8
 80012a6:	2201      	movs	r2, #1
 80012a8:	4619      	mov	r1, r3
 80012aa:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80012ae:	f000 fe91 	bl	8001fd4 <module_send_message_NoExtId_CAN1>
    }

    if (Current > C_MAX)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	dd18      	ble.n	80012f0 <_ZN11Current_MOD5queryEiPc+0x178>
    {
        if (flag_error_current == 1) {
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d107      	bne.n	80012d6 <_ZN11Current_MOD5queryEiPc+0x15e>
        	module_send_message_NoExtId_CAN1(0x501, message, 2); //If current over maximun, sends alert
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	3308      	adds	r3, #8
 80012ca:	2202      	movs	r2, #2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f240 5001 	movw	r0, #1281	@ 0x501
 80012d2:	f000 fe7f 	bl	8001fd4 <module_send_message_NoExtId_CAN1>
        }

        flag_error_current++;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	61da      	str	r2, [r3, #28]

        if (flag_charger != 1 || flag_charger == 1) //Only cut the AMS if accu not connected to charger, during charging the current control is on charger
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d119      	bne.n	800131c <_ZN11Current_MOD5queryEiPc+0x1a4>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	e015      	b.n	800131c <_ZN11Current_MOD5queryEiPc+0x1a4>
            }
        }
    }
    else
    {
        if (flag_error_current != 0)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	69db      	ldr	r3, [r3, #28]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00e      	beq.n	8001316 <_ZN11Current_MOD5queryEiPc+0x19e>
		for (int i = 0; i < 5; i++)
 80012f8:	2300      	movs	r3, #0
 80012fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012fc:	e008      	b.n	8001310 <_ZN11Current_MOD5queryEiPc+0x198>
		{
			module_send_message_NoExtId_CAN1(0x502, 0, 2); //If current normal, sends green flag
 80012fe:	2202      	movs	r2, #2
 8001300:	2100      	movs	r1, #0
 8001302:	f240 5002 	movw	r0, #1282	@ 0x502
 8001306:	f000 fe65 	bl	8001fd4 <module_send_message_NoExtId_CAN1>
		for (int i = 0; i < 5; i++)
 800130a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800130c:	3301      	adds	r3, #1
 800130e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001312:	2b04      	cmp	r3, #4
 8001314:	ddf3      	ble.n	80012fe <_ZN11Current_MOD5queryEiPc+0x186>
		}
        flag_error_current = 0;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2200      	movs	r2, #0
 800131a:	61da      	str	r2, [r3, #28]
    }


    if (time > time_lim_sended)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001320:	68ba      	ldr	r2, [r7, #8]
 8001322:	429a      	cmp	r2, r3
 8001324:	dd16      	ble.n	8001354 <_ZN11Current_MOD5queryEiPc+0x1dc>
    {
        time_lim_sended += TIME_LIM_SEND;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132e:	441a      	add	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	62da      	str	r2, [r3, #44]	@ 0x2c
        message[0] = 0;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2200      	movs	r2, #0
 8001338:	721a      	strb	r2, [r3, #8]
        message[1] = Current & 0xFF;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800133e:	b2da      	uxtb	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	725a      	strb	r2, [r3, #9]
        module_send_message_NoExtId_CAN1(CANID, message, 2); //Sends current through CAN each interval of ms
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6858      	ldr	r0, [r3, #4]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3308      	adds	r3, #8
 800134c:	2202      	movs	r2, #2
 800134e:	4619      	mov	r1, r3
 8001350:	f000 fe40 	bl	8001fd4 <module_send_message_NoExtId_CAN1>
    }


    if (TIME_LIM_PLOT > 0 && time > time_lim_plotted)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	2b00      	cmp	r3, #0
 800135a:	dd0f      	ble.n	800137c <_ZN11Current_MOD5queryEiPc+0x204>
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001360:	68ba      	ldr	r2, [r7, #8]
 8001362:	429a      	cmp	r2, r3
 8001364:	dd0a      	ble.n	800137c <_ZN11Current_MOD5queryEiPc+0x204>
    {
        time_lim_plotted += TIME_LIM_PLOT;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	441a      	add	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	629a      	str	r2, [r3, #40]	@ 0x28
        info(buffer);
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f000 f814 	bl	80013a4 <_ZN11Current_MOD4infoEPc>

    }

    
    return error;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
}
 8001380:	4618      	mov	r0, r3
 8001382:	3730      	adds	r7, #48	@ 0x30
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	f0ae5365 	.word	0xf0ae5365
 800138c:	3fcd172e 	.word	0x3fcd172e
 8001390:	ae147ae1 	.word	0xae147ae1
 8001394:	407e9747 	.word	0x407e9747
 8001398:	9999999a 	.word	0x9999999a
 800139c:	3fe99999 	.word	0x3fe99999
 80013a0:	92492493 	.word	0x92492493

080013a4 <_ZN11Current_MOD4infoEPc>:

// ********************************************************************************************************
// **Function name:           info
// **Descriptions:            Function for printing the class data
// **********************************************************************************************************
void Current_MOD::info(char* buffer) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
    if (getUARTState() == HAL_UART_STATE_READY) { // Send the message just if there is a serial por connected
 80013ae:	f000 feab 	bl	8002108 <getUARTState>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b20      	cmp	r3, #32
 80013b6:	bf0c      	ite	eq
 80013b8:	2301      	moveq	r3, #1
 80013ba:	2300      	movne	r3, #0
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d043      	beq.n	800144a <_ZN11Current_MOD4infoEPc+0xa6>
		sprintf(buffer, "\n***********************\n");
 80013c2:	4924      	ldr	r1, [pc, #144]	@ (8001454 <_ZN11Current_MOD4infoEPc+0xb0>)
 80013c4:	6838      	ldr	r0, [r7, #0]
 80013c6:	f00a ff95 	bl	800c2f4 <siprintf>
		print(buffer);
 80013ca:	6838      	ldr	r0, [r7, #0]
 80013cc:	f000 fe42 	bl	8002054 <print>
		sprintf(buffer, "         Current\n");
 80013d0:	4921      	ldr	r1, [pc, #132]	@ (8001458 <_ZN11Current_MOD4infoEPc+0xb4>)
 80013d2:	6838      	ldr	r0, [r7, #0]
 80013d4:	f00a ff8e 	bl	800c2f4 <siprintf>
		print(buffer);
 80013d8:	6838      	ldr	r0, [r7, #0]
 80013da:	f000 fe3b 	bl	8002054 <print>
		sprintf(buffer, "***********************\n");
 80013de:	491f      	ldr	r1, [pc, #124]	@ (800145c <_ZN11Current_MOD4infoEPc+0xb8>)
 80013e0:	6838      	ldr	r0, [r7, #0]
 80013e2:	f00a ff87 	bl	800c2f4 <siprintf>
		print(buffer);
 80013e6:	6838      	ldr	r0, [r7, #0]
 80013e8:	f000 fe34 	bl	8002054 <print>
		sprintf(buffer, " - ERROR:     %i\n", error);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f0:	461a      	mov	r2, r3
 80013f2:	491b      	ldr	r1, [pc, #108]	@ (8001460 <_ZN11Current_MOD4infoEPc+0xbc>)
 80013f4:	6838      	ldr	r0, [r7, #0]
 80013f6:	f00a ff7d 	bl	800c2f4 <siprintf>
		print(buffer);
 80013fa:	6838      	ldr	r0, [r7, #0]
 80013fc:	f000 fe2a 	bl	8002054 <print>
		sprintf(buffer, " - CAN ID:    0x%lx\n", CANID);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	461a      	mov	r2, r3
 8001406:	4917      	ldr	r1, [pc, #92]	@ (8001464 <_ZN11Current_MOD4infoEPc+0xc0>)
 8001408:	6838      	ldr	r0, [r7, #0]
 800140a:	f00a ff73 	bl	800c2f4 <siprintf>
		print(buffer);
 800140e:	6838      	ldr	r0, [r7, #0]
 8001410:	f000 fe20 	bl	8002054 <print>
		sprintf(buffer, " - LIM C =    %i A\n", C_MAX);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	461a      	mov	r2, r3
 800141a:	4913      	ldr	r1, [pc, #76]	@ (8001468 <_ZN11Current_MOD4infoEPc+0xc4>)
 800141c:	6838      	ldr	r0, [r7, #0]
 800141e:	f00a ff69 	bl	800c2f4 <siprintf>
		print(buffer);
 8001422:	6838      	ldr	r0, [r7, #0]
 8001424:	f000 fe16 	bl	8002054 <print>
		sprintf(buffer, "-----------------------\n");
 8001428:	4910      	ldr	r1, [pc, #64]	@ (800146c <_ZN11Current_MOD4infoEPc+0xc8>)
 800142a:	6838      	ldr	r0, [r7, #0]
 800142c:	f00a ff62 	bl	800c2f4 <siprintf>
		print(buffer);
 8001430:	6838      	ldr	r0, [r7, #0]
 8001432:	f000 fe0f 	bl	8002054 <print>
		sprintf(buffer, "Current (A): %i\n", Current);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800143a:	461a      	mov	r2, r3
 800143c:	490c      	ldr	r1, [pc, #48]	@ (8001470 <_ZN11Current_MOD4infoEPc+0xcc>)
 800143e:	6838      	ldr	r0, [r7, #0]
 8001440:	f00a ff58 	bl	800c2f4 <siprintf>
		print(buffer);
 8001444:	6838      	ldr	r0, [r7, #0]
 8001446:	f000 fe05 	bl	8002054 <print>

    }
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	0800ced4 	.word	0x0800ced4
 8001458:	0800cef0 	.word	0x0800cef0
 800145c:	0800cf04 	.word	0x0800cf04
 8001460:	0800cf20 	.word	0x0800cf20
 8001464:	0800cf34 	.word	0x0800cf34
 8001468:	0800cf4c 	.word	0x0800cf4c
 800146c:	0800cf60 	.word	0x0800cf60
 8001470:	0800cf7c 	.word	0x0800cf7c

08001474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b085      	sub	sp, #20
 8001478:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147a:	f001 fd2d 	bl	8002ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147e:	f000 f8a5 	bl	80015cc <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001482:	f000 f91f 	bl	80016c4 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001486:	f000 fc5f 	bl	8001d48 <_ZL12MX_GPIO_Initv>
  MX_FDCAN2_Init();
 800148a:	f000 fae5 	bl	8001a58 <_ZL14MX_FDCAN2_Initv>
  MX_FDCAN1_Init();
 800148e:	f000 fa59 	bl	8001944 <_ZL14MX_FDCAN1_Initv>
  MX_USART2_UART_Init();
 8001492:	f000 fbf9 	bl	8001c88 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 8001496:	f000 f949 	bl	800172c <_ZL12MX_ADC1_Initv>
  MX_ADC3_Init();
 800149a:	f000 f9d9 	bl	8001850 <_ZL12MX_ADC3_Initv>
  MX_TIM17_Init();
 800149e:	f000 fb65 	bl	8001b6c <_ZL13MX_TIM17_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80014a2:	2100      	movs	r1, #0
 80014a4:	483e      	ldr	r0, [pc, #248]	@ (80015a0 <main+0x12c>)
 80014a6:	f008 fe3d 	bl	800a124 <HAL_TIM_PWM_Start>



  if (HAL_FDCAN_Start(&hfdcan1) == HAL_OK){
 80014aa:	483e      	ldr	r0, [pc, #248]	@ (80015a4 <main+0x130>)
 80014ac:	f004 f8a8 	bl	8005600 <HAL_FDCAN_Start>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	bf0c      	ite	eq
 80014b6:	2301      	moveq	r3, #1
 80014b8:	2300      	movne	r3, #0
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d002      	beq.n	80014c6 <main+0x52>
	  print((char*)"CAN_ACU iniciado");
 80014c0:	4839      	ldr	r0, [pc, #228]	@ (80015a8 <main+0x134>)
 80014c2:	f000 fdc7 	bl	8002054 <print>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) == HAL_OK)
 80014c6:	2200      	movs	r2, #0
 80014c8:	2101      	movs	r1, #1
 80014ca:	4836      	ldr	r0, [pc, #216]	@ (80015a4 <main+0x130>)
 80014cc:	f004 fa8a 	bl	80059e4 <HAL_FDCAN_ActivateNotification>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	bf0c      	ite	eq
 80014d6:	2301      	moveq	r3, #1
 80014d8:	2300      	movne	r3, #0
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d002      	beq.n	80014e6 <main+0x72>
  {
	  print((char*)"CAN_ACU notification");
 80014e0:	4832      	ldr	r0, [pc, #200]	@ (80015ac <main+0x138>)
 80014e2:	f000 fdb7 	bl	8002054 <print>
  }

  if (HAL_FDCAN_Start(&hfdcan2) == HAL_OK){
 80014e6:	4832      	ldr	r0, [pc, #200]	@ (80015b0 <main+0x13c>)
 80014e8:	f004 f88a 	bl	8005600 <HAL_FDCAN_Start>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	bf0c      	ite	eq
 80014f2:	2301      	moveq	r3, #1
 80014f4:	2300      	movne	r3, #0
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d002      	beq.n	8001502 <main+0x8e>
	  print((char*)"CAN_BMS iniciado");
 80014fc:	482d      	ldr	r0, [pc, #180]	@ (80015b4 <main+0x140>)
 80014fe:	f000 fda9 	bl	8002054 <print>
  }

  if(HAL_ADC_Start(&hadc3) == HAL_OK){
 8001502:	482d      	ldr	r0, [pc, #180]	@ (80015b8 <main+0x144>)
 8001504:	f002 faa8 	bl	8003a58 <HAL_ADC_Start>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	bf0c      	ite	eq
 800150e:	2301      	moveq	r3, #1
 8001510:	2300      	movne	r3, #0
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d002      	beq.n	800151e <main+0xaa>
	  print((char*)"ADC iniciado");
 8001518:	4828      	ldr	r0, [pc, #160]	@ (80015bc <main+0x148>)
 800151a:	f000 fd9b 	bl	8002054 <print>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  select_state();
 800151e:	f000 fe2f 	bl	8002180 <_Z12select_statev>
		  msg_acu.bus = 1;
		  msg_acu.time = HAL_GetTick();
		  parse_state(msg_acu);
	  }*/

	  if (HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader_bms, RxData) == HAL_OK) {
 8001522:	4b27      	ldr	r3, [pc, #156]	@ (80015c0 <main+0x14c>)
 8001524:	4a27      	ldr	r2, [pc, #156]	@ (80015c4 <main+0x150>)
 8001526:	2140      	movs	r1, #64	@ 0x40
 8001528:	4821      	ldr	r0, [pc, #132]	@ (80015b0 <main+0x13c>)
 800152a:	f004 f8ef 	bl	800570c <HAL_FDCAN_GetRxMessage>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	bf0c      	ite	eq
 8001534:	2301      	moveq	r3, #1
 8001536:	2300      	movne	r3, #0
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0ef      	beq.n	800151e <main+0xaa>

		  msg_bms.id = RxHeader_bms.Identifier;
 800153e:	4b21      	ldr	r3, [pc, #132]	@ (80015c4 <main+0x150>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a21      	ldr	r2, [pc, #132]	@ (80015c8 <main+0x154>)
 8001544:	6013      	str	r3, [r2, #0]
		  msg_bms.len = RxHeader_bms.DataLength;
 8001546:	4b1f      	ldr	r3, [pc, #124]	@ (80015c4 <main+0x150>)
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	4b1e      	ldr	r3, [pc, #120]	@ (80015c8 <main+0x154>)
 800154e:	711a      	strb	r2, [r3, #4]
		  for (int i = 0; i < 8; i++) {msg_bms.buf[i] = RxData[i];}
 8001550:	2300      	movs	r3, #0
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	e00c      	b.n	8001570 <main+0xfc>
 8001556:	4a1a      	ldr	r2, [pc, #104]	@ (80015c0 <main+0x14c>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4413      	add	r3, r2
 800155c:	7819      	ldrb	r1, [r3, #0]
 800155e:	4a1a      	ldr	r2, [pc, #104]	@ (80015c8 <main+0x154>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4413      	add	r3, r2
 8001564:	3305      	adds	r3, #5
 8001566:	460a      	mov	r2, r1
 8001568:	701a      	strb	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3301      	adds	r3, #1
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b07      	cmp	r3, #7
 8001574:	ddef      	ble.n	8001556 <main+0xe2>
		  msg_bms.bus = 2;
 8001576:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <main+0x154>)
 8001578:	2202      	movs	r2, #2
 800157a:	611a      	str	r2, [r3, #16]
		  msg_bms.time = HAL_GetTick();
 800157c:	f001 fd32 	bl	8002fe4 <HAL_GetTick>
 8001580:	4603      	mov	r3, r0
 8001582:	4a11      	ldr	r2, [pc, #68]	@ (80015c8 <main+0x154>)
 8001584:	6153      	str	r3, [r2, #20]

		  parse_state(msg_bms);
 8001586:	4b10      	ldr	r3, [pc, #64]	@ (80015c8 <main+0x154>)
 8001588:	466c      	mov	r4, sp
 800158a:	f103 0210 	add.w	r2, r3, #16
 800158e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001592:	e884 0003 	stmia.w	r4, {r0, r1}
 8001596:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001598:	f001 f860 	bl	800265c <_Z11parse_state6CANMsg>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800159c:	e7bf      	b.n	800151e <main+0xaa>
 800159e:	bf00      	nop
 80015a0:	240002a4 	.word	0x240002a4
 80015a4:	24000164 	.word	0x24000164
 80015a8:	0800cf90 	.word	0x0800cf90
 80015ac:	0800cfa4 	.word	0x0800cfa4
 80015b0:	24000204 	.word	0x24000204
 80015b4:	0800cfbc 	.word	0x0800cfbc
 80015b8:	240000f4 	.word	0x240000f4
 80015bc:	0800cfd0 	.word	0x0800cfd0
 80015c0:	2400041c 	.word	0x2400041c
 80015c4:	240003f4 	.word	0x240003f4
 80015c8:	24000488 	.word	0x24000488

080015cc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b09c      	sub	sp, #112	@ 0x70
 80015d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d6:	224c      	movs	r2, #76	@ 0x4c
 80015d8:	2100      	movs	r1, #0
 80015da:	4618      	mov	r0, r3
 80015dc:	f00a feac 	bl	800c338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	2220      	movs	r2, #32
 80015e4:	2100      	movs	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f00a fea6 	bl	800c338 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80015ec:	2002      	movs	r0, #2
 80015ee:	f005 f95b 	bl	80068a8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80015f2:	2300      	movs	r3, #0
 80015f4:	603b      	str	r3, [r7, #0]
 80015f6:	4b32      	ldr	r3, [pc, #200]	@ (80016c0 <_Z18SystemClock_Configv+0xf4>)
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	4a31      	ldr	r2, [pc, #196]	@ (80016c0 <_Z18SystemClock_Configv+0xf4>)
 80015fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001600:	6193      	str	r3, [r2, #24]
 8001602:	4b2f      	ldr	r3, [pc, #188]	@ (80016c0 <_Z18SystemClock_Configv+0xf4>)
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800160e:	bf00      	nop
 8001610:	4b2b      	ldr	r3, [pc, #172]	@ (80016c0 <_Z18SystemClock_Configv+0xf4>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001618:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800161c:	bf14      	ite	ne
 800161e:	2301      	movne	r3, #1
 8001620:	2300      	moveq	r3, #0
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1f3      	bne.n	8001610 <_Z18SystemClock_Configv+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001628:	2301      	movs	r3, #1
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800162c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001630:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001632:	2302      	movs	r3, #2
 8001634:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001636:	2302      	movs	r3, #2
 8001638:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800163a:	2302      	movs	r3, #2
 800163c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 800163e:	232c      	movs	r3, #44	@ 0x2c
 8001640:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001642:	2301      	movs	r3, #1
 8001644:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001646:	2304      	movs	r3, #4
 8001648:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800164a:	2302      	movs	r3, #2
 800164c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800164e:	230c      	movs	r3, #12
 8001650:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001652:	2300      	movs	r3, #0
 8001654:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800165a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800165e:	4618      	mov	r0, r3
 8001660:	f005 f95c 	bl	800691c <HAL_RCC_OscConfig>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	bf14      	ite	ne
 800166a:	2301      	movne	r3, #1
 800166c:	2300      	moveq	r3, #0
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8001674:	f000 fd72 	bl	800215c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001678:	233f      	movs	r3, #63	@ 0x3f
 800167a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800167c:	2303      	movs	r3, #3
 800167e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001684:	2308      	movs	r3, #8
 8001686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001688:	2340      	movs	r3, #64	@ 0x40
 800168a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800168c:	2340      	movs	r3, #64	@ 0x40
 800168e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001690:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001694:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001696:	2340      	movs	r3, #64	@ 0x40
 8001698:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	2103      	movs	r1, #3
 800169e:	4618      	mov	r0, r3
 80016a0:	f005 fd16 	bl	80070d0 <HAL_RCC_ClockConfig>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	bf14      	ite	ne
 80016aa:	2301      	movne	r3, #1
 80016ac:	2300      	moveq	r3, #0
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <_Z18SystemClock_Configv+0xec>
  {
    Error_Handler();
 80016b4:	f000 fd52 	bl	800215c <Error_Handler>
  }
}
 80016b8:	bf00      	nop
 80016ba:	3770      	adds	r7, #112	@ 0x70
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	58024800 	.word	0x58024800

080016c4 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b0ae      	sub	sp, #184	@ 0xb8
 80016c8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016ca:	463b      	mov	r3, r7
 80016cc:	22b8      	movs	r2, #184	@ 0xb8
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f00a fe31 	bl	800c338 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016d6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80016da:	f04f 0300 	mov.w	r3, #0
 80016de:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80016e2:	2302      	movs	r3, #2
 80016e4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80016e6:	2310      	movs	r3, #16
 80016e8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80016ea:	2302      	movs	r3, #2
 80016ec:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80016ee:	2302      	movs	r3, #2
 80016f0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80016f2:	2302      	movs	r3, #2
 80016f4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80016f6:	23c0      	movs	r3, #192	@ 0xc0
 80016f8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001702:	2300      	movs	r3, #0
 8001704:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001708:	463b      	mov	r3, r7
 800170a:	4618      	mov	r0, r3
 800170c:	f006 f86c 	bl	80077e8 <HAL_RCCEx_PeriphCLKConfig>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	bf14      	ite	ne
 8001716:	2301      	movne	r3, #1
 8001718:	2300      	moveq	r3, #0
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <_Z24PeriphCommonClock_Configv+0x60>
  {
    Error_Handler();
 8001720:	f000 fd1c 	bl	800215c <Error_Handler>
  }
}
 8001724:	bf00      	nop
 8001726:	37b8      	adds	r7, #184	@ 0xb8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08c      	sub	sp, #48	@ 0x30
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001732:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800173e:	463b      	mov	r3, r7
 8001740:	2224      	movs	r2, #36	@ 0x24
 8001742:	2100      	movs	r1, #0
 8001744:	4618      	mov	r0, r3
 8001746:	f00a fdf7 	bl	800c338 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800174a:	4b3e      	ldr	r3, [pc, #248]	@ (8001844 <_ZL12MX_ADC1_Initv+0x118>)
 800174c:	4a3e      	ldr	r2, [pc, #248]	@ (8001848 <_ZL12MX_ADC1_Initv+0x11c>)
 800174e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001750:	4b3c      	ldr	r3, [pc, #240]	@ (8001844 <_ZL12MX_ADC1_Initv+0x118>)
 8001752:	2200      	movs	r2, #0
 8001754:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001756:	4b3b      	ldr	r3, [pc, #236]	@ (8001844 <_ZL12MX_ADC1_Initv+0x118>)
 8001758:	2208      	movs	r2, #8
 800175a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800175c:	4b39      	ldr	r3, [pc, #228]	@ (8001844 <_ZL12MX_ADC1_Initv+0x118>)
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001762:	4b38      	ldr	r3, [pc, #224]	@ (8001844 <_ZL12MX_ADC1_Initv+0x118>)
 8001764:	2204      	movs	r2, #4
 8001766:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001768:	4b36      	ldr	r3, [pc, #216]	@ (8001844 <_ZL12MX_ADC1_Initv+0x118>)
 800176a:	2200      	movs	r2, #0
 800176c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800176e:	4b35      	ldr	r3, [pc, #212]	@ (8001844 <_ZL12MX_ADC1_Initv+0x118>)
 8001770:	2200      	movs	r2, #0
 8001772:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001774:	4b33      	ldr	r3, [pc, #204]	@ (8001844 <_ZL12MX_ADC1_Initv+0x118>)
 8001776:	2201      	movs	r2, #1
 8001778:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800177a:	4b32      	ldr	r3, [pc, #200]	@ (8001844 <_ZL12MX_ADC1_Initv+0x118>)
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001782:	4b30      	ldr	r3, [pc, #192]	@ (8001844 <_ZL12MX_ADC1_Initv+0x118>)
 8001784:	2200      	movs	r2, #0
 8001786:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001788:	4b2e      	ldr	r3, [pc, #184]	@ (8001844 <_ZL12MX_ADC1_Initv+0x118>)
 800178a:	2200      	movs	r2, #0
 800178c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800178e:	4b2d      	ldr	r3, [pc, #180]	@ (8001844 <_ZL12MX_ADC1_Initv+0x118>)
 8001790:	2200      	movs	r2, #0
 8001792:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001794:	4b2b      	ldr	r3, [pc, #172]	@ (8001844 <_ZL12MX_ADC1_Initv+0x118>)
 8001796:	2200      	movs	r2, #0
 8001798:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800179a:	4b2a      	ldr	r3, [pc, #168]	@ (8001844 <_ZL12MX_ADC1_Initv+0x118>)
 800179c:	2200      	movs	r2, #0
 800179e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = ENABLE;
 80017a0:	4b28      	ldr	r3, [pc, #160]	@ (8001844 <_ZL12MX_ADC1_Initv+0x118>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 64;
 80017a8:	4b26      	ldr	r3, [pc, #152]	@ (8001844 <_ZL12MX_ADC1_Initv+0x118>)
 80017aa:	2240      	movs	r2, #64	@ 0x40
 80017ac:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 80017ae:	4b25      	ldr	r3, [pc, #148]	@ (8001844 <_ZL12MX_ADC1_Initv+0x118>)
 80017b0:	22c0      	movs	r2, #192	@ 0xc0
 80017b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80017b4:	4b23      	ldr	r3, [pc, #140]	@ (8001844 <_ZL12MX_ADC1_Initv+0x118>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80017ba:	4b22      	ldr	r3, [pc, #136]	@ (8001844 <_ZL12MX_ADC1_Initv+0x118>)
 80017bc:	2201      	movs	r2, #1
 80017be:	655a      	str	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017c0:	4820      	ldr	r0, [pc, #128]	@ (8001844 <_ZL12MX_ADC1_Initv+0x118>)
 80017c2:	f001 ff41 	bl	8003648 <HAL_ADC_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	bf14      	ite	ne
 80017cc:	2301      	movne	r3, #1
 80017ce:	2300      	moveq	r3, #0
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <_ZL12MX_ADC1_Initv+0xae>
  {
    Error_Handler();
 80017d6:	f000 fcc1 	bl	800215c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80017de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e2:	4619      	mov	r1, r3
 80017e4:	4817      	ldr	r0, [pc, #92]	@ (8001844 <_ZL12MX_ADC1_Initv+0x118>)
 80017e6:	f003 fac5 	bl	8004d74 <HAL_ADCEx_MultiModeConfigChannel>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bf14      	ite	ne
 80017f0:	2301      	movne	r3, #1
 80017f2:	2300      	moveq	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <_ZL12MX_ADC1_Initv+0xd2>
  {
    Error_Handler();
 80017fa:	f000 fcaf 	bl	800215c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80017fe:	4b13      	ldr	r3, [pc, #76]	@ (800184c <_ZL12MX_ADC1_Initv+0x120>)
 8001800:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001802:	2306      	movs	r3, #6
 8001804:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800180a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800180e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001810:	2304      	movs	r3, #4
 8001812:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001818:	2300      	movs	r3, #0
 800181a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800181e:	463b      	mov	r3, r7
 8001820:	4619      	mov	r1, r3
 8001822:	4808      	ldr	r0, [pc, #32]	@ (8001844 <_ZL12MX_ADC1_Initv+0x118>)
 8001824:	f002 fb18 	bl	8003e58 <HAL_ADC_ConfigChannel>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	bf14      	ite	ne
 800182e:	2301      	movne	r3, #1
 8001830:	2300      	moveq	r3, #0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <_ZL12MX_ADC1_Initv+0x110>
  {
    Error_Handler();
 8001838:	f000 fc90 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	3730      	adds	r7, #48	@ 0x30
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	24000084 	.word	0x24000084
 8001848:	40022000 	.word	0x40022000
 800184c:	08600004 	.word	0x08600004

08001850 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	@ 0x28
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	2224      	movs	r2, #36	@ 0x24
 800185a:	2100      	movs	r1, #0
 800185c:	4618      	mov	r0, r3
 800185e:	f00a fd6b 	bl	800c338 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001862:	4b35      	ldr	r3, [pc, #212]	@ (8001938 <_ZL12MX_ADC3_Initv+0xe8>)
 8001864:	4a35      	ldr	r2, [pc, #212]	@ (800193c <_ZL12MX_ADC3_Initv+0xec>)
 8001866:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001868:	4b33      	ldr	r3, [pc, #204]	@ (8001938 <_ZL12MX_ADC3_Initv+0xe8>)
 800186a:	2200      	movs	r2, #0
 800186c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 800186e:	4b32      	ldr	r3, [pc, #200]	@ (8001938 <_ZL12MX_ADC3_Initv+0xe8>)
 8001870:	220c      	movs	r2, #12
 8001872:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001874:	4b30      	ldr	r3, [pc, #192]	@ (8001938 <_ZL12MX_ADC3_Initv+0xe8>)
 8001876:	2200      	movs	r2, #0
 8001878:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800187a:	4b2f      	ldr	r3, [pc, #188]	@ (8001938 <_ZL12MX_ADC3_Initv+0xe8>)
 800187c:	2200      	movs	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001880:	4b2d      	ldr	r3, [pc, #180]	@ (8001938 <_ZL12MX_ADC3_Initv+0xe8>)
 8001882:	2204      	movs	r2, #4
 8001884:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001886:	4b2c      	ldr	r3, [pc, #176]	@ (8001938 <_ZL12MX_ADC3_Initv+0xe8>)
 8001888:	2200      	movs	r2, #0
 800188a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800188c:	4b2a      	ldr	r3, [pc, #168]	@ (8001938 <_ZL12MX_ADC3_Initv+0xe8>)
 800188e:	2200      	movs	r2, #0
 8001890:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001892:	4b29      	ldr	r3, [pc, #164]	@ (8001938 <_ZL12MX_ADC3_Initv+0xe8>)
 8001894:	2201      	movs	r2, #1
 8001896:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001898:	4b27      	ldr	r3, [pc, #156]	@ (8001938 <_ZL12MX_ADC3_Initv+0xe8>)
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018a0:	4b25      	ldr	r3, [pc, #148]	@ (8001938 <_ZL12MX_ADC3_Initv+0xe8>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018a6:	4b24      	ldr	r3, [pc, #144]	@ (8001938 <_ZL12MX_ADC3_Initv+0xe8>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80018ac:	4b22      	ldr	r3, [pc, #136]	@ (8001938 <_ZL12MX_ADC3_Initv+0xe8>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80018b4:	4b20      	ldr	r3, [pc, #128]	@ (8001938 <_ZL12MX_ADC3_Initv+0xe8>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80018ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001938 <_ZL12MX_ADC3_Initv+0xe8>)
 80018bc:	2200      	movs	r2, #0
 80018be:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80018c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001938 <_ZL12MX_ADC3_Initv+0xe8>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80018c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001938 <_ZL12MX_ADC3_Initv+0xe8>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80018cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001938 <_ZL12MX_ADC3_Initv+0xe8>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 80018d4:	4b18      	ldr	r3, [pc, #96]	@ (8001938 <_ZL12MX_ADC3_Initv+0xe8>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80018da:	4817      	ldr	r0, [pc, #92]	@ (8001938 <_ZL12MX_ADC3_Initv+0xe8>)
 80018dc:	f001 feb4 	bl	8003648 <HAL_ADC_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	bf14      	ite	ne
 80018e6:	2301      	movne	r3, #1
 80018e8:	2300      	moveq	r3, #0
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 80018f0:	f000 fc34 	bl	800215c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80018f4:	4b12      	ldr	r3, [pc, #72]	@ (8001940 <_ZL12MX_ADC3_Initv+0xf0>)
 80018f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018f8:	2306      	movs	r3, #6
 80018fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001900:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001904:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001906:	2304      	movs	r3, #4
 8001908:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 800190e:	2300      	movs	r3, #0
 8001910:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	4619      	mov	r1, r3
 8001916:	4808      	ldr	r0, [pc, #32]	@ (8001938 <_ZL12MX_ADC3_Initv+0xe8>)
 8001918:	f002 fa9e 	bl	8003e58 <HAL_ADC_ConfigChannel>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	bf14      	ite	ne
 8001922:	2301      	movne	r3, #1
 8001924:	2300      	moveq	r3, #0
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <_ZL12MX_ADC3_Initv+0xe0>
  {
    Error_Handler();
 800192c:	f000 fc16 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001930:	bf00      	nop
 8001932:	3728      	adds	r7, #40	@ 0x28
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	240000f4 	.word	0x240000f4
 800193c:	58026000 	.word	0x58026000
 8001940:	1d500080 	.word	0x1d500080

08001944 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800194a:	4b41      	ldr	r3, [pc, #260]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800194c:	4a41      	ldr	r2, [pc, #260]	@ (8001a54 <_ZL14MX_FDCAN1_Initv+0x110>)
 800194e:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8001950:	4b3f      	ldr	r3, [pc, #252]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001952:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001956:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001958:	4b3d      	ldr	r3, [pc, #244]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800195e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001960:	2200      	movs	r2, #0
 8001962:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001964:	4b3a      	ldr	r3, [pc, #232]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001966:	2200      	movs	r2, #0
 8001968:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800196a:	4b39      	ldr	r3, [pc, #228]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800196c:	2200      	movs	r2, #0
 800196e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 8001970:	4b37      	ldr	r3, [pc, #220]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001972:	2203      	movs	r2, #3
 8001974:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001976:	4b36      	ldr	r3, [pc, #216]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001978:	2201      	movs	r2, #1
 800197a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 800197c:	4b34      	ldr	r3, [pc, #208]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800197e:	220a      	movs	r2, #10
 8001980:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8001982:	4b33      	ldr	r3, [pc, #204]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001984:	2205      	movs	r2, #5
 8001986:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001988:	4b31      	ldr	r3, [pc, #196]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800198a:	2201      	movs	r2, #1
 800198c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800198e:	4b30      	ldr	r3, [pc, #192]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001990:	2201      	movs	r2, #1
 8001992:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001994:	4b2e      	ldr	r3, [pc, #184]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001996:	2201      	movs	r2, #1
 8001998:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800199a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800199c:	2201      	movs	r2, #1
 800199e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80019a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80019a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 5;
 80019ac:	4b28      	ldr	r3, [pc, #160]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019ae:	2205      	movs	r2, #5
 80019b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 80019b2:	4b27      	ldr	r3, [pc, #156]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019b4:	2220      	movs	r2, #32
 80019b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80019b8:	4b25      	ldr	r3, [pc, #148]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019ba:	2204      	movs	r2, #4
 80019bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 80019be:	4b24      	ldr	r3, [pc, #144]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019c0:	2220      	movs	r2, #32
 80019c2:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80019c4:	4b22      	ldr	r3, [pc, #136]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019c6:	2204      	movs	r2, #4
 80019c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 80019ca:	4b21      	ldr	r3, [pc, #132]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80019d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019d2:	2204      	movs	r2, #4
 80019d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 1;
 80019d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019d8:	2201      	movs	r2, #1
 80019da:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 80019dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019de:	2220      	movs	r2, #32
 80019e0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 80019e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019e4:	2220      	movs	r2, #32
 80019e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80019e8:	4b19      	ldr	r3, [pc, #100]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80019ee:	4b18      	ldr	r3, [pc, #96]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019f0:	2204      	movs	r2, #4
 80019f2:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80019f4:	4816      	ldr	r0, [pc, #88]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80019f6:	f003 fbaf 	bl	8005158 <HAL_FDCAN_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	bf14      	ite	ne
 8001a00:	2301      	movne	r3, #1
 8001a02:	2300      	moveq	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <_ZL14MX_FDCAN1_Initv+0xca>
  {
    Error_Handler();
 8001a0a:	f000 fba7 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8001a0e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a12:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001a28:	463b      	mov	r3, r7
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4808      	ldr	r0, [pc, #32]	@ (8001a50 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001a2e:	f003 fd71 	bl	8005514 <HAL_FDCAN_ConfigFilter>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	bf14      	ite	ne
 8001a38:	2301      	movne	r3, #1
 8001a3a:	2300      	moveq	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <_ZL14MX_FDCAN1_Initv+0x102>
  {
    Error_Handler();
 8001a42:	f000 fb8b 	bl	800215c <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 8001a46:	bf00      	nop
 8001a48:	3720      	adds	r7, #32
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	24000164 	.word	0x24000164
 8001a54:	4000a000 	.word	0x4000a000

08001a58 <_ZL14MX_FDCAN2_Initv>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001a5e:	4b41      	ldr	r3, [pc, #260]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a60:	4a41      	ldr	r2, [pc, #260]	@ (8001b68 <_ZL14MX_FDCAN2_Initv+0x110>)
 8001a62:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8001a64:	4b3f      	ldr	r3, [pc, #252]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a6a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001a72:	4b3c      	ldr	r3, [pc, #240]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001a78:	4b3a      	ldr	r3, [pc, #232]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001a7e:	4b39      	ldr	r3, [pc, #228]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 3;
 8001a84:	4b37      	ldr	r3, [pc, #220]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a86:	2203      	movs	r2, #3
 8001a88:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001a8a:	4b36      	ldr	r3, [pc, #216]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 10;
 8001a90:	4b34      	ldr	r3, [pc, #208]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a92:	220a      	movs	r2, #10
 8001a94:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8001a96:	4b33      	ldr	r3, [pc, #204]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a98:	2205      	movs	r2, #5
 8001a9a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001a9c:	4b31      	ldr	r3, [pc, #196]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001aa2:	4b30      	ldr	r3, [pc, #192]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001aa8:	4b2e      	ldr	r3, [pc, #184]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001aae:	4b2d      	ldr	r3, [pc, #180]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8001ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8001aba:	4b2a      	ldr	r3, [pc, #168]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 5;
 8001ac0:	4b28      	ldr	r3, [pc, #160]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ac2:	2205      	movs	r2, #5
 8001ac4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 32;
 8001ac6:	4b27      	ldr	r3, [pc, #156]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ac8:	2220      	movs	r2, #32
 8001aca:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001acc:	4b25      	ldr	r3, [pc, #148]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ace:	2204      	movs	r2, #4
 8001ad0:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 32;
 8001ad2:	4b24      	ldr	r3, [pc, #144]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001ad8:	4b22      	ldr	r3, [pc, #136]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ada:	2204      	movs	r2, #4
 8001adc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 1;
 8001ade:	4b21      	ldr	r3, [pc, #132]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 1;
 8001aea:	4b1e      	ldr	r3, [pc, #120]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 32;
 8001af0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001af2:	2220      	movs	r2, #32
 8001af4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 32;
 8001af6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001af8:	2220      	movs	r2, #32
 8001afa:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001afc:	4b19      	ldr	r3, [pc, #100]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001b02:	4b18      	ldr	r3, [pc, #96]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001b04:	2204      	movs	r2, #4
 8001b06:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001b08:	4816      	ldr	r0, [pc, #88]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001b0a:	f003 fb25 	bl	8005158 <HAL_FDCAN_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	bf14      	ite	ne
 8001b14:	2301      	movne	r3, #1
 8001b16:	2300      	moveq	r3, #0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <_ZL14MX_FDCAN2_Initv+0xca>
  {
    Error_Handler();
 8001b1e:	f000 fb1d 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8001b22:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b26:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001b30:	2301      	movs	r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x10;
 8001b34:	2310      	movs	r3, #16
 8001b36:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x10;
 8001b38:	2310      	movs	r3, #16
 8001b3a:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4808      	ldr	r0, [pc, #32]	@ (8001b64 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001b42:	f003 fce7 	bl	8005514 <HAL_FDCAN_ConfigFilter>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	bf14      	ite	ne
 8001b4c:	2301      	movne	r3, #1
 8001b4e:	2300      	moveq	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <_ZL14MX_FDCAN2_Initv+0x102>
  {
    Error_Handler();
 8001b56:	f000 fb01 	bl	800215c <Error_Handler>
  }
  /* USER CODE END FDCAN2_Init 2 */

}
 8001b5a:	bf00      	nop
 8001b5c:	3720      	adds	r7, #32
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	24000204 	.word	0x24000204
 8001b68:	4000a400 	.word	0x4000a400

08001b6c <_ZL13MX_TIM17_Initv>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b094      	sub	sp, #80	@ 0x50
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b72:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
 8001b80:	611a      	str	r2, [r3, #16]
 8001b82:	615a      	str	r2, [r3, #20]
 8001b84:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b86:	463b      	mov	r3, r7
 8001b88:	2234      	movs	r2, #52	@ 0x34
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f00a fbd3 	bl	800c338 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001b92:	4b3b      	ldr	r3, [pc, #236]	@ (8001c80 <_ZL13MX_TIM17_Initv+0x114>)
 8001b94:	4a3b      	ldr	r2, [pc, #236]	@ (8001c84 <_ZL13MX_TIM17_Initv+0x118>)
 8001b96:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001b98:	4b39      	ldr	r3, [pc, #228]	@ (8001c80 <_ZL13MX_TIM17_Initv+0x114>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9e:	4b38      	ldr	r3, [pc, #224]	@ (8001c80 <_ZL13MX_TIM17_Initv+0x114>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10559;
 8001ba4:	4b36      	ldr	r3, [pc, #216]	@ (8001c80 <_ZL13MX_TIM17_Initv+0x114>)
 8001ba6:	f642 123f 	movw	r2, #10559	@ 0x293f
 8001baa:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bac:	4b34      	ldr	r3, [pc, #208]	@ (8001c80 <_ZL13MX_TIM17_Initv+0x114>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001bb2:	4b33      	ldr	r3, [pc, #204]	@ (8001c80 <_ZL13MX_TIM17_Initv+0x114>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bb8:	4b31      	ldr	r3, [pc, #196]	@ (8001c80 <_ZL13MX_TIM17_Initv+0x114>)
 8001bba:	2280      	movs	r2, #128	@ 0x80
 8001bbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001bbe:	4830      	ldr	r0, [pc, #192]	@ (8001c80 <_ZL13MX_TIM17_Initv+0x114>)
 8001bc0:	f008 f9f8 	bl	8009fb4 <HAL_TIM_Base_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	bf14      	ite	ne
 8001bca:	2301      	movne	r3, #1
 8001bcc:	2300      	moveq	r3, #0
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <_ZL13MX_TIM17_Initv+0x6c>
  {
    Error_Handler();
 8001bd4:	f000 fac2 	bl	800215c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001bd8:	4829      	ldr	r0, [pc, #164]	@ (8001c80 <_ZL13MX_TIM17_Initv+0x114>)
 8001bda:	f008 fa42 	bl	800a062 <HAL_TIM_PWM_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bf14      	ite	ne
 8001be4:	2301      	movne	r3, #1
 8001be6:	2300      	moveq	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <_ZL13MX_TIM17_Initv+0x86>
  {
    Error_Handler();
 8001bee:	f000 fab5 	bl	800215c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bf2:	2360      	movs	r3, #96	@ 0x60
 8001bf4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c06:	2300      	movs	r3, #0
 8001c08:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c0e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c12:	2200      	movs	r2, #0
 8001c14:	4619      	mov	r1, r3
 8001c16:	481a      	ldr	r0, [pc, #104]	@ (8001c80 <_ZL13MX_TIM17_Initv+0x114>)
 8001c18:	f008 fba0 	bl	800a35c <HAL_TIM_PWM_ConfigChannel>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	bf14      	ite	ne
 8001c22:	2301      	movne	r3, #1
 8001c24:	2300      	moveq	r3, #0
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <_ZL13MX_TIM17_Initv+0xc4>
  {
    Error_Handler();
 8001c2c:	f000 fa96 	bl	800215c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c48:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001c52:	463b      	mov	r3, r7
 8001c54:	4619      	mov	r1, r3
 8001c56:	480a      	ldr	r0, [pc, #40]	@ (8001c80 <_ZL13MX_TIM17_Initv+0x114>)
 8001c58:	f009 f83c 	bl	800acd4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	bf14      	ite	ne
 8001c62:	2301      	movne	r3, #1
 8001c64:	2300      	moveq	r3, #0
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <_ZL13MX_TIM17_Initv+0x104>
  {
    Error_Handler();
 8001c6c:	f000 fa76 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001c70:	4803      	ldr	r0, [pc, #12]	@ (8001c80 <_ZL13MX_TIM17_Initv+0x114>)
 8001c72:	f000 ff7b 	bl	8002b6c <HAL_TIM_MspPostInit>

}
 8001c76:	bf00      	nop
 8001c78:	3750      	adds	r7, #80	@ 0x50
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	240002a4 	.word	0x240002a4
 8001c84:	40014800 	.word	0x40014800

08001c88 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c8c:	4b2c      	ldr	r3, [pc, #176]	@ (8001d40 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001c8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001d44 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8001c90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c92:	4b2b      	ldr	r3, [pc, #172]	@ (8001d40 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001c94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c9a:	4b29      	ldr	r3, [pc, #164]	@ (8001d40 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ca0:	4b27      	ldr	r3, [pc, #156]	@ (8001d40 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ca6:	4b26      	ldr	r3, [pc, #152]	@ (8001d40 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cac:	4b24      	ldr	r3, [pc, #144]	@ (8001d40 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001cae:	220c      	movs	r2, #12
 8001cb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cb2:	4b23      	ldr	r3, [pc, #140]	@ (8001d40 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb8:	4b21      	ldr	r3, [pc, #132]	@ (8001d40 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cbe:	4b20      	ldr	r3, [pc, #128]	@ (8001d40 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cc4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d40 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cca:	4b1d      	ldr	r3, [pc, #116]	@ (8001d40 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cd0:	481b      	ldr	r0, [pc, #108]	@ (8001d40 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001cd2:	f009 f88b 	bl	800adec <HAL_UART_Init>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	bf14      	ite	ne
 8001cdc:	2301      	movne	r3, #1
 8001cde:	2300      	moveq	r3, #0
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8001ce6:	f000 fa39 	bl	800215c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cea:	2100      	movs	r1, #0
 8001cec:	4814      	ldr	r0, [pc, #80]	@ (8001d40 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001cee:	f00a fa36 	bl	800c15e <HAL_UARTEx_SetTxFifoThreshold>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	bf14      	ite	ne
 8001cf8:	2301      	movne	r3, #1
 8001cfa:	2300      	moveq	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8001d02:	f000 fa2b 	bl	800215c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d06:	2100      	movs	r1, #0
 8001d08:	480d      	ldr	r0, [pc, #52]	@ (8001d40 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001d0a:	f00a fa66 	bl	800c1da <HAL_UARTEx_SetRxFifoThreshold>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	bf14      	ite	ne
 8001d14:	2301      	movne	r3, #1
 8001d16:	2300      	moveq	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8001d1e:	f000 fa1d 	bl	800215c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001d22:	4807      	ldr	r0, [pc, #28]	@ (8001d40 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001d24:	f00a f9e2 	bl	800c0ec <HAL_UARTEx_DisableFifoMode>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	bf14      	ite	ne
 8001d2e:	2301      	movne	r3, #1
 8001d30:	2300      	moveq	r3, #0
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8001d38:	f000 fa10 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	240002f0 	.word	0x240002f0
 8001d44:	40004400 	.word	0x40004400

08001d48 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08c      	sub	sp, #48	@ 0x30
 8001d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4e:	f107 031c 	add.w	r3, r7, #28
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	60da      	str	r2, [r3, #12]
 8001d5c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d5e:	4b57      	ldr	r3, [pc, #348]	@ (8001ebc <_ZL12MX_GPIO_Initv+0x174>)
 8001d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d64:	4a55      	ldr	r2, [pc, #340]	@ (8001ebc <_ZL12MX_GPIO_Initv+0x174>)
 8001d66:	f043 0320 	orr.w	r3, r3, #32
 8001d6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d6e:	4b53      	ldr	r3, [pc, #332]	@ (8001ebc <_ZL12MX_GPIO_Initv+0x174>)
 8001d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d74:	f003 0320 	and.w	r3, r3, #32
 8001d78:	61bb      	str	r3, [r7, #24]
 8001d7a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d7c:	4b4f      	ldr	r3, [pc, #316]	@ (8001ebc <_ZL12MX_GPIO_Initv+0x174>)
 8001d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d82:	4a4e      	ldr	r2, [pc, #312]	@ (8001ebc <_ZL12MX_GPIO_Initv+0x174>)
 8001d84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d8c:	4b4b      	ldr	r3, [pc, #300]	@ (8001ebc <_ZL12MX_GPIO_Initv+0x174>)
 8001d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9a:	4b48      	ldr	r3, [pc, #288]	@ (8001ebc <_ZL12MX_GPIO_Initv+0x174>)
 8001d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001da0:	4a46      	ldr	r2, [pc, #280]	@ (8001ebc <_ZL12MX_GPIO_Initv+0x174>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001daa:	4b44      	ldr	r3, [pc, #272]	@ (8001ebc <_ZL12MX_GPIO_Initv+0x174>)
 8001dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001db8:	4b40      	ldr	r3, [pc, #256]	@ (8001ebc <_ZL12MX_GPIO_Initv+0x174>)
 8001dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dbe:	4a3f      	ldr	r2, [pc, #252]	@ (8001ebc <_ZL12MX_GPIO_Initv+0x174>)
 8001dc0:	f043 0310 	orr.w	r3, r3, #16
 8001dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dc8:	4b3c      	ldr	r3, [pc, #240]	@ (8001ebc <_ZL12MX_GPIO_Initv+0x174>)
 8001dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd6:	4b39      	ldr	r3, [pc, #228]	@ (8001ebc <_ZL12MX_GPIO_Initv+0x174>)
 8001dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ddc:	4a37      	ldr	r2, [pc, #220]	@ (8001ebc <_ZL12MX_GPIO_Initv+0x174>)
 8001dde:	f043 0302 	orr.w	r3, r3, #2
 8001de2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001de6:	4b35      	ldr	r3, [pc, #212]	@ (8001ebc <_ZL12MX_GPIO_Initv+0x174>)
 8001de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001df4:	4b31      	ldr	r3, [pc, #196]	@ (8001ebc <_ZL12MX_GPIO_Initv+0x174>)
 8001df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dfa:	4a30      	ldr	r2, [pc, #192]	@ (8001ebc <_ZL12MX_GPIO_Initv+0x174>)
 8001dfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e04:	4b2d      	ldr	r3, [pc, #180]	@ (8001ebc <_ZL12MX_GPIO_Initv+0x174>)
 8001e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e12:	4b2a      	ldr	r3, [pc, #168]	@ (8001ebc <_ZL12MX_GPIO_Initv+0x174>)
 8001e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e18:	4a28      	ldr	r2, [pc, #160]	@ (8001ebc <_ZL12MX_GPIO_Initv+0x174>)
 8001e1a:	f043 0308 	orr.w	r3, r3, #8
 8001e1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e22:	4b26      	ldr	r3, [pc, #152]	@ (8001ebc <_ZL12MX_GPIO_Initv+0x174>)
 8001e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	603b      	str	r3, [r7, #0]
 8001e2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, GPIO_PIN_RESET);
 8001e30:	2200      	movs	r2, #0
 8001e32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e36:	4822      	ldr	r0, [pc, #136]	@ (8001ec0 <_ZL12MX_GPIO_Initv+0x178>)
 8001e38:	f004 fd1c 	bl	8006874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin, GPIO_PIN_RESET);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2138      	movs	r1, #56	@ 0x38
 8001e40:	4820      	ldr	r0, [pc, #128]	@ (8001ec4 <_ZL12MX_GPIO_Initv+0x17c>)
 8001e42:	f004 fd17 	bl	8006874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AMS_OK_Pin */
  GPIO_InitStruct.Pin = AMS_OK_Pin;
 8001e46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AMS_OK_GPIO_Port, &GPIO_InitStruct);
 8001e58:	f107 031c 	add.w	r3, r7, #28
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4818      	ldr	r0, [pc, #96]	@ (8001ec0 <_ZL12MX_GPIO_Initv+0x178>)
 8001e60:	f004 fb48 	bl	80064f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITAL1_Pin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin;
 8001e64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIGITAL1_GPIO_Port, &GPIO_InitStruct);
 8001e72:	f107 031c 	add.w	r3, r7, #28
 8001e76:	4619      	mov	r1, r3
 8001e78:	4813      	ldr	r0, [pc, #76]	@ (8001ec8 <_ZL12MX_GPIO_Initv+0x180>)
 8001e7a:	f004 fb3b 	bl	80064f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Charge_Button_Pin */
  GPIO_InitStruct.Pin = Charge_Button_Pin;
 8001e7e:	2380      	movs	r3, #128	@ 0x80
 8001e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e82:	2300      	movs	r3, #0
 8001e84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Charge_Button_GPIO_Port, &GPIO_InitStruct);
 8001e8a:	f107 031c 	add.w	r3, r7, #28
 8001e8e:	4619      	mov	r1, r3
 8001e90:	480e      	ldr	r0, [pc, #56]	@ (8001ecc <_ZL12MX_GPIO_Initv+0x184>)
 8001e92:	f004 fb2f 	bl	80064f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_AIR_N_Pin RELAY_AIR_P_Pin RELAY_PRECHARGE_Pin */
  GPIO_InitStruct.Pin = RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin;
 8001e96:	2338      	movs	r3, #56	@ 0x38
 8001e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ea6:	f107 031c 	add.w	r3, r7, #28
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4805      	ldr	r0, [pc, #20]	@ (8001ec4 <_ZL12MX_GPIO_Initv+0x17c>)
 8001eae:	f004 fb21 	bl	80064f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001eb2:	bf00      	nop
 8001eb4:	3730      	adds	r7, #48	@ 0x30
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	58024400 	.word	0x58024400
 8001ec0:	58021400 	.word	0x58021400
 8001ec4:	58020c00 	.word	0x58020c00
 8001ec8:	58021000 	.word	0x58021000
 8001ecc:	58021800 	.word	0x58021800

08001ed0 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001ed0:	b590      	push	{r4, r7, lr}
 8001ed2:	b087      	sub	sp, #28
 8001ed4:	af02      	add	r7, sp, #8
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d04b      	beq.n	8001f7c <HAL_FDCAN_RxFifo0Callback+0xac>
	{
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_acu, RxData) == HAL_OK)
 8001ee4:	4b27      	ldr	r3, [pc, #156]	@ (8001f84 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001ee6:	4a28      	ldr	r2, [pc, #160]	@ (8001f88 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001ee8:	2140      	movs	r1, #64	@ 0x40
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f003 fc0e 	bl	800570c <HAL_FDCAN_GetRxMessage>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	bf0c      	ite	eq
 8001ef6:	2301      	moveq	r3, #1
 8001ef8:	2300      	movne	r3, #0
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d02e      	beq.n	8001f5e <HAL_FDCAN_RxFifo0Callback+0x8e>
    {
		msg_acu.id = RxHeader_acu.Identifier;
 8001f00:	4b21      	ldr	r3, [pc, #132]	@ (8001f88 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a21      	ldr	r2, [pc, #132]	@ (8001f8c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001f06:	6013      	str	r3, [r2, #0]
		msg_acu.len = RxHeader_acu.DataLength;
 8001f08:	4b1f      	ldr	r3, [pc, #124]	@ (8001f88 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f8c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001f10:	711a      	strb	r2, [r3, #4]
		for (int i = 0; i < 8; i++) {msg_acu.buf[i] = RxData[i];}
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	e00c      	b.n	8001f32 <HAL_FDCAN_RxFifo0Callback+0x62>
 8001f18:	4a1a      	ldr	r2, [pc, #104]	@ (8001f84 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	7819      	ldrb	r1, [r3, #0]
 8001f20:	4a1a      	ldr	r2, [pc, #104]	@ (8001f8c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4413      	add	r3, r2
 8001f26:	3305      	adds	r3, #5
 8001f28:	460a      	mov	r2, r1
 8001f2a:	701a      	strb	r2, [r3, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2b07      	cmp	r3, #7
 8001f36:	ddef      	ble.n	8001f18 <HAL_FDCAN_RxFifo0Callback+0x48>
		msg_acu.bus = 1;
 8001f38:	4b14      	ldr	r3, [pc, #80]	@ (8001f8c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	611a      	str	r2, [r3, #16]
		msg_acu.time = HAL_GetTick();
 8001f3e:	f001 f851 	bl	8002fe4 <HAL_GetTick>
 8001f42:	4603      	mov	r3, r0
 8001f44:	4a11      	ldr	r2, [pc, #68]	@ (8001f8c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001f46:	6153      	str	r3, [r2, #20]
		parse_state(msg_acu);
 8001f48:	4b10      	ldr	r3, [pc, #64]	@ (8001f8c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001f4a:	466c      	mov	r4, sp
 8001f4c:	f103 0210 	add.w	r2, r3, #16
 8001f50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f54:	e884 0003 	stmia.w	r4, {r0, r1}
 8001f58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f5a:	f000 fb7f 	bl	800265c <_Z11parse_state6CANMsg>

    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2101      	movs	r1, #1
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f003 fd3e 	bl	80059e4 <HAL_FDCAN_ActivateNotification>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	bf14      	ite	ne
 8001f6e:	2301      	movne	r3, #1
 8001f70:	2300      	moveq	r3, #0
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <HAL_FDCAN_RxFifo0Callback+0xac>
    {
      /* Notification Error */
      Error_Handler();
 8001f78:	f000 f8f0 	bl	800215c <Error_Handler>
    }
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd90      	pop	{r4, r7, pc}
 8001f84:	2400041c 	.word	0x2400041c
 8001f88:	240003cc 	.word	0x240003cc
 8001f8c:	240004a0 	.word	0x240004a0

08001f90 <module_send_message_CAN1>:

//extended ID
HAL_StatusTypeDef module_send_message_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 8001f9e:	4a0b      	ldr	r2, [pc, #44]	@ (8001fcc <module_send_message_CAN1+0x3c>)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_EXTENDED_ID;
 8001fa4:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <module_send_message_CAN1+0x3c>)
 8001fa6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001faa:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	4a07      	ldr	r2, [pc, #28]	@ (8001fcc <module_send_message_CAN1+0x3c>)
 8001fb0:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	4905      	ldr	r1, [pc, #20]	@ (8001fcc <module_send_message_CAN1+0x3c>)
 8001fb6:	4806      	ldr	r0, [pc, #24]	@ (8001fd0 <module_send_message_CAN1+0x40>)
 8001fb8:	f003 fb4d 	bl	8005656 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	75fb      	strb	r3, [r7, #23]

	return status;
 8001fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	24000384 	.word	0x24000384
 8001fd0:	24000164 	.word	0x24000164

08001fd4 <module_send_message_NoExtId_CAN1>:

//NO extended ID
HAL_StatusTypeDef module_send_message_NoExtId_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800200c <module_send_message_NoExtId_CAN1+0x38>)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_STANDARD_ID;
 8001fe8:	4b08      	ldr	r3, [pc, #32]	@ (800200c <module_send_message_NoExtId_CAN1+0x38>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	4a06      	ldr	r2, [pc, #24]	@ (800200c <module_send_message_NoExtId_CAN1+0x38>)
 8001ff2:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	4905      	ldr	r1, [pc, #20]	@ (800200c <module_send_message_NoExtId_CAN1+0x38>)
 8001ff8:	4805      	ldr	r0, [pc, #20]	@ (8002010 <module_send_message_NoExtId_CAN1+0x3c>)
 8001ffa:	f003 fb2c 	bl	8005656 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001ffe:	4603      	mov	r3, r0
 8002000:	75fb      	strb	r3, [r7, #23]

	return status;
 8002002:	7dfb      	ldrb	r3, [r7, #23]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	24000384 	.word	0x24000384
 8002010:	24000164 	.word	0x24000164

08002014 <module_send_message_CAN2>:

HAL_StatusTypeDef module_send_message_CAN2(uint32_t id, uint8_t* data, uint8_t length) {
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	4613      	mov	r3, r2
 8002020:	71fb      	strb	r3, [r7, #7]
	TxHeader_bms.Identifier = id;
 8002022:	4a0a      	ldr	r2, [pc, #40]	@ (800204c <module_send_message_CAN2+0x38>)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6013      	str	r3, [r2, #0]
	TxHeader_bms.IdType = FDCAN_STANDARD_ID;
 8002028:	4b08      	ldr	r3, [pc, #32]	@ (800204c <module_send_message_CAN2+0x38>)
 800202a:	2200      	movs	r2, #0
 800202c:	605a      	str	r2, [r3, #4]
	TxHeader_bms.DataLength = length;
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	4a06      	ldr	r2, [pc, #24]	@ (800204c <module_send_message_CAN2+0x38>)
 8002032:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_bms, data);
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	4905      	ldr	r1, [pc, #20]	@ (800204c <module_send_message_CAN2+0x38>)
 8002038:	4805      	ldr	r0, [pc, #20]	@ (8002050 <module_send_message_CAN2+0x3c>)
 800203a:	f003 fb0c 	bl	8005656 <HAL_FDCAN_AddMessageToTxFifoQ>
 800203e:	4603      	mov	r3, r0
 8002040:	75fb      	strb	r3, [r7, #23]

	return status;
 8002042:	7dfb      	ldrb	r3, [r7, #23]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	240003a8 	.word	0x240003a8
 8002050:	24000204 	.word	0x24000204

08002054 <print>:

void print(char uart_buffer[]){
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	4909      	ldr	r1, [pc, #36]	@ (8002084 <print+0x30>)
 8002060:	4809      	ldr	r0, [pc, #36]	@ (8002088 <print+0x34>)
 8002062:	f00a f947 	bl	800c2f4 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8002066:	4808      	ldr	r0, [pc, #32]	@ (8002088 <print+0x34>)
 8002068:	f7fe f952 	bl	8000310 <strlen>
 800206c:	4603      	mov	r3, r0
 800206e:	b29a      	uxth	r2, r3
 8002070:	f04f 33ff 	mov.w	r3, #4294967295
 8002074:	4904      	ldr	r1, [pc, #16]	@ (8002088 <print+0x34>)
 8002076:	4805      	ldr	r0, [pc, #20]	@ (800208c <print+0x38>)
 8002078:	f008 ff08 	bl	800ae8c <HAL_UART_Transmit>
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	0800cfe0 	.word	0x0800cfe0
 8002088:	24000424 	.word	0x24000424
 800208c:	240002f0 	.word	0x240002f0

08002090 <printnl>:

void printnl(char uart_buffer[]){
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s", uart_buffer);
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	4909      	ldr	r1, [pc, #36]	@ (80020c0 <printnl+0x30>)
 800209c:	4809      	ldr	r0, [pc, #36]	@ (80020c4 <printnl+0x34>)
 800209e:	f00a f929 	bl	800c2f4 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 80020a2:	4808      	ldr	r0, [pc, #32]	@ (80020c4 <printnl+0x34>)
 80020a4:	f7fe f934 	bl	8000310 <strlen>
 80020a8:	4603      	mov	r3, r0
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	f04f 33ff 	mov.w	r3, #4294967295
 80020b0:	4904      	ldr	r1, [pc, #16]	@ (80020c4 <printnl+0x34>)
 80020b2:	4805      	ldr	r0, [pc, #20]	@ (80020c8 <printnl+0x38>)
 80020b4:	f008 feea 	bl	800ae8c <HAL_UART_Transmit>
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	0800cfe8 	.word	0x0800cfe8
 80020c4:	24000424 	.word	0x24000424
 80020c8:	240002f0 	.word	0x240002f0

080020cc <printValue>:

void printValue(int value){
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	4909      	ldr	r1, [pc, #36]	@ (80020fc <printValue+0x30>)
 80020d8:	4809      	ldr	r0, [pc, #36]	@ (8002100 <printValue+0x34>)
 80020da:	f00a f90b 	bl	800c2f4 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 80020de:	4808      	ldr	r0, [pc, #32]	@ (8002100 <printValue+0x34>)
 80020e0:	f7fe f916 	bl	8000310 <strlen>
 80020e4:	4603      	mov	r3, r0
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	f04f 33ff 	mov.w	r3, #4294967295
 80020ec:	4904      	ldr	r1, [pc, #16]	@ (8002100 <printValue+0x34>)
 80020ee:	4805      	ldr	r0, [pc, #20]	@ (8002104 <printValue+0x38>)
 80020f0:	f008 fecc 	bl	800ae8c <HAL_UART_Transmit>
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	0800cfec 	.word	0x0800cfec
 8002100:	24000424 	.word	0x24000424
 8002104:	240002f0 	.word	0x240002f0

08002108 <getUARTState>:

HAL_UART_StateTypeDef getUARTState(){
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
	return HAL_UART_GetState(&huart2);
 800210c:	4802      	ldr	r0, [pc, #8]	@ (8002118 <getUARTState+0x10>)
 800210e:	f008 ff4b 	bl	800afa8 <HAL_UART_GetState>
 8002112:	4603      	mov	r3, r0
}
 8002114:	4618      	mov	r0, r3
 8002116:	bd80      	pop	{r7, pc}
 8002118:	240002f0 	.word	0x240002f0

0800211c <readAnalogValue>:
	HAL_ADC_Stop(&hadc1);
	printValue(current);
	return current;
}

float readAnalogValue(void){
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
	analogValue = HAL_ADC_GetValue(&hadc3);
	HAL_ADC_Stop(&hadc3);
	return analogValue;*/


	HAL_ADC_Start(&hadc1);
 8002122:	480d      	ldr	r0, [pc, #52]	@ (8002158 <readAnalogValue+0x3c>)
 8002124:	f001 fc98 	bl	8003a58 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002128:	f04f 31ff 	mov.w	r1, #4294967295
 800212c:	480a      	ldr	r0, [pc, #40]	@ (8002158 <readAnalogValue+0x3c>)
 800212e:	f001 fd91 	bl	8003c54 <HAL_ADC_PollForConversion>

	uint16_t adc_value;
	int current;

	adc_value = HAL_ADC_GetValue(&hadc1);
 8002132:	4809      	ldr	r0, [pc, #36]	@ (8002158 <readAnalogValue+0x3c>)
 8002134:	f001 fe82 	bl	8003e3c <HAL_ADC_GetValue>
 8002138:	4603      	mov	r3, r0
 800213a:	80fb      	strh	r3, [r7, #6]
	//valor minimo = 2100

	HAL_ADC_Stop(&hadc1);
 800213c:	4806      	ldr	r0, [pc, #24]	@ (8002158 <readAnalogValue+0x3c>)
 800213e:	f001 fd55 	bl	8003bec <HAL_ADC_Stop>
	return adc_value;
 8002142:	88fb      	ldrh	r3, [r7, #6]
 8002144:	ee07 3a90 	vmov	s15, r3
 8002148:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 800214c:	eeb0 0a67 	vmov.f32	s0, s15
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	24000084 	.word	0x24000084

0800215c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002160:	b672      	cpsid	i
}
 8002162:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002164:	bf00      	nop
 8002166:	e7fd      	b.n	8002164 <Error_Handler+0x8>

08002168 <_Z9get_statev>:
/*********************************************************************************************************
 ** Function name:           get_state
 ** Descriptions:            get the current state
 *********************************************************************************************************/

STATE get_state() {
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
    return state;
 800216c:	4b03      	ldr	r3, [pc, #12]	@ (800217c <_Z9get_statev+0x14>)
 800216e:	781b      	ldrb	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	24000d08 	.word	0x24000d08

08002180 <_Z12select_statev>:

/*********************************************************************************************************
 ** Function name:           select_state
 ** Descriptions:            check what should they do on the state machine
 *********************************************************************************************************/
void select_state() {
 8002180:	b580      	push	{r7, lr}
 8002182:	b08e      	sub	sp, #56	@ 0x38
 8002184:	af00      	add	r7, sp, #0
	int state_air_n = 0;     // 0 means open, 1 closed     // Turn on SEVCON
 8002186:	2300      	movs	r3, #0
 8002188:	637b      	str	r3, [r7, #52]	@ 0x34
	int state_air_p = 0;     // 0 means open, 1 closed     // Energize HV relay
 800218a:	2300      	movs	r3, #0
 800218c:	633b      	str	r3, [r7, #48]	@ 0x30
	int state_precharge = 0; // 0 means open, 1 closed
 800218e:	2300      	movs	r3, #0
 8002190:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int flag_cpu = CPU_ERROR_COMMUNICATION;
 8002192:	2301      	movs	r3, #1
 8002194:	61fb      	str	r3, [r7, #28]
	int flag_current = Current_ERROR_Comunication;
 8002196:	2302      	movs	r3, #2
 8002198:	61bb      	str	r3, [r7, #24]


	int gpio_charge = HAL_GPIO_ReadPin(Charge_Button_GPIO_Port, Charge_Button_Pin); // pull-up: 1 = charge started
 800219a:	2180      	movs	r1, #128	@ 0x80
 800219c:	48a5      	ldr	r0, [pc, #660]	@ (8002434 <_Z12select_statev+0x2b4>)
 800219e:	f004 fb51 	bl	8006844 <HAL_GPIO_ReadPin>
 80021a2:	4603      	mov	r3, r0
 80021a4:	617b      	str	r3, [r7, #20]
	 * 1 ms interruption => 1ms * 264MHz = 264000
	 * prescalado 264 (por ejemplo)
	 * timer count = 264000 / 264 = 1000
	 */

	uint32_t time = HAL_GetTick();
 80021a6:	f000 ff1d 	bl	8002fe4 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]
	int time_s = HAL_GetTick();
 80021ac:	f000 ff1a 	bl	8002fe4 <HAL_GetTick>
 80021b0:	4603      	mov	r3, r0
 80021b2:	60fb      	str	r3, [r7, #12]



	CPU.voltage_acum = 0; // For precharge
 80021b4:	4ba0      	ldr	r3, [pc, #640]	@ (8002438 <_Z12select_statev+0x2b8>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	62da      	str	r2, [r3, #44]	@ 0x2c


	MIN_V = 4200; /// I reset the number each cycle cause if the voltages goes up again I wanna has it risen again on telemetry
 80021ba:	4ba0      	ldr	r3, [pc, #640]	@ (800243c <_Z12select_statev+0x2bc>)
 80021bc:	f241 0268 	movw	r2, #4200	@ 0x1068
 80021c0:	601a      	str	r2, [r3, #0]
	MAX_T = 0;
 80021c2:	4b9f      	ldr	r3, [pc, #636]	@ (8002440 <_Z12select_statev+0x2c0>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 80021c8:	2300      	movs	r3, #0
 80021ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021cc:	e08d      	b.n	80022ea <_Z12select_statev+0x16a>
		BMS[i].voltage_acum = 0;// For precharge
 80021ce:	4a9d      	ldr	r2, [pc, #628]	@ (8002444 <_Z12select_statev+0x2c4>)
 80021d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d2:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 80021d6:	fb01 f303 	mul.w	r3, r1, r3
 80021da:	4413      	add	r3, r2
 80021dc:	3388      	adds	r3, #136	@ 0x88
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]


		if (BMS[i].query_voltage(time, buffer) != BMS_OK) //I ask the BMS about voltages and cheking their states
 80021e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e4:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 80021e8:	fb02 f303 	mul.w	r3, r2, r3
 80021ec:	4a95      	ldr	r2, [pc, #596]	@ (8002444 <_Z12select_statev+0x2c4>)
 80021ee:	4413      	add	r3, r2
 80021f0:	4a95      	ldr	r2, [pc, #596]	@ (8002448 <_Z12select_statev+0x2c8>)
 80021f2:	6939      	ldr	r1, [r7, #16]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe fdd6 	bl	8000da6 <_ZN7BMS_MOD13query_voltageEmPc>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
		{
			//state = error;
			//flag_ams_ok = 0;
		}

		CPU.voltage_acum += BMS[i].voltage_acum; // For precharge
 80021fe:	4b8e      	ldr	r3, [pc, #568]	@ (8002438 <_Z12select_statev+0x2b8>)
 8002200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002202:	4990      	ldr	r1, [pc, #576]	@ (8002444 <_Z12select_statev+0x2c4>)
 8002204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002206:	f44f 70c6 	mov.w	r0, #396	@ 0x18c
 800220a:	fb00 f303 	mul.w	r3, r0, r3
 800220e:	440b      	add	r3, r1
 8002210:	3388      	adds	r3, #136	@ 0x88
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4413      	add	r3, r2
 8002216:	4a88      	ldr	r2, [pc, #544]	@ (8002438 <_Z12select_statev+0x2b8>)
 8002218:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if (BMS[i].MIN_V < MIN_V)
 800221a:	4a8a      	ldr	r2, [pc, #552]	@ (8002444 <_Z12select_statev+0x2c4>)
 800221c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800221e:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 8002222:	fb01 f303 	mul.w	r3, r1, r3
 8002226:	4413      	add	r3, r2
 8002228:	338c      	adds	r3, #140	@ 0x8c
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4b83      	ldr	r3, [pc, #524]	@ (800243c <_Z12select_statev+0x2bc>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	da0a      	bge.n	800224a <_Z12select_statev+0xca>
			MIN_V = BMS[i].MIN_V; //Checking the minimun voltage of cell in the whole battery
 8002234:	4a83      	ldr	r2, [pc, #524]	@ (8002444 <_Z12select_statev+0x2c4>)
 8002236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002238:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 800223c:	fb01 f303 	mul.w	r3, r1, r3
 8002240:	4413      	add	r3, r2
 8002242:	338c      	adds	r3, #140	@ 0x8c
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a7d      	ldr	r2, [pc, #500]	@ (800243c <_Z12select_statev+0x2bc>)
 8002248:	6013      	str	r3, [r2, #0]

		int current_value = readAnalogValue();
 800224a:	f7ff ff67 	bl	800211c <readAnalogValue>
 800224e:	eef0 7a40 	vmov.f32	s15, s0
 8002252:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002256:	ee17 3a90 	vmov	r3, s15
 800225a:	607b      	str	r3, [r7, #4]
		//printValue(current_value);
		if(MIN_V == 0 || current_value < 50 || BMS[i].query_voltage(time, buffer) != BMS_OK){
 800225c:	4b77      	ldr	r3, [pc, #476]	@ (800243c <_Z12select_statev+0x2bc>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d011      	beq.n	8002288 <_Z12select_statev+0x108>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b31      	cmp	r3, #49	@ 0x31
 8002268:	dd0e      	ble.n	8002288 <_Z12select_statev+0x108>
 800226a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800226c:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 8002270:	fb02 f303 	mul.w	r3, r2, r3
 8002274:	4a73      	ldr	r2, [pc, #460]	@ (8002444 <_Z12select_statev+0x2c4>)
 8002276:	4413      	add	r3, r2
 8002278:	4a73      	ldr	r2, [pc, #460]	@ (8002448 <_Z12select_statev+0x2c8>)
 800227a:	6939      	ldr	r1, [r7, #16]
 800227c:	4618      	mov	r0, r3
 800227e:	f7fe fd92 	bl	8000da6 <_ZN7BMS_MOD13query_voltageEmPc>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <_Z12select_statev+0x10c>
 8002288:	2301      	movs	r3, #1
 800228a:	e000      	b.n	800228e <_Z12select_statev+0x10e>
 800228c:	2300      	movs	r3, #0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d102      	bne.n	8002298 <_Z12select_statev+0x118>
			//printValue(MIN_V);
			//printValue(current_value);
			//printValue(BMS[i].query_voltage(time, buffer));
		}
		else{
			flag_ams_ok = 1;
 8002292:	4b6e      	ldr	r3, [pc, #440]	@ (800244c <_Z12select_statev+0x2cc>)
 8002294:	2201      	movs	r2, #1
 8002296:	601a      	str	r2, [r3, #0]
		}

		if (BMS[i].query_temperature(time, buffer) != Temperatures_OK){
 8002298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800229a:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	4a68      	ldr	r2, [pc, #416]	@ (8002444 <_Z12select_statev+0x2c4>)
 80022a4:	4413      	add	r3, r2
 80022a6:	4a68      	ldr	r2, [pc, #416]	@ (8002448 <_Z12select_statev+0x2c8>)
 80022a8:	6939      	ldr	r1, [r7, #16]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe fdf9 	bl	8000ea2 <_ZN7BMS_MOD17query_temperatureEmPc>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
			//state = error; DESCOMENTA
		}

		if (BMS[i].MAX_T > MAX_T)
 80022b4:	4a63      	ldr	r2, [pc, #396]	@ (8002444 <_Z12select_statev+0x2c4>)
 80022b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b8:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 80022bc:	fb01 f303 	mul.w	r3, r1, r3
 80022c0:	4413      	add	r3, r2
 80022c2:	339c      	adds	r3, #156	@ 0x9c
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	4b5e      	ldr	r3, [pc, #376]	@ (8002440 <_Z12select_statev+0x2c0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	dd0a      	ble.n	80022e4 <_Z12select_statev+0x164>
			MAX_T = BMS[i].MAX_T;
 80022ce:	4a5d      	ldr	r2, [pc, #372]	@ (8002444 <_Z12select_statev+0x2c4>)
 80022d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d2:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 80022d6:	fb01 f303 	mul.w	r3, r1, r3
 80022da:	4413      	add	r3, r2
 80022dc:	339c      	adds	r3, #156	@ 0x9c
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a57      	ldr	r2, [pc, #348]	@ (8002440 <_Z12select_statev+0x2c0>)
 80022e2:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < BMS_N; i++) {
 80022e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e6:	3301      	adds	r3, #1
 80022e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022ea:	4b59      	ldr	r3, [pc, #356]	@ (8002450 <_Z12select_statev+0x2d0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80022f0:	429a      	cmp	r2, r3
 80022f2:	f6ff af6c 	blt.w	80021ce <_Z12select_statev+0x4e>
	}

	if (time_s > time_sending_minV + 500) {
 80022f6:	4b57      	ldr	r3, [pc, #348]	@ (8002454 <_Z12select_statev+0x2d4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	429a      	cmp	r2, r3
 8002302:	dd23      	ble.n	800234c <_Z12select_statev+0x1cc>
		message_MINV[1] = MIN_V & 0xFF;
 8002304:	4b4d      	ldr	r3, [pc, #308]	@ (800243c <_Z12select_statev+0x2bc>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4b53      	ldr	r3, [pc, #332]	@ (8002458 <_Z12select_statev+0x2d8>)
 800230c:	705a      	strb	r2, [r3, #1]
		message_MINV[0] = (MIN_V >> 8) & 0xFF;
 800230e:	4b4b      	ldr	r3, [pc, #300]	@ (800243c <_Z12select_statev+0x2bc>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	121b      	asrs	r3, r3, #8
 8002314:	b2da      	uxtb	r2, r3
 8002316:	4b50      	ldr	r3, [pc, #320]	@ (8002458 <_Z12select_statev+0x2d8>)
 8002318:	701a      	strb	r2, [r3, #0]
		if (BMS[0].flag_charger != 1) {
 800231a:	4b4a      	ldr	r3, [pc, #296]	@ (8002444 <_Z12select_statev+0x2c4>)
 800231c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002320:	2b01      	cmp	r3, #1
 8002322:	d010      	beq.n	8002346 <_Z12select_statev+0x1c6>
			if (module_send_message_CAN1(BMS_ID, message_MINV, 2) != HAL_OK)
 8002324:	2202      	movs	r2, #2
 8002326:	494c      	ldr	r1, [pc, #304]	@ (8002458 <_Z12select_statev+0x2d8>)
 8002328:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800232c:	f7ff fe30 	bl	8001f90 <module_send_message_CAN1>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	bf14      	ite	ne
 8002336:	2301      	movne	r3, #1
 8002338:	2300      	moveq	r3, #0
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d002      	beq.n	8002346 <_Z12select_statev+0x1c6>
				print((char*) "Error al enviar tension minima"); //Sending the message through telemtry each 500 ms
 8002340:	4846      	ldr	r0, [pc, #280]	@ (800245c <_Z12select_statev+0x2dc>)
 8002342:	f7ff fe87 	bl	8002054 <print>
		}
		time_sending_minV = time_s;
 8002346:	4a43      	ldr	r2, [pc, #268]	@ (8002454 <_Z12select_statev+0x2d4>)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6013      	str	r3, [r2, #0]
	}
	for (int i = 0; i < BMS_N; i++) {
 800234c:	2300      	movs	r3, #0
 800234e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002350:	e00d      	b.n	800236e <_Z12select_statev+0x1ee>
		BMS[i].BALANCING_V = MIN_V; //Here I say I wanna balance all the cells in the battery to the minimun
 8002352:	4b3a      	ldr	r3, [pc, #232]	@ (800243c <_Z12select_statev+0x2bc>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	493b      	ldr	r1, [pc, #236]	@ (8002444 <_Z12select_statev+0x2c4>)
 8002358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235a:	f44f 70c6 	mov.w	r0, #396	@ 0x18c
 800235e:	fb00 f303 	mul.w	r3, r0, r3
 8002362:	440b      	add	r3, r1
 8002364:	3390      	adds	r3, #144	@ 0x90
 8002366:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 8002368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236a:	3301      	adds	r3, #1
 800236c:	627b      	str	r3, [r7, #36]	@ 0x24
 800236e:	4b38      	ldr	r3, [pc, #224]	@ (8002450 <_Z12select_statev+0x2d0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002374:	429a      	cmp	r2, r3
 8002376:	dbec      	blt.n	8002352 <_Z12select_statev+0x1d2>

	}



	flag_cpu = CPU.query(time, buffer); //Asking the rest of the car how is it
 8002378:	4a33      	ldr	r2, [pc, #204]	@ (8002448 <_Z12select_statev+0x2c8>)
 800237a:	6939      	ldr	r1, [r7, #16]
 800237c:	482e      	ldr	r0, [pc, #184]	@ (8002438 <_Z12select_statev+0x2b8>)
 800237e:	f7fe fe67 	bl	8001050 <_ZN7CPU_MOD5queryEmPc>
 8002382:	61f8      	str	r0, [r7, #28]
	//flag_cpu = CPU_OK;

	flag_current = current.query(time, buffer); //asking current how is it
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4a30      	ldr	r2, [pc, #192]	@ (8002448 <_Z12select_statev+0x2c8>)
 8002388:	4619      	mov	r1, r3
 800238a:	4835      	ldr	r0, [pc, #212]	@ (8002460 <_Z12select_statev+0x2e0>)
 800238c:	f7fe fef4 	bl	8001178 <_ZN11Current_MOD5queryEiPc>
 8002390:	61b8      	str	r0, [r7, #24]
	printValue(state);
	print((char*)"voltage acu");
	printValue(CPU.voltage_acum);
	print((char*)"dc bus");
	printValue(CPU.DC_BUS);*/
	printValue(state);
 8002392:	4b34      	ldr	r3, [pc, #208]	@ (8002464 <_Z12select_statev+0x2e4>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff fe98 	bl	80020cc <printValue>
	switch (state) {
 800239c:	4b31      	ldr	r3, [pc, #196]	@ (8002464 <_Z12select_statev+0x2e4>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b05      	cmp	r3, #5
 80023a2:	f200 810b 	bhi.w	80025bc <_Z12select_statev+0x43c>
 80023a6:	a201      	add	r2, pc, #4	@ (adr r2, 80023ac <_Z12select_statev+0x22c>)
 80023a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ac:	080023c5 	.word	0x080023c5
 80023b0:	08002401 	.word	0x08002401
 80023b4:	08002471 	.word	0x08002471
 80023b8:	080024ad 	.word	0x080024ad
 80023bc:	080024fd 	.word	0x080024fd
 80023c0:	08002537 	.word	0x08002537
	case start:
		state_air_n = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	637b      	str	r3, [r7, #52]	@ 0x34
		state_air_p = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	633b      	str	r3, [r7, #48]	@ 0x30
		state_precharge = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
		CPU.updateState(CPU_DISCONNECTED);
 80023d0:	2102      	movs	r1, #2
 80023d2:	4819      	ldr	r0, [pc, #100]	@ (8002438 <_Z12select_statev+0x2b8>)
 80023d4:	f7fe fe6e 	bl	80010b4 <_ZN7CPU_MOD11updateStateEi>
		fan_speed = 0;
 80023d8:	4b23      	ldr	r3, [pc, #140]	@ (8002468 <_Z12select_statev+0x2e8>)
 80023da:	2200      	movs	r2, #0
 80023dc:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fan_speed);
 80023de:	4b22      	ldr	r3, [pc, #136]	@ (8002468 <_Z12select_statev+0x2e8>)
 80023e0:	881a      	ldrh	r2, [r3, #0]
 80023e2:	4b22      	ldr	r3, [pc, #136]	@ (800246c <_Z12select_statev+0x2ec>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	635a      	str	r2, [r3, #52]	@ 0x34
		if(gpio_charge == GPIO_PIN_SET){
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	f000 80df 	beq.w	80025ae <_Z12select_statev+0x42e>
			//state = charge;
		}
		else if (flag_cpu != CPU_ERROR_COMMUNICATION)
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	f000 80db 	beq.w	80025ae <_Z12select_statev+0x42e>
			state = precharge; //If I do comunicate with the rest of the car, I go to precharge
 80023f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002464 <_Z12select_statev+0x2e4>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]
		break;
 80023fe:	e0d6      	b.n	80025ae <_Z12select_statev+0x42e>
	case precharge:
		state_air_n = 1;
 8002400:	2301      	movs	r3, #1
 8002402:	637b      	str	r3, [r7, #52]	@ 0x34
		state_air_p = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	633b      	str	r3, [r7, #48]	@ 0x30
		state_precharge = 1;
 8002408:	2301      	movs	r3, #1
 800240a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		CPU.updateState(CPU_PRECHARGE);
 800240c:	2101      	movs	r1, #1
 800240e:	480a      	ldr	r0, [pc, #40]	@ (8002438 <_Z12select_statev+0x2b8>)
 8002410:	f7fe fe50 	bl	80010b4 <_ZN7CPU_MOD11updateStateEi>
		if (flag_cpu == CPU_OK) {
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d103      	bne.n	8002422 <_Z12select_statev+0x2a2>
			state = transition;
 800241a:	4b12      	ldr	r3, [pc, #72]	@ (8002464 <_Z12select_statev+0x2e4>)
 800241c:	2202      	movs	r2, #2
 800241e:	701a      	strb	r2, [r3, #0]
		} else if (flag_cpu == CPU_ERROR_COMMUNICATION)
			state = error;
		 //else if(flag_current != Current_OK) state = error; //I take this out cause in precharge current can be very high, but probably can be uncommented,
		break;
 8002420:	e0c7      	b.n	80025b2 <_Z12select_statev+0x432>
		} else if (flag_cpu == CPU_ERROR_COMMUNICATION)
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	2b01      	cmp	r3, #1
 8002426:	f040 80c4 	bne.w	80025b2 <_Z12select_statev+0x432>
			state = error;
 800242a:	4b0e      	ldr	r3, [pc, #56]	@ (8002464 <_Z12select_statev+0x2e4>)
 800242c:	2205      	movs	r2, #5
 800242e:	701a      	strb	r2, [r3, #0]
		break;
 8002430:	e0bf      	b.n	80025b2 <_Z12select_statev+0x432>
 8002432:	bf00      	nop
 8002434:	58021800 	.word	0x58021800
 8002438:	24000c84 	.word	0x24000c84
 800243c:	24000004 	.word	0x24000004
 8002440:	24000c74 	.word	0x24000c74
 8002444:	240004b8 	.word	0x240004b8
 8002448:	24000d0c 	.word	0x24000d0c
 800244c:	24000cc0 	.word	0x24000cc0
 8002450:	24000000 	.word	0x24000000
 8002454:	24000c7c 	.word	0x24000c7c
 8002458:	24000c78 	.word	0x24000c78
 800245c:	0800cff4 	.word	0x0800cff4
 8002460:	24000cc4 	.word	0x24000cc4
 8002464:	24000d08 	.word	0x24000d08
 8002468:	24000c80 	.word	0x24000c80
 800246c:	240002a4 	.word	0x240002a4
	case transition:
		state_air_n = 1;
 8002470:	2301      	movs	r3, #1
 8002472:	637b      	str	r3, [r7, #52]	@ 0x34
		state_air_p = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	633b      	str	r3, [r7, #48]	@ 0x30
		state_precharge = 1;
 8002478:	2301      	movs	r3, #1
 800247a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		CPU.updateState(CPU_PRECHARGE);
 800247c:	2101      	movs	r1, #1
 800247e:	4868      	ldr	r0, [pc, #416]	@ (8002620 <_Z12select_statev+0x4a0>)
 8002480:	f7fe fe18 	bl	80010b4 <_ZN7CPU_MOD11updateStateEi>
		//if (((CPU.voltage_acum)) * 0.7 < CPU.DC_BUS){
		printValue(CPU.DC_BUS);
 8002484:	4b66      	ldr	r3, [pc, #408]	@ (8002620 <_Z12select_statev+0x4a0>)
 8002486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fe1f 	bl	80020cc <printValue>
		if(CPU.DC_BUS > 200 && 	CPU.DC_BUS <500){
 800248e:	4b64      	ldr	r3, [pc, #400]	@ (8002620 <_Z12select_statev+0x4a0>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	2bc8      	cmp	r3, #200	@ 0xc8
 8002494:	f340 808f 	ble.w	80025b6 <_Z12select_statev+0x436>
 8002498:	4b61      	ldr	r3, [pc, #388]	@ (8002620 <_Z12select_statev+0x4a0>)
 800249a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80024a0:	f280 8089 	bge.w	80025b6 <_Z12select_statev+0x436>
			state = run; //If DC_BUS voltage is higher than 90% of battery voltage, precharge finish
 80024a4:	4b5f      	ldr	r3, [pc, #380]	@ (8002624 <_Z12select_statev+0x4a4>)
 80024a6:	2203      	movs	r2, #3
 80024a8:	701a      	strb	r2, [r3, #0]
		//}else if((flag_cpu == CPU_ERROR_COMMUNICATION)&&(flag_charger == 1)) state = error;
		 //else if(flag_current != Current_OK) state = error;
		}
		break;
 80024aa:	e084      	b.n	80025b6 <_Z12select_statev+0x436>
	case run:
		state_air_n = 1;
 80024ac:	2301      	movs	r3, #1
 80024ae:	637b      	str	r3, [r7, #52]	@ 0x34
		state_air_p = 1;
 80024b0:	2301      	movs	r3, #1
 80024b2:	633b      	str	r3, [r7, #48]	@ 0x30
		state_precharge = 1;
 80024b4:	2301      	movs	r3, #1
 80024b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		CPU.updateState(CPU_POWER);
 80024b8:	2100      	movs	r1, #0
 80024ba:	4859      	ldr	r0, [pc, #356]	@ (8002620 <_Z12select_statev+0x4a0>)
 80024bc:	f7fe fdfa 	bl	80010b4 <_ZN7CPU_MOD11updateStateEi>
		print((char*)"run");
 80024c0:	4859      	ldr	r0, [pc, #356]	@ (8002628 <_Z12select_statev+0x4a8>)
 80024c2:	f7ff fdc7 	bl	8002054 <print>
		fan_speed = (FAN_TIMER_ARR * 75) / 100;
 80024c6:	4b59      	ldr	r3, [pc, #356]	@ (800262c <_Z12select_statev+0x4ac>)
 80024c8:	f641 62ef 	movw	r2, #7919	@ 0x1eef
 80024cc:	801a      	strh	r2, [r3, #0]

		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fan_speed);
 80024ce:	4b57      	ldr	r3, [pc, #348]	@ (800262c <_Z12select_statev+0x4ac>)
 80024d0:	881a      	ldrh	r2, [r3, #0]
 80024d2:	4b57      	ldr	r3, [pc, #348]	@ (8002630 <_Z12select_statev+0x4b0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	635a      	str	r2, [r3, #52]	@ 0x34

		if ((flag_cpu == CPU_ERROR_COMMUNICATION) && (flag_charger == 1)){
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d106      	bne.n	80024ec <_Z12select_statev+0x36c>
 80024de:	4b55      	ldr	r3, [pc, #340]	@ (8002634 <_Z12select_statev+0x4b4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d102      	bne.n	80024ec <_Z12select_statev+0x36c>
			//state = error; //If I disconnect the charger, error
			print((char*)"CPU");
 80024e6:	4854      	ldr	r0, [pc, #336]	@ (8002638 <_Z12select_statev+0x4b8>)
 80024e8:	f7ff fdb4 	bl	8002054 <print>
		}
		if (flag_current != Current_OK){
			//state = error; //If current is too high, error
		}
		if(HAL_GPIO_ReadPin(DIGITAL1_GPIO_Port, DIGITAL1_Pin) == GPIO_PIN_RESET){ //SDC IO
 80024ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024f0:	4852      	ldr	r0, [pc, #328]	@ (800263c <_Z12select_statev+0x4bc>)
 80024f2:	f004 f9a7 	bl	8006844 <HAL_GPIO_ReadPin>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
			//state = error;
			//print((char*)"DIGITAL");
		}
		break;
 80024fa:	e05f      	b.n	80025bc <_Z12select_statev+0x43c>

	case charge: {
		state_air_n = 1;
 80024fc:	2301      	movs	r3, #1
 80024fe:	637b      	str	r3, [r7, #52]	@ 0x34
		state_air_p = 1;
 8002500:	2301      	movs	r3, #1
 8002502:	633b      	str	r3, [r7, #48]	@ 0x30
		state_precharge = 1;
 8002504:	2301      	movs	r3, #1
 8002506:	62fb      	str	r3, [r7, #44]	@ 0x2c
		CPU.updateState(CPU_CHARGING);
 8002508:	2104      	movs	r1, #4
 800250a:	4845      	ldr	r0, [pc, #276]	@ (8002620 <_Z12select_statev+0x4a0>)
 800250c:	f7fe fdd2 	bl	80010b4 <_ZN7CPU_MOD11updateStateEi>


		fan_speed = (FAN_TIMER_ARR * 40) / 100;
 8002510:	4b46      	ldr	r3, [pc, #280]	@ (800262c <_Z12select_statev+0x4ac>)
 8002512:	f241 027f 	movw	r2, #4223	@ 0x107f
 8002516:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fan_speed);
 8002518:	4b44      	ldr	r3, [pc, #272]	@ (800262c <_Z12select_statev+0x4ac>)
 800251a:	881a      	ldrh	r2, [r3, #0]
 800251c:	4b44      	ldr	r3, [pc, #272]	@ (8002630 <_Z12select_statev+0x4b0>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	635a      	str	r2, [r3, #52]	@ 0x34
				state = error; //Charge has been interrupted
		} else {
			charge_current_error_counter = 0;
		}*/

		if (gpio_charge == GPIO_PIN_RESET){
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d148      	bne.n	80025ba <_Z12select_statev+0x43a>
			state = start;
 8002528:	4b3e      	ldr	r3, [pc, #248]	@ (8002624 <_Z12select_statev+0x4a4>)
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]
			charge_current_error_counter = 0;
 800252e:	4b44      	ldr	r3, [pc, #272]	@ (8002640 <_Z12select_statev+0x4c0>)
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
		}


		break;
 8002534:	e041      	b.n	80025ba <_Z12select_statev+0x43a>
	}

	case error:
		state_air_n = 0; //All relés closed
 8002536:	2300      	movs	r3, #0
 8002538:	637b      	str	r3, [r7, #52]	@ 0x34
		state_air_p = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	633b      	str	r3, [r7, #48]	@ 0x30
		state_precharge = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	62fb      	str	r3, [r7, #44]	@ 0x2c
		CPU.updateState(CPU_ERROR);
 8002542:	2103      	movs	r1, #3
 8002544:	4836      	ldr	r0, [pc, #216]	@ (8002620 <_Z12select_statev+0x4a0>)
 8002546:	f7fe fdb5 	bl	80010b4 <_ZN7CPU_MOD11updateStateEi>
		int current_value = readAnalogValue();
 800254a:	f7ff fde7 	bl	800211c <readAnalogValue>
 800254e:	eef0 7a40 	vmov.f32	s15, s0
 8002552:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002556:	ee17 3a90 	vmov	r3, s15
 800255a:	60bb      	str	r3, [r7, #8]
		for (int i = 0; i < BMS_N; i++) {
 800255c:	2300      	movs	r3, #0
 800255e:	623b      	str	r3, [r7, #32]
 8002560:	e017      	b.n	8002592 <_Z12select_statev+0x412>
			if(MIN_V != 0 && current_value > 50 && BMS[i].error_volt == BMS_OK){
 8002562:	4b38      	ldr	r3, [pc, #224]	@ (8002644 <_Z12select_statev+0x4c4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d010      	beq.n	800258c <_Z12select_statev+0x40c>
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2b32      	cmp	r3, #50	@ 0x32
 800256e:	dd0d      	ble.n	800258c <_Z12select_statev+0x40c>
 8002570:	4a35      	ldr	r2, [pc, #212]	@ (8002648 <_Z12select_statev+0x4c8>)
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 8002578:	fb01 f303 	mul.w	r3, r1, r3
 800257c:	4413      	add	r3, r2
 800257e:	33a4      	adds	r3, #164	@ 0xa4
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d102      	bne.n	800258c <_Z12select_statev+0x40c>
				state = start;
 8002586:	4b27      	ldr	r3, [pc, #156]	@ (8002624 <_Z12select_statev+0x4a4>)
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < BMS_N; i++) {
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	3301      	adds	r3, #1
 8002590:	623b      	str	r3, [r7, #32]
 8002592:	4b2e      	ldr	r3, [pc, #184]	@ (800264c <_Z12select_statev+0x4cc>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6a3a      	ldr	r2, [r7, #32]
 8002598:	429a      	cmp	r2, r3
 800259a:	dbe2      	blt.n	8002562 <_Z12select_statev+0x3e2>
			}
		}

		fan_speed = 0;
 800259c:	4b23      	ldr	r3, [pc, #140]	@ (800262c <_Z12select_statev+0x4ac>)
 800259e:	2200      	movs	r2, #0
 80025a0:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fan_speed);
 80025a2:	4b22      	ldr	r3, [pc, #136]	@ (800262c <_Z12select_statev+0x4ac>)
 80025a4:	881a      	ldrh	r2, [r3, #0]
 80025a6:	4b22      	ldr	r3, [pc, #136]	@ (8002630 <_Z12select_statev+0x4b0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 80025ac:	e006      	b.n	80025bc <_Z12select_statev+0x43c>
		break;
 80025ae:	bf00      	nop
 80025b0:	e004      	b.n	80025bc <_Z12select_statev+0x43c>
		break;
 80025b2:	bf00      	nop
 80025b4:	e002      	b.n	80025bc <_Z12select_statev+0x43c>
		break;
 80025b6:	bf00      	nop
 80025b8:	e000      	b.n	80025bc <_Z12select_statev+0x43c>
		break;
 80025ba:	bf00      	nop
	 sprintf(buffer, " - STATE:     %i\n", state);
	 print(buffer);
	 sprintf(buffer, "***********************\n");
	 print(buffer);*/
	HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin,
			flag_ams_ok ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80025bc:	4b24      	ldr	r3, [pc, #144]	@ (8002650 <_Z12select_statev+0x4d0>)
 80025be:	681b      	ldr	r3, [r3, #0]
	HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin,
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <_Z12select_statev+0x448>
 80025c4:	2301      	movs	r3, #1
 80025c6:	e000      	b.n	80025ca <_Z12select_statev+0x44a>
 80025c8:	2300      	movs	r3, #0
 80025ca:	461a      	mov	r2, r3
 80025cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80025d0:	4820      	ldr	r0, [pc, #128]	@ (8002654 <_Z12select_statev+0x4d4>)
 80025d2:	f004 f94f 	bl	8006874 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_AIR_N_GPIO_Port, RELAY_AIR_N_Pin,
 80025d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <_Z12select_statev+0x460>
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <_Z12select_statev+0x462>
 80025e0:	2300      	movs	r3, #0
 80025e2:	461a      	mov	r2, r3
 80025e4:	2108      	movs	r1, #8
 80025e6:	481c      	ldr	r0, [pc, #112]	@ (8002658 <_Z12select_statev+0x4d8>)
 80025e8:	f004 f944 	bl	8006874 <HAL_GPIO_WritePin>
			state_air_n ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_AIR_P_GPIO_Port, RELAY_AIR_P_Pin,
 80025ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <_Z12select_statev+0x476>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <_Z12select_statev+0x478>
 80025f6:	2300      	movs	r3, #0
 80025f8:	461a      	mov	r2, r3
 80025fa:	2110      	movs	r1, #16
 80025fc:	4816      	ldr	r0, [pc, #88]	@ (8002658 <_Z12select_statev+0x4d8>)
 80025fe:	f004 f939 	bl	8006874 <HAL_GPIO_WritePin>
			state_air_p ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_PRECHARGE_GPIO_Port, RELAY_PRECHARGE_Pin,
 8002602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <_Z12select_statev+0x48c>
 8002608:	2301      	movs	r3, #1
 800260a:	e000      	b.n	800260e <_Z12select_statev+0x48e>
 800260c:	2300      	movs	r3, #0
 800260e:	461a      	mov	r2, r3
 8002610:	2120      	movs	r1, #32
 8002612:	4811      	ldr	r0, [pc, #68]	@ (8002658 <_Z12select_statev+0x4d8>)
 8002614:	f004 f92e 	bl	8006874 <HAL_GPIO_WritePin>





}
 8002618:	bf00      	nop
 800261a:	3738      	adds	r7, #56	@ 0x38
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	24000c84 	.word	0x24000c84
 8002624:	24000d08 	.word	0x24000d08
 8002628:	0800d014 	.word	0x0800d014
 800262c:	24000c80 	.word	0x24000c80
 8002630:	240002a4 	.word	0x240002a4
 8002634:	24000cb8 	.word	0x24000cb8
 8002638:	0800d018 	.word	0x0800d018
 800263c:	58021000 	.word	0x58021000
 8002640:	24000cbc 	.word	0x24000cbc
 8002644:	24000004 	.word	0x24000004
 8002648:	240004b8 	.word	0x240004b8
 800264c:	24000000 	.word	0x24000000
 8002650:	24000cc0 	.word	0x24000cc0
 8002654:	58021400 	.word	0x58021400
 8002658:	58020c00 	.word	0x58020c00

0800265c <_Z11parse_state6CANMsg>:

/*********************************************************************************************************
 ** Function name:           parse_state
 ** Descriptions:            Function for analysing the data from the CAN
 *********************************************************************************************************/
void parse_state(CANMsg data) {
 800265c:	b084      	sub	sp, #16
 800265e:	b580      	push	{r7, lr}
 8002660:	b084      	sub	sp, #16
 8002662:	af00      	add	r7, sp, #0
 8002664:	f107 0c18 	add.w	ip, r7, #24
 8002668:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t time = HAL_GetTick();
 800266c:	f000 fcba 	bl	8002fe4 <HAL_GetTick>
 8002670:	6038      	str	r0, [r7, #0]
	bool flag_bms = false;
 8002672:	2300      	movs	r3, #0
 8002674:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; i < BMS_N; i++) {
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	e017      	b.n	80026ac <_Z11parse_state6CANMsg+0x50>
		flag_bms = BMS[i].parse(data.id, &data.buf[0], time); //Checking if the message received is for  BMS
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 8002682:	fb02 f303 	mul.w	r3, r2, r3
 8002686:	4a25      	ldr	r2, [pc, #148]	@ (800271c <_Z11parse_state6CANMsg+0xc0>)
 8002688:	1898      	adds	r0, r3, r2
 800268a:	69b9      	ldr	r1, [r7, #24]
 800268c:	f107 021d 	add.w	r2, r7, #29
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	f7fe fa63 	bl	8000b5c <_ZN7BMS_MOD5parseEmPhm>
 8002696:	4603      	mov	r3, r0
 8002698:	73fb      	strb	r3, [r7, #15]
		if (flag_bms)
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <_Z11parse_state6CANMsg+0x4a>
			i = BMS_N;
 80026a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002720 <_Z11parse_state6CANMsg+0xc4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < BMS_N; i++) {
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	3301      	adds	r3, #1
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002720 <_Z11parse_state6CANMsg+0xc4>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	dbe2      	blt.n	800267c <_Z11parse_state6CANMsg+0x20>
	}

	if (!flag_bms) {
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	f083 0301 	eor.w	r3, r3, #1
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d025      	beq.n	800270e <_Z11parse_state6CANMsg+0xb2>
		if (CPU.parse(data.id, &data.buf[0], time))
 80026c2:	69b9      	ldr	r1, [r7, #24]
 80026c4:	f107 021d 	add.w	r2, r7, #29
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	4816      	ldr	r0, [pc, #88]	@ (8002724 <_Z11parse_state6CANMsg+0xc8>)
 80026cc:	f7fe fc7c 	bl	8000fc8 <_ZN7CPU_MOD5parseEmPhm>
			;                       //Cheking if message is for CPU
		if (data.id == 419385575) //If message from this direction received, it is because the charger is connected and the accu is for charging
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	4a15      	ldr	r2, [pc, #84]	@ (8002728 <_Z11parse_state6CANMsg+0xcc>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d11a      	bne.n	800270e <_Z11parse_state6CANMsg+0xb2>
				{
			for (int i = 0; i < BMS_N; i++) {
 80026d8:	2300      	movs	r3, #0
 80026da:	607b      	str	r3, [r7, #4]
 80026dc:	e00c      	b.n	80026f8 <_Z11parse_state6CANMsg+0x9c>
				BMS[i].flag_charger = 1;
 80026de:	4a0f      	ldr	r2, [pc, #60]	@ (800271c <_Z11parse_state6CANMsg+0xc0>)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 80026e6:	fb01 f303 	mul.w	r3, r1, r3
 80026ea:	4413      	add	r3, r2
 80026ec:	3394      	adds	r3, #148	@ 0x94
 80026ee:	2201      	movs	r2, #1
 80026f0:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < BMS_N; i++) {
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3301      	adds	r3, #1
 80026f6:	607b      	str	r3, [r7, #4]
 80026f8:	4b09      	ldr	r3, [pc, #36]	@ (8002720 <_Z11parse_state6CANMsg+0xc4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	429a      	cmp	r2, r3
 8002700:	dbed      	blt.n	80026de <_Z11parse_state6CANMsg+0x82>
			}

			current.flag_charger = 1;
 8002702:	4b0a      	ldr	r3, [pc, #40]	@ (800272c <_Z11parse_state6CANMsg+0xd0>)
 8002704:	2201      	movs	r2, #1
 8002706:	639a      	str	r2, [r3, #56]	@ 0x38
			flag_charger = 1;
 8002708:	4b09      	ldr	r3, [pc, #36]	@ (8002730 <_Z11parse_state6CANMsg+0xd4>)
 800270a:	2201      	movs	r2, #1
 800270c:	601a      	str	r2, [r3, #0]
		} else {
			// Serial.print("ID: ");
			// Serial.println(data.id);
		}
	}
}
 800270e:	bf00      	nop
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002718:	b004      	add	sp, #16
 800271a:	4770      	bx	lr
 800271c:	240004b8 	.word	0x240004b8
 8002720:	24000000 	.word	0x24000000
 8002724:	24000c84 	.word	0x24000c84
 8002728:	18ff50e7 	.word	0x18ff50e7
 800272c:	24000cc4 	.word	0x24000cc4
 8002730:	24000cb8 	.word	0x24000cb8

08002734 <_Z41__static_initialization_and_destruction_0v>:
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b087      	sub	sp, #28
 8002738:	af06      	add	r7, sp, #24
		};
 800273a:	4c40      	ldr	r4, [pc, #256]	@ (800283c <_Z41__static_initialization_and_destruction_0v+0x108>)
 800273c:	2369      	movs	r3, #105	@ 0x69
 800273e:	9304      	str	r3, [sp, #16]
 8002740:	2332      	movs	r3, #50	@ 0x32
 8002742:	9303      	str	r3, [sp, #12]
 8002744:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002748:	9302      	str	r3, [sp, #8]
 800274a:	2313      	movs	r3, #19
 800274c:	9301      	str	r3, [sp, #4]
 800274e:	233c      	movs	r3, #60	@ 0x3c
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8002756:	f241 0268 	movw	r2, #4200	@ 0x1068
 800275a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800275e:	4620      	mov	r0, r4
 8002760:	f7fd ffc4 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 8002764:	f504 74c6 	add.w	r4, r4, #396	@ 0x18c
 8002768:	23cd      	movs	r3, #205	@ 0xcd
 800276a:	9304      	str	r3, [sp, #16]
 800276c:	2364      	movs	r3, #100	@ 0x64
 800276e:	9303      	str	r3, [sp, #12]
 8002770:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002774:	9302      	str	r3, [sp, #8]
 8002776:	2313      	movs	r3, #19
 8002778:	9301      	str	r3, [sp, #4]
 800277a:	233c      	movs	r3, #60	@ 0x3c
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8002782:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002786:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 800278a:	4620      	mov	r0, r4
 800278c:	f7fd ffae 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 8002790:	f504 74c6 	add.w	r4, r4, #396	@ 0x18c
 8002794:	f240 1331 	movw	r3, #305	@ 0x131
 8002798:	9304      	str	r3, [sp, #16]
 800279a:	2396      	movs	r3, #150	@ 0x96
 800279c:	9303      	str	r3, [sp, #12]
 800279e:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80027a2:	9302      	str	r3, [sp, #8]
 80027a4:	2313      	movs	r3, #19
 80027a6:	9301      	str	r3, [sp, #4]
 80027a8:	233c      	movs	r3, #60	@ 0x3c
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80027b0:	f241 0268 	movw	r2, #4200	@ 0x1068
 80027b4:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 80027b8:	4620      	mov	r0, r4
 80027ba:	f7fd ff97 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 80027be:	f504 74c6 	add.w	r4, r4, #396	@ 0x18c
 80027c2:	f240 1395 	movw	r3, #405	@ 0x195
 80027c6:	9304      	str	r3, [sp, #16]
 80027c8:	23c8      	movs	r3, #200	@ 0xc8
 80027ca:	9303      	str	r3, [sp, #12]
 80027cc:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80027d0:	9302      	str	r3, [sp, #8]
 80027d2:	2313      	movs	r3, #19
 80027d4:	9301      	str	r3, [sp, #4]
 80027d6:	233c      	movs	r3, #60	@ 0x3c
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80027de:	f241 0268 	movw	r2, #4200	@ 0x1068
 80027e2:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 80027e6:	4620      	mov	r0, r4
 80027e8:	f7fd ff80 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 80027ec:	f504 70c6 	add.w	r0, r4, #396	@ 0x18c
 80027f0:	f240 13f9 	movw	r3, #505	@ 0x1f9
 80027f4:	9304      	str	r3, [sp, #16]
 80027f6:	23fa      	movs	r3, #250	@ 0xfa
 80027f8:	9303      	str	r3, [sp, #12]
 80027fa:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80027fe:	9302      	str	r3, [sp, #8]
 8002800:	2313      	movs	r3, #19
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	233c      	movs	r3, #60	@ 0x3c
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 800280c:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002810:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8002814:	f7fd ff6a 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
CPU_MOD CPU(CPU_ID_send, CPU_ID_recv, 500); //Same with CPU, rest of vehicle
 8002818:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800281c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002820:	2120      	movs	r1, #32
 8002822:	4807      	ldr	r0, [pc, #28]	@ (8002840 <_Z41__static_initialization_and_destruction_0v+0x10c>)
 8002824:	f7fe fb7e 	bl	8000f24 <_ZN7CPU_MODC1Emmi>
Current_MOD current(Current_ID, Current_max); //Class for current measurement
 8002828:	22c8      	movs	r2, #200	@ 0xc8
 800282a:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 800282e:	4805      	ldr	r0, [pc, #20]	@ (8002844 <_Z41__static_initialization_and_destruction_0v+0x110>)
 8002830:	f7fe fc52 	bl	80010d8 <_ZN11Current_MODC1Emi>
}
 8002834:	bf00      	nop
 8002836:	3704      	adds	r7, #4
 8002838:	46bd      	mov	sp, r7
 800283a:	bd90      	pop	{r4, r7, pc}
 800283c:	240004b8 	.word	0x240004b8
 8002840:	24000c84 	.word	0x24000c84
 8002844:	24000cc4 	.word	0x24000cc4

08002848 <_GLOBAL__sub_I_BMS>:
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
 800284c:	f7ff ff72 	bl	8002734 <_Z41__static_initialization_and_destruction_0v>
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800285a:	4b0a      	ldr	r3, [pc, #40]	@ (8002884 <HAL_MspInit+0x30>)
 800285c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002860:	4a08      	ldr	r2, [pc, #32]	@ (8002884 <HAL_MspInit+0x30>)
 8002862:	f043 0302 	orr.w	r3, r3, #2
 8002866:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800286a:	4b06      	ldr	r3, [pc, #24]	@ (8002884 <HAL_MspInit+0x30>)
 800286c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	607b      	str	r3, [r7, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	58024400 	.word	0x58024400

08002888 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08c      	sub	sp, #48	@ 0x30
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002890:	f107 031c 	add.w	r3, r7, #28
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a31      	ldr	r2, [pc, #196]	@ (800296c <HAL_ADC_MspInit+0xe4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d12b      	bne.n	8002902 <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80028aa:	4b31      	ldr	r3, [pc, #196]	@ (8002970 <HAL_ADC_MspInit+0xe8>)
 80028ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80028b0:	4a2f      	ldr	r2, [pc, #188]	@ (8002970 <HAL_ADC_MspInit+0xe8>)
 80028b2:	f043 0320 	orr.w	r3, r3, #32
 80028b6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80028ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002970 <HAL_ADC_MspInit+0xe8>)
 80028bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80028c0:	f003 0320 	and.w	r3, r3, #32
 80028c4:	61bb      	str	r3, [r7, #24]
 80028c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028c8:	4b29      	ldr	r3, [pc, #164]	@ (8002970 <HAL_ADC_MspInit+0xe8>)
 80028ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028ce:	4a28      	ldr	r2, [pc, #160]	@ (8002970 <HAL_ADC_MspInit+0xe8>)
 80028d0:	f043 0320 	orr.w	r3, r3, #32
 80028d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028d8:	4b25      	ldr	r3, [pc, #148]	@ (8002970 <HAL_ADC_MspInit+0xe8>)
 80028da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028de:	f003 0320 	and.w	r3, r3, #32
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80028e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80028ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028ec:	2303      	movs	r3, #3
 80028ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028f4:	f107 031c 	add.w	r3, r7, #28
 80028f8:	4619      	mov	r1, r3
 80028fa:	481e      	ldr	r0, [pc, #120]	@ (8002974 <HAL_ADC_MspInit+0xec>)
 80028fc:	f003 fdfa 	bl	80064f4 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002900:	e02f      	b.n	8002962 <HAL_ADC_MspInit+0xda>
  else if(hadc->Instance==ADC3)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a1c      	ldr	r2, [pc, #112]	@ (8002978 <HAL_ADC_MspInit+0xf0>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d12a      	bne.n	8002962 <HAL_ADC_MspInit+0xda>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800290c:	4b18      	ldr	r3, [pc, #96]	@ (8002970 <HAL_ADC_MspInit+0xe8>)
 800290e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002912:	4a17      	ldr	r2, [pc, #92]	@ (8002970 <HAL_ADC_MspInit+0xe8>)
 8002914:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002918:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800291c:	4b14      	ldr	r3, [pc, #80]	@ (8002970 <HAL_ADC_MspInit+0xe8>)
 800291e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002922:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800292a:	4b11      	ldr	r3, [pc, #68]	@ (8002970 <HAL_ADC_MspInit+0xe8>)
 800292c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002930:	4a0f      	ldr	r2, [pc, #60]	@ (8002970 <HAL_ADC_MspInit+0xe8>)
 8002932:	f043 0320 	orr.w	r3, r3, #32
 8002936:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800293a:	4b0d      	ldr	r3, [pc, #52]	@ (8002970 <HAL_ADC_MspInit+0xe8>)
 800293c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002940:	f003 0320 	and.w	r3, r3, #32
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002948:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800294c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800294e:	2303      	movs	r3, #3
 8002950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002956:	f107 031c 	add.w	r3, r7, #28
 800295a:	4619      	mov	r1, r3
 800295c:	4805      	ldr	r0, [pc, #20]	@ (8002974 <HAL_ADC_MspInit+0xec>)
 800295e:	f003 fdc9 	bl	80064f4 <HAL_GPIO_Init>
}
 8002962:	bf00      	nop
 8002964:	3730      	adds	r7, #48	@ 0x30
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40022000 	.word	0x40022000
 8002970:	58024400 	.word	0x58024400
 8002974:	58021400 	.word	0x58021400
 8002978:	58026000 	.word	0x58026000

0800297c <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b0ba      	sub	sp, #232	@ 0xe8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002984:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	60da      	str	r2, [r3, #12]
 8002992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002994:	f107 0318 	add.w	r3, r7, #24
 8002998:	22b8      	movs	r2, #184	@ 0xb8
 800299a:	2100      	movs	r1, #0
 800299c:	4618      	mov	r0, r3
 800299e:	f009 fccb 	bl	800c338 <memset>
  if(hfdcan->Instance==FDCAN1)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a5a      	ldr	r2, [pc, #360]	@ (8002b10 <HAL_FDCAN_MspInit+0x194>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d157      	bne.n	8002a5c <HAL_FDCAN_MspInit+0xe0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80029ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80029b0:	f04f 0300 	mov.w	r3, #0
 80029b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80029b8:	2300      	movs	r3, #0
 80029ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029be:	f107 0318 	add.w	r3, r7, #24
 80029c2:	4618      	mov	r0, r3
 80029c4:	f004 ff10 	bl	80077e8 <HAL_RCCEx_PeriphCLKConfig>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 80029ce:	f7ff fbc5 	bl	800215c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80029d2:	4b50      	ldr	r3, [pc, #320]	@ (8002b14 <HAL_FDCAN_MspInit+0x198>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	3301      	adds	r3, #1
 80029d8:	4a4e      	ldr	r2, [pc, #312]	@ (8002b14 <HAL_FDCAN_MspInit+0x198>)
 80029da:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80029dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002b14 <HAL_FDCAN_MspInit+0x198>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d10e      	bne.n	8002a02 <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80029e4:	4b4c      	ldr	r3, [pc, #304]	@ (8002b18 <HAL_FDCAN_MspInit+0x19c>)
 80029e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80029ea:	4a4b      	ldr	r2, [pc, #300]	@ (8002b18 <HAL_FDCAN_MspInit+0x19c>)
 80029ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029f0:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80029f4:	4b48      	ldr	r3, [pc, #288]	@ (8002b18 <HAL_FDCAN_MspInit+0x19c>)
 80029f6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80029fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a02:	4b45      	ldr	r3, [pc, #276]	@ (8002b18 <HAL_FDCAN_MspInit+0x19c>)
 8002a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a08:	4a43      	ldr	r2, [pc, #268]	@ (8002b18 <HAL_FDCAN_MspInit+0x19c>)
 8002a0a:	f043 0308 	orr.w	r3, r3, #8
 8002a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a12:	4b41      	ldr	r3, [pc, #260]	@ (8002b18 <HAL_FDCAN_MspInit+0x19c>)
 8002a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a20:	2303      	movs	r3, #3
 8002a22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a26:	2302      	movs	r3, #2
 8002a28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a32:	2300      	movs	r3, #0
 8002a34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002a38:	2309      	movs	r3, #9
 8002a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a3e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002a42:	4619      	mov	r1, r3
 8002a44:	4835      	ldr	r0, [pc, #212]	@ (8002b1c <HAL_FDCAN_MspInit+0x1a0>)
 8002a46:	f003 fd55 	bl	80064f4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	2013      	movs	r0, #19
 8002a50:	f002 fb4d 	bl	80050ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002a54:	2013      	movs	r0, #19
 8002a56:	f002 fb64 	bl	8005122 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN FDCAN2_MspInit 1 */

    /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002a5a:	e054      	b.n	8002b06 <HAL_FDCAN_MspInit+0x18a>
  else if(hfdcan->Instance==FDCAN2)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a2f      	ldr	r2, [pc, #188]	@ (8002b20 <HAL_FDCAN_MspInit+0x1a4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d14f      	bne.n	8002b06 <HAL_FDCAN_MspInit+0x18a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002a66:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002a72:	2300      	movs	r3, #0
 8002a74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a78:	f107 0318 	add.w	r3, r7, #24
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f004 feb3 	bl	80077e8 <HAL_RCCEx_PeriphCLKConfig>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 8002a88:	f7ff fb68 	bl	800215c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002a8c:	4b21      	ldr	r3, [pc, #132]	@ (8002b14 <HAL_FDCAN_MspInit+0x198>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	3301      	adds	r3, #1
 8002a92:	4a20      	ldr	r2, [pc, #128]	@ (8002b14 <HAL_FDCAN_MspInit+0x198>)
 8002a94:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002a96:	4b1f      	ldr	r3, [pc, #124]	@ (8002b14 <HAL_FDCAN_MspInit+0x198>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d10e      	bne.n	8002abc <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002b18 <HAL_FDCAN_MspInit+0x19c>)
 8002aa0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002aa4:	4a1c      	ldr	r2, [pc, #112]	@ (8002b18 <HAL_FDCAN_MspInit+0x19c>)
 8002aa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aaa:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002aae:	4b1a      	ldr	r3, [pc, #104]	@ (8002b18 <HAL_FDCAN_MspInit+0x19c>)
 8002ab0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002abc:	4b16      	ldr	r3, [pc, #88]	@ (8002b18 <HAL_FDCAN_MspInit+0x19c>)
 8002abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ac2:	4a15      	ldr	r2, [pc, #84]	@ (8002b18 <HAL_FDCAN_MspInit+0x19c>)
 8002ac4:	f043 0302 	orr.w	r3, r3, #2
 8002ac8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002acc:	4b12      	ldr	r3, [pc, #72]	@ (8002b18 <HAL_FDCAN_MspInit+0x19c>)
 8002ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002ada:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002ade:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aee:	2300      	movs	r3, #0
 8002af0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002af4:	2309      	movs	r3, #9
 8002af6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002afa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002afe:	4619      	mov	r1, r3
 8002b00:	4808      	ldr	r0, [pc, #32]	@ (8002b24 <HAL_FDCAN_MspInit+0x1a8>)
 8002b02:	f003 fcf7 	bl	80064f4 <HAL_GPIO_Init>
}
 8002b06:	bf00      	nop
 8002b08:	37e8      	adds	r7, #232	@ 0xe8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	4000a000 	.word	0x4000a000
 8002b14:	24000d5c 	.word	0x24000d5c
 8002b18:	58024400 	.word	0x58024400
 8002b1c:	58020c00 	.word	0x58020c00
 8002b20:	4000a400 	.word	0x4000a400
 8002b24:	58020400 	.word	0x58020400

08002b28 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a0b      	ldr	r2, [pc, #44]	@ (8002b64 <HAL_TIM_Base_MspInit+0x3c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d10e      	bne.n	8002b58 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b68 <HAL_TIM_Base_MspInit+0x40>)
 8002b3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b40:	4a09      	ldr	r2, [pc, #36]	@ (8002b68 <HAL_TIM_Base_MspInit+0x40>)
 8002b42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b4a:	4b07      	ldr	r3, [pc, #28]	@ (8002b68 <HAL_TIM_Base_MspInit+0x40>)
 8002b4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8002b58:	bf00      	nop
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	40014800 	.word	0x40014800
 8002b68:	58024400 	.word	0x58024400

08002b6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b74:	f107 030c 	add.w	r3, r7, #12
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a13      	ldr	r2, [pc, #76]	@ (8002bd8 <HAL_TIM_MspPostInit+0x6c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d11f      	bne.n	8002bce <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b8e:	4b13      	ldr	r3, [pc, #76]	@ (8002bdc <HAL_TIM_MspPostInit+0x70>)
 8002b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b94:	4a11      	ldr	r2, [pc, #68]	@ (8002bdc <HAL_TIM_MspPostInit+0x70>)
 8002b96:	f043 0302 	orr.w	r3, r3, #2
 8002b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8002bdc <HAL_TIM_MspPostInit+0x70>)
 8002ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PB9     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002bac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bb0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc2:	f107 030c 	add.w	r3, r7, #12
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4805      	ldr	r0, [pc, #20]	@ (8002be0 <HAL_TIM_MspPostInit+0x74>)
 8002bca:	f003 fc93 	bl	80064f4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002bce:	bf00      	nop
 8002bd0:	3720      	adds	r7, #32
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40014800 	.word	0x40014800
 8002bdc:	58024400 	.word	0x58024400
 8002be0:	58020400 	.word	0x58020400

08002be4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b0b8      	sub	sp, #224	@ 0xe0
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bec:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	605a      	str	r2, [r3, #4]
 8002bf6:	609a      	str	r2, [r3, #8]
 8002bf8:	60da      	str	r2, [r3, #12]
 8002bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bfc:	f107 0310 	add.w	r3, r7, #16
 8002c00:	22b8      	movs	r2, #184	@ 0xb8
 8002c02:	2100      	movs	r1, #0
 8002c04:	4618      	mov	r0, r3
 8002c06:	f009 fb97 	bl	800c338 <memset>
  if(huart->Instance==USART2)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a26      	ldr	r2, [pc, #152]	@ (8002ca8 <HAL_UART_MspInit+0xc4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d145      	bne.n	8002ca0 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002c14:	f04f 0202 	mov.w	r2, #2
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002c20:	2300      	movs	r3, #0
 8002c22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c26:	f107 0310 	add.w	r3, r7, #16
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f004 fddc 	bl	80077e8 <HAL_RCCEx_PeriphCLKConfig>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002c36:	f7ff fa91 	bl	800215c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8002cac <HAL_UART_MspInit+0xc8>)
 8002c3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c40:	4a1a      	ldr	r2, [pc, #104]	@ (8002cac <HAL_UART_MspInit+0xc8>)
 8002c42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c46:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002c4a:	4b18      	ldr	r3, [pc, #96]	@ (8002cac <HAL_UART_MspInit+0xc8>)
 8002c4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c58:	4b14      	ldr	r3, [pc, #80]	@ (8002cac <HAL_UART_MspInit+0xc8>)
 8002c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c5e:	4a13      	ldr	r2, [pc, #76]	@ (8002cac <HAL_UART_MspInit+0xc8>)
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c68:	4b10      	ldr	r3, [pc, #64]	@ (8002cac <HAL_UART_MspInit+0xc8>)
 8002c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c76:	230c      	movs	r3, #12
 8002c78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c8e:	2307      	movs	r3, #7
 8002c90:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c94:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4805      	ldr	r0, [pc, #20]	@ (8002cb0 <HAL_UART_MspInit+0xcc>)
 8002c9c:	f003 fc2a 	bl	80064f4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002ca0:	bf00      	nop
 8002ca2:	37e0      	adds	r7, #224	@ 0xe0
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40004400 	.word	0x40004400
 8002cac:	58024400 	.word	0x58024400
 8002cb0:	58020000 	.word	0x58020000

08002cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cb8:	bf00      	nop
 8002cba:	e7fd      	b.n	8002cb8 <NMI_Handler+0x4>

08002cbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cc0:	bf00      	nop
 8002cc2:	e7fd      	b.n	8002cc0 <HardFault_Handler+0x4>

08002cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cc8:	bf00      	nop
 8002cca:	e7fd      	b.n	8002cc8 <MemManage_Handler+0x4>

08002ccc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cd0:	bf00      	nop
 8002cd2:	e7fd      	b.n	8002cd0 <BusFault_Handler+0x4>

08002cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cd8:	bf00      	nop
 8002cda:	e7fd      	b.n	8002cd8 <UsageFault_Handler+0x4>

08002cdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cea:	b480      	push	{r7}
 8002cec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cfc:	bf00      	nop
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d0a:	f000 f957 	bl	8002fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002d18:	4802      	ldr	r0, [pc, #8]	@ (8002d24 <FDCAN1_IT0_IRQHandler+0x10>)
 8002d1a:	f002 fedd 	bl	8005ad8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	24000164 	.word	0x24000164

08002d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d30:	4a14      	ldr	r2, [pc, #80]	@ (8002d84 <_sbrk+0x5c>)
 8002d32:	4b15      	ldr	r3, [pc, #84]	@ (8002d88 <_sbrk+0x60>)
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d3c:	4b13      	ldr	r3, [pc, #76]	@ (8002d8c <_sbrk+0x64>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d102      	bne.n	8002d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d44:	4b11      	ldr	r3, [pc, #68]	@ (8002d8c <_sbrk+0x64>)
 8002d46:	4a12      	ldr	r2, [pc, #72]	@ (8002d90 <_sbrk+0x68>)
 8002d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d4a:	4b10      	ldr	r3, [pc, #64]	@ (8002d8c <_sbrk+0x64>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4413      	add	r3, r2
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d207      	bcs.n	8002d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d58:	f009 faf6 	bl	800c348 <__errno>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	220c      	movs	r2, #12
 8002d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d62:	f04f 33ff 	mov.w	r3, #4294967295
 8002d66:	e009      	b.n	8002d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d68:	4b08      	ldr	r3, [pc, #32]	@ (8002d8c <_sbrk+0x64>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d6e:	4b07      	ldr	r3, [pc, #28]	@ (8002d8c <_sbrk+0x64>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4413      	add	r3, r2
 8002d76:	4a05      	ldr	r2, [pc, #20]	@ (8002d8c <_sbrk+0x64>)
 8002d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	24050000 	.word	0x24050000
 8002d88:	00000400 	.word	0x00000400
 8002d8c:	24000d60 	.word	0x24000d60
 8002d90:	24000eb0 	.word	0x24000eb0

08002d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d98:	4b32      	ldr	r3, [pc, #200]	@ (8002e64 <SystemInit+0xd0>)
 8002d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d9e:	4a31      	ldr	r2, [pc, #196]	@ (8002e64 <SystemInit+0xd0>)
 8002da0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002da4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002da8:	4b2f      	ldr	r3, [pc, #188]	@ (8002e68 <SystemInit+0xd4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	2b06      	cmp	r3, #6
 8002db2:	d807      	bhi.n	8002dc4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002db4:	4b2c      	ldr	r3, [pc, #176]	@ (8002e68 <SystemInit+0xd4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f023 030f 	bic.w	r3, r3, #15
 8002dbc:	4a2a      	ldr	r2, [pc, #168]	@ (8002e68 <SystemInit+0xd4>)
 8002dbe:	f043 0307 	orr.w	r3, r3, #7
 8002dc2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002dc4:	4b29      	ldr	r3, [pc, #164]	@ (8002e6c <SystemInit+0xd8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a28      	ldr	r2, [pc, #160]	@ (8002e6c <SystemInit+0xd8>)
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002dd0:	4b26      	ldr	r3, [pc, #152]	@ (8002e6c <SystemInit+0xd8>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002dd6:	4b25      	ldr	r3, [pc, #148]	@ (8002e6c <SystemInit+0xd8>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	4924      	ldr	r1, [pc, #144]	@ (8002e6c <SystemInit+0xd8>)
 8002ddc:	4b24      	ldr	r3, [pc, #144]	@ (8002e70 <SystemInit+0xdc>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002de2:	4b21      	ldr	r3, [pc, #132]	@ (8002e68 <SystemInit+0xd4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d007      	beq.n	8002dfe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002dee:	4b1e      	ldr	r3, [pc, #120]	@ (8002e68 <SystemInit+0xd4>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 030f 	bic.w	r3, r3, #15
 8002df6:	4a1c      	ldr	r2, [pc, #112]	@ (8002e68 <SystemInit+0xd4>)
 8002df8:	f043 0307 	orr.w	r3, r3, #7
 8002dfc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8002e6c <SystemInit+0xd8>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002e04:	4b19      	ldr	r3, [pc, #100]	@ (8002e6c <SystemInit+0xd8>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002e0a:	4b18      	ldr	r3, [pc, #96]	@ (8002e6c <SystemInit+0xd8>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002e10:	4b16      	ldr	r3, [pc, #88]	@ (8002e6c <SystemInit+0xd8>)
 8002e12:	4a18      	ldr	r2, [pc, #96]	@ (8002e74 <SystemInit+0xe0>)
 8002e14:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002e16:	4b15      	ldr	r3, [pc, #84]	@ (8002e6c <SystemInit+0xd8>)
 8002e18:	4a17      	ldr	r2, [pc, #92]	@ (8002e78 <SystemInit+0xe4>)
 8002e1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002e1c:	4b13      	ldr	r3, [pc, #76]	@ (8002e6c <SystemInit+0xd8>)
 8002e1e:	4a17      	ldr	r2, [pc, #92]	@ (8002e7c <SystemInit+0xe8>)
 8002e20:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002e22:	4b12      	ldr	r3, [pc, #72]	@ (8002e6c <SystemInit+0xd8>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002e28:	4b10      	ldr	r3, [pc, #64]	@ (8002e6c <SystemInit+0xd8>)
 8002e2a:	4a14      	ldr	r2, [pc, #80]	@ (8002e7c <SystemInit+0xe8>)
 8002e2c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e6c <SystemInit+0xd8>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002e34:	4b0d      	ldr	r3, [pc, #52]	@ (8002e6c <SystemInit+0xd8>)
 8002e36:	4a11      	ldr	r2, [pc, #68]	@ (8002e7c <SystemInit+0xe8>)
 8002e38:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e6c <SystemInit+0xd8>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e40:	4b0a      	ldr	r3, [pc, #40]	@ (8002e6c <SystemInit+0xd8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a09      	ldr	r2, [pc, #36]	@ (8002e6c <SystemInit+0xd8>)
 8002e46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e4c:	4b07      	ldr	r3, [pc, #28]	@ (8002e6c <SystemInit+0xd8>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002e52:	4b0b      	ldr	r3, [pc, #44]	@ (8002e80 <SystemInit+0xec>)
 8002e54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002e58:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002e5a:	bf00      	nop
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	e000ed00 	.word	0xe000ed00
 8002e68:	52002000 	.word	0x52002000
 8002e6c:	58024400 	.word	0x58024400
 8002e70:	eaf6ed7f 	.word	0xeaf6ed7f
 8002e74:	02020200 	.word	0x02020200
 8002e78:	01ff0000 	.word	0x01ff0000
 8002e7c:	01010280 	.word	0x01010280
 8002e80:	52004000 	.word	0x52004000

08002e84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002e84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ebc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e88:	f7ff ff84 	bl	8002d94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e8c:	480c      	ldr	r0, [pc, #48]	@ (8002ec0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e8e:	490d      	ldr	r1, [pc, #52]	@ (8002ec4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e90:	4a0d      	ldr	r2, [pc, #52]	@ (8002ec8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e94:	e002      	b.n	8002e9c <LoopCopyDataInit>

08002e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e9a:	3304      	adds	r3, #4

08002e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ea0:	d3f9      	bcc.n	8002e96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ecc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ea4:	4c0a      	ldr	r4, [pc, #40]	@ (8002ed0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ea8:	e001      	b.n	8002eae <LoopFillZerobss>

08002eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eaa:	6013      	str	r3, [r2, #0]
   adds r2, r2, #4
 8002eac:	3204      	adds	r2, #4

08002eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eb0:	d3fb      	bcc.n	8002eaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002eb2:	f009 fa4f 	bl	800c354 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eb6:	f7fe fadd 	bl	8001474 <main>
  bx  lr
 8002eba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ebc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002ec0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002ec4:	24000068 	.word	0x24000068
  ldr r2, =_sidata
 8002ec8:	0800d0f8 	.word	0x0800d0f8
  ldr r2, =_sbss
 8002ecc:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 8002ed0:	24000eb0 	.word	0x24000eb0

08002ed4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ed4:	e7fe      	b.n	8002ed4 <ADC3_IRQHandler>
	...

08002ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ede:	2003      	movs	r0, #3
 8002ee0:	f002 f8fa 	bl	80050d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ee4:	f004 faaa 	bl	800743c <HAL_RCC_GetSysClockFreq>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	4b15      	ldr	r3, [pc, #84]	@ (8002f40 <HAL_Init+0x68>)
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	0a1b      	lsrs	r3, r3, #8
 8002ef0:	f003 030f 	and.w	r3, r3, #15
 8002ef4:	4913      	ldr	r1, [pc, #76]	@ (8002f44 <HAL_Init+0x6c>)
 8002ef6:	5ccb      	ldrb	r3, [r1, r3]
 8002ef8:	f003 031f 	and.w	r3, r3, #31
 8002efc:	fa22 f303 	lsr.w	r3, r2, r3
 8002f00:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f02:	4b0f      	ldr	r3, [pc, #60]	@ (8002f40 <HAL_Init+0x68>)
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	4a0e      	ldr	r2, [pc, #56]	@ (8002f44 <HAL_Init+0x6c>)
 8002f0c:	5cd3      	ldrb	r3, [r2, r3]
 8002f0e:	f003 031f 	and.w	r3, r3, #31
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	fa22 f303 	lsr.w	r3, r2, r3
 8002f18:	4a0b      	ldr	r2, [pc, #44]	@ (8002f48 <HAL_Init+0x70>)
 8002f1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f1c:	4a0b      	ldr	r2, [pc, #44]	@ (8002f4c <HAL_Init+0x74>)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f22:	200f      	movs	r0, #15
 8002f24:	f000 f814 	bl	8002f50 <HAL_InitTick>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e002      	b.n	8002f38 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f32:	f7ff fc8f 	bl	8002854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	58024400 	.word	0x58024400
 8002f44:	0800d068 	.word	0x0800d068
 8002f48:	2400000c 	.word	0x2400000c
 8002f4c:	24000008 	.word	0x24000008

08002f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002f58:	4b15      	ldr	r3, [pc, #84]	@ (8002fb0 <HAL_InitTick+0x60>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e021      	b.n	8002fa8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002f64:	4b13      	ldr	r3, [pc, #76]	@ (8002fb4 <HAL_InitTick+0x64>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4b11      	ldr	r3, [pc, #68]	@ (8002fb0 <HAL_InitTick+0x60>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f002 f8df 	bl	800513e <HAL_SYSTICK_Config>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e00e      	b.n	8002fa8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b0f      	cmp	r3, #15
 8002f8e:	d80a      	bhi.n	8002fa6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f90:	2200      	movs	r2, #0
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	f04f 30ff 	mov.w	r0, #4294967295
 8002f98:	f002 f8a9 	bl	80050ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f9c:	4a06      	ldr	r2, [pc, #24]	@ (8002fb8 <HAL_InitTick+0x68>)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e000      	b.n	8002fa8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	24000014 	.word	0x24000014
 8002fb4:	24000008 	.word	0x24000008
 8002fb8:	24000010 	.word	0x24000010

08002fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fc0:	4b06      	ldr	r3, [pc, #24]	@ (8002fdc <HAL_IncTick+0x20>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4b06      	ldr	r3, [pc, #24]	@ (8002fe0 <HAL_IncTick+0x24>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4413      	add	r3, r2
 8002fcc:	4a04      	ldr	r2, [pc, #16]	@ (8002fe0 <HAL_IncTick+0x24>)
 8002fce:	6013      	str	r3, [r2, #0]
}
 8002fd0:	bf00      	nop
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	24000014 	.word	0x24000014
 8002fe0:	24000d64 	.word	0x24000d64

08002fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fe8:	4b03      	ldr	r3, [pc, #12]	@ (8002ff8 <HAL_GetTick+0x14>)
 8002fea:	681b      	ldr	r3, [r3, #0]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	24000d64 	.word	0x24000d64

08002ffc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	431a      	orrs	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	609a      	str	r2, [r3, #8]
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	609a      	str	r2, [r3, #8]
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003064:	b480      	push	{r7}
 8003066:	b087      	sub	sp, #28
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a18      	ldr	r2, [pc, #96]	@ (80030d4 <LL_ADC_SetChannelPreselection+0x70>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d027      	beq.n	80030c6 <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800307c:	2b00      	cmp	r3, #0
 800307e:	d107      	bne.n	8003090 <LL_ADC_SetChannelPreselection+0x2c>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	0e9b      	lsrs	r3, r3, #26
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	2201      	movs	r2, #1
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	e015      	b.n	80030bc <LL_ADC_SetChannelPreselection+0x58>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	fa93 f3a3 	rbit	r3, r3
 800309a:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 80030a6:	2320      	movs	r3, #32
 80030a8:	e003      	b.n	80030b2 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	fab3 f383 	clz	r3, r3
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	f003 031f 	and.w	r3, r3, #31
 80030b6:	2201      	movs	r2, #1
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	69d2      	ldr	r2, [r2, #28]
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 80030c6:	bf00      	nop
 80030c8:	371c      	adds	r7, #28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	58026000 	.word	0x58026000

080030d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
 80030e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	3360      	adds	r3, #96	@ 0x60
 80030ea:	461a      	mov	r2, r3
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4a10      	ldr	r2, [pc, #64]	@ (8003138 <LL_ADC_SetOffset+0x60>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d10b      	bne.n	8003114 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	4313      	orrs	r3, r2
 800310a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003112:	e00b      	b.n	800312c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	430b      	orrs	r3, r1
 8003126:	431a      	orrs	r2, r3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	601a      	str	r2, [r3, #0]
}
 800312c:	bf00      	nop
 800312e:	371c      	adds	r7, #28
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	58026000 	.word	0x58026000

0800313c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3360      	adds	r3, #96	@ 0x60
 800314a:	461a      	mov	r2, r3
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800315c:	4618      	mov	r0, r3
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f003 031f 	and.w	r3, r3, #31
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	fa01 f303 	lsl.w	r3, r1, r3
 8003188:	431a      	orrs	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	611a      	str	r2, [r3, #16]
}
 800318e:	bf00      	nop
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800319c:	b480      	push	{r7}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4a0c      	ldr	r2, [pc, #48]	@ (80031dc <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d00e      	beq.n	80031ce <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	3360      	adds	r3, #96	@ 0x60
 80031b4:	461a      	mov	r2, r3
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	431a      	orrs	r2, r3
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	601a      	str	r2, [r3, #0]
  }
}
 80031ce:	bf00      	nop
 80031d0:	371c      	adds	r7, #28
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	58026000 	.word	0x58026000

080031e0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b087      	sub	sp, #28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4a0c      	ldr	r2, [pc, #48]	@ (8003220 <LL_ADC_SetOffsetSaturation+0x40>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d10e      	bne.n	8003212 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3360      	adds	r3, #96	@ 0x60
 80031f8:	461a      	mov	r2, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	431a      	orrs	r2, r3
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003212:	bf00      	nop
 8003214:	371c      	adds	r7, #28
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	58026000 	.word	0x58026000

08003224 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4a0c      	ldr	r2, [pc, #48]	@ (8003264 <LL_ADC_SetOffsetSign+0x40>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d10e      	bne.n	8003256 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	3360      	adds	r3, #96	@ 0x60
 800323c:	461a      	mov	r2, r3
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	431a      	orrs	r2, r3
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003256:	bf00      	nop
 8003258:	371c      	adds	r7, #28
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	58026000 	.word	0x58026000

08003268 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	3360      	adds	r3, #96	@ 0x60
 8003278:	461a      	mov	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4a0c      	ldr	r2, [pc, #48]	@ (80032b8 <LL_ADC_SetOffsetState+0x50>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d108      	bne.n	800329c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	431a      	orrs	r2, r3
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800329a:	e007      	b.n	80032ac <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	431a      	orrs	r2, r3
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	601a      	str	r2, [r3, #0]
}
 80032ac:	bf00      	nop
 80032ae:	371c      	adds	r7, #28
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	58026000 	.word	0x58026000

080032bc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b087      	sub	sp, #28
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	60f8      	str	r0, [r7, #12]
 80032ea:	60b9      	str	r1, [r7, #8]
 80032ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	3330      	adds	r3, #48	@ 0x30
 80032f2:	461a      	mov	r2, r3
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	0a1b      	lsrs	r3, r3, #8
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	4413      	add	r3, r2
 8003300:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	f003 031f 	and.w	r3, r3, #31
 800330c:	211f      	movs	r1, #31
 800330e:	fa01 f303 	lsl.w	r3, r1, r3
 8003312:	43db      	mvns	r3, r3
 8003314:	401a      	ands	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	0e9b      	lsrs	r3, r3, #26
 800331a:	f003 011f 	and.w	r1, r3, #31
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f003 031f 	and.w	r3, r3, #31
 8003324:	fa01 f303 	lsl.w	r3, r1, r3
 8003328:	431a      	orrs	r2, r3
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800332e:	bf00      	nop
 8003330:	371c      	adds	r7, #28
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800333a:	b480      	push	{r7}
 800333c:	b087      	sub	sp, #28
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	3314      	adds	r3, #20
 800334a:	461a      	mov	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	0e5b      	lsrs	r3, r3, #25
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	4413      	add	r3, r2
 8003358:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	0d1b      	lsrs	r3, r3, #20
 8003362:	f003 031f 	and.w	r3, r3, #31
 8003366:	2107      	movs	r1, #7
 8003368:	fa01 f303 	lsl.w	r3, r1, r3
 800336c:	43db      	mvns	r3, r3
 800336e:	401a      	ands	r2, r3
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	0d1b      	lsrs	r3, r3, #20
 8003374:	f003 031f 	and.w	r3, r3, #31
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	fa01 f303 	lsl.w	r3, r1, r3
 800337e:	431a      	orrs	r2, r3
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003384:	bf00      	nop
 8003386:	371c      	adds	r7, #28
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4a1a      	ldr	r2, [pc, #104]	@ (8003408 <LL_ADC_SetChannelSingleDiff+0x78>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d115      	bne.n	80033d0 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033b0:	43db      	mvns	r3, r3
 80033b2:	401a      	ands	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f003 0318 	and.w	r3, r3, #24
 80033ba:	4914      	ldr	r1, [pc, #80]	@ (800340c <LL_ADC_SetChannelSingleDiff+0x7c>)
 80033bc:	40d9      	lsrs	r1, r3
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	400b      	ands	r3, r1
 80033c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033c6:	431a      	orrs	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80033ce:	e014      	b.n	80033fa <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033dc:	43db      	mvns	r3, r3
 80033de:	401a      	ands	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f003 0318 	and.w	r3, r3, #24
 80033e6:	4909      	ldr	r1, [pc, #36]	@ (800340c <LL_ADC_SetChannelSingleDiff+0x7c>)
 80033e8:	40d9      	lsrs	r1, r3
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	400b      	ands	r3, r1
 80033ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033f2:	431a      	orrs	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80033fa:	bf00      	nop
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	58026000 	.word	0x58026000
 800340c:	000fffff 	.word	0x000fffff

08003410 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 031f 	and.w	r3, r3, #31
}
 8003420:	4618      	mov	r0, r3
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 800343c:	4618      	mov	r0, r3
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	4b04      	ldr	r3, [pc, #16]	@ (8003468 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003456:	4013      	ands	r3, r2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6093      	str	r3, [r2, #8]
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	5fffffc0 	.word	0x5fffffc0

0800346c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800347c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003480:	d101      	bne.n	8003486 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003482:	2301      	movs	r3, #1
 8003484:	e000      	b.n	8003488 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	4b05      	ldr	r3, [pc, #20]	@ (80034b8 <LL_ADC_EnableInternalRegulator+0x24>)
 80034a2:	4013      	ands	r3, r2
 80034a4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	6fffffc0 	.word	0x6fffffc0

080034bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034d0:	d101      	bne.n	80034d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	4b05      	ldr	r3, [pc, #20]	@ (8003508 <LL_ADC_Enable+0x24>)
 80034f2:	4013      	ands	r3, r2
 80034f4:	f043 0201 	orr.w	r2, r3, #1
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	7fffffc0 	.word	0x7fffffc0

0800350c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	4b05      	ldr	r3, [pc, #20]	@ (8003530 <LL_ADC_Disable+0x24>)
 800351a:	4013      	ands	r3, r2
 800351c:	f043 0202 	orr.w	r2, r3, #2
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	7fffffc0 	.word	0x7fffffc0

08003534 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <LL_ADC_IsEnabled+0x18>
 8003548:	2301      	movs	r3, #1
 800354a:	e000      	b.n	800354e <LL_ADC_IsEnabled+0x1a>
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b02      	cmp	r3, #2
 800356c:	d101      	bne.n	8003572 <LL_ADC_IsDisableOngoing+0x18>
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <LL_ADC_IsDisableOngoing+0x1a>
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	4b05      	ldr	r3, [pc, #20]	@ (80035a4 <LL_ADC_REG_StartConversion+0x24>)
 800358e:	4013      	ands	r3, r2
 8003590:	f043 0204 	orr.w	r2, r3, #4
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	7fffffc0 	.word	0x7fffffc0

080035a8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	4b05      	ldr	r3, [pc, #20]	@ (80035cc <LL_ADC_REG_StopConversion+0x24>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	f043 0210 	orr.w	r2, r3, #16
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	7fffffc0 	.word	0x7fffffc0

080035d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d101      	bne.n	80035e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80035e4:	2301      	movs	r3, #1
 80035e6:	e000      	b.n	80035ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
	...

080035f8 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	4b05      	ldr	r3, [pc, #20]	@ (800361c <LL_ADC_INJ_StopConversion+0x24>)
 8003606:	4013      	ands	r3, r2
 8003608:	f043 0220 	orr.w	r2, r3, #32
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	7fffffc0 	.word	0x7fffffc0

08003620 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 0308 	and.w	r3, r3, #8
 8003630:	2b08      	cmp	r3, #8
 8003632:	d101      	bne.n	8003638 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003634:	2301      	movs	r3, #1
 8003636:	e000      	b.n	800363a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
	...

08003648 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003648:	b590      	push	{r4, r7, lr}
 800364a:	b089      	sub	sp, #36	@ 0x24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003654:	2300      	movs	r3, #0
 8003656:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e1ee      	b.n	8003a40 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800366c:	2b00      	cmp	r3, #0
 800366e:	d109      	bne.n	8003684 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7ff f909 	bl	8002888 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff feef 	bl	800346c <LL_ADC_IsDeepPowerDownEnabled>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d004      	beq.n	800369e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff fed5 	bl	8003448 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff ff0a 	bl	80034bc <LL_ADC_IsInternalRegulatorEnabled>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d114      	bne.n	80036d8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff feee 	bl	8003494 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036b8:	4b8e      	ldr	r3, [pc, #568]	@ (80038f4 <HAL_ADC_Init+0x2ac>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	099b      	lsrs	r3, r3, #6
 80036be:	4a8e      	ldr	r2, [pc, #568]	@ (80038f8 <HAL_ADC_Init+0x2b0>)
 80036c0:	fba2 2303 	umull	r2, r3, r2, r3
 80036c4:	099b      	lsrs	r3, r3, #6
 80036c6:	3301      	adds	r3, #1
 80036c8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80036ca:	e002      	b.n	80036d2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1f9      	bne.n	80036cc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff feed 	bl	80034bc <LL_ADC_IsInternalRegulatorEnabled>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10d      	bne.n	8003704 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ec:	f043 0210 	orr.w	r2, r3, #16
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036f8:	f043 0201 	orr.w	r2, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff ff61 	bl	80035d0 <LL_ADC_REG_IsConversionOngoing>
 800370e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	2b00      	cmp	r3, #0
 800371a:	f040 8188 	bne.w	8003a2e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2b00      	cmp	r3, #0
 8003722:	f040 8184 	bne.w	8003a2e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800372a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800372e:	f043 0202 	orr.w	r2, r3, #2
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff fefa 	bl	8003534 <LL_ADC_IsEnabled>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d136      	bne.n	80037b4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a6c      	ldr	r2, [pc, #432]	@ (80038fc <HAL_ADC_Init+0x2b4>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d004      	beq.n	800375a <HAL_ADC_Init+0x112>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a6a      	ldr	r2, [pc, #424]	@ (8003900 <HAL_ADC_Init+0x2b8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d10e      	bne.n	8003778 <HAL_ADC_Init+0x130>
 800375a:	4868      	ldr	r0, [pc, #416]	@ (80038fc <HAL_ADC_Init+0x2b4>)
 800375c:	f7ff feea 	bl	8003534 <LL_ADC_IsEnabled>
 8003760:	4604      	mov	r4, r0
 8003762:	4867      	ldr	r0, [pc, #412]	@ (8003900 <HAL_ADC_Init+0x2b8>)
 8003764:	f7ff fee6 	bl	8003534 <LL_ADC_IsEnabled>
 8003768:	4603      	mov	r3, r0
 800376a:	4323      	orrs	r3, r4
 800376c:	2b00      	cmp	r3, #0
 800376e:	bf0c      	ite	eq
 8003770:	2301      	moveq	r3, #1
 8003772:	2300      	movne	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	e008      	b.n	800378a <HAL_ADC_Init+0x142>
 8003778:	4862      	ldr	r0, [pc, #392]	@ (8003904 <HAL_ADC_Init+0x2bc>)
 800377a:	f7ff fedb 	bl	8003534 <LL_ADC_IsEnabled>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	bf0c      	ite	eq
 8003784:	2301      	moveq	r3, #1
 8003786:	2300      	movne	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d012      	beq.n	80037b4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a5a      	ldr	r2, [pc, #360]	@ (80038fc <HAL_ADC_Init+0x2b4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d004      	beq.n	80037a2 <HAL_ADC_Init+0x15a>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a58      	ldr	r2, [pc, #352]	@ (8003900 <HAL_ADC_Init+0x2b8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d101      	bne.n	80037a6 <HAL_ADC_Init+0x15e>
 80037a2:	4a59      	ldr	r2, [pc, #356]	@ (8003908 <HAL_ADC_Init+0x2c0>)
 80037a4:	e000      	b.n	80037a8 <HAL_ADC_Init+0x160>
 80037a6:	4a59      	ldr	r2, [pc, #356]	@ (800390c <HAL_ADC_Init+0x2c4>)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	4619      	mov	r1, r3
 80037ae:	4610      	mov	r0, r2
 80037b0:	f7ff fc24 	bl	8002ffc <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a52      	ldr	r2, [pc, #328]	@ (8003904 <HAL_ADC_Init+0x2bc>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d129      	bne.n	8003812 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	7e5b      	ldrb	r3, [r3, #25]
 80037c2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80037c8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80037ce:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d013      	beq.n	8003800 <HAL_ADC_Init+0x1b8>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	2b0c      	cmp	r3, #12
 80037de:	d00d      	beq.n	80037fc <HAL_ADC_Init+0x1b4>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	2b1c      	cmp	r3, #28
 80037e6:	d007      	beq.n	80037f8 <HAL_ADC_Init+0x1b0>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	2b18      	cmp	r3, #24
 80037ee:	d101      	bne.n	80037f4 <HAL_ADC_Init+0x1ac>
 80037f0:	2318      	movs	r3, #24
 80037f2:	e006      	b.n	8003802 <HAL_ADC_Init+0x1ba>
 80037f4:	2300      	movs	r3, #0
 80037f6:	e004      	b.n	8003802 <HAL_ADC_Init+0x1ba>
 80037f8:	2310      	movs	r3, #16
 80037fa:	e002      	b.n	8003802 <HAL_ADC_Init+0x1ba>
 80037fc:	2308      	movs	r3, #8
 80037fe:	e000      	b.n	8003802 <HAL_ADC_Init+0x1ba>
 8003800:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003802:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 3020 	ldrb.w	r3, [r3, #32]
 800380a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800380c:	4313      	orrs	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
 8003810:	e00e      	b.n	8003830 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	7e5b      	ldrb	r3, [r3, #25]
 8003816:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800381c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003822:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3020 	ldrb.w	r3, [r3, #32]
 800382a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800382c:	4313      	orrs	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d106      	bne.n	8003848 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383e:	3b01      	subs	r3, #1
 8003840:	045b      	lsls	r3, r3, #17
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4313      	orrs	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384c:	2b00      	cmp	r3, #0
 800384e:	d009      	beq.n	8003864 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003854:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4313      	orrs	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a26      	ldr	r2, [pc, #152]	@ (8003904 <HAL_ADC_Init+0x2bc>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d115      	bne.n	800389a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68da      	ldr	r2, [r3, #12]
 8003874:	4b26      	ldr	r3, [pc, #152]	@ (8003910 <HAL_ADC_Init+0x2c8>)
 8003876:	4013      	ands	r3, r2
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6812      	ldr	r2, [r2, #0]
 800387c:	69b9      	ldr	r1, [r7, #24]
 800387e:	430b      	orrs	r3, r1
 8003880:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	611a      	str	r2, [r3, #16]
 8003898:	e009      	b.n	80038ae <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	4b1c      	ldr	r3, [pc, #112]	@ (8003914 <HAL_ADC_Init+0x2cc>)
 80038a2:	4013      	ands	r3, r2
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	69b9      	ldr	r1, [r7, #24]
 80038aa:	430b      	orrs	r3, r1
 80038ac:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7ff fe8c 	bl	80035d0 <LL_ADC_REG_IsConversionOngoing>
 80038b8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff feae 	bl	8003620 <LL_ADC_INJ_IsConversionOngoing>
 80038c4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f040 808e 	bne.w	80039ea <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f040 808a 	bne.w	80039ea <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a0a      	ldr	r2, [pc, #40]	@ (8003904 <HAL_ADC_Init+0x2bc>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d11b      	bne.n	8003918 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	7e1b      	ldrb	r3, [r3, #24]
 80038e4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80038ec:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80038ee:	4313      	orrs	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
 80038f2:	e018      	b.n	8003926 <HAL_ADC_Init+0x2de>
 80038f4:	24000008 	.word	0x24000008
 80038f8:	053e2d63 	.word	0x053e2d63
 80038fc:	40022000 	.word	0x40022000
 8003900:	40022100 	.word	0x40022100
 8003904:	58026000 	.word	0x58026000
 8003908:	40022300 	.word	0x40022300
 800390c:	58026300 	.word	0x58026300
 8003910:	fff04007 	.word	0xfff04007
 8003914:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	7e1b      	ldrb	r3, [r3, #24]
 800391c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8003922:	4313      	orrs	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68da      	ldr	r2, [r3, #12]
 800392c:	4b46      	ldr	r3, [pc, #280]	@ (8003a48 <HAL_ADC_Init+0x400>)
 800392e:	4013      	ands	r3, r2
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6812      	ldr	r2, [r2, #0]
 8003934:	69b9      	ldr	r1, [r7, #24]
 8003936:	430b      	orrs	r3, r1
 8003938:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003940:	2b01      	cmp	r3, #1
 8003942:	d137      	bne.n	80039b4 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003948:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a3f      	ldr	r2, [pc, #252]	@ (8003a4c <HAL_ADC_Init+0x404>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d116      	bne.n	8003982 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691a      	ldr	r2, [r3, #16]
 800395a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a50 <HAL_ADC_Init+0x408>)
 800395c:	4013      	ands	r3, r2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003966:	4311      	orrs	r1, r2
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800396c:	4311      	orrs	r1, r2
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003972:	430a      	orrs	r2, r1
 8003974:	431a      	orrs	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	611a      	str	r2, [r3, #16]
 8003980:	e020      	b.n	80039c4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	4b32      	ldr	r3, [pc, #200]	@ (8003a54 <HAL_ADC_Init+0x40c>)
 800398a:	4013      	ands	r3, r2
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003990:	3a01      	subs	r2, #1
 8003992:	0411      	lsls	r1, r2, #16
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003998:	4311      	orrs	r1, r2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800399e:	4311      	orrs	r1, r2
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80039a4:	430a      	orrs	r2, r1
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 0201 	orr.w	r2, r2, #1
 80039b0:	611a      	str	r2, [r3, #16]
 80039b2:	e007      	b.n	80039c4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691a      	ldr	r2, [r3, #16]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0201 	bic.w	r2, r2, #1
 80039c2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a1b      	ldr	r2, [pc, #108]	@ (8003a4c <HAL_ADC_Init+0x404>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d002      	beq.n	80039ea <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f001 f8b1 	bl	8004b4c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d10c      	bne.n	8003a0c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f8:	f023 010f 	bic.w	r1, r3, #15
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	1e5a      	subs	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a0a:	e007      	b.n	8003a1c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 020f 	bic.w	r2, r2, #15
 8003a1a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a20:	f023 0303 	bic.w	r3, r3, #3
 8003a24:	f043 0201 	orr.w	r2, r3, #1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	661a      	str	r2, [r3, #96]	@ 0x60
 8003a2c:	e007      	b.n	8003a3e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a32:	f043 0210 	orr.w	r2, r3, #16
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3724      	adds	r7, #36	@ 0x24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd90      	pop	{r4, r7, pc}
 8003a48:	ffffbffc 	.word	0xffffbffc
 8003a4c:	58026000 	.word	0x58026000
 8003a50:	fc00f81f 	.word	0xfc00f81f
 8003a54:	fc00f81e 	.word	0xfc00f81e

08003a58 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a5c      	ldr	r2, [pc, #368]	@ (8003bd8 <HAL_ADC_Start+0x180>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d004      	beq.n	8003a74 <HAL_ADC_Start+0x1c>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a5b      	ldr	r2, [pc, #364]	@ (8003bdc <HAL_ADC_Start+0x184>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d101      	bne.n	8003a78 <HAL_ADC_Start+0x20>
 8003a74:	4b5a      	ldr	r3, [pc, #360]	@ (8003be0 <HAL_ADC_Start+0x188>)
 8003a76:	e000      	b.n	8003a7a <HAL_ADC_Start+0x22>
 8003a78:	4b5a      	ldr	r3, [pc, #360]	@ (8003be4 <HAL_ADC_Start+0x18c>)
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff fcc8 	bl	8003410 <LL_ADC_GetMultimode>
 8003a80:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff fda2 	bl	80035d0 <LL_ADC_REG_IsConversionOngoing>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f040 809a 	bne.w	8003bc8 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_ADC_Start+0x4a>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e095      	b.n	8003bce <HAL_ADC_Start+0x176>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 ff64 	bl	8004978 <ADC_Enable>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003ab4:	7dfb      	ldrb	r3, [r7, #23]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f040 8081 	bne.w	8003bbe <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003ac0:	4b49      	ldr	r3, [pc, #292]	@ (8003be8 <HAL_ADC_Start+0x190>)
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a42      	ldr	r2, [pc, #264]	@ (8003bdc <HAL_ADC_Start+0x184>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d002      	beq.n	8003adc <HAL_ADC_Start+0x84>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	e000      	b.n	8003ade <HAL_ADC_Start+0x86>
 8003adc:	4b3e      	ldr	r3, [pc, #248]	@ (8003bd8 <HAL_ADC_Start+0x180>)
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6812      	ldr	r2, [r2, #0]
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d002      	beq.n	8003aec <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d105      	bne.n	8003af8 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003afc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b04:	d106      	bne.n	8003b14 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b0a:	f023 0206 	bic.w	r2, r3, #6
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	665a      	str	r2, [r3, #100]	@ 0x64
 8003b12:	e002      	b.n	8003b1a <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	221c      	movs	r2, #28
 8003b20:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a2b      	ldr	r2, [pc, #172]	@ (8003bdc <HAL_ADC_Start+0x184>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d002      	beq.n	8003b3a <HAL_ADC_Start+0xe2>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	e000      	b.n	8003b3c <HAL_ADC_Start+0xe4>
 8003b3a:	4b27      	ldr	r3, [pc, #156]	@ (8003bd8 <HAL_ADC_Start+0x180>)
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d008      	beq.n	8003b56 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d005      	beq.n	8003b56 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	2b05      	cmp	r3, #5
 8003b4e:	d002      	beq.n	8003b56 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	2b09      	cmp	r3, #9
 8003b54:	d114      	bne.n	8003b80 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d007      	beq.n	8003b74 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b68:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003b6c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff fd01 	bl	8003580 <LL_ADC_REG_StartConversion>
 8003b7e:	e025      	b.n	8003bcc <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b84:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a12      	ldr	r2, [pc, #72]	@ (8003bdc <HAL_ADC_Start+0x184>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d002      	beq.n	8003b9c <HAL_ADC_Start+0x144>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	e000      	b.n	8003b9e <HAL_ADC_Start+0x146>
 8003b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8003bd8 <HAL_ADC_Start+0x180>)
 8003b9e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00f      	beq.n	8003bcc <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bb0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003bb4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	661a      	str	r2, [r3, #96]	@ 0x60
 8003bbc:	e006      	b.n	8003bcc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003bc6:	e001      	b.n	8003bcc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40022000 	.word	0x40022000
 8003bdc:	40022100 	.word	0x40022100
 8003be0:	40022300 	.word	0x40022300
 8003be4:	58026300 	.word	0x58026300
 8003be8:	fffff0fe 	.word	0xfffff0fe

08003bec <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d101      	bne.n	8003c02 <HAL_ADC_Stop+0x16>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e021      	b.n	8003c46 <HAL_ADC_Stop+0x5a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003c0a:	2103      	movs	r1, #3
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 fdf7 	bl	8004800 <ADC_ConversionStop>
 8003c12:	4603      	mov	r3, r0
 8003c14:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003c16:	7bfb      	ldrb	r3, [r7, #15]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10f      	bne.n	8003c3c <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 ff35 	bl	8004a8c <ADC_Disable>
 8003c22:	4603      	mov	r3, r0
 8003c24:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d107      	bne.n	8003c3c <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003c30:	4b07      	ldr	r3, [pc, #28]	@ (8003c50 <HAL_ADC_Stop+0x64>)
 8003c32:	4013      	ands	r3, r2
 8003c34:	f043 0201 	orr.w	r2, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	ffffeefe 	.word	0xffffeefe

08003c54 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b088      	sub	sp, #32
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a72      	ldr	r2, [pc, #456]	@ (8003e2c <HAL_ADC_PollForConversion+0x1d8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d004      	beq.n	8003c72 <HAL_ADC_PollForConversion+0x1e>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a70      	ldr	r2, [pc, #448]	@ (8003e30 <HAL_ADC_PollForConversion+0x1dc>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d101      	bne.n	8003c76 <HAL_ADC_PollForConversion+0x22>
 8003c72:	4b70      	ldr	r3, [pc, #448]	@ (8003e34 <HAL_ADC_PollForConversion+0x1e0>)
 8003c74:	e000      	b.n	8003c78 <HAL_ADC_PollForConversion+0x24>
 8003c76:	4b70      	ldr	r3, [pc, #448]	@ (8003e38 <HAL_ADC_PollForConversion+0x1e4>)
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff fbc9 	bl	8003410 <LL_ADC_GetMultimode>
 8003c7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d102      	bne.n	8003c8e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003c88:	2308      	movs	r3, #8
 8003c8a:	61fb      	str	r3, [r7, #28]
 8003c8c:	e037      	b.n	8003cfe <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	2b05      	cmp	r3, #5
 8003c98:	d002      	beq.n	8003ca0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2b09      	cmp	r3, #9
 8003c9e:	d111      	bne.n	8003cc4 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d007      	beq.n	8003cbe <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb2:	f043 0220 	orr.w	r2, r3, #32
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e0b1      	b.n	8003e22 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003cbe:	2304      	movs	r3, #4
 8003cc0:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003cc2:	e01c      	b.n	8003cfe <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a58      	ldr	r2, [pc, #352]	@ (8003e2c <HAL_ADC_PollForConversion+0x1d8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d004      	beq.n	8003cd8 <HAL_ADC_PollForConversion+0x84>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a57      	ldr	r2, [pc, #348]	@ (8003e30 <HAL_ADC_PollForConversion+0x1dc>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d101      	bne.n	8003cdc <HAL_ADC_PollForConversion+0x88>
 8003cd8:	4b56      	ldr	r3, [pc, #344]	@ (8003e34 <HAL_ADC_PollForConversion+0x1e0>)
 8003cda:	e000      	b.n	8003cde <HAL_ADC_PollForConversion+0x8a>
 8003cdc:	4b56      	ldr	r3, [pc, #344]	@ (8003e38 <HAL_ADC_PollForConversion+0x1e4>)
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff fba4 	bl	800342c <LL_ADC_GetMultiDMATransfer>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d007      	beq.n	8003cfa <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cee:	f043 0220 	orr.w	r2, r3, #32
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e093      	b.n	8003e22 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003cfa:	2304      	movs	r3, #4
 8003cfc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003cfe:	f7ff f971 	bl	8002fe4 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003d04:	e021      	b.n	8003d4a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0c:	d01d      	beq.n	8003d4a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003d0e:	f7ff f969 	bl	8002fe4 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d302      	bcc.n	8003d24 <HAL_ADC_PollForConversion+0xd0>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d112      	bne.n	8003d4a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10b      	bne.n	8003d4a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d36:	f043 0204 	orr.w	r2, r3, #4
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e06b      	b.n	8003e22 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	4013      	ands	r3, r2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0d6      	beq.n	8003d06 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d5c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff faa7 	bl	80032bc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d01c      	beq.n	8003dae <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	7e5b      	ldrb	r3, [r3, #25]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d118      	bne.n	8003dae <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0308 	and.w	r3, r3, #8
 8003d86:	2b08      	cmp	r3, #8
 8003d88:	d111      	bne.n	8003dae <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d8e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d105      	bne.n	8003dae <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003da6:	f043 0201 	orr.w	r2, r3, #1
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a1f      	ldr	r2, [pc, #124]	@ (8003e30 <HAL_ADC_PollForConversion+0x1dc>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d002      	beq.n	8003dbe <HAL_ADC_PollForConversion+0x16a>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	e000      	b.n	8003dc0 <HAL_ADC_PollForConversion+0x16c>
 8003dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8003e2c <HAL_ADC_PollForConversion+0x1d8>)
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d008      	beq.n	8003dda <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d005      	beq.n	8003dda <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2b05      	cmp	r3, #5
 8003dd2:	d002      	beq.n	8003dda <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	2b09      	cmp	r3, #9
 8003dd8:	d104      	bne.n	8003de4 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	61bb      	str	r3, [r7, #24]
 8003de2:	e00c      	b.n	8003dfe <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a11      	ldr	r2, [pc, #68]	@ (8003e30 <HAL_ADC_PollForConversion+0x1dc>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d002      	beq.n	8003df4 <HAL_ADC_PollForConversion+0x1a0>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	e000      	b.n	8003df6 <HAL_ADC_PollForConversion+0x1a2>
 8003df4:	4b0d      	ldr	r3, [pc, #52]	@ (8003e2c <HAL_ADC_PollForConversion+0x1d8>)
 8003df6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	d104      	bne.n	8003e0e <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2208      	movs	r2, #8
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	e008      	b.n	8003e20 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d103      	bne.n	8003e20 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	220c      	movs	r2, #12
 8003e1e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3720      	adds	r7, #32
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40022000 	.word	0x40022000
 8003e30:	40022100 	.word	0x40022100
 8003e34:	40022300 	.word	0x40022300
 8003e38:	58026300 	.word	0x58026300

08003e3c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
	...

08003e58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003e58:	b590      	push	{r4, r7, lr}
 8003e5a:	b0a5      	sub	sp, #148	@ 0x94
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e72:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	4aa4      	ldr	r2, [pc, #656]	@ (800410c <HAL_ADC_ConfigChannel+0x2b4>)
 8003e7a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d102      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x34>
 8003e86:	2302      	movs	r3, #2
 8003e88:	f000 bca2 	b.w	80047d0 <HAL_ADC_ConfigChannel+0x978>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff fb99 	bl	80035d0 <LL_ADC_REG_IsConversionOngoing>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f040 8486 	bne.w	80047b2 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	db31      	blt.n	8003f12 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a97      	ldr	r2, [pc, #604]	@ (8004110 <HAL_ADC_ConfigChannel+0x2b8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d02c      	beq.n	8003f12 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d108      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x7e>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	0e9b      	lsrs	r3, r3, #26
 8003eca:	f003 031f 	and.w	r3, r3, #31
 8003ece:	2201      	movs	r2, #1
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	e016      	b.n	8003f04 <HAL_ADC_ConfigChannel+0xac>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003edc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ede:	fa93 f3a3 	rbit	r3, r3
 8003ee2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003ee4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ee6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003ee8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 8003eee:	2320      	movs	r3, #32
 8003ef0:	e003      	b.n	8003efa <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8003ef2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ef4:	fab3 f383 	clz	r3, r3
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	f003 031f 	and.w	r3, r3, #31
 8003efe:	2201      	movs	r2, #1
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6812      	ldr	r2, [r2, #0]
 8003f08:	69d1      	ldr	r1, [r2, #28]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6812      	ldr	r2, [r2, #0]
 8003f0e:	430b      	orrs	r3, r1
 8003f10:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6818      	ldr	r0, [r3, #0]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	6859      	ldr	r1, [r3, #4]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f7ff f9df 	bl	80032e2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff fb51 	bl	80035d0 <LL_ADC_REG_IsConversionOngoing>
 8003f2e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff fb72 	bl	8003620 <LL_ADC_INJ_IsConversionOngoing>
 8003f3c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f040 824a 	bne.w	80043de <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f040 8245 	bne.w	80043de <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6818      	ldr	r0, [r3, #0]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	6819      	ldr	r1, [r3, #0]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	461a      	mov	r2, r3
 8003f62:	f7ff f9ea 	bl	800333a <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a69      	ldr	r2, [pc, #420]	@ (8004110 <HAL_ADC_ConfigChannel+0x2b8>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d10d      	bne.n	8003f8c <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	695a      	ldr	r2, [r3, #20]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	08db      	lsrs	r3, r3, #3
 8003f7c:	f003 0303 	and.w	r3, r3, #3
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f8a:	e032      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003f8c:	4b61      	ldr	r3, [pc, #388]	@ (8004114 <HAL_ADC_ConfigChannel+0x2bc>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003f94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f98:	d10b      	bne.n	8003fb2 <HAL_ADC_ConfigChannel+0x15a>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	695a      	ldr	r2, [r3, #20]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	089b      	lsrs	r3, r3, #2
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	e01d      	b.n	8003fee <HAL_ADC_ConfigChannel+0x196>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f003 0310 	and.w	r3, r3, #16
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10b      	bne.n	8003fd8 <HAL_ADC_ConfigChannel+0x180>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	695a      	ldr	r2, [r3, #20]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	089b      	lsrs	r3, r3, #2
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	e00a      	b.n	8003fee <HAL_ADC_ConfigChannel+0x196>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	089b      	lsrs	r3, r3, #2
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d048      	beq.n	800408c <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6818      	ldr	r0, [r3, #0]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	6919      	ldr	r1, [r3, #16]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800400a:	f7ff f865 	bl	80030d8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a3f      	ldr	r2, [pc, #252]	@ (8004110 <HAL_ADC_ConfigChannel+0x2b8>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d119      	bne.n	800404c <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	6919      	ldr	r1, [r3, #16]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	461a      	mov	r2, r3
 8004026:	f7ff f8fd 	bl	8003224 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6818      	ldr	r0, [r3, #0]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	6919      	ldr	r1, [r3, #16]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d102      	bne.n	8004042 <HAL_ADC_ConfigChannel+0x1ea>
 800403c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004040:	e000      	b.n	8004044 <HAL_ADC_ConfigChannel+0x1ec>
 8004042:	2300      	movs	r3, #0
 8004044:	461a      	mov	r2, r3
 8004046:	f7ff f8cb 	bl	80031e0 <LL_ADC_SetOffsetSaturation>
 800404a:	e1c8      	b.n	80043de <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6818      	ldr	r0, [r3, #0]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	6919      	ldr	r1, [r3, #16]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800405a:	2b01      	cmp	r3, #1
 800405c:	d102      	bne.n	8004064 <HAL_ADC_ConfigChannel+0x20c>
 800405e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004062:	e000      	b.n	8004066 <HAL_ADC_ConfigChannel+0x20e>
 8004064:	2300      	movs	r3, #0
 8004066:	461a      	mov	r2, r3
 8004068:	f7ff f898 	bl	800319c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6818      	ldr	r0, [r3, #0]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	6919      	ldr	r1, [r3, #16]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	7e1b      	ldrb	r3, [r3, #24]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d102      	bne.n	8004082 <HAL_ADC_ConfigChannel+0x22a>
 800407c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004080:	e000      	b.n	8004084 <HAL_ADC_ConfigChannel+0x22c>
 8004082:	2300      	movs	r3, #0
 8004084:	461a      	mov	r2, r3
 8004086:	f7ff f86f 	bl	8003168 <LL_ADC_SetDataRightShift>
 800408a:	e1a8      	b.n	80043de <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a1f      	ldr	r2, [pc, #124]	@ (8004110 <HAL_ADC_ConfigChannel+0x2b8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	f040 815b 	bne.w	800434e <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2100      	movs	r1, #0
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff f84c 	bl	800313c <LL_ADC_GetOffsetChannel>
 80040a4:	4603      	mov	r3, r0
 80040a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10a      	bne.n	80040c4 <HAL_ADC_ConfigChannel+0x26c>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2100      	movs	r1, #0
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff f841 	bl	800313c <LL_ADC_GetOffsetChannel>
 80040ba:	4603      	mov	r3, r0
 80040bc:	0e9b      	lsrs	r3, r3, #26
 80040be:	f003 021f 	and.w	r2, r3, #31
 80040c2:	e017      	b.n	80040f4 <HAL_ADC_ConfigChannel+0x29c>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2100      	movs	r1, #0
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7ff f836 	bl	800313c <LL_ADC_GetOffsetChannel>
 80040d0:	4603      	mov	r3, r0
 80040d2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040d6:	fa93 f3a3 	rbit	r3, r3
 80040da:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80040dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80040e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80040e6:	2320      	movs	r3, #32
 80040e8:	e003      	b.n	80040f2 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 80040ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040ec:	fab3 f383 	clz	r3, r3
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	461a      	mov	r2, r3
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10b      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x2c0>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	0e9b      	lsrs	r3, r3, #26
 8004106:	f003 031f 	and.w	r3, r3, #31
 800410a:	e017      	b.n	800413c <HAL_ADC_ConfigChannel+0x2e4>
 800410c:	47ff0000 	.word	0x47ff0000
 8004110:	58026000 	.word	0x58026000
 8004114:	5c001000 	.word	0x5c001000
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004120:	fa93 f3a3 	rbit	r3, r3
 8004124:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004126:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004128:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800412a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8004130:	2320      	movs	r3, #32
 8004132:	e003      	b.n	800413c <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8004134:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004136:	fab3 f383 	clz	r3, r3
 800413a:	b2db      	uxtb	r3, r3
 800413c:	429a      	cmp	r2, r3
 800413e:	d106      	bne.n	800414e <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2200      	movs	r2, #0
 8004146:	2100      	movs	r1, #0
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff f88d 	bl	8003268 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2101      	movs	r1, #1
 8004154:	4618      	mov	r0, r3
 8004156:	f7fe fff1 	bl	800313c <LL_ADC_GetOffsetChannel>
 800415a:	4603      	mov	r3, r0
 800415c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10a      	bne.n	800417a <HAL_ADC_ConfigChannel+0x322>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2101      	movs	r1, #1
 800416a:	4618      	mov	r0, r3
 800416c:	f7fe ffe6 	bl	800313c <LL_ADC_GetOffsetChannel>
 8004170:	4603      	mov	r3, r0
 8004172:	0e9b      	lsrs	r3, r3, #26
 8004174:	f003 021f 	and.w	r2, r3, #31
 8004178:	e017      	b.n	80041aa <HAL_ADC_ConfigChannel+0x352>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2101      	movs	r1, #1
 8004180:	4618      	mov	r0, r3
 8004182:	f7fe ffdb 	bl	800313c <LL_ADC_GetOffsetChannel>
 8004186:	4603      	mov	r3, r0
 8004188:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800418c:	fa93 f3a3 	rbit	r3, r3
 8004190:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004194:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 800419c:	2320      	movs	r3, #32
 800419e:	e003      	b.n	80041a8 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 80041a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041a2:	fab3 f383 	clz	r3, r3
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	461a      	mov	r2, r3
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d105      	bne.n	80041c2 <HAL_ADC_ConfigChannel+0x36a>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	0e9b      	lsrs	r3, r3, #26
 80041bc:	f003 031f 	and.w	r3, r3, #31
 80041c0:	e011      	b.n	80041e6 <HAL_ADC_ConfigChannel+0x38e>
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041ca:	fa93 f3a3 	rbit	r3, r3
 80041ce:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80041d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80041d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80041da:	2320      	movs	r3, #32
 80041dc:	e003      	b.n	80041e6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80041de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041e0:	fab3 f383 	clz	r3, r3
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d106      	bne.n	80041f8 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2200      	movs	r2, #0
 80041f0:	2101      	movs	r1, #1
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff f838 	bl	8003268 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2102      	movs	r1, #2
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fe ff9c 	bl	800313c <LL_ADC_GetOffsetChannel>
 8004204:	4603      	mov	r3, r0
 8004206:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10a      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x3cc>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2102      	movs	r1, #2
 8004214:	4618      	mov	r0, r3
 8004216:	f7fe ff91 	bl	800313c <LL_ADC_GetOffsetChannel>
 800421a:	4603      	mov	r3, r0
 800421c:	0e9b      	lsrs	r3, r3, #26
 800421e:	f003 021f 	and.w	r2, r3, #31
 8004222:	e017      	b.n	8004254 <HAL_ADC_ConfigChannel+0x3fc>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2102      	movs	r1, #2
 800422a:	4618      	mov	r0, r3
 800422c:	f7fe ff86 	bl	800313c <LL_ADC_GetOffsetChannel>
 8004230:	4603      	mov	r3, r0
 8004232:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004236:	fa93 f3a3 	rbit	r3, r3
 800423a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800423c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800423e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8004246:	2320      	movs	r3, #32
 8004248:	e003      	b.n	8004252 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800424a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800424c:	fab3 f383 	clz	r3, r3
 8004250:	b2db      	uxtb	r3, r3
 8004252:	461a      	mov	r2, r3
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800425c:	2b00      	cmp	r3, #0
 800425e:	d105      	bne.n	800426c <HAL_ADC_ConfigChannel+0x414>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	0e9b      	lsrs	r3, r3, #26
 8004266:	f003 031f 	and.w	r3, r3, #31
 800426a:	e011      	b.n	8004290 <HAL_ADC_ConfigChannel+0x438>
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004274:	fa93 f3a3 	rbit	r3, r3
 8004278:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800427a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800427c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800427e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8004284:	2320      	movs	r3, #32
 8004286:	e003      	b.n	8004290 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8004288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428a:	fab3 f383 	clz	r3, r3
 800428e:	b2db      	uxtb	r3, r3
 8004290:	429a      	cmp	r2, r3
 8004292:	d106      	bne.n	80042a2 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2200      	movs	r2, #0
 800429a:	2102      	movs	r1, #2
 800429c:	4618      	mov	r0, r3
 800429e:	f7fe ffe3 	bl	8003268 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2103      	movs	r1, #3
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7fe ff47 	bl	800313c <LL_ADC_GetOffsetChannel>
 80042ae:	4603      	mov	r3, r0
 80042b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10a      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x476>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2103      	movs	r1, #3
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fe ff3c 	bl	800313c <LL_ADC_GetOffsetChannel>
 80042c4:	4603      	mov	r3, r0
 80042c6:	0e9b      	lsrs	r3, r3, #26
 80042c8:	f003 021f 	and.w	r2, r3, #31
 80042cc:	e017      	b.n	80042fe <HAL_ADC_ConfigChannel+0x4a6>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2103      	movs	r1, #3
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7fe ff31 	bl	800313c <LL_ADC_GetOffsetChannel>
 80042da:	4603      	mov	r3, r0
 80042dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042de:	6a3b      	ldr	r3, [r7, #32]
 80042e0:	fa93 f3a3 	rbit	r3, r3
 80042e4:	61fb      	str	r3, [r7, #28]
  return result;
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80042ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80042f0:	2320      	movs	r3, #32
 80042f2:	e003      	b.n	80042fc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80042f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f6:	fab3 f383 	clz	r3, r3
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	461a      	mov	r2, r3
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004306:	2b00      	cmp	r3, #0
 8004308:	d105      	bne.n	8004316 <HAL_ADC_ConfigChannel+0x4be>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	0e9b      	lsrs	r3, r3, #26
 8004310:	f003 031f 	and.w	r3, r3, #31
 8004314:	e011      	b.n	800433a <HAL_ADC_ConfigChannel+0x4e2>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	fa93 f3a3 	rbit	r3, r3
 8004322:	613b      	str	r3, [r7, #16]
  return result;
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 800432e:	2320      	movs	r3, #32
 8004330:	e003      	b.n	800433a <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	fab3 f383 	clz	r3, r3
 8004338:	b2db      	uxtb	r3, r3
 800433a:	429a      	cmp	r2, r3
 800433c:	d14f      	bne.n	80043de <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2200      	movs	r2, #0
 8004344:	2103      	movs	r1, #3
 8004346:	4618      	mov	r0, r3
 8004348:	f7fe ff8e 	bl	8003268 <LL_ADC_SetOffsetState>
 800434c:	e047      	b.n	80043de <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004354:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	069b      	lsls	r3, r3, #26
 800435e:	429a      	cmp	r2, r3
 8004360:	d107      	bne.n	8004372 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004370:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004378:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	069b      	lsls	r3, r3, #26
 8004382:	429a      	cmp	r2, r3
 8004384:	d107      	bne.n	8004396 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004394:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800439c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	069b      	lsls	r3, r3, #26
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d107      	bne.n	80043ba <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80043b8:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	069b      	lsls	r3, r3, #26
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d107      	bne.n	80043de <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80043dc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7ff f8a6 	bl	8003534 <LL_ADC_IsEnabled>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f040 81ea 	bne.w	80047c4 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6818      	ldr	r0, [r3, #0]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	6819      	ldr	r1, [r3, #0]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	461a      	mov	r2, r3
 80043fe:	f7fe ffc7 	bl	8003390 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	4a7a      	ldr	r2, [pc, #488]	@ (80045f0 <HAL_ADC_ConfigChannel+0x798>)
 8004408:	4293      	cmp	r3, r2
 800440a:	f040 80e0 	bne.w	80045ce <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4977      	ldr	r1, [pc, #476]	@ (80045f4 <HAL_ADC_ConfigChannel+0x79c>)
 8004418:	428b      	cmp	r3, r1
 800441a:	d147      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x654>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4975      	ldr	r1, [pc, #468]	@ (80045f8 <HAL_ADC_ConfigChannel+0x7a0>)
 8004422:	428b      	cmp	r3, r1
 8004424:	d040      	beq.n	80044a8 <HAL_ADC_ConfigChannel+0x650>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4974      	ldr	r1, [pc, #464]	@ (80045fc <HAL_ADC_ConfigChannel+0x7a4>)
 800442c:	428b      	cmp	r3, r1
 800442e:	d039      	beq.n	80044a4 <HAL_ADC_ConfigChannel+0x64c>
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4972      	ldr	r1, [pc, #456]	@ (8004600 <HAL_ADC_ConfigChannel+0x7a8>)
 8004436:	428b      	cmp	r3, r1
 8004438:	d032      	beq.n	80044a0 <HAL_ADC_ConfigChannel+0x648>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4971      	ldr	r1, [pc, #452]	@ (8004604 <HAL_ADC_ConfigChannel+0x7ac>)
 8004440:	428b      	cmp	r3, r1
 8004442:	d02b      	beq.n	800449c <HAL_ADC_ConfigChannel+0x644>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	496f      	ldr	r1, [pc, #444]	@ (8004608 <HAL_ADC_ConfigChannel+0x7b0>)
 800444a:	428b      	cmp	r3, r1
 800444c:	d024      	beq.n	8004498 <HAL_ADC_ConfigChannel+0x640>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	496e      	ldr	r1, [pc, #440]	@ (800460c <HAL_ADC_ConfigChannel+0x7b4>)
 8004454:	428b      	cmp	r3, r1
 8004456:	d01d      	beq.n	8004494 <HAL_ADC_ConfigChannel+0x63c>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	496c      	ldr	r1, [pc, #432]	@ (8004610 <HAL_ADC_ConfigChannel+0x7b8>)
 800445e:	428b      	cmp	r3, r1
 8004460:	d016      	beq.n	8004490 <HAL_ADC_ConfigChannel+0x638>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	496b      	ldr	r1, [pc, #428]	@ (8004614 <HAL_ADC_ConfigChannel+0x7bc>)
 8004468:	428b      	cmp	r3, r1
 800446a:	d00f      	beq.n	800448c <HAL_ADC_ConfigChannel+0x634>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4969      	ldr	r1, [pc, #420]	@ (8004618 <HAL_ADC_ConfigChannel+0x7c0>)
 8004472:	428b      	cmp	r3, r1
 8004474:	d008      	beq.n	8004488 <HAL_ADC_ConfigChannel+0x630>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4968      	ldr	r1, [pc, #416]	@ (800461c <HAL_ADC_ConfigChannel+0x7c4>)
 800447c:	428b      	cmp	r3, r1
 800447e:	d101      	bne.n	8004484 <HAL_ADC_ConfigChannel+0x62c>
 8004480:	4b67      	ldr	r3, [pc, #412]	@ (8004620 <HAL_ADC_ConfigChannel+0x7c8>)
 8004482:	e0a0      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 8004484:	2300      	movs	r3, #0
 8004486:	e09e      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 8004488:	4b66      	ldr	r3, [pc, #408]	@ (8004624 <HAL_ADC_ConfigChannel+0x7cc>)
 800448a:	e09c      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 800448c:	4b66      	ldr	r3, [pc, #408]	@ (8004628 <HAL_ADC_ConfigChannel+0x7d0>)
 800448e:	e09a      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 8004490:	4b60      	ldr	r3, [pc, #384]	@ (8004614 <HAL_ADC_ConfigChannel+0x7bc>)
 8004492:	e098      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 8004494:	4b5e      	ldr	r3, [pc, #376]	@ (8004610 <HAL_ADC_ConfigChannel+0x7b8>)
 8004496:	e096      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 8004498:	4b64      	ldr	r3, [pc, #400]	@ (800462c <HAL_ADC_ConfigChannel+0x7d4>)
 800449a:	e094      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 800449c:	4b64      	ldr	r3, [pc, #400]	@ (8004630 <HAL_ADC_ConfigChannel+0x7d8>)
 800449e:	e092      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 80044a0:	4b64      	ldr	r3, [pc, #400]	@ (8004634 <HAL_ADC_ConfigChannel+0x7dc>)
 80044a2:	e090      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 80044a4:	4b64      	ldr	r3, [pc, #400]	@ (8004638 <HAL_ADC_ConfigChannel+0x7e0>)
 80044a6:	e08e      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 80044a8:	2301      	movs	r3, #1
 80044aa:	e08c      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4962      	ldr	r1, [pc, #392]	@ (800463c <HAL_ADC_ConfigChannel+0x7e4>)
 80044b2:	428b      	cmp	r3, r1
 80044b4:	d140      	bne.n	8004538 <HAL_ADC_ConfigChannel+0x6e0>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	494f      	ldr	r1, [pc, #316]	@ (80045f8 <HAL_ADC_ConfigChannel+0x7a0>)
 80044bc:	428b      	cmp	r3, r1
 80044be:	d039      	beq.n	8004534 <HAL_ADC_ConfigChannel+0x6dc>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	494d      	ldr	r1, [pc, #308]	@ (80045fc <HAL_ADC_ConfigChannel+0x7a4>)
 80044c6:	428b      	cmp	r3, r1
 80044c8:	d032      	beq.n	8004530 <HAL_ADC_ConfigChannel+0x6d8>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	494c      	ldr	r1, [pc, #304]	@ (8004600 <HAL_ADC_ConfigChannel+0x7a8>)
 80044d0:	428b      	cmp	r3, r1
 80044d2:	d02b      	beq.n	800452c <HAL_ADC_ConfigChannel+0x6d4>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	494a      	ldr	r1, [pc, #296]	@ (8004604 <HAL_ADC_ConfigChannel+0x7ac>)
 80044da:	428b      	cmp	r3, r1
 80044dc:	d024      	beq.n	8004528 <HAL_ADC_ConfigChannel+0x6d0>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4949      	ldr	r1, [pc, #292]	@ (8004608 <HAL_ADC_ConfigChannel+0x7b0>)
 80044e4:	428b      	cmp	r3, r1
 80044e6:	d01d      	beq.n	8004524 <HAL_ADC_ConfigChannel+0x6cc>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4947      	ldr	r1, [pc, #284]	@ (800460c <HAL_ADC_ConfigChannel+0x7b4>)
 80044ee:	428b      	cmp	r3, r1
 80044f0:	d016      	beq.n	8004520 <HAL_ADC_ConfigChannel+0x6c8>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4946      	ldr	r1, [pc, #280]	@ (8004610 <HAL_ADC_ConfigChannel+0x7b8>)
 80044f8:	428b      	cmp	r3, r1
 80044fa:	d00f      	beq.n	800451c <HAL_ADC_ConfigChannel+0x6c4>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4944      	ldr	r1, [pc, #272]	@ (8004614 <HAL_ADC_ConfigChannel+0x7bc>)
 8004502:	428b      	cmp	r3, r1
 8004504:	d008      	beq.n	8004518 <HAL_ADC_ConfigChannel+0x6c0>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4944      	ldr	r1, [pc, #272]	@ (800461c <HAL_ADC_ConfigChannel+0x7c4>)
 800450c:	428b      	cmp	r3, r1
 800450e:	d101      	bne.n	8004514 <HAL_ADC_ConfigChannel+0x6bc>
 8004510:	4b43      	ldr	r3, [pc, #268]	@ (8004620 <HAL_ADC_ConfigChannel+0x7c8>)
 8004512:	e058      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 8004514:	2300      	movs	r3, #0
 8004516:	e056      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 8004518:	4b43      	ldr	r3, [pc, #268]	@ (8004628 <HAL_ADC_ConfigChannel+0x7d0>)
 800451a:	e054      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 800451c:	4b3d      	ldr	r3, [pc, #244]	@ (8004614 <HAL_ADC_ConfigChannel+0x7bc>)
 800451e:	e052      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 8004520:	4b3b      	ldr	r3, [pc, #236]	@ (8004610 <HAL_ADC_ConfigChannel+0x7b8>)
 8004522:	e050      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 8004524:	4b41      	ldr	r3, [pc, #260]	@ (800462c <HAL_ADC_ConfigChannel+0x7d4>)
 8004526:	e04e      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 8004528:	4b41      	ldr	r3, [pc, #260]	@ (8004630 <HAL_ADC_ConfigChannel+0x7d8>)
 800452a:	e04c      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 800452c:	4b41      	ldr	r3, [pc, #260]	@ (8004634 <HAL_ADC_ConfigChannel+0x7dc>)
 800452e:	e04a      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 8004530:	4b41      	ldr	r3, [pc, #260]	@ (8004638 <HAL_ADC_ConfigChannel+0x7e0>)
 8004532:	e048      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 8004534:	2301      	movs	r3, #1
 8004536:	e046      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4940      	ldr	r1, [pc, #256]	@ (8004640 <HAL_ADC_ConfigChannel+0x7e8>)
 800453e:	428b      	cmp	r3, r1
 8004540:	d140      	bne.n	80045c4 <HAL_ADC_ConfigChannel+0x76c>
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	492c      	ldr	r1, [pc, #176]	@ (80045f8 <HAL_ADC_ConfigChannel+0x7a0>)
 8004548:	428b      	cmp	r3, r1
 800454a:	d039      	beq.n	80045c0 <HAL_ADC_ConfigChannel+0x768>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	492a      	ldr	r1, [pc, #168]	@ (80045fc <HAL_ADC_ConfigChannel+0x7a4>)
 8004552:	428b      	cmp	r3, r1
 8004554:	d032      	beq.n	80045bc <HAL_ADC_ConfigChannel+0x764>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4929      	ldr	r1, [pc, #164]	@ (8004600 <HAL_ADC_ConfigChannel+0x7a8>)
 800455c:	428b      	cmp	r3, r1
 800455e:	d02b      	beq.n	80045b8 <HAL_ADC_ConfigChannel+0x760>
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4927      	ldr	r1, [pc, #156]	@ (8004604 <HAL_ADC_ConfigChannel+0x7ac>)
 8004566:	428b      	cmp	r3, r1
 8004568:	d024      	beq.n	80045b4 <HAL_ADC_ConfigChannel+0x75c>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4926      	ldr	r1, [pc, #152]	@ (8004608 <HAL_ADC_ConfigChannel+0x7b0>)
 8004570:	428b      	cmp	r3, r1
 8004572:	d01d      	beq.n	80045b0 <HAL_ADC_ConfigChannel+0x758>
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4924      	ldr	r1, [pc, #144]	@ (800460c <HAL_ADC_ConfigChannel+0x7b4>)
 800457a:	428b      	cmp	r3, r1
 800457c:	d016      	beq.n	80045ac <HAL_ADC_ConfigChannel+0x754>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4923      	ldr	r1, [pc, #140]	@ (8004610 <HAL_ADC_ConfigChannel+0x7b8>)
 8004584:	428b      	cmp	r3, r1
 8004586:	d00f      	beq.n	80045a8 <HAL_ADC_ConfigChannel+0x750>
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4926      	ldr	r1, [pc, #152]	@ (8004628 <HAL_ADC_ConfigChannel+0x7d0>)
 800458e:	428b      	cmp	r3, r1
 8004590:	d008      	beq.n	80045a4 <HAL_ADC_ConfigChannel+0x74c>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	492b      	ldr	r1, [pc, #172]	@ (8004644 <HAL_ADC_ConfigChannel+0x7ec>)
 8004598:	428b      	cmp	r3, r1
 800459a:	d101      	bne.n	80045a0 <HAL_ADC_ConfigChannel+0x748>
 800459c:	4b2a      	ldr	r3, [pc, #168]	@ (8004648 <HAL_ADC_ConfigChannel+0x7f0>)
 800459e:	e012      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 80045a0:	2300      	movs	r3, #0
 80045a2:	e010      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 80045a4:	4b27      	ldr	r3, [pc, #156]	@ (8004644 <HAL_ADC_ConfigChannel+0x7ec>)
 80045a6:	e00e      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 80045a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004614 <HAL_ADC_ConfigChannel+0x7bc>)
 80045aa:	e00c      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 80045ac:	4b18      	ldr	r3, [pc, #96]	@ (8004610 <HAL_ADC_ConfigChannel+0x7b8>)
 80045ae:	e00a      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 80045b0:	4b1e      	ldr	r3, [pc, #120]	@ (800462c <HAL_ADC_ConfigChannel+0x7d4>)
 80045b2:	e008      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 80045b4:	4b1e      	ldr	r3, [pc, #120]	@ (8004630 <HAL_ADC_ConfigChannel+0x7d8>)
 80045b6:	e006      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 80045b8:	4b1e      	ldr	r3, [pc, #120]	@ (8004634 <HAL_ADC_ConfigChannel+0x7dc>)
 80045ba:	e004      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 80045bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004638 <HAL_ADC_ConfigChannel+0x7e0>)
 80045be:	e002      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 80045c0:	2301      	movs	r3, #1
 80045c2:	e000      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x76e>
 80045c4:	2300      	movs	r3, #0
 80045c6:	4619      	mov	r1, r3
 80045c8:	4610      	mov	r0, r2
 80045ca:	f7fe fd4b 	bl	8003064 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f280 80f6 	bge.w	80047c4 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a05      	ldr	r2, [pc, #20]	@ (80045f4 <HAL_ADC_ConfigChannel+0x79c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d004      	beq.n	80045ec <HAL_ADC_ConfigChannel+0x794>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a15      	ldr	r2, [pc, #84]	@ (800463c <HAL_ADC_ConfigChannel+0x7e4>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d131      	bne.n	8004650 <HAL_ADC_ConfigChannel+0x7f8>
 80045ec:	4b17      	ldr	r3, [pc, #92]	@ (800464c <HAL_ADC_ConfigChannel+0x7f4>)
 80045ee:	e030      	b.n	8004652 <HAL_ADC_ConfigChannel+0x7fa>
 80045f0:	47ff0000 	.word	0x47ff0000
 80045f4:	40022000 	.word	0x40022000
 80045f8:	04300002 	.word	0x04300002
 80045fc:	08600004 	.word	0x08600004
 8004600:	0c900008 	.word	0x0c900008
 8004604:	10c00010 	.word	0x10c00010
 8004608:	14f00020 	.word	0x14f00020
 800460c:	2a000400 	.word	0x2a000400
 8004610:	2e300800 	.word	0x2e300800
 8004614:	32601000 	.word	0x32601000
 8004618:	43210000 	.word	0x43210000
 800461c:	4b840000 	.word	0x4b840000
 8004620:	4fb80000 	.word	0x4fb80000
 8004624:	47520000 	.word	0x47520000
 8004628:	36902000 	.word	0x36902000
 800462c:	25b00200 	.word	0x25b00200
 8004630:	21800100 	.word	0x21800100
 8004634:	1d500080 	.word	0x1d500080
 8004638:	19200040 	.word	0x19200040
 800463c:	40022100 	.word	0x40022100
 8004640:	58026000 	.word	0x58026000
 8004644:	3ac04000 	.word	0x3ac04000
 8004648:	3ef08000 	.word	0x3ef08000
 800464c:	40022300 	.word	0x40022300
 8004650:	4b61      	ldr	r3, [pc, #388]	@ (80047d8 <HAL_ADC_ConfigChannel+0x980>)
 8004652:	4618      	mov	r0, r3
 8004654:	f7fe fcf8 	bl	8003048 <LL_ADC_GetCommonPathInternalCh>
 8004658:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a5f      	ldr	r2, [pc, #380]	@ (80047dc <HAL_ADC_ConfigChannel+0x984>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d004      	beq.n	800466e <HAL_ADC_ConfigChannel+0x816>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a5d      	ldr	r2, [pc, #372]	@ (80047e0 <HAL_ADC_ConfigChannel+0x988>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d10e      	bne.n	800468c <HAL_ADC_ConfigChannel+0x834>
 800466e:	485b      	ldr	r0, [pc, #364]	@ (80047dc <HAL_ADC_ConfigChannel+0x984>)
 8004670:	f7fe ff60 	bl	8003534 <LL_ADC_IsEnabled>
 8004674:	4604      	mov	r4, r0
 8004676:	485a      	ldr	r0, [pc, #360]	@ (80047e0 <HAL_ADC_ConfigChannel+0x988>)
 8004678:	f7fe ff5c 	bl	8003534 <LL_ADC_IsEnabled>
 800467c:	4603      	mov	r3, r0
 800467e:	4323      	orrs	r3, r4
 8004680:	2b00      	cmp	r3, #0
 8004682:	bf0c      	ite	eq
 8004684:	2301      	moveq	r3, #1
 8004686:	2300      	movne	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	e008      	b.n	800469e <HAL_ADC_ConfigChannel+0x846>
 800468c:	4855      	ldr	r0, [pc, #340]	@ (80047e4 <HAL_ADC_ConfigChannel+0x98c>)
 800468e:	f7fe ff51 	bl	8003534 <LL_ADC_IsEnabled>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	bf0c      	ite	eq
 8004698:	2301      	moveq	r3, #1
 800469a:	2300      	movne	r3, #0
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d07d      	beq.n	800479e <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a50      	ldr	r2, [pc, #320]	@ (80047e8 <HAL_ADC_ConfigChannel+0x990>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d130      	bne.n	800470e <HAL_ADC_ConfigChannel+0x8b6>
 80046ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80046ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d12b      	bne.n	800470e <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a4a      	ldr	r2, [pc, #296]	@ (80047e4 <HAL_ADC_ConfigChannel+0x98c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	f040 8081 	bne.w	80047c4 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a45      	ldr	r2, [pc, #276]	@ (80047dc <HAL_ADC_ConfigChannel+0x984>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d004      	beq.n	80046d6 <HAL_ADC_ConfigChannel+0x87e>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a43      	ldr	r2, [pc, #268]	@ (80047e0 <HAL_ADC_ConfigChannel+0x988>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d101      	bne.n	80046da <HAL_ADC_ConfigChannel+0x882>
 80046d6:	4a45      	ldr	r2, [pc, #276]	@ (80047ec <HAL_ADC_ConfigChannel+0x994>)
 80046d8:	e000      	b.n	80046dc <HAL_ADC_ConfigChannel+0x884>
 80046da:	4a3f      	ldr	r2, [pc, #252]	@ (80047d8 <HAL_ADC_ConfigChannel+0x980>)
 80046dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80046de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046e2:	4619      	mov	r1, r3
 80046e4:	4610      	mov	r0, r2
 80046e6:	f7fe fc9c 	bl	8003022 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046ea:	4b41      	ldr	r3, [pc, #260]	@ (80047f0 <HAL_ADC_ConfigChannel+0x998>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	099b      	lsrs	r3, r3, #6
 80046f0:	4a40      	ldr	r2, [pc, #256]	@ (80047f4 <HAL_ADC_ConfigChannel+0x99c>)
 80046f2:	fba2 2303 	umull	r2, r3, r2, r3
 80046f6:	099b      	lsrs	r3, r3, #6
 80046f8:	3301      	adds	r3, #1
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80046fe:	e002      	b.n	8004706 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	3b01      	subs	r3, #1
 8004704:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1f9      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800470c:	e05a      	b.n	80047c4 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a39      	ldr	r2, [pc, #228]	@ (80047f8 <HAL_ADC_ConfigChannel+0x9a0>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d11e      	bne.n	8004756 <HAL_ADC_ConfigChannel+0x8fe>
 8004718:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800471a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d119      	bne.n	8004756 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a2f      	ldr	r2, [pc, #188]	@ (80047e4 <HAL_ADC_ConfigChannel+0x98c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d14b      	bne.n	80047c4 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a2a      	ldr	r2, [pc, #168]	@ (80047dc <HAL_ADC_ConfigChannel+0x984>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d004      	beq.n	8004740 <HAL_ADC_ConfigChannel+0x8e8>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a29      	ldr	r2, [pc, #164]	@ (80047e0 <HAL_ADC_ConfigChannel+0x988>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d101      	bne.n	8004744 <HAL_ADC_ConfigChannel+0x8ec>
 8004740:	4a2a      	ldr	r2, [pc, #168]	@ (80047ec <HAL_ADC_ConfigChannel+0x994>)
 8004742:	e000      	b.n	8004746 <HAL_ADC_ConfigChannel+0x8ee>
 8004744:	4a24      	ldr	r2, [pc, #144]	@ (80047d8 <HAL_ADC_ConfigChannel+0x980>)
 8004746:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004748:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800474c:	4619      	mov	r1, r3
 800474e:	4610      	mov	r0, r2
 8004750:	f7fe fc67 	bl	8003022 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004754:	e036      	b.n	80047c4 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a28      	ldr	r2, [pc, #160]	@ (80047fc <HAL_ADC_ConfigChannel+0x9a4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d131      	bne.n	80047c4 <HAL_ADC_ConfigChannel+0x96c>
 8004760:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d12c      	bne.n	80047c4 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a1d      	ldr	r2, [pc, #116]	@ (80047e4 <HAL_ADC_ConfigChannel+0x98c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d127      	bne.n	80047c4 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a18      	ldr	r2, [pc, #96]	@ (80047dc <HAL_ADC_ConfigChannel+0x984>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d004      	beq.n	8004788 <HAL_ADC_ConfigChannel+0x930>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a17      	ldr	r2, [pc, #92]	@ (80047e0 <HAL_ADC_ConfigChannel+0x988>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d101      	bne.n	800478c <HAL_ADC_ConfigChannel+0x934>
 8004788:	4a18      	ldr	r2, [pc, #96]	@ (80047ec <HAL_ADC_ConfigChannel+0x994>)
 800478a:	e000      	b.n	800478e <HAL_ADC_ConfigChannel+0x936>
 800478c:	4a12      	ldr	r2, [pc, #72]	@ (80047d8 <HAL_ADC_ConfigChannel+0x980>)
 800478e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004790:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004794:	4619      	mov	r1, r3
 8004796:	4610      	mov	r0, r2
 8004798:	f7fe fc43 	bl	8003022 <LL_ADC_SetCommonPathInternalCh>
 800479c:	e012      	b.n	80047c4 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047a2:	f043 0220 	orr.w	r2, r3, #32
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80047b0:	e008      	b.n	80047c4 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047b6:	f043 0220 	orr.w	r2, r3, #32
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80047cc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3794      	adds	r7, #148	@ 0x94
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd90      	pop	{r4, r7, pc}
 80047d8:	58026300 	.word	0x58026300
 80047dc:	40022000 	.word	0x40022000
 80047e0:	40022100 	.word	0x40022100
 80047e4:	58026000 	.word	0x58026000
 80047e8:	c7520000 	.word	0xc7520000
 80047ec:	40022300 	.word	0x40022300
 80047f0:	24000008 	.word	0x24000008
 80047f4:	053e2d63 	.word	0x053e2d63
 80047f8:	c3210000 	.word	0xc3210000
 80047fc:	cb840000 	.word	0xcb840000

08004800 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b088      	sub	sp, #32
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800480a:	2300      	movs	r3, #0
 800480c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f7fe feda 	bl	80035d0 <LL_ADC_REG_IsConversionOngoing>
 800481c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4618      	mov	r0, r3
 8004824:	f7fe fefc 	bl	8003620 <LL_ADC_INJ_IsConversionOngoing>
 8004828:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d103      	bne.n	8004838 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 8098 	beq.w	8004968 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d02a      	beq.n	800489c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	7e5b      	ldrb	r3, [r3, #25]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d126      	bne.n	800489c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	7e1b      	ldrb	r3, [r3, #24]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d122      	bne.n	800489c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004856:	2301      	movs	r3, #1
 8004858:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800485a:	e014      	b.n	8004886 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	4a45      	ldr	r2, [pc, #276]	@ (8004974 <ADC_ConversionStop+0x174>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d90d      	bls.n	8004880 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004868:	f043 0210 	orr.w	r2, r3, #16
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004874:	f043 0201 	orr.w	r2, r3, #1
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e074      	b.n	800496a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	3301      	adds	r3, #1
 8004884:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004890:	2b40      	cmp	r3, #64	@ 0x40
 8004892:	d1e3      	bne.n	800485c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2240      	movs	r2, #64	@ 0x40
 800489a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d014      	beq.n	80048cc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fe fe92 	bl	80035d0 <LL_ADC_REG_IsConversionOngoing>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00c      	beq.n	80048cc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fe fe4f 	bl	800355a <LL_ADC_IsDisableOngoing>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d104      	bne.n	80048cc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fe fe6e 	bl	80035a8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d014      	beq.n	80048fc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fe fea2 	bl	8003620 <LL_ADC_INJ_IsConversionOngoing>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00c      	beq.n	80048fc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fe fe37 	bl	800355a <LL_ADC_IsDisableOngoing>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d104      	bne.n	80048fc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fe fe7e 	bl	80035f8 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d005      	beq.n	800490e <ADC_ConversionStop+0x10e>
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	2b03      	cmp	r3, #3
 8004906:	d105      	bne.n	8004914 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004908:	230c      	movs	r3, #12
 800490a:	617b      	str	r3, [r7, #20]
        break;
 800490c:	e005      	b.n	800491a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800490e:	2308      	movs	r3, #8
 8004910:	617b      	str	r3, [r7, #20]
        break;
 8004912:	e002      	b.n	800491a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004914:	2304      	movs	r3, #4
 8004916:	617b      	str	r3, [r7, #20]
        break;
 8004918:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800491a:	f7fe fb63 	bl	8002fe4 <HAL_GetTick>
 800491e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004920:	e01b      	b.n	800495a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004922:	f7fe fb5f 	bl	8002fe4 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b05      	cmp	r3, #5
 800492e:	d914      	bls.n	800495a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	4013      	ands	r3, r2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00d      	beq.n	800495a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004942:	f043 0210 	orr.w	r2, r3, #16
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800494e:	f043 0201 	orr.w	r2, r3, #1
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e007      	b.n	800496a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	4013      	ands	r3, r2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1dc      	bne.n	8004922 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3720      	adds	r7, #32
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	000cdbff 	.word	0x000cdbff

08004978 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4618      	mov	r0, r3
 8004986:	f7fe fdd5 	bl	8003534 <LL_ADC_IsEnabled>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d16e      	bne.n	8004a6e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689a      	ldr	r2, [r3, #8]
 8004996:	4b38      	ldr	r3, [pc, #224]	@ (8004a78 <ADC_Enable+0x100>)
 8004998:	4013      	ands	r3, r2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00d      	beq.n	80049ba <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049a2:	f043 0210 	orr.w	r2, r3, #16
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049ae:	f043 0201 	orr.w	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e05a      	b.n	8004a70 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fe fd90 	bl	80034e4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80049c4:	f7fe fb0e 	bl	8002fe4 <HAL_GetTick>
 80049c8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a2b      	ldr	r2, [pc, #172]	@ (8004a7c <ADC_Enable+0x104>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d004      	beq.n	80049de <ADC_Enable+0x66>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a29      	ldr	r2, [pc, #164]	@ (8004a80 <ADC_Enable+0x108>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d101      	bne.n	80049e2 <ADC_Enable+0x6a>
 80049de:	4b29      	ldr	r3, [pc, #164]	@ (8004a84 <ADC_Enable+0x10c>)
 80049e0:	e000      	b.n	80049e4 <ADC_Enable+0x6c>
 80049e2:	4b29      	ldr	r3, [pc, #164]	@ (8004a88 <ADC_Enable+0x110>)
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fe fd13 	bl	8003410 <LL_ADC_GetMultimode>
 80049ea:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a23      	ldr	r2, [pc, #140]	@ (8004a80 <ADC_Enable+0x108>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d002      	beq.n	80049fc <ADC_Enable+0x84>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	e000      	b.n	80049fe <ADC_Enable+0x86>
 80049fc:	4b1f      	ldr	r3, [pc, #124]	@ (8004a7c <ADC_Enable+0x104>)
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6812      	ldr	r2, [r2, #0]
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d02c      	beq.n	8004a60 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d130      	bne.n	8004a6e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a0c:	e028      	b.n	8004a60 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fe fd8e 	bl	8003534 <LL_ADC_IsEnabled>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d104      	bne.n	8004a28 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fe fd5e 	bl	80034e4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a28:	f7fe fadc 	bl	8002fe4 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d914      	bls.n	8004a60 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d00d      	beq.n	8004a60 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a48:	f043 0210 	orr.w	r2, r3, #16
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a54:	f043 0201 	orr.w	r2, r3, #1
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e007      	b.n	8004a70 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d1cf      	bne.n	8004a0e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	8000003f 	.word	0x8000003f
 8004a7c:	40022000 	.word	0x40022000
 8004a80:	40022100 	.word	0x40022100
 8004a84:	40022300 	.word	0x40022300
 8004a88:	58026300 	.word	0x58026300

08004a8c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fe fd5e 	bl	800355a <LL_ADC_IsDisableOngoing>
 8004a9e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fe fd45 	bl	8003534 <LL_ADC_IsEnabled>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d047      	beq.n	8004b40 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d144      	bne.n	8004b40 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 030d 	and.w	r3, r3, #13
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d10c      	bne.n	8004ade <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7fe fd1f 	bl	800350c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2203      	movs	r2, #3
 8004ad4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004ad6:	f7fe fa85 	bl	8002fe4 <HAL_GetTick>
 8004ada:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004adc:	e029      	b.n	8004b32 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ae2:	f043 0210 	orr.w	r2, r3, #16
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004aee:	f043 0201 	orr.w	r2, r3, #1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e023      	b.n	8004b42 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004afa:	f7fe fa73 	bl	8002fe4 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d914      	bls.n	8004b32 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00d      	beq.n	8004b32 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b1a:	f043 0210 	orr.w	r2, r3, #16
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b26:	f043 0201 	orr.w	r2, r3, #1
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e007      	b.n	8004b42 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1dc      	bne.n	8004afa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
	...

08004b4c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a6c      	ldr	r2, [pc, #432]	@ (8004d0c <ADC_ConfigureBoostMode+0x1c0>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d004      	beq.n	8004b68 <ADC_ConfigureBoostMode+0x1c>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a6b      	ldr	r2, [pc, #428]	@ (8004d10 <ADC_ConfigureBoostMode+0x1c4>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d109      	bne.n	8004b7c <ADC_ConfigureBoostMode+0x30>
 8004b68:	4b6a      	ldr	r3, [pc, #424]	@ (8004d14 <ADC_ConfigureBoostMode+0x1c8>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	bf14      	ite	ne
 8004b74:	2301      	movne	r3, #1
 8004b76:	2300      	moveq	r3, #0
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	e008      	b.n	8004b8e <ADC_ConfigureBoostMode+0x42>
 8004b7c:	4b66      	ldr	r3, [pc, #408]	@ (8004d18 <ADC_ConfigureBoostMode+0x1cc>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	bf14      	ite	ne
 8004b88:	2301      	movne	r3, #1
 8004b8a:	2300      	moveq	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d01c      	beq.n	8004bcc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004b92:	f002 fdcd 	bl	8007730 <HAL_RCC_GetHCLKFreq>
 8004b96:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ba0:	d010      	beq.n	8004bc4 <ADC_ConfigureBoostMode+0x78>
 8004ba2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ba6:	d873      	bhi.n	8004c90 <ADC_ConfigureBoostMode+0x144>
 8004ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bac:	d002      	beq.n	8004bb4 <ADC_ConfigureBoostMode+0x68>
 8004bae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bb2:	d16d      	bne.n	8004c90 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	0c1b      	lsrs	r3, r3, #16
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc0:	60fb      	str	r3, [r7, #12]
        break;
 8004bc2:	e068      	b.n	8004c96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	089b      	lsrs	r3, r3, #2
 8004bc8:	60fb      	str	r3, [r7, #12]
        break;
 8004bca:	e064      	b.n	8004c96 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004bcc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004bd0:	f04f 0100 	mov.w	r1, #0
 8004bd4:	f003 ffa8 	bl	8008b28 <HAL_RCCEx_GetPeriphCLKFreq>
 8004bd8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004be2:	d051      	beq.n	8004c88 <ADC_ConfigureBoostMode+0x13c>
 8004be4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004be8:	d854      	bhi.n	8004c94 <ADC_ConfigureBoostMode+0x148>
 8004bea:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004bee:	d047      	beq.n	8004c80 <ADC_ConfigureBoostMode+0x134>
 8004bf0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004bf4:	d84e      	bhi.n	8004c94 <ADC_ConfigureBoostMode+0x148>
 8004bf6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004bfa:	d03d      	beq.n	8004c78 <ADC_ConfigureBoostMode+0x12c>
 8004bfc:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004c00:	d848      	bhi.n	8004c94 <ADC_ConfigureBoostMode+0x148>
 8004c02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c06:	d033      	beq.n	8004c70 <ADC_ConfigureBoostMode+0x124>
 8004c08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c0c:	d842      	bhi.n	8004c94 <ADC_ConfigureBoostMode+0x148>
 8004c0e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004c12:	d029      	beq.n	8004c68 <ADC_ConfigureBoostMode+0x11c>
 8004c14:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004c18:	d83c      	bhi.n	8004c94 <ADC_ConfigureBoostMode+0x148>
 8004c1a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004c1e:	d01a      	beq.n	8004c56 <ADC_ConfigureBoostMode+0x10a>
 8004c20:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004c24:	d836      	bhi.n	8004c94 <ADC_ConfigureBoostMode+0x148>
 8004c26:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004c2a:	d014      	beq.n	8004c56 <ADC_ConfigureBoostMode+0x10a>
 8004c2c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004c30:	d830      	bhi.n	8004c94 <ADC_ConfigureBoostMode+0x148>
 8004c32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c36:	d00e      	beq.n	8004c56 <ADC_ConfigureBoostMode+0x10a>
 8004c38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c3c:	d82a      	bhi.n	8004c94 <ADC_ConfigureBoostMode+0x148>
 8004c3e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004c42:	d008      	beq.n	8004c56 <ADC_ConfigureBoostMode+0x10a>
 8004c44:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004c48:	d824      	bhi.n	8004c94 <ADC_ConfigureBoostMode+0x148>
 8004c4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c4e:	d002      	beq.n	8004c56 <ADC_ConfigureBoostMode+0x10a>
 8004c50:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004c54:	d11e      	bne.n	8004c94 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	0c9b      	lsrs	r3, r3, #18
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c64:	60fb      	str	r3, [r7, #12]
        break;
 8004c66:	e016      	b.n	8004c96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	091b      	lsrs	r3, r3, #4
 8004c6c:	60fb      	str	r3, [r7, #12]
        break;
 8004c6e:	e012      	b.n	8004c96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	60fb      	str	r3, [r7, #12]
        break;
 8004c76:	e00e      	b.n	8004c96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	099b      	lsrs	r3, r3, #6
 8004c7c:	60fb      	str	r3, [r7, #12]
        break;
 8004c7e:	e00a      	b.n	8004c96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	09db      	lsrs	r3, r3, #7
 8004c84:	60fb      	str	r3, [r7, #12]
        break;
 8004c86:	e006      	b.n	8004c96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	0a1b      	lsrs	r3, r3, #8
 8004c8c:	60fb      	str	r3, [r7, #12]
        break;
 8004c8e:	e002      	b.n	8004c96 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004c90:	bf00      	nop
 8004c92:	e000      	b.n	8004c96 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004c94:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	085b      	lsrs	r3, r3, #1
 8004c9a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4a1f      	ldr	r2, [pc, #124]	@ (8004d1c <ADC_ConfigureBoostMode+0x1d0>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d808      	bhi.n	8004cb6 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004cb2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004cb4:	e025      	b.n	8004d02 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	4a19      	ldr	r2, [pc, #100]	@ (8004d20 <ADC_ConfigureBoostMode+0x1d4>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d80a      	bhi.n	8004cd4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cd0:	609a      	str	r2, [r3, #8]
}
 8004cd2:	e016      	b.n	8004d02 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	4a13      	ldr	r2, [pc, #76]	@ (8004d24 <ADC_ConfigureBoostMode+0x1d8>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d80a      	bhi.n	8004cf2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cee:	609a      	str	r2, [r3, #8]
}
 8004cf0:	e007      	b.n	8004d02 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004d00:	609a      	str	r2, [r3, #8]
}
 8004d02:	bf00      	nop
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	40022000 	.word	0x40022000
 8004d10:	40022100 	.word	0x40022100
 8004d14:	40022300 	.word	0x40022300
 8004d18:	58026300 	.word	0x58026300
 8004d1c:	005f5e10 	.word	0x005f5e10
 8004d20:	00bebc20 	.word	0x00bebc20
 8004d24:	017d7840 	.word	0x017d7840

08004d28 <LL_ADC_IsEnabled>:
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <LL_ADC_IsEnabled+0x18>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e000      	b.n	8004d42 <LL_ADC_IsEnabled+0x1a>
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <LL_ADC_REG_IsConversionOngoing>:
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 0304 	and.w	r3, r3, #4
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	d101      	bne.n	8004d66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d62:	2301      	movs	r3, #1
 8004d64:	e000      	b.n	8004d68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004d74:	b590      	push	{r4, r7, lr}
 8004d76:	b0a3      	sub	sp, #140	@ 0x8c
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d101      	bne.n	8004d92 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004d8e:	2302      	movs	r3, #2
 8004d90:	e0c1      	b.n	8004f16 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a5e      	ldr	r2, [pc, #376]	@ (8004f20 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d102      	bne.n	8004db2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004dac:	4b5d      	ldr	r3, [pc, #372]	@ (8004f24 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	e001      	b.n	8004db6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004db2:	2300      	movs	r3, #0
 8004db4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10b      	bne.n	8004dd4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dc0:	f043 0220 	orr.w	r2, r3, #32
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e0a0      	b.n	8004f16 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff ffb9 	bl	8004d4e <LL_ADC_REG_IsConversionOngoing>
 8004ddc:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff ffb2 	bl	8004d4e <LL_ADC_REG_IsConversionOngoing>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f040 8081 	bne.w	8004ef4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004df2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d17c      	bne.n	8004ef4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a48      	ldr	r2, [pc, #288]	@ (8004f20 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d004      	beq.n	8004e0e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a46      	ldr	r2, [pc, #280]	@ (8004f24 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d101      	bne.n	8004e12 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004e0e:	4b46      	ldr	r3, [pc, #280]	@ (8004f28 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004e10:	e000      	b.n	8004e14 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004e12:	4b46      	ldr	r3, [pc, #280]	@ (8004f2c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004e14:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d039      	beq.n	8004e92 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004e1e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e2e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a3a      	ldr	r2, [pc, #232]	@ (8004f20 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d004      	beq.n	8004e44 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a39      	ldr	r2, [pc, #228]	@ (8004f24 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d10e      	bne.n	8004e62 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004e44:	4836      	ldr	r0, [pc, #216]	@ (8004f20 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004e46:	f7ff ff6f 	bl	8004d28 <LL_ADC_IsEnabled>
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	4835      	ldr	r0, [pc, #212]	@ (8004f24 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e4e:	f7ff ff6b 	bl	8004d28 <LL_ADC_IsEnabled>
 8004e52:	4603      	mov	r3, r0
 8004e54:	4323      	orrs	r3, r4
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	bf0c      	ite	eq
 8004e5a:	2301      	moveq	r3, #1
 8004e5c:	2300      	movne	r3, #0
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	e008      	b.n	8004e74 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004e62:	4833      	ldr	r0, [pc, #204]	@ (8004f30 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004e64:	f7ff ff60 	bl	8004d28 <LL_ADC_IsEnabled>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	bf0c      	ite	eq
 8004e6e:	2301      	moveq	r3, #1
 8004e70:	2300      	movne	r3, #0
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d047      	beq.n	8004f08 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004e78:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	4b2d      	ldr	r3, [pc, #180]	@ (8004f34 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004e7e:	4013      	ands	r3, r2
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	6811      	ldr	r1, [r2, #0]
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	6892      	ldr	r2, [r2, #8]
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e8e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e90:	e03a      	b.n	8004f08 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004e92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e9c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a1f      	ldr	r2, [pc, #124]	@ (8004f20 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d004      	beq.n	8004eb2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a1d      	ldr	r2, [pc, #116]	@ (8004f24 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d10e      	bne.n	8004ed0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004eb2:	481b      	ldr	r0, [pc, #108]	@ (8004f20 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004eb4:	f7ff ff38 	bl	8004d28 <LL_ADC_IsEnabled>
 8004eb8:	4604      	mov	r4, r0
 8004eba:	481a      	ldr	r0, [pc, #104]	@ (8004f24 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ebc:	f7ff ff34 	bl	8004d28 <LL_ADC_IsEnabled>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	4323      	orrs	r3, r4
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	bf0c      	ite	eq
 8004ec8:	2301      	moveq	r3, #1
 8004eca:	2300      	movne	r3, #0
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	e008      	b.n	8004ee2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004ed0:	4817      	ldr	r0, [pc, #92]	@ (8004f30 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004ed2:	f7ff ff29 	bl	8004d28 <LL_ADC_IsEnabled>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	bf0c      	ite	eq
 8004edc:	2301      	moveq	r3, #1
 8004ede:	2300      	movne	r3, #0
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d010      	beq.n	8004f08 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004ee6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	4b12      	ldr	r3, [pc, #72]	@ (8004f34 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004ef0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ef2:	e009      	b.n	8004f08 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ef8:	f043 0220 	orr.w	r2, r3, #32
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004f06:	e000      	b.n	8004f0a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f08:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004f12:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	378c      	adds	r7, #140	@ 0x8c
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd90      	pop	{r4, r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	40022000 	.word	0x40022000
 8004f24:	40022100 	.word	0x40022100
 8004f28:	40022300 	.word	0x40022300
 8004f2c:	58026300 	.word	0x58026300
 8004f30:	58026000 	.word	0x58026000
 8004f34:	fffff0e0 	.word	0xfffff0e0

08004f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f48:	4b0b      	ldr	r3, [pc, #44]	@ (8004f78 <__NVIC_SetPriorityGrouping+0x40>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004f54:	4013      	ands	r3, r2
 8004f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004f60:	4b06      	ldr	r3, [pc, #24]	@ (8004f7c <__NVIC_SetPriorityGrouping+0x44>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f66:	4a04      	ldr	r2, [pc, #16]	@ (8004f78 <__NVIC_SetPriorityGrouping+0x40>)
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	60d3      	str	r3, [r2, #12]
}
 8004f6c:	bf00      	nop
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	e000ed00 	.word	0xe000ed00
 8004f7c:	05fa0000 	.word	0x05fa0000

08004f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f84:	4b04      	ldr	r3, [pc, #16]	@ (8004f98 <__NVIC_GetPriorityGrouping+0x18>)
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	0a1b      	lsrs	r3, r3, #8
 8004f8a:	f003 0307 	and.w	r3, r3, #7
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	e000ed00 	.word	0xe000ed00

08004f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004fa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	db0b      	blt.n	8004fc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fae:	88fb      	ldrh	r3, [r7, #6]
 8004fb0:	f003 021f 	and.w	r2, r3, #31
 8004fb4:	4907      	ldr	r1, [pc, #28]	@ (8004fd4 <__NVIC_EnableIRQ+0x38>)
 8004fb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fba:	095b      	lsrs	r3, r3, #5
 8004fbc:	2001      	movs	r0, #1
 8004fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8004fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	e000e100 	.word	0xe000e100

08004fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	6039      	str	r1, [r7, #0]
 8004fe2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004fe4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	db0a      	blt.n	8005002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	490c      	ldr	r1, [pc, #48]	@ (8005024 <__NVIC_SetPriority+0x4c>)
 8004ff2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ff6:	0112      	lsls	r2, r2, #4
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	440b      	add	r3, r1
 8004ffc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005000:	e00a      	b.n	8005018 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	b2da      	uxtb	r2, r3
 8005006:	4908      	ldr	r1, [pc, #32]	@ (8005028 <__NVIC_SetPriority+0x50>)
 8005008:	88fb      	ldrh	r3, [r7, #6]
 800500a:	f003 030f 	and.w	r3, r3, #15
 800500e:	3b04      	subs	r3, #4
 8005010:	0112      	lsls	r2, r2, #4
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	440b      	add	r3, r1
 8005016:	761a      	strb	r2, [r3, #24]
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	e000e100 	.word	0xe000e100
 8005028:	e000ed00 	.word	0xe000ed00

0800502c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800502c:	b480      	push	{r7}
 800502e:	b089      	sub	sp, #36	@ 0x24
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f1c3 0307 	rsb	r3, r3, #7
 8005046:	2b04      	cmp	r3, #4
 8005048:	bf28      	it	cs
 800504a:	2304      	movcs	r3, #4
 800504c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	3304      	adds	r3, #4
 8005052:	2b06      	cmp	r3, #6
 8005054:	d902      	bls.n	800505c <NVIC_EncodePriority+0x30>
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	3b03      	subs	r3, #3
 800505a:	e000      	b.n	800505e <NVIC_EncodePriority+0x32>
 800505c:	2300      	movs	r3, #0
 800505e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005060:	f04f 32ff 	mov.w	r2, #4294967295
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	fa02 f303 	lsl.w	r3, r2, r3
 800506a:	43da      	mvns	r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	401a      	ands	r2, r3
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005074:	f04f 31ff 	mov.w	r1, #4294967295
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	fa01 f303 	lsl.w	r3, r1, r3
 800507e:	43d9      	mvns	r1, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005084:	4313      	orrs	r3, r2
         );
}
 8005086:	4618      	mov	r0, r3
 8005088:	3724      	adds	r7, #36	@ 0x24
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
	...

08005094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3b01      	subs	r3, #1
 80050a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050a4:	d301      	bcc.n	80050aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050a6:	2301      	movs	r3, #1
 80050a8:	e00f      	b.n	80050ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050aa:	4a0a      	ldr	r2, [pc, #40]	@ (80050d4 <SysTick_Config+0x40>)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050b2:	210f      	movs	r1, #15
 80050b4:	f04f 30ff 	mov.w	r0, #4294967295
 80050b8:	f7ff ff8e 	bl	8004fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050bc:	4b05      	ldr	r3, [pc, #20]	@ (80050d4 <SysTick_Config+0x40>)
 80050be:	2200      	movs	r2, #0
 80050c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050c2:	4b04      	ldr	r3, [pc, #16]	@ (80050d4 <SysTick_Config+0x40>)
 80050c4:	2207      	movs	r2, #7
 80050c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	e000e010 	.word	0xe000e010

080050d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7ff ff29 	bl	8004f38 <__NVIC_SetPriorityGrouping>
}
 80050e6:	bf00      	nop
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b086      	sub	sp, #24
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	4603      	mov	r3, r0
 80050f6:	60b9      	str	r1, [r7, #8]
 80050f8:	607a      	str	r2, [r7, #4]
 80050fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80050fc:	f7ff ff40 	bl	8004f80 <__NVIC_GetPriorityGrouping>
 8005100:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	68b9      	ldr	r1, [r7, #8]
 8005106:	6978      	ldr	r0, [r7, #20]
 8005108:	f7ff ff90 	bl	800502c <NVIC_EncodePriority>
 800510c:	4602      	mov	r2, r0
 800510e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005112:	4611      	mov	r1, r2
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff ff5f 	bl	8004fd8 <__NVIC_SetPriority>
}
 800511a:	bf00      	nop
 800511c:	3718      	adds	r7, #24
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b082      	sub	sp, #8
 8005126:	af00      	add	r7, sp, #0
 8005128:	4603      	mov	r3, r0
 800512a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800512c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005130:	4618      	mov	r0, r3
 8005132:	f7ff ff33 	bl	8004f9c <__NVIC_EnableIRQ>
}
 8005136:	bf00      	nop
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b082      	sub	sp, #8
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7ff ffa4 	bl	8005094 <SysTick_Config>
 800514c:	4603      	mov	r3, r0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b098      	sub	sp, #96	@ 0x60
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005160:	4a84      	ldr	r2, [pc, #528]	@ (8005374 <HAL_FDCAN_Init+0x21c>)
 8005162:	f107 030c 	add.w	r3, r7, #12
 8005166:	4611      	mov	r1, r2
 8005168:	224c      	movs	r2, #76	@ 0x4c
 800516a:	4618      	mov	r0, r3
 800516c:	f007 f918 	bl	800c3a0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e1c6      	b.n	8005508 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a7e      	ldr	r2, [pc, #504]	@ (8005378 <HAL_FDCAN_Init+0x220>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d106      	bne.n	8005192 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800518c:	461a      	mov	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7fd fbe8 	bl	800297c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699a      	ldr	r2, [r3, #24]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0210 	bic.w	r2, r2, #16
 80051ba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051bc:	f7fd ff12 	bl	8002fe4 <HAL_GetTick>
 80051c0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80051c2:	e014      	b.n	80051ee <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80051c4:	f7fd ff0e 	bl	8002fe4 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b0a      	cmp	r3, #10
 80051d0:	d90d      	bls.n	80051ee <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051d8:	f043 0201 	orr.w	r2, r3, #1
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2203      	movs	r2, #3
 80051e6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e18c      	b.n	8005508 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	f003 0308 	and.w	r3, r3, #8
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	d0e3      	beq.n	80051c4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	699a      	ldr	r2, [r3, #24]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0201 	orr.w	r2, r2, #1
 800520a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800520c:	f7fd feea 	bl	8002fe4 <HAL_GetTick>
 8005210:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005212:	e014      	b.n	800523e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005214:	f7fd fee6 	bl	8002fe4 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b0a      	cmp	r3, #10
 8005220:	d90d      	bls.n	800523e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005228:	f043 0201 	orr.w	r2, r3, #1
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2203      	movs	r2, #3
 8005236:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e164      	b.n	8005508 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0e3      	beq.n	8005214 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699a      	ldr	r2, [r3, #24]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0202 	orr.w	r2, r2, #2
 800525a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	7c1b      	ldrb	r3, [r3, #16]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d108      	bne.n	8005276 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005272:	619a      	str	r2, [r3, #24]
 8005274:	e007      	b.n	8005286 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	699a      	ldr	r2, [r3, #24]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005284:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	7c5b      	ldrb	r3, [r3, #17]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d108      	bne.n	80052a0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	699a      	ldr	r2, [r3, #24]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800529c:	619a      	str	r2, [r3, #24]
 800529e:	e007      	b.n	80052b0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699a      	ldr	r2, [r3, #24]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80052ae:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	7c9b      	ldrb	r3, [r3, #18]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d108      	bne.n	80052ca <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	699a      	ldr	r2, [r3, #24]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80052c6:	619a      	str	r2, [r3, #24]
 80052c8:	e007      	b.n	80052da <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	699a      	ldr	r2, [r3, #24]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80052d8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	430a      	orrs	r2, r1
 80052ee:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699a      	ldr	r2, [r3, #24]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80052fe:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	691a      	ldr	r2, [r3, #16]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 0210 	bic.w	r2, r2, #16
 800530e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d108      	bne.n	800532a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699a      	ldr	r2, [r3, #24]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0204 	orr.w	r2, r2, #4
 8005326:	619a      	str	r2, [r3, #24]
 8005328:	e030      	b.n	800538c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d02c      	beq.n	800538c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	2b02      	cmp	r3, #2
 8005338:	d020      	beq.n	800537c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	699a      	ldr	r2, [r3, #24]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005348:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	691a      	ldr	r2, [r3, #16]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f042 0210 	orr.w	r2, r2, #16
 8005358:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	2b03      	cmp	r3, #3
 8005360:	d114      	bne.n	800538c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	699a      	ldr	r2, [r3, #24]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f042 0220 	orr.w	r2, r2, #32
 8005370:	619a      	str	r2, [r3, #24]
 8005372:	e00b      	b.n	800538c <HAL_FDCAN_Init+0x234>
 8005374:	0800d01c 	.word	0x0800d01c
 8005378:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699a      	ldr	r2, [r3, #24]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0220 	orr.w	r2, r2, #32
 800538a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	3b01      	subs	r3, #1
 8005392:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	3b01      	subs	r3, #1
 800539a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800539c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80053a4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	3b01      	subs	r3, #1
 80053ae:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80053b4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80053b6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053c0:	d115      	bne.n	80053ee <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053cc:	3b01      	subs	r3, #1
 80053ce:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80053d0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d6:	3b01      	subs	r3, #1
 80053d8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80053da:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e2:	3b01      	subs	r3, #1
 80053e4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80053ea:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80053ec:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	430a      	orrs	r2, r1
 8005408:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005414:	4413      	add	r3, r2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d011      	beq.n	800543e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005422:	f023 0107 	bic.w	r1, r3, #7
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	3360      	adds	r3, #96	@ 0x60
 800542e:	443b      	add	r3, r7
 8005430:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005442:	2b00      	cmp	r3, #0
 8005444:	d011      	beq.n	800546a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800544e:	f023 0107 	bic.w	r1, r3, #7
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	3360      	adds	r3, #96	@ 0x60
 800545a:	443b      	add	r3, r7
 800545c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800546e:	2b00      	cmp	r3, #0
 8005470:	d012      	beq.n	8005498 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800547a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	3360      	adds	r3, #96	@ 0x60
 8005486:	443b      	add	r3, r7
 8005488:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800548c:	011a      	lsls	r2, r3, #4
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800549c:	2b00      	cmp	r3, #0
 800549e:	d012      	beq.n	80054c6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80054a8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	3360      	adds	r3, #96	@ 0x60
 80054b4:	443b      	add	r3, r7
 80054b6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80054ba:	021a      	lsls	r2, r3, #8
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a11      	ldr	r2, [pc, #68]	@ (8005510 <HAL_FDCAN_Init+0x3b8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d107      	bne.n	80054e0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	689a      	ldr	r2, [r3, #8]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f022 0203 	bic.w	r2, r2, #3
 80054de:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 fdf7 	bl	80060ec <FDCAN_CalcultateRamBlockAddresses>
 80054fe:	4603      	mov	r3, r0
 8005500:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8005504:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8005508:	4618      	mov	r0, r3
 800550a:	3760      	adds	r7, #96	@ 0x60
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	4000a000 	.word	0x4000a000

08005514 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005524:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005526:	7bfb      	ldrb	r3, [r7, #15]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d002      	beq.n	8005532 <HAL_FDCAN_ConfigFilter+0x1e>
 800552c:	7bfb      	ldrb	r3, [r7, #15]
 800552e:	2b02      	cmp	r3, #2
 8005530:	d157      	bne.n	80055e2 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d12b      	bne.n	8005592 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	2b07      	cmp	r3, #7
 8005540:	d10d      	bne.n	800555e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	69db      	ldr	r3, [r3, #28]
 800554c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800554e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005554:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8005556:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	e00e      	b.n	800557c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800556a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8005572:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005578:	4313      	orrs	r3, r2
 800557a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	e025      	b.n	80055de <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	075a      	lsls	r2, r3, #29
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	4313      	orrs	r3, r2
 800559e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	2b07      	cmp	r3, #7
 80055a6:	d103      	bne.n	80055b0 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	613b      	str	r3, [r7, #16]
 80055ae:	e006      	b.n	80055be <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	079a      	lsls	r2, r3, #30
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	4413      	add	r3, r2
 80055ca:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	3304      	adds	r3, #4
 80055d6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80055de:	2300      	movs	r3, #0
 80055e0:	e008      	b.n	80055f4 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055e8:	f043 0202 	orr.w	r2, r3, #2
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
  }
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	371c      	adds	r7, #28
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b01      	cmp	r3, #1
 8005612:	d111      	bne.n	8005638 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	699a      	ldr	r2, [r3, #24]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0201 	bic.w	r2, r2, #1
 800562a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8005634:	2300      	movs	r3, #0
 8005636:	e008      	b.n	800564a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800563e:	f043 0204 	orr.w	r2, r3, #4
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
  }
}
 800564a:	4618      	mov	r0, r3
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b086      	sub	sp, #24
 800565a:	af00      	add	r7, sp, #0
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b02      	cmp	r3, #2
 800566c:	d141      	bne.n	80056f2 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005676:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d109      	bne.n	8005692 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005684:	f043 0220 	orr.w	r2, r3, #32
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e038      	b.n	8005704 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800569a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d009      	beq.n	80056b6 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056a8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e026      	b.n	8005704 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80056be:	0c1b      	lsrs	r3, r3, #16
 80056c0:	f003 031f 	and.w	r3, r3, #31
 80056c4:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	68b9      	ldr	r1, [r7, #8]
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f000 fe93 	bl	80063f8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2101      	movs	r1, #1
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	fa01 f202 	lsl.w	r2, r1, r2
 80056de:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80056e2:	2201      	movs	r2, #1
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	409a      	lsls	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	e008      	b.n	8005704 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056f8:	f043 0208 	orr.w	r2, r3, #8
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
  }
}
 8005704:	4618      	mov	r0, r3
 8005706:	3718      	adds	r7, #24
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800570c:	b480      	push	{r7}
 800570e:	b08b      	sub	sp, #44	@ 0x2c
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
 8005718:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800571a:	2300      	movs	r3, #0
 800571c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005724:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005726:	7efb      	ldrb	r3, [r7, #27]
 8005728:	2b02      	cmp	r3, #2
 800572a:	f040 8149 	bne.w	80059c0 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	2b40      	cmp	r3, #64	@ 0x40
 8005732:	d14c      	bne.n	80057ce <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800573c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d109      	bne.n	8005758 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800574a:	f043 0220 	orr.w	r2, r3, #32
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e13c      	b.n	80059d2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005760:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005764:	2b00      	cmp	r3, #0
 8005766:	d109      	bne.n	800577c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800576e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e12a      	b.n	80059d2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005784:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005788:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800578c:	d10a      	bne.n	80057a4 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005796:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800579a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800579e:	d101      	bne.n	80057a4 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80057a0:	2301      	movs	r3, #1
 80057a2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80057ac:	0a1b      	lsrs	r3, r3, #8
 80057ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057b2:	69fa      	ldr	r2, [r7, #28]
 80057b4:	4413      	add	r3, r2
 80057b6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057c0:	69f9      	ldr	r1, [r7, #28]
 80057c2:	fb01 f303 	mul.w	r3, r1, r3
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4413      	add	r3, r2
 80057ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80057cc:	e068      	b.n	80058a0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2b41      	cmp	r3, #65	@ 0x41
 80057d2:	d14c      	bne.n	800586e <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80057dc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d109      	bne.n	80057f8 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057ea:	f043 0220 	orr.w	r2, r3, #32
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e0ec      	b.n	80059d2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005800:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005804:	2b00      	cmp	r3, #0
 8005806:	d109      	bne.n	800581c <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800580e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e0da      	b.n	80059d2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005824:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005828:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800582c:	d10a      	bne.n	8005844 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005836:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800583a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800583e:	d101      	bne.n	8005844 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005840:	2301      	movs	r3, #1
 8005842:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800584c:	0a1b      	lsrs	r3, r3, #8
 800584e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	4413      	add	r3, r2
 8005856:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005860:	69f9      	ldr	r1, [r7, #28]
 8005862:	fb01 f303 	mul.w	r3, r1, r3
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	627b      	str	r3, [r7, #36]	@ 0x24
 800586c:	e018      	b.n	80058a0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	429a      	cmp	r2, r3
 8005876:	d309      	bcc.n	800588c <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800587e:	f043 0220 	orr.w	r2, r3, #32
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e0a2      	b.n	80059d2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005894:	68b9      	ldr	r1, [r7, #8]
 8005896:	fb01 f303 	mul.w	r3, r1, r3
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80058a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d107      	bne.n	80058c4 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80058b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	0c9b      	lsrs	r3, r3, #18
 80058ba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	e005      	b.n	80058d0 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80058c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80058d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80058dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80058e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ea:	3304      	adds	r3, #4
 80058ec:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80058ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80058f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	0c1b      	lsrs	r3, r3, #16
 80058fe:	f003 020f 	and.w	r2, r3, #15
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800591e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	0e1b      	lsrs	r3, r3, #24
 8005924:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800592c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	0fda      	lsrs	r2, r3, #31
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005938:	3304      	adds	r3, #4
 800593a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800593c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005940:	2300      	movs	r3, #0
 8005942:	623b      	str	r3, [r7, #32]
 8005944:	e00a      	b.n	800595c <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	441a      	add	r2, r3
 800594c:	6839      	ldr	r1, [r7, #0]
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	440b      	add	r3, r1
 8005952:	7812      	ldrb	r2, [r2, #0]
 8005954:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	3301      	adds	r3, #1
 800595a:	623b      	str	r3, [r7, #32]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	4a1f      	ldr	r2, [pc, #124]	@ (80059e0 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8005962:	5cd3      	ldrb	r3, [r2, r3]
 8005964:	461a      	mov	r2, r3
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	4293      	cmp	r3, r2
 800596a:	d3ec      	bcc.n	8005946 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	2b40      	cmp	r3, #64	@ 0x40
 8005970:	d105      	bne.n	800597e <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69fa      	ldr	r2, [r7, #28]
 8005978:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800597c:	e01e      	b.n	80059bc <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	2b41      	cmp	r3, #65	@ 0x41
 8005982:	d105      	bne.n	8005990 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	69fa      	ldr	r2, [r7, #28]
 800598a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800598e:	e015      	b.n	80059bc <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2b1f      	cmp	r3, #31
 8005994:	d808      	bhi.n	80059a8 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2101      	movs	r1, #1
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	fa01 f202 	lsl.w	r2, r1, r2
 80059a2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80059a6:	e009      	b.n	80059bc <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f003 021f 	and.w	r2, r3, #31
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2101      	movs	r1, #1
 80059b4:	fa01 f202 	lsl.w	r2, r1, r2
 80059b8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80059bc:	2300      	movs	r3, #0
 80059be:	e008      	b.n	80059d2 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059c6:	f043 0208 	orr.w	r2, r3, #8
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
  }
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	372c      	adds	r7, #44	@ 0x2c
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	0800d078 	.word	0x0800d078

080059e4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80059f6:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80059f8:	7dfb      	ldrb	r3, [r7, #23]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d002      	beq.n	8005a04 <HAL_FDCAN_ActivateNotification+0x20>
 80059fe:	7dfb      	ldrb	r3, [r7, #23]
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d155      	bne.n	8005ab0 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d108      	bne.n	8005a24 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f042 0201 	orr.w	r2, r2, #1
 8005a20:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a22:	e014      	b.n	8005a4e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d108      	bne.n	8005a46 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 0202 	orr.w	r2, r2, #2
 8005a42:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a44:	e003      	b.n	8005a4e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2203      	movs	r2, #3
 8005a4c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d009      	beq.n	8005a6c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d009      	beq.n	8005a8a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	430a      	orrs	r2, r1
 8005a86:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	4b0f      	ldr	r3, [pc, #60]	@ (8005ad0 <HAL_FDCAN_ActivateNotification+0xec>)
 8005a94:	4013      	ands	r3, r2
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	6812      	ldr	r2, [r2, #0]
 8005a9a:	430b      	orrs	r3, r1
 8005a9c:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ad4 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005aa0:	695a      	ldr	r2, [r3, #20]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	0f9b      	lsrs	r3, r3, #30
 8005aa6:	490b      	ldr	r1, [pc, #44]	@ (8005ad4 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8005aac:	2300      	movs	r3, #0
 8005aae:	e008      	b.n	8005ac2 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ab6:	f043 0202 	orr.w	r2, r3, #2
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
  }
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	371c      	adds	r7, #28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	3fcfffff 	.word	0x3fcfffff
 8005ad4:	4000a800 	.word	0x4000a800

08005ad8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b096      	sub	sp, #88	@ 0x58
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005ae0:	4b9a      	ldr	r3, [pc, #616]	@ (8005d4c <HAL_FDCAN_IRQHandler+0x274>)
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	079b      	lsls	r3, r3, #30
 8005ae6:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005ae8:	4b98      	ldr	r3, [pc, #608]	@ (8005d4c <HAL_FDCAN_IRQHandler+0x274>)
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	079b      	lsls	r3, r3, #30
 8005aee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005af0:	4013      	ands	r3, r2
 8005af2:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005afa:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005afe:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b06:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005b08:	4013      	ands	r3, r2
 8005b0a:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b12:	f003 030f 	and.w	r3, r3, #15
 8005b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b20:	4013      	ands	r3, r2
 8005b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b38:	4013      	ands	r3, r2
 8005b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b42:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8005b46:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b50:	4013      	ands	r3, r2
 8005b52:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b5a:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8005b5e:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b68:	4013      	ands	r3, r2
 8005b6a:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b7a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005b7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b7e:	0a1b      	lsrs	r3, r3, #8
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d010      	beq.n	8005baa <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8a:	0a1b      	lsrs	r3, r3, #8
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00a      	beq.n	8005baa <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b9c:	651a      	str	r2, [r3, #80]	@ 0x50
 8005b9e:	4b6b      	ldr	r3, [pc, #428]	@ (8005d4c <HAL_FDCAN_IRQHandler+0x274>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 fa54 	bl	8006052 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005baa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bac:	0a9b      	lsrs	r3, r3, #10
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d01d      	beq.n	8005bf2 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb8:	0a9b      	lsrs	r3, r3, #10
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d017      	beq.n	8005bf2 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005bca:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005bd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005be2:	651a      	str	r2, [r3, #80]	@ 0x50
 8005be4:	4b59      	ldr	r3, [pc, #356]	@ (8005d4c <HAL_FDCAN_IRQHandler+0x274>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005bea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 fa07 	bl	8006000 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00d      	beq.n	8005c14 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005bfe:	4b54      	ldr	r3, [pc, #336]	@ (8005d50 <HAL_FDCAN_IRQHandler+0x278>)
 8005c00:	400b      	ands	r3, r1
 8005c02:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c04:	4a51      	ldr	r2, [pc, #324]	@ (8005d4c <HAL_FDCAN_IRQHandler+0x274>)
 8005c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c08:	0f9b      	lsrs	r3, r3, #30
 8005c0a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005c0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f9c0 	bl	8005f94 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005c14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00d      	beq.n	8005c36 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005c20:	4b4b      	ldr	r3, [pc, #300]	@ (8005d50 <HAL_FDCAN_IRQHandler+0x278>)
 8005c22:	400b      	ands	r3, r1
 8005c24:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c26:	4a49      	ldr	r2, [pc, #292]	@ (8005d4c <HAL_FDCAN_IRQHandler+0x274>)
 8005c28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c2a:	0f9b      	lsrs	r3, r3, #30
 8005c2c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005c2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f9ba 	bl	8005faa <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005c36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00d      	beq.n	8005c58 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005c42:	4b43      	ldr	r3, [pc, #268]	@ (8005d50 <HAL_FDCAN_IRQHandler+0x278>)
 8005c44:	400b      	ands	r3, r1
 8005c46:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c48:	4a40      	ldr	r2, [pc, #256]	@ (8005d4c <HAL_FDCAN_IRQHandler+0x274>)
 8005c4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c4c:	0f9b      	lsrs	r3, r3, #30
 8005c4e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005c50:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7fc f93c 	bl	8001ed0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005c58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00d      	beq.n	8005c7a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005c64:	4b3a      	ldr	r3, [pc, #232]	@ (8005d50 <HAL_FDCAN_IRQHandler+0x278>)
 8005c66:	400b      	ands	r3, r1
 8005c68:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c6a:	4a38      	ldr	r2, [pc, #224]	@ (8005d4c <HAL_FDCAN_IRQHandler+0x274>)
 8005c6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c6e:	0f9b      	lsrs	r3, r3, #30
 8005c70:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005c72:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f9a3 	bl	8005fc0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c7c:	0adb      	lsrs	r3, r3, #11
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d010      	beq.n	8005ca8 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c88:	0adb      	lsrs	r3, r3, #11
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00a      	beq.n	8005ca8 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c9a:	651a      	str	r2, [r3, #80]	@ 0x50
 8005c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8005d4c <HAL_FDCAN_IRQHandler+0x274>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f997 	bl	8005fd6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8005ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005caa:	0a5b      	lsrs	r3, r3, #9
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d01d      	beq.n	8005cf0 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb6:	0a5b      	lsrs	r3, r3, #9
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d017      	beq.n	8005cf0 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005cc8:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005cd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ce0:	651a      	str	r2, [r3, #80]	@ 0x50
 8005ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8005d4c <HAL_FDCAN_IRQHandler+0x274>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005ce8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f97d 	bl	8005fea <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005cf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cf2:	0cdb      	lsrs	r3, r3, #19
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d010      	beq.n	8005d1e <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cfe:	0cdb      	lsrs	r3, r3, #19
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00a      	beq.n	8005d1e <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005d10:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d12:	4b0e      	ldr	r3, [pc, #56]	@ (8005d4c <HAL_FDCAN_IRQHandler+0x274>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f97c 	bl	8006016 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005d1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d20:	0c1b      	lsrs	r3, r3, #16
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d016      	beq.n	8005d58 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d2c:	0c1b      	lsrs	r3, r3, #16
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d010      	beq.n	8005d58 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005d3e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d40:	4b02      	ldr	r3, [pc, #8]	@ (8005d4c <HAL_FDCAN_IRQHandler+0x274>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	e004      	b.n	8005d54 <HAL_FDCAN_IRQHandler+0x27c>
 8005d4a:	bf00      	nop
 8005d4c:	4000a800 	.word	0x4000a800
 8005d50:	3fcfffff 	.word	0x3fcfffff
 8005d54:	f000 f969 	bl	800602a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005d58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d5a:	0c9b      	lsrs	r3, r3, #18
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d010      	beq.n	8005d86 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d66:	0c9b      	lsrs	r3, r3, #18
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00a      	beq.n	8005d86 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005d78:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d7a:	4b83      	ldr	r3, [pc, #524]	@ (8005f88 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 f95c 	bl	800603e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d88:	0c5b      	lsrs	r3, r3, #17
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d015      	beq.n	8005dbe <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d94:	0c5b      	lsrs	r3, r3, #17
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00f      	beq.n	8005dbe <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005da6:	651a      	str	r2, [r3, #80]	@ 0x50
 8005da8:	4b77      	ldr	r3, [pc, #476]	@ (8005f88 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005daa:	2200      	movs	r2, #0
 8005dac:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005db4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005dbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00d      	beq.n	8005de0 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005dca:	4b70      	ldr	r3, [pc, #448]	@ (8005f8c <HAL_FDCAN_IRQHandler+0x4b4>)
 8005dcc:	400b      	ands	r3, r1
 8005dce:	6513      	str	r3, [r2, #80]	@ 0x50
 8005dd0:	4a6d      	ldr	r2, [pc, #436]	@ (8005f88 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005dd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dd4:	0f9b      	lsrs	r3, r3, #30
 8005dd6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005dd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f94d 	bl	800607a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005de0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d011      	beq.n	8005e0a <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005dec:	4b67      	ldr	r3, [pc, #412]	@ (8005f8c <HAL_FDCAN_IRQHandler+0x4b4>)
 8005dee:	400b      	ands	r3, r1
 8005df0:	6513      	str	r3, [r2, #80]	@ 0x50
 8005df2:	4a65      	ldr	r2, [pc, #404]	@ (8005f88 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005df4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005df6:	0f9b      	lsrs	r3, r3, #30
 8005df8:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005e00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a60      	ldr	r2, [pc, #384]	@ (8005f90 <HAL_FDCAN_IRQHandler+0x4b8>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	f040 80ac 	bne.w	8005f6e <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f003 0303 	and.w	r3, r3, #3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 80a4 	beq.w	8005f6e <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	f003 030f 	and.w	r3, r3, #15
 8005e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e48:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e52:	4013      	ands	r3, r2
 8005e54:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
 8005e5c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005e60:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8005e78:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e80:	6a3a      	ldr	r2, [r7, #32]
 8005e82:	4013      	ands	r3, r2
 8005e84:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8005e90:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e98:	69fa      	ldr	r2, [r7, #28]
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea4:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d007      	beq.n	8005ec4 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005eba:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005ebc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f8e6 	bl	8006090 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d007      	beq.n	8005eda <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ed0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005ed2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 f8e6 	bl	80060a6 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	099b      	lsrs	r3, r3, #6
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d01a      	beq.n	8005f1c <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	099b      	lsrs	r3, r3, #6
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d014      	beq.n	8005f1c <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ef8:	0c1b      	lsrs	r3, r3, #16
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f08:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	2240      	movs	r2, #64	@ 0x40
 8005f10:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	6939      	ldr	r1, [r7, #16]
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f8d0 	bl	80060bc <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d007      	beq.n	8005f32 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f28:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005f2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f8d1 	bl	80060d4 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00b      	beq.n	8005f50 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	6a3a      	ldr	r2, [r7, #32]
 8005f3e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00b      	beq.n	8005f6e <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	69fa      	ldr	r2, [r7, #28]
 8005f5c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	431a      	orrs	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d002      	beq.n	8005f7e <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f874 	bl	8006066 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005f7e:	bf00      	nop
 8005f80:	3758      	adds	r7, #88	@ 0x58
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	4000a800 	.word	0x4000a800
 8005f8c:	3fcfffff 	.word	0x3fcfffff
 8005f90:	4000a000 	.word	0x4000a000

08005f94 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005f9e:	bf00      	nop
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800600a:	bf00      	nop
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006016:	b480      	push	{r7}
 8006018:	b083      	sub	sp, #12
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800601e:	bf00      	nop
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800602a:	b480      	push	{r7}
 800602c:	b083      	sub	sp, #12
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006032:	bf00      	nop
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800603e:	b480      	push	{r7}
 8006040:	b083      	sub	sp, #12
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006052:	b480      	push	{r7}
 8006054:	b083      	sub	sp, #12
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800605a:	bf00      	nop
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800606e:	bf00      	nop
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800607a:	b480      	push	{r7}
 800607c:	b083      	sub	sp, #12
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800609a:	bf00      	nop
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b083      	sub	sp, #12
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
	...

080060ec <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060f8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006102:	4ba7      	ldr	r3, [pc, #668]	@ (80063a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006104:	4013      	ands	r3, r2
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	0091      	lsls	r1, r2, #2
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	6812      	ldr	r2, [r2, #0]
 800610e:	430b      	orrs	r3, r1
 8006110:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800611c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006124:	041a      	lsls	r2, r3, #16
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	4413      	add	r3, r2
 8006138:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006142:	4b97      	ldr	r3, [pc, #604]	@ (80063a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006144:	4013      	ands	r3, r2
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	0091      	lsls	r1, r2, #2
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	6812      	ldr	r2, [r2, #0]
 800614e:	430b      	orrs	r3, r1
 8006150:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800615c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006164:	041a      	lsls	r2, r3, #16
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	4413      	add	r3, r2
 800617a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006184:	4b86      	ldr	r3, [pc, #536]	@ (80063a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006186:	4013      	ands	r3, r2
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	0091      	lsls	r1, r2, #2
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	6812      	ldr	r2, [r2, #0]
 8006190:	430b      	orrs	r3, r1
 8006192:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800619e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a6:	041a      	lsls	r2, r3, #16
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80061ba:	fb02 f303 	mul.w	r3, r2, r3
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	4413      	add	r3, r2
 80061c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80061cc:	4b74      	ldr	r3, [pc, #464]	@ (80063a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80061ce:	4013      	ands	r3, r2
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	0091      	lsls	r1, r2, #2
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	6812      	ldr	r2, [r2, #0]
 80061d8:	430b      	orrs	r3, r1
 80061da:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80061e6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061ee:	041a      	lsls	r2, r3, #16
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006202:	fb02 f303 	mul.w	r3, r2, r3
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	4413      	add	r3, r2
 800620a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8006214:	4b62      	ldr	r3, [pc, #392]	@ (80063a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006216:	4013      	ands	r3, r2
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	0091      	lsls	r1, r2, #2
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	6812      	ldr	r2, [r2, #0]
 8006220:	430b      	orrs	r3, r1
 8006222:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800622e:	fb02 f303 	mul.w	r3, r2, r3
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	4413      	add	r3, r2
 8006236:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8006240:	4b57      	ldr	r3, [pc, #348]	@ (80063a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006242:	4013      	ands	r3, r2
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	0091      	lsls	r1, r2, #2
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	6812      	ldr	r2, [r2, #0]
 800624c:	430b      	orrs	r3, r1
 800624e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800625a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006262:	041a      	lsls	r2, r3, #16
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006272:	005b      	lsls	r3, r3, #1
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	4413      	add	r3, r2
 8006278:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8006282:	4b47      	ldr	r3, [pc, #284]	@ (80063a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006284:	4013      	ands	r3, r2
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	0091      	lsls	r1, r2, #2
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	6812      	ldr	r2, [r2, #0]
 800628e:	430b      	orrs	r3, r1
 8006290:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800629c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062a4:	041a      	lsls	r2, r3, #16
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	430a      	orrs	r2, r1
 80062ac:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80062b8:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062c0:	061a      	lsls	r2, r3, #24
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062d0:	4b34      	ldr	r3, [pc, #208]	@ (80063a4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80062d2:	4413      	add	r3, r2
 80062d4:	009a      	lsls	r2, r3, #2
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	441a      	add	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062f2:	00db      	lsls	r3, r3, #3
 80062f4:	441a      	add	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006302:	6879      	ldr	r1, [r7, #4]
 8006304:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8006306:	fb01 f303 	mul.w	r3, r1, r3
 800630a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800630c:	441a      	add	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800631a:	6879      	ldr	r1, [r7, #4]
 800631c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800631e:	fb01 f303 	mul.w	r3, r1, r3
 8006322:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006324:	441a      	add	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006332:	6879      	ldr	r1, [r7, #4]
 8006334:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8006336:	fb01 f303 	mul.w	r3, r1, r3
 800633a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800633c:	441a      	add	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800634e:	00db      	lsls	r3, r3, #3
 8006350:	441a      	add	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006362:	6879      	ldr	r1, [r7, #4]
 8006364:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8006366:	fb01 f303 	mul.w	r3, r1, r3
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	441a      	add	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800637e:	6879      	ldr	r1, [r7, #4]
 8006380:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8006382:	fb01 f303 	mul.w	r3, r1, r3
 8006386:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006388:	441a      	add	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006396:	4a04      	ldr	r2, [pc, #16]	@ (80063a8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d915      	bls.n	80063c8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800639c:	e006      	b.n	80063ac <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800639e:	bf00      	nop
 80063a0:	ffff0003 	.word	0xffff0003
 80063a4:	10002b00 	.word	0x10002b00
 80063a8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063b2:	f043 0220 	orr.w	r2, r3, #32
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2203      	movs	r2, #3
 80063c0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e010      	b.n	80063ea <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	e005      	b.n	80063dc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	3304      	adds	r3, #4
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d3f3      	bcc.n	80063d0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop

080063f8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b089      	sub	sp, #36	@ 0x24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10a      	bne.n	8006424 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006416:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800641e:	4313      	orrs	r3, r2
 8006420:	61fb      	str	r3, [r7, #28]
 8006422:	e00a      	b.n	800643a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800642c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006432:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006434:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006438:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006444:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800644a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006450:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006458:	4313      	orrs	r3, r2
 800645a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006466:	6839      	ldr	r1, [r7, #0]
 8006468:	fb01 f303 	mul.w	r3, r1, r3
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	69fa      	ldr	r2, [r7, #28]
 8006476:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	3304      	adds	r3, #4
 800647c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	3304      	adds	r3, #4
 8006488:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800648a:	2300      	movs	r3, #0
 800648c:	617b      	str	r3, [r7, #20]
 800648e:	e020      	b.n	80064d2 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	3303      	adds	r3, #3
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	4413      	add	r3, r2
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	3302      	adds	r3, #2
 80064a0:	6879      	ldr	r1, [r7, #4]
 80064a2:	440b      	add	r3, r1
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80064a8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	3301      	adds	r3, #1
 80064ae:	6879      	ldr	r1, [r7, #4]
 80064b0:	440b      	add	r3, r1
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80064b6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80064b8:	6879      	ldr	r1, [r7, #4]
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	440a      	add	r2, r1
 80064be:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80064c0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	3304      	adds	r3, #4
 80064ca:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	3304      	adds	r3, #4
 80064d0:	617b      	str	r3, [r7, #20]
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	4a06      	ldr	r2, [pc, #24]	@ (80064f0 <FDCAN_CopyMessageToRAM+0xf8>)
 80064d8:	5cd3      	ldrb	r3, [r2, r3]
 80064da:	461a      	mov	r2, r3
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	4293      	cmp	r3, r2
 80064e0:	d3d6      	bcc.n	8006490 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 80064e2:	bf00      	nop
 80064e4:	bf00      	nop
 80064e6:	3724      	adds	r7, #36	@ 0x24
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	0800d078 	.word	0x0800d078

080064f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b089      	sub	sp, #36	@ 0x24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80064fe:	2300      	movs	r3, #0
 8006500:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006502:	4b86      	ldr	r3, [pc, #536]	@ (800671c <HAL_GPIO_Init+0x228>)
 8006504:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006506:	e18c      	b.n	8006822 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	2101      	movs	r1, #1
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	fa01 f303 	lsl.w	r3, r1, r3
 8006514:	4013      	ands	r3, r2
 8006516:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 817e 	beq.w	800681c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f003 0303 	and.w	r3, r3, #3
 8006528:	2b01      	cmp	r3, #1
 800652a:	d005      	beq.n	8006538 <HAL_GPIO_Init+0x44>
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f003 0303 	and.w	r3, r3, #3
 8006534:	2b02      	cmp	r3, #2
 8006536:	d130      	bne.n	800659a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	2203      	movs	r2, #3
 8006544:	fa02 f303 	lsl.w	r3, r2, r3
 8006548:	43db      	mvns	r3, r3
 800654a:	69ba      	ldr	r2, [r7, #24]
 800654c:	4013      	ands	r3, r2
 800654e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	68da      	ldr	r2, [r3, #12]
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	fa02 f303 	lsl.w	r3, r2, r3
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	4313      	orrs	r3, r2
 8006560:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	69ba      	ldr	r2, [r7, #24]
 8006566:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800656e:	2201      	movs	r2, #1
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	fa02 f303 	lsl.w	r3, r2, r3
 8006576:	43db      	mvns	r3, r3
 8006578:	69ba      	ldr	r2, [r7, #24]
 800657a:	4013      	ands	r3, r2
 800657c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	091b      	lsrs	r3, r3, #4
 8006584:	f003 0201 	and.w	r2, r3, #1
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	fa02 f303 	lsl.w	r3, r2, r3
 800658e:	69ba      	ldr	r2, [r7, #24]
 8006590:	4313      	orrs	r3, r2
 8006592:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	69ba      	ldr	r2, [r7, #24]
 8006598:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f003 0303 	and.w	r3, r3, #3
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d017      	beq.n	80065d6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	2203      	movs	r2, #3
 80065b2:	fa02 f303 	lsl.w	r3, r2, r3
 80065b6:	43db      	mvns	r3, r3
 80065b8:	69ba      	ldr	r2, [r7, #24]
 80065ba:	4013      	ands	r3, r2
 80065bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	689a      	ldr	r2, [r3, #8]
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	005b      	lsls	r3, r3, #1
 80065c6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ca:	69ba      	ldr	r2, [r7, #24]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f003 0303 	and.w	r3, r3, #3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d123      	bne.n	800662a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	08da      	lsrs	r2, r3, #3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	3208      	adds	r2, #8
 80065ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	f003 0307 	and.w	r3, r3, #7
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	220f      	movs	r2, #15
 80065fa:	fa02 f303 	lsl.w	r3, r2, r3
 80065fe:	43db      	mvns	r3, r3
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	4013      	ands	r3, r2
 8006604:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	691a      	ldr	r2, [r3, #16]
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	fa02 f303 	lsl.w	r3, r2, r3
 8006616:	69ba      	ldr	r2, [r7, #24]
 8006618:	4313      	orrs	r3, r2
 800661a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	08da      	lsrs	r2, r3, #3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	3208      	adds	r2, #8
 8006624:	69b9      	ldr	r1, [r7, #24]
 8006626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	2203      	movs	r2, #3
 8006636:	fa02 f303 	lsl.w	r3, r2, r3
 800663a:	43db      	mvns	r3, r3
 800663c:	69ba      	ldr	r2, [r7, #24]
 800663e:	4013      	ands	r3, r2
 8006640:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f003 0203 	and.w	r2, r3, #3
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	005b      	lsls	r3, r3, #1
 800664e:	fa02 f303 	lsl.w	r3, r2, r3
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	4313      	orrs	r3, r2
 8006656:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006666:	2b00      	cmp	r3, #0
 8006668:	f000 80d8 	beq.w	800681c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800666c:	4b2c      	ldr	r3, [pc, #176]	@ (8006720 <HAL_GPIO_Init+0x22c>)
 800666e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006672:	4a2b      	ldr	r2, [pc, #172]	@ (8006720 <HAL_GPIO_Init+0x22c>)
 8006674:	f043 0302 	orr.w	r3, r3, #2
 8006678:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800667c:	4b28      	ldr	r3, [pc, #160]	@ (8006720 <HAL_GPIO_Init+0x22c>)
 800667e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800668a:	4a26      	ldr	r2, [pc, #152]	@ (8006724 <HAL_GPIO_Init+0x230>)
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	089b      	lsrs	r3, r3, #2
 8006690:	3302      	adds	r3, #2
 8006692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006696:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	f003 0303 	and.w	r3, r3, #3
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	220f      	movs	r2, #15
 80066a2:	fa02 f303 	lsl.w	r3, r2, r3
 80066a6:	43db      	mvns	r3, r3
 80066a8:	69ba      	ldr	r2, [r7, #24]
 80066aa:	4013      	ands	r3, r2
 80066ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006728 <HAL_GPIO_Init+0x234>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d04a      	beq.n	800674c <HAL_GPIO_Init+0x258>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a1c      	ldr	r2, [pc, #112]	@ (800672c <HAL_GPIO_Init+0x238>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d02b      	beq.n	8006716 <HAL_GPIO_Init+0x222>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a1b      	ldr	r2, [pc, #108]	@ (8006730 <HAL_GPIO_Init+0x23c>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d025      	beq.n	8006712 <HAL_GPIO_Init+0x21e>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a1a      	ldr	r2, [pc, #104]	@ (8006734 <HAL_GPIO_Init+0x240>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d01f      	beq.n	800670e <HAL_GPIO_Init+0x21a>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a19      	ldr	r2, [pc, #100]	@ (8006738 <HAL_GPIO_Init+0x244>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d019      	beq.n	800670a <HAL_GPIO_Init+0x216>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a18      	ldr	r2, [pc, #96]	@ (800673c <HAL_GPIO_Init+0x248>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d013      	beq.n	8006706 <HAL_GPIO_Init+0x212>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a17      	ldr	r2, [pc, #92]	@ (8006740 <HAL_GPIO_Init+0x24c>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d00d      	beq.n	8006702 <HAL_GPIO_Init+0x20e>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a16      	ldr	r2, [pc, #88]	@ (8006744 <HAL_GPIO_Init+0x250>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d007      	beq.n	80066fe <HAL_GPIO_Init+0x20a>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a15      	ldr	r2, [pc, #84]	@ (8006748 <HAL_GPIO_Init+0x254>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d101      	bne.n	80066fa <HAL_GPIO_Init+0x206>
 80066f6:	2309      	movs	r3, #9
 80066f8:	e029      	b.n	800674e <HAL_GPIO_Init+0x25a>
 80066fa:	230a      	movs	r3, #10
 80066fc:	e027      	b.n	800674e <HAL_GPIO_Init+0x25a>
 80066fe:	2307      	movs	r3, #7
 8006700:	e025      	b.n	800674e <HAL_GPIO_Init+0x25a>
 8006702:	2306      	movs	r3, #6
 8006704:	e023      	b.n	800674e <HAL_GPIO_Init+0x25a>
 8006706:	2305      	movs	r3, #5
 8006708:	e021      	b.n	800674e <HAL_GPIO_Init+0x25a>
 800670a:	2304      	movs	r3, #4
 800670c:	e01f      	b.n	800674e <HAL_GPIO_Init+0x25a>
 800670e:	2303      	movs	r3, #3
 8006710:	e01d      	b.n	800674e <HAL_GPIO_Init+0x25a>
 8006712:	2302      	movs	r3, #2
 8006714:	e01b      	b.n	800674e <HAL_GPIO_Init+0x25a>
 8006716:	2301      	movs	r3, #1
 8006718:	e019      	b.n	800674e <HAL_GPIO_Init+0x25a>
 800671a:	bf00      	nop
 800671c:	58000080 	.word	0x58000080
 8006720:	58024400 	.word	0x58024400
 8006724:	58000400 	.word	0x58000400
 8006728:	58020000 	.word	0x58020000
 800672c:	58020400 	.word	0x58020400
 8006730:	58020800 	.word	0x58020800
 8006734:	58020c00 	.word	0x58020c00
 8006738:	58021000 	.word	0x58021000
 800673c:	58021400 	.word	0x58021400
 8006740:	58021800 	.word	0x58021800
 8006744:	58021c00 	.word	0x58021c00
 8006748:	58022400 	.word	0x58022400
 800674c:	2300      	movs	r3, #0
 800674e:	69fa      	ldr	r2, [r7, #28]
 8006750:	f002 0203 	and.w	r2, r2, #3
 8006754:	0092      	lsls	r2, r2, #2
 8006756:	4093      	lsls	r3, r2
 8006758:	69ba      	ldr	r2, [r7, #24]
 800675a:	4313      	orrs	r3, r2
 800675c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800675e:	4938      	ldr	r1, [pc, #224]	@ (8006840 <HAL_GPIO_Init+0x34c>)
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	089b      	lsrs	r3, r3, #2
 8006764:	3302      	adds	r3, #2
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800676c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	43db      	mvns	r3, r3
 8006778:	69ba      	ldr	r2, [r7, #24]
 800677a:	4013      	ands	r3, r2
 800677c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	4313      	orrs	r3, r2
 8006790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006792:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800679a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	43db      	mvns	r3, r3
 80067a6:	69ba      	ldr	r2, [r7, #24]
 80067a8:	4013      	ands	r3, r2
 80067aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d003      	beq.n	80067c0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	4313      	orrs	r3, r2
 80067be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80067c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	43db      	mvns	r3, r3
 80067d2:	69ba      	ldr	r2, [r7, #24]
 80067d4:	4013      	ands	r3, r2
 80067d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d003      	beq.n	80067ec <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80067e4:	69ba      	ldr	r2, [r7, #24]
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	69ba      	ldr	r2, [r7, #24]
 80067f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	43db      	mvns	r3, r3
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	4013      	ands	r3, r2
 8006800:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800680e:	69ba      	ldr	r2, [r7, #24]
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	4313      	orrs	r3, r2
 8006814:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	3301      	adds	r3, #1
 8006820:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	fa22 f303 	lsr.w	r3, r2, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	f47f ae6b 	bne.w	8006508 <HAL_GPIO_Init+0x14>
  }
}
 8006832:	bf00      	nop
 8006834:	bf00      	nop
 8006836:	3724      	adds	r7, #36	@ 0x24
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	58000400 	.word	0x58000400

08006844 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	460b      	mov	r3, r1
 800684e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	691a      	ldr	r2, [r3, #16]
 8006854:	887b      	ldrh	r3, [r7, #2]
 8006856:	4013      	ands	r3, r2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d002      	beq.n	8006862 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800685c:	2301      	movs	r3, #1
 800685e:	73fb      	strb	r3, [r7, #15]
 8006860:	e001      	b.n	8006866 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006862:	2300      	movs	r3, #0
 8006864:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006866:	7bfb      	ldrb	r3, [r7, #15]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3714      	adds	r7, #20
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	460b      	mov	r3, r1
 800687e:	807b      	strh	r3, [r7, #2]
 8006880:	4613      	mov	r3, r2
 8006882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006884:	787b      	ldrb	r3, [r7, #1]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d003      	beq.n	8006892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800688a:	887a      	ldrh	r2, [r7, #2]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006890:	e003      	b.n	800689a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006892:	887b      	ldrh	r3, [r7, #2]
 8006894:	041a      	lsls	r2, r3, #16
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	619a      	str	r2, [r3, #24]
}
 800689a:	bf00      	nop
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
	...

080068a8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80068b0:	4b19      	ldr	r3, [pc, #100]	@ (8006918 <HAL_PWREx_ConfigSupply+0x70>)
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	f003 0304 	and.w	r3, r3, #4
 80068b8:	2b04      	cmp	r3, #4
 80068ba:	d00a      	beq.n	80068d2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80068bc:	4b16      	ldr	r3, [pc, #88]	@ (8006918 <HAL_PWREx_ConfigSupply+0x70>)
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f003 0307 	and.w	r3, r3, #7
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d001      	beq.n	80068ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e01f      	b.n	800690e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80068ce:	2300      	movs	r3, #0
 80068d0:	e01d      	b.n	800690e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80068d2:	4b11      	ldr	r3, [pc, #68]	@ (8006918 <HAL_PWREx_ConfigSupply+0x70>)
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	f023 0207 	bic.w	r2, r3, #7
 80068da:	490f      	ldr	r1, [pc, #60]	@ (8006918 <HAL_PWREx_ConfigSupply+0x70>)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4313      	orrs	r3, r2
 80068e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80068e2:	f7fc fb7f 	bl	8002fe4 <HAL_GetTick>
 80068e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80068e8:	e009      	b.n	80068fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80068ea:	f7fc fb7b 	bl	8002fe4 <HAL_GetTick>
 80068ee:	4602      	mov	r2, r0
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80068f8:	d901      	bls.n	80068fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e007      	b.n	800690e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80068fe:	4b06      	ldr	r3, [pc, #24]	@ (8006918 <HAL_PWREx_ConfigSupply+0x70>)
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006906:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800690a:	d1ee      	bne.n	80068ea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	58024800 	.word	0x58024800

0800691c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b08c      	sub	sp, #48	@ 0x30
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d101      	bne.n	800692e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e3c8      	b.n	80070c0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 8087 	beq.w	8006a4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800693c:	4b88      	ldr	r3, [pc, #544]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006944:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006946:	4b86      	ldr	r3, [pc, #536]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 8006948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800694a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800694c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800694e:	2b10      	cmp	r3, #16
 8006950:	d007      	beq.n	8006962 <HAL_RCC_OscConfig+0x46>
 8006952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006954:	2b18      	cmp	r3, #24
 8006956:	d110      	bne.n	800697a <HAL_RCC_OscConfig+0x5e>
 8006958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800695a:	f003 0303 	and.w	r3, r3, #3
 800695e:	2b02      	cmp	r3, #2
 8006960:	d10b      	bne.n	800697a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006962:	4b7f      	ldr	r3, [pc, #508]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d06c      	beq.n	8006a48 <HAL_RCC_OscConfig+0x12c>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d168      	bne.n	8006a48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e3a2      	b.n	80070c0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006982:	d106      	bne.n	8006992 <HAL_RCC_OscConfig+0x76>
 8006984:	4b76      	ldr	r3, [pc, #472]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a75      	ldr	r2, [pc, #468]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 800698a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800698e:	6013      	str	r3, [r2, #0]
 8006990:	e02e      	b.n	80069f0 <HAL_RCC_OscConfig+0xd4>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10c      	bne.n	80069b4 <HAL_RCC_OscConfig+0x98>
 800699a:	4b71      	ldr	r3, [pc, #452]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a70      	ldr	r2, [pc, #448]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 80069a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069a4:	6013      	str	r3, [r2, #0]
 80069a6:	4b6e      	ldr	r3, [pc, #440]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a6d      	ldr	r2, [pc, #436]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 80069ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069b0:	6013      	str	r3, [r2, #0]
 80069b2:	e01d      	b.n	80069f0 <HAL_RCC_OscConfig+0xd4>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80069bc:	d10c      	bne.n	80069d8 <HAL_RCC_OscConfig+0xbc>
 80069be:	4b68      	ldr	r3, [pc, #416]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a67      	ldr	r2, [pc, #412]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 80069c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80069c8:	6013      	str	r3, [r2, #0]
 80069ca:	4b65      	ldr	r3, [pc, #404]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a64      	ldr	r2, [pc, #400]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 80069d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069d4:	6013      	str	r3, [r2, #0]
 80069d6:	e00b      	b.n	80069f0 <HAL_RCC_OscConfig+0xd4>
 80069d8:	4b61      	ldr	r3, [pc, #388]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a60      	ldr	r2, [pc, #384]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 80069de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069e2:	6013      	str	r3, [r2, #0]
 80069e4:	4b5e      	ldr	r3, [pc, #376]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a5d      	ldr	r2, [pc, #372]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 80069ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d013      	beq.n	8006a20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f8:	f7fc faf4 	bl	8002fe4 <HAL_GetTick>
 80069fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069fe:	e008      	b.n	8006a12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a00:	f7fc faf0 	bl	8002fe4 <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b64      	cmp	r3, #100	@ 0x64
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e356      	b.n	80070c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a12:	4b53      	ldr	r3, [pc, #332]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d0f0      	beq.n	8006a00 <HAL_RCC_OscConfig+0xe4>
 8006a1e:	e014      	b.n	8006a4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a20:	f7fc fae0 	bl	8002fe4 <HAL_GetTick>
 8006a24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a26:	e008      	b.n	8006a3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a28:	f7fc fadc 	bl	8002fe4 <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	2b64      	cmp	r3, #100	@ 0x64
 8006a34:	d901      	bls.n	8006a3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e342      	b.n	80070c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a3a:	4b49      	ldr	r3, [pc, #292]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1f0      	bne.n	8006a28 <HAL_RCC_OscConfig+0x10c>
 8006a46:	e000      	b.n	8006a4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 808c 	beq.w	8006b70 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a58:	4b41      	ldr	r3, [pc, #260]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a60:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a62:	4b3f      	ldr	r3, [pc, #252]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 8006a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a66:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d007      	beq.n	8006a7e <HAL_RCC_OscConfig+0x162>
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	2b18      	cmp	r3, #24
 8006a72:	d137      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x1c8>
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	f003 0303 	and.w	r3, r3, #3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d132      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a7e:	4b38      	ldr	r3, [pc, #224]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0304 	and.w	r3, r3, #4
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d005      	beq.n	8006a96 <HAL_RCC_OscConfig+0x17a>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e314      	b.n	80070c0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a96:	4b32      	ldr	r3, [pc, #200]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f023 0219 	bic.w	r2, r3, #25
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	492f      	ldr	r1, [pc, #188]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa8:	f7fc fa9c 	bl	8002fe4 <HAL_GetTick>
 8006aac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006aae:	e008      	b.n	8006ac2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ab0:	f7fc fa98 	bl	8002fe4 <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d901      	bls.n	8006ac2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e2fe      	b.n	80070c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ac2:	4b27      	ldr	r3, [pc, #156]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0304 	and.w	r3, r3, #4
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d0f0      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ace:	4b24      	ldr	r3, [pc, #144]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	061b      	lsls	r3, r3, #24
 8006adc:	4920      	ldr	r1, [pc, #128]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ae2:	e045      	b.n	8006b70 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d026      	beq.n	8006b3a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006aec:	4b1c      	ldr	r3, [pc, #112]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f023 0219 	bic.w	r2, r3, #25
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	4919      	ldr	r1, [pc, #100]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006afe:	f7fc fa71 	bl	8002fe4 <HAL_GetTick>
 8006b02:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b04:	e008      	b.n	8006b18 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b06:	f7fc fa6d 	bl	8002fe4 <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d901      	bls.n	8006b18 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e2d3      	b.n	80070c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b18:	4b11      	ldr	r3, [pc, #68]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0304 	and.w	r3, r3, #4
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d0f0      	beq.n	8006b06 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b24:	4b0e      	ldr	r3, [pc, #56]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	061b      	lsls	r3, r3, #24
 8006b32:	490b      	ldr	r1, [pc, #44]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	604b      	str	r3, [r1, #4]
 8006b38:	e01a      	b.n	8006b70 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b3a:	4b09      	ldr	r3, [pc, #36]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a08      	ldr	r2, [pc, #32]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 8006b40:	f023 0301 	bic.w	r3, r3, #1
 8006b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b46:	f7fc fa4d 	bl	8002fe4 <HAL_GetTick>
 8006b4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b4c:	e00a      	b.n	8006b64 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b4e:	f7fc fa49 	bl	8002fe4 <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d903      	bls.n	8006b64 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e2af      	b.n	80070c0 <HAL_RCC_OscConfig+0x7a4>
 8006b60:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b64:	4b96      	ldr	r3, [pc, #600]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0304 	and.w	r3, r3, #4
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1ee      	bne.n	8006b4e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0310 	and.w	r3, r3, #16
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d06a      	beq.n	8006c52 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b7c:	4b90      	ldr	r3, [pc, #576]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b84:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b86:	4b8e      	ldr	r3, [pc, #568]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b8a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	2b08      	cmp	r3, #8
 8006b90:	d007      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x286>
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	2b18      	cmp	r3, #24
 8006b96:	d11b      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x2b4>
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f003 0303 	and.w	r3, r3, #3
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d116      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ba2:	4b87      	ldr	r3, [pc, #540]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d005      	beq.n	8006bba <HAL_RCC_OscConfig+0x29e>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	69db      	ldr	r3, [r3, #28]
 8006bb2:	2b80      	cmp	r3, #128	@ 0x80
 8006bb4:	d001      	beq.n	8006bba <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e282      	b.n	80070c0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006bba:	4b81      	ldr	r3, [pc, #516]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	061b      	lsls	r3, r3, #24
 8006bc8:	497d      	ldr	r1, [pc, #500]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006bce:	e040      	b.n	8006c52 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d023      	beq.n	8006c20 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006bd8:	4b79      	ldr	r3, [pc, #484]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a78      	ldr	r2, [pc, #480]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be4:	f7fc f9fe 	bl	8002fe4 <HAL_GetTick>
 8006be8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006bea:	e008      	b.n	8006bfe <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006bec:	f7fc f9fa 	bl	8002fe4 <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d901      	bls.n	8006bfe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e260      	b.n	80070c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006bfe:	4b70      	ldr	r3, [pc, #448]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d0f0      	beq.n	8006bec <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c0a:	4b6d      	ldr	r3, [pc, #436]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	061b      	lsls	r3, r3, #24
 8006c18:	4969      	ldr	r1, [pc, #420]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	60cb      	str	r3, [r1, #12]
 8006c1e:	e018      	b.n	8006c52 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006c20:	4b67      	ldr	r3, [pc, #412]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a66      	ldr	r2, [pc, #408]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006c26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c2c:	f7fc f9da 	bl	8002fe4 <HAL_GetTick>
 8006c30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c32:	e008      	b.n	8006c46 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006c34:	f7fc f9d6 	bl	8002fe4 <HAL_GetTick>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d901      	bls.n	8006c46 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e23c      	b.n	80070c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c46:	4b5e      	ldr	r3, [pc, #376]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1f0      	bne.n	8006c34 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0308 	and.w	r3, r3, #8
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d036      	beq.n	8006ccc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d019      	beq.n	8006c9a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c66:	4b56      	ldr	r3, [pc, #344]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c6a:	4a55      	ldr	r2, [pc, #340]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006c6c:	f043 0301 	orr.w	r3, r3, #1
 8006c70:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c72:	f7fc f9b7 	bl	8002fe4 <HAL_GetTick>
 8006c76:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c78:	e008      	b.n	8006c8c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c7a:	f7fc f9b3 	bl	8002fe4 <HAL_GetTick>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d901      	bls.n	8006c8c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e219      	b.n	80070c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c8c:	4b4c      	ldr	r3, [pc, #304]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006c8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c90:	f003 0302 	and.w	r3, r3, #2
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d0f0      	beq.n	8006c7a <HAL_RCC_OscConfig+0x35e>
 8006c98:	e018      	b.n	8006ccc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c9a:	4b49      	ldr	r3, [pc, #292]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006c9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c9e:	4a48      	ldr	r2, [pc, #288]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006ca0:	f023 0301 	bic.w	r3, r3, #1
 8006ca4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ca6:	f7fc f99d 	bl	8002fe4 <HAL_GetTick>
 8006caa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006cac:	e008      	b.n	8006cc0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cae:	f7fc f999 	bl	8002fe4 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d901      	bls.n	8006cc0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e1ff      	b.n	80070c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006cc0:	4b3f      	ldr	r3, [pc, #252]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006cc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cc4:	f003 0302 	and.w	r3, r3, #2
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1f0      	bne.n	8006cae <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0320 	and.w	r3, r3, #32
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d036      	beq.n	8006d46 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d019      	beq.n	8006d14 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006ce0:	4b37      	ldr	r3, [pc, #220]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a36      	ldr	r2, [pc, #216]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006ce6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006cea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006cec:	f7fc f97a 	bl	8002fe4 <HAL_GetTick>
 8006cf0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006cf2:	e008      	b.n	8006d06 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cf4:	f7fc f976 	bl	8002fe4 <HAL_GetTick>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d901      	bls.n	8006d06 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e1dc      	b.n	80070c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d06:	4b2e      	ldr	r3, [pc, #184]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d0f0      	beq.n	8006cf4 <HAL_RCC_OscConfig+0x3d8>
 8006d12:	e018      	b.n	8006d46 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d14:	4b2a      	ldr	r3, [pc, #168]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a29      	ldr	r2, [pc, #164]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006d1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d1e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d20:	f7fc f960 	bl	8002fe4 <HAL_GetTick>
 8006d24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d26:	e008      	b.n	8006d3a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d28:	f7fc f95c 	bl	8002fe4 <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d901      	bls.n	8006d3a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e1c2      	b.n	80070c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d3a:	4b21      	ldr	r3, [pc, #132]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1f0      	bne.n	8006d28 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0304 	and.w	r3, r3, #4
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f000 8086 	beq.w	8006e60 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006d54:	4b1b      	ldr	r3, [pc, #108]	@ (8006dc4 <HAL_RCC_OscConfig+0x4a8>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a1a      	ldr	r2, [pc, #104]	@ (8006dc4 <HAL_RCC_OscConfig+0x4a8>)
 8006d5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d60:	f7fc f940 	bl	8002fe4 <HAL_GetTick>
 8006d64:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d66:	e008      	b.n	8006d7a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d68:	f7fc f93c 	bl	8002fe4 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	2b64      	cmp	r3, #100	@ 0x64
 8006d74:	d901      	bls.n	8006d7a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e1a2      	b.n	80070c0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d7a:	4b12      	ldr	r3, [pc, #72]	@ (8006dc4 <HAL_RCC_OscConfig+0x4a8>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d0f0      	beq.n	8006d68 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d106      	bne.n	8006d9c <HAL_RCC_OscConfig+0x480>
 8006d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d92:	4a0b      	ldr	r2, [pc, #44]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006d94:	f043 0301 	orr.w	r3, r3, #1
 8006d98:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d9a:	e032      	b.n	8006e02 <HAL_RCC_OscConfig+0x4e6>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d111      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x4ac>
 8006da4:	4b06      	ldr	r3, [pc, #24]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006da8:	4a05      	ldr	r2, [pc, #20]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006daa:	f023 0301 	bic.w	r3, r3, #1
 8006dae:	6713      	str	r3, [r2, #112]	@ 0x70
 8006db0:	4b03      	ldr	r3, [pc, #12]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006db4:	4a02      	ldr	r2, [pc, #8]	@ (8006dc0 <HAL_RCC_OscConfig+0x4a4>)
 8006db6:	f023 0304 	bic.w	r3, r3, #4
 8006dba:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dbc:	e021      	b.n	8006e02 <HAL_RCC_OscConfig+0x4e6>
 8006dbe:	bf00      	nop
 8006dc0:	58024400 	.word	0x58024400
 8006dc4:	58024800 	.word	0x58024800
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	2b05      	cmp	r3, #5
 8006dce:	d10c      	bne.n	8006dea <HAL_RCC_OscConfig+0x4ce>
 8006dd0:	4b83      	ldr	r3, [pc, #524]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dd4:	4a82      	ldr	r2, [pc, #520]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006dd6:	f043 0304 	orr.w	r3, r3, #4
 8006dda:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ddc:	4b80      	ldr	r3, [pc, #512]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006de0:	4a7f      	ldr	r2, [pc, #508]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006de2:	f043 0301 	orr.w	r3, r3, #1
 8006de6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006de8:	e00b      	b.n	8006e02 <HAL_RCC_OscConfig+0x4e6>
 8006dea:	4b7d      	ldr	r3, [pc, #500]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dee:	4a7c      	ldr	r2, [pc, #496]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006df0:	f023 0301 	bic.w	r3, r3, #1
 8006df4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006df6:	4b7a      	ldr	r3, [pc, #488]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dfa:	4a79      	ldr	r2, [pc, #484]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006dfc:	f023 0304 	bic.w	r3, r3, #4
 8006e00:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d015      	beq.n	8006e36 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e0a:	f7fc f8eb 	bl	8002fe4 <HAL_GetTick>
 8006e0e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e10:	e00a      	b.n	8006e28 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e12:	f7fc f8e7 	bl	8002fe4 <HAL_GetTick>
 8006e16:	4602      	mov	r2, r0
 8006e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d901      	bls.n	8006e28 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e14b      	b.n	80070c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e28:	4b6d      	ldr	r3, [pc, #436]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e2c:	f003 0302 	and.w	r3, r3, #2
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d0ee      	beq.n	8006e12 <HAL_RCC_OscConfig+0x4f6>
 8006e34:	e014      	b.n	8006e60 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e36:	f7fc f8d5 	bl	8002fe4 <HAL_GetTick>
 8006e3a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e3c:	e00a      	b.n	8006e54 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e3e:	f7fc f8d1 	bl	8002fe4 <HAL_GetTick>
 8006e42:	4602      	mov	r2, r0
 8006e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d901      	bls.n	8006e54 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e135      	b.n	80070c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e54:	4b62      	ldr	r3, [pc, #392]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e58:	f003 0302 	and.w	r3, r3, #2
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1ee      	bne.n	8006e3e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f000 812a 	beq.w	80070be <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006e6a:	4b5d      	ldr	r3, [pc, #372]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e72:	2b18      	cmp	r3, #24
 8006e74:	f000 80ba 	beq.w	8006fec <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	f040 8095 	bne.w	8006fac <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e82:	4b57      	ldr	r3, [pc, #348]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a56      	ldr	r2, [pc, #344]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006e88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e8e:	f7fc f8a9 	bl	8002fe4 <HAL_GetTick>
 8006e92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e94:	e008      	b.n	8006ea8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e96:	f7fc f8a5 	bl	8002fe4 <HAL_GetTick>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d901      	bls.n	8006ea8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e10b      	b.n	80070c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ea8:	4b4d      	ldr	r3, [pc, #308]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1f0      	bne.n	8006e96 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006eb4:	4b4a      	ldr	r3, [pc, #296]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006eb6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006eb8:	4b4a      	ldr	r3, [pc, #296]	@ (8006fe4 <HAL_RCC_OscConfig+0x6c8>)
 8006eba:	4013      	ands	r3, r2
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006ec4:	0112      	lsls	r2, r2, #4
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	4945      	ldr	r1, [pc, #276]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	628b      	str	r3, [r1, #40]	@ 0x28
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006edc:	3b01      	subs	r3, #1
 8006ede:	025b      	lsls	r3, r3, #9
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	431a      	orrs	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	041b      	lsls	r3, r3, #16
 8006eec:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006ef0:	431a      	orrs	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	061b      	lsls	r3, r3, #24
 8006efa:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006efe:	4938      	ldr	r1, [pc, #224]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006f00:	4313      	orrs	r3, r2
 8006f02:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006f04:	4b36      	ldr	r3, [pc, #216]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f08:	4a35      	ldr	r2, [pc, #212]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006f0a:	f023 0301 	bic.w	r3, r3, #1
 8006f0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f10:	4b33      	ldr	r3, [pc, #204]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006f12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f14:	4b34      	ldr	r3, [pc, #208]	@ (8006fe8 <HAL_RCC_OscConfig+0x6cc>)
 8006f16:	4013      	ands	r3, r2
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006f1c:	00d2      	lsls	r2, r2, #3
 8006f1e:	4930      	ldr	r1, [pc, #192]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006f24:	4b2e      	ldr	r3, [pc, #184]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f28:	f023 020c 	bic.w	r2, r3, #12
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f30:	492b      	ldr	r1, [pc, #172]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006f36:	4b2a      	ldr	r3, [pc, #168]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f3a:	f023 0202 	bic.w	r2, r3, #2
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f42:	4927      	ldr	r1, [pc, #156]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006f44:	4313      	orrs	r3, r2
 8006f46:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006f48:	4b25      	ldr	r3, [pc, #148]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f4c:	4a24      	ldr	r2, [pc, #144]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006f4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f54:	4b22      	ldr	r3, [pc, #136]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f58:	4a21      	ldr	r2, [pc, #132]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006f5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006f60:	4b1f      	ldr	r3, [pc, #124]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f64:	4a1e      	ldr	r2, [pc, #120]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006f66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f70:	4a1b      	ldr	r2, [pc, #108]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006f72:	f043 0301 	orr.w	r3, r3, #1
 8006f76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f78:	4b19      	ldr	r3, [pc, #100]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a18      	ldr	r2, [pc, #96]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006f7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f84:	f7fc f82e 	bl	8002fe4 <HAL_GetTick>
 8006f88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f8a:	e008      	b.n	8006f9e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f8c:	f7fc f82a 	bl	8002fe4 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d901      	bls.n	8006f9e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e090      	b.n	80070c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f9e:	4b10      	ldr	r3, [pc, #64]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d0f0      	beq.n	8006f8c <HAL_RCC_OscConfig+0x670>
 8006faa:	e088      	b.n	80070be <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fac:	4b0c      	ldr	r3, [pc, #48]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a0b      	ldr	r2, [pc, #44]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006fb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb8:	f7fc f814 	bl	8002fe4 <HAL_GetTick>
 8006fbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006fbe:	e008      	b.n	8006fd2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fc0:	f7fc f810 	bl	8002fe4 <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d901      	bls.n	8006fd2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e076      	b.n	80070c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006fd2:	4b03      	ldr	r3, [pc, #12]	@ (8006fe0 <HAL_RCC_OscConfig+0x6c4>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1f0      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x6a4>
 8006fde:	e06e      	b.n	80070be <HAL_RCC_OscConfig+0x7a2>
 8006fe0:	58024400 	.word	0x58024400
 8006fe4:	fffffc0c 	.word	0xfffffc0c
 8006fe8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006fec:	4b36      	ldr	r3, [pc, #216]	@ (80070c8 <HAL_RCC_OscConfig+0x7ac>)
 8006fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006ff2:	4b35      	ldr	r3, [pc, #212]	@ (80070c8 <HAL_RCC_OscConfig+0x7ac>)
 8006ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d031      	beq.n	8007064 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	f003 0203 	and.w	r2, r3, #3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800700a:	429a      	cmp	r2, r3
 800700c:	d12a      	bne.n	8007064 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	091b      	lsrs	r3, r3, #4
 8007012:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800701a:	429a      	cmp	r2, r3
 800701c:	d122      	bne.n	8007064 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007028:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800702a:	429a      	cmp	r2, r3
 800702c:	d11a      	bne.n	8007064 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	0a5b      	lsrs	r3, r3, #9
 8007032:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800703a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800703c:	429a      	cmp	r2, r3
 800703e:	d111      	bne.n	8007064 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	0c1b      	lsrs	r3, r3, #16
 8007044:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800704e:	429a      	cmp	r2, r3
 8007050:	d108      	bne.n	8007064 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	0e1b      	lsrs	r3, r3, #24
 8007056:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800705e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007060:	429a      	cmp	r2, r3
 8007062:	d001      	beq.n	8007068 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e02b      	b.n	80070c0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007068:	4b17      	ldr	r3, [pc, #92]	@ (80070c8 <HAL_RCC_OscConfig+0x7ac>)
 800706a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800706c:	08db      	lsrs	r3, r3, #3
 800706e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007072:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	429a      	cmp	r2, r3
 800707c:	d01f      	beq.n	80070be <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800707e:	4b12      	ldr	r3, [pc, #72]	@ (80070c8 <HAL_RCC_OscConfig+0x7ac>)
 8007080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007082:	4a11      	ldr	r2, [pc, #68]	@ (80070c8 <HAL_RCC_OscConfig+0x7ac>)
 8007084:	f023 0301 	bic.w	r3, r3, #1
 8007088:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800708a:	f7fb ffab 	bl	8002fe4 <HAL_GetTick>
 800708e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007090:	bf00      	nop
 8007092:	f7fb ffa7 	bl	8002fe4 <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709a:	4293      	cmp	r3, r2
 800709c:	d0f9      	beq.n	8007092 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800709e:	4b0a      	ldr	r3, [pc, #40]	@ (80070c8 <HAL_RCC_OscConfig+0x7ac>)
 80070a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070a2:	4b0a      	ldr	r3, [pc, #40]	@ (80070cc <HAL_RCC_OscConfig+0x7b0>)
 80070a4:	4013      	ands	r3, r2
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80070aa:	00d2      	lsls	r2, r2, #3
 80070ac:	4906      	ldr	r1, [pc, #24]	@ (80070c8 <HAL_RCC_OscConfig+0x7ac>)
 80070ae:	4313      	orrs	r3, r2
 80070b0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80070b2:	4b05      	ldr	r3, [pc, #20]	@ (80070c8 <HAL_RCC_OscConfig+0x7ac>)
 80070b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b6:	4a04      	ldr	r2, [pc, #16]	@ (80070c8 <HAL_RCC_OscConfig+0x7ac>)
 80070b8:	f043 0301 	orr.w	r3, r3, #1
 80070bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3730      	adds	r7, #48	@ 0x30
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	58024400 	.word	0x58024400
 80070cc:	ffff0007 	.word	0xffff0007

080070d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d101      	bne.n	80070e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e19c      	b.n	800741e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070e4:	4b8a      	ldr	r3, [pc, #552]	@ (8007310 <HAL_RCC_ClockConfig+0x240>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 030f 	and.w	r3, r3, #15
 80070ec:	683a      	ldr	r2, [r7, #0]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d910      	bls.n	8007114 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070f2:	4b87      	ldr	r3, [pc, #540]	@ (8007310 <HAL_RCC_ClockConfig+0x240>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f023 020f 	bic.w	r2, r3, #15
 80070fa:	4985      	ldr	r1, [pc, #532]	@ (8007310 <HAL_RCC_ClockConfig+0x240>)
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	4313      	orrs	r3, r2
 8007100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007102:	4b83      	ldr	r3, [pc, #524]	@ (8007310 <HAL_RCC_ClockConfig+0x240>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 030f 	and.w	r3, r3, #15
 800710a:	683a      	ldr	r2, [r7, #0]
 800710c:	429a      	cmp	r2, r3
 800710e:	d001      	beq.n	8007114 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e184      	b.n	800741e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0304 	and.w	r3, r3, #4
 800711c:	2b00      	cmp	r3, #0
 800711e:	d010      	beq.n	8007142 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	691a      	ldr	r2, [r3, #16]
 8007124:	4b7b      	ldr	r3, [pc, #492]	@ (8007314 <HAL_RCC_ClockConfig+0x244>)
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800712c:	429a      	cmp	r2, r3
 800712e:	d908      	bls.n	8007142 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007130:	4b78      	ldr	r3, [pc, #480]	@ (8007314 <HAL_RCC_ClockConfig+0x244>)
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	4975      	ldr	r1, [pc, #468]	@ (8007314 <HAL_RCC_ClockConfig+0x244>)
 800713e:	4313      	orrs	r3, r2
 8007140:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0308 	and.w	r3, r3, #8
 800714a:	2b00      	cmp	r3, #0
 800714c:	d010      	beq.n	8007170 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	695a      	ldr	r2, [r3, #20]
 8007152:	4b70      	ldr	r3, [pc, #448]	@ (8007314 <HAL_RCC_ClockConfig+0x244>)
 8007154:	69db      	ldr	r3, [r3, #28]
 8007156:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800715a:	429a      	cmp	r2, r3
 800715c:	d908      	bls.n	8007170 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800715e:	4b6d      	ldr	r3, [pc, #436]	@ (8007314 <HAL_RCC_ClockConfig+0x244>)
 8007160:	69db      	ldr	r3, [r3, #28]
 8007162:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	496a      	ldr	r1, [pc, #424]	@ (8007314 <HAL_RCC_ClockConfig+0x244>)
 800716c:	4313      	orrs	r3, r2
 800716e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0310 	and.w	r3, r3, #16
 8007178:	2b00      	cmp	r3, #0
 800717a:	d010      	beq.n	800719e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	699a      	ldr	r2, [r3, #24]
 8007180:	4b64      	ldr	r3, [pc, #400]	@ (8007314 <HAL_RCC_ClockConfig+0x244>)
 8007182:	69db      	ldr	r3, [r3, #28]
 8007184:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007188:	429a      	cmp	r2, r3
 800718a:	d908      	bls.n	800719e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800718c:	4b61      	ldr	r3, [pc, #388]	@ (8007314 <HAL_RCC_ClockConfig+0x244>)
 800718e:	69db      	ldr	r3, [r3, #28]
 8007190:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	495e      	ldr	r1, [pc, #376]	@ (8007314 <HAL_RCC_ClockConfig+0x244>)
 800719a:	4313      	orrs	r3, r2
 800719c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0320 	and.w	r3, r3, #32
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d010      	beq.n	80071cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	69da      	ldr	r2, [r3, #28]
 80071ae:	4b59      	ldr	r3, [pc, #356]	@ (8007314 <HAL_RCC_ClockConfig+0x244>)
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d908      	bls.n	80071cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80071ba:	4b56      	ldr	r3, [pc, #344]	@ (8007314 <HAL_RCC_ClockConfig+0x244>)
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	4953      	ldr	r1, [pc, #332]	@ (8007314 <HAL_RCC_ClockConfig+0x244>)
 80071c8:	4313      	orrs	r3, r2
 80071ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0302 	and.w	r3, r3, #2
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d010      	beq.n	80071fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	68da      	ldr	r2, [r3, #12]
 80071dc:	4b4d      	ldr	r3, [pc, #308]	@ (8007314 <HAL_RCC_ClockConfig+0x244>)
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	f003 030f 	and.w	r3, r3, #15
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d908      	bls.n	80071fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071e8:	4b4a      	ldr	r3, [pc, #296]	@ (8007314 <HAL_RCC_ClockConfig+0x244>)
 80071ea:	699b      	ldr	r3, [r3, #24]
 80071ec:	f023 020f 	bic.w	r2, r3, #15
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	4947      	ldr	r1, [pc, #284]	@ (8007314 <HAL_RCC_ClockConfig+0x244>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	d055      	beq.n	80072b2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007206:	4b43      	ldr	r3, [pc, #268]	@ (8007314 <HAL_RCC_ClockConfig+0x244>)
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	4940      	ldr	r1, [pc, #256]	@ (8007314 <HAL_RCC_ClockConfig+0x244>)
 8007214:	4313      	orrs	r3, r2
 8007216:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	2b02      	cmp	r3, #2
 800721e:	d107      	bne.n	8007230 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007220:	4b3c      	ldr	r3, [pc, #240]	@ (8007314 <HAL_RCC_ClockConfig+0x244>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007228:	2b00      	cmp	r3, #0
 800722a:	d121      	bne.n	8007270 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e0f6      	b.n	800741e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	2b03      	cmp	r3, #3
 8007236:	d107      	bne.n	8007248 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007238:	4b36      	ldr	r3, [pc, #216]	@ (8007314 <HAL_RCC_ClockConfig+0x244>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d115      	bne.n	8007270 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e0ea      	b.n	800741e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d107      	bne.n	8007260 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007250:	4b30      	ldr	r3, [pc, #192]	@ (8007314 <HAL_RCC_ClockConfig+0x244>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007258:	2b00      	cmp	r3, #0
 800725a:	d109      	bne.n	8007270 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e0de      	b.n	800741e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007260:	4b2c      	ldr	r3, [pc, #176]	@ (8007314 <HAL_RCC_ClockConfig+0x244>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 0304 	and.w	r3, r3, #4
 8007268:	2b00      	cmp	r3, #0
 800726a:	d101      	bne.n	8007270 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e0d6      	b.n	800741e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007270:	4b28      	ldr	r3, [pc, #160]	@ (8007314 <HAL_RCC_ClockConfig+0x244>)
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	f023 0207 	bic.w	r2, r3, #7
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	4925      	ldr	r1, [pc, #148]	@ (8007314 <HAL_RCC_ClockConfig+0x244>)
 800727e:	4313      	orrs	r3, r2
 8007280:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007282:	f7fb feaf 	bl	8002fe4 <HAL_GetTick>
 8007286:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007288:	e00a      	b.n	80072a0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800728a:	f7fb feab 	bl	8002fe4 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007298:	4293      	cmp	r3, r2
 800729a:	d901      	bls.n	80072a0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e0be      	b.n	800741e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072a0:	4b1c      	ldr	r3, [pc, #112]	@ (8007314 <HAL_RCC_ClockConfig+0x244>)
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	00db      	lsls	r3, r3, #3
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d1eb      	bne.n	800728a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0302 	and.w	r3, r3, #2
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d010      	beq.n	80072e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	68da      	ldr	r2, [r3, #12]
 80072c2:	4b14      	ldr	r3, [pc, #80]	@ (8007314 <HAL_RCC_ClockConfig+0x244>)
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	f003 030f 	and.w	r3, r3, #15
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d208      	bcs.n	80072e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072ce:	4b11      	ldr	r3, [pc, #68]	@ (8007314 <HAL_RCC_ClockConfig+0x244>)
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	f023 020f 	bic.w	r2, r3, #15
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	490e      	ldr	r1, [pc, #56]	@ (8007314 <HAL_RCC_ClockConfig+0x244>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007310 <HAL_RCC_ClockConfig+0x240>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 030f 	and.w	r3, r3, #15
 80072e8:	683a      	ldr	r2, [r7, #0]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d214      	bcs.n	8007318 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072ee:	4b08      	ldr	r3, [pc, #32]	@ (8007310 <HAL_RCC_ClockConfig+0x240>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f023 020f 	bic.w	r2, r3, #15
 80072f6:	4906      	ldr	r1, [pc, #24]	@ (8007310 <HAL_RCC_ClockConfig+0x240>)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072fe:	4b04      	ldr	r3, [pc, #16]	@ (8007310 <HAL_RCC_ClockConfig+0x240>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 030f 	and.w	r3, r3, #15
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	429a      	cmp	r2, r3
 800730a:	d005      	beq.n	8007318 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e086      	b.n	800741e <HAL_RCC_ClockConfig+0x34e>
 8007310:	52002000 	.word	0x52002000
 8007314:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 0304 	and.w	r3, r3, #4
 8007320:	2b00      	cmp	r3, #0
 8007322:	d010      	beq.n	8007346 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	691a      	ldr	r2, [r3, #16]
 8007328:	4b3f      	ldr	r3, [pc, #252]	@ (8007428 <HAL_RCC_ClockConfig+0x358>)
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007330:	429a      	cmp	r2, r3
 8007332:	d208      	bcs.n	8007346 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007334:	4b3c      	ldr	r3, [pc, #240]	@ (8007428 <HAL_RCC_ClockConfig+0x358>)
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	4939      	ldr	r1, [pc, #228]	@ (8007428 <HAL_RCC_ClockConfig+0x358>)
 8007342:	4313      	orrs	r3, r2
 8007344:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0308 	and.w	r3, r3, #8
 800734e:	2b00      	cmp	r3, #0
 8007350:	d010      	beq.n	8007374 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	695a      	ldr	r2, [r3, #20]
 8007356:	4b34      	ldr	r3, [pc, #208]	@ (8007428 <HAL_RCC_ClockConfig+0x358>)
 8007358:	69db      	ldr	r3, [r3, #28]
 800735a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800735e:	429a      	cmp	r2, r3
 8007360:	d208      	bcs.n	8007374 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007362:	4b31      	ldr	r3, [pc, #196]	@ (8007428 <HAL_RCC_ClockConfig+0x358>)
 8007364:	69db      	ldr	r3, [r3, #28]
 8007366:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	492e      	ldr	r1, [pc, #184]	@ (8007428 <HAL_RCC_ClockConfig+0x358>)
 8007370:	4313      	orrs	r3, r2
 8007372:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0310 	and.w	r3, r3, #16
 800737c:	2b00      	cmp	r3, #0
 800737e:	d010      	beq.n	80073a2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	699a      	ldr	r2, [r3, #24]
 8007384:	4b28      	ldr	r3, [pc, #160]	@ (8007428 <HAL_RCC_ClockConfig+0x358>)
 8007386:	69db      	ldr	r3, [r3, #28]
 8007388:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800738c:	429a      	cmp	r2, r3
 800738e:	d208      	bcs.n	80073a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007390:	4b25      	ldr	r3, [pc, #148]	@ (8007428 <HAL_RCC_ClockConfig+0x358>)
 8007392:	69db      	ldr	r3, [r3, #28]
 8007394:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	4922      	ldr	r1, [pc, #136]	@ (8007428 <HAL_RCC_ClockConfig+0x358>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0320 	and.w	r3, r3, #32
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d010      	beq.n	80073d0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	69da      	ldr	r2, [r3, #28]
 80073b2:	4b1d      	ldr	r3, [pc, #116]	@ (8007428 <HAL_RCC_ClockConfig+0x358>)
 80073b4:	6a1b      	ldr	r3, [r3, #32]
 80073b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d208      	bcs.n	80073d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80073be:	4b1a      	ldr	r3, [pc, #104]	@ (8007428 <HAL_RCC_ClockConfig+0x358>)
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	69db      	ldr	r3, [r3, #28]
 80073ca:	4917      	ldr	r1, [pc, #92]	@ (8007428 <HAL_RCC_ClockConfig+0x358>)
 80073cc:	4313      	orrs	r3, r2
 80073ce:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80073d0:	f000 f834 	bl	800743c <HAL_RCC_GetSysClockFreq>
 80073d4:	4602      	mov	r2, r0
 80073d6:	4b14      	ldr	r3, [pc, #80]	@ (8007428 <HAL_RCC_ClockConfig+0x358>)
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	0a1b      	lsrs	r3, r3, #8
 80073dc:	f003 030f 	and.w	r3, r3, #15
 80073e0:	4912      	ldr	r1, [pc, #72]	@ (800742c <HAL_RCC_ClockConfig+0x35c>)
 80073e2:	5ccb      	ldrb	r3, [r1, r3]
 80073e4:	f003 031f 	and.w	r3, r3, #31
 80073e8:	fa22 f303 	lsr.w	r3, r2, r3
 80073ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80073ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007428 <HAL_RCC_ClockConfig+0x358>)
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	f003 030f 	and.w	r3, r3, #15
 80073f6:	4a0d      	ldr	r2, [pc, #52]	@ (800742c <HAL_RCC_ClockConfig+0x35c>)
 80073f8:	5cd3      	ldrb	r3, [r2, r3]
 80073fa:	f003 031f 	and.w	r3, r3, #31
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	fa22 f303 	lsr.w	r3, r2, r3
 8007404:	4a0a      	ldr	r2, [pc, #40]	@ (8007430 <HAL_RCC_ClockConfig+0x360>)
 8007406:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007408:	4a0a      	ldr	r2, [pc, #40]	@ (8007434 <HAL_RCC_ClockConfig+0x364>)
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800740e:	4b0a      	ldr	r3, [pc, #40]	@ (8007438 <HAL_RCC_ClockConfig+0x368>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4618      	mov	r0, r3
 8007414:	f7fb fd9c 	bl	8002f50 <HAL_InitTick>
 8007418:	4603      	mov	r3, r0
 800741a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800741c:	7bfb      	ldrb	r3, [r7, #15]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3718      	adds	r7, #24
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	58024400 	.word	0x58024400
 800742c:	0800d068 	.word	0x0800d068
 8007430:	2400000c 	.word	0x2400000c
 8007434:	24000008 	.word	0x24000008
 8007438:	24000010 	.word	0x24000010

0800743c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800743c:	b480      	push	{r7}
 800743e:	b089      	sub	sp, #36	@ 0x24
 8007440:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007442:	4bb3      	ldr	r3, [pc, #716]	@ (8007710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800744a:	2b18      	cmp	r3, #24
 800744c:	f200 8155 	bhi.w	80076fa <HAL_RCC_GetSysClockFreq+0x2be>
 8007450:	a201      	add	r2, pc, #4	@ (adr r2, 8007458 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007456:	bf00      	nop
 8007458:	080074bd 	.word	0x080074bd
 800745c:	080076fb 	.word	0x080076fb
 8007460:	080076fb 	.word	0x080076fb
 8007464:	080076fb 	.word	0x080076fb
 8007468:	080076fb 	.word	0x080076fb
 800746c:	080076fb 	.word	0x080076fb
 8007470:	080076fb 	.word	0x080076fb
 8007474:	080076fb 	.word	0x080076fb
 8007478:	080074e3 	.word	0x080074e3
 800747c:	080076fb 	.word	0x080076fb
 8007480:	080076fb 	.word	0x080076fb
 8007484:	080076fb 	.word	0x080076fb
 8007488:	080076fb 	.word	0x080076fb
 800748c:	080076fb 	.word	0x080076fb
 8007490:	080076fb 	.word	0x080076fb
 8007494:	080076fb 	.word	0x080076fb
 8007498:	080074e9 	.word	0x080074e9
 800749c:	080076fb 	.word	0x080076fb
 80074a0:	080076fb 	.word	0x080076fb
 80074a4:	080076fb 	.word	0x080076fb
 80074a8:	080076fb 	.word	0x080076fb
 80074ac:	080076fb 	.word	0x080076fb
 80074b0:	080076fb 	.word	0x080076fb
 80074b4:	080076fb 	.word	0x080076fb
 80074b8:	080074ef 	.word	0x080074ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074bc:	4b94      	ldr	r3, [pc, #592]	@ (8007710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0320 	and.w	r3, r3, #32
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d009      	beq.n	80074dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074c8:	4b91      	ldr	r3, [pc, #580]	@ (8007710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	08db      	lsrs	r3, r3, #3
 80074ce:	f003 0303 	and.w	r3, r3, #3
 80074d2:	4a90      	ldr	r2, [pc, #576]	@ (8007714 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80074d4:	fa22 f303 	lsr.w	r3, r2, r3
 80074d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80074da:	e111      	b.n	8007700 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80074dc:	4b8d      	ldr	r3, [pc, #564]	@ (8007714 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80074de:	61bb      	str	r3, [r7, #24]
      break;
 80074e0:	e10e      	b.n	8007700 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80074e2:	4b8d      	ldr	r3, [pc, #564]	@ (8007718 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80074e4:	61bb      	str	r3, [r7, #24]
      break;
 80074e6:	e10b      	b.n	8007700 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80074e8:	4b8c      	ldr	r3, [pc, #560]	@ (800771c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80074ea:	61bb      	str	r3, [r7, #24]
      break;
 80074ec:	e108      	b.n	8007700 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074ee:	4b88      	ldr	r3, [pc, #544]	@ (8007710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f2:	f003 0303 	and.w	r3, r3, #3
 80074f6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80074f8:	4b85      	ldr	r3, [pc, #532]	@ (8007710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074fc:	091b      	lsrs	r3, r3, #4
 80074fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007502:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007504:	4b82      	ldr	r3, [pc, #520]	@ (8007710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007508:	f003 0301 	and.w	r3, r3, #1
 800750c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800750e:	4b80      	ldr	r3, [pc, #512]	@ (8007710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007512:	08db      	lsrs	r3, r3, #3
 8007514:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	fb02 f303 	mul.w	r3, r2, r3
 800751e:	ee07 3a90 	vmov	s15, r3
 8007522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007526:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	2b00      	cmp	r3, #0
 800752e:	f000 80e1 	beq.w	80076f4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	2b02      	cmp	r3, #2
 8007536:	f000 8083 	beq.w	8007640 <HAL_RCC_GetSysClockFreq+0x204>
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	2b02      	cmp	r3, #2
 800753e:	f200 80a1 	bhi.w	8007684 <HAL_RCC_GetSysClockFreq+0x248>
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d003      	beq.n	8007550 <HAL_RCC_GetSysClockFreq+0x114>
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d056      	beq.n	80075fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800754e:	e099      	b.n	8007684 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007550:	4b6f      	ldr	r3, [pc, #444]	@ (8007710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0320 	and.w	r3, r3, #32
 8007558:	2b00      	cmp	r3, #0
 800755a:	d02d      	beq.n	80075b8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800755c:	4b6c      	ldr	r3, [pc, #432]	@ (8007710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	08db      	lsrs	r3, r3, #3
 8007562:	f003 0303 	and.w	r3, r3, #3
 8007566:	4a6b      	ldr	r2, [pc, #428]	@ (8007714 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007568:	fa22 f303 	lsr.w	r3, r2, r3
 800756c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	ee07 3a90 	vmov	s15, r3
 8007574:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	ee07 3a90 	vmov	s15, r3
 800757e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007586:	4b62      	ldr	r3, [pc, #392]	@ (8007710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800758a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800758e:	ee07 3a90 	vmov	s15, r3
 8007592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007596:	ed97 6a02 	vldr	s12, [r7, #8]
 800759a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007720 <HAL_RCC_GetSysClockFreq+0x2e4>
 800759e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075b2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80075b6:	e087      	b.n	80076c8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	ee07 3a90 	vmov	s15, r3
 80075be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007724 <HAL_RCC_GetSysClockFreq+0x2e8>
 80075c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ca:	4b51      	ldr	r3, [pc, #324]	@ (8007710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075da:	ed97 6a02 	vldr	s12, [r7, #8]
 80075de:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007720 <HAL_RCC_GetSysClockFreq+0x2e4>
 80075e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80075fa:	e065      	b.n	80076c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	ee07 3a90 	vmov	s15, r3
 8007602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007606:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007728 <HAL_RCC_GetSysClockFreq+0x2ec>
 800760a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800760e:	4b40      	ldr	r3, [pc, #256]	@ (8007710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007616:	ee07 3a90 	vmov	s15, r3
 800761a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800761e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007622:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007720 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800762a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800762e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800763a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800763e:	e043      	b.n	80076c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	ee07 3a90 	vmov	s15, r3
 8007646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800772c <HAL_RCC_GetSysClockFreq+0x2f0>
 800764e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007652:	4b2f      	ldr	r3, [pc, #188]	@ (8007710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800765a:	ee07 3a90 	vmov	s15, r3
 800765e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007662:	ed97 6a02 	vldr	s12, [r7, #8]
 8007666:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007720 <HAL_RCC_GetSysClockFreq+0x2e4>
 800766a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800766e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007672:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800767a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800767e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007682:	e021      	b.n	80076c8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	ee07 3a90 	vmov	s15, r3
 800768a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800768e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007728 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007696:	4b1e      	ldr	r3, [pc, #120]	@ (8007710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800769a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800769e:	ee07 3a90 	vmov	s15, r3
 80076a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80076aa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007720 <HAL_RCC_GetSysClockFreq+0x2e4>
 80076ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80076c6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80076c8:	4b11      	ldr	r3, [pc, #68]	@ (8007710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076cc:	0a5b      	lsrs	r3, r3, #9
 80076ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076d2:	3301      	adds	r3, #1
 80076d4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	ee07 3a90 	vmov	s15, r3
 80076dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80076e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80076e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076ec:	ee17 3a90 	vmov	r3, s15
 80076f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80076f2:	e005      	b.n	8007700 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80076f4:	2300      	movs	r3, #0
 80076f6:	61bb      	str	r3, [r7, #24]
      break;
 80076f8:	e002      	b.n	8007700 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80076fa:	4b07      	ldr	r3, [pc, #28]	@ (8007718 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80076fc:	61bb      	str	r3, [r7, #24]
      break;
 80076fe:	bf00      	nop
  }

  return sysclockfreq;
 8007700:	69bb      	ldr	r3, [r7, #24]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3724      	adds	r7, #36	@ 0x24
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	58024400 	.word	0x58024400
 8007714:	03d09000 	.word	0x03d09000
 8007718:	003d0900 	.word	0x003d0900
 800771c:	016e3600 	.word	0x016e3600
 8007720:	46000000 	.word	0x46000000
 8007724:	4c742400 	.word	0x4c742400
 8007728:	4a742400 	.word	0x4a742400
 800772c:	4bb71b00 	.word	0x4bb71b00

08007730 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007736:	f7ff fe81 	bl	800743c <HAL_RCC_GetSysClockFreq>
 800773a:	4602      	mov	r2, r0
 800773c:	4b10      	ldr	r3, [pc, #64]	@ (8007780 <HAL_RCC_GetHCLKFreq+0x50>)
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	0a1b      	lsrs	r3, r3, #8
 8007742:	f003 030f 	and.w	r3, r3, #15
 8007746:	490f      	ldr	r1, [pc, #60]	@ (8007784 <HAL_RCC_GetHCLKFreq+0x54>)
 8007748:	5ccb      	ldrb	r3, [r1, r3]
 800774a:	f003 031f 	and.w	r3, r3, #31
 800774e:	fa22 f303 	lsr.w	r3, r2, r3
 8007752:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007754:	4b0a      	ldr	r3, [pc, #40]	@ (8007780 <HAL_RCC_GetHCLKFreq+0x50>)
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	f003 030f 	and.w	r3, r3, #15
 800775c:	4a09      	ldr	r2, [pc, #36]	@ (8007784 <HAL_RCC_GetHCLKFreq+0x54>)
 800775e:	5cd3      	ldrb	r3, [r2, r3]
 8007760:	f003 031f 	and.w	r3, r3, #31
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	fa22 f303 	lsr.w	r3, r2, r3
 800776a:	4a07      	ldr	r2, [pc, #28]	@ (8007788 <HAL_RCC_GetHCLKFreq+0x58>)
 800776c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800776e:	4a07      	ldr	r2, [pc, #28]	@ (800778c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007774:	4b04      	ldr	r3, [pc, #16]	@ (8007788 <HAL_RCC_GetHCLKFreq+0x58>)
 8007776:	681b      	ldr	r3, [r3, #0]
}
 8007778:	4618      	mov	r0, r3
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	58024400 	.word	0x58024400
 8007784:	0800d068 	.word	0x0800d068
 8007788:	2400000c 	.word	0x2400000c
 800778c:	24000008 	.word	0x24000008

08007790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007794:	f7ff ffcc 	bl	8007730 <HAL_RCC_GetHCLKFreq>
 8007798:	4602      	mov	r2, r0
 800779a:	4b06      	ldr	r3, [pc, #24]	@ (80077b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800779c:	69db      	ldr	r3, [r3, #28]
 800779e:	091b      	lsrs	r3, r3, #4
 80077a0:	f003 0307 	and.w	r3, r3, #7
 80077a4:	4904      	ldr	r1, [pc, #16]	@ (80077b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80077a6:	5ccb      	ldrb	r3, [r1, r3]
 80077a8:	f003 031f 	and.w	r3, r3, #31
 80077ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	58024400 	.word	0x58024400
 80077b8:	0800d068 	.word	0x0800d068

080077bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80077c0:	f7ff ffb6 	bl	8007730 <HAL_RCC_GetHCLKFreq>
 80077c4:	4602      	mov	r2, r0
 80077c6:	4b06      	ldr	r3, [pc, #24]	@ (80077e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80077c8:	69db      	ldr	r3, [r3, #28]
 80077ca:	0a1b      	lsrs	r3, r3, #8
 80077cc:	f003 0307 	and.w	r3, r3, #7
 80077d0:	4904      	ldr	r1, [pc, #16]	@ (80077e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80077d2:	5ccb      	ldrb	r3, [r1, r3]
 80077d4:	f003 031f 	and.w	r3, r3, #31
 80077d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80077dc:	4618      	mov	r0, r3
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	58024400 	.word	0x58024400
 80077e4:	0800d068 	.word	0x0800d068

080077e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077ec:	b0c6      	sub	sp, #280	@ 0x118
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80077f4:	2300      	movs	r3, #0
 80077f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80077fa:	2300      	movs	r3, #0
 80077fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007808:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800780c:	2500      	movs	r5, #0
 800780e:	ea54 0305 	orrs.w	r3, r4, r5
 8007812:	d049      	beq.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007818:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800781a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800781e:	d02f      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007820:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007824:	d828      	bhi.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007826:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800782a:	d01a      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800782c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007830:	d822      	bhi.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007832:	2b00      	cmp	r3, #0
 8007834:	d003      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007836:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800783a:	d007      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800783c:	e01c      	b.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800783e:	4bab      	ldr	r3, [pc, #684]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007842:	4aaa      	ldr	r2, [pc, #680]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007844:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007848:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800784a:	e01a      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800784c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007850:	3308      	adds	r3, #8
 8007852:	2102      	movs	r1, #2
 8007854:	4618      	mov	r0, r3
 8007856:	f002 fa49 	bl	8009cec <RCCEx_PLL2_Config>
 800785a:	4603      	mov	r3, r0
 800785c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007860:	e00f      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007866:	3328      	adds	r3, #40	@ 0x28
 8007868:	2102      	movs	r1, #2
 800786a:	4618      	mov	r0, r3
 800786c:	f002 faf0 	bl	8009e50 <RCCEx_PLL3_Config>
 8007870:	4603      	mov	r3, r0
 8007872:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007876:	e004      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800787e:	e000      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007880:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007882:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10a      	bne.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800788a:	4b98      	ldr	r3, [pc, #608]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800788c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800788e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007896:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007898:	4a94      	ldr	r2, [pc, #592]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800789a:	430b      	orrs	r3, r1
 800789c:	6513      	str	r3, [r2, #80]	@ 0x50
 800789e:	e003      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80078a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80078b4:	f04f 0900 	mov.w	r9, #0
 80078b8:	ea58 0309 	orrs.w	r3, r8, r9
 80078bc:	d047      	beq.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80078be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078c4:	2b04      	cmp	r3, #4
 80078c6:	d82a      	bhi.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80078c8:	a201      	add	r2, pc, #4	@ (adr r2, 80078d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80078ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ce:	bf00      	nop
 80078d0:	080078e5 	.word	0x080078e5
 80078d4:	080078f3 	.word	0x080078f3
 80078d8:	08007909 	.word	0x08007909
 80078dc:	08007927 	.word	0x08007927
 80078e0:	08007927 	.word	0x08007927
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078e4:	4b81      	ldr	r3, [pc, #516]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80078e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e8:	4a80      	ldr	r2, [pc, #512]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80078ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80078f0:	e01a      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078f6:	3308      	adds	r3, #8
 80078f8:	2100      	movs	r1, #0
 80078fa:	4618      	mov	r0, r3
 80078fc:	f002 f9f6 	bl	8009cec <RCCEx_PLL2_Config>
 8007900:	4603      	mov	r3, r0
 8007902:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007906:	e00f      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800790c:	3328      	adds	r3, #40	@ 0x28
 800790e:	2100      	movs	r1, #0
 8007910:	4618      	mov	r0, r3
 8007912:	f002 fa9d 	bl	8009e50 <RCCEx_PLL3_Config>
 8007916:	4603      	mov	r3, r0
 8007918:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800791c:	e004      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007924:	e000      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007926:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007928:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800792c:	2b00      	cmp	r3, #0
 800792e:	d10a      	bne.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007930:	4b6e      	ldr	r3, [pc, #440]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007932:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007934:	f023 0107 	bic.w	r1, r3, #7
 8007938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800793c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800793e:	4a6b      	ldr	r2, [pc, #428]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007940:	430b      	orrs	r3, r1
 8007942:	6513      	str	r3, [r2, #80]	@ 0x50
 8007944:	e003      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007946:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800794a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800794e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007956:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800795a:	f04f 0b00 	mov.w	fp, #0
 800795e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007962:	d05b      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007968:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800796c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007970:	d03b      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007972:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007976:	d834      	bhi.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007978:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800797c:	d037      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 800797e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007982:	d82e      	bhi.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007984:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007988:	d033      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800798a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800798e:	d828      	bhi.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007990:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007994:	d01a      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007996:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800799a:	d822      	bhi.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800799c:	2b00      	cmp	r3, #0
 800799e:	d003      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80079a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079a4:	d007      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80079a6:	e01c      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079a8:	4b50      	ldr	r3, [pc, #320]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80079aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ac:	4a4f      	ldr	r2, [pc, #316]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80079ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079b4:	e01e      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ba:	3308      	adds	r3, #8
 80079bc:	2100      	movs	r1, #0
 80079be:	4618      	mov	r0, r3
 80079c0:	f002 f994 	bl	8009cec <RCCEx_PLL2_Config>
 80079c4:	4603      	mov	r3, r0
 80079c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80079ca:	e013      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079d0:	3328      	adds	r3, #40	@ 0x28
 80079d2:	2100      	movs	r1, #0
 80079d4:	4618      	mov	r0, r3
 80079d6:	f002 fa3b 	bl	8009e50 <RCCEx_PLL3_Config>
 80079da:	4603      	mov	r3, r0
 80079dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079e0:	e008      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80079e8:	e004      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80079ea:	bf00      	nop
 80079ec:	e002      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80079ee:	bf00      	nop
 80079f0:	e000      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80079f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10b      	bne.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80079fc:	4b3b      	ldr	r3, [pc, #236]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80079fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a00:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007a0c:	4a37      	ldr	r2, [pc, #220]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007a0e:	430b      	orrs	r3, r1
 8007a10:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a12:	e003      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a24:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007a28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007a32:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007a36:	460b      	mov	r3, r1
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	d05d      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007a44:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007a48:	d03b      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007a4a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007a4e:	d834      	bhi.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007a50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007a54:	d037      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007a56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007a5a:	d82e      	bhi.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007a5c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007a60:	d033      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8007a62:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007a66:	d828      	bhi.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007a68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a6c:	d01a      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8007a6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a72:	d822      	bhi.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d003      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007a78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a7c:	d007      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007a7e:	e01c      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a80:	4b1a      	ldr	r3, [pc, #104]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a84:	4a19      	ldr	r2, [pc, #100]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007a86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a8c:	e01e      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a92:	3308      	adds	r3, #8
 8007a94:	2100      	movs	r1, #0
 8007a96:	4618      	mov	r0, r3
 8007a98:	f002 f928 	bl	8009cec <RCCEx_PLL2_Config>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007aa2:	e013      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa8:	3328      	adds	r3, #40	@ 0x28
 8007aaa:	2100      	movs	r1, #0
 8007aac:	4618      	mov	r0, r3
 8007aae:	f002 f9cf 	bl	8009e50 <RCCEx_PLL3_Config>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ab8:	e008      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ac0:	e004      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007ac2:	bf00      	nop
 8007ac4:	e002      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007ac6:	bf00      	nop
 8007ac8:	e000      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007aca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007acc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10d      	bne.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007ad4:	4b05      	ldr	r3, [pc, #20]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ad8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ae0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007ae4:	4a01      	ldr	r2, [pc, #4]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007ae6:	430b      	orrs	r3, r1
 8007ae8:	6593      	str	r3, [r2, #88]	@ 0x58
 8007aea:	e005      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007aec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007af4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b00:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007b04:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b08:	2300      	movs	r3, #0
 8007b0a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007b0e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007b12:	460b      	mov	r3, r1
 8007b14:	4313      	orrs	r3, r2
 8007b16:	d03a      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b1e:	2b30      	cmp	r3, #48	@ 0x30
 8007b20:	d01f      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8007b22:	2b30      	cmp	r3, #48	@ 0x30
 8007b24:	d819      	bhi.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007b26:	2b20      	cmp	r3, #32
 8007b28:	d00c      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007b2a:	2b20      	cmp	r3, #32
 8007b2c:	d815      	bhi.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d019      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007b32:	2b10      	cmp	r3, #16
 8007b34:	d111      	bne.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b36:	4baa      	ldr	r3, [pc, #680]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b3a:	4aa9      	ldr	r2, [pc, #676]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007b42:	e011      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b48:	3308      	adds	r3, #8
 8007b4a:	2102      	movs	r1, #2
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f002 f8cd 	bl	8009cec <RCCEx_PLL2_Config>
 8007b52:	4603      	mov	r3, r0
 8007b54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007b58:	e006      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b60:	e002      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007b62:	bf00      	nop
 8007b64:	e000      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007b66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10a      	bne.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007b70:	4b9b      	ldr	r3, [pc, #620]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b74:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b7e:	4a98      	ldr	r2, [pc, #608]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007b80:	430b      	orrs	r3, r1
 8007b82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007b84:	e003      	b.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b8a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b96:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007b9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007ba4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007ba8:	460b      	mov	r3, r1
 8007baa:	4313      	orrs	r3, r2
 8007bac:	d051      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007bb8:	d035      	beq.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8007bba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007bbe:	d82e      	bhi.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007bc0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007bc4:	d031      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8007bc6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007bca:	d828      	bhi.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007bcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bd0:	d01a      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007bd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bd6:	d822      	bhi.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d003      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007bdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007be0:	d007      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007be2:	e01c      	b.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007be4:	4b7e      	ldr	r3, [pc, #504]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007be8:	4a7d      	ldr	r2, [pc, #500]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007bea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007bf0:	e01c      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bf6:	3308      	adds	r3, #8
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f002 f876 	bl	8009cec <RCCEx_PLL2_Config>
 8007c00:	4603      	mov	r3, r0
 8007c02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007c06:	e011      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c0c:	3328      	adds	r3, #40	@ 0x28
 8007c0e:	2100      	movs	r1, #0
 8007c10:	4618      	mov	r0, r3
 8007c12:	f002 f91d 	bl	8009e50 <RCCEx_PLL3_Config>
 8007c16:	4603      	mov	r3, r0
 8007c18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007c1c:	e006      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c24:	e002      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007c26:	bf00      	nop
 8007c28:	e000      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007c2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10a      	bne.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007c34:	4b6a      	ldr	r3, [pc, #424]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c38:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c42:	4a67      	ldr	r2, [pc, #412]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c44:	430b      	orrs	r3, r1
 8007c46:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c48:	e003      	b.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c4e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007c5e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007c62:	2300      	movs	r3, #0
 8007c64:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007c68:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	d053      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c7c:	d033      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8007c7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c82:	d82c      	bhi.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007c84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c88:	d02f      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x502>
 8007c8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c8e:	d826      	bhi.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007c90:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c94:	d02b      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007c96:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c9a:	d820      	bhi.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007c9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ca0:	d012      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8007ca2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ca6:	d81a      	bhi.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d022      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cb0:	d115      	bne.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cb6:	3308      	adds	r3, #8
 8007cb8:	2101      	movs	r1, #1
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f002 f816 	bl	8009cec <RCCEx_PLL2_Config>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007cc6:	e015      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ccc:	3328      	adds	r3, #40	@ 0x28
 8007cce:	2101      	movs	r1, #1
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f002 f8bd 	bl	8009e50 <RCCEx_PLL3_Config>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007cdc:	e00a      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ce4:	e006      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007ce6:	bf00      	nop
 8007ce8:	e004      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007cea:	bf00      	nop
 8007cec:	e002      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007cee:	bf00      	nop
 8007cf0:	e000      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007cf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cf4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10a      	bne.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007cfc:	4b38      	ldr	r3, [pc, #224]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007cfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d00:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d0a:	4a35      	ldr	r2, [pc, #212]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007d0c:	430b      	orrs	r3, r1
 8007d0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d10:	e003      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d16:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d22:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007d26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007d30:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007d34:	460b      	mov	r3, r1
 8007d36:	4313      	orrs	r3, r2
 8007d38:	d058      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007d42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d46:	d033      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007d48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d4c:	d82c      	bhi.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d52:	d02f      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d58:	d826      	bhi.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007d5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d5e:	d02b      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007d60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d64:	d820      	bhi.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007d66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d6a:	d012      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007d6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d70:	d81a      	bhi.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d022      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007d76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d7a:	d115      	bne.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d80:	3308      	adds	r3, #8
 8007d82:	2101      	movs	r1, #1
 8007d84:	4618      	mov	r0, r3
 8007d86:	f001 ffb1 	bl	8009cec <RCCEx_PLL2_Config>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007d90:	e015      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d96:	3328      	adds	r3, #40	@ 0x28
 8007d98:	2101      	movs	r1, #1
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f002 f858 	bl	8009e50 <RCCEx_PLL3_Config>
 8007da0:	4603      	mov	r3, r0
 8007da2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007da6:	e00a      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007dae:	e006      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007db0:	bf00      	nop
 8007db2:	e004      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007db4:	bf00      	nop
 8007db6:	e002      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007db8:	bf00      	nop
 8007dba:	e000      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007dbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10e      	bne.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007dc6:	4b06      	ldr	r3, [pc, #24]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007dd6:	4a02      	ldr	r2, [pc, #8]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007dd8:	430b      	orrs	r3, r1
 8007dda:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ddc:	e006      	b.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007dde:	bf00      	nop
 8007de0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007de4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007de8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007df8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007e02:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007e06:	460b      	mov	r3, r1
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	d037      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e16:	d00e      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007e18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e1c:	d816      	bhi.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d018      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007e22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e26:	d111      	bne.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e28:	4bc4      	ldr	r3, [pc, #784]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e2c:	4ac3      	ldr	r2, [pc, #780]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007e34:	e00f      	b.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e3a:	3308      	adds	r3, #8
 8007e3c:	2101      	movs	r1, #1
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f001 ff54 	bl	8009cec <RCCEx_PLL2_Config>
 8007e44:	4603      	mov	r3, r0
 8007e46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007e4a:	e004      	b.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e52:	e000      	b.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d10a      	bne.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007e5e:	4bb7      	ldr	r3, [pc, #732]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e62:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e6c:	4ab3      	ldr	r2, [pc, #716]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e6e:	430b      	orrs	r3, r1
 8007e70:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e72:	e003      	b.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e84:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007e88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007e92:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007e96:	460b      	mov	r3, r1
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	d039      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ea2:	2b03      	cmp	r3, #3
 8007ea4:	d81c      	bhi.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8007eac <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eac:	08007ee9 	.word	0x08007ee9
 8007eb0:	08007ebd 	.word	0x08007ebd
 8007eb4:	08007ecb 	.word	0x08007ecb
 8007eb8:	08007ee9 	.word	0x08007ee9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ebc:	4b9f      	ldr	r3, [pc, #636]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec0:	4a9e      	ldr	r2, [pc, #632]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ec2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ec6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007ec8:	e00f      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ece:	3308      	adds	r3, #8
 8007ed0:	2102      	movs	r1, #2
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f001 ff0a 	bl	8009cec <RCCEx_PLL2_Config>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007ede:	e004      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ee6:	e000      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007ee8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10a      	bne.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007ef2:	4b92      	ldr	r3, [pc, #584]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ef6:	f023 0103 	bic.w	r1, r3, #3
 8007efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f00:	4a8e      	ldr	r2, [pc, #568]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f02:	430b      	orrs	r3, r1
 8007f04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007f06:	e003      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f18:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007f1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007f20:	2300      	movs	r3, #0
 8007f22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007f26:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	f000 8099 	beq.w	8008064 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f32:	4b83      	ldr	r3, [pc, #524]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a82      	ldr	r2, [pc, #520]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007f38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f3e:	f7fb f851 	bl	8002fe4 <HAL_GetTick>
 8007f42:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f46:	e00b      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f48:	f7fb f84c 	bl	8002fe4 <HAL_GetTick>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	2b64      	cmp	r3, #100	@ 0x64
 8007f56:	d903      	bls.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f5e:	e005      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f60:	4b77      	ldr	r3, [pc, #476]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d0ed      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007f6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d173      	bne.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007f74:	4b71      	ldr	r3, [pc, #452]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f76:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007f80:	4053      	eors	r3, r2
 8007f82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d015      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f8a:	4b6c      	ldr	r3, [pc, #432]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f92:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f96:	4b69      	ldr	r3, [pc, #420]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f9a:	4a68      	ldr	r2, [pc, #416]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fa0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007fa2:	4b66      	ldr	r3, [pc, #408]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fa6:	4a65      	ldr	r2, [pc, #404]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007fa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fac:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007fae:	4a63      	ldr	r2, [pc, #396]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fb4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007fbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fc2:	d118      	bne.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fc4:	f7fb f80e 	bl	8002fe4 <HAL_GetTick>
 8007fc8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007fcc:	e00d      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fce:	f7fb f809 	bl	8002fe4 <HAL_GetTick>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007fd8:	1ad2      	subs	r2, r2, r3
 8007fda:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d903      	bls.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007fe8:	e005      	b.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007fea:	4b54      	ldr	r3, [pc, #336]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fee:	f003 0302 	and.w	r3, r3, #2
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d0eb      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007ff6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d129      	bne.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008002:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008006:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800800a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800800e:	d10e      	bne.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008010:	4b4a      	ldr	r3, [pc, #296]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800801c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008020:	091a      	lsrs	r2, r3, #4
 8008022:	4b48      	ldr	r3, [pc, #288]	@ (8008144 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008024:	4013      	ands	r3, r2
 8008026:	4a45      	ldr	r2, [pc, #276]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008028:	430b      	orrs	r3, r1
 800802a:	6113      	str	r3, [r2, #16]
 800802c:	e005      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800802e:	4b43      	ldr	r3, [pc, #268]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	4a42      	ldr	r2, [pc, #264]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008034:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008038:	6113      	str	r3, [r2, #16]
 800803a:	4b40      	ldr	r3, [pc, #256]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800803c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800803e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008042:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800804a:	4a3c      	ldr	r2, [pc, #240]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800804c:	430b      	orrs	r3, r1
 800804e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008050:	e008      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008052:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008056:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800805a:	e003      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800805c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008060:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806c:	f002 0301 	and.w	r3, r2, #1
 8008070:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008074:	2300      	movs	r3, #0
 8008076:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800807a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800807e:	460b      	mov	r3, r1
 8008080:	4313      	orrs	r3, r2
 8008082:	f000 808f 	beq.w	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800808a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800808c:	2b28      	cmp	r3, #40	@ 0x28
 800808e:	d871      	bhi.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008090:	a201      	add	r2, pc, #4	@ (adr r2, 8008098 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008096:	bf00      	nop
 8008098:	0800817d 	.word	0x0800817d
 800809c:	08008175 	.word	0x08008175
 80080a0:	08008175 	.word	0x08008175
 80080a4:	08008175 	.word	0x08008175
 80080a8:	08008175 	.word	0x08008175
 80080ac:	08008175 	.word	0x08008175
 80080b0:	08008175 	.word	0x08008175
 80080b4:	08008175 	.word	0x08008175
 80080b8:	08008149 	.word	0x08008149
 80080bc:	08008175 	.word	0x08008175
 80080c0:	08008175 	.word	0x08008175
 80080c4:	08008175 	.word	0x08008175
 80080c8:	08008175 	.word	0x08008175
 80080cc:	08008175 	.word	0x08008175
 80080d0:	08008175 	.word	0x08008175
 80080d4:	08008175 	.word	0x08008175
 80080d8:	0800815f 	.word	0x0800815f
 80080dc:	08008175 	.word	0x08008175
 80080e0:	08008175 	.word	0x08008175
 80080e4:	08008175 	.word	0x08008175
 80080e8:	08008175 	.word	0x08008175
 80080ec:	08008175 	.word	0x08008175
 80080f0:	08008175 	.word	0x08008175
 80080f4:	08008175 	.word	0x08008175
 80080f8:	0800817d 	.word	0x0800817d
 80080fc:	08008175 	.word	0x08008175
 8008100:	08008175 	.word	0x08008175
 8008104:	08008175 	.word	0x08008175
 8008108:	08008175 	.word	0x08008175
 800810c:	08008175 	.word	0x08008175
 8008110:	08008175 	.word	0x08008175
 8008114:	08008175 	.word	0x08008175
 8008118:	0800817d 	.word	0x0800817d
 800811c:	08008175 	.word	0x08008175
 8008120:	08008175 	.word	0x08008175
 8008124:	08008175 	.word	0x08008175
 8008128:	08008175 	.word	0x08008175
 800812c:	08008175 	.word	0x08008175
 8008130:	08008175 	.word	0x08008175
 8008134:	08008175 	.word	0x08008175
 8008138:	0800817d 	.word	0x0800817d
 800813c:	58024400 	.word	0x58024400
 8008140:	58024800 	.word	0x58024800
 8008144:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800814c:	3308      	adds	r3, #8
 800814e:	2101      	movs	r1, #1
 8008150:	4618      	mov	r0, r3
 8008152:	f001 fdcb 	bl	8009cec <RCCEx_PLL2_Config>
 8008156:	4603      	mov	r3, r0
 8008158:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800815c:	e00f      	b.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800815e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008162:	3328      	adds	r3, #40	@ 0x28
 8008164:	2101      	movs	r1, #1
 8008166:	4618      	mov	r0, r3
 8008168:	f001 fe72 	bl	8009e50 <RCCEx_PLL3_Config>
 800816c:	4603      	mov	r3, r0
 800816e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008172:	e004      	b.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800817a:	e000      	b.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800817c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800817e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008182:	2b00      	cmp	r3, #0
 8008184:	d10a      	bne.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008186:	4bbf      	ldr	r3, [pc, #764]	@ (8008484 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800818a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800818e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008192:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008194:	4abb      	ldr	r2, [pc, #748]	@ (8008484 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008196:	430b      	orrs	r3, r1
 8008198:	6553      	str	r3, [r2, #84]	@ 0x54
 800819a:	e003      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800819c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80081a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ac:	f002 0302 	and.w	r3, r2, #2
 80081b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80081b4:	2300      	movs	r3, #0
 80081b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80081ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80081be:	460b      	mov	r3, r1
 80081c0:	4313      	orrs	r3, r2
 80081c2:	d041      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80081c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081ca:	2b05      	cmp	r3, #5
 80081cc:	d824      	bhi.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80081ce:	a201      	add	r2, pc, #4	@ (adr r2, 80081d4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80081d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d4:	08008221 	.word	0x08008221
 80081d8:	080081ed 	.word	0x080081ed
 80081dc:	08008203 	.word	0x08008203
 80081e0:	08008221 	.word	0x08008221
 80081e4:	08008221 	.word	0x08008221
 80081e8:	08008221 	.word	0x08008221
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081f0:	3308      	adds	r3, #8
 80081f2:	2101      	movs	r1, #1
 80081f4:	4618      	mov	r0, r3
 80081f6:	f001 fd79 	bl	8009cec <RCCEx_PLL2_Config>
 80081fa:	4603      	mov	r3, r0
 80081fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008200:	e00f      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008206:	3328      	adds	r3, #40	@ 0x28
 8008208:	2101      	movs	r1, #1
 800820a:	4618      	mov	r0, r3
 800820c:	f001 fe20 	bl	8009e50 <RCCEx_PLL3_Config>
 8008210:	4603      	mov	r3, r0
 8008212:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008216:	e004      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800821e:	e000      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8008220:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008222:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10a      	bne.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800822a:	4b96      	ldr	r3, [pc, #600]	@ (8008484 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800822c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800822e:	f023 0107 	bic.w	r1, r3, #7
 8008232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008238:	4a92      	ldr	r2, [pc, #584]	@ (8008484 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800823a:	430b      	orrs	r3, r1
 800823c:	6553      	str	r3, [r2, #84]	@ 0x54
 800823e:	e003      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008240:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008244:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800824c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008250:	f002 0304 	and.w	r3, r2, #4
 8008254:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008258:	2300      	movs	r3, #0
 800825a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800825e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008262:	460b      	mov	r3, r1
 8008264:	4313      	orrs	r3, r2
 8008266:	d044      	beq.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800826c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008270:	2b05      	cmp	r3, #5
 8008272:	d825      	bhi.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8008274:	a201      	add	r2, pc, #4	@ (adr r2, 800827c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8008276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827a:	bf00      	nop
 800827c:	080082c9 	.word	0x080082c9
 8008280:	08008295 	.word	0x08008295
 8008284:	080082ab 	.word	0x080082ab
 8008288:	080082c9 	.word	0x080082c9
 800828c:	080082c9 	.word	0x080082c9
 8008290:	080082c9 	.word	0x080082c9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008298:	3308      	adds	r3, #8
 800829a:	2101      	movs	r1, #1
 800829c:	4618      	mov	r0, r3
 800829e:	f001 fd25 	bl	8009cec <RCCEx_PLL2_Config>
 80082a2:	4603      	mov	r3, r0
 80082a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80082a8:	e00f      	b.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ae:	3328      	adds	r3, #40	@ 0x28
 80082b0:	2101      	movs	r1, #1
 80082b2:	4618      	mov	r0, r3
 80082b4:	f001 fdcc 	bl	8009e50 <RCCEx_PLL3_Config>
 80082b8:	4603      	mov	r3, r0
 80082ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80082be:	e004      	b.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80082c6:	e000      	b.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80082c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10b      	bne.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80082d2:	4b6c      	ldr	r3, [pc, #432]	@ (8008484 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80082d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082d6:	f023 0107 	bic.w	r1, r3, #7
 80082da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082e2:	4a68      	ldr	r2, [pc, #416]	@ (8008484 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80082e4:	430b      	orrs	r3, r1
 80082e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80082e8:	e003      	b.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80082f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fa:	f002 0320 	and.w	r3, r2, #32
 80082fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008302:	2300      	movs	r3, #0
 8008304:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008308:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800830c:	460b      	mov	r3, r1
 800830e:	4313      	orrs	r3, r2
 8008310:	d055      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008316:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800831a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800831e:	d033      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8008320:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008324:	d82c      	bhi.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008326:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800832a:	d02f      	beq.n	800838c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800832c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008330:	d826      	bhi.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008332:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008336:	d02b      	beq.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008338:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800833c:	d820      	bhi.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800833e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008342:	d012      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8008344:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008348:	d81a      	bhi.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800834a:	2b00      	cmp	r3, #0
 800834c:	d022      	beq.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800834e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008352:	d115      	bne.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008358:	3308      	adds	r3, #8
 800835a:	2100      	movs	r1, #0
 800835c:	4618      	mov	r0, r3
 800835e:	f001 fcc5 	bl	8009cec <RCCEx_PLL2_Config>
 8008362:	4603      	mov	r3, r0
 8008364:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008368:	e015      	b.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800836a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800836e:	3328      	adds	r3, #40	@ 0x28
 8008370:	2102      	movs	r1, #2
 8008372:	4618      	mov	r0, r3
 8008374:	f001 fd6c 	bl	8009e50 <RCCEx_PLL3_Config>
 8008378:	4603      	mov	r3, r0
 800837a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800837e:	e00a      	b.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008386:	e006      	b.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008388:	bf00      	nop
 800838a:	e004      	b.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800838c:	bf00      	nop
 800838e:	e002      	b.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008390:	bf00      	nop
 8008392:	e000      	b.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008394:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008396:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800839a:	2b00      	cmp	r3, #0
 800839c:	d10b      	bne.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800839e:	4b39      	ldr	r3, [pc, #228]	@ (8008484 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80083a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083a2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80083a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083ae:	4a35      	ldr	r2, [pc, #212]	@ (8008484 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80083b0:	430b      	orrs	r3, r1
 80083b2:	6553      	str	r3, [r2, #84]	@ 0x54
 80083b4:	e003      	b.n	80083be <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80083be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80083ca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80083ce:	2300      	movs	r3, #0
 80083d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80083d4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80083d8:	460b      	mov	r3, r1
 80083da:	4313      	orrs	r3, r2
 80083dc:	d058      	beq.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80083de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80083e6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80083ea:	d033      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80083ec:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80083f0:	d82c      	bhi.n	800844c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80083f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083f6:	d02f      	beq.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80083f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083fc:	d826      	bhi.n	800844c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80083fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008402:	d02b      	beq.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008404:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008408:	d820      	bhi.n	800844c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800840a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800840e:	d012      	beq.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8008410:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008414:	d81a      	bhi.n	800844c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008416:	2b00      	cmp	r3, #0
 8008418:	d022      	beq.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800841a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800841e:	d115      	bne.n	800844c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008424:	3308      	adds	r3, #8
 8008426:	2100      	movs	r1, #0
 8008428:	4618      	mov	r0, r3
 800842a:	f001 fc5f 	bl	8009cec <RCCEx_PLL2_Config>
 800842e:	4603      	mov	r3, r0
 8008430:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008434:	e015      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800843a:	3328      	adds	r3, #40	@ 0x28
 800843c:	2102      	movs	r1, #2
 800843e:	4618      	mov	r0, r3
 8008440:	f001 fd06 	bl	8009e50 <RCCEx_PLL3_Config>
 8008444:	4603      	mov	r3, r0
 8008446:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800844a:	e00a      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008452:	e006      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008454:	bf00      	nop
 8008456:	e004      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008458:	bf00      	nop
 800845a:	e002      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800845c:	bf00      	nop
 800845e:	e000      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008460:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008462:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008466:	2b00      	cmp	r3, #0
 8008468:	d10e      	bne.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800846a:	4b06      	ldr	r3, [pc, #24]	@ (8008484 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800846c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800846e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008476:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800847a:	4a02      	ldr	r2, [pc, #8]	@ (8008484 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800847c:	430b      	orrs	r3, r1
 800847e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008480:	e006      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8008482:	bf00      	nop
 8008484:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008488:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800848c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008498:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800849c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80084a0:	2300      	movs	r3, #0
 80084a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80084a6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80084aa:	460b      	mov	r3, r1
 80084ac:	4313      	orrs	r3, r2
 80084ae:	d055      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80084b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80084b8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80084bc:	d033      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80084be:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80084c2:	d82c      	bhi.n	800851e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80084c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084c8:	d02f      	beq.n	800852a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80084ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084ce:	d826      	bhi.n	800851e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80084d0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80084d4:	d02b      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80084d6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80084da:	d820      	bhi.n	800851e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80084dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80084e0:	d012      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80084e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80084e6:	d81a      	bhi.n	800851e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d022      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80084ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084f0:	d115      	bne.n	800851e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084f6:	3308      	adds	r3, #8
 80084f8:	2100      	movs	r1, #0
 80084fa:	4618      	mov	r0, r3
 80084fc:	f001 fbf6 	bl	8009cec <RCCEx_PLL2_Config>
 8008500:	4603      	mov	r3, r0
 8008502:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008506:	e015      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800850c:	3328      	adds	r3, #40	@ 0x28
 800850e:	2102      	movs	r1, #2
 8008510:	4618      	mov	r0, r3
 8008512:	f001 fc9d 	bl	8009e50 <RCCEx_PLL3_Config>
 8008516:	4603      	mov	r3, r0
 8008518:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800851c:	e00a      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008524:	e006      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008526:	bf00      	nop
 8008528:	e004      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800852a:	bf00      	nop
 800852c:	e002      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800852e:	bf00      	nop
 8008530:	e000      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008532:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008534:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10b      	bne.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800853c:	4ba0      	ldr	r3, [pc, #640]	@ (80087c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800853e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008540:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008548:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800854c:	4a9c      	ldr	r2, [pc, #624]	@ (80087c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800854e:	430b      	orrs	r3, r1
 8008550:	6593      	str	r3, [r2, #88]	@ 0x58
 8008552:	e003      	b.n	800855c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008554:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008558:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800855c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008564:	f002 0308 	and.w	r3, r2, #8
 8008568:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800856c:	2300      	movs	r3, #0
 800856e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008572:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008576:	460b      	mov	r3, r1
 8008578:	4313      	orrs	r3, r2
 800857a:	d01e      	beq.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800857c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008580:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008584:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008588:	d10c      	bne.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800858a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800858e:	3328      	adds	r3, #40	@ 0x28
 8008590:	2102      	movs	r1, #2
 8008592:	4618      	mov	r0, r3
 8008594:	f001 fc5c 	bl	8009e50 <RCCEx_PLL3_Config>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d002      	beq.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80085a4:	4b86      	ldr	r3, [pc, #536]	@ (80087c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80085a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085a8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80085ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085b4:	4a82      	ldr	r2, [pc, #520]	@ (80087c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80085b6:	430b      	orrs	r3, r1
 80085b8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80085ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c2:	f002 0310 	and.w	r3, r2, #16
 80085c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80085ca:	2300      	movs	r3, #0
 80085cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80085d0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80085d4:	460b      	mov	r3, r1
 80085d6:	4313      	orrs	r3, r2
 80085d8:	d01e      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80085da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085e6:	d10c      	bne.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80085e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085ec:	3328      	adds	r3, #40	@ 0x28
 80085ee:	2102      	movs	r1, #2
 80085f0:	4618      	mov	r0, r3
 80085f2:	f001 fc2d 	bl	8009e50 <RCCEx_PLL3_Config>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d002      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008602:	4b6f      	ldr	r3, [pc, #444]	@ (80087c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008606:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800860a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800860e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008612:	4a6b      	ldr	r2, [pc, #428]	@ (80087c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008614:	430b      	orrs	r3, r1
 8008616:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800861c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008620:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008624:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008626:	2300      	movs	r3, #0
 8008628:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800862a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800862e:	460b      	mov	r3, r1
 8008630:	4313      	orrs	r3, r2
 8008632:	d03e      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008638:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800863c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008640:	d022      	beq.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008642:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008646:	d81b      	bhi.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8008648:	2b00      	cmp	r3, #0
 800864a:	d003      	beq.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800864c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008650:	d00b      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8008652:	e015      	b.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008658:	3308      	adds	r3, #8
 800865a:	2100      	movs	r1, #0
 800865c:	4618      	mov	r0, r3
 800865e:	f001 fb45 	bl	8009cec <RCCEx_PLL2_Config>
 8008662:	4603      	mov	r3, r0
 8008664:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008668:	e00f      	b.n	800868a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800866a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800866e:	3328      	adds	r3, #40	@ 0x28
 8008670:	2102      	movs	r1, #2
 8008672:	4618      	mov	r0, r3
 8008674:	f001 fbec 	bl	8009e50 <RCCEx_PLL3_Config>
 8008678:	4603      	mov	r3, r0
 800867a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800867e:	e004      	b.n	800868a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008686:	e000      	b.n	800868a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8008688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800868a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800868e:	2b00      	cmp	r3, #0
 8008690:	d10b      	bne.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008692:	4b4b      	ldr	r3, [pc, #300]	@ (80087c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008696:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800869a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800869e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80086a2:	4a47      	ldr	r2, [pc, #284]	@ (80087c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80086a4:	430b      	orrs	r3, r1
 80086a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80086a8:	e003      	b.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80086b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80086be:	673b      	str	r3, [r7, #112]	@ 0x70
 80086c0:	2300      	movs	r3, #0
 80086c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80086c4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80086c8:	460b      	mov	r3, r1
 80086ca:	4313      	orrs	r3, r2
 80086cc:	d03b      	beq.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80086ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80086da:	d01f      	beq.n	800871c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80086dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80086e0:	d818      	bhi.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80086e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086e6:	d003      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80086e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086ec:	d007      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80086ee:	e011      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086f0:	4b33      	ldr	r3, [pc, #204]	@ (80087c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80086f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f4:	4a32      	ldr	r2, [pc, #200]	@ (80087c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80086f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80086fc:	e00f      	b.n	800871e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008702:	3328      	adds	r3, #40	@ 0x28
 8008704:	2101      	movs	r1, #1
 8008706:	4618      	mov	r0, r3
 8008708:	f001 fba2 	bl	8009e50 <RCCEx_PLL3_Config>
 800870c:	4603      	mov	r3, r0
 800870e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8008712:	e004      	b.n	800871e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800871a:	e000      	b.n	800871e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800871c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800871e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008722:	2b00      	cmp	r3, #0
 8008724:	d10b      	bne.n	800873e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008726:	4b26      	ldr	r3, [pc, #152]	@ (80087c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800872a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800872e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008732:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008736:	4a22      	ldr	r2, [pc, #136]	@ (80087c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008738:	430b      	orrs	r3, r1
 800873a:	6553      	str	r3, [r2, #84]	@ 0x54
 800873c:	e003      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800873e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008742:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800874a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008752:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008754:	2300      	movs	r3, #0
 8008756:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008758:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800875c:	460b      	mov	r3, r1
 800875e:	4313      	orrs	r3, r2
 8008760:	d034      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008768:	2b00      	cmp	r3, #0
 800876a:	d003      	beq.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800876c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008770:	d007      	beq.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8008772:	e011      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008774:	4b12      	ldr	r3, [pc, #72]	@ (80087c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008778:	4a11      	ldr	r2, [pc, #68]	@ (80087c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800877a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800877e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008780:	e00e      	b.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008786:	3308      	adds	r3, #8
 8008788:	2102      	movs	r1, #2
 800878a:	4618      	mov	r0, r3
 800878c:	f001 faae 	bl	8009cec <RCCEx_PLL2_Config>
 8008790:	4603      	mov	r3, r0
 8008792:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008796:	e003      	b.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800879e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d10d      	bne.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80087a8:	4b05      	ldr	r3, [pc, #20]	@ (80087c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80087aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087ac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80087b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087b6:	4a02      	ldr	r2, [pc, #8]	@ (80087c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80087b8:	430b      	orrs	r3, r1
 80087ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80087bc:	e006      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80087be:	bf00      	nop
 80087c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80087cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80087d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80087da:	2300      	movs	r3, #0
 80087dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80087de:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80087e2:	460b      	mov	r3, r1
 80087e4:	4313      	orrs	r3, r2
 80087e6:	d00c      	beq.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80087e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087ec:	3328      	adds	r3, #40	@ 0x28
 80087ee:	2102      	movs	r1, #2
 80087f0:	4618      	mov	r0, r3
 80087f2:	f001 fb2d 	bl	8009e50 <RCCEx_PLL3_Config>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d002      	beq.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800880e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008810:	2300      	movs	r3, #0
 8008812:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008814:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008818:	460b      	mov	r3, r1
 800881a:	4313      	orrs	r3, r2
 800881c:	d036      	beq.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800881e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008822:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008824:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008828:	d018      	beq.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800882a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800882e:	d811      	bhi.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008830:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008834:	d014      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8008836:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800883a:	d80b      	bhi.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800883c:	2b00      	cmp	r3, #0
 800883e:	d011      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008840:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008844:	d106      	bne.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008846:	4bb7      	ldr	r3, [pc, #732]	@ (8008b24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800884a:	4ab6      	ldr	r2, [pc, #728]	@ (8008b24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800884c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008850:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008852:	e008      	b.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800885a:	e004      	b.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800885c:	bf00      	nop
 800885e:	e002      	b.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008860:	bf00      	nop
 8008862:	e000      	b.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008866:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10a      	bne.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800886e:	4bad      	ldr	r3, [pc, #692]	@ (8008b24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008872:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800887a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800887c:	4aa9      	ldr	r2, [pc, #676]	@ (8008b24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800887e:	430b      	orrs	r3, r1
 8008880:	6553      	str	r3, [r2, #84]	@ 0x54
 8008882:	e003      	b.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008884:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008888:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800888c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008894:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008898:	653b      	str	r3, [r7, #80]	@ 0x50
 800889a:	2300      	movs	r3, #0
 800889c:	657b      	str	r3, [r7, #84]	@ 0x54
 800889e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80088a2:	460b      	mov	r3, r1
 80088a4:	4313      	orrs	r3, r2
 80088a6:	d009      	beq.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80088a8:	4b9e      	ldr	r3, [pc, #632]	@ (8008b24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80088aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088ac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80088b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088b6:	4a9b      	ldr	r2, [pc, #620]	@ (8008b24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80088b8:	430b      	orrs	r3, r1
 80088ba:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80088bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80088c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088ca:	2300      	movs	r3, #0
 80088cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088ce:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80088d2:	460b      	mov	r3, r1
 80088d4:	4313      	orrs	r3, r2
 80088d6:	d009      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80088d8:	4b92      	ldr	r3, [pc, #584]	@ (8008b24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80088da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088dc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80088e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80088e6:	4a8f      	ldr	r2, [pc, #572]	@ (8008b24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80088e8:	430b      	orrs	r3, r1
 80088ea:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80088ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80088f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80088fa:	2300      	movs	r3, #0
 80088fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80088fe:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008902:	460b      	mov	r3, r1
 8008904:	4313      	orrs	r3, r2
 8008906:	d00e      	beq.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008908:	4b86      	ldr	r3, [pc, #536]	@ (8008b24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	4a85      	ldr	r2, [pc, #532]	@ (8008b24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800890e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008912:	6113      	str	r3, [r2, #16]
 8008914:	4b83      	ldr	r3, [pc, #524]	@ (8008b24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008916:	6919      	ldr	r1, [r3, #16]
 8008918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800891c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008920:	4a80      	ldr	r2, [pc, #512]	@ (8008b24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008922:	430b      	orrs	r3, r1
 8008924:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800892a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008932:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008934:	2300      	movs	r3, #0
 8008936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008938:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800893c:	460b      	mov	r3, r1
 800893e:	4313      	orrs	r3, r2
 8008940:	d009      	beq.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008942:	4b78      	ldr	r3, [pc, #480]	@ (8008b24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008946:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800894a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800894e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008950:	4a74      	ldr	r2, [pc, #464]	@ (8008b24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008952:	430b      	orrs	r3, r1
 8008954:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800895a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008962:	633b      	str	r3, [r7, #48]	@ 0x30
 8008964:	2300      	movs	r3, #0
 8008966:	637b      	str	r3, [r7, #52]	@ 0x34
 8008968:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800896c:	460b      	mov	r3, r1
 800896e:	4313      	orrs	r3, r2
 8008970:	d00a      	beq.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008972:	4b6c      	ldr	r3, [pc, #432]	@ (8008b24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008976:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800897a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800897e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008982:	4a68      	ldr	r2, [pc, #416]	@ (8008b24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008984:	430b      	orrs	r3, r1
 8008986:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800898c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008990:	2100      	movs	r1, #0
 8008992:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008994:	f003 0301 	and.w	r3, r3, #1
 8008998:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800899a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800899e:	460b      	mov	r3, r1
 80089a0:	4313      	orrs	r3, r2
 80089a2:	d011      	beq.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089a8:	3308      	adds	r3, #8
 80089aa:	2100      	movs	r1, #0
 80089ac:	4618      	mov	r0, r3
 80089ae:	f001 f99d 	bl	8009cec <RCCEx_PLL2_Config>
 80089b2:	4603      	mov	r3, r0
 80089b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80089b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d003      	beq.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80089c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80089c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d0:	2100      	movs	r1, #0
 80089d2:	6239      	str	r1, [r7, #32]
 80089d4:	f003 0302 	and.w	r3, r3, #2
 80089d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80089da:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80089de:	460b      	mov	r3, r1
 80089e0:	4313      	orrs	r3, r2
 80089e2:	d011      	beq.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80089e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089e8:	3308      	adds	r3, #8
 80089ea:	2101      	movs	r1, #1
 80089ec:	4618      	mov	r0, r3
 80089ee:	f001 f97d 	bl	8009cec <RCCEx_PLL2_Config>
 80089f2:	4603      	mov	r3, r0
 80089f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80089f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d003      	beq.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a10:	2100      	movs	r1, #0
 8008a12:	61b9      	str	r1, [r7, #24]
 8008a14:	f003 0304 	and.w	r3, r3, #4
 8008a18:	61fb      	str	r3, [r7, #28]
 8008a1a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008a1e:	460b      	mov	r3, r1
 8008a20:	4313      	orrs	r3, r2
 8008a22:	d011      	beq.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a28:	3308      	adds	r3, #8
 8008a2a:	2102      	movs	r1, #2
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f001 f95d 	bl	8009cec <RCCEx_PLL2_Config>
 8008a32:	4603      	mov	r3, r0
 8008a34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008a38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d003      	beq.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a50:	2100      	movs	r1, #0
 8008a52:	6139      	str	r1, [r7, #16]
 8008a54:	f003 0308 	and.w	r3, r3, #8
 8008a58:	617b      	str	r3, [r7, #20]
 8008a5a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4313      	orrs	r3, r2
 8008a62:	d011      	beq.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a68:	3328      	adds	r3, #40	@ 0x28
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f001 f9ef 	bl	8009e50 <RCCEx_PLL3_Config>
 8008a72:	4603      	mov	r3, r0
 8008a74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8008a78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d003      	beq.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a90:	2100      	movs	r1, #0
 8008a92:	60b9      	str	r1, [r7, #8]
 8008a94:	f003 0310 	and.w	r3, r3, #16
 8008a98:	60fb      	str	r3, [r7, #12]
 8008a9a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	d011      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aa8:	3328      	adds	r3, #40	@ 0x28
 8008aaa:	2101      	movs	r1, #1
 8008aac:	4618      	mov	r0, r3
 8008aae:	f001 f9cf 	bl	8009e50 <RCCEx_PLL3_Config>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008ab8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d003      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ac0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ac4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad0:	2100      	movs	r1, #0
 8008ad2:	6039      	str	r1, [r7, #0]
 8008ad4:	f003 0320 	and.w	r3, r3, #32
 8008ad8:	607b      	str	r3, [r7, #4]
 8008ada:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008ade:	460b      	mov	r3, r1
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	d011      	beq.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ae8:	3328      	adds	r3, #40	@ 0x28
 8008aea:	2102      	movs	r1, #2
 8008aec:	4618      	mov	r0, r3
 8008aee:	f001 f9af 	bl	8009e50 <RCCEx_PLL3_Config>
 8008af2:	4603      	mov	r3, r0
 8008af4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008af8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d003      	beq.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8008b08:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d101      	bne.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8008b10:	2300      	movs	r3, #0
 8008b12:	e000      	b.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b22:	bf00      	nop
 8008b24:	58024400 	.word	0x58024400

08008b28 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b090      	sub	sp, #64	@ 0x40
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008b32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b36:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008b3a:	430b      	orrs	r3, r1
 8008b3c:	f040 8094 	bne.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008b40:	4b9b      	ldr	r3, [pc, #620]	@ (8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b44:	f003 0307 	and.w	r3, r3, #7
 8008b48:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b4c:	2b04      	cmp	r3, #4
 8008b4e:	f200 8087 	bhi.w	8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008b52:	a201      	add	r2, pc, #4	@ (adr r2, 8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b58:	08008b6d 	.word	0x08008b6d
 8008b5c:	08008b95 	.word	0x08008b95
 8008b60:	08008bbd 	.word	0x08008bbd
 8008b64:	08008c59 	.word	0x08008c59
 8008b68:	08008be5 	.word	0x08008be5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b6c:	4b90      	ldr	r3, [pc, #576]	@ (8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b78:	d108      	bne.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 ff62 	bl	8009a48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b88:	f000 bc93 	b.w	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b90:	f000 bc8f 	b.w	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b94:	4b86      	ldr	r3, [pc, #536]	@ (8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ba0:	d108      	bne.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ba2:	f107 0318 	add.w	r3, r7, #24
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f000 fca6 	bl	80094f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bb0:	f000 bc7f 	b.w	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bb8:	f000 bc7b 	b.w	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bbc:	4b7c      	ldr	r3, [pc, #496]	@ (8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bc8:	d108      	bne.n	8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bca:	f107 030c 	add.w	r3, r7, #12
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f000 fde6 	bl	80097a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bd8:	f000 bc6b 	b.w	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008be0:	f000 bc67 	b.w	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008be4:	4b72      	ldr	r3, [pc, #456]	@ (8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008be8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008bec:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bee:	4b70      	ldr	r3, [pc, #448]	@ (8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f003 0304 	and.w	r3, r3, #4
 8008bf6:	2b04      	cmp	r3, #4
 8008bf8:	d10c      	bne.n	8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d109      	bne.n	8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c00:	4b6b      	ldr	r3, [pc, #428]	@ (8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	08db      	lsrs	r3, r3, #3
 8008c06:	f003 0303 	and.w	r3, r3, #3
 8008c0a:	4a6a      	ldr	r2, [pc, #424]	@ (8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c12:	e01f      	b.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c14:	4b66      	ldr	r3, [pc, #408]	@ (8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c20:	d106      	bne.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c28:	d102      	bne.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c2a:	4b63      	ldr	r3, [pc, #396]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c2e:	e011      	b.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c30:	4b5f      	ldr	r3, [pc, #380]	@ (8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c3c:	d106      	bne.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c44:	d102      	bne.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c46:	4b5d      	ldr	r3, [pc, #372]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c4a:	e003      	b.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008c50:	f000 bc2f 	b.w	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008c54:	f000 bc2d 	b.w	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c58:	4b59      	ldr	r3, [pc, #356]	@ (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c5c:	f000 bc29 	b.w	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008c60:	2300      	movs	r3, #0
 8008c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c64:	f000 bc25 	b.w	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008c68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c6c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008c70:	430b      	orrs	r3, r1
 8008c72:	f040 80a7 	bne.w	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008c76:	4b4e      	ldr	r3, [pc, #312]	@ (8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c7a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008c7e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008c86:	d054      	beq.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c8a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008c8e:	f200 808b 	bhi.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c94:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008c98:	f000 8083 	beq.w	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8008c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c9e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008ca2:	f200 8081 	bhi.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008cac:	d02f      	beq.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008cb4:	d878      	bhi.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d004      	beq.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8008cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008cc2:	d012      	beq.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8008cc4:	e070      	b.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cc6:	4b3a      	ldr	r3, [pc, #232]	@ (8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008cd2:	d107      	bne.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f000 feb5 	bl	8009a48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ce2:	e3e6      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ce8:	e3e3      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cea:	4b31      	ldr	r3, [pc, #196]	@ (8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cf2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cf6:	d107      	bne.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cf8:	f107 0318 	add.w	r3, r7, #24
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f000 fbfb 	bl	80094f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d06:	e3d4      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d0c:	e3d1      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d0e:	4b28      	ldr	r3, [pc, #160]	@ (8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d1a:	d107      	bne.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d1c:	f107 030c 	add.w	r3, r7, #12
 8008d20:	4618      	mov	r0, r3
 8008d22:	f000 fd3d 	bl	80097a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d2a:	e3c2      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d30:	e3bf      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d32:	4b1f      	ldr	r3, [pc, #124]	@ (8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d36:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008d3a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 0304 	and.w	r3, r3, #4
 8008d44:	2b04      	cmp	r3, #4
 8008d46:	d10c      	bne.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8008d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d109      	bne.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d4e:	4b18      	ldr	r3, [pc, #96]	@ (8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	08db      	lsrs	r3, r3, #3
 8008d54:	f003 0303 	and.w	r3, r3, #3
 8008d58:	4a16      	ldr	r2, [pc, #88]	@ (8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d60:	e01e      	b.n	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d62:	4b13      	ldr	r3, [pc, #76]	@ (8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d6e:	d106      	bne.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d76:	d102      	bne.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d78:	4b0f      	ldr	r3, [pc, #60]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d7c:	e010      	b.n	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d8a:	d106      	bne.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d92:	d102      	bne.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d94:	4b09      	ldr	r3, [pc, #36]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d98:	e002      	b.n	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008d9e:	e388      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008da0:	e387      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008da2:	4b07      	ldr	r3, [pc, #28]	@ (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008da6:	e384      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008da8:	2300      	movs	r3, #0
 8008daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dac:	e381      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008dae:	bf00      	nop
 8008db0:	58024400 	.word	0x58024400
 8008db4:	03d09000 	.word	0x03d09000
 8008db8:	003d0900 	.word	0x003d0900
 8008dbc:	016e3600 	.word	0x016e3600
 8008dc0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008dc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dc8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008dcc:	430b      	orrs	r3, r1
 8008dce:	f040 809c 	bne.w	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008dd2:	4b9e      	ldr	r3, [pc, #632]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dd6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008dda:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dde:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008de2:	d054      	beq.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008dea:	f200 808b 	bhi.w	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008df4:	f000 8083 	beq.w	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8008df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008dfe:	f200 8081 	bhi.w	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e08:	d02f      	beq.n	8008e6a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e10:	d878      	bhi.n	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d004      	beq.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e1e:	d012      	beq.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008e20:	e070      	b.n	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e22:	4b8a      	ldr	r3, [pc, #552]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e2e:	d107      	bne.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e34:	4618      	mov	r0, r3
 8008e36:	f000 fe07 	bl	8009a48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e3e:	e338      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e40:	2300      	movs	r3, #0
 8008e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e44:	e335      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e46:	4b81      	ldr	r3, [pc, #516]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e52:	d107      	bne.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e54:	f107 0318 	add.w	r3, r7, #24
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f000 fb4d 	bl	80094f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e62:	e326      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e64:	2300      	movs	r3, #0
 8008e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e68:	e323      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e6a:	4b78      	ldr	r3, [pc, #480]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e76:	d107      	bne.n	8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e78:	f107 030c 	add.w	r3, r7, #12
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f000 fc8f 	bl	80097a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e86:	e314      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e8c:	e311      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e8e:	4b6f      	ldr	r3, [pc, #444]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e92:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008e96:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e98:	4b6c      	ldr	r3, [pc, #432]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f003 0304 	and.w	r3, r3, #4
 8008ea0:	2b04      	cmp	r3, #4
 8008ea2:	d10c      	bne.n	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d109      	bne.n	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008eaa:	4b68      	ldr	r3, [pc, #416]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	08db      	lsrs	r3, r3, #3
 8008eb0:	f003 0303 	and.w	r3, r3, #3
 8008eb4:	4a66      	ldr	r2, [pc, #408]	@ (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8008eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ebc:	e01e      	b.n	8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ebe:	4b63      	ldr	r3, [pc, #396]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ec6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008eca:	d106      	bne.n	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ece:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ed2:	d102      	bne.n	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008ed4:	4b5f      	ldr	r3, [pc, #380]	@ (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ed8:	e010      	b.n	8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008eda:	4b5c      	ldr	r3, [pc, #368]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ee2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ee6:	d106      	bne.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008eee:	d102      	bne.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008ef0:	4b59      	ldr	r3, [pc, #356]	@ (8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ef4:	e002      	b.n	8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008efa:	e2da      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008efc:	e2d9      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008efe:	4b57      	ldr	r3, [pc, #348]	@ (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f02:	e2d6      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008f04:	2300      	movs	r3, #0
 8008f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f08:	e2d3      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008f0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f0e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008f12:	430b      	orrs	r3, r1
 8008f14:	f040 80a7 	bne.w	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008f18:	4b4c      	ldr	r3, [pc, #304]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f1c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008f20:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f28:	d055      	beq.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f30:	f200 8096 	bhi.w	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f36:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008f3a:	f000 8084 	beq.w	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008f44:	f200 808c 	bhi.w	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f4e:	d030      	beq.n	8008fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f56:	f200 8083 	bhi.w	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d004      	beq.n	8008f6a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f66:	d012      	beq.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008f68:	e07a      	b.n	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f6a:	4b38      	ldr	r3, [pc, #224]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f76:	d107      	bne.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f000 fd63 	bl	8009a48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f86:	e294      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f8c:	e291      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f8e:	4b2f      	ldr	r3, [pc, #188]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f9a:	d107      	bne.n	8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f9c:	f107 0318 	add.w	r3, r7, #24
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f000 faa9 	bl	80094f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008faa:	e282      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fac:	2300      	movs	r3, #0
 8008fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fb0:	e27f      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008fb2:	4b26      	ldr	r3, [pc, #152]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008fba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fbe:	d107      	bne.n	8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fc0:	f107 030c 	add.w	r3, r7, #12
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f000 fbeb 	bl	80097a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fce:	e270      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fd4:	e26d      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008fd6:	4b1d      	ldr	r3, [pc, #116]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fda:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008fde:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f003 0304 	and.w	r3, r3, #4
 8008fe8:	2b04      	cmp	r3, #4
 8008fea:	d10c      	bne.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d109      	bne.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ff2:	4b16      	ldr	r3, [pc, #88]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	08db      	lsrs	r3, r3, #3
 8008ff8:	f003 0303 	and.w	r3, r3, #3
 8008ffc:	4a14      	ldr	r2, [pc, #80]	@ (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8009002:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009004:	e01e      	b.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009006:	4b11      	ldr	r3, [pc, #68]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800900e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009012:	d106      	bne.n	8009022 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009016:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800901a:	d102      	bne.n	8009022 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800901c:	4b0d      	ldr	r3, [pc, #52]	@ (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800901e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009020:	e010      	b.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009022:	4b0a      	ldr	r3, [pc, #40]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800902a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800902e:	d106      	bne.n	800903e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8009030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009032:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009036:	d102      	bne.n	800903e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009038:	4b07      	ldr	r3, [pc, #28]	@ (8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800903a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800903c:	e002      	b.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800903e:	2300      	movs	r3, #0
 8009040:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009042:	e236      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009044:	e235      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009046:	4b05      	ldr	r3, [pc, #20]	@ (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009048:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800904a:	e232      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800904c:	58024400 	.word	0x58024400
 8009050:	03d09000 	.word	0x03d09000
 8009054:	003d0900 	.word	0x003d0900
 8009058:	016e3600 	.word	0x016e3600
 800905c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8009060:	2300      	movs	r3, #0
 8009062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009064:	e225      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009066:	e9d7 2300 	ldrd	r2, r3, [r7]
 800906a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800906e:	430b      	orrs	r3, r1
 8009070:	f040 8085 	bne.w	800917e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009074:	4b9c      	ldr	r3, [pc, #624]	@ (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009078:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800907c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800907e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009080:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009084:	d06b      	beq.n	800915e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8009086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009088:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800908c:	d874      	bhi.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800908e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009090:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009094:	d056      	beq.n	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8009096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009098:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800909c:	d86c      	bhi.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800909e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80090a4:	d03b      	beq.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80090a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80090ac:	d864      	bhi.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80090ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090b4:	d021      	beq.n	80090fa <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80090b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090bc:	d85c      	bhi.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80090be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d004      	beq.n	80090ce <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 80090c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090ca:	d004      	beq.n	80090d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80090cc:	e054      	b.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80090ce:	f7fe fb5f 	bl	8007790 <HAL_RCC_GetPCLK1Freq>
 80090d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80090d4:	e1ed      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090d6:	4b84      	ldr	r3, [pc, #528]	@ (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090e2:	d107      	bne.n	80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090e4:	f107 0318 	add.w	r3, r7, #24
 80090e8:	4618      	mov	r0, r3
 80090ea:	f000 fa05 	bl	80094f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090f2:	e1de      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090f4:	2300      	movs	r3, #0
 80090f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090f8:	e1db      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090fa:	4b7b      	ldr	r3, [pc, #492]	@ (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009102:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009106:	d107      	bne.n	8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009108:	f107 030c 	add.w	r3, r7, #12
 800910c:	4618      	mov	r0, r3
 800910e:	f000 fb47 	bl	80097a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009116:	e1cc      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009118:	2300      	movs	r3, #0
 800911a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800911c:	e1c9      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800911e:	4b72      	ldr	r3, [pc, #456]	@ (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 0304 	and.w	r3, r3, #4
 8009126:	2b04      	cmp	r3, #4
 8009128:	d109      	bne.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800912a:	4b6f      	ldr	r3, [pc, #444]	@ (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	08db      	lsrs	r3, r3, #3
 8009130:	f003 0303 	and.w	r3, r3, #3
 8009134:	4a6d      	ldr	r2, [pc, #436]	@ (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8009136:	fa22 f303 	lsr.w	r3, r2, r3
 800913a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800913c:	e1b9      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800913e:	2300      	movs	r3, #0
 8009140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009142:	e1b6      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009144:	4b68      	ldr	r3, [pc, #416]	@ (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800914c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009150:	d102      	bne.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8009152:	4b67      	ldr	r3, [pc, #412]	@ (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8009154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009156:	e1ac      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009158:	2300      	movs	r3, #0
 800915a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800915c:	e1a9      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800915e:	4b62      	ldr	r3, [pc, #392]	@ (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009166:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800916a:	d102      	bne.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800916c:	4b61      	ldr	r3, [pc, #388]	@ (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800916e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009170:	e19f      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009172:	2300      	movs	r3, #0
 8009174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009176:	e19c      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009178:	2300      	movs	r3, #0
 800917a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800917c:	e199      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800917e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009182:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009186:	430b      	orrs	r3, r1
 8009188:	d173      	bne.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800918a:	4b57      	ldr	r3, [pc, #348]	@ (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800918c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800918e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009192:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009196:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800919a:	d02f      	beq.n	80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800919c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800919e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091a2:	d863      	bhi.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80091a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d004      	beq.n	80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80091aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091b0:	d012      	beq.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80091b2:	e05b      	b.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091b4:	4b4c      	ldr	r3, [pc, #304]	@ (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091c0:	d107      	bne.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091c2:	f107 0318 	add.w	r3, r7, #24
 80091c6:	4618      	mov	r0, r3
 80091c8:	f000 f996 	bl	80094f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091d0:	e16f      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80091d2:	2300      	movs	r3, #0
 80091d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091d6:	e16c      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091d8:	4b43      	ldr	r3, [pc, #268]	@ (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80091e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091e4:	d107      	bne.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091e6:	f107 030c 	add.w	r3, r7, #12
 80091ea:	4618      	mov	r0, r3
 80091ec:	f000 fad8 	bl	80097a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091f4:	e15d      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80091f6:	2300      	movs	r3, #0
 80091f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091fa:	e15a      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80091fc:	4b3a      	ldr	r3, [pc, #232]	@ (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80091fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009200:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009204:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009206:	4b38      	ldr	r3, [pc, #224]	@ (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f003 0304 	and.w	r3, r3, #4
 800920e:	2b04      	cmp	r3, #4
 8009210:	d10c      	bne.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8009212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009214:	2b00      	cmp	r3, #0
 8009216:	d109      	bne.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009218:	4b33      	ldr	r3, [pc, #204]	@ (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	08db      	lsrs	r3, r3, #3
 800921e:	f003 0303 	and.w	r3, r3, #3
 8009222:	4a32      	ldr	r2, [pc, #200]	@ (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8009224:	fa22 f303 	lsr.w	r3, r2, r3
 8009228:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800922a:	e01e      	b.n	800926a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800922c:	4b2e      	ldr	r3, [pc, #184]	@ (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009234:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009238:	d106      	bne.n	8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800923a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800923c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009240:	d102      	bne.n	8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009242:	4b2b      	ldr	r3, [pc, #172]	@ (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8009244:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009246:	e010      	b.n	800926a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009248:	4b27      	ldr	r3, [pc, #156]	@ (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009250:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009254:	d106      	bne.n	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8009256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009258:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800925c:	d102      	bne.n	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800925e:	4b25      	ldr	r3, [pc, #148]	@ (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8009260:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009262:	e002      	b.n	800926a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009264:	2300      	movs	r3, #0
 8009266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009268:	e123      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800926a:	e122      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800926c:	2300      	movs	r3, #0
 800926e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009270:	e11f      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009272:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009276:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800927a:	430b      	orrs	r3, r1
 800927c:	d13c      	bne.n	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800927e:	4b1a      	ldr	r3, [pc, #104]	@ (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009282:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009286:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800928a:	2b00      	cmp	r3, #0
 800928c:	d004      	beq.n	8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800928e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009294:	d012      	beq.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8009296:	e023      	b.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009298:	4b13      	ldr	r3, [pc, #76]	@ (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80092a4:	d107      	bne.n	80092b6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092aa:	4618      	mov	r0, r3
 80092ac:	f000 fbcc 	bl	8009a48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092b4:	e0fd      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80092b6:	2300      	movs	r3, #0
 80092b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092ba:	e0fa      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092bc:	4b0a      	ldr	r3, [pc, #40]	@ (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092c8:	d107      	bne.n	80092da <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092ca:	f107 0318 	add.w	r3, r7, #24
 80092ce:	4618      	mov	r0, r3
 80092d0:	f000 f912 	bl	80094f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80092d4:	6a3b      	ldr	r3, [r7, #32]
 80092d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092d8:	e0eb      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80092da:	2300      	movs	r3, #0
 80092dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092de:	e0e8      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80092e0:	2300      	movs	r3, #0
 80092e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092e4:	e0e5      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80092e6:	bf00      	nop
 80092e8:	58024400 	.word	0x58024400
 80092ec:	03d09000 	.word	0x03d09000
 80092f0:	003d0900 	.word	0x003d0900
 80092f4:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80092f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092fc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009300:	430b      	orrs	r3, r1
 8009302:	f040 8085 	bne.w	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009306:	4b6d      	ldr	r3, [pc, #436]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800930a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800930e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009312:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009316:	d06b      	beq.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8009318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800931a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800931e:	d874      	bhi.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009326:	d056      	beq.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8009328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800932a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800932e:	d86c      	bhi.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009332:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009336:	d03b      	beq.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8009338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800933a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800933e:	d864      	bhi.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009342:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009346:	d021      	beq.n	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8009348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800934a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800934e:	d85c      	bhi.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009352:	2b00      	cmp	r3, #0
 8009354:	d004      	beq.n	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8009356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009358:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800935c:	d004      	beq.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800935e:	e054      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009360:	f000 f8b4 	bl	80094cc <HAL_RCCEx_GetD3PCLK1Freq>
 8009364:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009366:	e0a4      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009368:	4b54      	ldr	r3, [pc, #336]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009370:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009374:	d107      	bne.n	8009386 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009376:	f107 0318 	add.w	r3, r7, #24
 800937a:	4618      	mov	r0, r3
 800937c:	f000 f8bc 	bl	80094f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009384:	e095      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009386:	2300      	movs	r3, #0
 8009388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800938a:	e092      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800938c:	4b4b      	ldr	r3, [pc, #300]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009394:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009398:	d107      	bne.n	80093aa <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800939a:	f107 030c 	add.w	r3, r7, #12
 800939e:	4618      	mov	r0, r3
 80093a0:	f000 f9fe 	bl	80097a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093a8:	e083      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80093aa:	2300      	movs	r3, #0
 80093ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093ae:	e080      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80093b0:	4b42      	ldr	r3, [pc, #264]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f003 0304 	and.w	r3, r3, #4
 80093b8:	2b04      	cmp	r3, #4
 80093ba:	d109      	bne.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093bc:	4b3f      	ldr	r3, [pc, #252]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	08db      	lsrs	r3, r3, #3
 80093c2:	f003 0303 	and.w	r3, r3, #3
 80093c6:	4a3e      	ldr	r2, [pc, #248]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80093c8:	fa22 f303 	lsr.w	r3, r2, r3
 80093cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093ce:	e070      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80093d0:	2300      	movs	r3, #0
 80093d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093d4:	e06d      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80093d6:	4b39      	ldr	r3, [pc, #228]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093e2:	d102      	bne.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 80093e4:	4b37      	ldr	r3, [pc, #220]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80093e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093e8:	e063      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80093ea:	2300      	movs	r3, #0
 80093ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093ee:	e060      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80093f0:	4b32      	ldr	r3, [pc, #200]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093fc:	d102      	bne.n	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 80093fe:	4b32      	ldr	r3, [pc, #200]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009402:	e056      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009404:	2300      	movs	r3, #0
 8009406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009408:	e053      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800940a:	2300      	movs	r3, #0
 800940c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800940e:	e050      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009410:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009414:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009418:	430b      	orrs	r3, r1
 800941a:	d148      	bne.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800941c:	4b27      	ldr	r3, [pc, #156]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800941e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009420:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009424:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009428:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800942c:	d02a      	beq.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800942e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009430:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009434:	d838      	bhi.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8009436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009438:	2b00      	cmp	r3, #0
 800943a:	d004      	beq.n	8009446 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800943c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800943e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009442:	d00d      	beq.n	8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8009444:	e030      	b.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009446:	4b1d      	ldr	r3, [pc, #116]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800944e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009452:	d102      	bne.n	800945a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8009454:	4b1c      	ldr	r3, [pc, #112]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009458:	e02b      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800945a:	2300      	movs	r3, #0
 800945c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800945e:	e028      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009460:	4b16      	ldr	r3, [pc, #88]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009468:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800946c:	d107      	bne.n	800947e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800946e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009472:	4618      	mov	r0, r3
 8009474:	f000 fae8 	bl	8009a48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800947a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800947c:	e019      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800947e:	2300      	movs	r3, #0
 8009480:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009482:	e016      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009484:	4b0d      	ldr	r3, [pc, #52]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800948c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009490:	d107      	bne.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009492:	f107 0318 	add.w	r3, r7, #24
 8009496:	4618      	mov	r0, r3
 8009498:	f000 f82e 	bl	80094f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094a0:	e007      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80094a2:	2300      	movs	r3, #0
 80094a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094a6:	e004      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80094a8:	2300      	movs	r3, #0
 80094aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094ac:	e001      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80094ae:	2300      	movs	r3, #0
 80094b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80094b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3740      	adds	r7, #64	@ 0x40
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	58024400 	.word	0x58024400
 80094c0:	03d09000 	.word	0x03d09000
 80094c4:	003d0900 	.word	0x003d0900
 80094c8:	016e3600 	.word	0x016e3600

080094cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80094d0:	f7fe f92e 	bl	8007730 <HAL_RCC_GetHCLKFreq>
 80094d4:	4602      	mov	r2, r0
 80094d6:	4b06      	ldr	r3, [pc, #24]	@ (80094f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80094d8:	6a1b      	ldr	r3, [r3, #32]
 80094da:	091b      	lsrs	r3, r3, #4
 80094dc:	f003 0307 	and.w	r3, r3, #7
 80094e0:	4904      	ldr	r1, [pc, #16]	@ (80094f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80094e2:	5ccb      	ldrb	r3, [r1, r3]
 80094e4:	f003 031f 	and.w	r3, r3, #31
 80094e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	58024400 	.word	0x58024400
 80094f4:	0800d068 	.word	0x0800d068

080094f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b089      	sub	sp, #36	@ 0x24
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009500:	4ba1      	ldr	r3, [pc, #644]	@ (8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009504:	f003 0303 	and.w	r3, r3, #3
 8009508:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800950a:	4b9f      	ldr	r3, [pc, #636]	@ (8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800950c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800950e:	0b1b      	lsrs	r3, r3, #12
 8009510:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009514:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009516:	4b9c      	ldr	r3, [pc, #624]	@ (8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800951a:	091b      	lsrs	r3, r3, #4
 800951c:	f003 0301 	and.w	r3, r3, #1
 8009520:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009522:	4b99      	ldr	r3, [pc, #612]	@ (8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009526:	08db      	lsrs	r3, r3, #3
 8009528:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800952c:	693a      	ldr	r2, [r7, #16]
 800952e:	fb02 f303 	mul.w	r3, r2, r3
 8009532:	ee07 3a90 	vmov	s15, r3
 8009536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800953a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	2b00      	cmp	r3, #0
 8009542:	f000 8111 	beq.w	8009768 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	2b02      	cmp	r3, #2
 800954a:	f000 8083 	beq.w	8009654 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	2b02      	cmp	r3, #2
 8009552:	f200 80a1 	bhi.w	8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009556:	69bb      	ldr	r3, [r7, #24]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d003      	beq.n	8009564 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	2b01      	cmp	r3, #1
 8009560:	d056      	beq.n	8009610 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009562:	e099      	b.n	8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009564:	4b88      	ldr	r3, [pc, #544]	@ (8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 0320 	and.w	r3, r3, #32
 800956c:	2b00      	cmp	r3, #0
 800956e:	d02d      	beq.n	80095cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009570:	4b85      	ldr	r3, [pc, #532]	@ (8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	08db      	lsrs	r3, r3, #3
 8009576:	f003 0303 	and.w	r3, r3, #3
 800957a:	4a84      	ldr	r2, [pc, #528]	@ (800978c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800957c:	fa22 f303 	lsr.w	r3, r2, r3
 8009580:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	ee07 3a90 	vmov	s15, r3
 8009588:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	ee07 3a90 	vmov	s15, r3
 8009592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800959a:	4b7b      	ldr	r3, [pc, #492]	@ (8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800959c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800959e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095a2:	ee07 3a90 	vmov	s15, r3
 80095a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80095ae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009790 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80095b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80095ca:	e087      	b.n	80096dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	ee07 3a90 	vmov	s15, r3
 80095d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095d6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009794 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80095da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095de:	4b6a      	ldr	r3, [pc, #424]	@ (8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095e6:	ee07 3a90 	vmov	s15, r3
 80095ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80095f2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009790 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80095f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800960a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800960e:	e065      	b.n	80096dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	ee07 3a90 	vmov	s15, r3
 8009616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800961a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009798 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800961e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009622:	4b59      	ldr	r3, [pc, #356]	@ (8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800962a:	ee07 3a90 	vmov	s15, r3
 800962e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009632:	ed97 6a03 	vldr	s12, [r7, #12]
 8009636:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009790 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800963a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800963e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009642:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800964a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800964e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009652:	e043      	b.n	80096dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	ee07 3a90 	vmov	s15, r3
 800965a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800965e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800979c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009666:	4b48      	ldr	r3, [pc, #288]	@ (8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800966a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800966e:	ee07 3a90 	vmov	s15, r3
 8009672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009676:	ed97 6a03 	vldr	s12, [r7, #12]
 800967a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009790 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800967e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800968a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800968e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009692:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009696:	e021      	b.n	80096dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	ee07 3a90 	vmov	s15, r3
 800969e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096a2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009798 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80096a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096aa:	4b37      	ldr	r3, [pc, #220]	@ (8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096b2:	ee07 3a90 	vmov	s15, r3
 80096b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80096be:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009790 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80096dc:	4b2a      	ldr	r3, [pc, #168]	@ (8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096e0:	0a5b      	lsrs	r3, r3, #9
 80096e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096e6:	ee07 3a90 	vmov	s15, r3
 80096ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80096f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80096fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009702:	ee17 2a90 	vmov	r2, s15
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800970a:	4b1f      	ldr	r3, [pc, #124]	@ (8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800970c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800970e:	0c1b      	lsrs	r3, r3, #16
 8009710:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009714:	ee07 3a90 	vmov	s15, r3
 8009718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800971c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009720:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009724:	edd7 6a07 	vldr	s13, [r7, #28]
 8009728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800972c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009730:	ee17 2a90 	vmov	r2, s15
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009738:	4b13      	ldr	r3, [pc, #76]	@ (8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800973a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800973c:	0e1b      	lsrs	r3, r3, #24
 800973e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009742:	ee07 3a90 	vmov	s15, r3
 8009746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800974a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800974e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009752:	edd7 6a07 	vldr	s13, [r7, #28]
 8009756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800975a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800975e:	ee17 2a90 	vmov	r2, s15
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009766:	e008      	b.n	800977a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	609a      	str	r2, [r3, #8]
}
 800977a:	bf00      	nop
 800977c:	3724      	adds	r7, #36	@ 0x24
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	58024400 	.word	0x58024400
 800978c:	03d09000 	.word	0x03d09000
 8009790:	46000000 	.word	0x46000000
 8009794:	4c742400 	.word	0x4c742400
 8009798:	4a742400 	.word	0x4a742400
 800979c:	4bb71b00 	.word	0x4bb71b00

080097a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b089      	sub	sp, #36	@ 0x24
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097a8:	4ba1      	ldr	r3, [pc, #644]	@ (8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ac:	f003 0303 	and.w	r3, r3, #3
 80097b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80097b2:	4b9f      	ldr	r3, [pc, #636]	@ (8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097b6:	0d1b      	lsrs	r3, r3, #20
 80097b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80097bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80097be:	4b9c      	ldr	r3, [pc, #624]	@ (8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097c2:	0a1b      	lsrs	r3, r3, #8
 80097c4:	f003 0301 	and.w	r3, r3, #1
 80097c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80097ca:	4b99      	ldr	r3, [pc, #612]	@ (8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097ce:	08db      	lsrs	r3, r3, #3
 80097d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097d4:	693a      	ldr	r2, [r7, #16]
 80097d6:	fb02 f303 	mul.w	r3, r2, r3
 80097da:	ee07 3a90 	vmov	s15, r3
 80097de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	f000 8111 	beq.w	8009a10 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	2b02      	cmp	r3, #2
 80097f2:	f000 8083 	beq.w	80098fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	f200 80a1 	bhi.w	8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d003      	beq.n	800980c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	2b01      	cmp	r3, #1
 8009808:	d056      	beq.n	80098b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800980a:	e099      	b.n	8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800980c:	4b88      	ldr	r3, [pc, #544]	@ (8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f003 0320 	and.w	r3, r3, #32
 8009814:	2b00      	cmp	r3, #0
 8009816:	d02d      	beq.n	8009874 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009818:	4b85      	ldr	r3, [pc, #532]	@ (8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	08db      	lsrs	r3, r3, #3
 800981e:	f003 0303 	and.w	r3, r3, #3
 8009822:	4a84      	ldr	r2, [pc, #528]	@ (8009a34 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009824:	fa22 f303 	lsr.w	r3, r2, r3
 8009828:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	ee07 3a90 	vmov	s15, r3
 8009830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	ee07 3a90 	vmov	s15, r3
 800983a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800983e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009842:	4b7b      	ldr	r3, [pc, #492]	@ (8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800984a:	ee07 3a90 	vmov	s15, r3
 800984e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009852:	ed97 6a03 	vldr	s12, [r7, #12]
 8009856:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009a38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800985a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800985e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009862:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800986a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800986e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009872:	e087      	b.n	8009984 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	ee07 3a90 	vmov	s15, r3
 800987a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800987e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009a3c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009886:	4b6a      	ldr	r3, [pc, #424]	@ (8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800988a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800988e:	ee07 3a90 	vmov	s15, r3
 8009892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009896:	ed97 6a03 	vldr	s12, [r7, #12]
 800989a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009a38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800989e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098b6:	e065      	b.n	8009984 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	ee07 3a90 	vmov	s15, r3
 80098be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098c2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009a40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80098c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ca:	4b59      	ldr	r3, [pc, #356]	@ (8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098d2:	ee07 3a90 	vmov	s15, r3
 80098d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098da:	ed97 6a03 	vldr	s12, [r7, #12]
 80098de:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009a38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80098e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098fa:	e043      	b.n	8009984 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	ee07 3a90 	vmov	s15, r3
 8009902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009906:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009a44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800990a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800990e:	4b48      	ldr	r3, [pc, #288]	@ (8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009916:	ee07 3a90 	vmov	s15, r3
 800991a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800991e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009922:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009a38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800992a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800992e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800993a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800993e:	e021      	b.n	8009984 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	ee07 3a90 	vmov	s15, r3
 8009946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800994a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009a40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800994e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009952:	4b37      	ldr	r3, [pc, #220]	@ (8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800995a:	ee07 3a90 	vmov	s15, r3
 800995e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009962:	ed97 6a03 	vldr	s12, [r7, #12]
 8009966:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009a38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800996a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800996e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009972:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800997a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800997e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009982:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009984:	4b2a      	ldr	r3, [pc, #168]	@ (8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009988:	0a5b      	lsrs	r3, r3, #9
 800998a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800998e:	ee07 3a90 	vmov	s15, r3
 8009992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009996:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800999a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800999e:	edd7 6a07 	vldr	s13, [r7, #28]
 80099a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099aa:	ee17 2a90 	vmov	r2, s15
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80099b2:	4b1f      	ldr	r3, [pc, #124]	@ (8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099b6:	0c1b      	lsrs	r3, r3, #16
 80099b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099bc:	ee07 3a90 	vmov	s15, r3
 80099c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80099c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80099d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099d8:	ee17 2a90 	vmov	r2, s15
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80099e0:	4b13      	ldr	r3, [pc, #76]	@ (8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099e4:	0e1b      	lsrs	r3, r3, #24
 80099e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099ea:	ee07 3a90 	vmov	s15, r3
 80099ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80099f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80099fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a06:	ee17 2a90 	vmov	r2, s15
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009a0e:	e008      	b.n	8009a22 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	609a      	str	r2, [r3, #8]
}
 8009a22:	bf00      	nop
 8009a24:	3724      	adds	r7, #36	@ 0x24
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr
 8009a2e:	bf00      	nop
 8009a30:	58024400 	.word	0x58024400
 8009a34:	03d09000 	.word	0x03d09000
 8009a38:	46000000 	.word	0x46000000
 8009a3c:	4c742400 	.word	0x4c742400
 8009a40:	4a742400 	.word	0x4a742400
 8009a44:	4bb71b00 	.word	0x4bb71b00

08009a48 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b089      	sub	sp, #36	@ 0x24
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a50:	4ba0      	ldr	r3, [pc, #640]	@ (8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a54:	f003 0303 	and.w	r3, r3, #3
 8009a58:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009a5a:	4b9e      	ldr	r3, [pc, #632]	@ (8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a5e:	091b      	lsrs	r3, r3, #4
 8009a60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a64:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009a66:	4b9b      	ldr	r3, [pc, #620]	@ (8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a6a:	f003 0301 	and.w	r3, r3, #1
 8009a6e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009a70:	4b98      	ldr	r3, [pc, #608]	@ (8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a74:	08db      	lsrs	r3, r3, #3
 8009a76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a7a:	693a      	ldr	r2, [r7, #16]
 8009a7c:	fb02 f303 	mul.w	r3, r2, r3
 8009a80:	ee07 3a90 	vmov	s15, r3
 8009a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a88:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	f000 8111 	beq.w	8009cb6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	f000 8083 	beq.w	8009ba2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	f200 80a1 	bhi.w	8009be6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009aa4:	69bb      	ldr	r3, [r7, #24]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d003      	beq.n	8009ab2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d056      	beq.n	8009b5e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009ab0:	e099      	b.n	8009be6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ab2:	4b88      	ldr	r3, [pc, #544]	@ (8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f003 0320 	and.w	r3, r3, #32
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d02d      	beq.n	8009b1a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009abe:	4b85      	ldr	r3, [pc, #532]	@ (8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	08db      	lsrs	r3, r3, #3
 8009ac4:	f003 0303 	and.w	r3, r3, #3
 8009ac8:	4a83      	ldr	r2, [pc, #524]	@ (8009cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009aca:	fa22 f303 	lsr.w	r3, r2, r3
 8009ace:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	ee07 3a90 	vmov	s15, r3
 8009ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	ee07 3a90 	vmov	s15, r3
 8009ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ae4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ae8:	4b7a      	ldr	r3, [pc, #488]	@ (8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009af0:	ee07 3a90 	vmov	s15, r3
 8009af4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009af8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009afc:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009cdc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009b00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b14:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009b18:	e087      	b.n	8009c2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	ee07 3a90 	vmov	s15, r3
 8009b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b24:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009b28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b2c:	4b69      	ldr	r3, [pc, #420]	@ (8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b34:	ee07 3a90 	vmov	s15, r3
 8009b38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b40:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009cdc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009b44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b5c:	e065      	b.n	8009c2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	ee07 3a90 	vmov	s15, r3
 8009b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b68:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009ce4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009b6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b70:	4b58      	ldr	r3, [pc, #352]	@ (8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b78:	ee07 3a90 	vmov	s15, r3
 8009b7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b80:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b84:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009cdc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009b88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ba0:	e043      	b.n	8009c2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	ee07 3a90 	vmov	s15, r3
 8009ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bac:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009bb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bb4:	4b47      	ldr	r3, [pc, #284]	@ (8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bbc:	ee07 3a90 	vmov	s15, r3
 8009bc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bc8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009cdc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009bcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009be0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009be4:	e021      	b.n	8009c2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	ee07 3a90 	vmov	s15, r3
 8009bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bf0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009bf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bf8:	4b36      	ldr	r3, [pc, #216]	@ (8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c00:	ee07 3a90 	vmov	s15, r3
 8009c04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c08:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c0c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009cdc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c28:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c2e:	0a5b      	lsrs	r3, r3, #9
 8009c30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c34:	ee07 3a90 	vmov	s15, r3
 8009c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c44:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c50:	ee17 2a90 	vmov	r2, s15
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009c58:	4b1e      	ldr	r3, [pc, #120]	@ (8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c5c:	0c1b      	lsrs	r3, r3, #16
 8009c5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c62:	ee07 3a90 	vmov	s15, r3
 8009c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c72:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c7e:	ee17 2a90 	vmov	r2, s15
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009c86:	4b13      	ldr	r3, [pc, #76]	@ (8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c8a:	0e1b      	lsrs	r3, r3, #24
 8009c8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c90:	ee07 3a90 	vmov	s15, r3
 8009c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ca0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cac:	ee17 2a90 	vmov	r2, s15
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009cb4:	e008      	b.n	8009cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	609a      	str	r2, [r3, #8]
}
 8009cc8:	bf00      	nop
 8009cca:	3724      	adds	r7, #36	@ 0x24
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr
 8009cd4:	58024400 	.word	0x58024400
 8009cd8:	03d09000 	.word	0x03d09000
 8009cdc:	46000000 	.word	0x46000000
 8009ce0:	4c742400 	.word	0x4c742400
 8009ce4:	4a742400 	.word	0x4a742400
 8009ce8:	4bb71b00 	.word	0x4bb71b00

08009cec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009cfa:	4b53      	ldr	r3, [pc, #332]	@ (8009e48 <RCCEx_PLL2_Config+0x15c>)
 8009cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cfe:	f003 0303 	and.w	r3, r3, #3
 8009d02:	2b03      	cmp	r3, #3
 8009d04:	d101      	bne.n	8009d0a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	e099      	b.n	8009e3e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009d0a:	4b4f      	ldr	r3, [pc, #316]	@ (8009e48 <RCCEx_PLL2_Config+0x15c>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a4e      	ldr	r2, [pc, #312]	@ (8009e48 <RCCEx_PLL2_Config+0x15c>)
 8009d10:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009d14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d16:	f7f9 f965 	bl	8002fe4 <HAL_GetTick>
 8009d1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009d1c:	e008      	b.n	8009d30 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009d1e:	f7f9 f961 	bl	8002fe4 <HAL_GetTick>
 8009d22:	4602      	mov	r2, r0
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	1ad3      	subs	r3, r2, r3
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	d901      	bls.n	8009d30 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	e086      	b.n	8009e3e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009d30:	4b45      	ldr	r3, [pc, #276]	@ (8009e48 <RCCEx_PLL2_Config+0x15c>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d1f0      	bne.n	8009d1e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009d3c:	4b42      	ldr	r3, [pc, #264]	@ (8009e48 <RCCEx_PLL2_Config+0x15c>)
 8009d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d40:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	031b      	lsls	r3, r3, #12
 8009d4a:	493f      	ldr	r1, [pc, #252]	@ (8009e48 <RCCEx_PLL2_Config+0x15c>)
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	3b01      	subs	r3, #1
 8009d56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	025b      	lsls	r3, r3, #9
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	431a      	orrs	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	041b      	lsls	r3, r3, #16
 8009d6e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009d72:	431a      	orrs	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	3b01      	subs	r3, #1
 8009d7a:	061b      	lsls	r3, r3, #24
 8009d7c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009d80:	4931      	ldr	r1, [pc, #196]	@ (8009e48 <RCCEx_PLL2_Config+0x15c>)
 8009d82:	4313      	orrs	r3, r2
 8009d84:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009d86:	4b30      	ldr	r3, [pc, #192]	@ (8009e48 <RCCEx_PLL2_Config+0x15c>)
 8009d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d8a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	695b      	ldr	r3, [r3, #20]
 8009d92:	492d      	ldr	r1, [pc, #180]	@ (8009e48 <RCCEx_PLL2_Config+0x15c>)
 8009d94:	4313      	orrs	r3, r2
 8009d96:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009d98:	4b2b      	ldr	r3, [pc, #172]	@ (8009e48 <RCCEx_PLL2_Config+0x15c>)
 8009d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d9c:	f023 0220 	bic.w	r2, r3, #32
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	699b      	ldr	r3, [r3, #24]
 8009da4:	4928      	ldr	r1, [pc, #160]	@ (8009e48 <RCCEx_PLL2_Config+0x15c>)
 8009da6:	4313      	orrs	r3, r2
 8009da8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009daa:	4b27      	ldr	r3, [pc, #156]	@ (8009e48 <RCCEx_PLL2_Config+0x15c>)
 8009dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dae:	4a26      	ldr	r2, [pc, #152]	@ (8009e48 <RCCEx_PLL2_Config+0x15c>)
 8009db0:	f023 0310 	bic.w	r3, r3, #16
 8009db4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009db6:	4b24      	ldr	r3, [pc, #144]	@ (8009e48 <RCCEx_PLL2_Config+0x15c>)
 8009db8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009dba:	4b24      	ldr	r3, [pc, #144]	@ (8009e4c <RCCEx_PLL2_Config+0x160>)
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	69d2      	ldr	r2, [r2, #28]
 8009dc2:	00d2      	lsls	r2, r2, #3
 8009dc4:	4920      	ldr	r1, [pc, #128]	@ (8009e48 <RCCEx_PLL2_Config+0x15c>)
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009dca:	4b1f      	ldr	r3, [pc, #124]	@ (8009e48 <RCCEx_PLL2_Config+0x15c>)
 8009dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dce:	4a1e      	ldr	r2, [pc, #120]	@ (8009e48 <RCCEx_PLL2_Config+0x15c>)
 8009dd0:	f043 0310 	orr.w	r3, r3, #16
 8009dd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d106      	bne.n	8009dea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8009e48 <RCCEx_PLL2_Config+0x15c>)
 8009dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009de0:	4a19      	ldr	r2, [pc, #100]	@ (8009e48 <RCCEx_PLL2_Config+0x15c>)
 8009de2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009de6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009de8:	e00f      	b.n	8009e0a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d106      	bne.n	8009dfe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009df0:	4b15      	ldr	r3, [pc, #84]	@ (8009e48 <RCCEx_PLL2_Config+0x15c>)
 8009df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009df4:	4a14      	ldr	r2, [pc, #80]	@ (8009e48 <RCCEx_PLL2_Config+0x15c>)
 8009df6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009dfa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009dfc:	e005      	b.n	8009e0a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009dfe:	4b12      	ldr	r3, [pc, #72]	@ (8009e48 <RCCEx_PLL2_Config+0x15c>)
 8009e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e02:	4a11      	ldr	r2, [pc, #68]	@ (8009e48 <RCCEx_PLL2_Config+0x15c>)
 8009e04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009e08:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8009e48 <RCCEx_PLL2_Config+0x15c>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a0e      	ldr	r2, [pc, #56]	@ (8009e48 <RCCEx_PLL2_Config+0x15c>)
 8009e10:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009e14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e16:	f7f9 f8e5 	bl	8002fe4 <HAL_GetTick>
 8009e1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009e1c:	e008      	b.n	8009e30 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009e1e:	f7f9 f8e1 	bl	8002fe4 <HAL_GetTick>
 8009e22:	4602      	mov	r2, r0
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	1ad3      	subs	r3, r2, r3
 8009e28:	2b02      	cmp	r3, #2
 8009e2a:	d901      	bls.n	8009e30 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009e2c:	2303      	movs	r3, #3
 8009e2e:	e006      	b.n	8009e3e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009e30:	4b05      	ldr	r3, [pc, #20]	@ (8009e48 <RCCEx_PLL2_Config+0x15c>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d0f0      	beq.n	8009e1e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	58024400 	.word	0x58024400
 8009e4c:	ffff0007 	.word	0xffff0007

08009e50 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009e5e:	4b53      	ldr	r3, [pc, #332]	@ (8009fac <RCCEx_PLL3_Config+0x15c>)
 8009e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e62:	f003 0303 	and.w	r3, r3, #3
 8009e66:	2b03      	cmp	r3, #3
 8009e68:	d101      	bne.n	8009e6e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e099      	b.n	8009fa2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009e6e:	4b4f      	ldr	r3, [pc, #316]	@ (8009fac <RCCEx_PLL3_Config+0x15c>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a4e      	ldr	r2, [pc, #312]	@ (8009fac <RCCEx_PLL3_Config+0x15c>)
 8009e74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e7a:	f7f9 f8b3 	bl	8002fe4 <HAL_GetTick>
 8009e7e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009e80:	e008      	b.n	8009e94 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009e82:	f7f9 f8af 	bl	8002fe4 <HAL_GetTick>
 8009e86:	4602      	mov	r2, r0
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	2b02      	cmp	r3, #2
 8009e8e:	d901      	bls.n	8009e94 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009e90:	2303      	movs	r3, #3
 8009e92:	e086      	b.n	8009fa2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009e94:	4b45      	ldr	r3, [pc, #276]	@ (8009fac <RCCEx_PLL3_Config+0x15c>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d1f0      	bne.n	8009e82 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009ea0:	4b42      	ldr	r3, [pc, #264]	@ (8009fac <RCCEx_PLL3_Config+0x15c>)
 8009ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ea4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	051b      	lsls	r3, r3, #20
 8009eae:	493f      	ldr	r1, [pc, #252]	@ (8009fac <RCCEx_PLL3_Config+0x15c>)
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	628b      	str	r3, [r1, #40]	@ 0x28
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	025b      	lsls	r3, r3, #9
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	431a      	orrs	r2, r3
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	041b      	lsls	r3, r3, #16
 8009ed2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009ed6:	431a      	orrs	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	691b      	ldr	r3, [r3, #16]
 8009edc:	3b01      	subs	r3, #1
 8009ede:	061b      	lsls	r3, r3, #24
 8009ee0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009ee4:	4931      	ldr	r1, [pc, #196]	@ (8009fac <RCCEx_PLL3_Config+0x15c>)
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009eea:	4b30      	ldr	r3, [pc, #192]	@ (8009fac <RCCEx_PLL3_Config+0x15c>)
 8009eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	695b      	ldr	r3, [r3, #20]
 8009ef6:	492d      	ldr	r1, [pc, #180]	@ (8009fac <RCCEx_PLL3_Config+0x15c>)
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009efc:	4b2b      	ldr	r3, [pc, #172]	@ (8009fac <RCCEx_PLL3_Config+0x15c>)
 8009efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f00:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	699b      	ldr	r3, [r3, #24]
 8009f08:	4928      	ldr	r1, [pc, #160]	@ (8009fac <RCCEx_PLL3_Config+0x15c>)
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009f0e:	4b27      	ldr	r3, [pc, #156]	@ (8009fac <RCCEx_PLL3_Config+0x15c>)
 8009f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f12:	4a26      	ldr	r2, [pc, #152]	@ (8009fac <RCCEx_PLL3_Config+0x15c>)
 8009f14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009f1a:	4b24      	ldr	r3, [pc, #144]	@ (8009fac <RCCEx_PLL3_Config+0x15c>)
 8009f1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f1e:	4b24      	ldr	r3, [pc, #144]	@ (8009fb0 <RCCEx_PLL3_Config+0x160>)
 8009f20:	4013      	ands	r3, r2
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	69d2      	ldr	r2, [r2, #28]
 8009f26:	00d2      	lsls	r2, r2, #3
 8009f28:	4920      	ldr	r1, [pc, #128]	@ (8009fac <RCCEx_PLL3_Config+0x15c>)
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8009fac <RCCEx_PLL3_Config+0x15c>)
 8009f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f32:	4a1e      	ldr	r2, [pc, #120]	@ (8009fac <RCCEx_PLL3_Config+0x15c>)
 8009f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d106      	bne.n	8009f4e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009f40:	4b1a      	ldr	r3, [pc, #104]	@ (8009fac <RCCEx_PLL3_Config+0x15c>)
 8009f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f44:	4a19      	ldr	r2, [pc, #100]	@ (8009fac <RCCEx_PLL3_Config+0x15c>)
 8009f46:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009f4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009f4c:	e00f      	b.n	8009f6e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d106      	bne.n	8009f62 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009f54:	4b15      	ldr	r3, [pc, #84]	@ (8009fac <RCCEx_PLL3_Config+0x15c>)
 8009f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f58:	4a14      	ldr	r2, [pc, #80]	@ (8009fac <RCCEx_PLL3_Config+0x15c>)
 8009f5a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009f5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009f60:	e005      	b.n	8009f6e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009f62:	4b12      	ldr	r3, [pc, #72]	@ (8009fac <RCCEx_PLL3_Config+0x15c>)
 8009f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f66:	4a11      	ldr	r2, [pc, #68]	@ (8009fac <RCCEx_PLL3_Config+0x15c>)
 8009f68:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009f6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8009fac <RCCEx_PLL3_Config+0x15c>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4a0e      	ldr	r2, [pc, #56]	@ (8009fac <RCCEx_PLL3_Config+0x15c>)
 8009f74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f7a:	f7f9 f833 	bl	8002fe4 <HAL_GetTick>
 8009f7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009f80:	e008      	b.n	8009f94 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009f82:	f7f9 f82f 	bl	8002fe4 <HAL_GetTick>
 8009f86:	4602      	mov	r2, r0
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	1ad3      	subs	r3, r2, r3
 8009f8c:	2b02      	cmp	r3, #2
 8009f8e:	d901      	bls.n	8009f94 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009f90:	2303      	movs	r3, #3
 8009f92:	e006      	b.n	8009fa2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009f94:	4b05      	ldr	r3, [pc, #20]	@ (8009fac <RCCEx_PLL3_Config+0x15c>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d0f0      	beq.n	8009f82 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	58024400 	.word	0x58024400
 8009fb0:	ffff0007 	.word	0xffff0007

08009fb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d101      	bne.n	8009fc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e049      	b.n	800a05a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d106      	bne.n	8009fe0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f7f8 fda4 	bl	8002b28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	3304      	adds	r3, #4
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	4610      	mov	r0, r2
 8009ff4:	f000 fac6 	bl	800a584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2201      	movs	r2, #1
 800a004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2201      	movs	r2, #1
 800a014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2201      	movs	r2, #1
 800a01c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2201      	movs	r2, #1
 800a034:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2201      	movs	r2, #1
 800a03c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2201      	movs	r2, #1
 800a044:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2201      	movs	r2, #1
 800a04c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2201      	movs	r2, #1
 800a054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3708      	adds	r7, #8
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b082      	sub	sp, #8
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d101      	bne.n	800a074 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	e049      	b.n	800a108 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d106      	bne.n	800a08e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 f841 	bl	800a110 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2202      	movs	r2, #2
 800a092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	3304      	adds	r3, #4
 800a09e:	4619      	mov	r1, r3
 800a0a0:	4610      	mov	r0, r2
 800a0a2:	f000 fa6f 	bl	800a584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2201      	movs	r2, #1
 800a102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a106:	2300      	movs	r3, #0
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3708      	adds	r7, #8
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d109      	bne.n	800a148 <HAL_TIM_PWM_Start+0x24>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	bf14      	ite	ne
 800a140:	2301      	movne	r3, #1
 800a142:	2300      	moveq	r3, #0
 800a144:	b2db      	uxtb	r3, r3
 800a146:	e03c      	b.n	800a1c2 <HAL_TIM_PWM_Start+0x9e>
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	2b04      	cmp	r3, #4
 800a14c:	d109      	bne.n	800a162 <HAL_TIM_PWM_Start+0x3e>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a154:	b2db      	uxtb	r3, r3
 800a156:	2b01      	cmp	r3, #1
 800a158:	bf14      	ite	ne
 800a15a:	2301      	movne	r3, #1
 800a15c:	2300      	moveq	r3, #0
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	e02f      	b.n	800a1c2 <HAL_TIM_PWM_Start+0x9e>
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	2b08      	cmp	r3, #8
 800a166:	d109      	bne.n	800a17c <HAL_TIM_PWM_Start+0x58>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	2b01      	cmp	r3, #1
 800a172:	bf14      	ite	ne
 800a174:	2301      	movne	r3, #1
 800a176:	2300      	moveq	r3, #0
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	e022      	b.n	800a1c2 <HAL_TIM_PWM_Start+0x9e>
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	2b0c      	cmp	r3, #12
 800a180:	d109      	bne.n	800a196 <HAL_TIM_PWM_Start+0x72>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a188:	b2db      	uxtb	r3, r3
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	bf14      	ite	ne
 800a18e:	2301      	movne	r3, #1
 800a190:	2300      	moveq	r3, #0
 800a192:	b2db      	uxtb	r3, r3
 800a194:	e015      	b.n	800a1c2 <HAL_TIM_PWM_Start+0x9e>
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	2b10      	cmp	r3, #16
 800a19a:	d109      	bne.n	800a1b0 <HAL_TIM_PWM_Start+0x8c>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	bf14      	ite	ne
 800a1a8:	2301      	movne	r3, #1
 800a1aa:	2300      	moveq	r3, #0
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	e008      	b.n	800a1c2 <HAL_TIM_PWM_Start+0x9e>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	bf14      	ite	ne
 800a1bc:	2301      	movne	r3, #1
 800a1be:	2300      	moveq	r3, #0
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d001      	beq.n	800a1ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e0ab      	b.n	800a322 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d104      	bne.n	800a1da <HAL_TIM_PWM_Start+0xb6>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2202      	movs	r2, #2
 800a1d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a1d8:	e023      	b.n	800a222 <HAL_TIM_PWM_Start+0xfe>
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	2b04      	cmp	r3, #4
 800a1de:	d104      	bne.n	800a1ea <HAL_TIM_PWM_Start+0xc6>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2202      	movs	r2, #2
 800a1e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a1e8:	e01b      	b.n	800a222 <HAL_TIM_PWM_Start+0xfe>
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	2b08      	cmp	r3, #8
 800a1ee:	d104      	bne.n	800a1fa <HAL_TIM_PWM_Start+0xd6>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2202      	movs	r2, #2
 800a1f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a1f8:	e013      	b.n	800a222 <HAL_TIM_PWM_Start+0xfe>
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	2b0c      	cmp	r3, #12
 800a1fe:	d104      	bne.n	800a20a <HAL_TIM_PWM_Start+0xe6>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2202      	movs	r2, #2
 800a204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a208:	e00b      	b.n	800a222 <HAL_TIM_PWM_Start+0xfe>
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	2b10      	cmp	r3, #16
 800a20e:	d104      	bne.n	800a21a <HAL_TIM_PWM_Start+0xf6>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2202      	movs	r2, #2
 800a214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a218:	e003      	b.n	800a222 <HAL_TIM_PWM_Start+0xfe>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2202      	movs	r2, #2
 800a21e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2201      	movs	r2, #1
 800a228:	6839      	ldr	r1, [r7, #0]
 800a22a:	4618      	mov	r0, r3
 800a22c:	f000 fd2c 	bl	800ac88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a3d      	ldr	r2, [pc, #244]	@ (800a32c <HAL_TIM_PWM_Start+0x208>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d013      	beq.n	800a262 <HAL_TIM_PWM_Start+0x13e>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4a3c      	ldr	r2, [pc, #240]	@ (800a330 <HAL_TIM_PWM_Start+0x20c>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d00e      	beq.n	800a262 <HAL_TIM_PWM_Start+0x13e>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a3a      	ldr	r2, [pc, #232]	@ (800a334 <HAL_TIM_PWM_Start+0x210>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d009      	beq.n	800a262 <HAL_TIM_PWM_Start+0x13e>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a39      	ldr	r2, [pc, #228]	@ (800a338 <HAL_TIM_PWM_Start+0x214>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d004      	beq.n	800a262 <HAL_TIM_PWM_Start+0x13e>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a37      	ldr	r2, [pc, #220]	@ (800a33c <HAL_TIM_PWM_Start+0x218>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d101      	bne.n	800a266 <HAL_TIM_PWM_Start+0x142>
 800a262:	2301      	movs	r3, #1
 800a264:	e000      	b.n	800a268 <HAL_TIM_PWM_Start+0x144>
 800a266:	2300      	movs	r3, #0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d007      	beq.n	800a27c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a27a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a2a      	ldr	r2, [pc, #168]	@ (800a32c <HAL_TIM_PWM_Start+0x208>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d02c      	beq.n	800a2e0 <HAL_TIM_PWM_Start+0x1bc>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a28e:	d027      	beq.n	800a2e0 <HAL_TIM_PWM_Start+0x1bc>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a2a      	ldr	r2, [pc, #168]	@ (800a340 <HAL_TIM_PWM_Start+0x21c>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d022      	beq.n	800a2e0 <HAL_TIM_PWM_Start+0x1bc>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a29      	ldr	r2, [pc, #164]	@ (800a344 <HAL_TIM_PWM_Start+0x220>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d01d      	beq.n	800a2e0 <HAL_TIM_PWM_Start+0x1bc>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a27      	ldr	r2, [pc, #156]	@ (800a348 <HAL_TIM_PWM_Start+0x224>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d018      	beq.n	800a2e0 <HAL_TIM_PWM_Start+0x1bc>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a1f      	ldr	r2, [pc, #124]	@ (800a330 <HAL_TIM_PWM_Start+0x20c>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d013      	beq.n	800a2e0 <HAL_TIM_PWM_Start+0x1bc>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a23      	ldr	r2, [pc, #140]	@ (800a34c <HAL_TIM_PWM_Start+0x228>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d00e      	beq.n	800a2e0 <HAL_TIM_PWM_Start+0x1bc>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a1b      	ldr	r2, [pc, #108]	@ (800a334 <HAL_TIM_PWM_Start+0x210>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d009      	beq.n	800a2e0 <HAL_TIM_PWM_Start+0x1bc>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a1f      	ldr	r2, [pc, #124]	@ (800a350 <HAL_TIM_PWM_Start+0x22c>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d004      	beq.n	800a2e0 <HAL_TIM_PWM_Start+0x1bc>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a1e      	ldr	r2, [pc, #120]	@ (800a354 <HAL_TIM_PWM_Start+0x230>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d115      	bne.n	800a30c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	689a      	ldr	r2, [r3, #8]
 800a2e6:	4b1c      	ldr	r3, [pc, #112]	@ (800a358 <HAL_TIM_PWM_Start+0x234>)
 800a2e8:	4013      	ands	r3, r2
 800a2ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2b06      	cmp	r3, #6
 800a2f0:	d015      	beq.n	800a31e <HAL_TIM_PWM_Start+0x1fa>
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2f8:	d011      	beq.n	800a31e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f042 0201 	orr.w	r2, r2, #1
 800a308:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a30a:	e008      	b.n	800a31e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f042 0201 	orr.w	r2, r2, #1
 800a31a:	601a      	str	r2, [r3, #0]
 800a31c:	e000      	b.n	800a320 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a31e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a320:	2300      	movs	r3, #0
}
 800a322:	4618      	mov	r0, r3
 800a324:	3710      	adds	r7, #16
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	40010000 	.word	0x40010000
 800a330:	40010400 	.word	0x40010400
 800a334:	40014000 	.word	0x40014000
 800a338:	40014400 	.word	0x40014400
 800a33c:	40014800 	.word	0x40014800
 800a340:	40000400 	.word	0x40000400
 800a344:	40000800 	.word	0x40000800
 800a348:	40000c00 	.word	0x40000c00
 800a34c:	40001800 	.word	0x40001800
 800a350:	4000e000 	.word	0x4000e000
 800a354:	4000e400 	.word	0x4000e400
 800a358:	00010007 	.word	0x00010007

0800a35c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b086      	sub	sp, #24
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a368:	2300      	movs	r3, #0
 800a36a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a372:	2b01      	cmp	r3, #1
 800a374:	d101      	bne.n	800a37a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a376:	2302      	movs	r3, #2
 800a378:	e0ff      	b.n	800a57a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2201      	movs	r2, #1
 800a37e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2b14      	cmp	r3, #20
 800a386:	f200 80f0 	bhi.w	800a56a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a38a:	a201      	add	r2, pc, #4	@ (adr r2, 800a390 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a390:	0800a3e5 	.word	0x0800a3e5
 800a394:	0800a56b 	.word	0x0800a56b
 800a398:	0800a56b 	.word	0x0800a56b
 800a39c:	0800a56b 	.word	0x0800a56b
 800a3a0:	0800a425 	.word	0x0800a425
 800a3a4:	0800a56b 	.word	0x0800a56b
 800a3a8:	0800a56b 	.word	0x0800a56b
 800a3ac:	0800a56b 	.word	0x0800a56b
 800a3b0:	0800a467 	.word	0x0800a467
 800a3b4:	0800a56b 	.word	0x0800a56b
 800a3b8:	0800a56b 	.word	0x0800a56b
 800a3bc:	0800a56b 	.word	0x0800a56b
 800a3c0:	0800a4a7 	.word	0x0800a4a7
 800a3c4:	0800a56b 	.word	0x0800a56b
 800a3c8:	0800a56b 	.word	0x0800a56b
 800a3cc:	0800a56b 	.word	0x0800a56b
 800a3d0:	0800a4e9 	.word	0x0800a4e9
 800a3d4:	0800a56b 	.word	0x0800a56b
 800a3d8:	0800a56b 	.word	0x0800a56b
 800a3dc:	0800a56b 	.word	0x0800a56b
 800a3e0:	0800a529 	.word	0x0800a529
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	68b9      	ldr	r1, [r7, #8]
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f000 f976 	bl	800a6dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	699a      	ldr	r2, [r3, #24]
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f042 0208 	orr.w	r2, r2, #8
 800a3fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	699a      	ldr	r2, [r3, #24]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f022 0204 	bic.w	r2, r2, #4
 800a40e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	6999      	ldr	r1, [r3, #24]
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	691a      	ldr	r2, [r3, #16]
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	430a      	orrs	r2, r1
 800a420:	619a      	str	r2, [r3, #24]
      break;
 800a422:	e0a5      	b.n	800a570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68b9      	ldr	r1, [r7, #8]
 800a42a:	4618      	mov	r0, r3
 800a42c:	f000 f9e6 	bl	800a7fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	699a      	ldr	r2, [r3, #24]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a43e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	699a      	ldr	r2, [r3, #24]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a44e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	6999      	ldr	r1, [r3, #24]
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	691b      	ldr	r3, [r3, #16]
 800a45a:	021a      	lsls	r2, r3, #8
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	430a      	orrs	r2, r1
 800a462:	619a      	str	r2, [r3, #24]
      break;
 800a464:	e084      	b.n	800a570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	68b9      	ldr	r1, [r7, #8]
 800a46c:	4618      	mov	r0, r3
 800a46e:	f000 fa4f 	bl	800a910 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	69da      	ldr	r2, [r3, #28]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f042 0208 	orr.w	r2, r2, #8
 800a480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	69da      	ldr	r2, [r3, #28]
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f022 0204 	bic.w	r2, r2, #4
 800a490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	69d9      	ldr	r1, [r3, #28]
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	691a      	ldr	r2, [r3, #16]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	430a      	orrs	r2, r1
 800a4a2:	61da      	str	r2, [r3, #28]
      break;
 800a4a4:	e064      	b.n	800a570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68b9      	ldr	r1, [r7, #8]
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f000 fab7 	bl	800aa20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	69da      	ldr	r2, [r3, #28]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a4c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	69da      	ldr	r2, [r3, #28]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a4d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	69d9      	ldr	r1, [r3, #28]
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	021a      	lsls	r2, r3, #8
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	430a      	orrs	r2, r1
 800a4e4:	61da      	str	r2, [r3, #28]
      break;
 800a4e6:	e043      	b.n	800a570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	68b9      	ldr	r1, [r7, #8]
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f000 fb00 	bl	800aaf4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f042 0208 	orr.w	r2, r2, #8
 800a502:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f022 0204 	bic.w	r2, r2, #4
 800a512:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	691a      	ldr	r2, [r3, #16]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	430a      	orrs	r2, r1
 800a524:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a526:	e023      	b.n	800a570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68b9      	ldr	r1, [r7, #8]
 800a52e:	4618      	mov	r0, r3
 800a530:	f000 fb44 	bl	800abbc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a542:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a552:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	691b      	ldr	r3, [r3, #16]
 800a55e:	021a      	lsls	r2, r3, #8
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	430a      	orrs	r2, r1
 800a566:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a568:	e002      	b.n	800a570 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a56a:	2301      	movs	r3, #1
 800a56c:	75fb      	strb	r3, [r7, #23]
      break;
 800a56e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2200      	movs	r2, #0
 800a574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a578:	7dfb      	ldrb	r3, [r7, #23]
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3718      	adds	r7, #24
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop

0800a584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a584:	b480      	push	{r7}
 800a586:	b085      	sub	sp, #20
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	4a47      	ldr	r2, [pc, #284]	@ (800a6b4 <TIM_Base_SetConfig+0x130>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d013      	beq.n	800a5c4 <TIM_Base_SetConfig+0x40>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5a2:	d00f      	beq.n	800a5c4 <TIM_Base_SetConfig+0x40>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	4a44      	ldr	r2, [pc, #272]	@ (800a6b8 <TIM_Base_SetConfig+0x134>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d00b      	beq.n	800a5c4 <TIM_Base_SetConfig+0x40>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	4a43      	ldr	r2, [pc, #268]	@ (800a6bc <TIM_Base_SetConfig+0x138>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d007      	beq.n	800a5c4 <TIM_Base_SetConfig+0x40>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4a42      	ldr	r2, [pc, #264]	@ (800a6c0 <TIM_Base_SetConfig+0x13c>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d003      	beq.n	800a5c4 <TIM_Base_SetConfig+0x40>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	4a41      	ldr	r2, [pc, #260]	@ (800a6c4 <TIM_Base_SetConfig+0x140>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d108      	bne.n	800a5d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	4a36      	ldr	r2, [pc, #216]	@ (800a6b4 <TIM_Base_SetConfig+0x130>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d027      	beq.n	800a62e <TIM_Base_SetConfig+0xaa>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5e4:	d023      	beq.n	800a62e <TIM_Base_SetConfig+0xaa>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	4a33      	ldr	r2, [pc, #204]	@ (800a6b8 <TIM_Base_SetConfig+0x134>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d01f      	beq.n	800a62e <TIM_Base_SetConfig+0xaa>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	4a32      	ldr	r2, [pc, #200]	@ (800a6bc <TIM_Base_SetConfig+0x138>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d01b      	beq.n	800a62e <TIM_Base_SetConfig+0xaa>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	4a31      	ldr	r2, [pc, #196]	@ (800a6c0 <TIM_Base_SetConfig+0x13c>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d017      	beq.n	800a62e <TIM_Base_SetConfig+0xaa>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	4a30      	ldr	r2, [pc, #192]	@ (800a6c4 <TIM_Base_SetConfig+0x140>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d013      	beq.n	800a62e <TIM_Base_SetConfig+0xaa>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	4a2f      	ldr	r2, [pc, #188]	@ (800a6c8 <TIM_Base_SetConfig+0x144>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d00f      	beq.n	800a62e <TIM_Base_SetConfig+0xaa>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	4a2e      	ldr	r2, [pc, #184]	@ (800a6cc <TIM_Base_SetConfig+0x148>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d00b      	beq.n	800a62e <TIM_Base_SetConfig+0xaa>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	4a2d      	ldr	r2, [pc, #180]	@ (800a6d0 <TIM_Base_SetConfig+0x14c>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d007      	beq.n	800a62e <TIM_Base_SetConfig+0xaa>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4a2c      	ldr	r2, [pc, #176]	@ (800a6d4 <TIM_Base_SetConfig+0x150>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d003      	beq.n	800a62e <TIM_Base_SetConfig+0xaa>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4a2b      	ldr	r2, [pc, #172]	@ (800a6d8 <TIM_Base_SetConfig+0x154>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d108      	bne.n	800a640 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	68fa      	ldr	r2, [r7, #12]
 800a63c:	4313      	orrs	r3, r2
 800a63e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	695b      	ldr	r3, [r3, #20]
 800a64a:	4313      	orrs	r3, r2
 800a64c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	689a      	ldr	r2, [r3, #8]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	4a14      	ldr	r2, [pc, #80]	@ (800a6b4 <TIM_Base_SetConfig+0x130>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d00f      	beq.n	800a686 <TIM_Base_SetConfig+0x102>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	4a16      	ldr	r2, [pc, #88]	@ (800a6c4 <TIM_Base_SetConfig+0x140>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d00b      	beq.n	800a686 <TIM_Base_SetConfig+0x102>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	4a15      	ldr	r2, [pc, #84]	@ (800a6c8 <TIM_Base_SetConfig+0x144>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d007      	beq.n	800a686 <TIM_Base_SetConfig+0x102>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	4a14      	ldr	r2, [pc, #80]	@ (800a6cc <TIM_Base_SetConfig+0x148>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d003      	beq.n	800a686 <TIM_Base_SetConfig+0x102>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	4a13      	ldr	r2, [pc, #76]	@ (800a6d0 <TIM_Base_SetConfig+0x14c>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d103      	bne.n	800a68e <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	691a      	ldr	r2, [r3, #16]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f043 0204 	orr.w	r2, r3, #4
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2201      	movs	r2, #1
 800a69e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	601a      	str	r2, [r3, #0]
}
 800a6a6:	bf00      	nop
 800a6a8:	3714      	adds	r7, #20
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
 800a6b2:	bf00      	nop
 800a6b4:	40010000 	.word	0x40010000
 800a6b8:	40000400 	.word	0x40000400
 800a6bc:	40000800 	.word	0x40000800
 800a6c0:	40000c00 	.word	0x40000c00
 800a6c4:	40010400 	.word	0x40010400
 800a6c8:	40014000 	.word	0x40014000
 800a6cc:	40014400 	.word	0x40014400
 800a6d0:	40014800 	.word	0x40014800
 800a6d4:	4000e000 	.word	0x4000e000
 800a6d8:	4000e400 	.word	0x4000e400

0800a6dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b087      	sub	sp, #28
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a1b      	ldr	r3, [r3, #32]
 800a6ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6a1b      	ldr	r3, [r3, #32]
 800a6f0:	f023 0201 	bic.w	r2, r3, #1
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	699b      	ldr	r3, [r3, #24]
 800a702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a704:	68fa      	ldr	r2, [r7, #12]
 800a706:	4b37      	ldr	r3, [pc, #220]	@ (800a7e4 <TIM_OC1_SetConfig+0x108>)
 800a708:	4013      	ands	r3, r2
 800a70a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f023 0303 	bic.w	r3, r3, #3
 800a712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	4313      	orrs	r3, r2
 800a71c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	f023 0302 	bic.w	r3, r3, #2
 800a724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	697a      	ldr	r2, [r7, #20]
 800a72c:	4313      	orrs	r3, r2
 800a72e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4a2d      	ldr	r2, [pc, #180]	@ (800a7e8 <TIM_OC1_SetConfig+0x10c>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d00f      	beq.n	800a758 <TIM_OC1_SetConfig+0x7c>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	4a2c      	ldr	r2, [pc, #176]	@ (800a7ec <TIM_OC1_SetConfig+0x110>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d00b      	beq.n	800a758 <TIM_OC1_SetConfig+0x7c>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4a2b      	ldr	r2, [pc, #172]	@ (800a7f0 <TIM_OC1_SetConfig+0x114>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d007      	beq.n	800a758 <TIM_OC1_SetConfig+0x7c>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	4a2a      	ldr	r2, [pc, #168]	@ (800a7f4 <TIM_OC1_SetConfig+0x118>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d003      	beq.n	800a758 <TIM_OC1_SetConfig+0x7c>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4a29      	ldr	r2, [pc, #164]	@ (800a7f8 <TIM_OC1_SetConfig+0x11c>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d10c      	bne.n	800a772 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	f023 0308 	bic.w	r3, r3, #8
 800a75e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	697a      	ldr	r2, [r7, #20]
 800a766:	4313      	orrs	r3, r2
 800a768:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	f023 0304 	bic.w	r3, r3, #4
 800a770:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	4a1c      	ldr	r2, [pc, #112]	@ (800a7e8 <TIM_OC1_SetConfig+0x10c>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d00f      	beq.n	800a79a <TIM_OC1_SetConfig+0xbe>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	4a1b      	ldr	r2, [pc, #108]	@ (800a7ec <TIM_OC1_SetConfig+0x110>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d00b      	beq.n	800a79a <TIM_OC1_SetConfig+0xbe>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	4a1a      	ldr	r2, [pc, #104]	@ (800a7f0 <TIM_OC1_SetConfig+0x114>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d007      	beq.n	800a79a <TIM_OC1_SetConfig+0xbe>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4a19      	ldr	r2, [pc, #100]	@ (800a7f4 <TIM_OC1_SetConfig+0x118>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d003      	beq.n	800a79a <TIM_OC1_SetConfig+0xbe>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4a18      	ldr	r2, [pc, #96]	@ (800a7f8 <TIM_OC1_SetConfig+0x11c>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d111      	bne.n	800a7be <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a7a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a7a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	695b      	ldr	r3, [r3, #20]
 800a7ae:	693a      	ldr	r2, [r7, #16]
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	699b      	ldr	r3, [r3, #24]
 800a7b8:	693a      	ldr	r2, [r7, #16]
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	693a      	ldr	r2, [r7, #16]
 800a7c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	68fa      	ldr	r2, [r7, #12]
 800a7c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	685a      	ldr	r2, [r3, #4]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	697a      	ldr	r2, [r7, #20]
 800a7d6:	621a      	str	r2, [r3, #32]
}
 800a7d8:	bf00      	nop
 800a7da:	371c      	adds	r7, #28
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr
 800a7e4:	fffeff8f 	.word	0xfffeff8f
 800a7e8:	40010000 	.word	0x40010000
 800a7ec:	40010400 	.word	0x40010400
 800a7f0:	40014000 	.word	0x40014000
 800a7f4:	40014400 	.word	0x40014400
 800a7f8:	40014800 	.word	0x40014800

0800a7fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b087      	sub	sp, #28
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6a1b      	ldr	r3, [r3, #32]
 800a80a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6a1b      	ldr	r3, [r3, #32]
 800a810:	f023 0210 	bic.w	r2, r3, #16
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	699b      	ldr	r3, [r3, #24]
 800a822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a824:	68fa      	ldr	r2, [r7, #12]
 800a826:	4b34      	ldr	r3, [pc, #208]	@ (800a8f8 <TIM_OC2_SetConfig+0xfc>)
 800a828:	4013      	ands	r3, r2
 800a82a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	021b      	lsls	r3, r3, #8
 800a83a:	68fa      	ldr	r2, [r7, #12]
 800a83c:	4313      	orrs	r3, r2
 800a83e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	f023 0320 	bic.w	r3, r3, #32
 800a846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	011b      	lsls	r3, r3, #4
 800a84e:	697a      	ldr	r2, [r7, #20]
 800a850:	4313      	orrs	r3, r2
 800a852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	4a29      	ldr	r2, [pc, #164]	@ (800a8fc <TIM_OC2_SetConfig+0x100>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d003      	beq.n	800a864 <TIM_OC2_SetConfig+0x68>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4a28      	ldr	r2, [pc, #160]	@ (800a900 <TIM_OC2_SetConfig+0x104>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d10d      	bne.n	800a880 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a86a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	011b      	lsls	r3, r3, #4
 800a872:	697a      	ldr	r2, [r7, #20]
 800a874:	4313      	orrs	r3, r2
 800a876:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a87e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	4a1e      	ldr	r2, [pc, #120]	@ (800a8fc <TIM_OC2_SetConfig+0x100>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d00f      	beq.n	800a8a8 <TIM_OC2_SetConfig+0xac>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	4a1d      	ldr	r2, [pc, #116]	@ (800a900 <TIM_OC2_SetConfig+0x104>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d00b      	beq.n	800a8a8 <TIM_OC2_SetConfig+0xac>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	4a1c      	ldr	r2, [pc, #112]	@ (800a904 <TIM_OC2_SetConfig+0x108>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d007      	beq.n	800a8a8 <TIM_OC2_SetConfig+0xac>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	4a1b      	ldr	r2, [pc, #108]	@ (800a908 <TIM_OC2_SetConfig+0x10c>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d003      	beq.n	800a8a8 <TIM_OC2_SetConfig+0xac>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	4a1a      	ldr	r2, [pc, #104]	@ (800a90c <TIM_OC2_SetConfig+0x110>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d113      	bne.n	800a8d0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a8ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a8b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	695b      	ldr	r3, [r3, #20]
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	693a      	ldr	r2, [r7, #16]
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	699b      	ldr	r3, [r3, #24]
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	693a      	ldr	r2, [r7, #16]
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	693a      	ldr	r2, [r7, #16]
 800a8d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	685a      	ldr	r2, [r3, #4]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	697a      	ldr	r2, [r7, #20]
 800a8e8:	621a      	str	r2, [r3, #32]
}
 800a8ea:	bf00      	nop
 800a8ec:	371c      	adds	r7, #28
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop
 800a8f8:	feff8fff 	.word	0xfeff8fff
 800a8fc:	40010000 	.word	0x40010000
 800a900:	40010400 	.word	0x40010400
 800a904:	40014000 	.word	0x40014000
 800a908:	40014400 	.word	0x40014400
 800a90c:	40014800 	.word	0x40014800

0800a910 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a910:	b480      	push	{r7}
 800a912:	b087      	sub	sp, #28
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6a1b      	ldr	r3, [r3, #32]
 800a91e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6a1b      	ldr	r3, [r3, #32]
 800a924:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a938:	68fa      	ldr	r2, [r7, #12]
 800a93a:	4b33      	ldr	r3, [pc, #204]	@ (800aa08 <TIM_OC3_SetConfig+0xf8>)
 800a93c:	4013      	ands	r3, r2
 800a93e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f023 0303 	bic.w	r3, r3, #3
 800a946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	4313      	orrs	r3, r2
 800a950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	689b      	ldr	r3, [r3, #8]
 800a95e:	021b      	lsls	r3, r3, #8
 800a960:	697a      	ldr	r2, [r7, #20]
 800a962:	4313      	orrs	r3, r2
 800a964:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4a28      	ldr	r2, [pc, #160]	@ (800aa0c <TIM_OC3_SetConfig+0xfc>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d003      	beq.n	800a976 <TIM_OC3_SetConfig+0x66>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4a27      	ldr	r2, [pc, #156]	@ (800aa10 <TIM_OC3_SetConfig+0x100>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d10d      	bne.n	800a992 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a97c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	021b      	lsls	r3, r3, #8
 800a984:	697a      	ldr	r2, [r7, #20]
 800a986:	4313      	orrs	r3, r2
 800a988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4a1d      	ldr	r2, [pc, #116]	@ (800aa0c <TIM_OC3_SetConfig+0xfc>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d00f      	beq.n	800a9ba <TIM_OC3_SetConfig+0xaa>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	4a1c      	ldr	r2, [pc, #112]	@ (800aa10 <TIM_OC3_SetConfig+0x100>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d00b      	beq.n	800a9ba <TIM_OC3_SetConfig+0xaa>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	4a1b      	ldr	r2, [pc, #108]	@ (800aa14 <TIM_OC3_SetConfig+0x104>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d007      	beq.n	800a9ba <TIM_OC3_SetConfig+0xaa>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	4a1a      	ldr	r2, [pc, #104]	@ (800aa18 <TIM_OC3_SetConfig+0x108>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d003      	beq.n	800a9ba <TIM_OC3_SetConfig+0xaa>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	4a19      	ldr	r2, [pc, #100]	@ (800aa1c <TIM_OC3_SetConfig+0x10c>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d113      	bne.n	800a9e2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a9c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a9c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	695b      	ldr	r3, [r3, #20]
 800a9ce:	011b      	lsls	r3, r3, #4
 800a9d0:	693a      	ldr	r2, [r7, #16]
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	699b      	ldr	r3, [r3, #24]
 800a9da:	011b      	lsls	r3, r3, #4
 800a9dc:	693a      	ldr	r2, [r7, #16]
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	693a      	ldr	r2, [r7, #16]
 800a9e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	68fa      	ldr	r2, [r7, #12]
 800a9ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	685a      	ldr	r2, [r3, #4]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	697a      	ldr	r2, [r7, #20]
 800a9fa:	621a      	str	r2, [r3, #32]
}
 800a9fc:	bf00      	nop
 800a9fe:	371c      	adds	r7, #28
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr
 800aa08:	fffeff8f 	.word	0xfffeff8f
 800aa0c:	40010000 	.word	0x40010000
 800aa10:	40010400 	.word	0x40010400
 800aa14:	40014000 	.word	0x40014000
 800aa18:	40014400 	.word	0x40014400
 800aa1c:	40014800 	.word	0x40014800

0800aa20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b087      	sub	sp, #28
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6a1b      	ldr	r3, [r3, #32]
 800aa2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6a1b      	ldr	r3, [r3, #32]
 800aa34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	69db      	ldr	r3, [r3, #28]
 800aa46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	4b24      	ldr	r3, [pc, #144]	@ (800aadc <TIM_OC4_SetConfig+0xbc>)
 800aa4c:	4013      	ands	r3, r2
 800aa4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	021b      	lsls	r3, r3, #8
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	4313      	orrs	r3, r2
 800aa62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aa6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	031b      	lsls	r3, r3, #12
 800aa72:	693a      	ldr	r2, [r7, #16]
 800aa74:	4313      	orrs	r3, r2
 800aa76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	4a19      	ldr	r2, [pc, #100]	@ (800aae0 <TIM_OC4_SetConfig+0xc0>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d00f      	beq.n	800aaa0 <TIM_OC4_SetConfig+0x80>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	4a18      	ldr	r2, [pc, #96]	@ (800aae4 <TIM_OC4_SetConfig+0xc4>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d00b      	beq.n	800aaa0 <TIM_OC4_SetConfig+0x80>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	4a17      	ldr	r2, [pc, #92]	@ (800aae8 <TIM_OC4_SetConfig+0xc8>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d007      	beq.n	800aaa0 <TIM_OC4_SetConfig+0x80>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4a16      	ldr	r2, [pc, #88]	@ (800aaec <TIM_OC4_SetConfig+0xcc>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d003      	beq.n	800aaa0 <TIM_OC4_SetConfig+0x80>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	4a15      	ldr	r2, [pc, #84]	@ (800aaf0 <TIM_OC4_SetConfig+0xd0>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d109      	bne.n	800aab4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aaa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	695b      	ldr	r3, [r3, #20]
 800aaac:	019b      	lsls	r3, r3, #6
 800aaae:	697a      	ldr	r2, [r7, #20]
 800aab0:	4313      	orrs	r3, r2
 800aab2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	697a      	ldr	r2, [r7, #20]
 800aab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	68fa      	ldr	r2, [r7, #12]
 800aabe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	685a      	ldr	r2, [r3, #4]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	693a      	ldr	r2, [r7, #16]
 800aacc:	621a      	str	r2, [r3, #32]
}
 800aace:	bf00      	nop
 800aad0:	371c      	adds	r7, #28
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop
 800aadc:	feff8fff 	.word	0xfeff8fff
 800aae0:	40010000 	.word	0x40010000
 800aae4:	40010400 	.word	0x40010400
 800aae8:	40014000 	.word	0x40014000
 800aaec:	40014400 	.word	0x40014400
 800aaf0:	40014800 	.word	0x40014800

0800aaf4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b087      	sub	sp, #28
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6a1b      	ldr	r3, [r3, #32]
 800ab02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6a1b      	ldr	r3, [r3, #32]
 800ab08:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ab1c:	68fa      	ldr	r2, [r7, #12]
 800ab1e:	4b21      	ldr	r3, [pc, #132]	@ (800aba4 <TIM_OC5_SetConfig+0xb0>)
 800ab20:	4013      	ands	r3, r2
 800ab22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ab34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	041b      	lsls	r3, r3, #16
 800ab3c:	693a      	ldr	r2, [r7, #16]
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a18      	ldr	r2, [pc, #96]	@ (800aba8 <TIM_OC5_SetConfig+0xb4>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d00f      	beq.n	800ab6a <TIM_OC5_SetConfig+0x76>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a17      	ldr	r2, [pc, #92]	@ (800abac <TIM_OC5_SetConfig+0xb8>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d00b      	beq.n	800ab6a <TIM_OC5_SetConfig+0x76>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4a16      	ldr	r2, [pc, #88]	@ (800abb0 <TIM_OC5_SetConfig+0xbc>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d007      	beq.n	800ab6a <TIM_OC5_SetConfig+0x76>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a15      	ldr	r2, [pc, #84]	@ (800abb4 <TIM_OC5_SetConfig+0xc0>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d003      	beq.n	800ab6a <TIM_OC5_SetConfig+0x76>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4a14      	ldr	r2, [pc, #80]	@ (800abb8 <TIM_OC5_SetConfig+0xc4>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d109      	bne.n	800ab7e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	695b      	ldr	r3, [r3, #20]
 800ab76:	021b      	lsls	r3, r3, #8
 800ab78:	697a      	ldr	r2, [r7, #20]
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	697a      	ldr	r2, [r7, #20]
 800ab82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	685a      	ldr	r2, [r3, #4]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	693a      	ldr	r2, [r7, #16]
 800ab96:	621a      	str	r2, [r3, #32]
}
 800ab98:	bf00      	nop
 800ab9a:	371c      	adds	r7, #28
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr
 800aba4:	fffeff8f 	.word	0xfffeff8f
 800aba8:	40010000 	.word	0x40010000
 800abac:	40010400 	.word	0x40010400
 800abb0:	40014000 	.word	0x40014000
 800abb4:	40014400 	.word	0x40014400
 800abb8:	40014800 	.word	0x40014800

0800abbc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b087      	sub	sp, #28
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6a1b      	ldr	r3, [r3, #32]
 800abca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6a1b      	ldr	r3, [r3, #32]
 800abd0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800abe4:	68fa      	ldr	r2, [r7, #12]
 800abe6:	4b22      	ldr	r3, [pc, #136]	@ (800ac70 <TIM_OC6_SetConfig+0xb4>)
 800abe8:	4013      	ands	r3, r2
 800abea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	021b      	lsls	r3, r3, #8
 800abf2:	68fa      	ldr	r2, [r7, #12]
 800abf4:	4313      	orrs	r3, r2
 800abf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800abfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	051b      	lsls	r3, r3, #20
 800ac06:	693a      	ldr	r2, [r7, #16]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	4a19      	ldr	r2, [pc, #100]	@ (800ac74 <TIM_OC6_SetConfig+0xb8>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d00f      	beq.n	800ac34 <TIM_OC6_SetConfig+0x78>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	4a18      	ldr	r2, [pc, #96]	@ (800ac78 <TIM_OC6_SetConfig+0xbc>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d00b      	beq.n	800ac34 <TIM_OC6_SetConfig+0x78>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	4a17      	ldr	r2, [pc, #92]	@ (800ac7c <TIM_OC6_SetConfig+0xc0>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d007      	beq.n	800ac34 <TIM_OC6_SetConfig+0x78>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	4a16      	ldr	r2, [pc, #88]	@ (800ac80 <TIM_OC6_SetConfig+0xc4>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d003      	beq.n	800ac34 <TIM_OC6_SetConfig+0x78>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	4a15      	ldr	r2, [pc, #84]	@ (800ac84 <TIM_OC6_SetConfig+0xc8>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d109      	bne.n	800ac48 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ac3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	695b      	ldr	r3, [r3, #20]
 800ac40:	029b      	lsls	r3, r3, #10
 800ac42:	697a      	ldr	r2, [r7, #20]
 800ac44:	4313      	orrs	r3, r2
 800ac46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	697a      	ldr	r2, [r7, #20]
 800ac4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	68fa      	ldr	r2, [r7, #12]
 800ac52:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	685a      	ldr	r2, [r3, #4]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	693a      	ldr	r2, [r7, #16]
 800ac60:	621a      	str	r2, [r3, #32]
}
 800ac62:	bf00      	nop
 800ac64:	371c      	adds	r7, #28
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	feff8fff 	.word	0xfeff8fff
 800ac74:	40010000 	.word	0x40010000
 800ac78:	40010400 	.word	0x40010400
 800ac7c:	40014000 	.word	0x40014000
 800ac80:	40014400 	.word	0x40014400
 800ac84:	40014800 	.word	0x40014800

0800ac88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b087      	sub	sp, #28
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	f003 031f 	and.w	r3, r3, #31
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	fa02 f303 	lsl.w	r3, r2, r3
 800aca0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	6a1a      	ldr	r2, [r3, #32]
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	43db      	mvns	r3, r3
 800acaa:	401a      	ands	r2, r3
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	6a1a      	ldr	r2, [r3, #32]
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	f003 031f 	and.w	r3, r3, #31
 800acba:	6879      	ldr	r1, [r7, #4]
 800acbc:	fa01 f303 	lsl.w	r3, r1, r3
 800acc0:	431a      	orrs	r2, r3
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	621a      	str	r2, [r3, #32]
}
 800acc6:	bf00      	nop
 800acc8:	371c      	adds	r7, #28
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
	...

0800acd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b085      	sub	sp, #20
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800acde:	2300      	movs	r3, #0
 800ace0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d101      	bne.n	800acf0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800acec:	2302      	movs	r3, #2
 800acee:	e073      	b.n	800add8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2201      	movs	r2, #1
 800acf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	4313      	orrs	r3, r2
 800ad04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	689b      	ldr	r3, [r3, #8]
 800ad10:	4313      	orrs	r3, r2
 800ad12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4313      	orrs	r3, r2
 800ad2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	691b      	ldr	r3, [r3, #16]
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	695b      	ldr	r3, [r3, #20]
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad56:	4313      	orrs	r3, r2
 800ad58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	699b      	ldr	r3, [r3, #24]
 800ad64:	041b      	lsls	r3, r3, #16
 800ad66:	4313      	orrs	r3, r2
 800ad68:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	69db      	ldr	r3, [r3, #28]
 800ad74:	4313      	orrs	r3, r2
 800ad76:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a19      	ldr	r2, [pc, #100]	@ (800ade4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d004      	beq.n	800ad8c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a18      	ldr	r2, [pc, #96]	@ (800ade8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d11c      	bne.n	800adc6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad96:	051b      	lsls	r3, r3, #20
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	6a1b      	ldr	r3, [r3, #32]
 800ada6:	4313      	orrs	r3, r2
 800ada8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adb4:	4313      	orrs	r3, r2
 800adb6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adc2:	4313      	orrs	r3, r2
 800adc4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	68fa      	ldr	r2, [r7, #12]
 800adcc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2200      	movs	r2, #0
 800add2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800add6:	2300      	movs	r3, #0
}
 800add8:	4618      	mov	r0, r3
 800adda:	3714      	adds	r7, #20
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr
 800ade4:	40010000 	.word	0x40010000
 800ade8:	40010400 	.word	0x40010400

0800adec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d101      	bne.n	800adfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800adfa:	2301      	movs	r3, #1
 800adfc:	e042      	b.n	800ae84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d106      	bne.n	800ae16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f7f7 fee7 	bl	8002be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2224      	movs	r2, #36	@ 0x24
 800ae1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f022 0201 	bic.w	r2, r2, #1
 800ae2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d002      	beq.n	800ae3c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 ff38 	bl	800bcac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 f8c9 	bl	800afd4 <UART_SetConfig>
 800ae42:	4603      	mov	r3, r0
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d101      	bne.n	800ae4c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e01b      	b.n	800ae84 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	685a      	ldr	r2, [r3, #4]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ae5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	689a      	ldr	r2, [r3, #8]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ae6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f042 0201 	orr.w	r2, r2, #1
 800ae7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 ffb7 	bl	800bdf0 <UART_CheckIdleState>
 800ae82:	4603      	mov	r3, r0
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3708      	adds	r7, #8
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b08a      	sub	sp, #40	@ 0x28
 800ae90:	af02      	add	r7, sp, #8
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	603b      	str	r3, [r7, #0]
 800ae98:	4613      	mov	r3, r2
 800ae9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aea2:	2b20      	cmp	r3, #32
 800aea4:	d17b      	bne.n	800af9e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d002      	beq.n	800aeb2 <HAL_UART_Transmit+0x26>
 800aeac:	88fb      	ldrh	r3, [r7, #6]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d101      	bne.n	800aeb6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	e074      	b.n	800afa0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2221      	movs	r2, #33	@ 0x21
 800aec2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aec6:	f7f8 f88d 	bl	8002fe4 <HAL_GetTick>
 800aeca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	88fa      	ldrh	r2, [r7, #6]
 800aed0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	88fa      	ldrh	r2, [r7, #6]
 800aed8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	689b      	ldr	r3, [r3, #8]
 800aee0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aee4:	d108      	bne.n	800aef8 <HAL_UART_Transmit+0x6c>
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	691b      	ldr	r3, [r3, #16]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d104      	bne.n	800aef8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800aeee:	2300      	movs	r3, #0
 800aef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	61bb      	str	r3, [r7, #24]
 800aef6:	e003      	b.n	800af00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aefc:	2300      	movs	r3, #0
 800aefe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800af00:	e030      	b.n	800af64 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	9300      	str	r3, [sp, #0]
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	2200      	movs	r2, #0
 800af0a:	2180      	movs	r1, #128	@ 0x80
 800af0c:	68f8      	ldr	r0, [r7, #12]
 800af0e:	f001 f819 	bl	800bf44 <UART_WaitOnFlagUntilTimeout>
 800af12:	4603      	mov	r3, r0
 800af14:	2b00      	cmp	r3, #0
 800af16:	d005      	beq.n	800af24 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2220      	movs	r2, #32
 800af1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800af20:	2303      	movs	r3, #3
 800af22:	e03d      	b.n	800afa0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800af24:	69fb      	ldr	r3, [r7, #28]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d10b      	bne.n	800af42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800af2a:	69bb      	ldr	r3, [r7, #24]
 800af2c:	881b      	ldrh	r3, [r3, #0]
 800af2e:	461a      	mov	r2, r3
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af38:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800af3a:	69bb      	ldr	r3, [r7, #24]
 800af3c:	3302      	adds	r3, #2
 800af3e:	61bb      	str	r3, [r7, #24]
 800af40:	e007      	b.n	800af52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800af42:	69fb      	ldr	r3, [r7, #28]
 800af44:	781a      	ldrb	r2, [r3, #0]
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800af4c:	69fb      	ldr	r3, [r7, #28]
 800af4e:	3301      	adds	r3, #1
 800af50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800af58:	b29b      	uxth	r3, r3
 800af5a:	3b01      	subs	r3, #1
 800af5c:	b29a      	uxth	r2, r3
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d1c8      	bne.n	800af02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	9300      	str	r3, [sp, #0]
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	2200      	movs	r2, #0
 800af78:	2140      	movs	r1, #64	@ 0x40
 800af7a:	68f8      	ldr	r0, [r7, #12]
 800af7c:	f000 ffe2 	bl	800bf44 <UART_WaitOnFlagUntilTimeout>
 800af80:	4603      	mov	r3, r0
 800af82:	2b00      	cmp	r3, #0
 800af84:	d005      	beq.n	800af92 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2220      	movs	r2, #32
 800af8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800af8e:	2303      	movs	r3, #3
 800af90:	e006      	b.n	800afa0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2220      	movs	r2, #32
 800af96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800af9a:	2300      	movs	r3, #0
 800af9c:	e000      	b.n	800afa0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800af9e:	2302      	movs	r3, #2
  }
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3720      	adds	r7, #32
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b085      	sub	sp, #20
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afb6:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800afbe:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800afc0:	68fa      	ldr	r2, [r7, #12]
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	4313      	orrs	r3, r2
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3714      	adds	r7, #20
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr
	...

0800afd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800afd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800afd8:	b092      	sub	sp, #72	@ 0x48
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800afde:	2300      	movs	r3, #0
 800afe0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	689a      	ldr	r2, [r3, #8]
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	691b      	ldr	r3, [r3, #16]
 800afec:	431a      	orrs	r2, r3
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	695b      	ldr	r3, [r3, #20]
 800aff2:	431a      	orrs	r2, r3
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	69db      	ldr	r3, [r3, #28]
 800aff8:	4313      	orrs	r3, r2
 800affa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	4bbe      	ldr	r3, [pc, #760]	@ (800b2fc <UART_SetConfig+0x328>)
 800b004:	4013      	ands	r3, r2
 800b006:	697a      	ldr	r2, [r7, #20]
 800b008:	6812      	ldr	r2, [r2, #0]
 800b00a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b00c:	430b      	orrs	r3, r1
 800b00e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	68da      	ldr	r2, [r3, #12]
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	430a      	orrs	r2, r1
 800b024:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	699b      	ldr	r3, [r3, #24]
 800b02a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4ab3      	ldr	r2, [pc, #716]	@ (800b300 <UART_SetConfig+0x32c>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d004      	beq.n	800b040 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	6a1b      	ldr	r3, [r3, #32]
 800b03a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b03c:	4313      	orrs	r3, r2
 800b03e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	689a      	ldr	r2, [r3, #8]
 800b046:	4baf      	ldr	r3, [pc, #700]	@ (800b304 <UART_SetConfig+0x330>)
 800b048:	4013      	ands	r3, r2
 800b04a:	697a      	ldr	r2, [r7, #20]
 800b04c:	6812      	ldr	r2, [r2, #0]
 800b04e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b050:	430b      	orrs	r3, r1
 800b052:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b05a:	f023 010f 	bic.w	r1, r3, #15
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	430a      	orrs	r2, r1
 800b068:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4aa6      	ldr	r2, [pc, #664]	@ (800b308 <UART_SetConfig+0x334>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d177      	bne.n	800b164 <UART_SetConfig+0x190>
 800b074:	4ba5      	ldr	r3, [pc, #660]	@ (800b30c <UART_SetConfig+0x338>)
 800b076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b078:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b07c:	2b28      	cmp	r3, #40	@ 0x28
 800b07e:	d86d      	bhi.n	800b15c <UART_SetConfig+0x188>
 800b080:	a201      	add	r2, pc, #4	@ (adr r2, 800b088 <UART_SetConfig+0xb4>)
 800b082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b086:	bf00      	nop
 800b088:	0800b12d 	.word	0x0800b12d
 800b08c:	0800b15d 	.word	0x0800b15d
 800b090:	0800b15d 	.word	0x0800b15d
 800b094:	0800b15d 	.word	0x0800b15d
 800b098:	0800b15d 	.word	0x0800b15d
 800b09c:	0800b15d 	.word	0x0800b15d
 800b0a0:	0800b15d 	.word	0x0800b15d
 800b0a4:	0800b15d 	.word	0x0800b15d
 800b0a8:	0800b135 	.word	0x0800b135
 800b0ac:	0800b15d 	.word	0x0800b15d
 800b0b0:	0800b15d 	.word	0x0800b15d
 800b0b4:	0800b15d 	.word	0x0800b15d
 800b0b8:	0800b15d 	.word	0x0800b15d
 800b0bc:	0800b15d 	.word	0x0800b15d
 800b0c0:	0800b15d 	.word	0x0800b15d
 800b0c4:	0800b15d 	.word	0x0800b15d
 800b0c8:	0800b13d 	.word	0x0800b13d
 800b0cc:	0800b15d 	.word	0x0800b15d
 800b0d0:	0800b15d 	.word	0x0800b15d
 800b0d4:	0800b15d 	.word	0x0800b15d
 800b0d8:	0800b15d 	.word	0x0800b15d
 800b0dc:	0800b15d 	.word	0x0800b15d
 800b0e0:	0800b15d 	.word	0x0800b15d
 800b0e4:	0800b15d 	.word	0x0800b15d
 800b0e8:	0800b145 	.word	0x0800b145
 800b0ec:	0800b15d 	.word	0x0800b15d
 800b0f0:	0800b15d 	.word	0x0800b15d
 800b0f4:	0800b15d 	.word	0x0800b15d
 800b0f8:	0800b15d 	.word	0x0800b15d
 800b0fc:	0800b15d 	.word	0x0800b15d
 800b100:	0800b15d 	.word	0x0800b15d
 800b104:	0800b15d 	.word	0x0800b15d
 800b108:	0800b14d 	.word	0x0800b14d
 800b10c:	0800b15d 	.word	0x0800b15d
 800b110:	0800b15d 	.word	0x0800b15d
 800b114:	0800b15d 	.word	0x0800b15d
 800b118:	0800b15d 	.word	0x0800b15d
 800b11c:	0800b15d 	.word	0x0800b15d
 800b120:	0800b15d 	.word	0x0800b15d
 800b124:	0800b15d 	.word	0x0800b15d
 800b128:	0800b155 	.word	0x0800b155
 800b12c:	2301      	movs	r3, #1
 800b12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b132:	e326      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b134:	2304      	movs	r3, #4
 800b136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b13a:	e322      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b13c:	2308      	movs	r3, #8
 800b13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b142:	e31e      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b144:	2310      	movs	r3, #16
 800b146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b14a:	e31a      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b14c:	2320      	movs	r3, #32
 800b14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b152:	e316      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b154:	2340      	movs	r3, #64	@ 0x40
 800b156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b15a:	e312      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b15c:	2380      	movs	r3, #128	@ 0x80
 800b15e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b162:	e30e      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a69      	ldr	r2, [pc, #420]	@ (800b310 <UART_SetConfig+0x33c>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d130      	bne.n	800b1d0 <UART_SetConfig+0x1fc>
 800b16e:	4b67      	ldr	r3, [pc, #412]	@ (800b30c <UART_SetConfig+0x338>)
 800b170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b172:	f003 0307 	and.w	r3, r3, #7
 800b176:	2b05      	cmp	r3, #5
 800b178:	d826      	bhi.n	800b1c8 <UART_SetConfig+0x1f4>
 800b17a:	a201      	add	r2, pc, #4	@ (adr r2, 800b180 <UART_SetConfig+0x1ac>)
 800b17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b180:	0800b199 	.word	0x0800b199
 800b184:	0800b1a1 	.word	0x0800b1a1
 800b188:	0800b1a9 	.word	0x0800b1a9
 800b18c:	0800b1b1 	.word	0x0800b1b1
 800b190:	0800b1b9 	.word	0x0800b1b9
 800b194:	0800b1c1 	.word	0x0800b1c1
 800b198:	2300      	movs	r3, #0
 800b19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b19e:	e2f0      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b1a0:	2304      	movs	r3, #4
 800b1a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1a6:	e2ec      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b1a8:	2308      	movs	r3, #8
 800b1aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1ae:	e2e8      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b1b0:	2310      	movs	r3, #16
 800b1b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1b6:	e2e4      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b1b8:	2320      	movs	r3, #32
 800b1ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1be:	e2e0      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b1c0:	2340      	movs	r3, #64	@ 0x40
 800b1c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1c6:	e2dc      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b1c8:	2380      	movs	r3, #128	@ 0x80
 800b1ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1ce:	e2d8      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4a4f      	ldr	r2, [pc, #316]	@ (800b314 <UART_SetConfig+0x340>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d130      	bne.n	800b23c <UART_SetConfig+0x268>
 800b1da:	4b4c      	ldr	r3, [pc, #304]	@ (800b30c <UART_SetConfig+0x338>)
 800b1dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1de:	f003 0307 	and.w	r3, r3, #7
 800b1e2:	2b05      	cmp	r3, #5
 800b1e4:	d826      	bhi.n	800b234 <UART_SetConfig+0x260>
 800b1e6:	a201      	add	r2, pc, #4	@ (adr r2, 800b1ec <UART_SetConfig+0x218>)
 800b1e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ec:	0800b205 	.word	0x0800b205
 800b1f0:	0800b20d 	.word	0x0800b20d
 800b1f4:	0800b215 	.word	0x0800b215
 800b1f8:	0800b21d 	.word	0x0800b21d
 800b1fc:	0800b225 	.word	0x0800b225
 800b200:	0800b22d 	.word	0x0800b22d
 800b204:	2300      	movs	r3, #0
 800b206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b20a:	e2ba      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b20c:	2304      	movs	r3, #4
 800b20e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b212:	e2b6      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b214:	2308      	movs	r3, #8
 800b216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b21a:	e2b2      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b21c:	2310      	movs	r3, #16
 800b21e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b222:	e2ae      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b224:	2320      	movs	r3, #32
 800b226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b22a:	e2aa      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b22c:	2340      	movs	r3, #64	@ 0x40
 800b22e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b232:	e2a6      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b234:	2380      	movs	r3, #128	@ 0x80
 800b236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b23a:	e2a2      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a35      	ldr	r2, [pc, #212]	@ (800b318 <UART_SetConfig+0x344>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d130      	bne.n	800b2a8 <UART_SetConfig+0x2d4>
 800b246:	4b31      	ldr	r3, [pc, #196]	@ (800b30c <UART_SetConfig+0x338>)
 800b248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b24a:	f003 0307 	and.w	r3, r3, #7
 800b24e:	2b05      	cmp	r3, #5
 800b250:	d826      	bhi.n	800b2a0 <UART_SetConfig+0x2cc>
 800b252:	a201      	add	r2, pc, #4	@ (adr r2, 800b258 <UART_SetConfig+0x284>)
 800b254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b258:	0800b271 	.word	0x0800b271
 800b25c:	0800b279 	.word	0x0800b279
 800b260:	0800b281 	.word	0x0800b281
 800b264:	0800b289 	.word	0x0800b289
 800b268:	0800b291 	.word	0x0800b291
 800b26c:	0800b299 	.word	0x0800b299
 800b270:	2300      	movs	r3, #0
 800b272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b276:	e284      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b278:	2304      	movs	r3, #4
 800b27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b27e:	e280      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b280:	2308      	movs	r3, #8
 800b282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b286:	e27c      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b288:	2310      	movs	r3, #16
 800b28a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b28e:	e278      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b290:	2320      	movs	r3, #32
 800b292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b296:	e274      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b298:	2340      	movs	r3, #64	@ 0x40
 800b29a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b29e:	e270      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b2a0:	2380      	movs	r3, #128	@ 0x80
 800b2a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2a6:	e26c      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4a1b      	ldr	r2, [pc, #108]	@ (800b31c <UART_SetConfig+0x348>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d142      	bne.n	800b338 <UART_SetConfig+0x364>
 800b2b2:	4b16      	ldr	r3, [pc, #88]	@ (800b30c <UART_SetConfig+0x338>)
 800b2b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2b6:	f003 0307 	and.w	r3, r3, #7
 800b2ba:	2b05      	cmp	r3, #5
 800b2bc:	d838      	bhi.n	800b330 <UART_SetConfig+0x35c>
 800b2be:	a201      	add	r2, pc, #4	@ (adr r2, 800b2c4 <UART_SetConfig+0x2f0>)
 800b2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c4:	0800b2dd 	.word	0x0800b2dd
 800b2c8:	0800b2e5 	.word	0x0800b2e5
 800b2cc:	0800b2ed 	.word	0x0800b2ed
 800b2d0:	0800b2f5 	.word	0x0800b2f5
 800b2d4:	0800b321 	.word	0x0800b321
 800b2d8:	0800b329 	.word	0x0800b329
 800b2dc:	2300      	movs	r3, #0
 800b2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2e2:	e24e      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b2e4:	2304      	movs	r3, #4
 800b2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2ea:	e24a      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b2ec:	2308      	movs	r3, #8
 800b2ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2f2:	e246      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b2f4:	2310      	movs	r3, #16
 800b2f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2fa:	e242      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b2fc:	cfff69f3 	.word	0xcfff69f3
 800b300:	58000c00 	.word	0x58000c00
 800b304:	11fff4ff 	.word	0x11fff4ff
 800b308:	40011000 	.word	0x40011000
 800b30c:	58024400 	.word	0x58024400
 800b310:	40004400 	.word	0x40004400
 800b314:	40004800 	.word	0x40004800
 800b318:	40004c00 	.word	0x40004c00
 800b31c:	40005000 	.word	0x40005000
 800b320:	2320      	movs	r3, #32
 800b322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b326:	e22c      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b328:	2340      	movs	r3, #64	@ 0x40
 800b32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b32e:	e228      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b330:	2380      	movs	r3, #128	@ 0x80
 800b332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b336:	e224      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4ab1      	ldr	r2, [pc, #708]	@ (800b604 <UART_SetConfig+0x630>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d176      	bne.n	800b430 <UART_SetConfig+0x45c>
 800b342:	4bb1      	ldr	r3, [pc, #708]	@ (800b608 <UART_SetConfig+0x634>)
 800b344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b346:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b34a:	2b28      	cmp	r3, #40	@ 0x28
 800b34c:	d86c      	bhi.n	800b428 <UART_SetConfig+0x454>
 800b34e:	a201      	add	r2, pc, #4	@ (adr r2, 800b354 <UART_SetConfig+0x380>)
 800b350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b354:	0800b3f9 	.word	0x0800b3f9
 800b358:	0800b429 	.word	0x0800b429
 800b35c:	0800b429 	.word	0x0800b429
 800b360:	0800b429 	.word	0x0800b429
 800b364:	0800b429 	.word	0x0800b429
 800b368:	0800b429 	.word	0x0800b429
 800b36c:	0800b429 	.word	0x0800b429
 800b370:	0800b429 	.word	0x0800b429
 800b374:	0800b401 	.word	0x0800b401
 800b378:	0800b429 	.word	0x0800b429
 800b37c:	0800b429 	.word	0x0800b429
 800b380:	0800b429 	.word	0x0800b429
 800b384:	0800b429 	.word	0x0800b429
 800b388:	0800b429 	.word	0x0800b429
 800b38c:	0800b429 	.word	0x0800b429
 800b390:	0800b429 	.word	0x0800b429
 800b394:	0800b409 	.word	0x0800b409
 800b398:	0800b429 	.word	0x0800b429
 800b39c:	0800b429 	.word	0x0800b429
 800b3a0:	0800b429 	.word	0x0800b429
 800b3a4:	0800b429 	.word	0x0800b429
 800b3a8:	0800b429 	.word	0x0800b429
 800b3ac:	0800b429 	.word	0x0800b429
 800b3b0:	0800b429 	.word	0x0800b429
 800b3b4:	0800b411 	.word	0x0800b411
 800b3b8:	0800b429 	.word	0x0800b429
 800b3bc:	0800b429 	.word	0x0800b429
 800b3c0:	0800b429 	.word	0x0800b429
 800b3c4:	0800b429 	.word	0x0800b429
 800b3c8:	0800b429 	.word	0x0800b429
 800b3cc:	0800b429 	.word	0x0800b429
 800b3d0:	0800b429 	.word	0x0800b429
 800b3d4:	0800b419 	.word	0x0800b419
 800b3d8:	0800b429 	.word	0x0800b429
 800b3dc:	0800b429 	.word	0x0800b429
 800b3e0:	0800b429 	.word	0x0800b429
 800b3e4:	0800b429 	.word	0x0800b429
 800b3e8:	0800b429 	.word	0x0800b429
 800b3ec:	0800b429 	.word	0x0800b429
 800b3f0:	0800b429 	.word	0x0800b429
 800b3f4:	0800b421 	.word	0x0800b421
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3fe:	e1c0      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b400:	2304      	movs	r3, #4
 800b402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b406:	e1bc      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b408:	2308      	movs	r3, #8
 800b40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b40e:	e1b8      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b410:	2310      	movs	r3, #16
 800b412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b416:	e1b4      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b418:	2320      	movs	r3, #32
 800b41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b41e:	e1b0      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b420:	2340      	movs	r3, #64	@ 0x40
 800b422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b426:	e1ac      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b428:	2380      	movs	r3, #128	@ 0x80
 800b42a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b42e:	e1a8      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a75      	ldr	r2, [pc, #468]	@ (800b60c <UART_SetConfig+0x638>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d130      	bne.n	800b49c <UART_SetConfig+0x4c8>
 800b43a:	4b73      	ldr	r3, [pc, #460]	@ (800b608 <UART_SetConfig+0x634>)
 800b43c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b43e:	f003 0307 	and.w	r3, r3, #7
 800b442:	2b05      	cmp	r3, #5
 800b444:	d826      	bhi.n	800b494 <UART_SetConfig+0x4c0>
 800b446:	a201      	add	r2, pc, #4	@ (adr r2, 800b44c <UART_SetConfig+0x478>)
 800b448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b44c:	0800b465 	.word	0x0800b465
 800b450:	0800b46d 	.word	0x0800b46d
 800b454:	0800b475 	.word	0x0800b475
 800b458:	0800b47d 	.word	0x0800b47d
 800b45c:	0800b485 	.word	0x0800b485
 800b460:	0800b48d 	.word	0x0800b48d
 800b464:	2300      	movs	r3, #0
 800b466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b46a:	e18a      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b46c:	2304      	movs	r3, #4
 800b46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b472:	e186      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b474:	2308      	movs	r3, #8
 800b476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b47a:	e182      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b47c:	2310      	movs	r3, #16
 800b47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b482:	e17e      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b484:	2320      	movs	r3, #32
 800b486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b48a:	e17a      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b48c:	2340      	movs	r3, #64	@ 0x40
 800b48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b492:	e176      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b494:	2380      	movs	r3, #128	@ 0x80
 800b496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b49a:	e172      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4a5b      	ldr	r2, [pc, #364]	@ (800b610 <UART_SetConfig+0x63c>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d130      	bne.n	800b508 <UART_SetConfig+0x534>
 800b4a6:	4b58      	ldr	r3, [pc, #352]	@ (800b608 <UART_SetConfig+0x634>)
 800b4a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4aa:	f003 0307 	and.w	r3, r3, #7
 800b4ae:	2b05      	cmp	r3, #5
 800b4b0:	d826      	bhi.n	800b500 <UART_SetConfig+0x52c>
 800b4b2:	a201      	add	r2, pc, #4	@ (adr r2, 800b4b8 <UART_SetConfig+0x4e4>)
 800b4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4b8:	0800b4d1 	.word	0x0800b4d1
 800b4bc:	0800b4d9 	.word	0x0800b4d9
 800b4c0:	0800b4e1 	.word	0x0800b4e1
 800b4c4:	0800b4e9 	.word	0x0800b4e9
 800b4c8:	0800b4f1 	.word	0x0800b4f1
 800b4cc:	0800b4f9 	.word	0x0800b4f9
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4d6:	e154      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b4d8:	2304      	movs	r3, #4
 800b4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4de:	e150      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b4e0:	2308      	movs	r3, #8
 800b4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4e6:	e14c      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b4e8:	2310      	movs	r3, #16
 800b4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4ee:	e148      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b4f0:	2320      	movs	r3, #32
 800b4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4f6:	e144      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b4f8:	2340      	movs	r3, #64	@ 0x40
 800b4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4fe:	e140      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b500:	2380      	movs	r3, #128	@ 0x80
 800b502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b506:	e13c      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a41      	ldr	r2, [pc, #260]	@ (800b614 <UART_SetConfig+0x640>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	f040 8082 	bne.w	800b618 <UART_SetConfig+0x644>
 800b514:	4b3c      	ldr	r3, [pc, #240]	@ (800b608 <UART_SetConfig+0x634>)
 800b516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b518:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b51c:	2b28      	cmp	r3, #40	@ 0x28
 800b51e:	d86d      	bhi.n	800b5fc <UART_SetConfig+0x628>
 800b520:	a201      	add	r2, pc, #4	@ (adr r2, 800b528 <UART_SetConfig+0x554>)
 800b522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b526:	bf00      	nop
 800b528:	0800b5cd 	.word	0x0800b5cd
 800b52c:	0800b5fd 	.word	0x0800b5fd
 800b530:	0800b5fd 	.word	0x0800b5fd
 800b534:	0800b5fd 	.word	0x0800b5fd
 800b538:	0800b5fd 	.word	0x0800b5fd
 800b53c:	0800b5fd 	.word	0x0800b5fd
 800b540:	0800b5fd 	.word	0x0800b5fd
 800b544:	0800b5fd 	.word	0x0800b5fd
 800b548:	0800b5d5 	.word	0x0800b5d5
 800b54c:	0800b5fd 	.word	0x0800b5fd
 800b550:	0800b5fd 	.word	0x0800b5fd
 800b554:	0800b5fd 	.word	0x0800b5fd
 800b558:	0800b5fd 	.word	0x0800b5fd
 800b55c:	0800b5fd 	.word	0x0800b5fd
 800b560:	0800b5fd 	.word	0x0800b5fd
 800b564:	0800b5fd 	.word	0x0800b5fd
 800b568:	0800b5dd 	.word	0x0800b5dd
 800b56c:	0800b5fd 	.word	0x0800b5fd
 800b570:	0800b5fd 	.word	0x0800b5fd
 800b574:	0800b5fd 	.word	0x0800b5fd
 800b578:	0800b5fd 	.word	0x0800b5fd
 800b57c:	0800b5fd 	.word	0x0800b5fd
 800b580:	0800b5fd 	.word	0x0800b5fd
 800b584:	0800b5fd 	.word	0x0800b5fd
 800b588:	0800b5e5 	.word	0x0800b5e5
 800b58c:	0800b5fd 	.word	0x0800b5fd
 800b590:	0800b5fd 	.word	0x0800b5fd
 800b594:	0800b5fd 	.word	0x0800b5fd
 800b598:	0800b5fd 	.word	0x0800b5fd
 800b59c:	0800b5fd 	.word	0x0800b5fd
 800b5a0:	0800b5fd 	.word	0x0800b5fd
 800b5a4:	0800b5fd 	.word	0x0800b5fd
 800b5a8:	0800b5ed 	.word	0x0800b5ed
 800b5ac:	0800b5fd 	.word	0x0800b5fd
 800b5b0:	0800b5fd 	.word	0x0800b5fd
 800b5b4:	0800b5fd 	.word	0x0800b5fd
 800b5b8:	0800b5fd 	.word	0x0800b5fd
 800b5bc:	0800b5fd 	.word	0x0800b5fd
 800b5c0:	0800b5fd 	.word	0x0800b5fd
 800b5c4:	0800b5fd 	.word	0x0800b5fd
 800b5c8:	0800b5f5 	.word	0x0800b5f5
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5d2:	e0d6      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b5d4:	2304      	movs	r3, #4
 800b5d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5da:	e0d2      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b5dc:	2308      	movs	r3, #8
 800b5de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5e2:	e0ce      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b5e4:	2310      	movs	r3, #16
 800b5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5ea:	e0ca      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b5ec:	2320      	movs	r3, #32
 800b5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5f2:	e0c6      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b5f4:	2340      	movs	r3, #64	@ 0x40
 800b5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5fa:	e0c2      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b5fc:	2380      	movs	r3, #128	@ 0x80
 800b5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b602:	e0be      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b604:	40011400 	.word	0x40011400
 800b608:	58024400 	.word	0x58024400
 800b60c:	40007800 	.word	0x40007800
 800b610:	40007c00 	.word	0x40007c00
 800b614:	40011800 	.word	0x40011800
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	4aad      	ldr	r2, [pc, #692]	@ (800b8d4 <UART_SetConfig+0x900>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d176      	bne.n	800b710 <UART_SetConfig+0x73c>
 800b622:	4bad      	ldr	r3, [pc, #692]	@ (800b8d8 <UART_SetConfig+0x904>)
 800b624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b626:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b62a:	2b28      	cmp	r3, #40	@ 0x28
 800b62c:	d86c      	bhi.n	800b708 <UART_SetConfig+0x734>
 800b62e:	a201      	add	r2, pc, #4	@ (adr r2, 800b634 <UART_SetConfig+0x660>)
 800b630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b634:	0800b6d9 	.word	0x0800b6d9
 800b638:	0800b709 	.word	0x0800b709
 800b63c:	0800b709 	.word	0x0800b709
 800b640:	0800b709 	.word	0x0800b709
 800b644:	0800b709 	.word	0x0800b709
 800b648:	0800b709 	.word	0x0800b709
 800b64c:	0800b709 	.word	0x0800b709
 800b650:	0800b709 	.word	0x0800b709
 800b654:	0800b6e1 	.word	0x0800b6e1
 800b658:	0800b709 	.word	0x0800b709
 800b65c:	0800b709 	.word	0x0800b709
 800b660:	0800b709 	.word	0x0800b709
 800b664:	0800b709 	.word	0x0800b709
 800b668:	0800b709 	.word	0x0800b709
 800b66c:	0800b709 	.word	0x0800b709
 800b670:	0800b709 	.word	0x0800b709
 800b674:	0800b6e9 	.word	0x0800b6e9
 800b678:	0800b709 	.word	0x0800b709
 800b67c:	0800b709 	.word	0x0800b709
 800b680:	0800b709 	.word	0x0800b709
 800b684:	0800b709 	.word	0x0800b709
 800b688:	0800b709 	.word	0x0800b709
 800b68c:	0800b709 	.word	0x0800b709
 800b690:	0800b709 	.word	0x0800b709
 800b694:	0800b6f1 	.word	0x0800b6f1
 800b698:	0800b709 	.word	0x0800b709
 800b69c:	0800b709 	.word	0x0800b709
 800b6a0:	0800b709 	.word	0x0800b709
 800b6a4:	0800b709 	.word	0x0800b709
 800b6a8:	0800b709 	.word	0x0800b709
 800b6ac:	0800b709 	.word	0x0800b709
 800b6b0:	0800b709 	.word	0x0800b709
 800b6b4:	0800b6f9 	.word	0x0800b6f9
 800b6b8:	0800b709 	.word	0x0800b709
 800b6bc:	0800b709 	.word	0x0800b709
 800b6c0:	0800b709 	.word	0x0800b709
 800b6c4:	0800b709 	.word	0x0800b709
 800b6c8:	0800b709 	.word	0x0800b709
 800b6cc:	0800b709 	.word	0x0800b709
 800b6d0:	0800b709 	.word	0x0800b709
 800b6d4:	0800b701 	.word	0x0800b701
 800b6d8:	2301      	movs	r3, #1
 800b6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6de:	e050      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b6e0:	2304      	movs	r3, #4
 800b6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6e6:	e04c      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b6e8:	2308      	movs	r3, #8
 800b6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ee:	e048      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b6f0:	2310      	movs	r3, #16
 800b6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6f6:	e044      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b6f8:	2320      	movs	r3, #32
 800b6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6fe:	e040      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b700:	2340      	movs	r3, #64	@ 0x40
 800b702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b706:	e03c      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b708:	2380      	movs	r3, #128	@ 0x80
 800b70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b70e:	e038      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4a71      	ldr	r2, [pc, #452]	@ (800b8dc <UART_SetConfig+0x908>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d130      	bne.n	800b77c <UART_SetConfig+0x7a8>
 800b71a:	4b6f      	ldr	r3, [pc, #444]	@ (800b8d8 <UART_SetConfig+0x904>)
 800b71c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b71e:	f003 0307 	and.w	r3, r3, #7
 800b722:	2b05      	cmp	r3, #5
 800b724:	d826      	bhi.n	800b774 <UART_SetConfig+0x7a0>
 800b726:	a201      	add	r2, pc, #4	@ (adr r2, 800b72c <UART_SetConfig+0x758>)
 800b728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b72c:	0800b745 	.word	0x0800b745
 800b730:	0800b74d 	.word	0x0800b74d
 800b734:	0800b755 	.word	0x0800b755
 800b738:	0800b75d 	.word	0x0800b75d
 800b73c:	0800b765 	.word	0x0800b765
 800b740:	0800b76d 	.word	0x0800b76d
 800b744:	2302      	movs	r3, #2
 800b746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b74a:	e01a      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b74c:	2304      	movs	r3, #4
 800b74e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b752:	e016      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b754:	2308      	movs	r3, #8
 800b756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b75a:	e012      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b75c:	2310      	movs	r3, #16
 800b75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b762:	e00e      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b764:	2320      	movs	r3, #32
 800b766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b76a:	e00a      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b76c:	2340      	movs	r3, #64	@ 0x40
 800b76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b772:	e006      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b774:	2380      	movs	r3, #128	@ 0x80
 800b776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b77a:	e002      	b.n	800b782 <UART_SetConfig+0x7ae>
 800b77c:	2380      	movs	r3, #128	@ 0x80
 800b77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	4a55      	ldr	r2, [pc, #340]	@ (800b8dc <UART_SetConfig+0x908>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	f040 80f8 	bne.w	800b97e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b78e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b792:	2b20      	cmp	r3, #32
 800b794:	dc46      	bgt.n	800b824 <UART_SetConfig+0x850>
 800b796:	2b02      	cmp	r3, #2
 800b798:	db75      	blt.n	800b886 <UART_SetConfig+0x8b2>
 800b79a:	3b02      	subs	r3, #2
 800b79c:	2b1e      	cmp	r3, #30
 800b79e:	d872      	bhi.n	800b886 <UART_SetConfig+0x8b2>
 800b7a0:	a201      	add	r2, pc, #4	@ (adr r2, 800b7a8 <UART_SetConfig+0x7d4>)
 800b7a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7a6:	bf00      	nop
 800b7a8:	0800b82b 	.word	0x0800b82b
 800b7ac:	0800b887 	.word	0x0800b887
 800b7b0:	0800b833 	.word	0x0800b833
 800b7b4:	0800b887 	.word	0x0800b887
 800b7b8:	0800b887 	.word	0x0800b887
 800b7bc:	0800b887 	.word	0x0800b887
 800b7c0:	0800b843 	.word	0x0800b843
 800b7c4:	0800b887 	.word	0x0800b887
 800b7c8:	0800b887 	.word	0x0800b887
 800b7cc:	0800b887 	.word	0x0800b887
 800b7d0:	0800b887 	.word	0x0800b887
 800b7d4:	0800b887 	.word	0x0800b887
 800b7d8:	0800b887 	.word	0x0800b887
 800b7dc:	0800b887 	.word	0x0800b887
 800b7e0:	0800b853 	.word	0x0800b853
 800b7e4:	0800b887 	.word	0x0800b887
 800b7e8:	0800b887 	.word	0x0800b887
 800b7ec:	0800b887 	.word	0x0800b887
 800b7f0:	0800b887 	.word	0x0800b887
 800b7f4:	0800b887 	.word	0x0800b887
 800b7f8:	0800b887 	.word	0x0800b887
 800b7fc:	0800b887 	.word	0x0800b887
 800b800:	0800b887 	.word	0x0800b887
 800b804:	0800b887 	.word	0x0800b887
 800b808:	0800b887 	.word	0x0800b887
 800b80c:	0800b887 	.word	0x0800b887
 800b810:	0800b887 	.word	0x0800b887
 800b814:	0800b887 	.word	0x0800b887
 800b818:	0800b887 	.word	0x0800b887
 800b81c:	0800b887 	.word	0x0800b887
 800b820:	0800b879 	.word	0x0800b879
 800b824:	2b40      	cmp	r3, #64	@ 0x40
 800b826:	d02a      	beq.n	800b87e <UART_SetConfig+0x8aa>
 800b828:	e02d      	b.n	800b886 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b82a:	f7fd fe4f 	bl	80094cc <HAL_RCCEx_GetD3PCLK1Freq>
 800b82e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b830:	e02f      	b.n	800b892 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b836:	4618      	mov	r0, r3
 800b838:	f7fd fe5e 	bl	80094f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b83e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b840:	e027      	b.n	800b892 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b842:	f107 0318 	add.w	r3, r7, #24
 800b846:	4618      	mov	r0, r3
 800b848:	f7fd ffaa 	bl	80097a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b84c:	69fb      	ldr	r3, [r7, #28]
 800b84e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b850:	e01f      	b.n	800b892 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b852:	4b21      	ldr	r3, [pc, #132]	@ (800b8d8 <UART_SetConfig+0x904>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f003 0320 	and.w	r3, r3, #32
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d009      	beq.n	800b872 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b85e:	4b1e      	ldr	r3, [pc, #120]	@ (800b8d8 <UART_SetConfig+0x904>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	08db      	lsrs	r3, r3, #3
 800b864:	f003 0303 	and.w	r3, r3, #3
 800b868:	4a1d      	ldr	r2, [pc, #116]	@ (800b8e0 <UART_SetConfig+0x90c>)
 800b86a:	fa22 f303 	lsr.w	r3, r2, r3
 800b86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b870:	e00f      	b.n	800b892 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b872:	4b1b      	ldr	r3, [pc, #108]	@ (800b8e0 <UART_SetConfig+0x90c>)
 800b874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b876:	e00c      	b.n	800b892 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b878:	4b1a      	ldr	r3, [pc, #104]	@ (800b8e4 <UART_SetConfig+0x910>)
 800b87a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b87c:	e009      	b.n	800b892 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b87e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b884:	e005      	b.n	800b892 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b886:	2300      	movs	r3, #0
 800b888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b88a:	2301      	movs	r3, #1
 800b88c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b890:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b894:	2b00      	cmp	r3, #0
 800b896:	f000 81ee 	beq.w	800bc76 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b89e:	4a12      	ldr	r2, [pc, #72]	@ (800b8e8 <UART_SetConfig+0x914>)
 800b8a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8ac:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	685a      	ldr	r2, [r3, #4]
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	005b      	lsls	r3, r3, #1
 800b8b6:	4413      	add	r3, r2
 800b8b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d305      	bcc.n	800b8ca <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b8c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d910      	bls.n	800b8ec <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b8d0:	e1d1      	b.n	800bc76 <UART_SetConfig+0xca2>
 800b8d2:	bf00      	nop
 800b8d4:	40011c00 	.word	0x40011c00
 800b8d8:	58024400 	.word	0x58024400
 800b8dc:	58000c00 	.word	0x58000c00
 800b8e0:	03d09000 	.word	0x03d09000
 800b8e4:	003d0900 	.word	0x003d0900
 800b8e8:	0800d088 	.word	0x0800d088
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	60bb      	str	r3, [r7, #8]
 800b8f2:	60fa      	str	r2, [r7, #12]
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8f8:	4ac0      	ldr	r2, [pc, #768]	@ (800bbfc <UART_SetConfig+0xc28>)
 800b8fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8fe:	b29b      	uxth	r3, r3
 800b900:	2200      	movs	r2, #0
 800b902:	603b      	str	r3, [r7, #0]
 800b904:	607a      	str	r2, [r7, #4]
 800b906:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b90a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b90e:	f7f4 fd57 	bl	80003c0 <__aeabi_uldivmod>
 800b912:	4602      	mov	r2, r0
 800b914:	460b      	mov	r3, r1
 800b916:	4610      	mov	r0, r2
 800b918:	4619      	mov	r1, r3
 800b91a:	f04f 0200 	mov.w	r2, #0
 800b91e:	f04f 0300 	mov.w	r3, #0
 800b922:	020b      	lsls	r3, r1, #8
 800b924:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b928:	0202      	lsls	r2, r0, #8
 800b92a:	6979      	ldr	r1, [r7, #20]
 800b92c:	6849      	ldr	r1, [r1, #4]
 800b92e:	0849      	lsrs	r1, r1, #1
 800b930:	2000      	movs	r0, #0
 800b932:	460c      	mov	r4, r1
 800b934:	4605      	mov	r5, r0
 800b936:	eb12 0804 	adds.w	r8, r2, r4
 800b93a:	eb43 0905 	adc.w	r9, r3, r5
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	2200      	movs	r2, #0
 800b944:	469a      	mov	sl, r3
 800b946:	4693      	mov	fp, r2
 800b948:	4652      	mov	r2, sl
 800b94a:	465b      	mov	r3, fp
 800b94c:	4640      	mov	r0, r8
 800b94e:	4649      	mov	r1, r9
 800b950:	f7f4 fd36 	bl	80003c0 <__aeabi_uldivmod>
 800b954:	4602      	mov	r2, r0
 800b956:	460b      	mov	r3, r1
 800b958:	4613      	mov	r3, r2
 800b95a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b95c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b95e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b962:	d308      	bcc.n	800b976 <UART_SetConfig+0x9a2>
 800b964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b966:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b96a:	d204      	bcs.n	800b976 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b972:	60da      	str	r2, [r3, #12]
 800b974:	e17f      	b.n	800bc76 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b976:	2301      	movs	r3, #1
 800b978:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b97c:	e17b      	b.n	800bc76 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	69db      	ldr	r3, [r3, #28]
 800b982:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b986:	f040 80bd 	bne.w	800bb04 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b98a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b98e:	2b20      	cmp	r3, #32
 800b990:	dc48      	bgt.n	800ba24 <UART_SetConfig+0xa50>
 800b992:	2b00      	cmp	r3, #0
 800b994:	db7b      	blt.n	800ba8e <UART_SetConfig+0xaba>
 800b996:	2b20      	cmp	r3, #32
 800b998:	d879      	bhi.n	800ba8e <UART_SetConfig+0xaba>
 800b99a:	a201      	add	r2, pc, #4	@ (adr r2, 800b9a0 <UART_SetConfig+0x9cc>)
 800b99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a0:	0800ba2b 	.word	0x0800ba2b
 800b9a4:	0800ba33 	.word	0x0800ba33
 800b9a8:	0800ba8f 	.word	0x0800ba8f
 800b9ac:	0800ba8f 	.word	0x0800ba8f
 800b9b0:	0800ba3b 	.word	0x0800ba3b
 800b9b4:	0800ba8f 	.word	0x0800ba8f
 800b9b8:	0800ba8f 	.word	0x0800ba8f
 800b9bc:	0800ba8f 	.word	0x0800ba8f
 800b9c0:	0800ba4b 	.word	0x0800ba4b
 800b9c4:	0800ba8f 	.word	0x0800ba8f
 800b9c8:	0800ba8f 	.word	0x0800ba8f
 800b9cc:	0800ba8f 	.word	0x0800ba8f
 800b9d0:	0800ba8f 	.word	0x0800ba8f
 800b9d4:	0800ba8f 	.word	0x0800ba8f
 800b9d8:	0800ba8f 	.word	0x0800ba8f
 800b9dc:	0800ba8f 	.word	0x0800ba8f
 800b9e0:	0800ba5b 	.word	0x0800ba5b
 800b9e4:	0800ba8f 	.word	0x0800ba8f
 800b9e8:	0800ba8f 	.word	0x0800ba8f
 800b9ec:	0800ba8f 	.word	0x0800ba8f
 800b9f0:	0800ba8f 	.word	0x0800ba8f
 800b9f4:	0800ba8f 	.word	0x0800ba8f
 800b9f8:	0800ba8f 	.word	0x0800ba8f
 800b9fc:	0800ba8f 	.word	0x0800ba8f
 800ba00:	0800ba8f 	.word	0x0800ba8f
 800ba04:	0800ba8f 	.word	0x0800ba8f
 800ba08:	0800ba8f 	.word	0x0800ba8f
 800ba0c:	0800ba8f 	.word	0x0800ba8f
 800ba10:	0800ba8f 	.word	0x0800ba8f
 800ba14:	0800ba8f 	.word	0x0800ba8f
 800ba18:	0800ba8f 	.word	0x0800ba8f
 800ba1c:	0800ba8f 	.word	0x0800ba8f
 800ba20:	0800ba81 	.word	0x0800ba81
 800ba24:	2b40      	cmp	r3, #64	@ 0x40
 800ba26:	d02e      	beq.n	800ba86 <UART_SetConfig+0xab2>
 800ba28:	e031      	b.n	800ba8e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba2a:	f7fb feb1 	bl	8007790 <HAL_RCC_GetPCLK1Freq>
 800ba2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ba30:	e033      	b.n	800ba9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba32:	f7fb fec3 	bl	80077bc <HAL_RCC_GetPCLK2Freq>
 800ba36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ba38:	e02f      	b.n	800ba9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f7fd fd5a 	bl	80094f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba48:	e027      	b.n	800ba9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba4a:	f107 0318 	add.w	r3, r7, #24
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7fd fea6 	bl	80097a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba54:	69fb      	ldr	r3, [r7, #28]
 800ba56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba58:	e01f      	b.n	800ba9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba5a:	4b69      	ldr	r3, [pc, #420]	@ (800bc00 <UART_SetConfig+0xc2c>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f003 0320 	and.w	r3, r3, #32
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d009      	beq.n	800ba7a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ba66:	4b66      	ldr	r3, [pc, #408]	@ (800bc00 <UART_SetConfig+0xc2c>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	08db      	lsrs	r3, r3, #3
 800ba6c:	f003 0303 	and.w	r3, r3, #3
 800ba70:	4a64      	ldr	r2, [pc, #400]	@ (800bc04 <UART_SetConfig+0xc30>)
 800ba72:	fa22 f303 	lsr.w	r3, r2, r3
 800ba76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ba78:	e00f      	b.n	800ba9a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800ba7a:	4b62      	ldr	r3, [pc, #392]	@ (800bc04 <UART_SetConfig+0xc30>)
 800ba7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba7e:	e00c      	b.n	800ba9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ba80:	4b61      	ldr	r3, [pc, #388]	@ (800bc08 <UART_SetConfig+0xc34>)
 800ba82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba84:	e009      	b.n	800ba9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba8c:	e005      	b.n	800ba9a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ba92:	2301      	movs	r3, #1
 800ba94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ba98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ba9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	f000 80ea 	beq.w	800bc76 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baa6:	4a55      	ldr	r2, [pc, #340]	@ (800bbfc <UART_SetConfig+0xc28>)
 800baa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800baac:	461a      	mov	r2, r3
 800baae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bab0:	fbb3 f3f2 	udiv	r3, r3, r2
 800bab4:	005a      	lsls	r2, r3, #1
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	685b      	ldr	r3, [r3, #4]
 800baba:	085b      	lsrs	r3, r3, #1
 800babc:	441a      	add	r2, r3
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bac6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baca:	2b0f      	cmp	r3, #15
 800bacc:	d916      	bls.n	800bafc <UART_SetConfig+0xb28>
 800bace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bad0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bad4:	d212      	bcs.n	800bafc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bad8:	b29b      	uxth	r3, r3
 800bada:	f023 030f 	bic.w	r3, r3, #15
 800bade:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bae2:	085b      	lsrs	r3, r3, #1
 800bae4:	b29b      	uxth	r3, r3
 800bae6:	f003 0307 	and.w	r3, r3, #7
 800baea:	b29a      	uxth	r2, r3
 800baec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800baee:	4313      	orrs	r3, r2
 800baf0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800baf8:	60da      	str	r2, [r3, #12]
 800bafa:	e0bc      	b.n	800bc76 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800bafc:	2301      	movs	r3, #1
 800bafe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bb02:	e0b8      	b.n	800bc76 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bb04:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bb08:	2b20      	cmp	r3, #32
 800bb0a:	dc4b      	bgt.n	800bba4 <UART_SetConfig+0xbd0>
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	f2c0 8087 	blt.w	800bc20 <UART_SetConfig+0xc4c>
 800bb12:	2b20      	cmp	r3, #32
 800bb14:	f200 8084 	bhi.w	800bc20 <UART_SetConfig+0xc4c>
 800bb18:	a201      	add	r2, pc, #4	@ (adr r2, 800bb20 <UART_SetConfig+0xb4c>)
 800bb1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb1e:	bf00      	nop
 800bb20:	0800bbab 	.word	0x0800bbab
 800bb24:	0800bbb3 	.word	0x0800bbb3
 800bb28:	0800bc21 	.word	0x0800bc21
 800bb2c:	0800bc21 	.word	0x0800bc21
 800bb30:	0800bbbb 	.word	0x0800bbbb
 800bb34:	0800bc21 	.word	0x0800bc21
 800bb38:	0800bc21 	.word	0x0800bc21
 800bb3c:	0800bc21 	.word	0x0800bc21
 800bb40:	0800bbcb 	.word	0x0800bbcb
 800bb44:	0800bc21 	.word	0x0800bc21
 800bb48:	0800bc21 	.word	0x0800bc21
 800bb4c:	0800bc21 	.word	0x0800bc21
 800bb50:	0800bc21 	.word	0x0800bc21
 800bb54:	0800bc21 	.word	0x0800bc21
 800bb58:	0800bc21 	.word	0x0800bc21
 800bb5c:	0800bc21 	.word	0x0800bc21
 800bb60:	0800bbdb 	.word	0x0800bbdb
 800bb64:	0800bc21 	.word	0x0800bc21
 800bb68:	0800bc21 	.word	0x0800bc21
 800bb6c:	0800bc21 	.word	0x0800bc21
 800bb70:	0800bc21 	.word	0x0800bc21
 800bb74:	0800bc21 	.word	0x0800bc21
 800bb78:	0800bc21 	.word	0x0800bc21
 800bb7c:	0800bc21 	.word	0x0800bc21
 800bb80:	0800bc21 	.word	0x0800bc21
 800bb84:	0800bc21 	.word	0x0800bc21
 800bb88:	0800bc21 	.word	0x0800bc21
 800bb8c:	0800bc21 	.word	0x0800bc21
 800bb90:	0800bc21 	.word	0x0800bc21
 800bb94:	0800bc21 	.word	0x0800bc21
 800bb98:	0800bc21 	.word	0x0800bc21
 800bb9c:	0800bc21 	.word	0x0800bc21
 800bba0:	0800bc13 	.word	0x0800bc13
 800bba4:	2b40      	cmp	r3, #64	@ 0x40
 800bba6:	d037      	beq.n	800bc18 <UART_SetConfig+0xc44>
 800bba8:	e03a      	b.n	800bc20 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbaa:	f7fb fdf1 	bl	8007790 <HAL_RCC_GetPCLK1Freq>
 800bbae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bbb0:	e03c      	b.n	800bc2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bbb2:	f7fb fe03 	bl	80077bc <HAL_RCC_GetPCLK2Freq>
 800bbb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bbb8:	e038      	b.n	800bc2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7fd fc9a 	bl	80094f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bbc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbc8:	e030      	b.n	800bc2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbca:	f107 0318 	add.w	r3, r7, #24
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f7fd fde6 	bl	80097a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bbd4:	69fb      	ldr	r3, [r7, #28]
 800bbd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbd8:	e028      	b.n	800bc2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbda:	4b09      	ldr	r3, [pc, #36]	@ (800bc00 <UART_SetConfig+0xc2c>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f003 0320 	and.w	r3, r3, #32
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d012      	beq.n	800bc0c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bbe6:	4b06      	ldr	r3, [pc, #24]	@ (800bc00 <UART_SetConfig+0xc2c>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	08db      	lsrs	r3, r3, #3
 800bbec:	f003 0303 	and.w	r3, r3, #3
 800bbf0:	4a04      	ldr	r2, [pc, #16]	@ (800bc04 <UART_SetConfig+0xc30>)
 800bbf2:	fa22 f303 	lsr.w	r3, r2, r3
 800bbf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bbf8:	e018      	b.n	800bc2c <UART_SetConfig+0xc58>
 800bbfa:	bf00      	nop
 800bbfc:	0800d088 	.word	0x0800d088
 800bc00:	58024400 	.word	0x58024400
 800bc04:	03d09000 	.word	0x03d09000
 800bc08:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800bc0c:	4b24      	ldr	r3, [pc, #144]	@ (800bca0 <UART_SetConfig+0xccc>)
 800bc0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc10:	e00c      	b.n	800bc2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bc12:	4b24      	ldr	r3, [pc, #144]	@ (800bca4 <UART_SetConfig+0xcd0>)
 800bc14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc16:	e009      	b.n	800bc2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc1e:	e005      	b.n	800bc2c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800bc20:	2300      	movs	r3, #0
 800bc22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bc24:	2301      	movs	r3, #1
 800bc26:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bc2a:	bf00      	nop
    }

    if (pclk != 0U)
 800bc2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d021      	beq.n	800bc76 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc36:	4a1c      	ldr	r2, [pc, #112]	@ (800bca8 <UART_SetConfig+0xcd4>)
 800bc38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc40:	fbb3 f2f2 	udiv	r2, r3, r2
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	685b      	ldr	r3, [r3, #4]
 800bc48:	085b      	lsrs	r3, r3, #1
 800bc4a:	441a      	add	r2, r3
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc54:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc58:	2b0f      	cmp	r3, #15
 800bc5a:	d909      	bls.n	800bc70 <UART_SetConfig+0xc9c>
 800bc5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc62:	d205      	bcs.n	800bc70 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bc64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc66:	b29a      	uxth	r2, r3
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	60da      	str	r2, [r3, #12]
 800bc6e:	e002      	b.n	800bc76 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800bc70:	2301      	movs	r3, #1
 800bc72:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	2201      	movs	r2, #1
 800bc7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	2201      	movs	r2, #1
 800bc82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bc92:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3748      	adds	r7, #72	@ 0x48
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bca0:	03d09000 	.word	0x03d09000
 800bca4:	003d0900 	.word	0x003d0900
 800bca8:	0800d088 	.word	0x0800d088

0800bcac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcb8:	f003 0308 	and.w	r3, r3, #8
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d00a      	beq.n	800bcd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	430a      	orrs	r2, r1
 800bcd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcda:	f003 0301 	and.w	r3, r3, #1
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d00a      	beq.n	800bcf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	430a      	orrs	r2, r1
 800bcf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcfc:	f003 0302 	and.w	r3, r3, #2
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d00a      	beq.n	800bd1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	430a      	orrs	r2, r1
 800bd18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd1e:	f003 0304 	and.w	r3, r3, #4
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d00a      	beq.n	800bd3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	430a      	orrs	r2, r1
 800bd3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd40:	f003 0310 	and.w	r3, r3, #16
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d00a      	beq.n	800bd5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	689b      	ldr	r3, [r3, #8]
 800bd4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	430a      	orrs	r2, r1
 800bd5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd62:	f003 0320 	and.w	r3, r3, #32
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d00a      	beq.n	800bd80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	689b      	ldr	r3, [r3, #8]
 800bd70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	430a      	orrs	r2, r1
 800bd7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d01a      	beq.n	800bdc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	430a      	orrs	r2, r1
 800bda0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bda6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bdaa:	d10a      	bne.n	800bdc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	685b      	ldr	r3, [r3, #4]
 800bdb2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	430a      	orrs	r2, r1
 800bdc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d00a      	beq.n	800bde4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	430a      	orrs	r2, r1
 800bde2:	605a      	str	r2, [r3, #4]
  }
}
 800bde4:	bf00      	nop
 800bde6:	370c      	adds	r7, #12
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr

0800bdf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b098      	sub	sp, #96	@ 0x60
 800bdf4:	af02      	add	r7, sp, #8
 800bdf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800be00:	f7f7 f8f0 	bl	8002fe4 <HAL_GetTick>
 800be04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f003 0308 	and.w	r3, r3, #8
 800be10:	2b08      	cmp	r3, #8
 800be12:	d12f      	bne.n	800be74 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800be18:	9300      	str	r3, [sp, #0]
 800be1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be1c:	2200      	movs	r2, #0
 800be1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 f88e 	bl	800bf44 <UART_WaitOnFlagUntilTimeout>
 800be28:	4603      	mov	r3, r0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d022      	beq.n	800be74 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be36:	e853 3f00 	ldrex	r3, [r3]
 800be3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800be3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800be42:	653b      	str	r3, [r7, #80]	@ 0x50
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	461a      	mov	r2, r3
 800be4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be4c:	647b      	str	r3, [r7, #68]	@ 0x44
 800be4e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800be52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be54:	e841 2300 	strex	r3, r2, [r1]
 800be58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800be5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d1e6      	bne.n	800be2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2220      	movs	r2, #32
 800be64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be70:	2303      	movs	r3, #3
 800be72:	e063      	b.n	800bf3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f003 0304 	and.w	r3, r3, #4
 800be7e:	2b04      	cmp	r3, #4
 800be80:	d149      	bne.n	800bf16 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be82:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800be86:	9300      	str	r3, [sp, #0]
 800be88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be8a:	2200      	movs	r2, #0
 800be8c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 f857 	bl	800bf44 <UART_WaitOnFlagUntilTimeout>
 800be96:	4603      	mov	r3, r0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d03c      	beq.n	800bf16 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bea4:	e853 3f00 	ldrex	r3, [r3]
 800bea8:	623b      	str	r3, [r7, #32]
   return(result);
 800beaa:	6a3b      	ldr	r3, [r7, #32]
 800beac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800beb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	461a      	mov	r2, r3
 800beb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800beba:	633b      	str	r3, [r7, #48]	@ 0x30
 800bebc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bebe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bec0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bec2:	e841 2300 	strex	r3, r2, [r1]
 800bec6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beca:	2b00      	cmp	r3, #0
 800becc:	d1e6      	bne.n	800be9c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	3308      	adds	r3, #8
 800bed4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	e853 3f00 	ldrex	r3, [r3]
 800bedc:	60fb      	str	r3, [r7, #12]
   return(result);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f023 0301 	bic.w	r3, r3, #1
 800bee4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	3308      	adds	r3, #8
 800beec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800beee:	61fa      	str	r2, [r7, #28]
 800bef0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef2:	69b9      	ldr	r1, [r7, #24]
 800bef4:	69fa      	ldr	r2, [r7, #28]
 800bef6:	e841 2300 	strex	r3, r2, [r1]
 800befa:	617b      	str	r3, [r7, #20]
   return(result);
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d1e5      	bne.n	800bece <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2220      	movs	r2, #32
 800bf06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf12:	2303      	movs	r3, #3
 800bf14:	e012      	b.n	800bf3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2220      	movs	r2, #32
 800bf1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2220      	movs	r2, #32
 800bf22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2200      	movs	r2, #0
 800bf36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bf3a:	2300      	movs	r3, #0
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3758      	adds	r7, #88	@ 0x58
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b084      	sub	sp, #16
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	603b      	str	r3, [r7, #0]
 800bf50:	4613      	mov	r3, r2
 800bf52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf54:	e04f      	b.n	800bff6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf56:	69bb      	ldr	r3, [r7, #24]
 800bf58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf5c:	d04b      	beq.n	800bff6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf5e:	f7f7 f841 	bl	8002fe4 <HAL_GetTick>
 800bf62:	4602      	mov	r2, r0
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	1ad3      	subs	r3, r2, r3
 800bf68:	69ba      	ldr	r2, [r7, #24]
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d302      	bcc.n	800bf74 <UART_WaitOnFlagUntilTimeout+0x30>
 800bf6e:	69bb      	ldr	r3, [r7, #24]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d101      	bne.n	800bf78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bf74:	2303      	movs	r3, #3
 800bf76:	e04e      	b.n	800c016 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f003 0304 	and.w	r3, r3, #4
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d037      	beq.n	800bff6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	2b80      	cmp	r3, #128	@ 0x80
 800bf8a:	d034      	beq.n	800bff6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	2b40      	cmp	r3, #64	@ 0x40
 800bf90:	d031      	beq.n	800bff6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	69db      	ldr	r3, [r3, #28]
 800bf98:	f003 0308 	and.w	r3, r3, #8
 800bf9c:	2b08      	cmp	r3, #8
 800bf9e:	d110      	bne.n	800bfc2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2208      	movs	r2, #8
 800bfa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bfa8:	68f8      	ldr	r0, [r7, #12]
 800bfaa:	f000 f839 	bl	800c020 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2208      	movs	r2, #8
 800bfb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	e029      	b.n	800c016 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	69db      	ldr	r3, [r3, #28]
 800bfc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bfcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bfd0:	d111      	bne.n	800bff6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bfda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bfdc:	68f8      	ldr	r0, [r7, #12]
 800bfde:	f000 f81f 	bl	800c020 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2220      	movs	r2, #32
 800bfe6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2200      	movs	r2, #0
 800bfee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bff2:	2303      	movs	r3, #3
 800bff4:	e00f      	b.n	800c016 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	69da      	ldr	r2, [r3, #28]
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	4013      	ands	r3, r2
 800c000:	68ba      	ldr	r2, [r7, #8]
 800c002:	429a      	cmp	r2, r3
 800c004:	bf0c      	ite	eq
 800c006:	2301      	moveq	r3, #1
 800c008:	2300      	movne	r3, #0
 800c00a:	b2db      	uxtb	r3, r3
 800c00c:	461a      	mov	r2, r3
 800c00e:	79fb      	ldrb	r3, [r7, #7]
 800c010:	429a      	cmp	r2, r3
 800c012:	d0a0      	beq.n	800bf56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c014:	2300      	movs	r3, #0
}
 800c016:	4618      	mov	r0, r3
 800c018:	3710      	adds	r7, #16
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
	...

0800c020 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c020:	b480      	push	{r7}
 800c022:	b095      	sub	sp, #84	@ 0x54
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c02e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c030:	e853 3f00 	ldrex	r3, [r3]
 800c034:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c038:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c03c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	461a      	mov	r2, r3
 800c044:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c046:	643b      	str	r3, [r7, #64]	@ 0x40
 800c048:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c04a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c04c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c04e:	e841 2300 	strex	r3, r2, [r1]
 800c052:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c056:	2b00      	cmp	r3, #0
 800c058:	d1e6      	bne.n	800c028 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	3308      	adds	r3, #8
 800c060:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c062:	6a3b      	ldr	r3, [r7, #32]
 800c064:	e853 3f00 	ldrex	r3, [r3]
 800c068:	61fb      	str	r3, [r7, #28]
   return(result);
 800c06a:	69fa      	ldr	r2, [r7, #28]
 800c06c:	4b1e      	ldr	r3, [pc, #120]	@ (800c0e8 <UART_EndRxTransfer+0xc8>)
 800c06e:	4013      	ands	r3, r2
 800c070:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	3308      	adds	r3, #8
 800c078:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c07a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c07c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c07e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c080:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c082:	e841 2300 	strex	r3, r2, [r1]
 800c086:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d1e5      	bne.n	800c05a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c092:	2b01      	cmp	r3, #1
 800c094:	d118      	bne.n	800c0c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	e853 3f00 	ldrex	r3, [r3]
 800c0a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	f023 0310 	bic.w	r3, r3, #16
 800c0aa:	647b      	str	r3, [r7, #68]	@ 0x44
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c0b4:	61bb      	str	r3, [r7, #24]
 800c0b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b8:	6979      	ldr	r1, [r7, #20]
 800c0ba:	69ba      	ldr	r2, [r7, #24]
 800c0bc:	e841 2300 	strex	r3, r2, [r1]
 800c0c0:	613b      	str	r3, [r7, #16]
   return(result);
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d1e6      	bne.n	800c096 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2220      	movs	r2, #32
 800c0cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c0dc:	bf00      	nop
 800c0de:	3754      	adds	r7, #84	@ 0x54
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr
 800c0e8:	effffffe 	.word	0xeffffffe

0800c0ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b085      	sub	sp, #20
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d101      	bne.n	800c102 <HAL_UARTEx_DisableFifoMode+0x16>
 800c0fe:	2302      	movs	r3, #2
 800c100:	e027      	b.n	800c152 <HAL_UARTEx_DisableFifoMode+0x66>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2201      	movs	r2, #1
 800c106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2224      	movs	r2, #36	@ 0x24
 800c10e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	681a      	ldr	r2, [r3, #0]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f022 0201 	bic.w	r2, r2, #1
 800c128:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c130:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2200      	movs	r2, #0
 800c136:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	68fa      	ldr	r2, [r7, #12]
 800c13e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2220      	movs	r2, #32
 800c144:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2200      	movs	r2, #0
 800c14c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c150:	2300      	movs	r3, #0
}
 800c152:	4618      	mov	r0, r3
 800c154:	3714      	adds	r7, #20
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr

0800c15e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c15e:	b580      	push	{r7, lr}
 800c160:	b084      	sub	sp, #16
 800c162:	af00      	add	r7, sp, #0
 800c164:	6078      	str	r0, [r7, #4]
 800c166:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c16e:	2b01      	cmp	r3, #1
 800c170:	d101      	bne.n	800c176 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c172:	2302      	movs	r3, #2
 800c174:	e02d      	b.n	800c1d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2201      	movs	r2, #1
 800c17a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2224      	movs	r2, #36	@ 0x24
 800c182:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	681a      	ldr	r2, [r3, #0]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f022 0201 	bic.w	r2, r2, #1
 800c19c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	689b      	ldr	r3, [r3, #8]
 800c1a4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	683a      	ldr	r2, [r7, #0]
 800c1ae:	430a      	orrs	r2, r1
 800c1b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 f850 	bl	800c258 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	68fa      	ldr	r2, [r7, #12]
 800c1be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2220      	movs	r2, #32
 800c1c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c1d0:	2300      	movs	r3, #0
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3710      	adds	r7, #16
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}

0800c1da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b084      	sub	sp, #16
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	6078      	str	r0, [r7, #4]
 800c1e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c1ea:	2b01      	cmp	r3, #1
 800c1ec:	d101      	bne.n	800c1f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c1ee:	2302      	movs	r3, #2
 800c1f0:	e02d      	b.n	800c24e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2201      	movs	r2, #1
 800c1f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2224      	movs	r2, #36	@ 0x24
 800c1fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	681a      	ldr	r2, [r3, #0]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f022 0201 	bic.w	r2, r2, #1
 800c218:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	689b      	ldr	r3, [r3, #8]
 800c220:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	683a      	ldr	r2, [r7, #0]
 800c22a:	430a      	orrs	r2, r1
 800c22c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 f812 	bl	800c258 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	68fa      	ldr	r2, [r7, #12]
 800c23a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2220      	movs	r2, #32
 800c240:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2200      	movs	r2, #0
 800c248:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c24c:	2300      	movs	r3, #0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3710      	adds	r7, #16
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
	...

0800c258 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c258:	b480      	push	{r7}
 800c25a:	b085      	sub	sp, #20
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c264:	2b00      	cmp	r3, #0
 800c266:	d108      	bne.n	800c27a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2201      	movs	r2, #1
 800c26c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2201      	movs	r2, #1
 800c274:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c278:	e031      	b.n	800c2de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c27a:	2310      	movs	r3, #16
 800c27c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c27e:	2310      	movs	r3, #16
 800c280:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	689b      	ldr	r3, [r3, #8]
 800c288:	0e5b      	lsrs	r3, r3, #25
 800c28a:	b2db      	uxtb	r3, r3
 800c28c:	f003 0307 	and.w	r3, r3, #7
 800c290:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	689b      	ldr	r3, [r3, #8]
 800c298:	0f5b      	lsrs	r3, r3, #29
 800c29a:	b2db      	uxtb	r3, r3
 800c29c:	f003 0307 	and.w	r3, r3, #7
 800c2a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c2a2:	7bbb      	ldrb	r3, [r7, #14]
 800c2a4:	7b3a      	ldrb	r2, [r7, #12]
 800c2a6:	4911      	ldr	r1, [pc, #68]	@ (800c2ec <UARTEx_SetNbDataToProcess+0x94>)
 800c2a8:	5c8a      	ldrb	r2, [r1, r2]
 800c2aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c2ae:	7b3a      	ldrb	r2, [r7, #12]
 800c2b0:	490f      	ldr	r1, [pc, #60]	@ (800c2f0 <UARTEx_SetNbDataToProcess+0x98>)
 800c2b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c2b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c2b8:	b29a      	uxth	r2, r3
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c2c0:	7bfb      	ldrb	r3, [r7, #15]
 800c2c2:	7b7a      	ldrb	r2, [r7, #13]
 800c2c4:	4909      	ldr	r1, [pc, #36]	@ (800c2ec <UARTEx_SetNbDataToProcess+0x94>)
 800c2c6:	5c8a      	ldrb	r2, [r1, r2]
 800c2c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c2cc:	7b7a      	ldrb	r2, [r7, #13]
 800c2ce:	4908      	ldr	r1, [pc, #32]	@ (800c2f0 <UARTEx_SetNbDataToProcess+0x98>)
 800c2d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c2d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c2d6:	b29a      	uxth	r2, r3
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c2de:	bf00      	nop
 800c2e0:	3714      	adds	r7, #20
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr
 800c2ea:	bf00      	nop
 800c2ec:	0800d0a0 	.word	0x0800d0a0
 800c2f0:	0800d0a8 	.word	0x0800d0a8

0800c2f4 <siprintf>:
 800c2f4:	b40e      	push	{r1, r2, r3}
 800c2f6:	b510      	push	{r4, lr}
 800c2f8:	b09d      	sub	sp, #116	@ 0x74
 800c2fa:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c2fc:	9002      	str	r0, [sp, #8]
 800c2fe:	9006      	str	r0, [sp, #24]
 800c300:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c304:	480a      	ldr	r0, [pc, #40]	@ (800c330 <siprintf+0x3c>)
 800c306:	9107      	str	r1, [sp, #28]
 800c308:	9104      	str	r1, [sp, #16]
 800c30a:	490a      	ldr	r1, [pc, #40]	@ (800c334 <siprintf+0x40>)
 800c30c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c310:	9105      	str	r1, [sp, #20]
 800c312:	2400      	movs	r4, #0
 800c314:	a902      	add	r1, sp, #8
 800c316:	6800      	ldr	r0, [r0, #0]
 800c318:	9301      	str	r3, [sp, #4]
 800c31a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c31c:	f000 f9a2 	bl	800c664 <_svfiprintf_r>
 800c320:	9b02      	ldr	r3, [sp, #8]
 800c322:	701c      	strb	r4, [r3, #0]
 800c324:	b01d      	add	sp, #116	@ 0x74
 800c326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c32a:	b003      	add	sp, #12
 800c32c:	4770      	bx	lr
 800c32e:	bf00      	nop
 800c330:	24000018 	.word	0x24000018
 800c334:	ffff0208 	.word	0xffff0208

0800c338 <memset>:
 800c338:	4402      	add	r2, r0
 800c33a:	4603      	mov	r3, r0
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d100      	bne.n	800c342 <memset+0xa>
 800c340:	4770      	bx	lr
 800c342:	f803 1b01 	strb.w	r1, [r3], #1
 800c346:	e7f9      	b.n	800c33c <memset+0x4>

0800c348 <__errno>:
 800c348:	4b01      	ldr	r3, [pc, #4]	@ (800c350 <__errno+0x8>)
 800c34a:	6818      	ldr	r0, [r3, #0]
 800c34c:	4770      	bx	lr
 800c34e:	bf00      	nop
 800c350:	24000018 	.word	0x24000018

0800c354 <__libc_init_array>:
 800c354:	b570      	push	{r4, r5, r6, lr}
 800c356:	4d0d      	ldr	r5, [pc, #52]	@ (800c38c <__libc_init_array+0x38>)
 800c358:	4c0d      	ldr	r4, [pc, #52]	@ (800c390 <__libc_init_array+0x3c>)
 800c35a:	1b64      	subs	r4, r4, r5
 800c35c:	10a4      	asrs	r4, r4, #2
 800c35e:	2600      	movs	r6, #0
 800c360:	42a6      	cmp	r6, r4
 800c362:	d109      	bne.n	800c378 <__libc_init_array+0x24>
 800c364:	4d0b      	ldr	r5, [pc, #44]	@ (800c394 <__libc_init_array+0x40>)
 800c366:	4c0c      	ldr	r4, [pc, #48]	@ (800c398 <__libc_init_array+0x44>)
 800c368:	f000 fc64 	bl	800cc34 <_init>
 800c36c:	1b64      	subs	r4, r4, r5
 800c36e:	10a4      	asrs	r4, r4, #2
 800c370:	2600      	movs	r6, #0
 800c372:	42a6      	cmp	r6, r4
 800c374:	d105      	bne.n	800c382 <__libc_init_array+0x2e>
 800c376:	bd70      	pop	{r4, r5, r6, pc}
 800c378:	f855 3b04 	ldr.w	r3, [r5], #4
 800c37c:	4798      	blx	r3
 800c37e:	3601      	adds	r6, #1
 800c380:	e7ee      	b.n	800c360 <__libc_init_array+0xc>
 800c382:	f855 3b04 	ldr.w	r3, [r5], #4
 800c386:	4798      	blx	r3
 800c388:	3601      	adds	r6, #1
 800c38a:	e7f2      	b.n	800c372 <__libc_init_array+0x1e>
 800c38c:	0800d0ec 	.word	0x0800d0ec
 800c390:	0800d0ec 	.word	0x0800d0ec
 800c394:	0800d0ec 	.word	0x0800d0ec
 800c398:	0800d0f4 	.word	0x0800d0f4

0800c39c <__retarget_lock_acquire_recursive>:
 800c39c:	4770      	bx	lr

0800c39e <__retarget_lock_release_recursive>:
 800c39e:	4770      	bx	lr

0800c3a0 <memcpy>:
 800c3a0:	440a      	add	r2, r1
 800c3a2:	4291      	cmp	r1, r2
 800c3a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3a8:	d100      	bne.n	800c3ac <memcpy+0xc>
 800c3aa:	4770      	bx	lr
 800c3ac:	b510      	push	{r4, lr}
 800c3ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3b6:	4291      	cmp	r1, r2
 800c3b8:	d1f9      	bne.n	800c3ae <memcpy+0xe>
 800c3ba:	bd10      	pop	{r4, pc}

0800c3bc <_free_r>:
 800c3bc:	b538      	push	{r3, r4, r5, lr}
 800c3be:	4605      	mov	r5, r0
 800c3c0:	2900      	cmp	r1, #0
 800c3c2:	d041      	beq.n	800c448 <_free_r+0x8c>
 800c3c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3c8:	1f0c      	subs	r4, r1, #4
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	bfb8      	it	lt
 800c3ce:	18e4      	addlt	r4, r4, r3
 800c3d0:	f000 f8e0 	bl	800c594 <__malloc_lock>
 800c3d4:	4a1d      	ldr	r2, [pc, #116]	@ (800c44c <_free_r+0x90>)
 800c3d6:	6813      	ldr	r3, [r2, #0]
 800c3d8:	b933      	cbnz	r3, 800c3e8 <_free_r+0x2c>
 800c3da:	6063      	str	r3, [r4, #4]
 800c3dc:	6014      	str	r4, [r2, #0]
 800c3de:	4628      	mov	r0, r5
 800c3e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3e4:	f000 b8dc 	b.w	800c5a0 <__malloc_unlock>
 800c3e8:	42a3      	cmp	r3, r4
 800c3ea:	d908      	bls.n	800c3fe <_free_r+0x42>
 800c3ec:	6820      	ldr	r0, [r4, #0]
 800c3ee:	1821      	adds	r1, r4, r0
 800c3f0:	428b      	cmp	r3, r1
 800c3f2:	bf01      	itttt	eq
 800c3f4:	6819      	ldreq	r1, [r3, #0]
 800c3f6:	685b      	ldreq	r3, [r3, #4]
 800c3f8:	1809      	addeq	r1, r1, r0
 800c3fa:	6021      	streq	r1, [r4, #0]
 800c3fc:	e7ed      	b.n	800c3da <_free_r+0x1e>
 800c3fe:	461a      	mov	r2, r3
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	b10b      	cbz	r3, 800c408 <_free_r+0x4c>
 800c404:	42a3      	cmp	r3, r4
 800c406:	d9fa      	bls.n	800c3fe <_free_r+0x42>
 800c408:	6811      	ldr	r1, [r2, #0]
 800c40a:	1850      	adds	r0, r2, r1
 800c40c:	42a0      	cmp	r0, r4
 800c40e:	d10b      	bne.n	800c428 <_free_r+0x6c>
 800c410:	6820      	ldr	r0, [r4, #0]
 800c412:	4401      	add	r1, r0
 800c414:	1850      	adds	r0, r2, r1
 800c416:	4283      	cmp	r3, r0
 800c418:	6011      	str	r1, [r2, #0]
 800c41a:	d1e0      	bne.n	800c3de <_free_r+0x22>
 800c41c:	6818      	ldr	r0, [r3, #0]
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	6053      	str	r3, [r2, #4]
 800c422:	4408      	add	r0, r1
 800c424:	6010      	str	r0, [r2, #0]
 800c426:	e7da      	b.n	800c3de <_free_r+0x22>
 800c428:	d902      	bls.n	800c430 <_free_r+0x74>
 800c42a:	230c      	movs	r3, #12
 800c42c:	602b      	str	r3, [r5, #0]
 800c42e:	e7d6      	b.n	800c3de <_free_r+0x22>
 800c430:	6820      	ldr	r0, [r4, #0]
 800c432:	1821      	adds	r1, r4, r0
 800c434:	428b      	cmp	r3, r1
 800c436:	bf04      	itt	eq
 800c438:	6819      	ldreq	r1, [r3, #0]
 800c43a:	685b      	ldreq	r3, [r3, #4]
 800c43c:	6063      	str	r3, [r4, #4]
 800c43e:	bf04      	itt	eq
 800c440:	1809      	addeq	r1, r1, r0
 800c442:	6021      	streq	r1, [r4, #0]
 800c444:	6054      	str	r4, [r2, #4]
 800c446:	e7ca      	b.n	800c3de <_free_r+0x22>
 800c448:	bd38      	pop	{r3, r4, r5, pc}
 800c44a:	bf00      	nop
 800c44c:	24000eac 	.word	0x24000eac

0800c450 <sbrk_aligned>:
 800c450:	b570      	push	{r4, r5, r6, lr}
 800c452:	4e0f      	ldr	r6, [pc, #60]	@ (800c490 <sbrk_aligned+0x40>)
 800c454:	460c      	mov	r4, r1
 800c456:	6831      	ldr	r1, [r6, #0]
 800c458:	4605      	mov	r5, r0
 800c45a:	b911      	cbnz	r1, 800c462 <sbrk_aligned+0x12>
 800c45c:	f000 fba4 	bl	800cba8 <_sbrk_r>
 800c460:	6030      	str	r0, [r6, #0]
 800c462:	4621      	mov	r1, r4
 800c464:	4628      	mov	r0, r5
 800c466:	f000 fb9f 	bl	800cba8 <_sbrk_r>
 800c46a:	1c43      	adds	r3, r0, #1
 800c46c:	d103      	bne.n	800c476 <sbrk_aligned+0x26>
 800c46e:	f04f 34ff 	mov.w	r4, #4294967295
 800c472:	4620      	mov	r0, r4
 800c474:	bd70      	pop	{r4, r5, r6, pc}
 800c476:	1cc4      	adds	r4, r0, #3
 800c478:	f024 0403 	bic.w	r4, r4, #3
 800c47c:	42a0      	cmp	r0, r4
 800c47e:	d0f8      	beq.n	800c472 <sbrk_aligned+0x22>
 800c480:	1a21      	subs	r1, r4, r0
 800c482:	4628      	mov	r0, r5
 800c484:	f000 fb90 	bl	800cba8 <_sbrk_r>
 800c488:	3001      	adds	r0, #1
 800c48a:	d1f2      	bne.n	800c472 <sbrk_aligned+0x22>
 800c48c:	e7ef      	b.n	800c46e <sbrk_aligned+0x1e>
 800c48e:	bf00      	nop
 800c490:	24000ea8 	.word	0x24000ea8

0800c494 <_malloc_r>:
 800c494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c498:	1ccd      	adds	r5, r1, #3
 800c49a:	f025 0503 	bic.w	r5, r5, #3
 800c49e:	3508      	adds	r5, #8
 800c4a0:	2d0c      	cmp	r5, #12
 800c4a2:	bf38      	it	cc
 800c4a4:	250c      	movcc	r5, #12
 800c4a6:	2d00      	cmp	r5, #0
 800c4a8:	4606      	mov	r6, r0
 800c4aa:	db01      	blt.n	800c4b0 <_malloc_r+0x1c>
 800c4ac:	42a9      	cmp	r1, r5
 800c4ae:	d904      	bls.n	800c4ba <_malloc_r+0x26>
 800c4b0:	230c      	movs	r3, #12
 800c4b2:	6033      	str	r3, [r6, #0]
 800c4b4:	2000      	movs	r0, #0
 800c4b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c590 <_malloc_r+0xfc>
 800c4be:	f000 f869 	bl	800c594 <__malloc_lock>
 800c4c2:	f8d8 3000 	ldr.w	r3, [r8]
 800c4c6:	461c      	mov	r4, r3
 800c4c8:	bb44      	cbnz	r4, 800c51c <_malloc_r+0x88>
 800c4ca:	4629      	mov	r1, r5
 800c4cc:	4630      	mov	r0, r6
 800c4ce:	f7ff ffbf 	bl	800c450 <sbrk_aligned>
 800c4d2:	1c43      	adds	r3, r0, #1
 800c4d4:	4604      	mov	r4, r0
 800c4d6:	d158      	bne.n	800c58a <_malloc_r+0xf6>
 800c4d8:	f8d8 4000 	ldr.w	r4, [r8]
 800c4dc:	4627      	mov	r7, r4
 800c4de:	2f00      	cmp	r7, #0
 800c4e0:	d143      	bne.n	800c56a <_malloc_r+0xd6>
 800c4e2:	2c00      	cmp	r4, #0
 800c4e4:	d04b      	beq.n	800c57e <_malloc_r+0xea>
 800c4e6:	6823      	ldr	r3, [r4, #0]
 800c4e8:	4639      	mov	r1, r7
 800c4ea:	4630      	mov	r0, r6
 800c4ec:	eb04 0903 	add.w	r9, r4, r3
 800c4f0:	f000 fb5a 	bl	800cba8 <_sbrk_r>
 800c4f4:	4581      	cmp	r9, r0
 800c4f6:	d142      	bne.n	800c57e <_malloc_r+0xea>
 800c4f8:	6821      	ldr	r1, [r4, #0]
 800c4fa:	1a6d      	subs	r5, r5, r1
 800c4fc:	4629      	mov	r1, r5
 800c4fe:	4630      	mov	r0, r6
 800c500:	f7ff ffa6 	bl	800c450 <sbrk_aligned>
 800c504:	3001      	adds	r0, #1
 800c506:	d03a      	beq.n	800c57e <_malloc_r+0xea>
 800c508:	6823      	ldr	r3, [r4, #0]
 800c50a:	442b      	add	r3, r5
 800c50c:	6023      	str	r3, [r4, #0]
 800c50e:	f8d8 3000 	ldr.w	r3, [r8]
 800c512:	685a      	ldr	r2, [r3, #4]
 800c514:	bb62      	cbnz	r2, 800c570 <_malloc_r+0xdc>
 800c516:	f8c8 7000 	str.w	r7, [r8]
 800c51a:	e00f      	b.n	800c53c <_malloc_r+0xa8>
 800c51c:	6822      	ldr	r2, [r4, #0]
 800c51e:	1b52      	subs	r2, r2, r5
 800c520:	d420      	bmi.n	800c564 <_malloc_r+0xd0>
 800c522:	2a0b      	cmp	r2, #11
 800c524:	d917      	bls.n	800c556 <_malloc_r+0xc2>
 800c526:	1961      	adds	r1, r4, r5
 800c528:	42a3      	cmp	r3, r4
 800c52a:	6025      	str	r5, [r4, #0]
 800c52c:	bf18      	it	ne
 800c52e:	6059      	strne	r1, [r3, #4]
 800c530:	6863      	ldr	r3, [r4, #4]
 800c532:	bf08      	it	eq
 800c534:	f8c8 1000 	streq.w	r1, [r8]
 800c538:	5162      	str	r2, [r4, r5]
 800c53a:	604b      	str	r3, [r1, #4]
 800c53c:	4630      	mov	r0, r6
 800c53e:	f000 f82f 	bl	800c5a0 <__malloc_unlock>
 800c542:	f104 000b 	add.w	r0, r4, #11
 800c546:	1d23      	adds	r3, r4, #4
 800c548:	f020 0007 	bic.w	r0, r0, #7
 800c54c:	1ac2      	subs	r2, r0, r3
 800c54e:	bf1c      	itt	ne
 800c550:	1a1b      	subne	r3, r3, r0
 800c552:	50a3      	strne	r3, [r4, r2]
 800c554:	e7af      	b.n	800c4b6 <_malloc_r+0x22>
 800c556:	6862      	ldr	r2, [r4, #4]
 800c558:	42a3      	cmp	r3, r4
 800c55a:	bf0c      	ite	eq
 800c55c:	f8c8 2000 	streq.w	r2, [r8]
 800c560:	605a      	strne	r2, [r3, #4]
 800c562:	e7eb      	b.n	800c53c <_malloc_r+0xa8>
 800c564:	4623      	mov	r3, r4
 800c566:	6864      	ldr	r4, [r4, #4]
 800c568:	e7ae      	b.n	800c4c8 <_malloc_r+0x34>
 800c56a:	463c      	mov	r4, r7
 800c56c:	687f      	ldr	r7, [r7, #4]
 800c56e:	e7b6      	b.n	800c4de <_malloc_r+0x4a>
 800c570:	461a      	mov	r2, r3
 800c572:	685b      	ldr	r3, [r3, #4]
 800c574:	42a3      	cmp	r3, r4
 800c576:	d1fb      	bne.n	800c570 <_malloc_r+0xdc>
 800c578:	2300      	movs	r3, #0
 800c57a:	6053      	str	r3, [r2, #4]
 800c57c:	e7de      	b.n	800c53c <_malloc_r+0xa8>
 800c57e:	230c      	movs	r3, #12
 800c580:	6033      	str	r3, [r6, #0]
 800c582:	4630      	mov	r0, r6
 800c584:	f000 f80c 	bl	800c5a0 <__malloc_unlock>
 800c588:	e794      	b.n	800c4b4 <_malloc_r+0x20>
 800c58a:	6005      	str	r5, [r0, #0]
 800c58c:	e7d6      	b.n	800c53c <_malloc_r+0xa8>
 800c58e:	bf00      	nop
 800c590:	24000eac 	.word	0x24000eac

0800c594 <__malloc_lock>:
 800c594:	4801      	ldr	r0, [pc, #4]	@ (800c59c <__malloc_lock+0x8>)
 800c596:	f7ff bf01 	b.w	800c39c <__retarget_lock_acquire_recursive>
 800c59a:	bf00      	nop
 800c59c:	24000ea4 	.word	0x24000ea4

0800c5a0 <__malloc_unlock>:
 800c5a0:	4801      	ldr	r0, [pc, #4]	@ (800c5a8 <__malloc_unlock+0x8>)
 800c5a2:	f7ff befc 	b.w	800c39e <__retarget_lock_release_recursive>
 800c5a6:	bf00      	nop
 800c5a8:	24000ea4 	.word	0x24000ea4

0800c5ac <__ssputs_r>:
 800c5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5b0:	688e      	ldr	r6, [r1, #8]
 800c5b2:	461f      	mov	r7, r3
 800c5b4:	42be      	cmp	r6, r7
 800c5b6:	680b      	ldr	r3, [r1, #0]
 800c5b8:	4682      	mov	sl, r0
 800c5ba:	460c      	mov	r4, r1
 800c5bc:	4690      	mov	r8, r2
 800c5be:	d82d      	bhi.n	800c61c <__ssputs_r+0x70>
 800c5c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c5c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c5c8:	d026      	beq.n	800c618 <__ssputs_r+0x6c>
 800c5ca:	6965      	ldr	r5, [r4, #20]
 800c5cc:	6909      	ldr	r1, [r1, #16]
 800c5ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5d2:	eba3 0901 	sub.w	r9, r3, r1
 800c5d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5da:	1c7b      	adds	r3, r7, #1
 800c5dc:	444b      	add	r3, r9
 800c5de:	106d      	asrs	r5, r5, #1
 800c5e0:	429d      	cmp	r5, r3
 800c5e2:	bf38      	it	cc
 800c5e4:	461d      	movcc	r5, r3
 800c5e6:	0553      	lsls	r3, r2, #21
 800c5e8:	d527      	bpl.n	800c63a <__ssputs_r+0x8e>
 800c5ea:	4629      	mov	r1, r5
 800c5ec:	f7ff ff52 	bl	800c494 <_malloc_r>
 800c5f0:	4606      	mov	r6, r0
 800c5f2:	b360      	cbz	r0, 800c64e <__ssputs_r+0xa2>
 800c5f4:	6921      	ldr	r1, [r4, #16]
 800c5f6:	464a      	mov	r2, r9
 800c5f8:	f7ff fed2 	bl	800c3a0 <memcpy>
 800c5fc:	89a3      	ldrh	r3, [r4, #12]
 800c5fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c606:	81a3      	strh	r3, [r4, #12]
 800c608:	6126      	str	r6, [r4, #16]
 800c60a:	6165      	str	r5, [r4, #20]
 800c60c:	444e      	add	r6, r9
 800c60e:	eba5 0509 	sub.w	r5, r5, r9
 800c612:	6026      	str	r6, [r4, #0]
 800c614:	60a5      	str	r5, [r4, #8]
 800c616:	463e      	mov	r6, r7
 800c618:	42be      	cmp	r6, r7
 800c61a:	d900      	bls.n	800c61e <__ssputs_r+0x72>
 800c61c:	463e      	mov	r6, r7
 800c61e:	6820      	ldr	r0, [r4, #0]
 800c620:	4632      	mov	r2, r6
 800c622:	4641      	mov	r1, r8
 800c624:	f000 faa6 	bl	800cb74 <memmove>
 800c628:	68a3      	ldr	r3, [r4, #8]
 800c62a:	1b9b      	subs	r3, r3, r6
 800c62c:	60a3      	str	r3, [r4, #8]
 800c62e:	6823      	ldr	r3, [r4, #0]
 800c630:	4433      	add	r3, r6
 800c632:	6023      	str	r3, [r4, #0]
 800c634:	2000      	movs	r0, #0
 800c636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c63a:	462a      	mov	r2, r5
 800c63c:	f000 fac4 	bl	800cbc8 <_realloc_r>
 800c640:	4606      	mov	r6, r0
 800c642:	2800      	cmp	r0, #0
 800c644:	d1e0      	bne.n	800c608 <__ssputs_r+0x5c>
 800c646:	6921      	ldr	r1, [r4, #16]
 800c648:	4650      	mov	r0, sl
 800c64a:	f7ff feb7 	bl	800c3bc <_free_r>
 800c64e:	230c      	movs	r3, #12
 800c650:	f8ca 3000 	str.w	r3, [sl]
 800c654:	89a3      	ldrh	r3, [r4, #12]
 800c656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c65a:	81a3      	strh	r3, [r4, #12]
 800c65c:	f04f 30ff 	mov.w	r0, #4294967295
 800c660:	e7e9      	b.n	800c636 <__ssputs_r+0x8a>
	...

0800c664 <_svfiprintf_r>:
 800c664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c668:	4698      	mov	r8, r3
 800c66a:	898b      	ldrh	r3, [r1, #12]
 800c66c:	061b      	lsls	r3, r3, #24
 800c66e:	b09d      	sub	sp, #116	@ 0x74
 800c670:	4607      	mov	r7, r0
 800c672:	460d      	mov	r5, r1
 800c674:	4614      	mov	r4, r2
 800c676:	d510      	bpl.n	800c69a <_svfiprintf_r+0x36>
 800c678:	690b      	ldr	r3, [r1, #16]
 800c67a:	b973      	cbnz	r3, 800c69a <_svfiprintf_r+0x36>
 800c67c:	2140      	movs	r1, #64	@ 0x40
 800c67e:	f7ff ff09 	bl	800c494 <_malloc_r>
 800c682:	6028      	str	r0, [r5, #0]
 800c684:	6128      	str	r0, [r5, #16]
 800c686:	b930      	cbnz	r0, 800c696 <_svfiprintf_r+0x32>
 800c688:	230c      	movs	r3, #12
 800c68a:	603b      	str	r3, [r7, #0]
 800c68c:	f04f 30ff 	mov.w	r0, #4294967295
 800c690:	b01d      	add	sp, #116	@ 0x74
 800c692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c696:	2340      	movs	r3, #64	@ 0x40
 800c698:	616b      	str	r3, [r5, #20]
 800c69a:	2300      	movs	r3, #0
 800c69c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c69e:	2320      	movs	r3, #32
 800c6a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c6a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6a8:	2330      	movs	r3, #48	@ 0x30
 800c6aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c848 <_svfiprintf_r+0x1e4>
 800c6ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c6b2:	f04f 0901 	mov.w	r9, #1
 800c6b6:	4623      	mov	r3, r4
 800c6b8:	469a      	mov	sl, r3
 800c6ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6be:	b10a      	cbz	r2, 800c6c4 <_svfiprintf_r+0x60>
 800c6c0:	2a25      	cmp	r2, #37	@ 0x25
 800c6c2:	d1f9      	bne.n	800c6b8 <_svfiprintf_r+0x54>
 800c6c4:	ebba 0b04 	subs.w	fp, sl, r4
 800c6c8:	d00b      	beq.n	800c6e2 <_svfiprintf_r+0x7e>
 800c6ca:	465b      	mov	r3, fp
 800c6cc:	4622      	mov	r2, r4
 800c6ce:	4629      	mov	r1, r5
 800c6d0:	4638      	mov	r0, r7
 800c6d2:	f7ff ff6b 	bl	800c5ac <__ssputs_r>
 800c6d6:	3001      	adds	r0, #1
 800c6d8:	f000 80a7 	beq.w	800c82a <_svfiprintf_r+0x1c6>
 800c6dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6de:	445a      	add	r2, fp
 800c6e0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c6e2:	f89a 3000 	ldrb.w	r3, [sl]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	f000 809f 	beq.w	800c82a <_svfiprintf_r+0x1c6>
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c6f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6f6:	f10a 0a01 	add.w	sl, sl, #1
 800c6fa:	9304      	str	r3, [sp, #16]
 800c6fc:	9307      	str	r3, [sp, #28]
 800c6fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c702:	931a      	str	r3, [sp, #104]	@ 0x68
 800c704:	4654      	mov	r4, sl
 800c706:	2205      	movs	r2, #5
 800c708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c70c:	484e      	ldr	r0, [pc, #312]	@ (800c848 <_svfiprintf_r+0x1e4>)
 800c70e:	f7f3 fe07 	bl	8000320 <memchr>
 800c712:	9a04      	ldr	r2, [sp, #16]
 800c714:	b9d8      	cbnz	r0, 800c74e <_svfiprintf_r+0xea>
 800c716:	06d0      	lsls	r0, r2, #27
 800c718:	bf44      	itt	mi
 800c71a:	2320      	movmi	r3, #32
 800c71c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c720:	0711      	lsls	r1, r2, #28
 800c722:	bf44      	itt	mi
 800c724:	232b      	movmi	r3, #43	@ 0x2b
 800c726:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c72a:	f89a 3000 	ldrb.w	r3, [sl]
 800c72e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c730:	d015      	beq.n	800c75e <_svfiprintf_r+0xfa>
 800c732:	9a07      	ldr	r2, [sp, #28]
 800c734:	4654      	mov	r4, sl
 800c736:	2000      	movs	r0, #0
 800c738:	f04f 0c0a 	mov.w	ip, #10
 800c73c:	4621      	mov	r1, r4
 800c73e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c742:	3b30      	subs	r3, #48	@ 0x30
 800c744:	2b09      	cmp	r3, #9
 800c746:	d94b      	bls.n	800c7e0 <_svfiprintf_r+0x17c>
 800c748:	b1b0      	cbz	r0, 800c778 <_svfiprintf_r+0x114>
 800c74a:	9207      	str	r2, [sp, #28]
 800c74c:	e014      	b.n	800c778 <_svfiprintf_r+0x114>
 800c74e:	eba0 0308 	sub.w	r3, r0, r8
 800c752:	fa09 f303 	lsl.w	r3, r9, r3
 800c756:	4313      	orrs	r3, r2
 800c758:	9304      	str	r3, [sp, #16]
 800c75a:	46a2      	mov	sl, r4
 800c75c:	e7d2      	b.n	800c704 <_svfiprintf_r+0xa0>
 800c75e:	9b03      	ldr	r3, [sp, #12]
 800c760:	1d19      	adds	r1, r3, #4
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	9103      	str	r1, [sp, #12]
 800c766:	2b00      	cmp	r3, #0
 800c768:	bfbb      	ittet	lt
 800c76a:	425b      	neglt	r3, r3
 800c76c:	f042 0202 	orrlt.w	r2, r2, #2
 800c770:	9307      	strge	r3, [sp, #28]
 800c772:	9307      	strlt	r3, [sp, #28]
 800c774:	bfb8      	it	lt
 800c776:	9204      	strlt	r2, [sp, #16]
 800c778:	7823      	ldrb	r3, [r4, #0]
 800c77a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c77c:	d10a      	bne.n	800c794 <_svfiprintf_r+0x130>
 800c77e:	7863      	ldrb	r3, [r4, #1]
 800c780:	2b2a      	cmp	r3, #42	@ 0x2a
 800c782:	d132      	bne.n	800c7ea <_svfiprintf_r+0x186>
 800c784:	9b03      	ldr	r3, [sp, #12]
 800c786:	1d1a      	adds	r2, r3, #4
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	9203      	str	r2, [sp, #12]
 800c78c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c790:	3402      	adds	r4, #2
 800c792:	9305      	str	r3, [sp, #20]
 800c794:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c858 <_svfiprintf_r+0x1f4>
 800c798:	7821      	ldrb	r1, [r4, #0]
 800c79a:	2203      	movs	r2, #3
 800c79c:	4650      	mov	r0, sl
 800c79e:	f7f3 fdbf 	bl	8000320 <memchr>
 800c7a2:	b138      	cbz	r0, 800c7b4 <_svfiprintf_r+0x150>
 800c7a4:	9b04      	ldr	r3, [sp, #16]
 800c7a6:	eba0 000a 	sub.w	r0, r0, sl
 800c7aa:	2240      	movs	r2, #64	@ 0x40
 800c7ac:	4082      	lsls	r2, r0
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	3401      	adds	r4, #1
 800c7b2:	9304      	str	r3, [sp, #16]
 800c7b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7b8:	4824      	ldr	r0, [pc, #144]	@ (800c84c <_svfiprintf_r+0x1e8>)
 800c7ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c7be:	2206      	movs	r2, #6
 800c7c0:	f7f3 fdae 	bl	8000320 <memchr>
 800c7c4:	2800      	cmp	r0, #0
 800c7c6:	d036      	beq.n	800c836 <_svfiprintf_r+0x1d2>
 800c7c8:	4b21      	ldr	r3, [pc, #132]	@ (800c850 <_svfiprintf_r+0x1ec>)
 800c7ca:	bb1b      	cbnz	r3, 800c814 <_svfiprintf_r+0x1b0>
 800c7cc:	9b03      	ldr	r3, [sp, #12]
 800c7ce:	3307      	adds	r3, #7
 800c7d0:	f023 0307 	bic.w	r3, r3, #7
 800c7d4:	3308      	adds	r3, #8
 800c7d6:	9303      	str	r3, [sp, #12]
 800c7d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7da:	4433      	add	r3, r6
 800c7dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7de:	e76a      	b.n	800c6b6 <_svfiprintf_r+0x52>
 800c7e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7e4:	460c      	mov	r4, r1
 800c7e6:	2001      	movs	r0, #1
 800c7e8:	e7a8      	b.n	800c73c <_svfiprintf_r+0xd8>
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	3401      	adds	r4, #1
 800c7ee:	9305      	str	r3, [sp, #20]
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	f04f 0c0a 	mov.w	ip, #10
 800c7f6:	4620      	mov	r0, r4
 800c7f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7fc:	3a30      	subs	r2, #48	@ 0x30
 800c7fe:	2a09      	cmp	r2, #9
 800c800:	d903      	bls.n	800c80a <_svfiprintf_r+0x1a6>
 800c802:	2b00      	cmp	r3, #0
 800c804:	d0c6      	beq.n	800c794 <_svfiprintf_r+0x130>
 800c806:	9105      	str	r1, [sp, #20]
 800c808:	e7c4      	b.n	800c794 <_svfiprintf_r+0x130>
 800c80a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c80e:	4604      	mov	r4, r0
 800c810:	2301      	movs	r3, #1
 800c812:	e7f0      	b.n	800c7f6 <_svfiprintf_r+0x192>
 800c814:	ab03      	add	r3, sp, #12
 800c816:	9300      	str	r3, [sp, #0]
 800c818:	462a      	mov	r2, r5
 800c81a:	4b0e      	ldr	r3, [pc, #56]	@ (800c854 <_svfiprintf_r+0x1f0>)
 800c81c:	a904      	add	r1, sp, #16
 800c81e:	4638      	mov	r0, r7
 800c820:	f3af 8000 	nop.w
 800c824:	1c42      	adds	r2, r0, #1
 800c826:	4606      	mov	r6, r0
 800c828:	d1d6      	bne.n	800c7d8 <_svfiprintf_r+0x174>
 800c82a:	89ab      	ldrh	r3, [r5, #12]
 800c82c:	065b      	lsls	r3, r3, #25
 800c82e:	f53f af2d 	bmi.w	800c68c <_svfiprintf_r+0x28>
 800c832:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c834:	e72c      	b.n	800c690 <_svfiprintf_r+0x2c>
 800c836:	ab03      	add	r3, sp, #12
 800c838:	9300      	str	r3, [sp, #0]
 800c83a:	462a      	mov	r2, r5
 800c83c:	4b05      	ldr	r3, [pc, #20]	@ (800c854 <_svfiprintf_r+0x1f0>)
 800c83e:	a904      	add	r1, sp, #16
 800c840:	4638      	mov	r0, r7
 800c842:	f000 f879 	bl	800c938 <_printf_i>
 800c846:	e7ed      	b.n	800c824 <_svfiprintf_r+0x1c0>
 800c848:	0800d0b0 	.word	0x0800d0b0
 800c84c:	0800d0ba 	.word	0x0800d0ba
 800c850:	00000000 	.word	0x00000000
 800c854:	0800c5ad 	.word	0x0800c5ad
 800c858:	0800d0b6 	.word	0x0800d0b6

0800c85c <_printf_common>:
 800c85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c860:	4616      	mov	r6, r2
 800c862:	4698      	mov	r8, r3
 800c864:	688a      	ldr	r2, [r1, #8]
 800c866:	690b      	ldr	r3, [r1, #16]
 800c868:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c86c:	4293      	cmp	r3, r2
 800c86e:	bfb8      	it	lt
 800c870:	4613      	movlt	r3, r2
 800c872:	6033      	str	r3, [r6, #0]
 800c874:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c878:	4607      	mov	r7, r0
 800c87a:	460c      	mov	r4, r1
 800c87c:	b10a      	cbz	r2, 800c882 <_printf_common+0x26>
 800c87e:	3301      	adds	r3, #1
 800c880:	6033      	str	r3, [r6, #0]
 800c882:	6823      	ldr	r3, [r4, #0]
 800c884:	0699      	lsls	r1, r3, #26
 800c886:	bf42      	ittt	mi
 800c888:	6833      	ldrmi	r3, [r6, #0]
 800c88a:	3302      	addmi	r3, #2
 800c88c:	6033      	strmi	r3, [r6, #0]
 800c88e:	6825      	ldr	r5, [r4, #0]
 800c890:	f015 0506 	ands.w	r5, r5, #6
 800c894:	d106      	bne.n	800c8a4 <_printf_common+0x48>
 800c896:	f104 0a19 	add.w	sl, r4, #25
 800c89a:	68e3      	ldr	r3, [r4, #12]
 800c89c:	6832      	ldr	r2, [r6, #0]
 800c89e:	1a9b      	subs	r3, r3, r2
 800c8a0:	42ab      	cmp	r3, r5
 800c8a2:	dc26      	bgt.n	800c8f2 <_printf_common+0x96>
 800c8a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c8a8:	6822      	ldr	r2, [r4, #0]
 800c8aa:	3b00      	subs	r3, #0
 800c8ac:	bf18      	it	ne
 800c8ae:	2301      	movne	r3, #1
 800c8b0:	0692      	lsls	r2, r2, #26
 800c8b2:	d42b      	bmi.n	800c90c <_printf_common+0xb0>
 800c8b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c8b8:	4641      	mov	r1, r8
 800c8ba:	4638      	mov	r0, r7
 800c8bc:	47c8      	blx	r9
 800c8be:	3001      	adds	r0, #1
 800c8c0:	d01e      	beq.n	800c900 <_printf_common+0xa4>
 800c8c2:	6823      	ldr	r3, [r4, #0]
 800c8c4:	6922      	ldr	r2, [r4, #16]
 800c8c6:	f003 0306 	and.w	r3, r3, #6
 800c8ca:	2b04      	cmp	r3, #4
 800c8cc:	bf02      	ittt	eq
 800c8ce:	68e5      	ldreq	r5, [r4, #12]
 800c8d0:	6833      	ldreq	r3, [r6, #0]
 800c8d2:	1aed      	subeq	r5, r5, r3
 800c8d4:	68a3      	ldr	r3, [r4, #8]
 800c8d6:	bf0c      	ite	eq
 800c8d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8dc:	2500      	movne	r5, #0
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	bfc4      	itt	gt
 800c8e2:	1a9b      	subgt	r3, r3, r2
 800c8e4:	18ed      	addgt	r5, r5, r3
 800c8e6:	2600      	movs	r6, #0
 800c8e8:	341a      	adds	r4, #26
 800c8ea:	42b5      	cmp	r5, r6
 800c8ec:	d11a      	bne.n	800c924 <_printf_common+0xc8>
 800c8ee:	2000      	movs	r0, #0
 800c8f0:	e008      	b.n	800c904 <_printf_common+0xa8>
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	4652      	mov	r2, sl
 800c8f6:	4641      	mov	r1, r8
 800c8f8:	4638      	mov	r0, r7
 800c8fa:	47c8      	blx	r9
 800c8fc:	3001      	adds	r0, #1
 800c8fe:	d103      	bne.n	800c908 <_printf_common+0xac>
 800c900:	f04f 30ff 	mov.w	r0, #4294967295
 800c904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c908:	3501      	adds	r5, #1
 800c90a:	e7c6      	b.n	800c89a <_printf_common+0x3e>
 800c90c:	18e1      	adds	r1, r4, r3
 800c90e:	1c5a      	adds	r2, r3, #1
 800c910:	2030      	movs	r0, #48	@ 0x30
 800c912:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c916:	4422      	add	r2, r4
 800c918:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c91c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c920:	3302      	adds	r3, #2
 800c922:	e7c7      	b.n	800c8b4 <_printf_common+0x58>
 800c924:	2301      	movs	r3, #1
 800c926:	4622      	mov	r2, r4
 800c928:	4641      	mov	r1, r8
 800c92a:	4638      	mov	r0, r7
 800c92c:	47c8      	blx	r9
 800c92e:	3001      	adds	r0, #1
 800c930:	d0e6      	beq.n	800c900 <_printf_common+0xa4>
 800c932:	3601      	adds	r6, #1
 800c934:	e7d9      	b.n	800c8ea <_printf_common+0x8e>
	...

0800c938 <_printf_i>:
 800c938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c93c:	7e0f      	ldrb	r7, [r1, #24]
 800c93e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c940:	2f78      	cmp	r7, #120	@ 0x78
 800c942:	4691      	mov	r9, r2
 800c944:	4680      	mov	r8, r0
 800c946:	460c      	mov	r4, r1
 800c948:	469a      	mov	sl, r3
 800c94a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c94e:	d807      	bhi.n	800c960 <_printf_i+0x28>
 800c950:	2f62      	cmp	r7, #98	@ 0x62
 800c952:	d80a      	bhi.n	800c96a <_printf_i+0x32>
 800c954:	2f00      	cmp	r7, #0
 800c956:	f000 80d1 	beq.w	800cafc <_printf_i+0x1c4>
 800c95a:	2f58      	cmp	r7, #88	@ 0x58
 800c95c:	f000 80b8 	beq.w	800cad0 <_printf_i+0x198>
 800c960:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c964:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c968:	e03a      	b.n	800c9e0 <_printf_i+0xa8>
 800c96a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c96e:	2b15      	cmp	r3, #21
 800c970:	d8f6      	bhi.n	800c960 <_printf_i+0x28>
 800c972:	a101      	add	r1, pc, #4	@ (adr r1, 800c978 <_printf_i+0x40>)
 800c974:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c978:	0800c9d1 	.word	0x0800c9d1
 800c97c:	0800c9e5 	.word	0x0800c9e5
 800c980:	0800c961 	.word	0x0800c961
 800c984:	0800c961 	.word	0x0800c961
 800c988:	0800c961 	.word	0x0800c961
 800c98c:	0800c961 	.word	0x0800c961
 800c990:	0800c9e5 	.word	0x0800c9e5
 800c994:	0800c961 	.word	0x0800c961
 800c998:	0800c961 	.word	0x0800c961
 800c99c:	0800c961 	.word	0x0800c961
 800c9a0:	0800c961 	.word	0x0800c961
 800c9a4:	0800cae3 	.word	0x0800cae3
 800c9a8:	0800ca0f 	.word	0x0800ca0f
 800c9ac:	0800ca9d 	.word	0x0800ca9d
 800c9b0:	0800c961 	.word	0x0800c961
 800c9b4:	0800c961 	.word	0x0800c961
 800c9b8:	0800cb05 	.word	0x0800cb05
 800c9bc:	0800c961 	.word	0x0800c961
 800c9c0:	0800ca0f 	.word	0x0800ca0f
 800c9c4:	0800c961 	.word	0x0800c961
 800c9c8:	0800c961 	.word	0x0800c961
 800c9cc:	0800caa5 	.word	0x0800caa5
 800c9d0:	6833      	ldr	r3, [r6, #0]
 800c9d2:	1d1a      	adds	r2, r3, #4
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	6032      	str	r2, [r6, #0]
 800c9d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c9dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	e09c      	b.n	800cb1e <_printf_i+0x1e6>
 800c9e4:	6833      	ldr	r3, [r6, #0]
 800c9e6:	6820      	ldr	r0, [r4, #0]
 800c9e8:	1d19      	adds	r1, r3, #4
 800c9ea:	6031      	str	r1, [r6, #0]
 800c9ec:	0606      	lsls	r6, r0, #24
 800c9ee:	d501      	bpl.n	800c9f4 <_printf_i+0xbc>
 800c9f0:	681d      	ldr	r5, [r3, #0]
 800c9f2:	e003      	b.n	800c9fc <_printf_i+0xc4>
 800c9f4:	0645      	lsls	r5, r0, #25
 800c9f6:	d5fb      	bpl.n	800c9f0 <_printf_i+0xb8>
 800c9f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c9fc:	2d00      	cmp	r5, #0
 800c9fe:	da03      	bge.n	800ca08 <_printf_i+0xd0>
 800ca00:	232d      	movs	r3, #45	@ 0x2d
 800ca02:	426d      	negs	r5, r5
 800ca04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca08:	4858      	ldr	r0, [pc, #352]	@ (800cb6c <_printf_i+0x234>)
 800ca0a:	230a      	movs	r3, #10
 800ca0c:	e011      	b.n	800ca32 <_printf_i+0xfa>
 800ca0e:	6821      	ldr	r1, [r4, #0]
 800ca10:	6833      	ldr	r3, [r6, #0]
 800ca12:	0608      	lsls	r0, r1, #24
 800ca14:	f853 5b04 	ldr.w	r5, [r3], #4
 800ca18:	d402      	bmi.n	800ca20 <_printf_i+0xe8>
 800ca1a:	0649      	lsls	r1, r1, #25
 800ca1c:	bf48      	it	mi
 800ca1e:	b2ad      	uxthmi	r5, r5
 800ca20:	2f6f      	cmp	r7, #111	@ 0x6f
 800ca22:	4852      	ldr	r0, [pc, #328]	@ (800cb6c <_printf_i+0x234>)
 800ca24:	6033      	str	r3, [r6, #0]
 800ca26:	bf14      	ite	ne
 800ca28:	230a      	movne	r3, #10
 800ca2a:	2308      	moveq	r3, #8
 800ca2c:	2100      	movs	r1, #0
 800ca2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ca32:	6866      	ldr	r6, [r4, #4]
 800ca34:	60a6      	str	r6, [r4, #8]
 800ca36:	2e00      	cmp	r6, #0
 800ca38:	db05      	blt.n	800ca46 <_printf_i+0x10e>
 800ca3a:	6821      	ldr	r1, [r4, #0]
 800ca3c:	432e      	orrs	r6, r5
 800ca3e:	f021 0104 	bic.w	r1, r1, #4
 800ca42:	6021      	str	r1, [r4, #0]
 800ca44:	d04b      	beq.n	800cade <_printf_i+0x1a6>
 800ca46:	4616      	mov	r6, r2
 800ca48:	fbb5 f1f3 	udiv	r1, r5, r3
 800ca4c:	fb03 5711 	mls	r7, r3, r1, r5
 800ca50:	5dc7      	ldrb	r7, [r0, r7]
 800ca52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ca56:	462f      	mov	r7, r5
 800ca58:	42bb      	cmp	r3, r7
 800ca5a:	460d      	mov	r5, r1
 800ca5c:	d9f4      	bls.n	800ca48 <_printf_i+0x110>
 800ca5e:	2b08      	cmp	r3, #8
 800ca60:	d10b      	bne.n	800ca7a <_printf_i+0x142>
 800ca62:	6823      	ldr	r3, [r4, #0]
 800ca64:	07df      	lsls	r7, r3, #31
 800ca66:	d508      	bpl.n	800ca7a <_printf_i+0x142>
 800ca68:	6923      	ldr	r3, [r4, #16]
 800ca6a:	6861      	ldr	r1, [r4, #4]
 800ca6c:	4299      	cmp	r1, r3
 800ca6e:	bfde      	ittt	le
 800ca70:	2330      	movle	r3, #48	@ 0x30
 800ca72:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ca76:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ca7a:	1b92      	subs	r2, r2, r6
 800ca7c:	6122      	str	r2, [r4, #16]
 800ca7e:	f8cd a000 	str.w	sl, [sp]
 800ca82:	464b      	mov	r3, r9
 800ca84:	aa03      	add	r2, sp, #12
 800ca86:	4621      	mov	r1, r4
 800ca88:	4640      	mov	r0, r8
 800ca8a:	f7ff fee7 	bl	800c85c <_printf_common>
 800ca8e:	3001      	adds	r0, #1
 800ca90:	d14a      	bne.n	800cb28 <_printf_i+0x1f0>
 800ca92:	f04f 30ff 	mov.w	r0, #4294967295
 800ca96:	b004      	add	sp, #16
 800ca98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca9c:	6823      	ldr	r3, [r4, #0]
 800ca9e:	f043 0320 	orr.w	r3, r3, #32
 800caa2:	6023      	str	r3, [r4, #0]
 800caa4:	4832      	ldr	r0, [pc, #200]	@ (800cb70 <_printf_i+0x238>)
 800caa6:	2778      	movs	r7, #120	@ 0x78
 800caa8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800caac:	6823      	ldr	r3, [r4, #0]
 800caae:	6831      	ldr	r1, [r6, #0]
 800cab0:	061f      	lsls	r7, r3, #24
 800cab2:	f851 5b04 	ldr.w	r5, [r1], #4
 800cab6:	d402      	bmi.n	800cabe <_printf_i+0x186>
 800cab8:	065f      	lsls	r7, r3, #25
 800caba:	bf48      	it	mi
 800cabc:	b2ad      	uxthmi	r5, r5
 800cabe:	6031      	str	r1, [r6, #0]
 800cac0:	07d9      	lsls	r1, r3, #31
 800cac2:	bf44      	itt	mi
 800cac4:	f043 0320 	orrmi.w	r3, r3, #32
 800cac8:	6023      	strmi	r3, [r4, #0]
 800caca:	b11d      	cbz	r5, 800cad4 <_printf_i+0x19c>
 800cacc:	2310      	movs	r3, #16
 800cace:	e7ad      	b.n	800ca2c <_printf_i+0xf4>
 800cad0:	4826      	ldr	r0, [pc, #152]	@ (800cb6c <_printf_i+0x234>)
 800cad2:	e7e9      	b.n	800caa8 <_printf_i+0x170>
 800cad4:	6823      	ldr	r3, [r4, #0]
 800cad6:	f023 0320 	bic.w	r3, r3, #32
 800cada:	6023      	str	r3, [r4, #0]
 800cadc:	e7f6      	b.n	800cacc <_printf_i+0x194>
 800cade:	4616      	mov	r6, r2
 800cae0:	e7bd      	b.n	800ca5e <_printf_i+0x126>
 800cae2:	6833      	ldr	r3, [r6, #0]
 800cae4:	6825      	ldr	r5, [r4, #0]
 800cae6:	6961      	ldr	r1, [r4, #20]
 800cae8:	1d18      	adds	r0, r3, #4
 800caea:	6030      	str	r0, [r6, #0]
 800caec:	062e      	lsls	r6, r5, #24
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	d501      	bpl.n	800caf6 <_printf_i+0x1be>
 800caf2:	6019      	str	r1, [r3, #0]
 800caf4:	e002      	b.n	800cafc <_printf_i+0x1c4>
 800caf6:	0668      	lsls	r0, r5, #25
 800caf8:	d5fb      	bpl.n	800caf2 <_printf_i+0x1ba>
 800cafa:	8019      	strh	r1, [r3, #0]
 800cafc:	2300      	movs	r3, #0
 800cafe:	6123      	str	r3, [r4, #16]
 800cb00:	4616      	mov	r6, r2
 800cb02:	e7bc      	b.n	800ca7e <_printf_i+0x146>
 800cb04:	6833      	ldr	r3, [r6, #0]
 800cb06:	1d1a      	adds	r2, r3, #4
 800cb08:	6032      	str	r2, [r6, #0]
 800cb0a:	681e      	ldr	r6, [r3, #0]
 800cb0c:	6862      	ldr	r2, [r4, #4]
 800cb0e:	2100      	movs	r1, #0
 800cb10:	4630      	mov	r0, r6
 800cb12:	f7f3 fc05 	bl	8000320 <memchr>
 800cb16:	b108      	cbz	r0, 800cb1c <_printf_i+0x1e4>
 800cb18:	1b80      	subs	r0, r0, r6
 800cb1a:	6060      	str	r0, [r4, #4]
 800cb1c:	6863      	ldr	r3, [r4, #4]
 800cb1e:	6123      	str	r3, [r4, #16]
 800cb20:	2300      	movs	r3, #0
 800cb22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb26:	e7aa      	b.n	800ca7e <_printf_i+0x146>
 800cb28:	6923      	ldr	r3, [r4, #16]
 800cb2a:	4632      	mov	r2, r6
 800cb2c:	4649      	mov	r1, r9
 800cb2e:	4640      	mov	r0, r8
 800cb30:	47d0      	blx	sl
 800cb32:	3001      	adds	r0, #1
 800cb34:	d0ad      	beq.n	800ca92 <_printf_i+0x15a>
 800cb36:	6823      	ldr	r3, [r4, #0]
 800cb38:	079b      	lsls	r3, r3, #30
 800cb3a:	d413      	bmi.n	800cb64 <_printf_i+0x22c>
 800cb3c:	68e0      	ldr	r0, [r4, #12]
 800cb3e:	9b03      	ldr	r3, [sp, #12]
 800cb40:	4298      	cmp	r0, r3
 800cb42:	bfb8      	it	lt
 800cb44:	4618      	movlt	r0, r3
 800cb46:	e7a6      	b.n	800ca96 <_printf_i+0x15e>
 800cb48:	2301      	movs	r3, #1
 800cb4a:	4632      	mov	r2, r6
 800cb4c:	4649      	mov	r1, r9
 800cb4e:	4640      	mov	r0, r8
 800cb50:	47d0      	blx	sl
 800cb52:	3001      	adds	r0, #1
 800cb54:	d09d      	beq.n	800ca92 <_printf_i+0x15a>
 800cb56:	3501      	adds	r5, #1
 800cb58:	68e3      	ldr	r3, [r4, #12]
 800cb5a:	9903      	ldr	r1, [sp, #12]
 800cb5c:	1a5b      	subs	r3, r3, r1
 800cb5e:	42ab      	cmp	r3, r5
 800cb60:	dcf2      	bgt.n	800cb48 <_printf_i+0x210>
 800cb62:	e7eb      	b.n	800cb3c <_printf_i+0x204>
 800cb64:	2500      	movs	r5, #0
 800cb66:	f104 0619 	add.w	r6, r4, #25
 800cb6a:	e7f5      	b.n	800cb58 <_printf_i+0x220>
 800cb6c:	0800d0c1 	.word	0x0800d0c1
 800cb70:	0800d0d2 	.word	0x0800d0d2

0800cb74 <memmove>:
 800cb74:	4288      	cmp	r0, r1
 800cb76:	b510      	push	{r4, lr}
 800cb78:	eb01 0402 	add.w	r4, r1, r2
 800cb7c:	d902      	bls.n	800cb84 <memmove+0x10>
 800cb7e:	4284      	cmp	r4, r0
 800cb80:	4623      	mov	r3, r4
 800cb82:	d807      	bhi.n	800cb94 <memmove+0x20>
 800cb84:	1e43      	subs	r3, r0, #1
 800cb86:	42a1      	cmp	r1, r4
 800cb88:	d008      	beq.n	800cb9c <memmove+0x28>
 800cb8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb92:	e7f8      	b.n	800cb86 <memmove+0x12>
 800cb94:	4402      	add	r2, r0
 800cb96:	4601      	mov	r1, r0
 800cb98:	428a      	cmp	r2, r1
 800cb9a:	d100      	bne.n	800cb9e <memmove+0x2a>
 800cb9c:	bd10      	pop	{r4, pc}
 800cb9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cba2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cba6:	e7f7      	b.n	800cb98 <memmove+0x24>

0800cba8 <_sbrk_r>:
 800cba8:	b538      	push	{r3, r4, r5, lr}
 800cbaa:	4d06      	ldr	r5, [pc, #24]	@ (800cbc4 <_sbrk_r+0x1c>)
 800cbac:	2300      	movs	r3, #0
 800cbae:	4604      	mov	r4, r0
 800cbb0:	4608      	mov	r0, r1
 800cbb2:	602b      	str	r3, [r5, #0]
 800cbb4:	f7f6 f8b8 	bl	8002d28 <_sbrk>
 800cbb8:	1c43      	adds	r3, r0, #1
 800cbba:	d102      	bne.n	800cbc2 <_sbrk_r+0x1a>
 800cbbc:	682b      	ldr	r3, [r5, #0]
 800cbbe:	b103      	cbz	r3, 800cbc2 <_sbrk_r+0x1a>
 800cbc0:	6023      	str	r3, [r4, #0]
 800cbc2:	bd38      	pop	{r3, r4, r5, pc}
 800cbc4:	24000ea0 	.word	0x24000ea0

0800cbc8 <_realloc_r>:
 800cbc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbcc:	4607      	mov	r7, r0
 800cbce:	4614      	mov	r4, r2
 800cbd0:	460d      	mov	r5, r1
 800cbd2:	b921      	cbnz	r1, 800cbde <_realloc_r+0x16>
 800cbd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbd8:	4611      	mov	r1, r2
 800cbda:	f7ff bc5b 	b.w	800c494 <_malloc_r>
 800cbde:	b92a      	cbnz	r2, 800cbec <_realloc_r+0x24>
 800cbe0:	f7ff fbec 	bl	800c3bc <_free_r>
 800cbe4:	4625      	mov	r5, r4
 800cbe6:	4628      	mov	r0, r5
 800cbe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbec:	f000 f81a 	bl	800cc24 <_malloc_usable_size_r>
 800cbf0:	4284      	cmp	r4, r0
 800cbf2:	4606      	mov	r6, r0
 800cbf4:	d802      	bhi.n	800cbfc <_realloc_r+0x34>
 800cbf6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cbfa:	d8f4      	bhi.n	800cbe6 <_realloc_r+0x1e>
 800cbfc:	4621      	mov	r1, r4
 800cbfe:	4638      	mov	r0, r7
 800cc00:	f7ff fc48 	bl	800c494 <_malloc_r>
 800cc04:	4680      	mov	r8, r0
 800cc06:	b908      	cbnz	r0, 800cc0c <_realloc_r+0x44>
 800cc08:	4645      	mov	r5, r8
 800cc0a:	e7ec      	b.n	800cbe6 <_realloc_r+0x1e>
 800cc0c:	42b4      	cmp	r4, r6
 800cc0e:	4622      	mov	r2, r4
 800cc10:	4629      	mov	r1, r5
 800cc12:	bf28      	it	cs
 800cc14:	4632      	movcs	r2, r6
 800cc16:	f7ff fbc3 	bl	800c3a0 <memcpy>
 800cc1a:	4629      	mov	r1, r5
 800cc1c:	4638      	mov	r0, r7
 800cc1e:	f7ff fbcd 	bl	800c3bc <_free_r>
 800cc22:	e7f1      	b.n	800cc08 <_realloc_r+0x40>

0800cc24 <_malloc_usable_size_r>:
 800cc24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc28:	1f18      	subs	r0, r3, #4
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	bfbc      	itt	lt
 800cc2e:	580b      	ldrlt	r3, [r1, r0]
 800cc30:	18c0      	addlt	r0, r0, r3
 800cc32:	4770      	bx	lr

0800cc34 <_init>:
 800cc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc36:	bf00      	nop
 800cc38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc3a:	bc08      	pop	{r3}
 800cc3c:	469e      	mov	lr, r3
 800cc3e:	4770      	bx	lr

0800cc40 <_fini>:
 800cc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc42:	bf00      	nop
 800cc44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc46:	bc08      	pop	{r3}
 800cc48:	469e      	mov	lr, r3
 800cc4a:	4770      	bx	lr
