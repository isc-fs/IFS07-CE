
AMS H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b628  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  0800b8f8  0800b8f8  0000c8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bcd0  0800bcd0  0000ccd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800bcd8  0800bcd8  0000ccd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bce0  0800bce0  0000cce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  0800bce4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000de0  2400006c  0800bd50  0000d06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000e4c  0800bd50  0000de4c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021911  00000000  00000000  0000d09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000035d7  00000000  00000000  0002e9ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001380  00000000  00000000  00031f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f18  00000000  00000000  00033308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a2a3  00000000  00000000  00034220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a7ed  00000000  00000000  0006e4c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00169d35  00000000  00000000  00088cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f29e5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000592c  00000000  00000000  001f2a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005d  00000000  00000000  001f8354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b8e0 	.word	0x0800b8e0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	0800b8e0 	.word	0x0800b8e0

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <_ZN7BMS_MODC1Emiiihjii>:
/*********************************************************************************************************
 ** Function name:           BMS_MOD
 ** Descriptions:            Initialization function of teh class
 *********************************************************************************************************/

BMS_MOD::BMS_MOD(uint32_t _ID, int _MAXV, int _MINV, int _MAXT,
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	603b      	str	r3, [r7, #0]
                 uint8_t _NUMCELLS, unsigned int _SHUNT, int _LAG_V, int _LAG_T) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800072c:	61da      	str	r2, [r3, #28]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	22fa      	movs	r2, #250	@ 0xfa
 8000732:	621a      	str	r2, [r3, #32]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800073a:	625a      	str	r2, [r3, #36]	@ 0x24
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000742:	629a      	str	r2, [r3, #40]	@ 0x28
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800074a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000752:	631a      	str	r2, [r3, #48]	@ 0x30
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	69da      	ldr	r2, [r3, #28]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	635a      	str	r2, [r3, #52]	@ 0x34
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	2200      	movs	r2, #0
 8000760:	639a      	str	r2, [r3, #56]	@ 0x38
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	63da      	str	r2, [r3, #60]	@ 0x3c
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	641a      	str	r2, [r3, #64]	@ 0x40
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	2200      	movs	r2, #0
 8000776:	645a      	str	r2, [r3, #68]	@ 0x44
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	649a      	str	r2, [r3, #72]	@ 0x48
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2200      	movs	r2, #0
 8000784:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2200      	movs	r2, #0
 800078c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2200      	movs	r2, #0
 8000794:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2200      	movs	r2, #0
 800079c:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	2213      	movs	r2, #19
 80007a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	220a      	movs	r2, #10
 80007ac:	655a      	str	r2, [r3, #84]	@ 0x54
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	3358      	adds	r3, #88	@ 0x58
 80007b2:	2230      	movs	r2, #48	@ 0x30
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f00a fc14 	bl	800afe4 <memset>
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2200      	movs	r2, #0
 80007c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	2200      	movs	r2, #0
 80007c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	2200      	movs	r2, #0
 80007d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f241 0268 	movw	r2, #4200	@ 0x1068
 80007da:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	2200      	movs	r2, #0
 80007e2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	2200      	movs	r2, #0
 80007ea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	2200      	movs	r2, #0
 80007f2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	33a4      	adds	r3, #164	@ 0xa4
 80007fa:	224c      	movs	r2, #76	@ 0x4c
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f00a fbf0 	bl	800afe4 <memset>
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	33f0      	adds	r3, #240	@ 0xf0
 8000808:	2298      	movs	r2, #152	@ 0x98
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f00a fbe9 	bl	800afe4 <memset>
	CANID = _ID;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	68ba      	ldr	r2, [r7, #8]
 8000816:	601a      	str	r2, [r3, #0]
	LIMIT_MAX_V = _MAXV;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	60da      	str	r2, [r3, #12]
	LIMIT_MIN_V = _MINV;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	683a      	ldr	r2, [r7, #0]
 8000822:	611a      	str	r2, [r3, #16]
	LIMIT_MAX_T = _MAXT;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	6a3a      	ldr	r2, [r7, #32]
 8000828:	615a      	str	r2, [r3, #20]
	NUM_CELLS = _NUMCELLS;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000830:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

	uint32_t now = HAL_GetTick();
 8000834:	f002 f948 	bl	8002ac8 <HAL_GetTick>
 8000838:	6178      	str	r0, [r7, #20]

	time_lim_plotted_volts = now + _LAG_V;
 800083a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	441a      	add	r2, r3
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	635a      	str	r2, [r3, #52]	@ 0x34
	time_lim_sent_volts    = now + _LAG_V;
 8000844:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	441a      	add	r2, r3
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	639a      	str	r2, [r3, #56]	@ 0x38
	time_lim_received_volts = now + TIME_LIM_RECV_VOLTS + _LAG_V;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	441a      	add	r2, r3
 8000856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000858:	441a      	add	r2, r3
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	63da      	str	r2, [r3, #60]	@ 0x3c

	time_lim_plotted_temps = now + _LAG_T;
 800085e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	441a      	add	r2, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	641a      	str	r2, [r3, #64]	@ 0x40
	time_lim_sent_temps    = now + _LAG_T;
 8000868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	441a      	add	r2, r3
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	645a      	str	r2, [r3, #68]	@ 0x44
	time_lim_received_temps = now + TIME_LIM_RECV_TEMPS + _LAG_T;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	441a      	add	r2, r3
 800087a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800087c:	441a      	add	r2, r3
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	4618      	mov	r0, r3
 8000886:	3718      	adds	r7, #24
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <_ZN7BMS_MOD12voltage_infoEPc>:

/*********************************************************************************************************
 ** Function name:           info
 ** Descriptions:            Function for printing the class data
 *********************************************************************************************************/
void BMS_MOD::voltage_info(char *buffer) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]

	if (getUARTState() == HAL_UART_STATE_READY) { // Send the message just if there is a serial por connected
 8000896:	f001 fa77 	bl	8001d88 <getUARTState>
 800089a:	4603      	mov	r3, r0
 800089c:	2b20      	cmp	r3, #32
 800089e:	bf0c      	ite	eq
 80008a0:	2301      	moveq	r3, #1
 80008a2:	2300      	movne	r3, #0
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	f000 8084 	beq.w	80009b4 <_ZN7BMS_MOD12voltage_infoEPc+0x128>
		print((char*) "\n***********************");
 80008ac:	4851      	ldr	r0, [pc, #324]	@ (80009f4 <_ZN7BMS_MOD12voltage_infoEPc+0x168>)
 80008ae:	f001 fa2f 	bl	8001d10 <print>
		print((char*) "         BMS");
 80008b2:	4851      	ldr	r0, [pc, #324]	@ (80009f8 <_ZN7BMS_MOD12voltage_infoEPc+0x16c>)
 80008b4:	f001 fa2c 	bl	8001d10 <print>
		print((char*) "***********************");
 80008b8:	4850      	ldr	r0, [pc, #320]	@ (80009fc <_ZN7BMS_MOD12voltage_infoEPc+0x170>)
 80008ba:	f001 fa29 	bl	8001d10 <print>
		sprintf(buffer, " - ERROR:     %i", error_volt);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	461a      	mov	r2, r3
 80008c4:	494e      	ldr	r1, [pc, #312]	@ (8000a00 <_ZN7BMS_MOD12voltage_infoEPc+0x174>)
 80008c6:	6838      	ldr	r0, [r7, #0]
 80008c8:	f00a fb6a 	bl	800afa0 <siprintf>
		print(buffer);
 80008cc:	6838      	ldr	r0, [r7, #0]
 80008ce:	f001 fa1f 	bl	8001d10 <print>
		sprintf(buffer, " - CAN ID:    0x%lx", CANID);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	461a      	mov	r2, r3
 80008d8:	494a      	ldr	r1, [pc, #296]	@ (8000a04 <_ZN7BMS_MOD12voltage_infoEPc+0x178>)
 80008da:	6838      	ldr	r0, [r7, #0]
 80008dc:	f00a fb60 	bl	800afa0 <siprintf>
		print(buffer);
 80008e0:	6838      	ldr	r0, [r7, #0]
 80008e2:	f001 fa15 	bl	8001d10 <print>
		sprintf(buffer, " - MAX V =    %i mV", MAX_V);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	461a      	mov	r2, r3
 80008ec:	4946      	ldr	r1, [pc, #280]	@ (8000a08 <_ZN7BMS_MOD12voltage_infoEPc+0x17c>)
 80008ee:	6838      	ldr	r0, [r7, #0]
 80008f0:	f00a fb56 	bl	800afa0 <siprintf>
		print(buffer);
 80008f4:	6838      	ldr	r0, [r7, #0]
 80008f6:	f001 fa0b 	bl	8001d10 <print>
		sprintf(buffer, " - MIN V =    %i mV", MIN_V);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000900:	461a      	mov	r2, r3
 8000902:	4942      	ldr	r1, [pc, #264]	@ (8000a0c <_ZN7BMS_MOD12voltage_infoEPc+0x180>)
 8000904:	6838      	ldr	r0, [r7, #0]
 8000906:	f00a fb4b 	bl	800afa0 <siprintf>
		print(buffer);
 800090a:	6838      	ldr	r0, [r7, #0]
 800090c:	f001 fa00 	bl	8001d10 <print>
		print((char*) "-----------------------");
 8000910:	483f      	ldr	r0, [pc, #252]	@ (8000a10 <_ZN7BMS_MOD12voltage_infoEPc+0x184>)
 8000912:	f001 f9fd 	bl	8001d10 <print>
		sprintf(buffer, "VOLTS (mV): [%i", cellVoltagemV[0]);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800091c:	461a      	mov	r2, r3
 800091e:	493d      	ldr	r1, [pc, #244]	@ (8000a14 <_ZN7BMS_MOD12voltage_infoEPc+0x188>)
 8000920:	6838      	ldr	r0, [r7, #0]
 8000922:	f00a fb3d 	bl	800afa0 <siprintf>
		printnl(buffer);
 8000926:	6838      	ldr	r0, [r7, #0]
 8000928:	f001 fa10 	bl	8001d4c <printnl>
		for (int i = 0; i < NUM_CELLS; i++) {
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	e010      	b.n	8000954 <_ZN7BMS_MOD12voltage_infoEPc+0xc8>
			sprintf(buffer, ", %i", cellVoltagemV[i]);
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	3328      	adds	r3, #40	@ 0x28
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	4413      	add	r3, r2
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	461a      	mov	r2, r3
 8000940:	4935      	ldr	r1, [pc, #212]	@ (8000a18 <_ZN7BMS_MOD12voltage_infoEPc+0x18c>)
 8000942:	6838      	ldr	r0, [r7, #0]
 8000944:	f00a fb2c 	bl	800afa0 <siprintf>
			printnl(buffer);
 8000948:	6838      	ldr	r0, [r7, #0]
 800094a:	f001 f9ff 	bl	8001d4c <printnl>
		for (int i = 0; i < NUM_CELLS; i++) {
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	3301      	adds	r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800095a:	461a      	mov	r2, r3
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	4293      	cmp	r3, r2
 8000960:	dbe7      	blt.n	8000932 <_ZN7BMS_MOD12voltage_infoEPc+0xa6>
		}

		for (int i = 0; i < NUM_CELLS; i++) {
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	e00f      	b.n	8000988 <_ZN7BMS_MOD12voltage_infoEPc+0xfc>
			voltage_acum += cellVoltagemV[i];
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	3328      	adds	r3, #40	@ 0x28
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	440b      	add	r3, r1
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	441a      	add	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
		for (int i = 0; i < NUM_CELLS; i++) {
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	3301      	adds	r3, #1
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800098e:	461a      	mov	r2, r3
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	4293      	cmp	r3, r2
 8000994:	dbe8      	blt.n	8000968 <_ZN7BMS_MOD12voltage_infoEPc+0xdc>
		}

		print((char*) "]");
 8000996:	4821      	ldr	r0, [pc, #132]	@ (8000a1c <_ZN7BMS_MOD12voltage_infoEPc+0x190>)
 8000998:	f001 f9ba 	bl	8001d10 <print>
		sprintf(buffer, " - V(max) = %i mV || V(min) = %i", MAX_V, MIN_V);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	699a      	ldr	r2, [r3, #24]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009a6:	491e      	ldr	r1, [pc, #120]	@ (8000a20 <_ZN7BMS_MOD12voltage_infoEPc+0x194>)
 80009a8:	6838      	ldr	r0, [r7, #0]
 80009aa:	f00a faf9 	bl	800afa0 <siprintf>
		print(buffer);
 80009ae:	6838      	ldr	r0, [r7, #0]
 80009b0:	f001 f9ae 	bl	8001d10 <print>
	}
	sprintf(buffer, "- BALANCING V = %i mV", BALANCING_V);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80009ba:	461a      	mov	r2, r3
 80009bc:	4919      	ldr	r1, [pc, #100]	@ (8000a24 <_ZN7BMS_MOD12voltage_infoEPc+0x198>)
 80009be:	6838      	ldr	r0, [r7, #0]
 80009c0:	f00a faee 	bl	800afa0 <siprintf>
	print(buffer);
 80009c4:	6838      	ldr	r0, [r7, #0]
 80009c6:	f001 f9a3 	bl	8001d10 <print>

	sprintf(buffer, "- STACK VOLTAGE = %i V", voltage_acum / 1000);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009d0:	4a15      	ldr	r2, [pc, #84]	@ (8000a28 <_ZN7BMS_MOD12voltage_infoEPc+0x19c>)
 80009d2:	fb82 1203 	smull	r1, r2, r2, r3
 80009d6:	1192      	asrs	r2, r2, #6
 80009d8:	17db      	asrs	r3, r3, #31
 80009da:	1ad3      	subs	r3, r2, r3
 80009dc:	461a      	mov	r2, r3
 80009de:	4913      	ldr	r1, [pc, #76]	@ (8000a2c <_ZN7BMS_MOD12voltage_infoEPc+0x1a0>)
 80009e0:	6838      	ldr	r0, [r7, #0]
 80009e2:	f00a fadd 	bl	800afa0 <siprintf>
	print(buffer);
 80009e6:	6838      	ldr	r0, [r7, #0]
 80009e8:	f001 f992 	bl	8001d10 <print>
}
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	0800b8f8 	.word	0x0800b8f8
 80009f8:	0800b914 	.word	0x0800b914
 80009fc:	0800b924 	.word	0x0800b924
 8000a00:	0800b93c 	.word	0x0800b93c
 8000a04:	0800b950 	.word	0x0800b950
 8000a08:	0800b964 	.word	0x0800b964
 8000a0c:	0800b978 	.word	0x0800b978
 8000a10:	0800b98c 	.word	0x0800b98c
 8000a14:	0800b9a4 	.word	0x0800b9a4
 8000a18:	0800b9b4 	.word	0x0800b9b4
 8000a1c:	0800b9bc 	.word	0x0800b9bc
 8000a20:	0800b9c0 	.word	0x0800b9c0
 8000a24:	0800b9e4 	.word	0x0800b9e4
 8000a28:	10624dd3 	.word	0x10624dd3
 8000a2c:	0800b9fc 	.word	0x0800b9fc

08000a30 <_ZN7BMS_MOD5parseEmPhm>:

/*********************************************************************************************************
 ** Function name:           parse
 ** Descriptions:            Function for parsing the received data via CAN protocol
 *********************************************************************************************************/
bool BMS_MOD::parse(uint32_t id, uint8_t *buf, uint32_t t) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	@ 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
 8000a3c:	603b      	str	r3, [r7, #0]
	if (id > CANID && id < CANID + 30) {
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	f240 8130 	bls.w	8000caa <_ZN7BMS_MOD5parseEmPhm+0x27a>
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	331e      	adds	r3, #30
 8000a50:	68ba      	ldr	r2, [r7, #8]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	f080 8129 	bcs.w	8000caa <_ZN7BMS_MOD5parseEmPhm+0x27a>
		int m = id % CANID;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a62:	fb01 f202 	mul.w	r2, r1, r2
 8000a66:	1a9b      	subs	r3, r3, r2
 8000a68:	617b      	str	r3, [r7, #20]
		int pos = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
		if (m >= 1 && m <= 5) {
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	f340 809e 	ble.w	8000bb2 <_ZN7BMS_MOD5parseEmPhm+0x182>
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	2b05      	cmp	r3, #5
 8000a7a:	f300 809a 	bgt.w	8000bb2 <_ZN7BMS_MOD5parseEmPhm+0x182>
			time_lim_received_volts = t + TIME_LIM_RECV_VOLTS;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	441a      	add	r2, r3
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	63da      	str	r2, [r3, #60]	@ 0x3c

			for (int i = 0; i < 4; i++) {
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a8e:	e04e      	b.n	8000b2e <_ZN7BMS_MOD5parseEmPhm+0xfe>
				pos = (m - 1) * 4 + i;
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a98:	4413      	add	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
				if (pos >= 19)
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	2b12      	cmp	r3, #18
 8000aa0:	dc49      	bgt.n	8000b36 <_ZN7BMS_MOD5parseEmPhm+0x106>
					break;

				cellVoltagemV[pos] = (buf[2 * i] << 8) | buf[2 * i + 1];
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4413      	add	r3, r2
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	021b      	lsls	r3, r3, #8
 8000ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ab2:	0052      	lsls	r2, r2, #1
 8000ab4:	3201      	adds	r2, #1
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	440a      	add	r2, r1
 8000aba:	7812      	ldrb	r2, [r2, #0]
 8000abc:	431a      	orrs	r2, r3
 8000abe:	68f9      	ldr	r1, [r7, #12]
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	3328      	adds	r3, #40	@ 0x28
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	440b      	add	r3, r1
 8000ac8:	605a      	str	r2, [r3, #4]
						//error_volt = BMS_OK;
					} else {
					flag_error_volt[pos] = 0;
				}*/

				if ((cellVoltagemV[pos] > LIMIT_MAX_V )
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	3328      	adds	r3, #40	@ 0x28
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	4413      	add	r3, r2
 8000ad4:	685a      	ldr	r2, [r3, #4]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	dd1e      	ble.n	8000b1c <_ZN7BMS_MOD5parseEmPhm+0xec>
						&& pos < NUM_CELLS) {
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	da17      	bge.n	8000b1c <_ZN7BMS_MOD5parseEmPhm+0xec>
					flag_error_volt[pos]++;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	3216      	adds	r2, #22
 8000af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000af6:	1c59      	adds	r1, r3, #1
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	3216      	adds	r2, #22
 8000afe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					if (flag_error_volt[pos] >= max_flag)
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	3216      	adds	r2, #22
 8000b08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b10:	429a      	cmp	r2, r3
 8000b12:	db09      	blt.n	8000b28 <_ZN7BMS_MOD5parseEmPhm+0xf8>
						error_volt = BMS_ERROR_VOLTS;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	2202      	movs	r2, #2
 8000b18:	605a      	str	r2, [r3, #4]
					if (flag_error_volt[pos] >= max_flag)
 8000b1a:	e005      	b.n	8000b28 <_ZN7BMS_MOD5parseEmPhm+0xf8>
						//error_volt = BMS_OK;
					} else {
					flag_error_volt[pos] = 0;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	3216      	adds	r2, #22
 8000b22:	2100      	movs	r1, #0
 8000b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (int i = 0; i < 4; i++) {
 8000b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b30:	2b03      	cmp	r3, #3
 8000b32:	ddad      	ble.n	8000a90 <_ZN7BMS_MOD5parseEmPhm+0x60>
 8000b34:	e000      	b.n	8000b38 <_ZN7BMS_MOD5parseEmPhm+0x108>
					break;
 8000b36:	bf00      	nop
				}
			}

			MAX_V = cellVoltagemV[0];
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	619a      	str	r2, [r3, #24]
			MIN_V = cellVoltagemV[0];
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
			for (int i = 1; i < 19; i++) {
 8000b4e:	2301      	movs	r3, #1
 8000b50:	623b      	str	r3, [r7, #32]
 8000b52:	e029      	b.n	8000ba8 <_ZN7BMS_MOD5parseEmPhm+0x178>
				if (cellVoltagemV[i] > MAX_V)
 8000b54:	68fa      	ldr	r2, [r7, #12]
 8000b56:	6a3b      	ldr	r3, [r7, #32]
 8000b58:	3328      	adds	r3, #40	@ 0x28
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	4413      	add	r3, r2
 8000b5e:	685a      	ldr	r2, [r3, #4]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	dd08      	ble.n	8000b7a <_ZN7BMS_MOD5parseEmPhm+0x14a>
					MAX_V = cellVoltagemV[i];
 8000b68:	68fa      	ldr	r2, [r7, #12]
 8000b6a:	6a3b      	ldr	r3, [r7, #32]
 8000b6c:	3328      	adds	r3, #40	@ 0x28
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	4413      	add	r3, r2
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	619a      	str	r2, [r3, #24]
 8000b78:	e013      	b.n	8000ba2 <_ZN7BMS_MOD5parseEmPhm+0x172>
				else if (cellVoltagemV[i] < MIN_V)
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	6a3b      	ldr	r3, [r7, #32]
 8000b7e:	3328      	adds	r3, #40	@ 0x28
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	685a      	ldr	r2, [r3, #4]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	da08      	bge.n	8000ba2 <_ZN7BMS_MOD5parseEmPhm+0x172>
					MIN_V = cellVoltagemV[i];
 8000b90:	68fa      	ldr	r2, [r7, #12]
 8000b92:	6a3b      	ldr	r3, [r7, #32]
 8000b94:	3328      	adds	r3, #40	@ 0x28
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	4413      	add	r3, r2
 8000b9a:	685a      	ldr	r2, [r3, #4]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
			for (int i = 1; i < 19; i++) {
 8000ba2:	6a3b      	ldr	r3, [r7, #32]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	623b      	str	r3, [r7, #32]
 8000ba8:	6a3b      	ldr	r3, [r7, #32]
 8000baa:	2b12      	cmp	r3, #18
 8000bac:	ddd2      	ble.n	8000b54 <_ZN7BMS_MOD5parseEmPhm+0x124>
			}

			return true;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e07c      	b.n	8000cac <_ZN7BMS_MOD5parseEmPhm+0x27c>

		} else if (m >= 21 && m <= 25) {
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	2b14      	cmp	r3, #20
 8000bb6:	dd78      	ble.n	8000caa <_ZN7BMS_MOD5parseEmPhm+0x27a>
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	2b19      	cmp	r3, #25
 8000bbc:	dc75      	bgt.n	8000caa <_ZN7BMS_MOD5parseEmPhm+0x27a>
			// m = 21 → packet 0, m = 25 → packet 4
			time_lim_received_temps = t + TIME_LIM_RECV_TEMPS;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	441a      	add	r2, r3
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	649a      	str	r2, [r3, #72]	@ 0x48
			if (flag_charger == 1)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d104      	bne.n	8000bde <_ZN7BMS_MOD5parseEmPhm+0x1ae>
				module_send_message_CAN1(id, buf, 8);
 8000bd4:	2208      	movs	r2, #8
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	68b8      	ldr	r0, [r7, #8]
 8000bda:	f001 f837 	bl	8001c4c <module_send_message_CAN1>

			for (int i = 0; i < 8; i++) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
 8000be2:	e021      	b.n	8000c28 <_ZN7BMS_MOD5parseEmPhm+0x1f8>
				pos = (m - 21) * 8 + i;
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	3b15      	subs	r3, #21
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	69fa      	ldr	r2, [r7, #28]
 8000bec:	4413      	add	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
				if (pos >= 38)
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	2b25      	cmp	r3, #37	@ 0x25
 8000bf4:	dc1c      	bgt.n	8000c30 <_ZN7BMS_MOD5parseEmPhm+0x200>
					break;

				cellTemperature[pos] = buf[i];
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	4619      	mov	r1, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	323c      	adds	r2, #60	@ 0x3c
 8000c06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				if (cellTemperature[pos] > LIMIT_MAX_T)
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	323c      	adds	r2, #60	@ 0x3c
 8000c10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	695b      	ldr	r3, [r3, #20]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	dd02      	ble.n	8000c22 <_ZN7BMS_MOD5parseEmPhm+0x1f2>
					error_temp = BMS_ERROR_TEMP;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	2203      	movs	r2, #3
 8000c20:	609a      	str	r2, [r3, #8]
			for (int i = 0; i < 8; i++) {
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3301      	adds	r3, #1
 8000c26:	61fb      	str	r3, [r7, #28]
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	2b07      	cmp	r3, #7
 8000c2c:	ddda      	ble.n	8000be4 <_ZN7BMS_MOD5parseEmPhm+0x1b4>
 8000c2e:	e000      	b.n	8000c32 <_ZN7BMS_MOD5parseEmPhm+0x202>
					break;
 8000c30:	bf00      	nop


			}

		      MAX_T = cellTemperature[0];
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		      MIN_T = cellTemperature[0];
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
		      for (int i = 0; i < 38; i++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61bb      	str	r3, [r7, #24]
 8000c4e:	e027      	b.n	8000ca0 <_ZN7BMS_MOD5parseEmPhm+0x270>
		      {
		        if (cellTemperature[i] > MAX_T)
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	323c      	adds	r2, #60	@ 0x3c
 8000c56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000c60:	429a      	cmp	r2, r3
 8000c62:	dd08      	ble.n	8000c76 <_ZN7BMS_MOD5parseEmPhm+0x246>
		          MAX_T = cellTemperature[i];
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	69ba      	ldr	r2, [r7, #24]
 8000c68:	323c      	adds	r2, #60	@ 0x3c
 8000c6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8000c74:	e011      	b.n	8000c9a <_ZN7BMS_MOD5parseEmPhm+0x26a>
		        else if (cellTemperature[i] < MIN_T)
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	323c      	adds	r2, #60	@ 0x3c
 8000c7c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c86:	429a      	cmp	r2, r3
 8000c88:	da07      	bge.n	8000c9a <_ZN7BMS_MOD5parseEmPhm+0x26a>
		          MIN_T = cellTemperature[i];
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	323c      	adds	r2, #60	@ 0x3c
 8000c90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
		      for (int i = 0; i < 38; i++)
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	61bb      	str	r3, [r7, #24]
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	2b25      	cmp	r3, #37	@ 0x25
 8000ca4:	ddd4      	ble.n	8000c50 <_ZN7BMS_MOD5parseEmPhm+0x220>
		      }


			return true;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e000      	b.n	8000cac <_ZN7BMS_MOD5parseEmPhm+0x27c>
		}

	}

	return false;
 8000caa:	2300      	movs	r3, #0
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3728      	adds	r7, #40	@ 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <_ZN7BMS_MOD13query_voltageEmPc>:

/*********************************************************************************************************
 ** Function name:           query_voltage
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/
int BMS_MOD::query_voltage(uint32_t time, char *buffer) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
	// Shunt voltage in milivolts

	//message_balancing[1] = BALANCING_V & 0xFF; // Coment this two lines for disabling the balancing
	//message_balancing[0] = (BALANCING_V >> 8) & 0xFF; // Coment this two lines for disabling the balancing

	if (time > time_lim_sent_volts) {
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cc4:	68ba      	ldr	r2, [r7, #8]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d91d      	bls.n	8000d06 <_ZN7BMS_MOD13query_voltageEmPc+0x52>
		time_lim_sent_volts += TIME_LIM_SEND_VOLTS;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	6a1b      	ldr	r3, [r3, #32]
 8000cd2:	441a      	add	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	639a      	str	r2, [r3, #56]	@ 0x38
		if (CANID != 0x00) { //It keeps sending 0x00 and dont know where
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d012      	beq.n	8000d06 <_ZN7BMS_MOD13query_voltageEmPc+0x52>
			if (module_send_message_CAN2(CANID, message_balancing, 2)
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	6818      	ldr	r0, [r3, #0]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	334c      	adds	r3, #76	@ 0x4c
 8000ce8:	2202      	movs	r2, #2
 8000cea:	4619      	mov	r1, r3
 8000cec:	f000 fff0 	bl	8001cd0 <module_send_message_CAN2>
 8000cf0:	4603      	mov	r3, r0
					!= HAL_OK) {
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	bf14      	ite	ne
 8000cf6:	2301      	movne	r3, #1
 8000cf8:	2300      	moveq	r3, #0
 8000cfa:	b2db      	uxtb	r3, r3
			if (module_send_message_CAN2(CANID, message_balancing, 2)
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d002      	beq.n	8000d06 <_ZN7BMS_MOD13query_voltageEmPc+0x52>
				error_volt = BMS_ERROR_COMMUNICATION;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2201      	movs	r2, #1
 8000d04:	605a      	str	r2, [r3, #4]
    if (time > time_lim_received_volts) {

            //error_volt = BMS_ERROR_COMMUNICATION;
    }

	if (TIME_LIM_PLOT_VOLTS > 0 && time > time_lim_plotted_volts) {
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d00f      	beq.n	8000d2e <_ZN7BMS_MOD13query_voltageEmPc+0x7a>
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d90a      	bls.n	8000d2e <_ZN7BMS_MOD13query_voltageEmPc+0x7a>
		time_lim_plotted_volts += TIME_LIM_PLOT_VOLTS;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	69db      	ldr	r3, [r3, #28]
 8000d20:	441a      	add	r2, r3
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	635a      	str	r2, [r3, #52]	@ 0x34
		voltage_info(buffer);
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	68f8      	ldr	r0, [r7, #12]
 8000d2a:	f7ff fdaf 	bl	800088c <_ZN7BMS_MOD12voltage_infoEPc>
	}

	for (int i = 0; i < NUM_CELLS; i++) {
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	e00f      	b.n	8000d54 <_ZN7BMS_MOD13query_voltageEmPc+0xa0>
		voltage_acum += cellVoltagemV[i];
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000d3a:	68f9      	ldr	r1, [r7, #12]
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	3328      	adds	r3, #40	@ 0x28
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	440b      	add	r3, r1
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	441a      	add	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	for (int i = 0; i < NUM_CELLS; i++) {
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	3301      	adds	r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	dbe8      	blt.n	8000d34 <_ZN7BMS_MOD13query_voltageEmPc+0x80>
	}
	return error_volt;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	685b      	ldr	r3, [r3, #4]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <_ZN7BMS_MOD17query_temperatureEmPc>:
/*********************************************************************************************************
 ** Function name:           query_temperature
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/

int BMS_MOD::query_temperature(uint32_t time, char *buffer) {
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b084      	sub	sp, #16
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	60f8      	str	r0, [r7, #12]
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
// Function for performing a correct behavior
	if (time > time_lim_sent_temps) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE TEMPERATURES
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d91b      	bls.n	8000dbc <_ZN7BMS_MOD17query_temperatureEmPc+0x4e>
		time_lim_sent_temps += TIME_LIM_SEND_TEMPS;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d8c:	441a      	add	r2, r3
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	645a      	str	r2, [r3, #68]	@ 0x44

		if (module_send_message_CAN2(CANID + 20, message_temperatures, 2)
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f103 0014 	add.w	r0, r3, #20
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	334e      	adds	r3, #78	@ 0x4e
 8000d9e:	2202      	movs	r2, #2
 8000da0:	4619      	mov	r1, r3
 8000da2:	f000 ff95 	bl	8001cd0 <module_send_message_CAN2>
 8000da6:	4603      	mov	r3, r0
				!= HAL_OK) {
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	bf14      	ite	ne
 8000dac:	2301      	movne	r3, #1
 8000dae:	2300      	moveq	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
		if (module_send_message_CAN2(CANID + 20, message_temperatures, 2)
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d002      	beq.n	8000dbc <_ZN7BMS_MOD17query_temperatureEmPc+0x4e>
			error_temp = BMS_ERROR_TEMP; // If the message is not sended then, error
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	2203      	movs	r2, #3
 8000dba:	609a      	str	r2, [r3, #8]
		}
	}

	if (time_lim_sent_temps > 0 &&
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d00f      	beq.n	8000de4 <_ZN7BMS_MOD17query_temperatureEmPc+0x76>
	    time > time_lim_received_temps &&
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
	if (time_lim_sent_temps > 0 &&
 8000dc8:	68ba      	ldr	r2, [r7, #8]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d90a      	bls.n	8000de4 <_ZN7BMS_MOD17query_temperatureEmPc+0x76>
	    time - time_lim_received_temps > TIME_LIM_RECV_TEMPS) {
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	1ad2      	subs	r2, r2, r3
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
	    time > time_lim_received_temps &&
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d902      	bls.n	8000de4 <_ZN7BMS_MOD17query_temperatureEmPc+0x76>
	    error_temp = BMS_ERROR_COMMUNICATION;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	2201      	movs	r2, #1
 8000de2:	609a      	str	r2, [r3, #8]
	}

	if (TIME_LIM_PLOT_TEMPS > 0 && time > time_lim_plotted_temps) {
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d00b      	beq.n	8000e04 <_ZN7BMS_MOD17query_temperatureEmPc+0x96>
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df0:	68ba      	ldr	r2, [r7, #8]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d906      	bls.n	8000e04 <_ZN7BMS_MOD17query_temperatureEmPc+0x96>
		time_lim_plotted_temps += TIME_LIM_PLOT_TEMPS;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dfe:	441a      	add	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	641a      	str	r2, [r3, #64]	@ 0x40
		//temperature_info(buffer);
	}



	return error_temp;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	689b      	ldr	r3, [r3, #8]

}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <_ZN7CPU_MODC1Emmi>:

// ********************************************************************************************************
// **Function name:           CPU_MOD
// **Descriptions:            Initialization function of teh class
// ********************************************************************************************************
CPU_MOD::CPU_MOD(uint32_t _ID_send, uint32_t _ID_recv, int _LAG) { /////////////////////////Habia un _LAG=0
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
 8000e1c:	603b      	str	r3, [r7, #0]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2200      	movs	r2, #0
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2202      	movs	r2, #2
 8000e34:	731a      	strb	r2, [r3, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	2202      	movs	r2, #2
 8000e3a:	611a      	str	r2, [r3, #16]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e42:	615a      	str	r2, [r3, #20]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2264      	movs	r2, #100	@ 0x64
 8000e48:	619a      	str	r2, [r3, #24]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	4a18      	ldr	r2, [pc, #96]	@ (8000eb0 <_ZN7CPU_MODC1Emmi+0xa0>)
 8000e4e:	61da      	str	r2, [r3, #28]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	695a      	ldr	r2, [r3, #20]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	621a      	str	r2, [r3, #32]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	69da      	ldr	r2, [r3, #28]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	631a      	str	r2, [r3, #48]	@ 0x30
    CANID_send = _ID_send;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	68ba      	ldr	r2, [r7, #8]
 8000e76:	601a      	str	r2, [r3, #0]
    CANID_recv = _ID_recv;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	605a      	str	r2, [r3, #4]

    time_lim_plotted += _LAG;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	6a1a      	ldr	r2, [r3, #32]
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	441a      	add	r2, r3
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	621a      	str	r2, [r3, #32]
    time_lim_sended += _LAG;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	441a      	add	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	625a      	str	r2, [r3, #36]	@ 0x24
    time_lim_received += _LAG;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	441a      	add	r2, r3
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	000f4240 	.word	0x000f4240

08000eb4 <_ZN7CPU_MOD5parseEmPhm>:

// ********************************************************************************************************
// **Function name:           parse
// **Descriptions:            Function for parsing the received data via CAN protocl
// ********************************************************************************************************
bool CPU_MOD::parse(uint32_t id, uint8_t* buf, uint32_t t) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
 8000ec0:	603b      	str	r3, [r7, #0]
    if (id == 0x100) {
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ec8:	d131      	bne.n	8000f2e <_ZN7CPU_MOD5parseEmPhm+0x7a>
        error = CPU_OK;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
        time_lim_received = t + TIME_LIM_RECV;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	69da      	ldr	r2, [r3, #28]
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	441a      	add	r2, r3
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	629a      	str	r2, [r3, #40]	@ 0x28
        DC_BUS = (int)((buf[1]<<8)|buf[0]); // This direction sends the voltage in DC_BUS
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	7812      	ldrb	r2, [r2, #0]
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	631a      	str	r2, [r3, #48]	@ 0x30
        if (DC_BUS > 280) { //(DC_BUS>0.9*voltage_acum)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8000ef6:	dd18      	ble.n	8000f2a <_ZN7CPU_MOD5parseEmPhm+0x76>
            error = CPU_BUS_LINE_OK;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2202      	movs	r2, #2
 8000efc:	609a      	str	r2, [r3, #8]
            if (module_send_message_CAN1(CANID_send, currentState, 1) != HAL_OK){
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6818      	ldr	r0, [r3, #0]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	330c      	adds	r3, #12
 8000f06:	2201      	movs	r2, #1
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f000 fe9f 	bl	8001c4c <module_send_message_CAN1>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	bf14      	ite	ne
 8000f14:	2301      	movne	r3, #1
 8000f16:	2300      	moveq	r3, #0
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d005      	beq.n	8000f2a <_ZN7CPU_MOD5parseEmPhm+0x76>
                error = CPU_ERROR_COMMUNICATION;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2201      	movs	r2, #1
 8000f22:	609a      	str	r2, [r3, #8]
                print((char*)"error message");
 8000f24:	4804      	ldr	r0, [pc, #16]	@ (8000f38 <_ZN7CPU_MOD5parseEmPhm+0x84>)
 8000f26:	f000 fef3 	bl	8001d10 <print>
            }

        }
        return true;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e000      	b.n	8000f30 <_ZN7CPU_MOD5parseEmPhm+0x7c>
    }
    return false;
 8000f2e:	2300      	movs	r3, #0
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	0800bb70 	.word	0x0800bb70

08000f3c <_ZN7CPU_MOD5queryEmPc>:

// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function to check if i need to send a mesage new mesage and the received mesajes interval are within the limits
// ********************************************************************************************************
int CPU_MOD::query(uint32_t time, char* buffer) {
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
	// Function for performing a correct behaivour
    if (time > time_lim_sended) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE BMS
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f4c:	68ba      	ldr	r2, [r7, #8]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d906      	bls.n	8000f60 <_ZN7CPU_MOD5queryEmPc+0x24>
        time_lim_sended += TIME_LIM_SEND;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	441a      	add	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    if (time > time_lim_received)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f64:	68ba      	ldr	r2, [r7, #8]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d902      	bls.n	8000f70 <_ZN7CPU_MOD5queryEmPc+0x34>
        error = CPU_ERROR_COMMUNICATION; ///////Cheking if everything is alright each time
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	609a      	str	r2, [r3, #8]

    if (TIME_LIM_PLOT > 0 && time > time_lim_plotted) {
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d00b      	beq.n	8000f90 <_ZN7CPU_MOD5queryEmPc+0x54>
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	68ba      	ldr	r2, [r7, #8]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d906      	bls.n	8000f90 <_ZN7CPU_MOD5queryEmPc+0x54>
        time_lim_plotted += TIME_LIM_PLOT;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	6a1a      	ldr	r2, [r3, #32]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	441a      	add	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	621a      	str	r2, [r3, #32]
        //info(buffer);
    }
    return error;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	689b      	ldr	r3, [r3, #8]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <_ZN7CPU_MOD11updateStateEi>:

void CPU_MOD::updateState(int s) {
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
    currentState[0] = s & 0xFF;
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	731a      	strb	r2, [r3, #12]
    current_state = s;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	683a      	ldr	r2, [r7, #0]
 8000fb6:	611a      	str	r2, [r3, #16]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <_ZN11Current_MODC1Emi>:

// ********************************************************************************************************
// **Function name:           Current_MOD
// **Descriptions:            Initialization function of current class
// **********************************************************************************************************
Current_MOD::Current_MOD(uint32_t ID, int _C_MAX)
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	721a      	strb	r2, [r3, #8]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	725a      	strb	r2, [r3, #9]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	60da      	str	r2, [r3, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2200      	movs	r2, #0
 8001004:	61da      	str	r2, [r3, #28]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800100c:	621a      	str	r2, [r3, #32]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	22fa      	movs	r2, #250	@ 0xfa
 8001012:	625a      	str	r2, [r3, #36]	@ 0x24
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2232      	movs	r2, #50	@ 0x32
 8001018:	629a      	str	r2, [r3, #40]	@ 0x28
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2232      	movs	r2, #50	@ 0x32
 800101e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2200      	movs	r2, #0
 8001024:	631a      	str	r2, [r3, #48]	@ 0x30
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2200      	movs	r2, #0
 800102a:	635a      	str	r2, [r3, #52]	@ 0x34
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2200      	movs	r2, #0
 8001030:	639a      	str	r2, [r3, #56]	@ 0x38
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2200      	movs	r2, #0
 8001036:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2200      	movs	r2, #0
 800103c:	641a      	str	r2, [r3, #64]	@ 0x40
{
    CANID = ID;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	68ba      	ldr	r2, [r7, #8]
 8001042:	605a      	str	r2, [r3, #4]
    C_MAX = _C_MAX;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	601a      	str	r2, [r3, #0]
    flag_error_current = 1;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2201      	movs	r2, #1
 800104e:	61da      	str	r2, [r3, #28]
}
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4618      	mov	r0, r3
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <_ZN11Current_MOD5queryEiPc>:
// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function that transforms the voltage measured by the sensor to its equivalent current
// **********************************************************************************************************
int Current_MOD::query(int time, char* buffer)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
    error = Current_OK;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2200      	movs	r2, #0
 8001070:	631a      	str	r2, [r3, #48]	@ 0x30

    VoltageADC = readAnalogValue();
 8001072:	f000 fe93 	bl	8001d9c <readAnalogValue>
 8001076:	eef0 7a40 	vmov.f32	s15, s0
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	edc3 7a04 	vstr	s15, [r3, #16]

    //printValue(VoltagemV);

    if(VoltageADC < 400){
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	edd3 7a04 	vldr	s15, [r3, #16]
 8001086:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8001268 <_ZN11Current_MOD5queryEiPc+0x208>
 800108a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800108e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001092:	d509      	bpl.n	80010a8 <_ZN11Current_MOD5queryEiPc+0x48>
    	flag_error_current = 1;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2201      	movs	r2, #1
 8001098:	61da      	str	r2, [r3, #28]
    	flag_current = 1;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2201      	movs	r2, #1
 800109e:	641a      	str	r2, [r3, #64]	@ 0x40
    	error = 1;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2201      	movs	r2, #1
 80010a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80010a6:	e008      	b.n	80010ba <_ZN11Current_MOD5queryEiPc+0x5a>
    }
    else{
    	flag_error_current = 0;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
    	flag_current = 0;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2200      	movs	r2, #0
 80010b2:	641a      	str	r2, [r3, #64]	@ 0x40
    	error = Current_OK;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2200      	movs	r2, #0
 80010b8:	631a      	str	r2, [r3, #48]	@ 0x30
    if(VoltageADC <=  400)
    {
     //error=Current_ERROR_Comunication;
    }

    VoltageV=VoltageADC*3.3/1023; //AnalogRead function reads a value between 0-1023 (1024, 10 bits) here I get the real voltage value based on the value the function gets
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80010c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010c4:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 8001240 <_ZN11Current_MOD5queryEiPc+0x1e0>
 80010c8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80010cc:	ed9f 5b5e 	vldr	d5, [pc, #376]	@ 8001248 <_ZN11Current_MOD5queryEiPc+0x1e8>
 80010d0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010d4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	edc3 7a03 	vstr	s15, [r3, #12]

    if(VoltageV >= 2.8){
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80010e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010e8:	ed9f 6b59 	vldr	d6, [pc, #356]	@ 8001250 <_ZN11Current_MOD5queryEiPc+0x1f0>
 80010ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80010f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f4:	db02      	blt.n	80010fc <_ZN11Current_MOD5queryEiPc+0x9c>
    	flag_current = 1;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2201      	movs	r2, #1
 80010fa:	641a      	str	r2, [r3, #64]	@ 0x40
    printnl("V");
    printValue(VoltageV); */
    

    //printValue(Current);
    Current=(2.5-VoltageV)/0.0057; //Sensitivity is 5,7 mv/A
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8001102:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001106:	eeb0 6b04 	vmov.f64	d6, #4	@ 0x40200000  2.5
 800110a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800110e:	ed9f 5b52 	vldr	d5, [pc, #328]	@ 8001258 <_ZN11Current_MOD5queryEiPc+0x1f8>
 8001112:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001116:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800111a:	ee17 2a90 	vmov	r2, s15
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	63da      	str	r2, [r3, #60]	@ 0x3c
    if(Current > C_MAX*0.8 && Current < C_MAX)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800113a:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 8001260 <_ZN11Current_MOD5queryEiPc+0x200>
 800113e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001142:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114a:	dd11      	ble.n	8001170 <_ZN11Current_MOD5queryEiPc+0x110>
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	429a      	cmp	r2, r3
 8001156:	da0b      	bge.n	8001170 <_ZN11Current_MOD5queryEiPc+0x110>
    {
        if(flag_error_current == 0) module_send_message_NoExtId_CAN1(0x500,message,1); //If current between 80 and 100% of maximun, sends alert
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	69db      	ldr	r3, [r3, #28]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d107      	bne.n	8001170 <_ZN11Current_MOD5queryEiPc+0x110>
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	3308      	adds	r3, #8
 8001164:	2201      	movs	r2, #1
 8001166:	4619      	mov	r1, r3
 8001168:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800116c:	f000 fd90 	bl	8001c90 <module_send_message_NoExtId_CAN1>
    }

    if (Current > C_MAX)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	429a      	cmp	r2, r3
 800117a:	dd18      	ble.n	80011ae <_ZN11Current_MOD5queryEiPc+0x14e>
    {
        if (flag_error_current == 1) {
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d107      	bne.n	8001194 <_ZN11Current_MOD5queryEiPc+0x134>
        	module_send_message_NoExtId_CAN1(0x501, message, 2); //If current over maximun, sends alert
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	3308      	adds	r3, #8
 8001188:	2202      	movs	r2, #2
 800118a:	4619      	mov	r1, r3
 800118c:	f240 5001 	movw	r0, #1281	@ 0x501
 8001190:	f000 fd7e 	bl	8001c90 <module_send_message_NoExtId_CAN1>
        }

        flag_error_current++;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	69db      	ldr	r3, [r3, #28]
 8001198:	1c5a      	adds	r2, r3, #1
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	61da      	str	r2, [r3, #28]

        if (flag_charger != 1 || flag_charger == 1) //Only cut the AMS if accu not connected to charger, during charging the current control is on charger
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d119      	bne.n	80011da <_ZN11Current_MOD5queryEiPc+0x17a>
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	e015      	b.n	80011da <_ZN11Current_MOD5queryEiPc+0x17a>
            }
        }
    }
    else
    {
        if (flag_error_current != 0)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00e      	beq.n	80011d4 <_ZN11Current_MOD5queryEiPc+0x174>
		for (int i = 0; i < 5; i++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
 80011ba:	e008      	b.n	80011ce <_ZN11Current_MOD5queryEiPc+0x16e>
		{
			module_send_message_NoExtId_CAN1(0x502, 0, 2); //If current normal, sends green flag
 80011bc:	2202      	movs	r2, #2
 80011be:	2100      	movs	r1, #0
 80011c0:	f240 5002 	movw	r0, #1282	@ 0x502
 80011c4:	f000 fd64 	bl	8001c90 <module_send_message_NoExtId_CAN1>
		for (int i = 0; i < 5; i++)
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	3301      	adds	r3, #1
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	2b04      	cmp	r3, #4
 80011d2:	ddf3      	ble.n	80011bc <_ZN11Current_MOD5queryEiPc+0x15c>
		}
        flag_error_current = 0;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
    }


    if (time > time_lim_sended)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	dd16      	ble.n	8001212 <_ZN11Current_MOD5queryEiPc+0x1b2>
    {
        time_lim_sended += TIME_LIM_SEND;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ec:	441a      	add	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	62da      	str	r2, [r3, #44]	@ 0x2c
        message[0] = 0;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2200      	movs	r2, #0
 80011f6:	721a      	strb	r2, [r3, #8]
        message[1] = Current & 0xFF;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	725a      	strb	r2, [r3, #9]
        module_send_message_NoExtId_CAN1(CANID, message, 2); //Sends current through CAN each interval of ms
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6858      	ldr	r0, [r3, #4]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	3308      	adds	r3, #8
 800120a:	2202      	movs	r2, #2
 800120c:	4619      	mov	r1, r3
 800120e:	f000 fd3f 	bl	8001c90 <module_send_message_NoExtId_CAN1>
    }


    if (TIME_LIM_PLOT > 0 && time > time_lim_plotted)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6a1b      	ldr	r3, [r3, #32]
 8001216:	2b00      	cmp	r3, #0
 8001218:	dd0b      	ble.n	8001232 <_ZN11Current_MOD5queryEiPc+0x1d2>
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	429a      	cmp	r2, r3
 8001222:	dd06      	ble.n	8001232 <_ZN11Current_MOD5queryEiPc+0x1d2>
    {
        time_lim_plotted += TIME_LIM_PLOT;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	441a      	add	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	629a      	str	r2, [r3, #40]	@ 0x28
        //info(buffer);

    }

    
    return error;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
}
 8001236:	4618      	mov	r0, r3
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	66666666 	.word	0x66666666
 8001244:	400a6666 	.word	0x400a6666
 8001248:	00000000 	.word	0x00000000
 800124c:	408ff800 	.word	0x408ff800
 8001250:	66666666 	.word	0x66666666
 8001254:	40066666 	.word	0x40066666
 8001258:	19652bd4 	.word	0x19652bd4
 800125c:	3f7758e2 	.word	0x3f7758e2
 8001260:	9999999a 	.word	0x9999999a
 8001264:	3fe99999 	.word	0x3fe99999
 8001268:	43c80000 	.word	0x43c80000

0800126c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b085      	sub	sp, #20
 8001270:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001272:	f001 fba3 	bl	80029bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001276:	f000 f89d 	bl	80013b4 <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800127a:	f000 f917 	bl	80014ac <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800127e:	f000 fbc1 	bl	8001a04 <_ZL12MX_GPIO_Initv>
  MX_FDCAN2_Init();
 8001282:	f000 fad5 	bl	8001830 <_ZL14MX_FDCAN2_Initv>
  MX_FDCAN1_Init();
 8001286:	f000 fa49 	bl	800171c <_ZL14MX_FDCAN1_Initv>
  MX_USART2_UART_Init();
 800128a:	f000 fb5b 	bl	8001944 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 800128e:	f000 f941 	bl	8001514 <_ZL12MX_ADC1_Initv>
  MX_ADC3_Init();
 8001292:	f000 f9c9 	bl	8001628 <_ZL12MX_ADC3_Initv>
  /* USER CODE BEGIN 2 */

  if (HAL_FDCAN_Start(&hfdcan1) == HAL_OK){
 8001296:	483d      	ldr	r0, [pc, #244]	@ (800138c <main+0x120>)
 8001298:	f003 ff24 	bl	80050e4 <HAL_FDCAN_Start>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	bf0c      	ite	eq
 80012a2:	2301      	moveq	r3, #1
 80012a4:	2300      	movne	r3, #0
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d002      	beq.n	80012b2 <main+0x46>
	  print((char*)"CAN_ACU iniciado");
 80012ac:	4838      	ldr	r0, [pc, #224]	@ (8001390 <main+0x124>)
 80012ae:	f000 fd2f 	bl	8001d10 <print>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) == HAL_OK)
 80012b2:	2200      	movs	r2, #0
 80012b4:	2101      	movs	r1, #1
 80012b6:	4835      	ldr	r0, [pc, #212]	@ (800138c <main+0x120>)
 80012b8:	f004 f906 	bl	80054c8 <HAL_FDCAN_ActivateNotification>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	bf0c      	ite	eq
 80012c2:	2301      	moveq	r3, #1
 80012c4:	2300      	movne	r3, #0
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d002      	beq.n	80012d2 <main+0x66>
  {
	  print((char*)"CAN_ACU notification");
 80012cc:	4831      	ldr	r0, [pc, #196]	@ (8001394 <main+0x128>)
 80012ce:	f000 fd1f 	bl	8001d10 <print>
  }

  if (HAL_FDCAN_Start(&hfdcan2) == HAL_OK){
 80012d2:	4831      	ldr	r0, [pc, #196]	@ (8001398 <main+0x12c>)
 80012d4:	f003 ff06 	bl	80050e4 <HAL_FDCAN_Start>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	bf0c      	ite	eq
 80012de:	2301      	moveq	r3, #1
 80012e0:	2300      	movne	r3, #0
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d002      	beq.n	80012ee <main+0x82>
	  print((char*)"CAN_BMS iniciado");
 80012e8:	482c      	ldr	r0, [pc, #176]	@ (800139c <main+0x130>)
 80012ea:	f000 fd11 	bl	8001d10 <print>
  }

  if(HAL_ADC_Start(&hadc3) == HAL_OK){
 80012ee:	482c      	ldr	r0, [pc, #176]	@ (80013a0 <main+0x134>)
 80012f0:	f002 f924 	bl	800353c <HAL_ADC_Start>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	bf0c      	ite	eq
 80012fa:	2301      	moveq	r3, #1
 80012fc:	2300      	movne	r3, #0
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <main+0x9e>
	  print((char*)"ADC iniciado");
 8001304:	4827      	ldr	r0, [pc, #156]	@ (80013a4 <main+0x138>)
 8001306:	f000 fd03 	bl	8001d10 <print>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  select_state();
 800130a:	f000 fd71 	bl	8001df0 <_Z12select_statev>
		  msg_acu.bus = 1;
		  msg_acu.time = HAL_GetTick();
		  parse_state(msg_acu);
	  }*/

	  if (HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader_bms, RxData) == HAL_OK) {
 800130e:	4b26      	ldr	r3, [pc, #152]	@ (80013a8 <main+0x13c>)
 8001310:	4a26      	ldr	r2, [pc, #152]	@ (80013ac <main+0x140>)
 8001312:	2140      	movs	r1, #64	@ 0x40
 8001314:	4820      	ldr	r0, [pc, #128]	@ (8001398 <main+0x12c>)
 8001316:	f003 ff6b 	bl	80051f0 <HAL_FDCAN_GetRxMessage>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	bf0c      	ite	eq
 8001320:	2301      	moveq	r3, #1
 8001322:	2300      	movne	r3, #0
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0ef      	beq.n	800130a <main+0x9e>

		  msg_bms.id = RxHeader_bms.Identifier;
 800132a:	4b20      	ldr	r3, [pc, #128]	@ (80013ac <main+0x140>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a20      	ldr	r2, [pc, #128]	@ (80013b0 <main+0x144>)
 8001330:	6013      	str	r3, [r2, #0]
		  msg_bms.len = RxHeader_bms.DataLength;
 8001332:	4b1e      	ldr	r3, [pc, #120]	@ (80013ac <main+0x140>)
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	b2da      	uxtb	r2, r3
 8001338:	4b1d      	ldr	r3, [pc, #116]	@ (80013b0 <main+0x144>)
 800133a:	711a      	strb	r2, [r3, #4]
		  for (int i = 0; i < 8; i++) {msg_bms.buf[i] = RxData[i];}
 800133c:	2300      	movs	r3, #0
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	e00c      	b.n	800135c <main+0xf0>
 8001342:	4a19      	ldr	r2, [pc, #100]	@ (80013a8 <main+0x13c>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	7819      	ldrb	r1, [r3, #0]
 800134a:	4a19      	ldr	r2, [pc, #100]	@ (80013b0 <main+0x144>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4413      	add	r3, r2
 8001350:	3305      	adds	r3, #5
 8001352:	460a      	mov	r2, r1
 8001354:	701a      	strb	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3301      	adds	r3, #1
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b07      	cmp	r3, #7
 8001360:	ddef      	ble.n	8001342 <main+0xd6>
		  msg_bms.bus = 2;
 8001362:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <main+0x144>)
 8001364:	2202      	movs	r2, #2
 8001366:	611a      	str	r2, [r3, #16]
		  msg_bms.time = HAL_GetTick();
 8001368:	f001 fbae 	bl	8002ac8 <HAL_GetTick>
 800136c:	4603      	mov	r3, r0
 800136e:	4a10      	ldr	r2, [pc, #64]	@ (80013b0 <main+0x144>)
 8001370:	6153      	str	r3, [r2, #20]

		  parse_state(msg_bms);
 8001372:	4b0f      	ldr	r3, [pc, #60]	@ (80013b0 <main+0x144>)
 8001374:	466c      	mov	r4, sp
 8001376:	f103 0210 	add.w	r2, r3, #16
 800137a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800137e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001382:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001384:	f000 ff3a 	bl	80021fc <_Z11parse_state6CANMsg>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001388:	e7bf      	b.n	800130a <main+0x9e>
 800138a:	bf00      	nop
 800138c:	24000168 	.word	0x24000168
 8001390:	0800bb80 	.word	0x0800bb80
 8001394:	0800bb94 	.word	0x0800bb94
 8001398:	24000208 	.word	0x24000208
 800139c:	0800bbac 	.word	0x0800bbac
 80013a0:	240000f8 	.word	0x240000f8
 80013a4:	0800bbc0 	.word	0x0800bbc0
 80013a8:	240003d4 	.word	0x240003d4
 80013ac:	240003ac 	.word	0x240003ac
 80013b0:	24000440 	.word	0x24000440

080013b4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b09c      	sub	sp, #112	@ 0x70
 80013b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013be:	224c      	movs	r2, #76	@ 0x4c
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f009 fe0e 	bl	800afe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	2220      	movs	r2, #32
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f009 fe08 	bl	800afe4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013d4:	2002      	movs	r0, #2
 80013d6:	f004 ffd9 	bl	800638c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80013da:	2300      	movs	r3, #0
 80013dc:	603b      	str	r3, [r7, #0]
 80013de:	4b32      	ldr	r3, [pc, #200]	@ (80014a8 <_Z18SystemClock_Configv+0xf4>)
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	4a31      	ldr	r2, [pc, #196]	@ (80014a8 <_Z18SystemClock_Configv+0xf4>)
 80013e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013e8:	6193      	str	r3, [r2, #24]
 80013ea:	4b2f      	ldr	r3, [pc, #188]	@ (80014a8 <_Z18SystemClock_Configv+0xf4>)
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013f6:	bf00      	nop
 80013f8:	4b2b      	ldr	r3, [pc, #172]	@ (80014a8 <_Z18SystemClock_Configv+0xf4>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001400:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001404:	bf14      	ite	ne
 8001406:	2301      	movne	r3, #1
 8001408:	2300      	moveq	r3, #0
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1f3      	bne.n	80013f8 <_Z18SystemClock_Configv+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001410:	2301      	movs	r3, #1
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001414:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001418:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800141a:	2302      	movs	r3, #2
 800141c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800141e:	2302      	movs	r3, #2
 8001420:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001422:	2302      	movs	r3, #2
 8001424:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001426:	232c      	movs	r3, #44	@ 0x2c
 8001428:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800142a:	2301      	movs	r3, #1
 800142c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800142e:	2304      	movs	r3, #4
 8001430:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001432:	2302      	movs	r3, #2
 8001434:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001436:	230c      	movs	r3, #12
 8001438:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800143a:	2300      	movs	r3, #0
 800143c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001442:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001446:	4618      	mov	r0, r3
 8001448:	f004 ffda 	bl	8006400 <HAL_RCC_OscConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	bf14      	ite	ne
 8001452:	2301      	movne	r3, #1
 8001454:	2300      	moveq	r3, #0
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 800145c:	f000 fcc0 	bl	8001de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001460:	233f      	movs	r3, #63	@ 0x3f
 8001462:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001464:	2303      	movs	r3, #3
 8001466:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800146c:	2308      	movs	r3, #8
 800146e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001470:	2340      	movs	r3, #64	@ 0x40
 8001472:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001474:	2340      	movs	r3, #64	@ 0x40
 8001476:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001478:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800147c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800147e:	2340      	movs	r3, #64	@ 0x40
 8001480:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2103      	movs	r1, #3
 8001486:	4618      	mov	r0, r3
 8001488:	f005 fb94 	bl	8006bb4 <HAL_RCC_ClockConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	bf14      	ite	ne
 8001492:	2301      	movne	r3, #1
 8001494:	2300      	moveq	r3, #0
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <_Z18SystemClock_Configv+0xec>
  {
    Error_Handler();
 800149c:	f000 fca0 	bl	8001de0 <Error_Handler>
  }
}
 80014a0:	bf00      	nop
 80014a2:	3770      	adds	r7, #112	@ 0x70
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	58024800 	.word	0x58024800

080014ac <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b0ae      	sub	sp, #184	@ 0xb8
 80014b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014b2:	463b      	mov	r3, r7
 80014b4:	22b8      	movs	r2, #184	@ 0xb8
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f009 fd93 	bl	800afe4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014be:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80014c2:	f04f 0300 	mov.w	r3, #0
 80014c6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80014ca:	2302      	movs	r3, #2
 80014cc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80014ce:	2310      	movs	r3, #16
 80014d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80014d2:	2302      	movs	r3, #2
 80014d4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80014d6:	2302      	movs	r3, #2
 80014d8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80014da:	2302      	movs	r3, #2
 80014dc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80014de:	23c0      	movs	r3, #192	@ 0xc0
 80014e0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80014ea:	2300      	movs	r3, #0
 80014ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014f0:	463b      	mov	r3, r7
 80014f2:	4618      	mov	r0, r3
 80014f4:	f005 feea 	bl	80072cc <HAL_RCCEx_PeriphCLKConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	bf14      	ite	ne
 80014fe:	2301      	movne	r3, #1
 8001500:	2300      	moveq	r3, #0
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <_Z24PeriphCommonClock_Configv+0x60>
  {
    Error_Handler();
 8001508:	f000 fc6a 	bl	8001de0 <Error_Handler>
  }
}
 800150c:	bf00      	nop
 800150e:	37b8      	adds	r7, #184	@ 0xb8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08c      	sub	sp, #48	@ 0x30
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800151a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001526:	463b      	mov	r3, r7
 8001528:	2224      	movs	r2, #36	@ 0x24
 800152a:	2100      	movs	r1, #0
 800152c:	4618      	mov	r0, r3
 800152e:	f009 fd59 	bl	800afe4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001532:	4b3a      	ldr	r3, [pc, #232]	@ (800161c <_ZL12MX_ADC1_Initv+0x108>)
 8001534:	4a3a      	ldr	r2, [pc, #232]	@ (8001620 <_ZL12MX_ADC1_Initv+0x10c>)
 8001536:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001538:	4b38      	ldr	r3, [pc, #224]	@ (800161c <_ZL12MX_ADC1_Initv+0x108>)
 800153a:	2200      	movs	r2, #0
 800153c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800153e:	4b37      	ldr	r3, [pc, #220]	@ (800161c <_ZL12MX_ADC1_Initv+0x108>)
 8001540:	2208      	movs	r2, #8
 8001542:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001544:	4b35      	ldr	r3, [pc, #212]	@ (800161c <_ZL12MX_ADC1_Initv+0x108>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800154a:	4b34      	ldr	r3, [pc, #208]	@ (800161c <_ZL12MX_ADC1_Initv+0x108>)
 800154c:	2204      	movs	r2, #4
 800154e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001550:	4b32      	ldr	r3, [pc, #200]	@ (800161c <_ZL12MX_ADC1_Initv+0x108>)
 8001552:	2200      	movs	r2, #0
 8001554:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001556:	4b31      	ldr	r3, [pc, #196]	@ (800161c <_ZL12MX_ADC1_Initv+0x108>)
 8001558:	2200      	movs	r2, #0
 800155a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800155c:	4b2f      	ldr	r3, [pc, #188]	@ (800161c <_ZL12MX_ADC1_Initv+0x108>)
 800155e:	2201      	movs	r2, #1
 8001560:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001562:	4b2e      	ldr	r3, [pc, #184]	@ (800161c <_ZL12MX_ADC1_Initv+0x108>)
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800156a:	4b2c      	ldr	r3, [pc, #176]	@ (800161c <_ZL12MX_ADC1_Initv+0x108>)
 800156c:	2200      	movs	r2, #0
 800156e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001570:	4b2a      	ldr	r3, [pc, #168]	@ (800161c <_ZL12MX_ADC1_Initv+0x108>)
 8001572:	2200      	movs	r2, #0
 8001574:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001576:	4b29      	ldr	r3, [pc, #164]	@ (800161c <_ZL12MX_ADC1_Initv+0x108>)
 8001578:	2200      	movs	r2, #0
 800157a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800157c:	4b27      	ldr	r3, [pc, #156]	@ (800161c <_ZL12MX_ADC1_Initv+0x108>)
 800157e:	2200      	movs	r2, #0
 8001580:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001582:	4b26      	ldr	r3, [pc, #152]	@ (800161c <_ZL12MX_ADC1_Initv+0x108>)
 8001584:	2200      	movs	r2, #0
 8001586:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001588:	4b24      	ldr	r3, [pc, #144]	@ (800161c <_ZL12MX_ADC1_Initv+0x108>)
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8001590:	4b22      	ldr	r3, [pc, #136]	@ (800161c <_ZL12MX_ADC1_Initv+0x108>)
 8001592:	2201      	movs	r2, #1
 8001594:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001596:	4821      	ldr	r0, [pc, #132]	@ (800161c <_ZL12MX_ADC1_Initv+0x108>)
 8001598:	f001 fdc8 	bl	800312c <HAL_ADC_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	bf14      	ite	ne
 80015a2:	2301      	movne	r3, #1
 80015a4:	2300      	moveq	r3, #0
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 80015ac:	f000 fc18 	bl	8001de0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015b0:	2300      	movs	r3, #0
 80015b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b8:	4619      	mov	r1, r3
 80015ba:	4818      	ldr	r0, [pc, #96]	@ (800161c <_ZL12MX_ADC1_Initv+0x108>)
 80015bc:	f003 f94c 	bl	8004858 <HAL_ADCEx_MultiModeConfigChannel>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	bf14      	ite	ne
 80015c6:	2301      	movne	r3, #1
 80015c8:	2300      	moveq	r3, #0
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 80015d0:	f000 fc06 	bl	8001de0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80015d4:	4b13      	ldr	r3, [pc, #76]	@ (8001624 <_ZL12MX_ADC1_Initv+0x110>)
 80015d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015d8:	2306      	movs	r3, #6
 80015da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015e0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80015e4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015e6:	2304      	movs	r3, #4
 80015e8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f4:	463b      	mov	r3, r7
 80015f6:	4619      	mov	r1, r3
 80015f8:	4808      	ldr	r0, [pc, #32]	@ (800161c <_ZL12MX_ADC1_Initv+0x108>)
 80015fa:	f002 f99f 	bl	800393c <HAL_ADC_ConfigChannel>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	bf14      	ite	ne
 8001604:	2301      	movne	r3, #1
 8001606:	2300      	moveq	r3, #0
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <_ZL12MX_ADC1_Initv+0xfe>
  {
    Error_Handler();
 800160e:	f000 fbe7 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	3730      	adds	r7, #48	@ 0x30
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	24000088 	.word	0x24000088
 8001620:	40022000 	.word	0x40022000
 8001624:	08600004 	.word	0x08600004

08001628 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	@ 0x28
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2224      	movs	r2, #36	@ 0x24
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f009 fcd5 	bl	800afe4 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800163a:	4b35      	ldr	r3, [pc, #212]	@ (8001710 <_ZL12MX_ADC3_Initv+0xe8>)
 800163c:	4a35      	ldr	r2, [pc, #212]	@ (8001714 <_ZL12MX_ADC3_Initv+0xec>)
 800163e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001640:	4b33      	ldr	r3, [pc, #204]	@ (8001710 <_ZL12MX_ADC3_Initv+0xe8>)
 8001642:	2200      	movs	r2, #0
 8001644:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 8001646:	4b32      	ldr	r3, [pc, #200]	@ (8001710 <_ZL12MX_ADC3_Initv+0xe8>)
 8001648:	220c      	movs	r2, #12
 800164a:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 800164c:	4b30      	ldr	r3, [pc, #192]	@ (8001710 <_ZL12MX_ADC3_Initv+0xe8>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001652:	4b2f      	ldr	r3, [pc, #188]	@ (8001710 <_ZL12MX_ADC3_Initv+0xe8>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001658:	4b2d      	ldr	r3, [pc, #180]	@ (8001710 <_ZL12MX_ADC3_Initv+0xe8>)
 800165a:	2204      	movs	r2, #4
 800165c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800165e:	4b2c      	ldr	r3, [pc, #176]	@ (8001710 <_ZL12MX_ADC3_Initv+0xe8>)
 8001660:	2200      	movs	r2, #0
 8001662:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001664:	4b2a      	ldr	r3, [pc, #168]	@ (8001710 <_ZL12MX_ADC3_Initv+0xe8>)
 8001666:	2200      	movs	r2, #0
 8001668:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800166a:	4b29      	ldr	r3, [pc, #164]	@ (8001710 <_ZL12MX_ADC3_Initv+0xe8>)
 800166c:	2201      	movs	r2, #1
 800166e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001670:	4b27      	ldr	r3, [pc, #156]	@ (8001710 <_ZL12MX_ADC3_Initv+0xe8>)
 8001672:	2200      	movs	r2, #0
 8001674:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001678:	4b25      	ldr	r3, [pc, #148]	@ (8001710 <_ZL12MX_ADC3_Initv+0xe8>)
 800167a:	2200      	movs	r2, #0
 800167c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800167e:	4b24      	ldr	r3, [pc, #144]	@ (8001710 <_ZL12MX_ADC3_Initv+0xe8>)
 8001680:	2200      	movs	r2, #0
 8001682:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001684:	4b22      	ldr	r3, [pc, #136]	@ (8001710 <_ZL12MX_ADC3_Initv+0xe8>)
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800168c:	4b20      	ldr	r3, [pc, #128]	@ (8001710 <_ZL12MX_ADC3_Initv+0xe8>)
 800168e:	2200      	movs	r2, #0
 8001690:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001692:	4b1f      	ldr	r3, [pc, #124]	@ (8001710 <_ZL12MX_ADC3_Initv+0xe8>)
 8001694:	2200      	movs	r2, #0
 8001696:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001698:	4b1d      	ldr	r3, [pc, #116]	@ (8001710 <_ZL12MX_ADC3_Initv+0xe8>)
 800169a:	2200      	movs	r2, #0
 800169c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800169e:	4b1c      	ldr	r3, [pc, #112]	@ (8001710 <_ZL12MX_ADC3_Initv+0xe8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80016a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001710 <_ZL12MX_ADC3_Initv+0xe8>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 80016ac:	4b18      	ldr	r3, [pc, #96]	@ (8001710 <_ZL12MX_ADC3_Initv+0xe8>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80016b2:	4817      	ldr	r0, [pc, #92]	@ (8001710 <_ZL12MX_ADC3_Initv+0xe8>)
 80016b4:	f001 fd3a 	bl	800312c <HAL_ADC_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	bf14      	ite	ne
 80016be:	2301      	movne	r3, #1
 80016c0:	2300      	moveq	r3, #0
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 80016c8:	f000 fb8a 	bl	8001de0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80016cc:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <_ZL12MX_ADC3_Initv+0xf0>)
 80016ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016d0:	2306      	movs	r3, #6
 80016d2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016d8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80016dc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016de:	2304      	movs	r3, #4
 80016e0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	4619      	mov	r1, r3
 80016ee:	4808      	ldr	r0, [pc, #32]	@ (8001710 <_ZL12MX_ADC3_Initv+0xe8>)
 80016f0:	f002 f924 	bl	800393c <HAL_ADC_ConfigChannel>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	bf14      	ite	ne
 80016fa:	2301      	movne	r3, #1
 80016fc:	2300      	moveq	r3, #0
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <_ZL12MX_ADC3_Initv+0xe0>
  {
    Error_Handler();
 8001704:	f000 fb6c 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001708:	bf00      	nop
 800170a:	3728      	adds	r7, #40	@ 0x28
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	240000f8 	.word	0x240000f8
 8001714:	58026000 	.word	0x58026000
 8001718:	1d500080 	.word	0x1d500080

0800171c <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001722:	4b41      	ldr	r3, [pc, #260]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001724:	4a41      	ldr	r2, [pc, #260]	@ (800182c <_ZL14MX_FDCAN1_Initv+0x110>)
 8001726:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8001728:	4b3f      	ldr	r3, [pc, #252]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800172a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800172e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001730:	4b3d      	ldr	r3, [pc, #244]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001736:	4b3c      	ldr	r3, [pc, #240]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001738:	2200      	movs	r2, #0
 800173a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800173c:	4b3a      	ldr	r3, [pc, #232]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800173e:	2200      	movs	r2, #0
 8001740:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001742:	4b39      	ldr	r3, [pc, #228]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001744:	2200      	movs	r2, #0
 8001746:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 8001748:	4b37      	ldr	r3, [pc, #220]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800174a:	2203      	movs	r2, #3
 800174c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800174e:	4b36      	ldr	r3, [pc, #216]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001750:	2201      	movs	r2, #1
 8001752:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 8001754:	4b34      	ldr	r3, [pc, #208]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001756:	220a      	movs	r2, #10
 8001758:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 800175a:	4b33      	ldr	r3, [pc, #204]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800175c:	2205      	movs	r2, #5
 800175e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001760:	4b31      	ldr	r3, [pc, #196]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001762:	2201      	movs	r2, #1
 8001764:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001766:	4b30      	ldr	r3, [pc, #192]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001768:	2201      	movs	r2, #1
 800176a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800176c:	4b2e      	ldr	r3, [pc, #184]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800176e:	2201      	movs	r2, #1
 8001770:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001772:	4b2d      	ldr	r3, [pc, #180]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001774:	2201      	movs	r2, #1
 8001776:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001778:	4b2b      	ldr	r3, [pc, #172]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800177a:	2200      	movs	r2, #0
 800177c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800177e:	4b2a      	ldr	r3, [pc, #168]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001780:	2200      	movs	r2, #0
 8001782:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 5;
 8001784:	4b28      	ldr	r3, [pc, #160]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001786:	2205      	movs	r2, #5
 8001788:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 800178a:	4b27      	ldr	r3, [pc, #156]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800178c:	2220      	movs	r2, #32
 800178e:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001790:	4b25      	ldr	r3, [pc, #148]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001792:	2204      	movs	r2, #4
 8001794:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8001796:	4b24      	ldr	r3, [pc, #144]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001798:	2220      	movs	r2, #32
 800179a:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800179c:	4b22      	ldr	r3, [pc, #136]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800179e:	2204      	movs	r2, #4
 80017a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 80017a2:	4b21      	ldr	r3, [pc, #132]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80017a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017aa:	2204      	movs	r2, #4
 80017ac:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 1;
 80017ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 80017b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017b6:	2220      	movs	r2, #32
 80017b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 80017ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017bc:	2220      	movs	r2, #32
 80017be:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80017c0:	4b19      	ldr	r3, [pc, #100]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80017c6:	4b18      	ldr	r3, [pc, #96]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017c8:	2204      	movs	r2, #4
 80017ca:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80017cc:	4816      	ldr	r0, [pc, #88]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017ce:	f003 fa35 	bl	8004c3c <HAL_FDCAN_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	bf14      	ite	ne
 80017d8:	2301      	movne	r3, #1
 80017da:	2300      	moveq	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <_ZL14MX_FDCAN1_Initv+0xca>
  {
    Error_Handler();
 80017e2:	f000 fafd 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80017e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017ea:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80017f0:	2302      	movs	r3, #2
 80017f2:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80017f4:	2301      	movs	r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001800:	463b      	mov	r3, r7
 8001802:	4619      	mov	r1, r3
 8001804:	4808      	ldr	r0, [pc, #32]	@ (8001828 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001806:	f003 fbf7 	bl	8004ff8 <HAL_FDCAN_ConfigFilter>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	bf14      	ite	ne
 8001810:	2301      	movne	r3, #1
 8001812:	2300      	moveq	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <_ZL14MX_FDCAN1_Initv+0x102>
  {
    Error_Handler();
 800181a:	f000 fae1 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 800181e:	bf00      	nop
 8001820:	3720      	adds	r7, #32
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	24000168 	.word	0x24000168
 800182c:	4000a000 	.word	0x4000a000

08001830 <_ZL14MX_FDCAN2_Initv>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001836:	4b41      	ldr	r3, [pc, #260]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001838:	4a41      	ldr	r2, [pc, #260]	@ (8001940 <_ZL14MX_FDCAN2_Initv+0x110>)
 800183a:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 800183c:	4b3f      	ldr	r3, [pc, #252]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 800183e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001842:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001844:	4b3d      	ldr	r3, [pc, #244]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001846:	2200      	movs	r2, #0
 8001848:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800184a:	4b3c      	ldr	r3, [pc, #240]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 800184c:	2200      	movs	r2, #0
 800184e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001850:	4b3a      	ldr	r3, [pc, #232]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001852:	2200      	movs	r2, #0
 8001854:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001856:	4b39      	ldr	r3, [pc, #228]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001858:	2200      	movs	r2, #0
 800185a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 3;
 800185c:	4b37      	ldr	r3, [pc, #220]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 800185e:	2203      	movs	r2, #3
 8001860:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001862:	4b36      	ldr	r3, [pc, #216]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001864:	2201      	movs	r2, #1
 8001866:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 10;
 8001868:	4b34      	ldr	r3, [pc, #208]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 800186a:	220a      	movs	r2, #10
 800186c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 800186e:	4b33      	ldr	r3, [pc, #204]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001870:	2205      	movs	r2, #5
 8001872:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001874:	4b31      	ldr	r3, [pc, #196]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001876:	2201      	movs	r2, #1
 8001878:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800187a:	4b30      	ldr	r3, [pc, #192]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 800187c:	2201      	movs	r2, #1
 800187e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001880:	4b2e      	ldr	r3, [pc, #184]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001882:	2201      	movs	r2, #1
 8001884:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001886:	4b2d      	ldr	r3, [pc, #180]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001888:	2201      	movs	r2, #1
 800188a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 800188c:	4b2b      	ldr	r3, [pc, #172]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 800188e:	2200      	movs	r2, #0
 8001890:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8001892:	4b2a      	ldr	r3, [pc, #168]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001894:	2200      	movs	r2, #0
 8001896:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 5;
 8001898:	4b28      	ldr	r3, [pc, #160]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 800189a:	2205      	movs	r2, #5
 800189c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 32;
 800189e:	4b27      	ldr	r3, [pc, #156]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018a0:	2220      	movs	r2, #32
 80018a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80018a4:	4b25      	ldr	r3, [pc, #148]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018a6:	2204      	movs	r2, #4
 80018a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 32;
 80018aa:	4b24      	ldr	r3, [pc, #144]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018ac:	2220      	movs	r2, #32
 80018ae:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80018b0:	4b22      	ldr	r3, [pc, #136]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018b2:	2204      	movs	r2, #4
 80018b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 1;
 80018b6:	4b21      	ldr	r3, [pc, #132]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80018bc:	4b1f      	ldr	r3, [pc, #124]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018be:	2204      	movs	r2, #4
 80018c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 1;
 80018c2:	4b1e      	ldr	r3, [pc, #120]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 32;
 80018c8:	4b1c      	ldr	r3, [pc, #112]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018ca:	2220      	movs	r2, #32
 80018cc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 32;
 80018ce:	4b1b      	ldr	r3, [pc, #108]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018d0:	2220      	movs	r2, #32
 80018d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80018d4:	4b19      	ldr	r3, [pc, #100]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80018da:	4b18      	ldr	r3, [pc, #96]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018dc:	2204      	movs	r2, #4
 80018de:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80018e0:	4816      	ldr	r0, [pc, #88]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018e2:	f003 f9ab 	bl	8004c3c <HAL_FDCAN_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	bf14      	ite	ne
 80018ec:	2301      	movne	r3, #1
 80018ee:	2300      	moveq	r3, #0
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <_ZL14MX_FDCAN2_Initv+0xca>
  {
    Error_Handler();
 80018f6:	f000 fa73 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80018fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018fe:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001904:	2302      	movs	r3, #2
 8001906:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001908:	2301      	movs	r3, #1
 800190a:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x10;
 800190c:	2310      	movs	r3, #16
 800190e:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x10;
 8001910:	2310      	movs	r3, #16
 8001912:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8001914:	463b      	mov	r3, r7
 8001916:	4619      	mov	r1, r3
 8001918:	4808      	ldr	r0, [pc, #32]	@ (800193c <_ZL14MX_FDCAN2_Initv+0x10c>)
 800191a:	f003 fb6d 	bl	8004ff8 <HAL_FDCAN_ConfigFilter>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	bf14      	ite	ne
 8001924:	2301      	movne	r3, #1
 8001926:	2300      	moveq	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <_ZL14MX_FDCAN2_Initv+0x102>
  {
    Error_Handler();
 800192e:	f000 fa57 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE END FDCAN2_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	3720      	adds	r7, #32
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	24000208 	.word	0x24000208
 8001940:	4000a400 	.word	0x4000a400

08001944 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001948:	4b2c      	ldr	r3, [pc, #176]	@ (80019fc <_ZL19MX_USART2_UART_Initv+0xb8>)
 800194a:	4a2d      	ldr	r2, [pc, #180]	@ (8001a00 <_ZL19MX_USART2_UART_Initv+0xbc>)
 800194c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800194e:	4b2b      	ldr	r3, [pc, #172]	@ (80019fc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001950:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001954:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001956:	4b29      	ldr	r3, [pc, #164]	@ (80019fc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800195c:	4b27      	ldr	r3, [pc, #156]	@ (80019fc <_ZL19MX_USART2_UART_Initv+0xb8>)
 800195e:	2200      	movs	r2, #0
 8001960:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001962:	4b26      	ldr	r3, [pc, #152]	@ (80019fc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001968:	4b24      	ldr	r3, [pc, #144]	@ (80019fc <_ZL19MX_USART2_UART_Initv+0xb8>)
 800196a:	220c      	movs	r2, #12
 800196c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800196e:	4b23      	ldr	r3, [pc, #140]	@ (80019fc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001974:	4b21      	ldr	r3, [pc, #132]	@ (80019fc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001976:	2200      	movs	r2, #0
 8001978:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800197a:	4b20      	ldr	r3, [pc, #128]	@ (80019fc <_ZL19MX_USART2_UART_Initv+0xb8>)
 800197c:	2200      	movs	r2, #0
 800197e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001980:	4b1e      	ldr	r3, [pc, #120]	@ (80019fc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001982:	2200      	movs	r2, #0
 8001984:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001986:	4b1d      	ldr	r3, [pc, #116]	@ (80019fc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001988:	2200      	movs	r2, #0
 800198a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800198c:	481b      	ldr	r0, [pc, #108]	@ (80019fc <_ZL19MX_USART2_UART_Initv+0xb8>)
 800198e:	f008 f883 	bl	8009a98 <HAL_UART_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	bf14      	ite	ne
 8001998:	2301      	movne	r3, #1
 800199a:	2300      	moveq	r3, #0
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 80019a2:	f000 fa1d 	bl	8001de0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019a6:	2100      	movs	r1, #0
 80019a8:	4814      	ldr	r0, [pc, #80]	@ (80019fc <_ZL19MX_USART2_UART_Initv+0xb8>)
 80019aa:	f009 fa2e 	bl	800ae0a <HAL_UARTEx_SetTxFifoThreshold>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	bf14      	ite	ne
 80019b4:	2301      	movne	r3, #1
 80019b6:	2300      	moveq	r3, #0
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 80019be:	f000 fa0f 	bl	8001de0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019c2:	2100      	movs	r1, #0
 80019c4:	480d      	ldr	r0, [pc, #52]	@ (80019fc <_ZL19MX_USART2_UART_Initv+0xb8>)
 80019c6:	f009 fa5e 	bl	800ae86 <HAL_UARTEx_SetRxFifoThreshold>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	bf14      	ite	ne
 80019d0:	2301      	movne	r3, #1
 80019d2:	2300      	moveq	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 80019da:	f000 fa01 	bl	8001de0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80019de:	4807      	ldr	r0, [pc, #28]	@ (80019fc <_ZL19MX_USART2_UART_Initv+0xb8>)
 80019e0:	f009 f9da 	bl	800ad98 <HAL_UARTEx_DisableFifoMode>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	bf14      	ite	ne
 80019ea:	2301      	movne	r3, #1
 80019ec:	2300      	moveq	r3, #0
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 80019f4:	f000 f9f4 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	240002a8 	.word	0x240002a8
 8001a00:	40004400 	.word	0x40004400

08001a04 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08c      	sub	sp, #48	@ 0x30
 8001a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0a:	f107 031c 	add.w	r3, r7, #28
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	60da      	str	r2, [r3, #12]
 8001a18:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a1a:	4b57      	ldr	r3, [pc, #348]	@ (8001b78 <_ZL12MX_GPIO_Initv+0x174>)
 8001a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a20:	4a55      	ldr	r2, [pc, #340]	@ (8001b78 <_ZL12MX_GPIO_Initv+0x174>)
 8001a22:	f043 0320 	orr.w	r3, r3, #32
 8001a26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a2a:	4b53      	ldr	r3, [pc, #332]	@ (8001b78 <_ZL12MX_GPIO_Initv+0x174>)
 8001a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a30:	f003 0320 	and.w	r3, r3, #32
 8001a34:	61bb      	str	r3, [r7, #24]
 8001a36:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a38:	4b4f      	ldr	r3, [pc, #316]	@ (8001b78 <_ZL12MX_GPIO_Initv+0x174>)
 8001a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a3e:	4a4e      	ldr	r2, [pc, #312]	@ (8001b78 <_ZL12MX_GPIO_Initv+0x174>)
 8001a40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a48:	4b4b      	ldr	r3, [pc, #300]	@ (8001b78 <_ZL12MX_GPIO_Initv+0x174>)
 8001a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	4b48      	ldr	r3, [pc, #288]	@ (8001b78 <_ZL12MX_GPIO_Initv+0x174>)
 8001a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a5c:	4a46      	ldr	r2, [pc, #280]	@ (8001b78 <_ZL12MX_GPIO_Initv+0x174>)
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a66:	4b44      	ldr	r3, [pc, #272]	@ (8001b78 <_ZL12MX_GPIO_Initv+0x174>)
 8001a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a74:	4b40      	ldr	r3, [pc, #256]	@ (8001b78 <_ZL12MX_GPIO_Initv+0x174>)
 8001a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a7a:	4a3f      	ldr	r2, [pc, #252]	@ (8001b78 <_ZL12MX_GPIO_Initv+0x174>)
 8001a7c:	f043 0310 	orr.w	r3, r3, #16
 8001a80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a84:	4b3c      	ldr	r3, [pc, #240]	@ (8001b78 <_ZL12MX_GPIO_Initv+0x174>)
 8001a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a8a:	f003 0310 	and.w	r3, r3, #16
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a92:	4b39      	ldr	r3, [pc, #228]	@ (8001b78 <_ZL12MX_GPIO_Initv+0x174>)
 8001a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a98:	4a37      	ldr	r2, [pc, #220]	@ (8001b78 <_ZL12MX_GPIO_Initv+0x174>)
 8001a9a:	f043 0302 	orr.w	r3, r3, #2
 8001a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aa2:	4b35      	ldr	r3, [pc, #212]	@ (8001b78 <_ZL12MX_GPIO_Initv+0x174>)
 8001aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ab0:	4b31      	ldr	r3, [pc, #196]	@ (8001b78 <_ZL12MX_GPIO_Initv+0x174>)
 8001ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ab6:	4a30      	ldr	r2, [pc, #192]	@ (8001b78 <_ZL12MX_GPIO_Initv+0x174>)
 8001ab8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001abc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8001b78 <_ZL12MX_GPIO_Initv+0x174>)
 8001ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ace:	4b2a      	ldr	r3, [pc, #168]	@ (8001b78 <_ZL12MX_GPIO_Initv+0x174>)
 8001ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ad4:	4a28      	ldr	r2, [pc, #160]	@ (8001b78 <_ZL12MX_GPIO_Initv+0x174>)
 8001ad6:	f043 0308 	orr.w	r3, r3, #8
 8001ada:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ade:	4b26      	ldr	r3, [pc, #152]	@ (8001b78 <_ZL12MX_GPIO_Initv+0x174>)
 8001ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	603b      	str	r3, [r7, #0]
 8001aea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, GPIO_PIN_RESET);
 8001aec:	2200      	movs	r2, #0
 8001aee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001af2:	4822      	ldr	r0, [pc, #136]	@ (8001b7c <_ZL12MX_GPIO_Initv+0x178>)
 8001af4:	f004 fc30 	bl	8006358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin, GPIO_PIN_RESET);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2138      	movs	r1, #56	@ 0x38
 8001afc:	4820      	ldr	r0, [pc, #128]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x17c>)
 8001afe:	f004 fc2b 	bl	8006358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AMS_OK_Pin */
  GPIO_InitStruct.Pin = AMS_OK_Pin;
 8001b02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2300      	movs	r3, #0
 8001b12:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AMS_OK_GPIO_Port, &GPIO_InitStruct);
 8001b14:	f107 031c 	add.w	r3, r7, #28
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4818      	ldr	r0, [pc, #96]	@ (8001b7c <_ZL12MX_GPIO_Initv+0x178>)
 8001b1c:	f004 fa5c 	bl	8005fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITAL1_Pin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin;
 8001b20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b26:	2300      	movs	r3, #0
 8001b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIGITAL1_GPIO_Port, &GPIO_InitStruct);
 8001b2e:	f107 031c 	add.w	r3, r7, #28
 8001b32:	4619      	mov	r1, r3
 8001b34:	4813      	ldr	r0, [pc, #76]	@ (8001b84 <_ZL12MX_GPIO_Initv+0x180>)
 8001b36:	f004 fa4f 	bl	8005fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Charge_Button_Pin */
  GPIO_InitStruct.Pin = Charge_Button_Pin;
 8001b3a:	2380      	movs	r3, #128	@ 0x80
 8001b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Charge_Button_GPIO_Port, &GPIO_InitStruct);
 8001b46:	f107 031c 	add.w	r3, r7, #28
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	480e      	ldr	r0, [pc, #56]	@ (8001b88 <_ZL12MX_GPIO_Initv+0x184>)
 8001b4e:	f004 fa43 	bl	8005fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_AIR_N_Pin RELAY_AIR_P_Pin RELAY_PRECHARGE_Pin */
  GPIO_InitStruct.Pin = RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin;
 8001b52:	2338      	movs	r3, #56	@ 0x38
 8001b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b56:	2301      	movs	r3, #1
 8001b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b62:	f107 031c 	add.w	r3, r7, #28
 8001b66:	4619      	mov	r1, r3
 8001b68:	4805      	ldr	r0, [pc, #20]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x17c>)
 8001b6a:	f004 fa35 	bl	8005fd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b6e:	bf00      	nop
 8001b70:	3730      	adds	r7, #48	@ 0x30
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	58024400 	.word	0x58024400
 8001b7c:	58021400 	.word	0x58021400
 8001b80:	58020c00 	.word	0x58020c00
 8001b84:	58021000 	.word	0x58021000
 8001b88:	58021800 	.word	0x58021800

08001b8c <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af02      	add	r7, sp, #8
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d04b      	beq.n	8001c38 <HAL_FDCAN_RxFifo0Callback+0xac>
	{
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_acu, RxData) == HAL_OK)
 8001ba0:	4b27      	ldr	r3, [pc, #156]	@ (8001c40 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001ba2:	4a28      	ldr	r2, [pc, #160]	@ (8001c44 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001ba4:	2140      	movs	r1, #64	@ 0x40
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f003 fb22 	bl	80051f0 <HAL_FDCAN_GetRxMessage>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	bf0c      	ite	eq
 8001bb2:	2301      	moveq	r3, #1
 8001bb4:	2300      	movne	r3, #0
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d02e      	beq.n	8001c1a <HAL_FDCAN_RxFifo0Callback+0x8e>
    {
		msg_acu.id = RxHeader_acu.Identifier;
 8001bbc:	4b21      	ldr	r3, [pc, #132]	@ (8001c44 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a21      	ldr	r2, [pc, #132]	@ (8001c48 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001bc2:	6013      	str	r3, [r2, #0]
		msg_acu.len = RxHeader_acu.DataLength;
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c44 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4b1f      	ldr	r3, [pc, #124]	@ (8001c48 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001bcc:	711a      	strb	r2, [r3, #4]
		for (int i = 0; i < 8; i++) {msg_acu.buf[i] = RxData[i];}
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	e00c      	b.n	8001bee <HAL_FDCAN_RxFifo0Callback+0x62>
 8001bd4:	4a1a      	ldr	r2, [pc, #104]	@ (8001c40 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4413      	add	r3, r2
 8001bda:	7819      	ldrb	r1, [r3, #0]
 8001bdc:	4a1a      	ldr	r2, [pc, #104]	@ (8001c48 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4413      	add	r3, r2
 8001be2:	3305      	adds	r3, #5
 8001be4:	460a      	mov	r2, r1
 8001be6:	701a      	strb	r2, [r3, #0]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	3301      	adds	r3, #1
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2b07      	cmp	r3, #7
 8001bf2:	ddef      	ble.n	8001bd4 <HAL_FDCAN_RxFifo0Callback+0x48>
		msg_acu.bus = 1;
 8001bf4:	4b14      	ldr	r3, [pc, #80]	@ (8001c48 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	611a      	str	r2, [r3, #16]
		msg_acu.time = HAL_GetTick();
 8001bfa:	f000 ff65 	bl	8002ac8 <HAL_GetTick>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	4a11      	ldr	r2, [pc, #68]	@ (8001c48 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001c02:	6153      	str	r3, [r2, #20]
		parse_state(msg_acu);
 8001c04:	4b10      	ldr	r3, [pc, #64]	@ (8001c48 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001c06:	466c      	mov	r4, sp
 8001c08:	f103 0210 	add.w	r2, r3, #16
 8001c0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c10:	e884 0003 	stmia.w	r4, {r0, r1}
 8001c14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c16:	f000 faf1 	bl	80021fc <_Z11parse_state6CANMsg>

    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f003 fc52 	bl	80054c8 <HAL_FDCAN_ActivateNotification>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	bf14      	ite	ne
 8001c2a:	2301      	movne	r3, #1
 8001c2c:	2300      	moveq	r3, #0
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_FDCAN_RxFifo0Callback+0xac>
    {
      /* Notification Error */
      Error_Handler();
 8001c34:	f000 f8d4 	bl	8001de0 <Error_Handler>
    }
  }
}
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd90      	pop	{r4, r7, pc}
 8001c40:	240003d4 	.word	0x240003d4
 8001c44:	24000384 	.word	0x24000384
 8001c48:	24000458 	.word	0x24000458

08001c4c <module_send_message_CAN1>:

//extended ID
HAL_StatusTypeDef module_send_message_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	4613      	mov	r3, r2
 8001c58:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 8001c5a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c88 <module_send_message_CAN1+0x3c>)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_EXTENDED_ID;
 8001c60:	4b09      	ldr	r3, [pc, #36]	@ (8001c88 <module_send_message_CAN1+0x3c>)
 8001c62:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c66:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	4a07      	ldr	r2, [pc, #28]	@ (8001c88 <module_send_message_CAN1+0x3c>)
 8001c6c:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	4905      	ldr	r1, [pc, #20]	@ (8001c88 <module_send_message_CAN1+0x3c>)
 8001c72:	4806      	ldr	r0, [pc, #24]	@ (8001c8c <module_send_message_CAN1+0x40>)
 8001c74:	f003 fa61 	bl	800513a <HAL_FDCAN_AddMessageToTxFifoQ>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	75fb      	strb	r3, [r7, #23]

	return status;
 8001c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	2400033c 	.word	0x2400033c
 8001c8c:	24000168 	.word	0x24000168

08001c90 <module_send_message_NoExtId_CAN1>:

//NO extended ID
HAL_StatusTypeDef module_send_message_NoExtId_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc8 <module_send_message_NoExtId_CAN1+0x38>)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_STANDARD_ID;
 8001ca4:	4b08      	ldr	r3, [pc, #32]	@ (8001cc8 <module_send_message_NoExtId_CAN1+0x38>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	4a06      	ldr	r2, [pc, #24]	@ (8001cc8 <module_send_message_NoExtId_CAN1+0x38>)
 8001cae:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 8001cb0:	68ba      	ldr	r2, [r7, #8]
 8001cb2:	4905      	ldr	r1, [pc, #20]	@ (8001cc8 <module_send_message_NoExtId_CAN1+0x38>)
 8001cb4:	4805      	ldr	r0, [pc, #20]	@ (8001ccc <module_send_message_NoExtId_CAN1+0x3c>)
 8001cb6:	f003 fa40 	bl	800513a <HAL_FDCAN_AddMessageToTxFifoQ>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	75fb      	strb	r3, [r7, #23]

	return status;
 8001cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	2400033c 	.word	0x2400033c
 8001ccc:	24000168 	.word	0x24000168

08001cd0 <module_send_message_CAN2>:

HAL_StatusTypeDef module_send_message_CAN2(uint32_t id, uint8_t* data, uint8_t length) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	71fb      	strb	r3, [r7, #7]
	TxHeader_bms.Identifier = id;
 8001cde:	4a0a      	ldr	r2, [pc, #40]	@ (8001d08 <module_send_message_CAN2+0x38>)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6013      	str	r3, [r2, #0]
	TxHeader_bms.IdType = FDCAN_STANDARD_ID;
 8001ce4:	4b08      	ldr	r3, [pc, #32]	@ (8001d08 <module_send_message_CAN2+0x38>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	605a      	str	r2, [r3, #4]
	TxHeader_bms.DataLength = length;
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	4a06      	ldr	r2, [pc, #24]	@ (8001d08 <module_send_message_CAN2+0x38>)
 8001cee:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_bms, data);
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	4905      	ldr	r1, [pc, #20]	@ (8001d08 <module_send_message_CAN2+0x38>)
 8001cf4:	4805      	ldr	r0, [pc, #20]	@ (8001d0c <module_send_message_CAN2+0x3c>)
 8001cf6:	f003 fa20 	bl	800513a <HAL_FDCAN_AddMessageToTxFifoQ>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	75fb      	strb	r3, [r7, #23]

	return status;
 8001cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	24000360 	.word	0x24000360
 8001d0c:	24000208 	.word	0x24000208

08001d10 <print>:

void print(char uart_buffer[]){
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	4909      	ldr	r1, [pc, #36]	@ (8001d40 <print+0x30>)
 8001d1c:	4809      	ldr	r0, [pc, #36]	@ (8001d44 <print+0x34>)
 8001d1e:	f009 f93f 	bl	800afa0 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001d22:	4808      	ldr	r0, [pc, #32]	@ (8001d44 <print+0x34>)
 8001d24:	f7fe faf4 	bl	8000310 <strlen>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d30:	4904      	ldr	r1, [pc, #16]	@ (8001d44 <print+0x34>)
 8001d32:	4805      	ldr	r0, [pc, #20]	@ (8001d48 <print+0x38>)
 8001d34:	f007 ff00 	bl	8009b38 <HAL_UART_Transmit>
}
 8001d38:	bf00      	nop
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	0800bbd0 	.word	0x0800bbd0
 8001d44:	240003dc 	.word	0x240003dc
 8001d48:	240002a8 	.word	0x240002a8

08001d4c <printnl>:

void printnl(char uart_buffer[]){
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s", uart_buffer);
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	4909      	ldr	r1, [pc, #36]	@ (8001d7c <printnl+0x30>)
 8001d58:	4809      	ldr	r0, [pc, #36]	@ (8001d80 <printnl+0x34>)
 8001d5a:	f009 f921 	bl	800afa0 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001d5e:	4808      	ldr	r0, [pc, #32]	@ (8001d80 <printnl+0x34>)
 8001d60:	f7fe fad6 	bl	8000310 <strlen>
 8001d64:	4603      	mov	r3, r0
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6c:	4904      	ldr	r1, [pc, #16]	@ (8001d80 <printnl+0x34>)
 8001d6e:	4805      	ldr	r0, [pc, #20]	@ (8001d84 <printnl+0x38>)
 8001d70:	f007 fee2 	bl	8009b38 <HAL_UART_Transmit>
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	0800bbd8 	.word	0x0800bbd8
 8001d80:	240003dc 	.word	0x240003dc
 8001d84:	240002a8 	.word	0x240002a8

08001d88 <getUARTState>:
void printValue(int value){
	sprintf(uart_msg, "%hu \n\r", value);
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
}

HAL_UART_StateTypeDef getUARTState(){
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
	return HAL_UART_GetState(&huart2);
 8001d8c:	4802      	ldr	r0, [pc, #8]	@ (8001d98 <getUARTState+0x10>)
 8001d8e:	f007 ff61 	bl	8009c54 <HAL_UART_GetState>
 8001d92:	4603      	mov	r3, r0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	240002a8 	.word	0x240002a8

08001d9c <readAnalogValue>:

float readAnalogValue(void){
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
	float analogValue;

	HAL_ADC_Start(&hadc3);
 8001da2:	480e      	ldr	r0, [pc, #56]	@ (8001ddc <readAnalogValue+0x40>)
 8001da4:	f001 fbca 	bl	800353c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8001da8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dac:	480b      	ldr	r0, [pc, #44]	@ (8001ddc <readAnalogValue+0x40>)
 8001dae:	f001 fcc3 	bl	8003738 <HAL_ADC_PollForConversion>
	analogValue = HAL_ADC_GetValue(&hadc3);
 8001db2:	480a      	ldr	r0, [pc, #40]	@ (8001ddc <readAnalogValue+0x40>)
 8001db4:	f001 fdb4 	bl	8003920 <HAL_ADC_GetValue>
 8001db8:	ee07 0a90 	vmov	s15, r0
 8001dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dc0:	edc7 7a01 	vstr	s15, [r7, #4]
	HAL_ADC_Stop(&hadc3);
 8001dc4:	4805      	ldr	r0, [pc, #20]	@ (8001ddc <readAnalogValue+0x40>)
 8001dc6:	f001 fc83 	bl	80036d0 <HAL_ADC_Stop>
	return analogValue;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	ee07 3a90 	vmov	s15, r3
}
 8001dd0:	eeb0 0a67 	vmov.f32	s0, s15
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	240000f8 	.word	0x240000f8

08001de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001de4:	b672      	cpsid	i
}
 8001de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <Error_Handler+0x8>
 8001dec:	0000      	movs	r0, r0
	...

08001df0 <_Z12select_statev>:

/*********************************************************************************************************
 ** Function name:           select_state
 ** Descriptions:            check what should they do on the state machine
 *********************************************************************************************************/
void select_state() {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08c      	sub	sp, #48	@ 0x30
 8001df4:	af00      	add	r7, sp, #0
	int state_air_n = 0;     // 0 means open, 1 closed     // Turn on SEVCON
 8001df6:	2300      	movs	r3, #0
 8001df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int state_air_p = 0;     // 0 means open, 1 closed     // Energize HV relay
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
	int state_precharge = 0; // 0 means open, 1 closed
 8001dfe:	2300      	movs	r3, #0
 8001e00:	627b      	str	r3, [r7, #36]	@ 0x24
	int flag_cpu = CPU_ERROR_COMMUNICATION;
 8001e02:	2301      	movs	r3, #1
 8001e04:	61bb      	str	r3, [r7, #24]
	int flag_current = Current_ERROR_Comunication;
 8001e06:	2302      	movs	r3, #2
 8001e08:	617b      	str	r3, [r7, #20]


	int gpio_charge = HAL_GPIO_ReadPin(Charge_Button_GPIO_Port, Charge_Button_Pin); // pull-up: 1 = charge started
 8001e0a:	2180      	movs	r1, #128	@ 0x80
 8001e0c:	48a4      	ldr	r0, [pc, #656]	@ (80020a0 <_Z12select_statev+0x2b0>)
 8001e0e:	f004 fa8b 	bl	8006328 <HAL_GPIO_ReadPin>
 8001e12:	4603      	mov	r3, r0
 8001e14:	613b      	str	r3, [r7, #16]
	 * 1 ms interruption => 1ms * 264MHz = 264000
	 * prescalado 264 (por ejemplo)
	 * timer count = 264000 / 264 = 1000
	 */

	uint32_t time = HAL_GetTick();
 8001e16:	f000 fe57 	bl	8002ac8 <HAL_GetTick>
 8001e1a:	60f8      	str	r0, [r7, #12]
	int time_s = HAL_GetTick();
 8001e1c:	f000 fe54 	bl	8002ac8 <HAL_GetTick>
 8001e20:	4603      	mov	r3, r0
 8001e22:	60bb      	str	r3, [r7, #8]


	CPU.voltage_acum = 0; // For precharge
 8001e24:	4b9f      	ldr	r3, [pc, #636]	@ (80020a4 <_Z12select_statev+0x2b4>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	62da      	str	r2, [r3, #44]	@ 0x2c


	MIN_V = 4200; /// I reset the number each cycle cause if the voltages goes up again I wanna has it risen again on telemetry
 8001e2a:	4b9f      	ldr	r3, [pc, #636]	@ (80020a8 <_Z12select_statev+0x2b8>)
 8001e2c:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001e30:	601a      	str	r2, [r3, #0]
	MAX_T = 0;
 8001e32:	4b9e      	ldr	r3, [pc, #632]	@ (80020ac <_Z12select_statev+0x2bc>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001e38:	2300      	movs	r3, #0
 8001e3a:	623b      	str	r3, [r7, #32]
 8001e3c:	e06f      	b.n	8001f1e <_Z12select_statev+0x12e>
		BMS[i].voltage_acum = 0;// For precharge
 8001e3e:	4a9c      	ldr	r2, [pc, #624]	@ (80020b0 <_Z12select_statev+0x2c0>)
 8001e40:	6a3b      	ldr	r3, [r7, #32]
 8001e42:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001e46:	fb01 f303 	mul.w	r3, r1, r3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	338c      	adds	r3, #140	@ 0x8c
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]


		if (BMS[i].query_voltage(time, buffer) != BMS_OK) //I ask the BMS about voltages and cheking their states
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8001e58:	fb02 f303 	mul.w	r3, r2, r3
 8001e5c:	4a94      	ldr	r2, [pc, #592]	@ (80020b0 <_Z12select_statev+0x2c0>)
 8001e5e:	4413      	add	r3, r2
 8001e60:	4a94      	ldr	r2, [pc, #592]	@ (80020b4 <_Z12select_statev+0x2c4>)
 8001e62:	68f9      	ldr	r1, [r7, #12]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe ff25 	bl	8000cb4 <_ZN7BMS_MOD13query_voltageEmPc>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf14      	ite	ne
 8001e70:	2301      	movne	r3, #1
 8001e72:	2300      	moveq	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d002      	beq.n	8001e80 <_Z12select_statev+0x90>
		{
			//state = error;
			flag_ams_ok = 0;
 8001e7a:	4b8f      	ldr	r3, [pc, #572]	@ (80020b8 <_Z12select_statev+0x2c8>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
		}

		CPU.voltage_acum += BMS[i].voltage_acum; // For precharge
 8001e80:	4b88      	ldr	r3, [pc, #544]	@ (80020a4 <_Z12select_statev+0x2b4>)
 8001e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e84:	498a      	ldr	r1, [pc, #552]	@ (80020b0 <_Z12select_statev+0x2c0>)
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 8001e8c:	fb00 f303 	mul.w	r3, r0, r3
 8001e90:	440b      	add	r3, r1
 8001e92:	338c      	adds	r3, #140	@ 0x8c
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	4a82      	ldr	r2, [pc, #520]	@ (80020a4 <_Z12select_statev+0x2b4>)
 8001e9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if (BMS[i].MIN_V < MIN_V)
 8001e9c:	4a84      	ldr	r2, [pc, #528]	@ (80020b0 <_Z12select_statev+0x2c0>)
 8001e9e:	6a3b      	ldr	r3, [r7, #32]
 8001ea0:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001ea4:	fb01 f303 	mul.w	r3, r1, r3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3390      	adds	r3, #144	@ 0x90
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	4b7e      	ldr	r3, [pc, #504]	@ (80020a8 <_Z12select_statev+0x2b8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	da0a      	bge.n	8001ecc <_Z12select_statev+0xdc>
			MIN_V = BMS[i].MIN_V; //Checking the minimun voltage of cell in the whole battery
 8001eb6:	4a7e      	ldr	r2, [pc, #504]	@ (80020b0 <_Z12select_statev+0x2c0>)
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001ebe:	fb01 f303 	mul.w	r3, r1, r3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3390      	adds	r3, #144	@ 0x90
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a77      	ldr	r2, [pc, #476]	@ (80020a8 <_Z12select_statev+0x2b8>)
 8001eca:	6013      	str	r3, [r2, #0]


		if (BMS[i].query_temperature(time, buffer) != Temperatures_OK){
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
 8001ece:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8001ed2:	fb02 f303 	mul.w	r3, r2, r3
 8001ed6:	4a76      	ldr	r2, [pc, #472]	@ (80020b0 <_Z12select_statev+0x2c0>)
 8001ed8:	4413      	add	r3, r2
 8001eda:	4a76      	ldr	r2, [pc, #472]	@ (80020b4 <_Z12select_statev+0x2c4>)
 8001edc:	68f9      	ldr	r1, [r7, #12]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe ff45 	bl	8000d6e <_ZN7BMS_MOD17query_temperatureEmPc>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
			//state = error;
		}

		if (BMS[i].MAX_T > MAX_T)
 8001ee8:	4a71      	ldr	r2, [pc, #452]	@ (80020b0 <_Z12select_statev+0x2c0>)
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001ef0:	fb01 f303 	mul.w	r3, r1, r3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	33a0      	adds	r3, #160	@ 0xa0
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	4b6c      	ldr	r3, [pc, #432]	@ (80020ac <_Z12select_statev+0x2bc>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	dd0a      	ble.n	8001f18 <_Z12select_statev+0x128>
			MAX_T = BMS[i].MAX_T;
 8001f02:	4a6b      	ldr	r2, [pc, #428]	@ (80020b0 <_Z12select_statev+0x2c0>)
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001f0a:	fb01 f303 	mul.w	r3, r1, r3
 8001f0e:	4413      	add	r3, r2
 8001f10:	33a0      	adds	r3, #160	@ 0xa0
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a65      	ldr	r2, [pc, #404]	@ (80020ac <_Z12select_statev+0x2bc>)
 8001f16:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	623b      	str	r3, [r7, #32]
 8001f1e:	4b67      	ldr	r3, [pc, #412]	@ (80020bc <_Z12select_statev+0x2cc>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6a3a      	ldr	r2, [r7, #32]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	db8a      	blt.n	8001e3e <_Z12select_statev+0x4e>
	}

	if (time_s > time_sending_minV + 500) {
 8001f28:	4b65      	ldr	r3, [pc, #404]	@ (80020c0 <_Z12select_statev+0x2d0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	dd23      	ble.n	8001f7e <_Z12select_statev+0x18e>
		message_MINV[1] = MIN_V & 0xFF;
 8001f36:	4b5c      	ldr	r3, [pc, #368]	@ (80020a8 <_Z12select_statev+0x2b8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	4b61      	ldr	r3, [pc, #388]	@ (80020c4 <_Z12select_statev+0x2d4>)
 8001f3e:	705a      	strb	r2, [r3, #1]
		message_MINV[0] = (MIN_V >> 8) & 0xFF;
 8001f40:	4b59      	ldr	r3, [pc, #356]	@ (80020a8 <_Z12select_statev+0x2b8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	121b      	asrs	r3, r3, #8
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	4b5e      	ldr	r3, [pc, #376]	@ (80020c4 <_Z12select_statev+0x2d4>)
 8001f4a:	701a      	strb	r2, [r3, #0]
		if (BMS[0].flag_charger != 1) {
 8001f4c:	4b58      	ldr	r3, [pc, #352]	@ (80020b0 <_Z12select_statev+0x2c0>)
 8001f4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d010      	beq.n	8001f78 <_Z12select_statev+0x188>
			if (module_send_message_CAN1(BMS_ID, message_MINV, 2) != HAL_OK)
 8001f56:	2202      	movs	r2, #2
 8001f58:	495a      	ldr	r1, [pc, #360]	@ (80020c4 <_Z12select_statev+0x2d4>)
 8001f5a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001f5e:	f7ff fe75 	bl	8001c4c <module_send_message_CAN1>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bf14      	ite	ne
 8001f68:	2301      	movne	r3, #1
 8001f6a:	2300      	moveq	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d002      	beq.n	8001f78 <_Z12select_statev+0x188>
				print((char*) "Error al enviar tension minima"); //Sending the message through telemtry each 500 ms
 8001f72:	4855      	ldr	r0, [pc, #340]	@ (80020c8 <_Z12select_statev+0x2d8>)
 8001f74:	f7ff fecc 	bl	8001d10 <print>
		}
		time_sending_minV = time_s;
 8001f78:	4a51      	ldr	r2, [pc, #324]	@ (80020c0 <_Z12select_statev+0x2d0>)
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	6013      	str	r3, [r2, #0]
	}
	for (int i = 0; i < BMS_N; i++) {
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
 8001f82:	e00d      	b.n	8001fa0 <_Z12select_statev+0x1b0>
		BMS[i].BALANCING_V = MIN_V; //Here I say I wanna balance all the cells in the battery to the minimun
 8001f84:	4b48      	ldr	r3, [pc, #288]	@ (80020a8 <_Z12select_statev+0x2b8>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4949      	ldr	r1, [pc, #292]	@ (80020b0 <_Z12select_statev+0x2c0>)
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 8001f90:	fb00 f303 	mul.w	r3, r0, r3
 8001f94:	440b      	add	r3, r1
 8001f96:	3394      	adds	r3, #148	@ 0x94
 8001f98:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	61fb      	str	r3, [r7, #28]
 8001fa0:	4b46      	ldr	r3, [pc, #280]	@ (80020bc <_Z12select_statev+0x2cc>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	69fa      	ldr	r2, [r7, #28]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	dbec      	blt.n	8001f84 <_Z12select_statev+0x194>

	}


	flag_cpu = CPU.query(time, buffer); //Asking the rest of the car how is it
 8001faa:	4a42      	ldr	r2, [pc, #264]	@ (80020b4 <_Z12select_statev+0x2c4>)
 8001fac:	68f9      	ldr	r1, [r7, #12]
 8001fae:	483d      	ldr	r0, [pc, #244]	@ (80020a4 <_Z12select_statev+0x2b4>)
 8001fb0:	f7fe ffc4 	bl	8000f3c <_ZN7CPU_MOD5queryEmPc>
 8001fb4:	61b8      	str	r0, [r7, #24]
	//flag_cpu = CPU_OK;

	flag_current = current.query(time, buffer); //asking current how is it
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4a3e      	ldr	r2, [pc, #248]	@ (80020b4 <_Z12select_statev+0x2c4>)
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4843      	ldr	r0, [pc, #268]	@ (80020cc <_Z12select_statev+0x2dc>)
 8001fbe:	f7ff f84f 	bl	8001060 <_ZN11Current_MOD5queryEiPc>
 8001fc2:	6178      	str	r0, [r7, #20]
	print((char*)"voltage acu");
	printValue(CPU.voltage_acum);
	print((char*)"dc bus");
	printValue(CPU.DC_BUS);
	printValue(state);*/
	switch (state) {
 8001fc4:	4b42      	ldr	r3, [pc, #264]	@ (80020d0 <_Z12select_statev+0x2e0>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b05      	cmp	r3, #5
 8001fca:	f200 80ce 	bhi.w	800216a <_Z12select_statev+0x37a>
 8001fce:	a201      	add	r2, pc, #4	@ (adr r2, 8001fd4 <_Z12select_statev+0x1e4>)
 8001fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd4:	08001fed 	.word	0x08001fed
 8001fd8:	0800201f 	.word	0x0800201f
 8001fdc:	0800203b 	.word	0x0800203b
 8001fe0:	080020d9 	.word	0x080020d9
 8001fe4:	08002111 	.word	0x08002111
 8001fe8:	0800214b 	.word	0x0800214b
	case start:
		state_air_n = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_DISCONNECTED);
 8001ff8:	2102      	movs	r1, #2
 8001ffa:	482a      	ldr	r0, [pc, #168]	@ (80020a4 <_Z12select_statev+0x2b4>)
 8001ffc:	f7fe ffd0 	bl	8000fa0 <_ZN7CPU_MOD11updateStateEi>
		if(gpio_charge == GPIO_PIN_SET){
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d103      	bne.n	800200e <_Z12select_statev+0x21e>
			state = charge;
 8002006:	4b32      	ldr	r3, [pc, #200]	@ (80020d0 <_Z12select_statev+0x2e0>)
 8002008:	2204      	movs	r2, #4
 800200a:	701a      	strb	r2, [r3, #0]
		}

		else if (flag_cpu != CPU_ERROR_COMMUNICATION)
			state = precharge; //If I do comunicate with the rest of the car, I go to precharge
		break;
 800200c:	e0a8      	b.n	8002160 <_Z12select_statev+0x370>
		else if (flag_cpu != CPU_ERROR_COMMUNICATION)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	2b01      	cmp	r3, #1
 8002012:	f000 80a5 	beq.w	8002160 <_Z12select_statev+0x370>
			state = precharge; //If I do comunicate with the rest of the car, I go to precharge
 8002016:	4b2e      	ldr	r3, [pc, #184]	@ (80020d0 <_Z12select_statev+0x2e0>)
 8002018:	2201      	movs	r2, #1
 800201a:	701a      	strb	r2, [r3, #0]
		break;
 800201c:	e0a0      	b.n	8002160 <_Z12select_statev+0x370>
	case precharge:
		state_air_n = 1;
 800201e:	2301      	movs	r3, #1
 8002020:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 1;
 8002026:	2301      	movs	r3, #1
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_PRECHARGE);
 800202a:	2101      	movs	r1, #1
 800202c:	481d      	ldr	r0, [pc, #116]	@ (80020a4 <_Z12select_statev+0x2b4>)
 800202e:	f7fe ffb7 	bl	8000fa0 <_ZN7CPU_MOD11updateStateEi>
		//if (flag_cpu == CPU_OK) {
			state = transition;
 8002032:	4b27      	ldr	r3, [pc, #156]	@ (80020d0 <_Z12select_statev+0x2e0>)
 8002034:	2202      	movs	r2, #2
 8002036:	701a      	strb	r2, [r3, #0]
		//} else if (flag_cpu == CPU_ERROR_COMMUNICATION)
			//state = error;
		 //else if(flag_current != Current_OK) state = error; //I take this out cause in precharge current can be very high, but probably can be uncommented,
		break;
 8002038:	e097      	b.n	800216a <_Z12select_statev+0x37a>
	case transition:
		state_air_n = 1;
 800203a:	2301      	movs	r3, #1
 800203c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 1;
 8002042:	2301      	movs	r3, #1
 8002044:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_PRECHARGE);
 8002046:	2101      	movs	r1, #1
 8002048:	4816      	ldr	r0, [pc, #88]	@ (80020a4 <_Z12select_statev+0x2b4>)
 800204a:	f7fe ffa9 	bl	8000fa0 <_ZN7CPU_MOD11updateStateEi>
		if ((((CPU.voltage_acum)/1000) * 0.9 < CPU.DC_BUS) && (CPU.voltage_acum != 0)){
 800204e:	4b15      	ldr	r3, [pc, #84]	@ (80020a4 <_Z12select_statev+0x2b4>)
 8002050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002052:	4a20      	ldr	r2, [pc, #128]	@ (80020d4 <_Z12select_statev+0x2e4>)
 8002054:	fb82 1203 	smull	r1, r2, r2, r3
 8002058:	1192      	asrs	r2, r2, #6
 800205a:	17db      	asrs	r3, r3, #31
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	ee07 3a90 	vmov	s15, r3
 8002062:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002066:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8002098 <_Z12select_statev+0x2a8>
 800206a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800206e:	4b0d      	ldr	r3, [pc, #52]	@ (80020a4 <_Z12select_statev+0x2b4>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002072:	ee07 3a90 	vmov	s15, r3
 8002076:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800207a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800207e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002082:	d400      	bmi.n	8002086 <_Z12select_statev+0x296>
			state = run; //If DC_BUS voltage is higher than 90% of battery voltage, precharge finish
		//}else if((flag_cpu == CPU_ERROR_COMMUNICATION)&&(flag_charger == 1)) state = error;
		 //else if(flag_current != Current_OK) state = error;
		}
		break;
 8002084:	e06e      	b.n	8002164 <_Z12select_statev+0x374>
		if ((((CPU.voltage_acum)/1000) * 0.9 < CPU.DC_BUS) && (CPU.voltage_acum != 0)){
 8002086:	4b07      	ldr	r3, [pc, #28]	@ (80020a4 <_Z12select_statev+0x2b4>)
 8002088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208a:	2b00      	cmp	r3, #0
 800208c:	d06a      	beq.n	8002164 <_Z12select_statev+0x374>
			state = run; //If DC_BUS voltage is higher than 90% of battery voltage, precharge finish
 800208e:	4b10      	ldr	r3, [pc, #64]	@ (80020d0 <_Z12select_statev+0x2e0>)
 8002090:	2203      	movs	r2, #3
 8002092:	701a      	strb	r2, [r3, #0]
		break;
 8002094:	e066      	b.n	8002164 <_Z12select_statev+0x374>
 8002096:	bf00      	nop
 8002098:	cccccccd 	.word	0xcccccccd
 800209c:	3feccccc 	.word	0x3feccccc
 80020a0:	58021800 	.word	0x58021800
 80020a4:	24000c24 	.word	0x24000c24
 80020a8:	24000004 	.word	0x24000004
 80020ac:	24000c18 	.word	0x24000c18
 80020b0:	24000470 	.word	0x24000470
 80020b4:	24000ca8 	.word	0x24000ca8
 80020b8:	24000008 	.word	0x24000008
 80020bc:	24000000 	.word	0x24000000
 80020c0:	24000c20 	.word	0x24000c20
 80020c4:	24000c1c 	.word	0x24000c1c
 80020c8:	0800bbe4 	.word	0x0800bbe4
 80020cc:	24000c60 	.word	0x24000c60
 80020d0:	24000ca4 	.word	0x24000ca4
 80020d4:	10624dd3 	.word	0x10624dd3
	case run:
		state_air_n = 1;
 80020d8:	2301      	movs	r3, #1
 80020da:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 1;
 80020dc:	2301      	movs	r3, #1
 80020de:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 1;
 80020e0:	2301      	movs	r3, #1
 80020e2:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_POWER);
 80020e4:	2100      	movs	r1, #0
 80020e6:	483a      	ldr	r0, [pc, #232]	@ (80021d0 <_Z12select_statev+0x3e0>)
 80020e8:	f7fe ff5a 	bl	8000fa0 <_ZN7CPU_MOD11updateStateEi>
		if ((flag_cpu == CPU_ERROR_COMMUNICATION) && (flag_charger == 1)){
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d106      	bne.n	8002100 <_Z12select_statev+0x310>
 80020f2:	4b38      	ldr	r3, [pc, #224]	@ (80021d4 <_Z12select_statev+0x3e4>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d102      	bne.n	8002100 <_Z12select_statev+0x310>
			//state = error; //If I disconnect the charger, error
			print((char*)"CPU");
 80020fa:	4837      	ldr	r0, [pc, #220]	@ (80021d8 <_Z12select_statev+0x3e8>)
 80020fc:	f7ff fe08 	bl	8001d10 <print>
		}
		if (flag_current != Current_OK){
			//state = error; //If current is too high, error
		}
		if(HAL_GPIO_ReadPin(DIGITAL1_GPIO_Port, DIGITAL1_Pin) == GPIO_PIN_RESET){ //SDC IO
 8002100:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002104:	4835      	ldr	r0, [pc, #212]	@ (80021dc <_Z12select_statev+0x3ec>)
 8002106:	f004 f90f 	bl	8006328 <HAL_GPIO_ReadPin>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
			//state = error;
			//print((char*)"DIGITAL");
		}
		break;
 800210e:	e02c      	b.n	800216a <_Z12select_statev+0x37a>

	case charge: {
		state_air_n = 1;
 8002110:	2301      	movs	r3, #1
 8002112:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 1;
 8002114:	2301      	movs	r3, #1
 8002116:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 1;
 8002118:	2301      	movs	r3, #1
 800211a:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_CHARGING);
 800211c:	2104      	movs	r1, #4
 800211e:	482c      	ldr	r0, [pc, #176]	@ (80021d0 <_Z12select_statev+0x3e0>)
 8002120:	f7fe ff3e 	bl	8000fa0 <_ZN7CPU_MOD11updateStateEi>

		int32_t current_act = current.Current / 1000; //Actual current in mA to check if it's charging
 8002124:	4b2e      	ldr	r3, [pc, #184]	@ (80021e0 <_Z12select_statev+0x3f0>)
 8002126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002128:	4a2e      	ldr	r2, [pc, #184]	@ (80021e4 <_Z12select_statev+0x3f4>)
 800212a:	fb82 1203 	smull	r1, r2, r2, r3
 800212e:	1192      	asrs	r2, r2, #6
 8002130:	17db      	asrs	r3, r3, #31
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	607b      	str	r3, [r7, #4]
				state = error; //Charge has been interrupted
		} else {
			charge_current_error_counter = 0;
		}*/

		if (gpio_charge == GPIO_PIN_RESET){
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d115      	bne.n	8002168 <_Z12select_statev+0x378>
			state = start;
 800213c:	4b2a      	ldr	r3, [pc, #168]	@ (80021e8 <_Z12select_statev+0x3f8>)
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]
			charge_current_error_counter = 0;
 8002142:	4b2a      	ldr	r3, [pc, #168]	@ (80021ec <_Z12select_statev+0x3fc>)
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
		}


		break;
 8002148:	e00e      	b.n	8002168 <_Z12select_statev+0x378>
	}

	case error:
		state_air_n = 0; //All relés closed
 800214a:	2300      	movs	r3, #0
 800214c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 0;
 8002152:	2300      	movs	r3, #0
 8002154:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_ERROR);
 8002156:	2103      	movs	r1, #3
 8002158:	481d      	ldr	r0, [pc, #116]	@ (80021d0 <_Z12select_statev+0x3e0>)
 800215a:	f7fe ff21 	bl	8000fa0 <_ZN7CPU_MOD11updateStateEi>
		break;
 800215e:	e004      	b.n	800216a <_Z12select_statev+0x37a>
		break;
 8002160:	bf00      	nop
 8002162:	e002      	b.n	800216a <_Z12select_statev+0x37a>
		break;
 8002164:	bf00      	nop
 8002166:	e000      	b.n	800216a <_Z12select_statev+0x37a>
		break;
 8002168:	bf00      	nop
	 sprintf(buffer, " - STATE:     %i\n", state);
	 print(buffer);
	 sprintf(buffer, "***********************\n");
	 print(buffer);*/
	HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin,
			flag_ams_ok ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800216a:	4b21      	ldr	r3, [pc, #132]	@ (80021f0 <_Z12select_statev+0x400>)
 800216c:	681b      	ldr	r3, [r3, #0]
	HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin,
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <_Z12select_statev+0x386>
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <_Z12select_statev+0x388>
 8002176:	2300      	movs	r3, #0
 8002178:	461a      	mov	r2, r3
 800217a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800217e:	481d      	ldr	r0, [pc, #116]	@ (80021f4 <_Z12select_statev+0x404>)
 8002180:	f004 f8ea 	bl	8006358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_AIR_N_GPIO_Port, RELAY_AIR_N_Pin,
 8002184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <_Z12select_statev+0x39e>
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <_Z12select_statev+0x3a0>
 800218e:	2300      	movs	r3, #0
 8002190:	461a      	mov	r2, r3
 8002192:	2108      	movs	r1, #8
 8002194:	4818      	ldr	r0, [pc, #96]	@ (80021f8 <_Z12select_statev+0x408>)
 8002196:	f004 f8df 	bl	8006358 <HAL_GPIO_WritePin>
			state_air_n ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_AIR_P_GPIO_Port, RELAY_AIR_P_Pin,
 800219a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <_Z12select_statev+0x3b4>
 80021a0:	2301      	movs	r3, #1
 80021a2:	e000      	b.n	80021a6 <_Z12select_statev+0x3b6>
 80021a4:	2300      	movs	r3, #0
 80021a6:	461a      	mov	r2, r3
 80021a8:	2110      	movs	r1, #16
 80021aa:	4813      	ldr	r0, [pc, #76]	@ (80021f8 <_Z12select_statev+0x408>)
 80021ac:	f004 f8d4 	bl	8006358 <HAL_GPIO_WritePin>
			state_air_p ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_PRECHARGE_GPIO_Port, RELAY_PRECHARGE_Pin,
 80021b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <_Z12select_statev+0x3ca>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <_Z12select_statev+0x3cc>
 80021ba:	2300      	movs	r3, #0
 80021bc:	461a      	mov	r2, r3
 80021be:	2120      	movs	r1, #32
 80021c0:	480d      	ldr	r0, [pc, #52]	@ (80021f8 <_Z12select_statev+0x408>)
 80021c2:	f004 f8c9 	bl	8006358 <HAL_GPIO_WritePin>





}
 80021c6:	bf00      	nop
 80021c8:	3730      	adds	r7, #48	@ 0x30
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	24000c24 	.word	0x24000c24
 80021d4:	24000c58 	.word	0x24000c58
 80021d8:	0800bc04 	.word	0x0800bc04
 80021dc:	58021000 	.word	0x58021000
 80021e0:	24000c60 	.word	0x24000c60
 80021e4:	10624dd3 	.word	0x10624dd3
 80021e8:	24000ca4 	.word	0x24000ca4
 80021ec:	24000c5c 	.word	0x24000c5c
 80021f0:	24000008 	.word	0x24000008
 80021f4:	58021400 	.word	0x58021400
 80021f8:	58020c00 	.word	0x58020c00

080021fc <_Z11parse_state6CANMsg>:

/*********************************************************************************************************
 ** Function name:           parse_state
 ** Descriptions:            Function for analysing the data from the CAN
 *********************************************************************************************************/
void parse_state(CANMsg data) {
 80021fc:	b084      	sub	sp, #16
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	f107 0c18 	add.w	ip, r7, #24
 8002208:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t time = HAL_GetTick();
 800220c:	f000 fc5c 	bl	8002ac8 <HAL_GetTick>
 8002210:	6038      	str	r0, [r7, #0]
	bool flag_bms = false;
 8002212:	2300      	movs	r3, #0
 8002214:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; i < BMS_N; i++) {
 8002216:	2300      	movs	r3, #0
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	e017      	b.n	800224c <_Z11parse_state6CANMsg+0x50>
		flag_bms = BMS[i].parse(data.id, &data.buf[0], time); //Checking if the message received is for  BMS
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8002222:	fb02 f303 	mul.w	r3, r2, r3
 8002226:	4a25      	ldr	r2, [pc, #148]	@ (80022bc <_Z11parse_state6CANMsg+0xc0>)
 8002228:	1898      	adds	r0, r3, r2
 800222a:	69b9      	ldr	r1, [r7, #24]
 800222c:	f107 021d 	add.w	r2, r7, #29
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f7fe fbfd 	bl	8000a30 <_ZN7BMS_MOD5parseEmPhm>
 8002236:	4603      	mov	r3, r0
 8002238:	73fb      	strb	r3, [r7, #15]
		if (flag_bms)
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d002      	beq.n	8002246 <_Z11parse_state6CANMsg+0x4a>
			i = BMS_N;
 8002240:	4b1f      	ldr	r3, [pc, #124]	@ (80022c0 <_Z11parse_state6CANMsg+0xc4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < BMS_N; i++) {
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	3301      	adds	r3, #1
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	4b1c      	ldr	r3, [pc, #112]	@ (80022c0 <_Z11parse_state6CANMsg+0xc4>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	429a      	cmp	r2, r3
 8002254:	dbe2      	blt.n	800221c <_Z11parse_state6CANMsg+0x20>
	}

	if (!flag_bms) {
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	f083 0301 	eor.w	r3, r3, #1
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d025      	beq.n	80022ae <_Z11parse_state6CANMsg+0xb2>
		if (CPU.parse(data.id, &data.buf[0], time))
 8002262:	69b9      	ldr	r1, [r7, #24]
 8002264:	f107 021d 	add.w	r2, r7, #29
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	4816      	ldr	r0, [pc, #88]	@ (80022c4 <_Z11parse_state6CANMsg+0xc8>)
 800226c:	f7fe fe22 	bl	8000eb4 <_ZN7CPU_MOD5parseEmPhm>
			;                       //Cheking if message is for CPU
		if (data.id == 419385575) //If message from this direction received, it is because the charger is connected and the accu is for charging
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	4a15      	ldr	r2, [pc, #84]	@ (80022c8 <_Z11parse_state6CANMsg+0xcc>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d11a      	bne.n	80022ae <_Z11parse_state6CANMsg+0xb2>
				{
			for (int i = 0; i < BMS_N; i++) {
 8002278:	2300      	movs	r3, #0
 800227a:	607b      	str	r3, [r7, #4]
 800227c:	e00c      	b.n	8002298 <_Z11parse_state6CANMsg+0x9c>
				BMS[i].flag_charger = 1;
 800227e:	4a0f      	ldr	r2, [pc, #60]	@ (80022bc <_Z11parse_state6CANMsg+0xc0>)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8002286:	fb01 f303 	mul.w	r3, r1, r3
 800228a:	4413      	add	r3, r2
 800228c:	3398      	adds	r3, #152	@ 0x98
 800228e:	2201      	movs	r2, #1
 8002290:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < BMS_N; i++) {
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3301      	adds	r3, #1
 8002296:	607b      	str	r3, [r7, #4]
 8002298:	4b09      	ldr	r3, [pc, #36]	@ (80022c0 <_Z11parse_state6CANMsg+0xc4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	429a      	cmp	r2, r3
 80022a0:	dbed      	blt.n	800227e <_Z11parse_state6CANMsg+0x82>
			}

			current.flag_charger = 1;
 80022a2:	4b0a      	ldr	r3, [pc, #40]	@ (80022cc <_Z11parse_state6CANMsg+0xd0>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	639a      	str	r2, [r3, #56]	@ 0x38
			flag_charger = 1;
 80022a8:	4b09      	ldr	r3, [pc, #36]	@ (80022d0 <_Z11parse_state6CANMsg+0xd4>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
		} else {
			// Serial.print("ID: ");
			// Serial.println(data.id);
		}
	}
}
 80022ae:	bf00      	nop
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022b8:	b004      	add	sp, #16
 80022ba:	4770      	bx	lr
 80022bc:	24000470 	.word	0x24000470
 80022c0:	24000000 	.word	0x24000000
 80022c4:	24000c24 	.word	0x24000c24
 80022c8:	18ff50e7 	.word	0x18ff50e7
 80022cc:	24000c60 	.word	0x24000c60
 80022d0:	24000c58 	.word	0x24000c58

080022d4 <_Z41__static_initialization_and_destruction_0v>:
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af06      	add	r7, sp, #24
		};
 80022da:	4c40      	ldr	r4, [pc, #256]	@ (80023dc <_Z41__static_initialization_and_destruction_0v+0x108>)
 80022dc:	2369      	movs	r3, #105	@ 0x69
 80022de:	9304      	str	r3, [sp, #16]
 80022e0:	2332      	movs	r3, #50	@ 0x32
 80022e2:	9303      	str	r3, [sp, #12]
 80022e4:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80022e8:	9302      	str	r3, [sp, #8]
 80022ea:	2313      	movs	r3, #19
 80022ec:	9301      	str	r3, [sp, #4]
 80022ee:	233c      	movs	r3, #60	@ 0x3c
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80022f6:	f241 0268 	movw	r2, #4200	@ 0x1068
 80022fa:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80022fe:	4620      	mov	r0, r4
 8002300:	f7fe f9f4 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 8002304:	f504 74c4 	add.w	r4, r4, #392	@ 0x188
 8002308:	23cd      	movs	r3, #205	@ 0xcd
 800230a:	9304      	str	r3, [sp, #16]
 800230c:	2364      	movs	r3, #100	@ 0x64
 800230e:	9303      	str	r3, [sp, #12]
 8002310:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002314:	9302      	str	r3, [sp, #8]
 8002316:	2313      	movs	r3, #19
 8002318:	9301      	str	r3, [sp, #4]
 800231a:	233c      	movs	r3, #60	@ 0x3c
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8002322:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002326:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 800232a:	4620      	mov	r0, r4
 800232c:	f7fe f9de 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 8002330:	f504 74c4 	add.w	r4, r4, #392	@ 0x188
 8002334:	f240 1331 	movw	r3, #305	@ 0x131
 8002338:	9304      	str	r3, [sp, #16]
 800233a:	2396      	movs	r3, #150	@ 0x96
 800233c:	9303      	str	r3, [sp, #12]
 800233e:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002342:	9302      	str	r3, [sp, #8]
 8002344:	2313      	movs	r3, #19
 8002346:	9301      	str	r3, [sp, #4]
 8002348:	233c      	movs	r3, #60	@ 0x3c
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8002350:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002354:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8002358:	4620      	mov	r0, r4
 800235a:	f7fe f9c7 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 800235e:	f504 74c4 	add.w	r4, r4, #392	@ 0x188
 8002362:	f240 1395 	movw	r3, #405	@ 0x195
 8002366:	9304      	str	r3, [sp, #16]
 8002368:	23c8      	movs	r3, #200	@ 0xc8
 800236a:	9303      	str	r3, [sp, #12]
 800236c:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002370:	9302      	str	r3, [sp, #8]
 8002372:	2313      	movs	r3, #19
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	233c      	movs	r3, #60	@ 0x3c
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 800237e:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002382:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 8002386:	4620      	mov	r0, r4
 8002388:	f7fe f9b0 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 800238c:	f504 70c4 	add.w	r0, r4, #392	@ 0x188
 8002390:	f240 13f9 	movw	r3, #505	@ 0x1f9
 8002394:	9304      	str	r3, [sp, #16]
 8002396:	23fa      	movs	r3, #250	@ 0xfa
 8002398:	9303      	str	r3, [sp, #12]
 800239a:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800239e:	9302      	str	r3, [sp, #8]
 80023a0:	2313      	movs	r3, #19
 80023a2:	9301      	str	r3, [sp, #4]
 80023a4:	233c      	movs	r3, #60	@ 0x3c
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80023ac:	f241 0268 	movw	r2, #4200	@ 0x1068
 80023b0:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 80023b4:	f7fe f99a 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
CPU_MOD CPU(CPU_ID_send, CPU_ID_recv, 500); //Same with CPU, rest of vehicle
 80023b8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80023bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023c0:	2120      	movs	r1, #32
 80023c2:	4807      	ldr	r0, [pc, #28]	@ (80023e0 <_Z41__static_initialization_and_destruction_0v+0x10c>)
 80023c4:	f7fe fd24 	bl	8000e10 <_ZN7CPU_MODC1Emmi>
Current_MOD current(Current_ID, Current_max); //Class for current measurement
 80023c8:	22c8      	movs	r2, #200	@ 0xc8
 80023ca:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80023ce:	4805      	ldr	r0, [pc, #20]	@ (80023e4 <_Z41__static_initialization_and_destruction_0v+0x110>)
 80023d0:	f7fe fdf8 	bl	8000fc4 <_ZN11Current_MODC1Emi>
}
 80023d4:	bf00      	nop
 80023d6:	3704      	adds	r7, #4
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd90      	pop	{r4, r7, pc}
 80023dc:	24000470 	.word	0x24000470
 80023e0:	24000c24 	.word	0x24000c24
 80023e4:	24000c60 	.word	0x24000c60

080023e8 <_GLOBAL__sub_I_BMS>:
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	f7ff ff72 	bl	80022d4 <_Z41__static_initialization_and_destruction_0v>
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002424 <HAL_MspInit+0x30>)
 80023fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002400:	4a08      	ldr	r2, [pc, #32]	@ (8002424 <HAL_MspInit+0x30>)
 8002402:	f043 0302 	orr.w	r3, r3, #2
 8002406:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800240a:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <HAL_MspInit+0x30>)
 800240c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	607b      	str	r3, [r7, #4]
 8002416:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	58024400 	.word	0x58024400

08002428 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08c      	sub	sp, #48	@ 0x30
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	f107 031c 	add.w	r3, r7, #28
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a31      	ldr	r2, [pc, #196]	@ (800250c <HAL_ADC_MspInit+0xe4>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d12b      	bne.n	80024a2 <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800244a:	4b31      	ldr	r3, [pc, #196]	@ (8002510 <HAL_ADC_MspInit+0xe8>)
 800244c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002450:	4a2f      	ldr	r2, [pc, #188]	@ (8002510 <HAL_ADC_MspInit+0xe8>)
 8002452:	f043 0320 	orr.w	r3, r3, #32
 8002456:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800245a:	4b2d      	ldr	r3, [pc, #180]	@ (8002510 <HAL_ADC_MspInit+0xe8>)
 800245c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002460:	f003 0320 	and.w	r3, r3, #32
 8002464:	61bb      	str	r3, [r7, #24]
 8002466:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002468:	4b29      	ldr	r3, [pc, #164]	@ (8002510 <HAL_ADC_MspInit+0xe8>)
 800246a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800246e:	4a28      	ldr	r2, [pc, #160]	@ (8002510 <HAL_ADC_MspInit+0xe8>)
 8002470:	f043 0320 	orr.w	r3, r3, #32
 8002474:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002478:	4b25      	ldr	r3, [pc, #148]	@ (8002510 <HAL_ADC_MspInit+0xe8>)
 800247a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800247e:	f003 0320 	and.w	r3, r3, #32
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002486:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800248a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800248c:	2303      	movs	r3, #3
 800248e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002494:	f107 031c 	add.w	r3, r7, #28
 8002498:	4619      	mov	r1, r3
 800249a:	481e      	ldr	r0, [pc, #120]	@ (8002514 <HAL_ADC_MspInit+0xec>)
 800249c:	f003 fd9c 	bl	8005fd8 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 80024a0:	e02f      	b.n	8002502 <HAL_ADC_MspInit+0xda>
  else if(hadc->Instance==ADC3)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002518 <HAL_ADC_MspInit+0xf0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d12a      	bne.n	8002502 <HAL_ADC_MspInit+0xda>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80024ac:	4b18      	ldr	r3, [pc, #96]	@ (8002510 <HAL_ADC_MspInit+0xe8>)
 80024ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024b2:	4a17      	ldr	r2, [pc, #92]	@ (8002510 <HAL_ADC_MspInit+0xe8>)
 80024b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024bc:	4b14      	ldr	r3, [pc, #80]	@ (8002510 <HAL_ADC_MspInit+0xe8>)
 80024be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024c6:	613b      	str	r3, [r7, #16]
 80024c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80024ca:	4b11      	ldr	r3, [pc, #68]	@ (8002510 <HAL_ADC_MspInit+0xe8>)
 80024cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024d0:	4a0f      	ldr	r2, [pc, #60]	@ (8002510 <HAL_ADC_MspInit+0xe8>)
 80024d2:	f043 0320 	orr.w	r3, r3, #32
 80024d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024da:	4b0d      	ldr	r3, [pc, #52]	@ (8002510 <HAL_ADC_MspInit+0xe8>)
 80024dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024e0:	f003 0320 	and.w	r3, r3, #32
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80024e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024ee:	2303      	movs	r3, #3
 80024f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024f6:	f107 031c 	add.w	r3, r7, #28
 80024fa:	4619      	mov	r1, r3
 80024fc:	4805      	ldr	r0, [pc, #20]	@ (8002514 <HAL_ADC_MspInit+0xec>)
 80024fe:	f003 fd6b 	bl	8005fd8 <HAL_GPIO_Init>
}
 8002502:	bf00      	nop
 8002504:	3730      	adds	r7, #48	@ 0x30
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40022000 	.word	0x40022000
 8002510:	58024400 	.word	0x58024400
 8002514:	58021400 	.word	0x58021400
 8002518:	58026000 	.word	0x58026000

0800251c <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b0ba      	sub	sp, #232	@ 0xe8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002524:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002534:	f107 0318 	add.w	r3, r7, #24
 8002538:	22b8      	movs	r2, #184	@ 0xb8
 800253a:	2100      	movs	r1, #0
 800253c:	4618      	mov	r0, r3
 800253e:	f008 fd51 	bl	800afe4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a5a      	ldr	r2, [pc, #360]	@ (80026b0 <HAL_FDCAN_MspInit+0x194>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d157      	bne.n	80025fc <HAL_FDCAN_MspInit+0xe0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800254c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002558:	2300      	movs	r3, #0
 800255a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800255e:	f107 0318 	add.w	r3, r7, #24
 8002562:	4618      	mov	r0, r3
 8002564:	f004 feb2 	bl	80072cc <HAL_RCCEx_PeriphCLKConfig>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 800256e:	f7ff fc37 	bl	8001de0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002572:	4b50      	ldr	r3, [pc, #320]	@ (80026b4 <HAL_FDCAN_MspInit+0x198>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	3301      	adds	r3, #1
 8002578:	4a4e      	ldr	r2, [pc, #312]	@ (80026b4 <HAL_FDCAN_MspInit+0x198>)
 800257a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800257c:	4b4d      	ldr	r3, [pc, #308]	@ (80026b4 <HAL_FDCAN_MspInit+0x198>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d10e      	bne.n	80025a2 <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002584:	4b4c      	ldr	r3, [pc, #304]	@ (80026b8 <HAL_FDCAN_MspInit+0x19c>)
 8002586:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800258a:	4a4b      	ldr	r2, [pc, #300]	@ (80026b8 <HAL_FDCAN_MspInit+0x19c>)
 800258c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002590:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002594:	4b48      	ldr	r3, [pc, #288]	@ (80026b8 <HAL_FDCAN_MspInit+0x19c>)
 8002596:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800259a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025a2:	4b45      	ldr	r3, [pc, #276]	@ (80026b8 <HAL_FDCAN_MspInit+0x19c>)
 80025a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025a8:	4a43      	ldr	r2, [pc, #268]	@ (80026b8 <HAL_FDCAN_MspInit+0x19c>)
 80025aa:	f043 0308 	orr.w	r3, r3, #8
 80025ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025b2:	4b41      	ldr	r3, [pc, #260]	@ (80026b8 <HAL_FDCAN_MspInit+0x19c>)
 80025b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025c0:	2303      	movs	r3, #3
 80025c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d2:	2300      	movs	r3, #0
 80025d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80025d8:	2309      	movs	r3, #9
 80025da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025de:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80025e2:	4619      	mov	r1, r3
 80025e4:	4835      	ldr	r0, [pc, #212]	@ (80026bc <HAL_FDCAN_MspInit+0x1a0>)
 80025e6:	f003 fcf7 	bl	8005fd8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2100      	movs	r1, #0
 80025ee:	2013      	movs	r0, #19
 80025f0:	f002 faef 	bl	8004bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80025f4:	2013      	movs	r0, #19
 80025f6:	f002 fb06 	bl	8004c06 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN FDCAN2_MspInit 1 */

    /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80025fa:	e054      	b.n	80026a6 <HAL_FDCAN_MspInit+0x18a>
  else if(hfdcan->Instance==FDCAN2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a2f      	ldr	r2, [pc, #188]	@ (80026c0 <HAL_FDCAN_MspInit+0x1a4>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d14f      	bne.n	80026a6 <HAL_FDCAN_MspInit+0x18a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002606:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800260a:	f04f 0300 	mov.w	r3, #0
 800260e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002612:	2300      	movs	r3, #0
 8002614:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002618:	f107 0318 	add.w	r3, r7, #24
 800261c:	4618      	mov	r0, r3
 800261e:	f004 fe55 	bl	80072cc <HAL_RCCEx_PeriphCLKConfig>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 8002628:	f7ff fbda 	bl	8001de0 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800262c:	4b21      	ldr	r3, [pc, #132]	@ (80026b4 <HAL_FDCAN_MspInit+0x198>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	3301      	adds	r3, #1
 8002632:	4a20      	ldr	r2, [pc, #128]	@ (80026b4 <HAL_FDCAN_MspInit+0x198>)
 8002634:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002636:	4b1f      	ldr	r3, [pc, #124]	@ (80026b4 <HAL_FDCAN_MspInit+0x198>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d10e      	bne.n	800265c <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800263e:	4b1e      	ldr	r3, [pc, #120]	@ (80026b8 <HAL_FDCAN_MspInit+0x19c>)
 8002640:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002644:	4a1c      	ldr	r2, [pc, #112]	@ (80026b8 <HAL_FDCAN_MspInit+0x19c>)
 8002646:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800264a:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800264e:	4b1a      	ldr	r3, [pc, #104]	@ (80026b8 <HAL_FDCAN_MspInit+0x19c>)
 8002650:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800265c:	4b16      	ldr	r3, [pc, #88]	@ (80026b8 <HAL_FDCAN_MspInit+0x19c>)
 800265e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002662:	4a15      	ldr	r2, [pc, #84]	@ (80026b8 <HAL_FDCAN_MspInit+0x19c>)
 8002664:	f043 0302 	orr.w	r3, r3, #2
 8002668:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800266c:	4b12      	ldr	r3, [pc, #72]	@ (80026b8 <HAL_FDCAN_MspInit+0x19c>)
 800266e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800267a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800267e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002682:	2302      	movs	r3, #2
 8002684:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268e:	2300      	movs	r3, #0
 8002690:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002694:	2309      	movs	r3, #9
 8002696:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800269e:	4619      	mov	r1, r3
 80026a0:	4808      	ldr	r0, [pc, #32]	@ (80026c4 <HAL_FDCAN_MspInit+0x1a8>)
 80026a2:	f003 fc99 	bl	8005fd8 <HAL_GPIO_Init>
}
 80026a6:	bf00      	nop
 80026a8:	37e8      	adds	r7, #232	@ 0xe8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	4000a000 	.word	0x4000a000
 80026b4:	24000cf8 	.word	0x24000cf8
 80026b8:	58024400 	.word	0x58024400
 80026bc:	58020c00 	.word	0x58020c00
 80026c0:	4000a400 	.word	0x4000a400
 80026c4:	58020400 	.word	0x58020400

080026c8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b0b8      	sub	sp, #224	@ 0xe0
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026e0:	f107 0310 	add.w	r3, r7, #16
 80026e4:	22b8      	movs	r2, #184	@ 0xb8
 80026e6:	2100      	movs	r1, #0
 80026e8:	4618      	mov	r0, r3
 80026ea:	f008 fc7b 	bl	800afe4 <memset>
  if(huart->Instance==USART2)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a26      	ldr	r2, [pc, #152]	@ (800278c <HAL_UART_MspInit+0xc4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d145      	bne.n	8002784 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80026f8:	f04f 0202 	mov.w	r2, #2
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002704:	2300      	movs	r3, #0
 8002706:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800270a:	f107 0310 	add.w	r3, r7, #16
 800270e:	4618      	mov	r0, r3
 8002710:	f004 fddc 	bl	80072cc <HAL_RCCEx_PeriphCLKConfig>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800271a:	f7ff fb61 	bl	8001de0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800271e:	4b1c      	ldr	r3, [pc, #112]	@ (8002790 <HAL_UART_MspInit+0xc8>)
 8002720:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002724:	4a1a      	ldr	r2, [pc, #104]	@ (8002790 <HAL_UART_MspInit+0xc8>)
 8002726:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800272a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800272e:	4b18      	ldr	r3, [pc, #96]	@ (8002790 <HAL_UART_MspInit+0xc8>)
 8002730:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002734:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273c:	4b14      	ldr	r3, [pc, #80]	@ (8002790 <HAL_UART_MspInit+0xc8>)
 800273e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002742:	4a13      	ldr	r2, [pc, #76]	@ (8002790 <HAL_UART_MspInit+0xc8>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800274c:	4b10      	ldr	r3, [pc, #64]	@ (8002790 <HAL_UART_MspInit+0xc8>)
 800274e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800275a:	230c      	movs	r3, #12
 800275c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002760:	2302      	movs	r3, #2
 8002762:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002766:	2300      	movs	r3, #0
 8002768:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276c:	2300      	movs	r3, #0
 800276e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002772:	2307      	movs	r3, #7
 8002774:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002778:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800277c:	4619      	mov	r1, r3
 800277e:	4805      	ldr	r0, [pc, #20]	@ (8002794 <HAL_UART_MspInit+0xcc>)
 8002780:	f003 fc2a 	bl	8005fd8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002784:	bf00      	nop
 8002786:	37e0      	adds	r7, #224	@ 0xe0
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40004400 	.word	0x40004400
 8002790:	58024400 	.word	0x58024400
 8002794:	58020000 	.word	0x58020000

08002798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800279c:	bf00      	nop
 800279e:	e7fd      	b.n	800279c <NMI_Handler+0x4>

080027a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027a4:	bf00      	nop
 80027a6:	e7fd      	b.n	80027a4 <HardFault_Handler+0x4>

080027a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027ac:	bf00      	nop
 80027ae:	e7fd      	b.n	80027ac <MemManage_Handler+0x4>

080027b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027b4:	bf00      	nop
 80027b6:	e7fd      	b.n	80027b4 <BusFault_Handler+0x4>

080027b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027bc:	bf00      	nop
 80027be:	e7fd      	b.n	80027bc <UsageFault_Handler+0x4>

080027c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027e0:	bf00      	nop
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027ee:	f000 f957 	bl	8002aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80027fc:	4802      	ldr	r0, [pc, #8]	@ (8002808 <FDCAN1_IT0_IRQHandler+0x10>)
 80027fe:	f002 fedd 	bl	80055bc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	24000168 	.word	0x24000168

0800280c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002814:	4a14      	ldr	r2, [pc, #80]	@ (8002868 <_sbrk+0x5c>)
 8002816:	4b15      	ldr	r3, [pc, #84]	@ (800286c <_sbrk+0x60>)
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002820:	4b13      	ldr	r3, [pc, #76]	@ (8002870 <_sbrk+0x64>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d102      	bne.n	800282e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002828:	4b11      	ldr	r3, [pc, #68]	@ (8002870 <_sbrk+0x64>)
 800282a:	4a12      	ldr	r2, [pc, #72]	@ (8002874 <_sbrk+0x68>)
 800282c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800282e:	4b10      	ldr	r3, [pc, #64]	@ (8002870 <_sbrk+0x64>)
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4413      	add	r3, r2
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	429a      	cmp	r2, r3
 800283a:	d207      	bcs.n	800284c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800283c:	f008 fbda 	bl	800aff4 <__errno>
 8002840:	4603      	mov	r3, r0
 8002842:	220c      	movs	r2, #12
 8002844:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002846:	f04f 33ff 	mov.w	r3, #4294967295
 800284a:	e009      	b.n	8002860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800284c:	4b08      	ldr	r3, [pc, #32]	@ (8002870 <_sbrk+0x64>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002852:	4b07      	ldr	r3, [pc, #28]	@ (8002870 <_sbrk+0x64>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4413      	add	r3, r2
 800285a:	4a05      	ldr	r2, [pc, #20]	@ (8002870 <_sbrk+0x64>)
 800285c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800285e:	68fb      	ldr	r3, [r7, #12]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	24050000 	.word	0x24050000
 800286c:	00000400 	.word	0x00000400
 8002870:	24000cfc 	.word	0x24000cfc
 8002874:	24000e50 	.word	0x24000e50

08002878 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800287c:	4b32      	ldr	r3, [pc, #200]	@ (8002948 <SystemInit+0xd0>)
 800287e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002882:	4a31      	ldr	r2, [pc, #196]	@ (8002948 <SystemInit+0xd0>)
 8002884:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002888:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800288c:	4b2f      	ldr	r3, [pc, #188]	@ (800294c <SystemInit+0xd4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 030f 	and.w	r3, r3, #15
 8002894:	2b06      	cmp	r3, #6
 8002896:	d807      	bhi.n	80028a8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002898:	4b2c      	ldr	r3, [pc, #176]	@ (800294c <SystemInit+0xd4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f023 030f 	bic.w	r3, r3, #15
 80028a0:	4a2a      	ldr	r2, [pc, #168]	@ (800294c <SystemInit+0xd4>)
 80028a2:	f043 0307 	orr.w	r3, r3, #7
 80028a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80028a8:	4b29      	ldr	r3, [pc, #164]	@ (8002950 <SystemInit+0xd8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a28      	ldr	r2, [pc, #160]	@ (8002950 <SystemInit+0xd8>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80028b4:	4b26      	ldr	r3, [pc, #152]	@ (8002950 <SystemInit+0xd8>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80028ba:	4b25      	ldr	r3, [pc, #148]	@ (8002950 <SystemInit+0xd8>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	4924      	ldr	r1, [pc, #144]	@ (8002950 <SystemInit+0xd8>)
 80028c0:	4b24      	ldr	r3, [pc, #144]	@ (8002954 <SystemInit+0xdc>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80028c6:	4b21      	ldr	r3, [pc, #132]	@ (800294c <SystemInit+0xd4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d007      	beq.n	80028e2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80028d2:	4b1e      	ldr	r3, [pc, #120]	@ (800294c <SystemInit+0xd4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f023 030f 	bic.w	r3, r3, #15
 80028da:	4a1c      	ldr	r2, [pc, #112]	@ (800294c <SystemInit+0xd4>)
 80028dc:	f043 0307 	orr.w	r3, r3, #7
 80028e0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80028e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002950 <SystemInit+0xd8>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80028e8:	4b19      	ldr	r3, [pc, #100]	@ (8002950 <SystemInit+0xd8>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80028ee:	4b18      	ldr	r3, [pc, #96]	@ (8002950 <SystemInit+0xd8>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80028f4:	4b16      	ldr	r3, [pc, #88]	@ (8002950 <SystemInit+0xd8>)
 80028f6:	4a18      	ldr	r2, [pc, #96]	@ (8002958 <SystemInit+0xe0>)
 80028f8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80028fa:	4b15      	ldr	r3, [pc, #84]	@ (8002950 <SystemInit+0xd8>)
 80028fc:	4a17      	ldr	r2, [pc, #92]	@ (800295c <SystemInit+0xe4>)
 80028fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002900:	4b13      	ldr	r3, [pc, #76]	@ (8002950 <SystemInit+0xd8>)
 8002902:	4a17      	ldr	r2, [pc, #92]	@ (8002960 <SystemInit+0xe8>)
 8002904:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002906:	4b12      	ldr	r3, [pc, #72]	@ (8002950 <SystemInit+0xd8>)
 8002908:	2200      	movs	r2, #0
 800290a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800290c:	4b10      	ldr	r3, [pc, #64]	@ (8002950 <SystemInit+0xd8>)
 800290e:	4a14      	ldr	r2, [pc, #80]	@ (8002960 <SystemInit+0xe8>)
 8002910:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002912:	4b0f      	ldr	r3, [pc, #60]	@ (8002950 <SystemInit+0xd8>)
 8002914:	2200      	movs	r2, #0
 8002916:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002918:	4b0d      	ldr	r3, [pc, #52]	@ (8002950 <SystemInit+0xd8>)
 800291a:	4a11      	ldr	r2, [pc, #68]	@ (8002960 <SystemInit+0xe8>)
 800291c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800291e:	4b0c      	ldr	r3, [pc, #48]	@ (8002950 <SystemInit+0xd8>)
 8002920:	2200      	movs	r2, #0
 8002922:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002924:	4b0a      	ldr	r3, [pc, #40]	@ (8002950 <SystemInit+0xd8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a09      	ldr	r2, [pc, #36]	@ (8002950 <SystemInit+0xd8>)
 800292a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800292e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002930:	4b07      	ldr	r3, [pc, #28]	@ (8002950 <SystemInit+0xd8>)
 8002932:	2200      	movs	r2, #0
 8002934:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002936:	4b0b      	ldr	r3, [pc, #44]	@ (8002964 <SystemInit+0xec>)
 8002938:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800293c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800293e:	bf00      	nop
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	e000ed00 	.word	0xe000ed00
 800294c:	52002000 	.word	0x52002000
 8002950:	58024400 	.word	0x58024400
 8002954:	eaf6ed7f 	.word	0xeaf6ed7f
 8002958:	02020200 	.word	0x02020200
 800295c:	01ff0000 	.word	0x01ff0000
 8002960:	01010280 	.word	0x01010280
 8002964:	52004000 	.word	0x52004000

08002968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002968:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800296c:	f7ff ff84 	bl	8002878 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002970:	480c      	ldr	r0, [pc, #48]	@ (80029a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002972:	490d      	ldr	r1, [pc, #52]	@ (80029a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002974:	4a0d      	ldr	r2, [pc, #52]	@ (80029ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002978:	e002      	b.n	8002980 <LoopCopyDataInit>

0800297a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800297a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800297c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800297e:	3304      	adds	r3, #4

08002980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002984:	d3f9      	bcc.n	800297a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002986:	4a0a      	ldr	r2, [pc, #40]	@ (80029b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002988:	4c0a      	ldr	r4, [pc, #40]	@ (80029b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800298a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800298c:	e001      	b.n	8002992 <LoopFillZerobss>

0800298e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800298e:	6013      	str	r3, [r2, #0]
   adds r2, r2, #4
 8002990:	3204      	adds	r2, #4

08002992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002994:	d3fb      	bcc.n	800298e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002996:	f008 fb33 	bl	800b000 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800299a:	f7fe fc67 	bl	800126c <main>
  bx  lr
 800299e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029a0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80029a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80029a8:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 80029ac:	0800bce4 	.word	0x0800bce4
  ldr r2, =_sbss
 80029b0:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 80029b4:	24000e4c 	.word	0x24000e4c

080029b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029b8:	e7fe      	b.n	80029b8 <ADC3_IRQHandler>
	...

080029bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029c2:	2003      	movs	r0, #3
 80029c4:	f002 f8fa 	bl	8004bbc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029c8:	f004 faaa 	bl	8006f20 <HAL_RCC_GetSysClockFreq>
 80029cc:	4602      	mov	r2, r0
 80029ce:	4b15      	ldr	r3, [pc, #84]	@ (8002a24 <HAL_Init+0x68>)
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	0a1b      	lsrs	r3, r3, #8
 80029d4:	f003 030f 	and.w	r3, r3, #15
 80029d8:	4913      	ldr	r1, [pc, #76]	@ (8002a28 <HAL_Init+0x6c>)
 80029da:	5ccb      	ldrb	r3, [r1, r3]
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
 80029e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002a24 <HAL_Init+0x68>)
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002a28 <HAL_Init+0x6c>)
 80029f0:	5cd3      	ldrb	r3, [r2, r3]
 80029f2:	f003 031f 	and.w	r3, r3, #31
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	fa22 f303 	lsr.w	r3, r2, r3
 80029fc:	4a0b      	ldr	r2, [pc, #44]	@ (8002a2c <HAL_Init+0x70>)
 80029fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a00:	4a0b      	ldr	r2, [pc, #44]	@ (8002a30 <HAL_Init+0x74>)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a06:	200f      	movs	r0, #15
 8002a08:	f000 f814 	bl	8002a34 <HAL_InitTick>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e002      	b.n	8002a1c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a16:	f7ff fced 	bl	80023f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	58024400 	.word	0x58024400
 8002a28:	0800bc54 	.word	0x0800bc54
 8002a2c:	24000010 	.word	0x24000010
 8002a30:	2400000c 	.word	0x2400000c

08002a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002a3c:	4b15      	ldr	r3, [pc, #84]	@ (8002a94 <HAL_InitTick+0x60>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e021      	b.n	8002a8c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a48:	4b13      	ldr	r3, [pc, #76]	@ (8002a98 <HAL_InitTick+0x64>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4b11      	ldr	r3, [pc, #68]	@ (8002a94 <HAL_InitTick+0x60>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	4619      	mov	r1, r3
 8002a52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f002 f8df 	bl	8004c22 <HAL_SYSTICK_Config>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e00e      	b.n	8002a8c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b0f      	cmp	r3, #15
 8002a72:	d80a      	bhi.n	8002a8a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a74:	2200      	movs	r2, #0
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	f04f 30ff 	mov.w	r0, #4294967295
 8002a7c:	f002 f8a9 	bl	8004bd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a80:	4a06      	ldr	r2, [pc, #24]	@ (8002a9c <HAL_InitTick+0x68>)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
 8002a88:	e000      	b.n	8002a8c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	24000018 	.word	0x24000018
 8002a98:	2400000c 	.word	0x2400000c
 8002a9c:	24000014 	.word	0x24000014

08002aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002aa4:	4b06      	ldr	r3, [pc, #24]	@ (8002ac0 <HAL_IncTick+0x20>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4b06      	ldr	r3, [pc, #24]	@ (8002ac4 <HAL_IncTick+0x24>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4413      	add	r3, r2
 8002ab0:	4a04      	ldr	r2, [pc, #16]	@ (8002ac4 <HAL_IncTick+0x24>)
 8002ab2:	6013      	str	r3, [r2, #0]
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	24000018 	.word	0x24000018
 8002ac4:	24000d00 	.word	0x24000d00

08002ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return uwTick;
 8002acc:	4b03      	ldr	r3, [pc, #12]	@ (8002adc <HAL_GetTick+0x14>)
 8002ace:	681b      	ldr	r3, [r3, #0]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	24000d00 	.word	0x24000d00

08002ae0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	431a      	orrs	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	609a      	str	r2, [r3, #8]
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	609a      	str	r2, [r3, #8]
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a18      	ldr	r2, [pc, #96]	@ (8002bb8 <LL_ADC_SetChannelPreselection+0x70>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d027      	beq.n	8002baa <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d107      	bne.n	8002b74 <LL_ADC_SetChannelPreselection+0x2c>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	0e9b      	lsrs	r3, r3, #26
 8002b68:	f003 031f 	and.w	r3, r3, #31
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	e015      	b.n	8002ba0 <LL_ADC_SetChannelPreselection+0x58>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	fa93 f3a3 	rbit	r3, r3
 8002b7e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8002b8a:	2320      	movs	r3, #32
 8002b8c:	e003      	b.n	8002b96 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	fab3 f383 	clz	r3, r3
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	f003 031f 	and.w	r3, r3, #31
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	69d2      	ldr	r2, [r2, #28]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8002baa:	bf00      	nop
 8002bac:	371c      	adds	r7, #28
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	58026000 	.word	0x58026000

08002bbc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	3360      	adds	r3, #96	@ 0x60
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4a10      	ldr	r2, [pc, #64]	@ (8002c1c <LL_ADC_SetOffset+0x60>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d10b      	bne.n	8002bf8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002bf6:	e00b      	b.n	8002c10 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	601a      	str	r2, [r3, #0]
}
 8002c10:	bf00      	nop
 8002c12:	371c      	adds	r7, #28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	58026000 	.word	0x58026000

08002c20 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3360      	adds	r3, #96	@ 0x60
 8002c2e:	461a      	mov	r2, r3
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f003 031f 	and.w	r3, r3, #31
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	611a      	str	r2, [r3, #16]
}
 8002c72:	bf00      	nop
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4a0c      	ldr	r2, [pc, #48]	@ (8002cc0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00e      	beq.n	8002cb2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	3360      	adds	r3, #96	@ 0x60
 8002c98:	461a      	mov	r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	431a      	orrs	r2, r3
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	601a      	str	r2, [r3, #0]
  }
}
 8002cb2:	bf00      	nop
 8002cb4:	371c      	adds	r7, #28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	58026000 	.word	0x58026000

08002cc4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4a0c      	ldr	r2, [pc, #48]	@ (8002d04 <LL_ADC_SetOffsetSaturation+0x40>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d10e      	bne.n	8002cf6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	3360      	adds	r3, #96	@ 0x60
 8002cdc:	461a      	mov	r2, r3
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002cf6:	bf00      	nop
 8002cf8:	371c      	adds	r7, #28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	58026000 	.word	0x58026000

08002d08 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4a0c      	ldr	r2, [pc, #48]	@ (8002d48 <LL_ADC_SetOffsetSign+0x40>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d10e      	bne.n	8002d3a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	3360      	adds	r3, #96	@ 0x60
 8002d20:	461a      	mov	r2, r3
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	431a      	orrs	r2, r3
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	371c      	adds	r7, #28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	58026000 	.word	0x58026000

08002d4c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	3360      	adds	r3, #96	@ 0x60
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4a0c      	ldr	r2, [pc, #48]	@ (8002d9c <LL_ADC_SetOffsetState+0x50>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d108      	bne.n	8002d80 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002d7e:	e007      	b.n	8002d90 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	601a      	str	r2, [r3, #0]
}
 8002d90:	bf00      	nop
 8002d92:	371c      	adds	r7, #28
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	58026000 	.word	0x58026000

08002da0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002db4:	2301      	movs	r3, #1
 8002db6:	e000      	b.n	8002dba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b087      	sub	sp, #28
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3330      	adds	r3, #48	@ 0x30
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	0a1b      	lsrs	r3, r3, #8
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	f003 030c 	and.w	r3, r3, #12
 8002de2:	4413      	add	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f003 031f 	and.w	r3, r3, #31
 8002df0:	211f      	movs	r1, #31
 8002df2:	fa01 f303 	lsl.w	r3, r1, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	401a      	ands	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	0e9b      	lsrs	r3, r3, #26
 8002dfe:	f003 011f 	and.w	r1, r3, #31
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	f003 031f 	and.w	r3, r3, #31
 8002e08:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e12:	bf00      	nop
 8002e14:	371c      	adds	r7, #28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b087      	sub	sp, #28
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	3314      	adds	r3, #20
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	0e5b      	lsrs	r3, r3, #25
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	4413      	add	r3, r2
 8002e3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	0d1b      	lsrs	r3, r3, #20
 8002e46:	f003 031f 	and.w	r3, r3, #31
 8002e4a:	2107      	movs	r1, #7
 8002e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	401a      	ands	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	0d1b      	lsrs	r3, r3, #20
 8002e58:	f003 031f 	and.w	r3, r3, #31
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e62:	431a      	orrs	r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e68:	bf00      	nop
 8002e6a:	371c      	adds	r7, #28
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4a1a      	ldr	r2, [pc, #104]	@ (8002eec <LL_ADC_SetChannelSingleDiff+0x78>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d115      	bne.n	8002eb4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e94:	43db      	mvns	r3, r3
 8002e96:	401a      	ands	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f003 0318 	and.w	r3, r3, #24
 8002e9e:	4914      	ldr	r1, [pc, #80]	@ (8002ef0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002ea0:	40d9      	lsrs	r1, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	400b      	ands	r3, r1
 8002ea6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002eb2:	e014      	b.n	8002ede <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	401a      	ands	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f003 0318 	and.w	r3, r3, #24
 8002eca:	4909      	ldr	r1, [pc, #36]	@ (8002ef0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002ecc:	40d9      	lsrs	r1, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	400b      	ands	r3, r1
 8002ed2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002ede:	bf00      	nop
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	58026000 	.word	0x58026000
 8002ef0:	000fffff 	.word	0x000fffff

08002ef4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 031f 	and.w	r3, r3, #31
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	4b04      	ldr	r3, [pc, #16]	@ (8002f4c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6093      	str	r3, [r2, #8]
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	5fffffc0 	.word	0x5fffffc0

08002f50 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f64:	d101      	bne.n	8002f6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	4b05      	ldr	r3, [pc, #20]	@ (8002f9c <LL_ADC_EnableInternalRegulator+0x24>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	6fffffc0 	.word	0x6fffffc0

08002fa0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002fb4:	d101      	bne.n	8002fba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	4b05      	ldr	r3, [pc, #20]	@ (8002fec <LL_ADC_Enable+0x24>)
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	f043 0201 	orr.w	r2, r3, #1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	7fffffc0 	.word	0x7fffffc0

08002ff0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	4b05      	ldr	r3, [pc, #20]	@ (8003014 <LL_ADC_Disable+0x24>)
 8002ffe:	4013      	ands	r3, r2
 8003000:	f043 0202 	orr.w	r2, r3, #2
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	7fffffc0 	.word	0x7fffffc0

08003018 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <LL_ADC_IsEnabled+0x18>
 800302c:	2301      	movs	r3, #1
 800302e:	e000      	b.n	8003032 <LL_ADC_IsEnabled+0x1a>
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b02      	cmp	r3, #2
 8003050:	d101      	bne.n	8003056 <LL_ADC_IsDisableOngoing+0x18>
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <LL_ADC_IsDisableOngoing+0x1a>
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	4b05      	ldr	r3, [pc, #20]	@ (8003088 <LL_ADC_REG_StartConversion+0x24>)
 8003072:	4013      	ands	r3, r2
 8003074:	f043 0204 	orr.w	r2, r3, #4
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	7fffffc0 	.word	0x7fffffc0

0800308c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	4b05      	ldr	r3, [pc, #20]	@ (80030b0 <LL_ADC_REG_StopConversion+0x24>)
 800309a:	4013      	ands	r3, r2
 800309c:	f043 0210 	orr.w	r2, r3, #16
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	7fffffc0 	.word	0x7fffffc0

080030b4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d101      	bne.n	80030cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
	...

080030dc <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	4b05      	ldr	r3, [pc, #20]	@ (8003100 <LL_ADC_INJ_StopConversion+0x24>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	f043 0220 	orr.w	r2, r3, #32
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	7fffffc0 	.word	0x7fffffc0

08003104 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b08      	cmp	r3, #8
 8003116:	d101      	bne.n	800311c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003118:	2301      	movs	r3, #1
 800311a:	e000      	b.n	800311e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
	...

0800312c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800312c:	b590      	push	{r4, r7, lr}
 800312e:	b089      	sub	sp, #36	@ 0x24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003138:	2300      	movs	r3, #0
 800313a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e1ee      	b.n	8003524 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003150:	2b00      	cmp	r3, #0
 8003152:	d109      	bne.n	8003168 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff f967 	bl	8002428 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff feef 	bl	8002f50 <LL_ADC_IsDeepPowerDownEnabled>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d004      	beq.n	8003182 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff fed5 	bl	8002f2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff ff0a 	bl	8002fa0 <LL_ADC_IsInternalRegulatorEnabled>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d114      	bne.n	80031bc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff feee 	bl	8002f78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800319c:	4b8e      	ldr	r3, [pc, #568]	@ (80033d8 <HAL_ADC_Init+0x2ac>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	099b      	lsrs	r3, r3, #6
 80031a2:	4a8e      	ldr	r2, [pc, #568]	@ (80033dc <HAL_ADC_Init+0x2b0>)
 80031a4:	fba2 2303 	umull	r2, r3, r2, r3
 80031a8:	099b      	lsrs	r3, r3, #6
 80031aa:	3301      	adds	r3, #1
 80031ac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031ae:	e002      	b.n	80031b6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1f9      	bne.n	80031b0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff feed 	bl	8002fa0 <LL_ADC_IsInternalRegulatorEnabled>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10d      	bne.n	80031e8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d0:	f043 0210 	orr.w	r2, r3, #16
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031dc:	f043 0201 	orr.w	r2, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff ff61 	bl	80030b4 <LL_ADC_REG_IsConversionOngoing>
 80031f2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031f8:	f003 0310 	and.w	r3, r3, #16
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f040 8188 	bne.w	8003512 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2b00      	cmp	r3, #0
 8003206:	f040 8184 	bne.w	8003512 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800320e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003212:	f043 0202 	orr.w	r2, r3, #2
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff fefa 	bl	8003018 <LL_ADC_IsEnabled>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d136      	bne.n	8003298 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a6c      	ldr	r2, [pc, #432]	@ (80033e0 <HAL_ADC_Init+0x2b4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d004      	beq.n	800323e <HAL_ADC_Init+0x112>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a6a      	ldr	r2, [pc, #424]	@ (80033e4 <HAL_ADC_Init+0x2b8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d10e      	bne.n	800325c <HAL_ADC_Init+0x130>
 800323e:	4868      	ldr	r0, [pc, #416]	@ (80033e0 <HAL_ADC_Init+0x2b4>)
 8003240:	f7ff feea 	bl	8003018 <LL_ADC_IsEnabled>
 8003244:	4604      	mov	r4, r0
 8003246:	4867      	ldr	r0, [pc, #412]	@ (80033e4 <HAL_ADC_Init+0x2b8>)
 8003248:	f7ff fee6 	bl	8003018 <LL_ADC_IsEnabled>
 800324c:	4603      	mov	r3, r0
 800324e:	4323      	orrs	r3, r4
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf0c      	ite	eq
 8003254:	2301      	moveq	r3, #1
 8003256:	2300      	movne	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	e008      	b.n	800326e <HAL_ADC_Init+0x142>
 800325c:	4862      	ldr	r0, [pc, #392]	@ (80033e8 <HAL_ADC_Init+0x2bc>)
 800325e:	f7ff fedb 	bl	8003018 <LL_ADC_IsEnabled>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	bf0c      	ite	eq
 8003268:	2301      	moveq	r3, #1
 800326a:	2300      	movne	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d012      	beq.n	8003298 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a5a      	ldr	r2, [pc, #360]	@ (80033e0 <HAL_ADC_Init+0x2b4>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d004      	beq.n	8003286 <HAL_ADC_Init+0x15a>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a58      	ldr	r2, [pc, #352]	@ (80033e4 <HAL_ADC_Init+0x2b8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d101      	bne.n	800328a <HAL_ADC_Init+0x15e>
 8003286:	4a59      	ldr	r2, [pc, #356]	@ (80033ec <HAL_ADC_Init+0x2c0>)
 8003288:	e000      	b.n	800328c <HAL_ADC_Init+0x160>
 800328a:	4a59      	ldr	r2, [pc, #356]	@ (80033f0 <HAL_ADC_Init+0x2c4>)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	4619      	mov	r1, r3
 8003292:	4610      	mov	r0, r2
 8003294:	f7ff fc24 	bl	8002ae0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a52      	ldr	r2, [pc, #328]	@ (80033e8 <HAL_ADC_Init+0x2bc>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d129      	bne.n	80032f6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	7e5b      	ldrb	r3, [r3, #25]
 80032a6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80032ac:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80032b2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d013      	beq.n	80032e4 <HAL_ADC_Init+0x1b8>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2b0c      	cmp	r3, #12
 80032c2:	d00d      	beq.n	80032e0 <HAL_ADC_Init+0x1b4>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2b1c      	cmp	r3, #28
 80032ca:	d007      	beq.n	80032dc <HAL_ADC_Init+0x1b0>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	2b18      	cmp	r3, #24
 80032d2:	d101      	bne.n	80032d8 <HAL_ADC_Init+0x1ac>
 80032d4:	2318      	movs	r3, #24
 80032d6:	e006      	b.n	80032e6 <HAL_ADC_Init+0x1ba>
 80032d8:	2300      	movs	r3, #0
 80032da:	e004      	b.n	80032e6 <HAL_ADC_Init+0x1ba>
 80032dc:	2310      	movs	r3, #16
 80032de:	e002      	b.n	80032e6 <HAL_ADC_Init+0x1ba>
 80032e0:	2308      	movs	r3, #8
 80032e2:	e000      	b.n	80032e6 <HAL_ADC_Init+0x1ba>
 80032e4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80032e6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032ee:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
 80032f4:	e00e      	b.n	8003314 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	7e5b      	ldrb	r3, [r3, #25]
 80032fa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003300:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003306:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800330e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003310:	4313      	orrs	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3020 	ldrb.w	r3, [r3, #32]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d106      	bne.n	800332c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003322:	3b01      	subs	r3, #1
 8003324:	045b      	lsls	r3, r3, #17
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4313      	orrs	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003330:	2b00      	cmp	r3, #0
 8003332:	d009      	beq.n	8003348 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003338:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003340:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4313      	orrs	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a26      	ldr	r2, [pc, #152]	@ (80033e8 <HAL_ADC_Init+0x2bc>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d115      	bne.n	800337e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	4b26      	ldr	r3, [pc, #152]	@ (80033f4 <HAL_ADC_Init+0x2c8>)
 800335a:	4013      	ands	r3, r2
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	69b9      	ldr	r1, [r7, #24]
 8003362:	430b      	orrs	r3, r1
 8003364:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	611a      	str	r2, [r3, #16]
 800337c:	e009      	b.n	8003392 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	4b1c      	ldr	r3, [pc, #112]	@ (80033f8 <HAL_ADC_Init+0x2cc>)
 8003386:	4013      	ands	r3, r2
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6812      	ldr	r2, [r2, #0]
 800338c:	69b9      	ldr	r1, [r7, #24]
 800338e:	430b      	orrs	r3, r1
 8003390:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff fe8c 	bl	80030b4 <LL_ADC_REG_IsConversionOngoing>
 800339c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff feae 	bl	8003104 <LL_ADC_INJ_IsConversionOngoing>
 80033a8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f040 808e 	bne.w	80034ce <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f040 808a 	bne.w	80034ce <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a0a      	ldr	r2, [pc, #40]	@ (80033e8 <HAL_ADC_Init+0x2bc>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d11b      	bne.n	80033fc <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	7e1b      	ldrb	r3, [r3, #24]
 80033c8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80033d0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80033d2:	4313      	orrs	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
 80033d6:	e018      	b.n	800340a <HAL_ADC_Init+0x2de>
 80033d8:	2400000c 	.word	0x2400000c
 80033dc:	053e2d63 	.word	0x053e2d63
 80033e0:	40022000 	.word	0x40022000
 80033e4:	40022100 	.word	0x40022100
 80033e8:	58026000 	.word	0x58026000
 80033ec:	40022300 	.word	0x40022300
 80033f0:	58026300 	.word	0x58026300
 80033f4:	fff04007 	.word	0xfff04007
 80033f8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	7e1b      	ldrb	r3, [r3, #24]
 8003400:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	4b46      	ldr	r3, [pc, #280]	@ (800352c <HAL_ADC_Init+0x400>)
 8003412:	4013      	ands	r3, r2
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6812      	ldr	r2, [r2, #0]
 8003418:	69b9      	ldr	r1, [r7, #24]
 800341a:	430b      	orrs	r3, r1
 800341c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003424:	2b01      	cmp	r3, #1
 8003426:	d137      	bne.n	8003498 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800342c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a3f      	ldr	r2, [pc, #252]	@ (8003530 <HAL_ADC_Init+0x404>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d116      	bne.n	8003466 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	691a      	ldr	r2, [r3, #16]
 800343e:	4b3d      	ldr	r3, [pc, #244]	@ (8003534 <HAL_ADC_Init+0x408>)
 8003440:	4013      	ands	r3, r2
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800344a:	4311      	orrs	r1, r2
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003450:	4311      	orrs	r1, r2
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003456:	430a      	orrs	r2, r1
 8003458:	431a      	orrs	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	611a      	str	r2, [r3, #16]
 8003464:	e020      	b.n	80034a8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	4b32      	ldr	r3, [pc, #200]	@ (8003538 <HAL_ADC_Init+0x40c>)
 800346e:	4013      	ands	r3, r2
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003474:	3a01      	subs	r2, #1
 8003476:	0411      	lsls	r1, r2, #16
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800347c:	4311      	orrs	r1, r2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003482:	4311      	orrs	r1, r2
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003488:	430a      	orrs	r2, r1
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f042 0201 	orr.w	r2, r2, #1
 8003494:	611a      	str	r2, [r3, #16]
 8003496:	e007      	b.n	80034a8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	691a      	ldr	r2, [r3, #16]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0201 	bic.w	r2, r2, #1
 80034a6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a1b      	ldr	r2, [pc, #108]	@ (8003530 <HAL_ADC_Init+0x404>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d002      	beq.n	80034ce <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f001 f8b1 	bl	8004630 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d10c      	bne.n	80034f0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034dc:	f023 010f 	bic.w	r1, r3, #15
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	1e5a      	subs	r2, r3, #1
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80034ee:	e007      	b.n	8003500 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 020f 	bic.w	r2, r2, #15
 80034fe:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003504:	f023 0303 	bic.w	r3, r3, #3
 8003508:	f043 0201 	orr.w	r2, r3, #1
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	661a      	str	r2, [r3, #96]	@ 0x60
 8003510:	e007      	b.n	8003522 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003516:	f043 0210 	orr.w	r2, r3, #16
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003522:	7ffb      	ldrb	r3, [r7, #31]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3724      	adds	r7, #36	@ 0x24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd90      	pop	{r4, r7, pc}
 800352c:	ffffbffc 	.word	0xffffbffc
 8003530:	58026000 	.word	0x58026000
 8003534:	fc00f81f 	.word	0xfc00f81f
 8003538:	fc00f81e 	.word	0xfc00f81e

0800353c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a5c      	ldr	r2, [pc, #368]	@ (80036bc <HAL_ADC_Start+0x180>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d004      	beq.n	8003558 <HAL_ADC_Start+0x1c>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a5b      	ldr	r2, [pc, #364]	@ (80036c0 <HAL_ADC_Start+0x184>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d101      	bne.n	800355c <HAL_ADC_Start+0x20>
 8003558:	4b5a      	ldr	r3, [pc, #360]	@ (80036c4 <HAL_ADC_Start+0x188>)
 800355a:	e000      	b.n	800355e <HAL_ADC_Start+0x22>
 800355c:	4b5a      	ldr	r3, [pc, #360]	@ (80036c8 <HAL_ADC_Start+0x18c>)
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff fcc8 	bl	8002ef4 <LL_ADC_GetMultimode>
 8003564:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff fda2 	bl	80030b4 <LL_ADC_REG_IsConversionOngoing>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	f040 809a 	bne.w	80036ac <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <HAL_ADC_Start+0x4a>
 8003582:	2302      	movs	r3, #2
 8003584:	e095      	b.n	80036b2 <HAL_ADC_Start+0x176>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 ff64 	bl	800445c <ADC_Enable>
 8003594:	4603      	mov	r3, r0
 8003596:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003598:	7dfb      	ldrb	r3, [r7, #23]
 800359a:	2b00      	cmp	r3, #0
 800359c:	f040 8081 	bne.w	80036a2 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80035a4:	4b49      	ldr	r3, [pc, #292]	@ (80036cc <HAL_ADC_Start+0x190>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a42      	ldr	r2, [pc, #264]	@ (80036c0 <HAL_ADC_Start+0x184>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d002      	beq.n	80035c0 <HAL_ADC_Start+0x84>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	e000      	b.n	80035c2 <HAL_ADC_Start+0x86>
 80035c0:	4b3e      	ldr	r3, [pc, #248]	@ (80036bc <HAL_ADC_Start+0x180>)
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6812      	ldr	r2, [r2, #0]
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d002      	beq.n	80035d0 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d105      	bne.n	80035dc <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035d4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035e8:	d106      	bne.n	80035f8 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035ee:	f023 0206 	bic.w	r2, r3, #6
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	665a      	str	r2, [r3, #100]	@ 0x64
 80035f6:	e002      	b.n	80035fe <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	221c      	movs	r2, #28
 8003604:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a2b      	ldr	r2, [pc, #172]	@ (80036c0 <HAL_ADC_Start+0x184>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d002      	beq.n	800361e <HAL_ADC_Start+0xe2>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	e000      	b.n	8003620 <HAL_ADC_Start+0xe4>
 800361e:	4b27      	ldr	r3, [pc, #156]	@ (80036bc <HAL_ADC_Start+0x180>)
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	4293      	cmp	r3, r2
 8003626:	d008      	beq.n	800363a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d005      	beq.n	800363a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	2b05      	cmp	r3, #5
 8003632:	d002      	beq.n	800363a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	2b09      	cmp	r3, #9
 8003638:	d114      	bne.n	8003664 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d007      	beq.n	8003658 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800364c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003650:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff fd01 	bl	8003064 <LL_ADC_REG_StartConversion>
 8003662:	e025      	b.n	80036b0 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003668:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a12      	ldr	r2, [pc, #72]	@ (80036c0 <HAL_ADC_Start+0x184>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d002      	beq.n	8003680 <HAL_ADC_Start+0x144>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	e000      	b.n	8003682 <HAL_ADC_Start+0x146>
 8003680:	4b0e      	ldr	r3, [pc, #56]	@ (80036bc <HAL_ADC_Start+0x180>)
 8003682:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00f      	beq.n	80036b0 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003694:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003698:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	661a      	str	r2, [r3, #96]	@ 0x60
 80036a0:	e006      	b.n	80036b0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80036aa:	e001      	b.n	80036b0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80036ac:	2302      	movs	r3, #2
 80036ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80036b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40022000 	.word	0x40022000
 80036c0:	40022100 	.word	0x40022100
 80036c4:	40022300 	.word	0x40022300
 80036c8:	58026300 	.word	0x58026300
 80036cc:	fffff0fe 	.word	0xfffff0fe

080036d0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <HAL_ADC_Stop+0x16>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e021      	b.n	800372a <HAL_ADC_Stop+0x5a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80036ee:	2103      	movs	r1, #3
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 fdf7 	bl	80042e4 <ADC_ConversionStop>
 80036f6:	4603      	mov	r3, r0
 80036f8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10f      	bne.n	8003720 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 ff35 	bl	8004570 <ADC_Disable>
 8003706:	4603      	mov	r3, r0
 8003708:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800370a:	7bfb      	ldrb	r3, [r7, #15]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d107      	bne.n	8003720 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003714:	4b07      	ldr	r3, [pc, #28]	@ (8003734 <HAL_ADC_Stop+0x64>)
 8003716:	4013      	ands	r3, r2
 8003718:	f043 0201 	orr.w	r2, r3, #1
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003728:	7bfb      	ldrb	r3, [r7, #15]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	ffffeefe 	.word	0xffffeefe

08003738 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a72      	ldr	r2, [pc, #456]	@ (8003910 <HAL_ADC_PollForConversion+0x1d8>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d004      	beq.n	8003756 <HAL_ADC_PollForConversion+0x1e>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a70      	ldr	r2, [pc, #448]	@ (8003914 <HAL_ADC_PollForConversion+0x1dc>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d101      	bne.n	800375a <HAL_ADC_PollForConversion+0x22>
 8003756:	4b70      	ldr	r3, [pc, #448]	@ (8003918 <HAL_ADC_PollForConversion+0x1e0>)
 8003758:	e000      	b.n	800375c <HAL_ADC_PollForConversion+0x24>
 800375a:	4b70      	ldr	r3, [pc, #448]	@ (800391c <HAL_ADC_PollForConversion+0x1e4>)
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff fbc9 	bl	8002ef4 <LL_ADC_GetMultimode>
 8003762:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	2b08      	cmp	r3, #8
 800376a:	d102      	bne.n	8003772 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800376c:	2308      	movs	r3, #8
 800376e:	61fb      	str	r3, [r7, #28]
 8003770:	e037      	b.n	80037e2 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	2b05      	cmp	r3, #5
 800377c:	d002      	beq.n	8003784 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2b09      	cmp	r3, #9
 8003782:	d111      	bne.n	80037a8 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d007      	beq.n	80037a2 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003796:	f043 0220 	orr.w	r2, r3, #32
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e0b1      	b.n	8003906 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80037a2:	2304      	movs	r3, #4
 80037a4:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80037a6:	e01c      	b.n	80037e2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a58      	ldr	r2, [pc, #352]	@ (8003910 <HAL_ADC_PollForConversion+0x1d8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d004      	beq.n	80037bc <HAL_ADC_PollForConversion+0x84>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a57      	ldr	r2, [pc, #348]	@ (8003914 <HAL_ADC_PollForConversion+0x1dc>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d101      	bne.n	80037c0 <HAL_ADC_PollForConversion+0x88>
 80037bc:	4b56      	ldr	r3, [pc, #344]	@ (8003918 <HAL_ADC_PollForConversion+0x1e0>)
 80037be:	e000      	b.n	80037c2 <HAL_ADC_PollForConversion+0x8a>
 80037c0:	4b56      	ldr	r3, [pc, #344]	@ (800391c <HAL_ADC_PollForConversion+0x1e4>)
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff fba4 	bl	8002f10 <LL_ADC_GetMultiDMATransfer>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d007      	beq.n	80037de <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037d2:	f043 0220 	orr.w	r2, r3, #32
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e093      	b.n	8003906 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80037de:	2304      	movs	r3, #4
 80037e0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80037e2:	f7ff f971 	bl	8002ac8 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80037e8:	e021      	b.n	800382e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f0:	d01d      	beq.n	800382e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80037f2:	f7ff f969 	bl	8002ac8 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d302      	bcc.n	8003808 <HAL_ADC_PollForConversion+0xd0>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d112      	bne.n	800382e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	4013      	ands	r3, r2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10b      	bne.n	800382e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800381a:	f043 0204 	orr.w	r2, r3, #4
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e06b      	b.n	8003906 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	4013      	ands	r3, r2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0d6      	beq.n	80037ea <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003840:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff faa7 	bl	8002da0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d01c      	beq.n	8003892 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	7e5b      	ldrb	r3, [r3, #25]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d118      	bne.n	8003892 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b08      	cmp	r3, #8
 800386c:	d111      	bne.n	8003892 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003872:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800387e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d105      	bne.n	8003892 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800388a:	f043 0201 	orr.w	r2, r3, #1
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a1f      	ldr	r2, [pc, #124]	@ (8003914 <HAL_ADC_PollForConversion+0x1dc>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d002      	beq.n	80038a2 <HAL_ADC_PollForConversion+0x16a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	e000      	b.n	80038a4 <HAL_ADC_PollForConversion+0x16c>
 80038a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003910 <HAL_ADC_PollForConversion+0x1d8>)
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d008      	beq.n	80038be <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d005      	beq.n	80038be <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2b05      	cmp	r3, #5
 80038b6:	d002      	beq.n	80038be <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	2b09      	cmp	r3, #9
 80038bc:	d104      	bne.n	80038c8 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	61bb      	str	r3, [r7, #24]
 80038c6:	e00c      	b.n	80038e2 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a11      	ldr	r2, [pc, #68]	@ (8003914 <HAL_ADC_PollForConversion+0x1dc>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d002      	beq.n	80038d8 <HAL_ADC_PollForConversion+0x1a0>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	e000      	b.n	80038da <HAL_ADC_PollForConversion+0x1a2>
 80038d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003910 <HAL_ADC_PollForConversion+0x1d8>)
 80038da:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d104      	bne.n	80038f2 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2208      	movs	r2, #8
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	e008      	b.n	8003904 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d103      	bne.n	8003904 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	220c      	movs	r2, #12
 8003902:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3720      	adds	r7, #32
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40022000 	.word	0x40022000
 8003914:	40022100 	.word	0x40022100
 8003918:	40022300 	.word	0x40022300
 800391c:	58026300 	.word	0x58026300

08003920 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800392e:	4618      	mov	r0, r3
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
	...

0800393c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800393c:	b590      	push	{r4, r7, lr}
 800393e:	b0a5      	sub	sp, #148	@ 0x94
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800394c:	2300      	movs	r3, #0
 800394e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003956:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	4aa4      	ldr	r2, [pc, #656]	@ (8003bf0 <HAL_ADC_ConfigChannel+0x2b4>)
 800395e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003966:	2b01      	cmp	r3, #1
 8003968:	d102      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x34>
 800396a:	2302      	movs	r3, #2
 800396c:	f000 bca2 	b.w	80042b4 <HAL_ADC_ConfigChannel+0x978>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff fb99 	bl	80030b4 <LL_ADC_REG_IsConversionOngoing>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	f040 8486 	bne.w	8004296 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	db31      	blt.n	80039f6 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a97      	ldr	r2, [pc, #604]	@ (8003bf4 <HAL_ADC_ConfigChannel+0x2b8>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d02c      	beq.n	80039f6 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d108      	bne.n	80039ba <HAL_ADC_ConfigChannel+0x7e>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	0e9b      	lsrs	r3, r3, #26
 80039ae:	f003 031f 	and.w	r3, r3, #31
 80039b2:	2201      	movs	r2, #1
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	e016      	b.n	80039e8 <HAL_ADC_ConfigChannel+0xac>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039c2:	fa93 f3a3 	rbit	r3, r3
 80039c6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80039c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039ca:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80039cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 80039d2:	2320      	movs	r3, #32
 80039d4:	e003      	b.n	80039de <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 80039d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039d8:	fab3 f383 	clz	r3, r3
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	f003 031f 	and.w	r3, r3, #31
 80039e2:	2201      	movs	r2, #1
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	69d1      	ldr	r1, [r2, #28]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6812      	ldr	r2, [r2, #0]
 80039f2:	430b      	orrs	r3, r1
 80039f4:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	6859      	ldr	r1, [r3, #4]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	461a      	mov	r2, r3
 8003a04:	f7ff f9df 	bl	8002dc6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff fb51 	bl	80030b4 <LL_ADC_REG_IsConversionOngoing>
 8003a12:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff fb72 	bl	8003104 <LL_ADC_INJ_IsConversionOngoing>
 8003a20:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f040 824a 	bne.w	8003ec2 <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f040 8245 	bne.w	8003ec2 <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6818      	ldr	r0, [r3, #0]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	6819      	ldr	r1, [r3, #0]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	461a      	mov	r2, r3
 8003a46:	f7ff f9ea 	bl	8002e1e <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a69      	ldr	r2, [pc, #420]	@ (8003bf4 <HAL_ADC_ConfigChannel+0x2b8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d10d      	bne.n	8003a70 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	695a      	ldr	r2, [r3, #20]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	08db      	lsrs	r3, r3, #3
 8003a60:	f003 0303 	and.w	r3, r3, #3
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a6e:	e032      	b.n	8003ad6 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a70:	4b61      	ldr	r3, [pc, #388]	@ (8003bf8 <HAL_ADC_ConfigChannel+0x2bc>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003a78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a7c:	d10b      	bne.n	8003a96 <HAL_ADC_ConfigChannel+0x15a>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	695a      	ldr	r2, [r3, #20]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	089b      	lsrs	r3, r3, #2
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	e01d      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x196>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10b      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x180>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	695a      	ldr	r2, [r3, #20]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	089b      	lsrs	r3, r3, #2
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	e00a      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x196>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	695a      	ldr	r2, [r3, #20]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	089b      	lsrs	r3, r3, #2
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d048      	beq.n	8003b70 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	6919      	ldr	r1, [r3, #16]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003aee:	f7ff f865 	bl	8002bbc <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a3f      	ldr	r2, [pc, #252]	@ (8003bf4 <HAL_ADC_ConfigChannel+0x2b8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d119      	bne.n	8003b30 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6818      	ldr	r0, [r3, #0]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	6919      	ldr	r1, [r3, #16]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	f7ff f8fd 	bl	8002d08 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6818      	ldr	r0, [r3, #0]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	6919      	ldr	r1, [r3, #16]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d102      	bne.n	8003b26 <HAL_ADC_ConfigChannel+0x1ea>
 8003b20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b24:	e000      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x1ec>
 8003b26:	2300      	movs	r3, #0
 8003b28:	461a      	mov	r2, r3
 8003b2a:	f7ff f8cb 	bl	8002cc4 <LL_ADC_SetOffsetSaturation>
 8003b2e:	e1c8      	b.n	8003ec2 <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	6919      	ldr	r1, [r3, #16]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d102      	bne.n	8003b48 <HAL_ADC_ConfigChannel+0x20c>
 8003b42:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003b46:	e000      	b.n	8003b4a <HAL_ADC_ConfigChannel+0x20e>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	f7ff f898 	bl	8002c80 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6818      	ldr	r0, [r3, #0]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	6919      	ldr	r1, [r3, #16]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	7e1b      	ldrb	r3, [r3, #24]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d102      	bne.n	8003b66 <HAL_ADC_ConfigChannel+0x22a>
 8003b60:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003b64:	e000      	b.n	8003b68 <HAL_ADC_ConfigChannel+0x22c>
 8003b66:	2300      	movs	r3, #0
 8003b68:	461a      	mov	r2, r3
 8003b6a:	f7ff f86f 	bl	8002c4c <LL_ADC_SetDataRightShift>
 8003b6e:	e1a8      	b.n	8003ec2 <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a1f      	ldr	r2, [pc, #124]	@ (8003bf4 <HAL_ADC_ConfigChannel+0x2b8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	f040 815b 	bne.w	8003e32 <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2100      	movs	r1, #0
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff f84c 	bl	8002c20 <LL_ADC_GetOffsetChannel>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10a      	bne.n	8003ba8 <HAL_ADC_ConfigChannel+0x26c>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2100      	movs	r1, #0
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff f841 	bl	8002c20 <LL_ADC_GetOffsetChannel>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	0e9b      	lsrs	r3, r3, #26
 8003ba2:	f003 021f 	and.w	r2, r3, #31
 8003ba6:	e017      	b.n	8003bd8 <HAL_ADC_ConfigChannel+0x29c>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2100      	movs	r1, #0
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff f836 	bl	8002c20 <LL_ADC_GetOffsetChannel>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bba:	fa93 f3a3 	rbit	r3, r3
 8003bbe:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003bc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003bc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003bca:	2320      	movs	r3, #32
 8003bcc:	e003      	b.n	8003bd6 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8003bce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bd0:	fab3 f383 	clz	r3, r3
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10b      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x2c0>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	0e9b      	lsrs	r3, r3, #26
 8003bea:	f003 031f 	and.w	r3, r3, #31
 8003bee:	e017      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x2e4>
 8003bf0:	47ff0000 	.word	0x47ff0000
 8003bf4:	58026000 	.word	0x58026000
 8003bf8:	5c001000 	.word	0x5c001000
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c04:	fa93 f3a3 	rbit	r3, r3
 8003c08:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003c0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c0c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003c0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8003c14:	2320      	movs	r3, #32
 8003c16:	e003      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8003c18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c1a:	fab3 f383 	clz	r3, r3
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d106      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7ff f88d 	bl	8002d4c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2101      	movs	r1, #1
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fe fff1 	bl	8002c20 <LL_ADC_GetOffsetChannel>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10a      	bne.n	8003c5e <HAL_ADC_ConfigChannel+0x322>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fe ffe6 	bl	8002c20 <LL_ADC_GetOffsetChannel>
 8003c54:	4603      	mov	r3, r0
 8003c56:	0e9b      	lsrs	r3, r3, #26
 8003c58:	f003 021f 	and.w	r2, r3, #31
 8003c5c:	e017      	b.n	8003c8e <HAL_ADC_ConfigChannel+0x352>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2101      	movs	r1, #1
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fe ffdb 	bl	8002c20 <LL_ADC_GetOffsetChannel>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c70:	fa93 f3a3 	rbit	r3, r3
 8003c74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003c76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c78:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003c7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8003c80:	2320      	movs	r3, #32
 8003c82:	e003      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8003c84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c86:	fab3 f383 	clz	r3, r3
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d105      	bne.n	8003ca6 <HAL_ADC_ConfigChannel+0x36a>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	0e9b      	lsrs	r3, r3, #26
 8003ca0:	f003 031f 	and.w	r3, r3, #31
 8003ca4:	e011      	b.n	8003cca <HAL_ADC_ConfigChannel+0x38e>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cae:	fa93 f3a3 	rbit	r3, r3
 8003cb2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003cb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003cb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003cbe:	2320      	movs	r3, #32
 8003cc0:	e003      	b.n	8003cca <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003cc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cc4:	fab3 f383 	clz	r3, r3
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d106      	bne.n	8003cdc <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7ff f838 	bl	8002d4c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2102      	movs	r1, #2
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fe ff9c 	bl	8002c20 <LL_ADC_GetOffsetChannel>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10a      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x3cc>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2102      	movs	r1, #2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fe ff91 	bl	8002c20 <LL_ADC_GetOffsetChannel>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	0e9b      	lsrs	r3, r3, #26
 8003d02:	f003 021f 	and.w	r2, r3, #31
 8003d06:	e017      	b.n	8003d38 <HAL_ADC_ConfigChannel+0x3fc>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2102      	movs	r1, #2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fe ff86 	bl	8002c20 <LL_ADC_GetOffsetChannel>
 8003d14:	4603      	mov	r3, r0
 8003d16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d1a:	fa93 f3a3 	rbit	r3, r3
 8003d1e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003d2a:	2320      	movs	r3, #32
 8003d2c:	e003      	b.n	8003d36 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d30:	fab3 f383 	clz	r3, r3
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	461a      	mov	r2, r3
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d105      	bne.n	8003d50 <HAL_ADC_ConfigChannel+0x414>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	0e9b      	lsrs	r3, r3, #26
 8003d4a:	f003 031f 	and.w	r3, r3, #31
 8003d4e:	e011      	b.n	8003d74 <HAL_ADC_ConfigChannel+0x438>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d58:	fa93 f3a3 	rbit	r3, r3
 8003d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d60:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003d68:	2320      	movs	r3, #32
 8003d6a:	e003      	b.n	8003d74 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6e:	fab3 f383 	clz	r3, r3
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d106      	bne.n	8003d86 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2102      	movs	r1, #2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fe ffe3 	bl	8002d4c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2103      	movs	r1, #3
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fe ff47 	bl	8002c20 <LL_ADC_GetOffsetChannel>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0x476>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2103      	movs	r1, #3
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fe ff3c 	bl	8002c20 <LL_ADC_GetOffsetChannel>
 8003da8:	4603      	mov	r3, r0
 8003daa:	0e9b      	lsrs	r3, r3, #26
 8003dac:	f003 021f 	and.w	r2, r3, #31
 8003db0:	e017      	b.n	8003de2 <HAL_ADC_ConfigChannel+0x4a6>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2103      	movs	r1, #3
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fe ff31 	bl	8002c20 <LL_ADC_GetOffsetChannel>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	fa93 f3a3 	rbit	r3, r3
 8003dc8:	61fb      	str	r3, [r7, #28]
  return result;
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003dd4:	2320      	movs	r3, #32
 8003dd6:	e003      	b.n	8003de0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dda:	fab3 f383 	clz	r3, r3
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	461a      	mov	r2, r3
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d105      	bne.n	8003dfa <HAL_ADC_ConfigChannel+0x4be>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	0e9b      	lsrs	r3, r3, #26
 8003df4:	f003 031f 	and.w	r3, r3, #31
 8003df8:	e011      	b.n	8003e1e <HAL_ADC_ConfigChannel+0x4e2>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	fa93 f3a3 	rbit	r3, r3
 8003e06:	613b      	str	r3, [r7, #16]
  return result;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8003e12:	2320      	movs	r3, #32
 8003e14:	e003      	b.n	8003e1e <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	fab3 f383 	clz	r3, r3
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d14f      	bne.n	8003ec2 <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2200      	movs	r2, #0
 8003e28:	2103      	movs	r1, #3
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fe ff8e 	bl	8002d4c <LL_ADC_SetOffsetState>
 8003e30:	e047      	b.n	8003ec2 <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e38:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	069b      	lsls	r3, r3, #26
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d107      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003e54:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e5c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	069b      	lsls	r3, r3, #26
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d107      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003e78:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e80:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	069b      	lsls	r3, r3, #26
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d107      	bne.n	8003e9e <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003e9c:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ea4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	069b      	lsls	r3, r3, #26
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d107      	bne.n	8003ec2 <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003ec0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff f8a6 	bl	8003018 <LL_ADC_IsEnabled>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f040 81ea 	bne.w	80042a8 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6818      	ldr	r0, [r3, #0]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	6819      	ldr	r1, [r3, #0]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	f7fe ffc7 	bl	8002e74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	4a7a      	ldr	r2, [pc, #488]	@ (80040d4 <HAL_ADC_ConfigChannel+0x798>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	f040 80e0 	bne.w	80040b2 <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4977      	ldr	r1, [pc, #476]	@ (80040d8 <HAL_ADC_ConfigChannel+0x79c>)
 8003efc:	428b      	cmp	r3, r1
 8003efe:	d147      	bne.n	8003f90 <HAL_ADC_ConfigChannel+0x654>
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4975      	ldr	r1, [pc, #468]	@ (80040dc <HAL_ADC_ConfigChannel+0x7a0>)
 8003f06:	428b      	cmp	r3, r1
 8003f08:	d040      	beq.n	8003f8c <HAL_ADC_ConfigChannel+0x650>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4974      	ldr	r1, [pc, #464]	@ (80040e0 <HAL_ADC_ConfigChannel+0x7a4>)
 8003f10:	428b      	cmp	r3, r1
 8003f12:	d039      	beq.n	8003f88 <HAL_ADC_ConfigChannel+0x64c>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4972      	ldr	r1, [pc, #456]	@ (80040e4 <HAL_ADC_ConfigChannel+0x7a8>)
 8003f1a:	428b      	cmp	r3, r1
 8003f1c:	d032      	beq.n	8003f84 <HAL_ADC_ConfigChannel+0x648>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4971      	ldr	r1, [pc, #452]	@ (80040e8 <HAL_ADC_ConfigChannel+0x7ac>)
 8003f24:	428b      	cmp	r3, r1
 8003f26:	d02b      	beq.n	8003f80 <HAL_ADC_ConfigChannel+0x644>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	496f      	ldr	r1, [pc, #444]	@ (80040ec <HAL_ADC_ConfigChannel+0x7b0>)
 8003f2e:	428b      	cmp	r3, r1
 8003f30:	d024      	beq.n	8003f7c <HAL_ADC_ConfigChannel+0x640>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	496e      	ldr	r1, [pc, #440]	@ (80040f0 <HAL_ADC_ConfigChannel+0x7b4>)
 8003f38:	428b      	cmp	r3, r1
 8003f3a:	d01d      	beq.n	8003f78 <HAL_ADC_ConfigChannel+0x63c>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	496c      	ldr	r1, [pc, #432]	@ (80040f4 <HAL_ADC_ConfigChannel+0x7b8>)
 8003f42:	428b      	cmp	r3, r1
 8003f44:	d016      	beq.n	8003f74 <HAL_ADC_ConfigChannel+0x638>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	496b      	ldr	r1, [pc, #428]	@ (80040f8 <HAL_ADC_ConfigChannel+0x7bc>)
 8003f4c:	428b      	cmp	r3, r1
 8003f4e:	d00f      	beq.n	8003f70 <HAL_ADC_ConfigChannel+0x634>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4969      	ldr	r1, [pc, #420]	@ (80040fc <HAL_ADC_ConfigChannel+0x7c0>)
 8003f56:	428b      	cmp	r3, r1
 8003f58:	d008      	beq.n	8003f6c <HAL_ADC_ConfigChannel+0x630>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4968      	ldr	r1, [pc, #416]	@ (8004100 <HAL_ADC_ConfigChannel+0x7c4>)
 8003f60:	428b      	cmp	r3, r1
 8003f62:	d101      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x62c>
 8003f64:	4b67      	ldr	r3, [pc, #412]	@ (8004104 <HAL_ADC_ConfigChannel+0x7c8>)
 8003f66:	e0a0      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 8003f68:	2300      	movs	r3, #0
 8003f6a:	e09e      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 8003f6c:	4b66      	ldr	r3, [pc, #408]	@ (8004108 <HAL_ADC_ConfigChannel+0x7cc>)
 8003f6e:	e09c      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 8003f70:	4b66      	ldr	r3, [pc, #408]	@ (800410c <HAL_ADC_ConfigChannel+0x7d0>)
 8003f72:	e09a      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 8003f74:	4b60      	ldr	r3, [pc, #384]	@ (80040f8 <HAL_ADC_ConfigChannel+0x7bc>)
 8003f76:	e098      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 8003f78:	4b5e      	ldr	r3, [pc, #376]	@ (80040f4 <HAL_ADC_ConfigChannel+0x7b8>)
 8003f7a:	e096      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 8003f7c:	4b64      	ldr	r3, [pc, #400]	@ (8004110 <HAL_ADC_ConfigChannel+0x7d4>)
 8003f7e:	e094      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 8003f80:	4b64      	ldr	r3, [pc, #400]	@ (8004114 <HAL_ADC_ConfigChannel+0x7d8>)
 8003f82:	e092      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 8003f84:	4b64      	ldr	r3, [pc, #400]	@ (8004118 <HAL_ADC_ConfigChannel+0x7dc>)
 8003f86:	e090      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 8003f88:	4b64      	ldr	r3, [pc, #400]	@ (800411c <HAL_ADC_ConfigChannel+0x7e0>)
 8003f8a:	e08e      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e08c      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4962      	ldr	r1, [pc, #392]	@ (8004120 <HAL_ADC_ConfigChannel+0x7e4>)
 8003f96:	428b      	cmp	r3, r1
 8003f98:	d140      	bne.n	800401c <HAL_ADC_ConfigChannel+0x6e0>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	494f      	ldr	r1, [pc, #316]	@ (80040dc <HAL_ADC_ConfigChannel+0x7a0>)
 8003fa0:	428b      	cmp	r3, r1
 8003fa2:	d039      	beq.n	8004018 <HAL_ADC_ConfigChannel+0x6dc>
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	494d      	ldr	r1, [pc, #308]	@ (80040e0 <HAL_ADC_ConfigChannel+0x7a4>)
 8003faa:	428b      	cmp	r3, r1
 8003fac:	d032      	beq.n	8004014 <HAL_ADC_ConfigChannel+0x6d8>
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	494c      	ldr	r1, [pc, #304]	@ (80040e4 <HAL_ADC_ConfigChannel+0x7a8>)
 8003fb4:	428b      	cmp	r3, r1
 8003fb6:	d02b      	beq.n	8004010 <HAL_ADC_ConfigChannel+0x6d4>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	494a      	ldr	r1, [pc, #296]	@ (80040e8 <HAL_ADC_ConfigChannel+0x7ac>)
 8003fbe:	428b      	cmp	r3, r1
 8003fc0:	d024      	beq.n	800400c <HAL_ADC_ConfigChannel+0x6d0>
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4949      	ldr	r1, [pc, #292]	@ (80040ec <HAL_ADC_ConfigChannel+0x7b0>)
 8003fc8:	428b      	cmp	r3, r1
 8003fca:	d01d      	beq.n	8004008 <HAL_ADC_ConfigChannel+0x6cc>
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4947      	ldr	r1, [pc, #284]	@ (80040f0 <HAL_ADC_ConfigChannel+0x7b4>)
 8003fd2:	428b      	cmp	r3, r1
 8003fd4:	d016      	beq.n	8004004 <HAL_ADC_ConfigChannel+0x6c8>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4946      	ldr	r1, [pc, #280]	@ (80040f4 <HAL_ADC_ConfigChannel+0x7b8>)
 8003fdc:	428b      	cmp	r3, r1
 8003fde:	d00f      	beq.n	8004000 <HAL_ADC_ConfigChannel+0x6c4>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4944      	ldr	r1, [pc, #272]	@ (80040f8 <HAL_ADC_ConfigChannel+0x7bc>)
 8003fe6:	428b      	cmp	r3, r1
 8003fe8:	d008      	beq.n	8003ffc <HAL_ADC_ConfigChannel+0x6c0>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4944      	ldr	r1, [pc, #272]	@ (8004100 <HAL_ADC_ConfigChannel+0x7c4>)
 8003ff0:	428b      	cmp	r3, r1
 8003ff2:	d101      	bne.n	8003ff8 <HAL_ADC_ConfigChannel+0x6bc>
 8003ff4:	4b43      	ldr	r3, [pc, #268]	@ (8004104 <HAL_ADC_ConfigChannel+0x7c8>)
 8003ff6:	e058      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	e056      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 8003ffc:	4b43      	ldr	r3, [pc, #268]	@ (800410c <HAL_ADC_ConfigChannel+0x7d0>)
 8003ffe:	e054      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 8004000:	4b3d      	ldr	r3, [pc, #244]	@ (80040f8 <HAL_ADC_ConfigChannel+0x7bc>)
 8004002:	e052      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 8004004:	4b3b      	ldr	r3, [pc, #236]	@ (80040f4 <HAL_ADC_ConfigChannel+0x7b8>)
 8004006:	e050      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 8004008:	4b41      	ldr	r3, [pc, #260]	@ (8004110 <HAL_ADC_ConfigChannel+0x7d4>)
 800400a:	e04e      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 800400c:	4b41      	ldr	r3, [pc, #260]	@ (8004114 <HAL_ADC_ConfigChannel+0x7d8>)
 800400e:	e04c      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 8004010:	4b41      	ldr	r3, [pc, #260]	@ (8004118 <HAL_ADC_ConfigChannel+0x7dc>)
 8004012:	e04a      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 8004014:	4b41      	ldr	r3, [pc, #260]	@ (800411c <HAL_ADC_ConfigChannel+0x7e0>)
 8004016:	e048      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 8004018:	2301      	movs	r3, #1
 800401a:	e046      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4940      	ldr	r1, [pc, #256]	@ (8004124 <HAL_ADC_ConfigChannel+0x7e8>)
 8004022:	428b      	cmp	r3, r1
 8004024:	d140      	bne.n	80040a8 <HAL_ADC_ConfigChannel+0x76c>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	492c      	ldr	r1, [pc, #176]	@ (80040dc <HAL_ADC_ConfigChannel+0x7a0>)
 800402c:	428b      	cmp	r3, r1
 800402e:	d039      	beq.n	80040a4 <HAL_ADC_ConfigChannel+0x768>
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	492a      	ldr	r1, [pc, #168]	@ (80040e0 <HAL_ADC_ConfigChannel+0x7a4>)
 8004036:	428b      	cmp	r3, r1
 8004038:	d032      	beq.n	80040a0 <HAL_ADC_ConfigChannel+0x764>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4929      	ldr	r1, [pc, #164]	@ (80040e4 <HAL_ADC_ConfigChannel+0x7a8>)
 8004040:	428b      	cmp	r3, r1
 8004042:	d02b      	beq.n	800409c <HAL_ADC_ConfigChannel+0x760>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4927      	ldr	r1, [pc, #156]	@ (80040e8 <HAL_ADC_ConfigChannel+0x7ac>)
 800404a:	428b      	cmp	r3, r1
 800404c:	d024      	beq.n	8004098 <HAL_ADC_ConfigChannel+0x75c>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4926      	ldr	r1, [pc, #152]	@ (80040ec <HAL_ADC_ConfigChannel+0x7b0>)
 8004054:	428b      	cmp	r3, r1
 8004056:	d01d      	beq.n	8004094 <HAL_ADC_ConfigChannel+0x758>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4924      	ldr	r1, [pc, #144]	@ (80040f0 <HAL_ADC_ConfigChannel+0x7b4>)
 800405e:	428b      	cmp	r3, r1
 8004060:	d016      	beq.n	8004090 <HAL_ADC_ConfigChannel+0x754>
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4923      	ldr	r1, [pc, #140]	@ (80040f4 <HAL_ADC_ConfigChannel+0x7b8>)
 8004068:	428b      	cmp	r3, r1
 800406a:	d00f      	beq.n	800408c <HAL_ADC_ConfigChannel+0x750>
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4926      	ldr	r1, [pc, #152]	@ (800410c <HAL_ADC_ConfigChannel+0x7d0>)
 8004072:	428b      	cmp	r3, r1
 8004074:	d008      	beq.n	8004088 <HAL_ADC_ConfigChannel+0x74c>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	492b      	ldr	r1, [pc, #172]	@ (8004128 <HAL_ADC_ConfigChannel+0x7ec>)
 800407c:	428b      	cmp	r3, r1
 800407e:	d101      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x748>
 8004080:	4b2a      	ldr	r3, [pc, #168]	@ (800412c <HAL_ADC_ConfigChannel+0x7f0>)
 8004082:	e012      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 8004084:	2300      	movs	r3, #0
 8004086:	e010      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 8004088:	4b27      	ldr	r3, [pc, #156]	@ (8004128 <HAL_ADC_ConfigChannel+0x7ec>)
 800408a:	e00e      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 800408c:	4b1a      	ldr	r3, [pc, #104]	@ (80040f8 <HAL_ADC_ConfigChannel+0x7bc>)
 800408e:	e00c      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 8004090:	4b18      	ldr	r3, [pc, #96]	@ (80040f4 <HAL_ADC_ConfigChannel+0x7b8>)
 8004092:	e00a      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 8004094:	4b1e      	ldr	r3, [pc, #120]	@ (8004110 <HAL_ADC_ConfigChannel+0x7d4>)
 8004096:	e008      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 8004098:	4b1e      	ldr	r3, [pc, #120]	@ (8004114 <HAL_ADC_ConfigChannel+0x7d8>)
 800409a:	e006      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 800409c:	4b1e      	ldr	r3, [pc, #120]	@ (8004118 <HAL_ADC_ConfigChannel+0x7dc>)
 800409e:	e004      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 80040a0:	4b1e      	ldr	r3, [pc, #120]	@ (800411c <HAL_ADC_ConfigChannel+0x7e0>)
 80040a2:	e002      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 80040a4:	2301      	movs	r3, #1
 80040a6:	e000      	b.n	80040aa <HAL_ADC_ConfigChannel+0x76e>
 80040a8:	2300      	movs	r3, #0
 80040aa:	4619      	mov	r1, r3
 80040ac:	4610      	mov	r0, r2
 80040ae:	f7fe fd4b 	bl	8002b48 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f280 80f6 	bge.w	80042a8 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a05      	ldr	r2, [pc, #20]	@ (80040d8 <HAL_ADC_ConfigChannel+0x79c>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d004      	beq.n	80040d0 <HAL_ADC_ConfigChannel+0x794>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a15      	ldr	r2, [pc, #84]	@ (8004120 <HAL_ADC_ConfigChannel+0x7e4>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d131      	bne.n	8004134 <HAL_ADC_ConfigChannel+0x7f8>
 80040d0:	4b17      	ldr	r3, [pc, #92]	@ (8004130 <HAL_ADC_ConfigChannel+0x7f4>)
 80040d2:	e030      	b.n	8004136 <HAL_ADC_ConfigChannel+0x7fa>
 80040d4:	47ff0000 	.word	0x47ff0000
 80040d8:	40022000 	.word	0x40022000
 80040dc:	04300002 	.word	0x04300002
 80040e0:	08600004 	.word	0x08600004
 80040e4:	0c900008 	.word	0x0c900008
 80040e8:	10c00010 	.word	0x10c00010
 80040ec:	14f00020 	.word	0x14f00020
 80040f0:	2a000400 	.word	0x2a000400
 80040f4:	2e300800 	.word	0x2e300800
 80040f8:	32601000 	.word	0x32601000
 80040fc:	43210000 	.word	0x43210000
 8004100:	4b840000 	.word	0x4b840000
 8004104:	4fb80000 	.word	0x4fb80000
 8004108:	47520000 	.word	0x47520000
 800410c:	36902000 	.word	0x36902000
 8004110:	25b00200 	.word	0x25b00200
 8004114:	21800100 	.word	0x21800100
 8004118:	1d500080 	.word	0x1d500080
 800411c:	19200040 	.word	0x19200040
 8004120:	40022100 	.word	0x40022100
 8004124:	58026000 	.word	0x58026000
 8004128:	3ac04000 	.word	0x3ac04000
 800412c:	3ef08000 	.word	0x3ef08000
 8004130:	40022300 	.word	0x40022300
 8004134:	4b61      	ldr	r3, [pc, #388]	@ (80042bc <HAL_ADC_ConfigChannel+0x980>)
 8004136:	4618      	mov	r0, r3
 8004138:	f7fe fcf8 	bl	8002b2c <LL_ADC_GetCommonPathInternalCh>
 800413c:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a5f      	ldr	r2, [pc, #380]	@ (80042c0 <HAL_ADC_ConfigChannel+0x984>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d004      	beq.n	8004152 <HAL_ADC_ConfigChannel+0x816>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a5d      	ldr	r2, [pc, #372]	@ (80042c4 <HAL_ADC_ConfigChannel+0x988>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d10e      	bne.n	8004170 <HAL_ADC_ConfigChannel+0x834>
 8004152:	485b      	ldr	r0, [pc, #364]	@ (80042c0 <HAL_ADC_ConfigChannel+0x984>)
 8004154:	f7fe ff60 	bl	8003018 <LL_ADC_IsEnabled>
 8004158:	4604      	mov	r4, r0
 800415a:	485a      	ldr	r0, [pc, #360]	@ (80042c4 <HAL_ADC_ConfigChannel+0x988>)
 800415c:	f7fe ff5c 	bl	8003018 <LL_ADC_IsEnabled>
 8004160:	4603      	mov	r3, r0
 8004162:	4323      	orrs	r3, r4
 8004164:	2b00      	cmp	r3, #0
 8004166:	bf0c      	ite	eq
 8004168:	2301      	moveq	r3, #1
 800416a:	2300      	movne	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	e008      	b.n	8004182 <HAL_ADC_ConfigChannel+0x846>
 8004170:	4855      	ldr	r0, [pc, #340]	@ (80042c8 <HAL_ADC_ConfigChannel+0x98c>)
 8004172:	f7fe ff51 	bl	8003018 <LL_ADC_IsEnabled>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	bf0c      	ite	eq
 800417c:	2301      	moveq	r3, #1
 800417e:	2300      	movne	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d07d      	beq.n	8004282 <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a50      	ldr	r2, [pc, #320]	@ (80042cc <HAL_ADC_ConfigChannel+0x990>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d130      	bne.n	80041f2 <HAL_ADC_ConfigChannel+0x8b6>
 8004190:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004192:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d12b      	bne.n	80041f2 <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a4a      	ldr	r2, [pc, #296]	@ (80042c8 <HAL_ADC_ConfigChannel+0x98c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	f040 8081 	bne.w	80042a8 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a45      	ldr	r2, [pc, #276]	@ (80042c0 <HAL_ADC_ConfigChannel+0x984>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d004      	beq.n	80041ba <HAL_ADC_ConfigChannel+0x87e>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a43      	ldr	r2, [pc, #268]	@ (80042c4 <HAL_ADC_ConfigChannel+0x988>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d101      	bne.n	80041be <HAL_ADC_ConfigChannel+0x882>
 80041ba:	4a45      	ldr	r2, [pc, #276]	@ (80042d0 <HAL_ADC_ConfigChannel+0x994>)
 80041bc:	e000      	b.n	80041c0 <HAL_ADC_ConfigChannel+0x884>
 80041be:	4a3f      	ldr	r2, [pc, #252]	@ (80042bc <HAL_ADC_ConfigChannel+0x980>)
 80041c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041c6:	4619      	mov	r1, r3
 80041c8:	4610      	mov	r0, r2
 80041ca:	f7fe fc9c 	bl	8002b06 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041ce:	4b41      	ldr	r3, [pc, #260]	@ (80042d4 <HAL_ADC_ConfigChannel+0x998>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	099b      	lsrs	r3, r3, #6
 80041d4:	4a40      	ldr	r2, [pc, #256]	@ (80042d8 <HAL_ADC_ConfigChannel+0x99c>)
 80041d6:	fba2 2303 	umull	r2, r3, r2, r3
 80041da:	099b      	lsrs	r3, r3, #6
 80041dc:	3301      	adds	r3, #1
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80041e2:	e002      	b.n	80041ea <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	3b01      	subs	r3, #1
 80041e8:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1f9      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041f0:	e05a      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a39      	ldr	r2, [pc, #228]	@ (80042dc <HAL_ADC_ConfigChannel+0x9a0>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d11e      	bne.n	800423a <HAL_ADC_ConfigChannel+0x8fe>
 80041fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d119      	bne.n	800423a <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a2f      	ldr	r2, [pc, #188]	@ (80042c8 <HAL_ADC_ConfigChannel+0x98c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d14b      	bne.n	80042a8 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a2a      	ldr	r2, [pc, #168]	@ (80042c0 <HAL_ADC_ConfigChannel+0x984>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d004      	beq.n	8004224 <HAL_ADC_ConfigChannel+0x8e8>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a29      	ldr	r2, [pc, #164]	@ (80042c4 <HAL_ADC_ConfigChannel+0x988>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d101      	bne.n	8004228 <HAL_ADC_ConfigChannel+0x8ec>
 8004224:	4a2a      	ldr	r2, [pc, #168]	@ (80042d0 <HAL_ADC_ConfigChannel+0x994>)
 8004226:	e000      	b.n	800422a <HAL_ADC_ConfigChannel+0x8ee>
 8004228:	4a24      	ldr	r2, [pc, #144]	@ (80042bc <HAL_ADC_ConfigChannel+0x980>)
 800422a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800422c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004230:	4619      	mov	r1, r3
 8004232:	4610      	mov	r0, r2
 8004234:	f7fe fc67 	bl	8002b06 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004238:	e036      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a28      	ldr	r2, [pc, #160]	@ (80042e0 <HAL_ADC_ConfigChannel+0x9a4>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d131      	bne.n	80042a8 <HAL_ADC_ConfigChannel+0x96c>
 8004244:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d12c      	bne.n	80042a8 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a1d      	ldr	r2, [pc, #116]	@ (80042c8 <HAL_ADC_ConfigChannel+0x98c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d127      	bne.n	80042a8 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a18      	ldr	r2, [pc, #96]	@ (80042c0 <HAL_ADC_ConfigChannel+0x984>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d004      	beq.n	800426c <HAL_ADC_ConfigChannel+0x930>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a17      	ldr	r2, [pc, #92]	@ (80042c4 <HAL_ADC_ConfigChannel+0x988>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d101      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x934>
 800426c:	4a18      	ldr	r2, [pc, #96]	@ (80042d0 <HAL_ADC_ConfigChannel+0x994>)
 800426e:	e000      	b.n	8004272 <HAL_ADC_ConfigChannel+0x936>
 8004270:	4a12      	ldr	r2, [pc, #72]	@ (80042bc <HAL_ADC_ConfigChannel+0x980>)
 8004272:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004274:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004278:	4619      	mov	r1, r3
 800427a:	4610      	mov	r0, r2
 800427c:	f7fe fc43 	bl	8002b06 <LL_ADC_SetCommonPathInternalCh>
 8004280:	e012      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004286:	f043 0220 	orr.w	r2, r3, #32
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8004294:	e008      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800429a:	f043 0220 	orr.w	r2, r3, #32
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80042b0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3794      	adds	r7, #148	@ 0x94
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd90      	pop	{r4, r7, pc}
 80042bc:	58026300 	.word	0x58026300
 80042c0:	40022000 	.word	0x40022000
 80042c4:	40022100 	.word	0x40022100
 80042c8:	58026000 	.word	0x58026000
 80042cc:	c7520000 	.word	0xc7520000
 80042d0:	40022300 	.word	0x40022300
 80042d4:	2400000c 	.word	0x2400000c
 80042d8:	053e2d63 	.word	0x053e2d63
 80042dc:	c3210000 	.word	0xc3210000
 80042e0:	cb840000 	.word	0xcb840000

080042e4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b088      	sub	sp, #32
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80042ee:	2300      	movs	r3, #0
 80042f0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fe feda 	bl	80030b4 <LL_ADC_REG_IsConversionOngoing>
 8004300:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f7fe fefc 	bl	8003104 <LL_ADC_INJ_IsConversionOngoing>
 800430c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d103      	bne.n	800431c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 8098 	beq.w	800444c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d02a      	beq.n	8004380 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	7e5b      	ldrb	r3, [r3, #25]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d126      	bne.n	8004380 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	7e1b      	ldrb	r3, [r3, #24]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d122      	bne.n	8004380 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800433a:	2301      	movs	r3, #1
 800433c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800433e:	e014      	b.n	800436a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	4a45      	ldr	r2, [pc, #276]	@ (8004458 <ADC_ConversionStop+0x174>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d90d      	bls.n	8004364 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800434c:	f043 0210 	orr.w	r2, r3, #16
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004358:	f043 0201 	orr.w	r2, r3, #1
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e074      	b.n	800444e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	3301      	adds	r3, #1
 8004368:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004374:	2b40      	cmp	r3, #64	@ 0x40
 8004376:	d1e3      	bne.n	8004340 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2240      	movs	r2, #64	@ 0x40
 800437e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	2b02      	cmp	r3, #2
 8004384:	d014      	beq.n	80043b0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f7fe fe92 	bl	80030b4 <LL_ADC_REG_IsConversionOngoing>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00c      	beq.n	80043b0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f7fe fe4f 	bl	800303e <LL_ADC_IsDisableOngoing>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d104      	bne.n	80043b0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fe fe6e 	bl	800308c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d014      	beq.n	80043e0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fe fea2 	bl	8003104 <LL_ADC_INJ_IsConversionOngoing>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00c      	beq.n	80043e0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fe fe37 	bl	800303e <LL_ADC_IsDisableOngoing>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d104      	bne.n	80043e0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fe fe7e 	bl	80030dc <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d005      	beq.n	80043f2 <ADC_ConversionStop+0x10e>
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	2b03      	cmp	r3, #3
 80043ea:	d105      	bne.n	80043f8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80043ec:	230c      	movs	r3, #12
 80043ee:	617b      	str	r3, [r7, #20]
        break;
 80043f0:	e005      	b.n	80043fe <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80043f2:	2308      	movs	r3, #8
 80043f4:	617b      	str	r3, [r7, #20]
        break;
 80043f6:	e002      	b.n	80043fe <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80043f8:	2304      	movs	r3, #4
 80043fa:	617b      	str	r3, [r7, #20]
        break;
 80043fc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80043fe:	f7fe fb63 	bl	8002ac8 <HAL_GetTick>
 8004402:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004404:	e01b      	b.n	800443e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004406:	f7fe fb5f 	bl	8002ac8 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b05      	cmp	r3, #5
 8004412:	d914      	bls.n	800443e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689a      	ldr	r2, [r3, #8]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	4013      	ands	r3, r2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00d      	beq.n	800443e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004426:	f043 0210 	orr.w	r2, r3, #16
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004432:	f043 0201 	orr.w	r2, r3, #1
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e007      	b.n	800444e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	4013      	ands	r3, r2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1dc      	bne.n	8004406 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3720      	adds	r7, #32
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	000cdbff 	.word	0x000cdbff

0800445c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f7fe fdd5 	bl	8003018 <LL_ADC_IsEnabled>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d16e      	bne.n	8004552 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	4b38      	ldr	r3, [pc, #224]	@ (800455c <ADC_Enable+0x100>)
 800447c:	4013      	ands	r3, r2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00d      	beq.n	800449e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004486:	f043 0210 	orr.w	r2, r3, #16
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004492:	f043 0201 	orr.w	r2, r3, #1
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e05a      	b.n	8004554 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fe fd90 	bl	8002fc8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80044a8:	f7fe fb0e 	bl	8002ac8 <HAL_GetTick>
 80044ac:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a2b      	ldr	r2, [pc, #172]	@ (8004560 <ADC_Enable+0x104>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d004      	beq.n	80044c2 <ADC_Enable+0x66>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a29      	ldr	r2, [pc, #164]	@ (8004564 <ADC_Enable+0x108>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d101      	bne.n	80044c6 <ADC_Enable+0x6a>
 80044c2:	4b29      	ldr	r3, [pc, #164]	@ (8004568 <ADC_Enable+0x10c>)
 80044c4:	e000      	b.n	80044c8 <ADC_Enable+0x6c>
 80044c6:	4b29      	ldr	r3, [pc, #164]	@ (800456c <ADC_Enable+0x110>)
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7fe fd13 	bl	8002ef4 <LL_ADC_GetMultimode>
 80044ce:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a23      	ldr	r2, [pc, #140]	@ (8004564 <ADC_Enable+0x108>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d002      	beq.n	80044e0 <ADC_Enable+0x84>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	e000      	b.n	80044e2 <ADC_Enable+0x86>
 80044e0:	4b1f      	ldr	r3, [pc, #124]	@ (8004560 <ADC_Enable+0x104>)
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6812      	ldr	r2, [r2, #0]
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d02c      	beq.n	8004544 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d130      	bne.n	8004552 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044f0:	e028      	b.n	8004544 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fe fd8e 	bl	8003018 <LL_ADC_IsEnabled>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d104      	bne.n	800450c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f7fe fd5e 	bl	8002fc8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800450c:	f7fe fadc 	bl	8002ac8 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d914      	bls.n	8004544 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b01      	cmp	r3, #1
 8004526:	d00d      	beq.n	8004544 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800452c:	f043 0210 	orr.w	r2, r3, #16
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004538:	f043 0201 	orr.w	r2, r3, #1
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e007      	b.n	8004554 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b01      	cmp	r3, #1
 8004550:	d1cf      	bne.n	80044f2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	8000003f 	.word	0x8000003f
 8004560:	40022000 	.word	0x40022000
 8004564:	40022100 	.word	0x40022100
 8004568:	40022300 	.word	0x40022300
 800456c:	58026300 	.word	0x58026300

08004570 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f7fe fd5e 	bl	800303e <LL_ADC_IsDisableOngoing>
 8004582:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4618      	mov	r0, r3
 800458a:	f7fe fd45 	bl	8003018 <LL_ADC_IsEnabled>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d047      	beq.n	8004624 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d144      	bne.n	8004624 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 030d 	and.w	r3, r3, #13
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d10c      	bne.n	80045c2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7fe fd1f 	bl	8002ff0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2203      	movs	r2, #3
 80045b8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80045ba:	f7fe fa85 	bl	8002ac8 <HAL_GetTick>
 80045be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80045c0:	e029      	b.n	8004616 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045c6:	f043 0210 	orr.w	r2, r3, #16
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045d2:	f043 0201 	orr.w	r2, r3, #1
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e023      	b.n	8004626 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045de:	f7fe fa73 	bl	8002ac8 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d914      	bls.n	8004616 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00d      	beq.n	8004616 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045fe:	f043 0210 	orr.w	r2, r3, #16
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800460a:	f043 0201 	orr.w	r2, r3, #1
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e007      	b.n	8004626 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1dc      	bne.n	80045de <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
	...

08004630 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a6c      	ldr	r2, [pc, #432]	@ (80047f0 <ADC_ConfigureBoostMode+0x1c0>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d004      	beq.n	800464c <ADC_ConfigureBoostMode+0x1c>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a6b      	ldr	r2, [pc, #428]	@ (80047f4 <ADC_ConfigureBoostMode+0x1c4>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d109      	bne.n	8004660 <ADC_ConfigureBoostMode+0x30>
 800464c:	4b6a      	ldr	r3, [pc, #424]	@ (80047f8 <ADC_ConfigureBoostMode+0x1c8>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004654:	2b00      	cmp	r3, #0
 8004656:	bf14      	ite	ne
 8004658:	2301      	movne	r3, #1
 800465a:	2300      	moveq	r3, #0
 800465c:	b2db      	uxtb	r3, r3
 800465e:	e008      	b.n	8004672 <ADC_ConfigureBoostMode+0x42>
 8004660:	4b66      	ldr	r3, [pc, #408]	@ (80047fc <ADC_ConfigureBoostMode+0x1cc>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004668:	2b00      	cmp	r3, #0
 800466a:	bf14      	ite	ne
 800466c:	2301      	movne	r3, #1
 800466e:	2300      	moveq	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d01c      	beq.n	80046b0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004676:	f002 fdcd 	bl	8007214 <HAL_RCC_GetHCLKFreq>
 800467a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004684:	d010      	beq.n	80046a8 <ADC_ConfigureBoostMode+0x78>
 8004686:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800468a:	d873      	bhi.n	8004774 <ADC_ConfigureBoostMode+0x144>
 800468c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004690:	d002      	beq.n	8004698 <ADC_ConfigureBoostMode+0x68>
 8004692:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004696:	d16d      	bne.n	8004774 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	0c1b      	lsrs	r3, r3, #16
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a4:	60fb      	str	r3, [r7, #12]
        break;
 80046a6:	e068      	b.n	800477a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	089b      	lsrs	r3, r3, #2
 80046ac:	60fb      	str	r3, [r7, #12]
        break;
 80046ae:	e064      	b.n	800477a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80046b0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80046b4:	f04f 0100 	mov.w	r1, #0
 80046b8:	f003 ffa8 	bl	800860c <HAL_RCCEx_GetPeriphCLKFreq>
 80046bc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80046c6:	d051      	beq.n	800476c <ADC_ConfigureBoostMode+0x13c>
 80046c8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80046cc:	d854      	bhi.n	8004778 <ADC_ConfigureBoostMode+0x148>
 80046ce:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80046d2:	d047      	beq.n	8004764 <ADC_ConfigureBoostMode+0x134>
 80046d4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80046d8:	d84e      	bhi.n	8004778 <ADC_ConfigureBoostMode+0x148>
 80046da:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80046de:	d03d      	beq.n	800475c <ADC_ConfigureBoostMode+0x12c>
 80046e0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80046e4:	d848      	bhi.n	8004778 <ADC_ConfigureBoostMode+0x148>
 80046e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046ea:	d033      	beq.n	8004754 <ADC_ConfigureBoostMode+0x124>
 80046ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046f0:	d842      	bhi.n	8004778 <ADC_ConfigureBoostMode+0x148>
 80046f2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80046f6:	d029      	beq.n	800474c <ADC_ConfigureBoostMode+0x11c>
 80046f8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80046fc:	d83c      	bhi.n	8004778 <ADC_ConfigureBoostMode+0x148>
 80046fe:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004702:	d01a      	beq.n	800473a <ADC_ConfigureBoostMode+0x10a>
 8004704:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004708:	d836      	bhi.n	8004778 <ADC_ConfigureBoostMode+0x148>
 800470a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800470e:	d014      	beq.n	800473a <ADC_ConfigureBoostMode+0x10a>
 8004710:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004714:	d830      	bhi.n	8004778 <ADC_ConfigureBoostMode+0x148>
 8004716:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800471a:	d00e      	beq.n	800473a <ADC_ConfigureBoostMode+0x10a>
 800471c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004720:	d82a      	bhi.n	8004778 <ADC_ConfigureBoostMode+0x148>
 8004722:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004726:	d008      	beq.n	800473a <ADC_ConfigureBoostMode+0x10a>
 8004728:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800472c:	d824      	bhi.n	8004778 <ADC_ConfigureBoostMode+0x148>
 800472e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004732:	d002      	beq.n	800473a <ADC_ConfigureBoostMode+0x10a>
 8004734:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004738:	d11e      	bne.n	8004778 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	0c9b      	lsrs	r3, r3, #18
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	fbb2 f3f3 	udiv	r3, r2, r3
 8004748:	60fb      	str	r3, [r7, #12]
        break;
 800474a:	e016      	b.n	800477a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	091b      	lsrs	r3, r3, #4
 8004750:	60fb      	str	r3, [r7, #12]
        break;
 8004752:	e012      	b.n	800477a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	60fb      	str	r3, [r7, #12]
        break;
 800475a:	e00e      	b.n	800477a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	099b      	lsrs	r3, r3, #6
 8004760:	60fb      	str	r3, [r7, #12]
        break;
 8004762:	e00a      	b.n	800477a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	09db      	lsrs	r3, r3, #7
 8004768:	60fb      	str	r3, [r7, #12]
        break;
 800476a:	e006      	b.n	800477a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	0a1b      	lsrs	r3, r3, #8
 8004770:	60fb      	str	r3, [r7, #12]
        break;
 8004772:	e002      	b.n	800477a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004774:	bf00      	nop
 8004776:	e000      	b.n	800477a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004778:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	085b      	lsrs	r3, r3, #1
 800477e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4a1f      	ldr	r2, [pc, #124]	@ (8004800 <ADC_ConfigureBoostMode+0x1d0>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d808      	bhi.n	800479a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004796:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004798:	e025      	b.n	80047e6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	4a19      	ldr	r2, [pc, #100]	@ (8004804 <ADC_ConfigureBoostMode+0x1d4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d80a      	bhi.n	80047b8 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047b4:	609a      	str	r2, [r3, #8]
}
 80047b6:	e016      	b.n	80047e6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4a13      	ldr	r2, [pc, #76]	@ (8004808 <ADC_ConfigureBoostMode+0x1d8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d80a      	bhi.n	80047d6 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047d2:	609a      	str	r2, [r3, #8]
}
 80047d4:	e007      	b.n	80047e6 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80047e4:	609a      	str	r2, [r3, #8]
}
 80047e6:	bf00      	nop
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	40022000 	.word	0x40022000
 80047f4:	40022100 	.word	0x40022100
 80047f8:	40022300 	.word	0x40022300
 80047fc:	58026300 	.word	0x58026300
 8004800:	005f5e10 	.word	0x005f5e10
 8004804:	00bebc20 	.word	0x00bebc20
 8004808:	017d7840 	.word	0x017d7840

0800480c <LL_ADC_IsEnabled>:
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b01      	cmp	r3, #1
 800481e:	d101      	bne.n	8004824 <LL_ADC_IsEnabled+0x18>
 8004820:	2301      	movs	r3, #1
 8004822:	e000      	b.n	8004826 <LL_ADC_IsEnabled+0x1a>
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <LL_ADC_REG_IsConversionOngoing>:
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	2b04      	cmp	r3, #4
 8004844:	d101      	bne.n	800484a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004846:	2301      	movs	r3, #1
 8004848:	e000      	b.n	800484c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004858:	b590      	push	{r4, r7, lr}
 800485a:	b0a3      	sub	sp, #140	@ 0x8c
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800486e:	2b01      	cmp	r3, #1
 8004870:	d101      	bne.n	8004876 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004872:	2302      	movs	r3, #2
 8004874:	e0c1      	b.n	80049fa <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800487e:	2300      	movs	r3, #0
 8004880:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004882:	2300      	movs	r3, #0
 8004884:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a5e      	ldr	r2, [pc, #376]	@ (8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d102      	bne.n	8004896 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004890:	4b5d      	ldr	r3, [pc, #372]	@ (8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	e001      	b.n	800489a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004896:	2300      	movs	r3, #0
 8004898:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10b      	bne.n	80048b8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048a4:	f043 0220 	orr.w	r2, r3, #32
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e0a0      	b.n	80049fa <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff ffb9 	bl	8004832 <LL_ADC_REG_IsConversionOngoing>
 80048c0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7ff ffb2 	bl	8004832 <LL_ADC_REG_IsConversionOngoing>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f040 8081 	bne.w	80049d8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80048d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d17c      	bne.n	80049d8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a48      	ldr	r2, [pc, #288]	@ (8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d004      	beq.n	80048f2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a46      	ldr	r2, [pc, #280]	@ (8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d101      	bne.n	80048f6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80048f2:	4b46      	ldr	r3, [pc, #280]	@ (8004a0c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80048f4:	e000      	b.n	80048f8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80048f6:	4b46      	ldr	r3, [pc, #280]	@ (8004a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80048f8:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d039      	beq.n	8004976 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004902:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	431a      	orrs	r2, r3
 8004910:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004912:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a3a      	ldr	r2, [pc, #232]	@ (8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d004      	beq.n	8004928 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a39      	ldr	r2, [pc, #228]	@ (8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d10e      	bne.n	8004946 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004928:	4836      	ldr	r0, [pc, #216]	@ (8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800492a:	f7ff ff6f 	bl	800480c <LL_ADC_IsEnabled>
 800492e:	4604      	mov	r4, r0
 8004930:	4835      	ldr	r0, [pc, #212]	@ (8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004932:	f7ff ff6b 	bl	800480c <LL_ADC_IsEnabled>
 8004936:	4603      	mov	r3, r0
 8004938:	4323      	orrs	r3, r4
 800493a:	2b00      	cmp	r3, #0
 800493c:	bf0c      	ite	eq
 800493e:	2301      	moveq	r3, #1
 8004940:	2300      	movne	r3, #0
 8004942:	b2db      	uxtb	r3, r3
 8004944:	e008      	b.n	8004958 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004946:	4833      	ldr	r0, [pc, #204]	@ (8004a14 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004948:	f7ff ff60 	bl	800480c <LL_ADC_IsEnabled>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	bf0c      	ite	eq
 8004952:	2301      	moveq	r3, #1
 8004954:	2300      	movne	r3, #0
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	d047      	beq.n	80049ec <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800495c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	4b2d      	ldr	r3, [pc, #180]	@ (8004a18 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004962:	4013      	ands	r3, r2
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	6811      	ldr	r1, [r2, #0]
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	6892      	ldr	r2, [r2, #8]
 800496c:	430a      	orrs	r2, r1
 800496e:	431a      	orrs	r2, r3
 8004970:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004972:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004974:	e03a      	b.n	80049ec <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004976:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800497e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004980:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a1f      	ldr	r2, [pc, #124]	@ (8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d004      	beq.n	8004996 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a1d      	ldr	r2, [pc, #116]	@ (8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d10e      	bne.n	80049b4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004996:	481b      	ldr	r0, [pc, #108]	@ (8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004998:	f7ff ff38 	bl	800480c <LL_ADC_IsEnabled>
 800499c:	4604      	mov	r4, r0
 800499e:	481a      	ldr	r0, [pc, #104]	@ (8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049a0:	f7ff ff34 	bl	800480c <LL_ADC_IsEnabled>
 80049a4:	4603      	mov	r3, r0
 80049a6:	4323      	orrs	r3, r4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	bf0c      	ite	eq
 80049ac:	2301      	moveq	r3, #1
 80049ae:	2300      	movne	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	e008      	b.n	80049c6 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80049b4:	4817      	ldr	r0, [pc, #92]	@ (8004a14 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80049b6:	f7ff ff29 	bl	800480c <LL_ADC_IsEnabled>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	bf0c      	ite	eq
 80049c0:	2301      	moveq	r3, #1
 80049c2:	2300      	movne	r3, #0
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d010      	beq.n	80049ec <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80049ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	4b12      	ldr	r3, [pc, #72]	@ (8004a18 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80049d4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049d6:	e009      	b.n	80049ec <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049dc:	f043 0220 	orr.w	r2, r3, #32
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80049ea:	e000      	b.n	80049ee <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049ec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80049f6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	378c      	adds	r7, #140	@ 0x8c
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd90      	pop	{r4, r7, pc}
 8004a02:	bf00      	nop
 8004a04:	40022000 	.word	0x40022000
 8004a08:	40022100 	.word	0x40022100
 8004a0c:	40022300 	.word	0x40022300
 8004a10:	58026300 	.word	0x58026300
 8004a14:	58026000 	.word	0x58026000
 8004a18:	fffff0e0 	.word	0xfffff0e0

08004a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a5c <__NVIC_SetPriorityGrouping+0x40>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a38:	4013      	ands	r3, r2
 8004a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004a44:	4b06      	ldr	r3, [pc, #24]	@ (8004a60 <__NVIC_SetPriorityGrouping+0x44>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a4a:	4a04      	ldr	r2, [pc, #16]	@ (8004a5c <__NVIC_SetPriorityGrouping+0x40>)
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	60d3      	str	r3, [r2, #12]
}
 8004a50:	bf00      	nop
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	e000ed00 	.word	0xe000ed00
 8004a60:	05fa0000 	.word	0x05fa0000

08004a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a68:	4b04      	ldr	r3, [pc, #16]	@ (8004a7c <__NVIC_GetPriorityGrouping+0x18>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	0a1b      	lsrs	r3, r3, #8
 8004a6e:	f003 0307 	and.w	r3, r3, #7
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	e000ed00 	.word	0xe000ed00

08004a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	4603      	mov	r3, r0
 8004a88:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	db0b      	blt.n	8004aaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a92:	88fb      	ldrh	r3, [r7, #6]
 8004a94:	f003 021f 	and.w	r2, r3, #31
 8004a98:	4907      	ldr	r1, [pc, #28]	@ (8004ab8 <__NVIC_EnableIRQ+0x38>)
 8004a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a9e:	095b      	lsrs	r3, r3, #5
 8004aa0:	2001      	movs	r0, #1
 8004aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8004aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	e000e100 	.word	0xe000e100

08004abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	6039      	str	r1, [r7, #0]
 8004ac6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ac8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	db0a      	blt.n	8004ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	490c      	ldr	r1, [pc, #48]	@ (8004b08 <__NVIC_SetPriority+0x4c>)
 8004ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ada:	0112      	lsls	r2, r2, #4
 8004adc:	b2d2      	uxtb	r2, r2
 8004ade:	440b      	add	r3, r1
 8004ae0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ae4:	e00a      	b.n	8004afc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	4908      	ldr	r1, [pc, #32]	@ (8004b0c <__NVIC_SetPriority+0x50>)
 8004aec:	88fb      	ldrh	r3, [r7, #6]
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	3b04      	subs	r3, #4
 8004af4:	0112      	lsls	r2, r2, #4
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	440b      	add	r3, r1
 8004afa:	761a      	strb	r2, [r3, #24]
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	e000e100 	.word	0xe000e100
 8004b0c:	e000ed00 	.word	0xe000ed00

08004b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b089      	sub	sp, #36	@ 0x24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f003 0307 	and.w	r3, r3, #7
 8004b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f1c3 0307 	rsb	r3, r3, #7
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	bf28      	it	cs
 8004b2e:	2304      	movcs	r3, #4
 8004b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	3304      	adds	r3, #4
 8004b36:	2b06      	cmp	r3, #6
 8004b38:	d902      	bls.n	8004b40 <NVIC_EncodePriority+0x30>
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	3b03      	subs	r3, #3
 8004b3e:	e000      	b.n	8004b42 <NVIC_EncodePriority+0x32>
 8004b40:	2300      	movs	r3, #0
 8004b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b44:	f04f 32ff 	mov.w	r2, #4294967295
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4e:	43da      	mvns	r2, r3
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	401a      	ands	r2, r3
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b58:	f04f 31ff 	mov.w	r1, #4294967295
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b62:	43d9      	mvns	r1, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b68:	4313      	orrs	r3, r2
         );
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3724      	adds	r7, #36	@ 0x24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
	...

08004b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b88:	d301      	bcc.n	8004b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e00f      	b.n	8004bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8004bb8 <SysTick_Config+0x40>)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b96:	210f      	movs	r1, #15
 8004b98:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9c:	f7ff ff8e 	bl	8004abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ba0:	4b05      	ldr	r3, [pc, #20]	@ (8004bb8 <SysTick_Config+0x40>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ba6:	4b04      	ldr	r3, [pc, #16]	@ (8004bb8 <SysTick_Config+0x40>)
 8004ba8:	2207      	movs	r2, #7
 8004baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	e000e010 	.word	0xe000e010

08004bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f7ff ff29 	bl	8004a1c <__NVIC_SetPriorityGrouping>
}
 8004bca:	bf00      	nop
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b086      	sub	sp, #24
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	4603      	mov	r3, r0
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	607a      	str	r2, [r7, #4]
 8004bde:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004be0:	f7ff ff40 	bl	8004a64 <__NVIC_GetPriorityGrouping>
 8004be4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	68b9      	ldr	r1, [r7, #8]
 8004bea:	6978      	ldr	r0, [r7, #20]
 8004bec:	f7ff ff90 	bl	8004b10 <NVIC_EncodePriority>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff ff5f 	bl	8004abc <__NVIC_SetPriority>
}
 8004bfe:	bf00      	nop
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b082      	sub	sp, #8
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff ff33 	bl	8004a80 <__NVIC_EnableIRQ>
}
 8004c1a:	bf00      	nop
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b082      	sub	sp, #8
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7ff ffa4 	bl	8004b78 <SysTick_Config>
 8004c30:	4603      	mov	r3, r0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
	...

08004c3c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b098      	sub	sp, #96	@ 0x60
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004c44:	4a84      	ldr	r2, [pc, #528]	@ (8004e58 <HAL_FDCAN_Init+0x21c>)
 8004c46:	f107 030c 	add.w	r3, r7, #12
 8004c4a:	4611      	mov	r1, r2
 8004c4c:	224c      	movs	r2, #76	@ 0x4c
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f006 f9fc 	bl	800b04c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e1c6      	b.n	8004fec <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a7e      	ldr	r2, [pc, #504]	@ (8004e5c <HAL_FDCAN_Init+0x220>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d106      	bne.n	8004c76 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004c70:	461a      	mov	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d106      	bne.n	8004c90 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7fd fc46 	bl	800251c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699a      	ldr	r2, [r3, #24]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0210 	bic.w	r2, r2, #16
 8004c9e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ca0:	f7fd ff12 	bl	8002ac8 <HAL_GetTick>
 8004ca4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004ca6:	e014      	b.n	8004cd2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004ca8:	f7fd ff0e 	bl	8002ac8 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b0a      	cmp	r3, #10
 8004cb4:	d90d      	bls.n	8004cd2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cbc:	f043 0201 	orr.w	r2, r3, #1
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2203      	movs	r2, #3
 8004cca:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e18c      	b.n	8004fec <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	f003 0308 	and.w	r3, r3, #8
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d0e3      	beq.n	8004ca8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699a      	ldr	r2, [r3, #24]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f042 0201 	orr.w	r2, r2, #1
 8004cee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cf0:	f7fd feea 	bl	8002ac8 <HAL_GetTick>
 8004cf4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004cf6:	e014      	b.n	8004d22 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004cf8:	f7fd fee6 	bl	8002ac8 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b0a      	cmp	r3, #10
 8004d04:	d90d      	bls.n	8004d22 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d0c:	f043 0201 	orr.w	r2, r3, #1
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2203      	movs	r2, #3
 8004d1a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e164      	b.n	8004fec <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0e3      	beq.n	8004cf8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	699a      	ldr	r2, [r3, #24]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0202 	orr.w	r2, r2, #2
 8004d3e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	7c1b      	ldrb	r3, [r3, #16]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d108      	bne.n	8004d5a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d56:	619a      	str	r2, [r3, #24]
 8004d58:	e007      	b.n	8004d6a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	699a      	ldr	r2, [r3, #24]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d68:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	7c5b      	ldrb	r3, [r3, #17]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d108      	bne.n	8004d84 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	699a      	ldr	r2, [r3, #24]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d80:	619a      	str	r2, [r3, #24]
 8004d82:	e007      	b.n	8004d94 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699a      	ldr	r2, [r3, #24]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004d92:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	7c9b      	ldrb	r3, [r3, #18]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d108      	bne.n	8004dae <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	699a      	ldr	r2, [r3, #24]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004daa:	619a      	str	r2, [r3, #24]
 8004dac:	e007      	b.n	8004dbe <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	699a      	ldr	r2, [r3, #24]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004dbc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699a      	ldr	r2, [r3, #24]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004de2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	691a      	ldr	r2, [r3, #16]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0210 	bic.w	r2, r2, #16
 8004df2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d108      	bne.n	8004e0e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699a      	ldr	r2, [r3, #24]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0204 	orr.w	r2, r2, #4
 8004e0a:	619a      	str	r2, [r3, #24]
 8004e0c:	e030      	b.n	8004e70 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d02c      	beq.n	8004e70 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d020      	beq.n	8004e60 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	699a      	ldr	r2, [r3, #24]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004e2c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f042 0210 	orr.w	r2, r2, #16
 8004e3c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d114      	bne.n	8004e70 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	699a      	ldr	r2, [r3, #24]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f042 0220 	orr.w	r2, r2, #32
 8004e54:	619a      	str	r2, [r3, #24]
 8004e56:	e00b      	b.n	8004e70 <HAL_FDCAN_Init+0x234>
 8004e58:	0800bc08 	.word	0x0800bc08
 8004e5c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	699a      	ldr	r2, [r3, #24]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0220 	orr.w	r2, r2, #32
 8004e6e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	3b01      	subs	r3, #1
 8004e76:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004e80:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004e88:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	3b01      	subs	r3, #1
 8004e92:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004e98:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004e9a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ea4:	d115      	bne.n	8004ed2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eaa:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004eb4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004ebe:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004ece:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004ed0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00a      	beq.n	8004ef0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ef8:	4413      	add	r3, r2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d011      	beq.n	8004f22 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004f06:	f023 0107 	bic.w	r1, r3, #7
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	3360      	adds	r3, #96	@ 0x60
 8004f12:	443b      	add	r3, r7
 8004f14:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d011      	beq.n	8004f4e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004f32:	f023 0107 	bic.w	r1, r3, #7
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	3360      	adds	r3, #96	@ 0x60
 8004f3e:	443b      	add	r3, r7
 8004f40:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d012      	beq.n	8004f7c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004f5e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	3360      	adds	r3, #96	@ 0x60
 8004f6a:	443b      	add	r3, r7
 8004f6c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004f70:	011a      	lsls	r2, r3, #4
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d012      	beq.n	8004faa <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004f8c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	3360      	adds	r3, #96	@ 0x60
 8004f98:	443b      	add	r3, r7
 8004f9a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004f9e:	021a      	lsls	r2, r3, #8
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a11      	ldr	r2, [pc, #68]	@ (8004ff4 <HAL_FDCAN_Init+0x3b8>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d107      	bne.n	8004fc4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f022 0203 	bic.w	r2, r2, #3
 8004fc2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 fdf7 	bl	8005bd0 <FDCAN_CalcultateRamBlockAddresses>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8004fe8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3760      	adds	r7, #96	@ 0x60
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	4000a000 	.word	0x4000a000

08004ff8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005008:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800500a:	7bfb      	ldrb	r3, [r7, #15]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d002      	beq.n	8005016 <HAL_FDCAN_ConfigFilter+0x1e>
 8005010:	7bfb      	ldrb	r3, [r7, #15]
 8005012:	2b02      	cmp	r3, #2
 8005014:	d157      	bne.n	80050c6 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d12b      	bne.n	8005076 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	2b07      	cmp	r3, #7
 8005024:	d10d      	bne.n	8005042 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	69db      	ldr	r3, [r3, #28]
 8005030:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8005032:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005038:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800503a:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	e00e      	b.n	8005060 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800504e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8005056:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800505c:	4313      	orrs	r3, r2
 800505e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	e025      	b.n	80050c2 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	075a      	lsls	r2, r3, #29
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	4313      	orrs	r3, r2
 8005082:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	2b07      	cmp	r3, #7
 800508a:	d103      	bne.n	8005094 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	613b      	str	r3, [r7, #16]
 8005092:	e006      	b.n	80050a2 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	079a      	lsls	r2, r3, #30
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	4313      	orrs	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	4413      	add	r3, r2
 80050ae:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	3304      	adds	r3, #4
 80050ba:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80050c2:	2300      	movs	r3, #0
 80050c4:	e008      	b.n	80050d8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050cc:	f043 0202 	orr.w	r2, r3, #2
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
  }
}
 80050d8:	4618      	mov	r0, r3
 80050da:	371c      	adds	r7, #28
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d111      	bne.n	800511c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699a      	ldr	r2, [r3, #24]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0201 	bic.w	r2, r2, #1
 800510e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8005118:	2300      	movs	r3, #0
 800511a:	e008      	b.n	800512e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005122:	f043 0204 	orr.w	r2, r3, #4
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
  }
}
 800512e:	4618      	mov	r0, r3
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b086      	sub	sp, #24
 800513e:	af00      	add	r7, sp, #0
 8005140:	60f8      	str	r0, [r7, #12]
 8005142:	60b9      	str	r1, [r7, #8]
 8005144:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d141      	bne.n	80051d6 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800515a:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d109      	bne.n	8005176 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005168:	f043 0220 	orr.w	r2, r3, #32
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e038      	b.n	80051e8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800517e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d009      	beq.n	800519a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800518c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e026      	b.n	80051e8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80051a2:	0c1b      	lsrs	r3, r3, #16
 80051a4:	f003 031f 	and.w	r3, r3, #31
 80051a8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	68b9      	ldr	r1, [r7, #8]
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 fe93 	bl	8005edc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2101      	movs	r1, #1
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	fa01 f202 	lsl.w	r2, r1, r2
 80051c2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80051c6:	2201      	movs	r2, #1
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	409a      	lsls	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 80051d2:	2300      	movs	r3, #0
 80051d4:	e008      	b.n	80051e8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051dc:	f043 0208 	orr.w	r2, r3, #8
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
  }
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3718      	adds	r7, #24
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b08b      	sub	sp, #44	@ 0x2c
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
 80051fc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80051fe:	2300      	movs	r3, #0
 8005200:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005208:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800520a:	7efb      	ldrb	r3, [r7, #27]
 800520c:	2b02      	cmp	r3, #2
 800520e:	f040 8149 	bne.w	80054a4 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2b40      	cmp	r3, #64	@ 0x40
 8005216:	d14c      	bne.n	80052b2 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005220:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d109      	bne.n	800523c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800522e:	f043 0220 	orr.w	r2, r3, #32
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e13c      	b.n	80054b6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005244:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005248:	2b00      	cmp	r3, #0
 800524a:	d109      	bne.n	8005260 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005252:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e12a      	b.n	80054b6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005268:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800526c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005270:	d10a      	bne.n	8005288 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800527a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800527e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005282:	d101      	bne.n	8005288 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005284:	2301      	movs	r3, #1
 8005286:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005290:	0a1b      	lsrs	r3, r3, #8
 8005292:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005296:	69fa      	ldr	r2, [r7, #28]
 8005298:	4413      	add	r3, r2
 800529a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a4:	69f9      	ldr	r1, [r7, #28]
 80052a6:	fb01 f303 	mul.w	r3, r1, r3
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80052b0:	e068      	b.n	8005384 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2b41      	cmp	r3, #65	@ 0x41
 80052b6:	d14c      	bne.n	8005352 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80052c0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d109      	bne.n	80052dc <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052ce:	f043 0220 	orr.w	r2, r3, #32
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e0ec      	b.n	80054b6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80052e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d109      	bne.n	8005300 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e0da      	b.n	80054b6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005308:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800530c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005310:	d10a      	bne.n	8005328 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800531a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800531e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005322:	d101      	bne.n	8005328 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005324:	2301      	movs	r3, #1
 8005326:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005330:	0a1b      	lsrs	r3, r3, #8
 8005332:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005336:	69fa      	ldr	r2, [r7, #28]
 8005338:	4413      	add	r3, r2
 800533a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005344:	69f9      	ldr	r1, [r7, #28]
 8005346:	fb01 f303 	mul.w	r3, r1, r3
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4413      	add	r3, r2
 800534e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005350:	e018      	b.n	8005384 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	429a      	cmp	r2, r3
 800535a:	d309      	bcc.n	8005370 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005362:	f043 0220 	orr.w	r2, r3, #32
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e0a2      	b.n	80054b6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005378:	68b9      	ldr	r1, [r7, #8]
 800537a:	fb01 f303 	mul.w	r3, r1, r3
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d107      	bne.n	80053a8 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	0c9b      	lsrs	r3, r3, #18
 800539e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	e005      	b.n	80053b4 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80053a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80053b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80053c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80053cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ce:	3304      	adds	r3, #4
 80053d0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80053d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80053dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	0c1b      	lsrs	r3, r3, #16
 80053e2:	f003 020f 	and.w	r2, r3, #15
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80053ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80053f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	0e1b      	lsrs	r3, r3, #24
 8005408:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	0fda      	lsrs	r2, r3, #31
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800541a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541c:	3304      	adds	r3, #4
 800541e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005422:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005424:	2300      	movs	r3, #0
 8005426:	623b      	str	r3, [r7, #32]
 8005428:	e00a      	b.n	8005440 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	441a      	add	r2, r3
 8005430:	6839      	ldr	r1, [r7, #0]
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	440b      	add	r3, r1
 8005436:	7812      	ldrb	r2, [r2, #0]
 8005438:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	3301      	adds	r3, #1
 800543e:	623b      	str	r3, [r7, #32]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	4a1f      	ldr	r2, [pc, #124]	@ (80054c4 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8005446:	5cd3      	ldrb	r3, [r2, r3]
 8005448:	461a      	mov	r2, r3
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	4293      	cmp	r3, r2
 800544e:	d3ec      	bcc.n	800542a <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2b40      	cmp	r3, #64	@ 0x40
 8005454:	d105      	bne.n	8005462 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69fa      	ldr	r2, [r7, #28]
 800545c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8005460:	e01e      	b.n	80054a0 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2b41      	cmp	r3, #65	@ 0x41
 8005466:	d105      	bne.n	8005474 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	69fa      	ldr	r2, [r7, #28]
 800546e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8005472:	e015      	b.n	80054a0 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2b1f      	cmp	r3, #31
 8005478:	d808      	bhi.n	800548c <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2101      	movs	r1, #1
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	fa01 f202 	lsl.w	r2, r1, r2
 8005486:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800548a:	e009      	b.n	80054a0 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f003 021f 	and.w	r2, r3, #31
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2101      	movs	r1, #1
 8005498:	fa01 f202 	lsl.w	r2, r1, r2
 800549c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80054a0:	2300      	movs	r3, #0
 80054a2:	e008      	b.n	80054b6 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054aa:	f043 0208 	orr.w	r2, r3, #8
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
  }
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	372c      	adds	r7, #44	@ 0x2c
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	0800bc64 	.word	0x0800bc64

080054c8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b087      	sub	sp, #28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80054da:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80054dc:	7dfb      	ldrb	r3, [r7, #23]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d002      	beq.n	80054e8 <HAL_FDCAN_ActivateNotification+0x20>
 80054e2:	7dfb      	ldrb	r3, [r7, #23]
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d155      	bne.n	8005594 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	4013      	ands	r3, r2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d108      	bne.n	8005508 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f042 0201 	orr.w	r2, r2, #1
 8005504:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005506:	e014      	b.n	8005532 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	4013      	ands	r3, r2
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	429a      	cmp	r2, r3
 8005516:	d108      	bne.n	800552a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0202 	orr.w	r2, r2, #2
 8005526:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005528:	e003      	b.n	8005532 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2203      	movs	r2, #3
 8005530:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005538:	2b00      	cmp	r3, #0
 800553a:	d009      	beq.n	8005550 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	430a      	orrs	r2, r1
 800554c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005556:	2b00      	cmp	r3, #0
 8005558:	d009      	beq.n	800556e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	430a      	orrs	r2, r1
 800556a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	4b0f      	ldr	r3, [pc, #60]	@ (80055b4 <HAL_FDCAN_ActivateNotification+0xec>)
 8005578:	4013      	ands	r3, r2
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	6812      	ldr	r2, [r2, #0]
 800557e:	430b      	orrs	r3, r1
 8005580:	6553      	str	r3, [r2, #84]	@ 0x54
 8005582:	4b0d      	ldr	r3, [pc, #52]	@ (80055b8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005584:	695a      	ldr	r2, [r3, #20]
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	0f9b      	lsrs	r3, r3, #30
 800558a:	490b      	ldr	r1, [pc, #44]	@ (80055b8 <HAL_FDCAN_ActivateNotification+0xf0>)
 800558c:	4313      	orrs	r3, r2
 800558e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8005590:	2300      	movs	r3, #0
 8005592:	e008      	b.n	80055a6 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800559a:	f043 0202 	orr.w	r2, r3, #2
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
  }
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	371c      	adds	r7, #28
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	3fcfffff 	.word	0x3fcfffff
 80055b8:	4000a800 	.word	0x4000a800

080055bc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b096      	sub	sp, #88	@ 0x58
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80055c4:	4b9a      	ldr	r3, [pc, #616]	@ (8005830 <HAL_FDCAN_IRQHandler+0x274>)
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	079b      	lsls	r3, r3, #30
 80055ca:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80055cc:	4b98      	ldr	r3, [pc, #608]	@ (8005830 <HAL_FDCAN_IRQHandler+0x274>)
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	079b      	lsls	r3, r3, #30
 80055d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80055d4:	4013      	ands	r3, r2
 80055d6:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055de:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80055e2:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80055ec:	4013      	ands	r3, r2
 80055ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055f6:	f003 030f 	and.w	r3, r3, #15
 80055fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005602:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005604:	4013      	ands	r3, r2
 8005606:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800560e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005612:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800561a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800561c:	4013      	ands	r3, r2
 800561e:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005626:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 800562a:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005632:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005634:	4013      	ands	r3, r2
 8005636:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800563e:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8005642:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800564a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800564c:	4013      	ands	r3, r2
 800564e:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800565e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005662:	0a1b      	lsrs	r3, r3, #8
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	2b00      	cmp	r3, #0
 800566a:	d010      	beq.n	800568e <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800566c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800566e:	0a1b      	lsrs	r3, r3, #8
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00a      	beq.n	800568e <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005680:	651a      	str	r2, [r3, #80]	@ 0x50
 8005682:	4b6b      	ldr	r3, [pc, #428]	@ (8005830 <HAL_FDCAN_IRQHandler+0x274>)
 8005684:	2200      	movs	r2, #0
 8005686:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fa54 	bl	8005b36 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800568e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005690:	0a9b      	lsrs	r3, r3, #10
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d01d      	beq.n	80056d6 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800569a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800569c:	0a9b      	lsrs	r3, r3, #10
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d017      	beq.n	80056d6 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80056ae:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056ba:	4013      	ands	r3, r2
 80056bc:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80056c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80056c8:	4b59      	ldr	r3, [pc, #356]	@ (8005830 <HAL_FDCAN_IRQHandler+0x274>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80056ce:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 fa07 	bl	8005ae4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80056d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00d      	beq.n	80056f8 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056e2:	4b54      	ldr	r3, [pc, #336]	@ (8005834 <HAL_FDCAN_IRQHandler+0x278>)
 80056e4:	400b      	ands	r3, r1
 80056e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80056e8:	4a51      	ldr	r2, [pc, #324]	@ (8005830 <HAL_FDCAN_IRQHandler+0x274>)
 80056ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056ec:	0f9b      	lsrs	r3, r3, #30
 80056ee:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80056f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f9c0 	bl	8005a78 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80056f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00d      	beq.n	800571a <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005704:	4b4b      	ldr	r3, [pc, #300]	@ (8005834 <HAL_FDCAN_IRQHandler+0x278>)
 8005706:	400b      	ands	r3, r1
 8005708:	6513      	str	r3, [r2, #80]	@ 0x50
 800570a:	4a49      	ldr	r2, [pc, #292]	@ (8005830 <HAL_FDCAN_IRQHandler+0x274>)
 800570c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800570e:	0f9b      	lsrs	r3, r3, #30
 8005710:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005712:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f9ba 	bl	8005a8e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800571a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00d      	beq.n	800573c <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005726:	4b43      	ldr	r3, [pc, #268]	@ (8005834 <HAL_FDCAN_IRQHandler+0x278>)
 8005728:	400b      	ands	r3, r1
 800572a:	6513      	str	r3, [r2, #80]	@ 0x50
 800572c:	4a40      	ldr	r2, [pc, #256]	@ (8005830 <HAL_FDCAN_IRQHandler+0x274>)
 800572e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005730:	0f9b      	lsrs	r3, r3, #30
 8005732:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005734:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7fc fa28 	bl	8001b8c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800573c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00d      	beq.n	800575e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005748:	4b3a      	ldr	r3, [pc, #232]	@ (8005834 <HAL_FDCAN_IRQHandler+0x278>)
 800574a:	400b      	ands	r3, r1
 800574c:	6513      	str	r3, [r2, #80]	@ 0x50
 800574e:	4a38      	ldr	r2, [pc, #224]	@ (8005830 <HAL_FDCAN_IRQHandler+0x274>)
 8005750:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005752:	0f9b      	lsrs	r3, r3, #30
 8005754:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005756:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f9a3 	bl	8005aa4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800575e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005760:	0adb      	lsrs	r3, r3, #11
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d010      	beq.n	800578c <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800576a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800576c:	0adb      	lsrs	r3, r3, #11
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00a      	beq.n	800578c <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800577e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005780:	4b2b      	ldr	r3, [pc, #172]	@ (8005830 <HAL_FDCAN_IRQHandler+0x274>)
 8005782:	2200      	movs	r2, #0
 8005784:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f997 	bl	8005aba <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 800578c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800578e:	0a5b      	lsrs	r3, r3, #9
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b00      	cmp	r3, #0
 8005796:	d01d      	beq.n	80057d4 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800579a:	0a5b      	lsrs	r3, r3, #9
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d017      	beq.n	80057d4 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80057ac:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80057b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057b8:	4013      	ands	r3, r2
 80057ba:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057c4:	651a      	str	r2, [r3, #80]	@ 0x50
 80057c6:	4b1a      	ldr	r3, [pc, #104]	@ (8005830 <HAL_FDCAN_IRQHandler+0x274>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80057cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f97d 	bl	8005ace <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80057d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057d6:	0cdb      	lsrs	r3, r3, #19
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d010      	beq.n	8005802 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80057e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e2:	0cdb      	lsrs	r3, r3, #19
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00a      	beq.n	8005802 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80057f4:	651a      	str	r2, [r3, #80]	@ 0x50
 80057f6:	4b0e      	ldr	r3, [pc, #56]	@ (8005830 <HAL_FDCAN_IRQHandler+0x274>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 f97c 	bl	8005afa <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005804:	0c1b      	lsrs	r3, r3, #16
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	2b00      	cmp	r3, #0
 800580c:	d016      	beq.n	800583c <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800580e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005810:	0c1b      	lsrs	r3, r3, #16
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d010      	beq.n	800583c <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005822:	651a      	str	r2, [r3, #80]	@ 0x50
 8005824:	4b02      	ldr	r3, [pc, #8]	@ (8005830 <HAL_FDCAN_IRQHandler+0x274>)
 8005826:	2200      	movs	r2, #0
 8005828:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	e004      	b.n	8005838 <HAL_FDCAN_IRQHandler+0x27c>
 800582e:	bf00      	nop
 8005830:	4000a800 	.word	0x4000a800
 8005834:	3fcfffff 	.word	0x3fcfffff
 8005838:	f000 f969 	bl	8005b0e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800583c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800583e:	0c9b      	lsrs	r3, r3, #18
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b00      	cmp	r3, #0
 8005846:	d010      	beq.n	800586a <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800584a:	0c9b      	lsrs	r3, r3, #18
 800584c:	f003 0301 	and.w	r3, r3, #1
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00a      	beq.n	800586a <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800585c:	651a      	str	r2, [r3, #80]	@ 0x50
 800585e:	4b83      	ldr	r3, [pc, #524]	@ (8005a6c <HAL_FDCAN_IRQHandler+0x4b0>)
 8005860:	2200      	movs	r2, #0
 8005862:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f95c 	bl	8005b22 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800586a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800586c:	0c5b      	lsrs	r3, r3, #17
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d015      	beq.n	80058a2 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005878:	0c5b      	lsrs	r3, r3, #17
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00f      	beq.n	80058a2 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800588a:	651a      	str	r2, [r3, #80]	@ 0x50
 800588c:	4b77      	ldr	r3, [pc, #476]	@ (8005a6c <HAL_FDCAN_IRQHandler+0x4b0>)
 800588e:	2200      	movs	r2, #0
 8005890:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005898:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80058a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00d      	beq.n	80058c4 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058ae:	4b70      	ldr	r3, [pc, #448]	@ (8005a70 <HAL_FDCAN_IRQHandler+0x4b4>)
 80058b0:	400b      	ands	r3, r1
 80058b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80058b4:	4a6d      	ldr	r2, [pc, #436]	@ (8005a6c <HAL_FDCAN_IRQHandler+0x4b0>)
 80058b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058b8:	0f9b      	lsrs	r3, r3, #30
 80058ba:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80058bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f94d 	bl	8005b5e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80058c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d011      	beq.n	80058ee <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80058d0:	4b67      	ldr	r3, [pc, #412]	@ (8005a70 <HAL_FDCAN_IRQHandler+0x4b4>)
 80058d2:	400b      	ands	r3, r1
 80058d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80058d6:	4a65      	ldr	r2, [pc, #404]	@ (8005a6c <HAL_FDCAN_IRQHandler+0x4b0>)
 80058d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058da:	0f9b      	lsrs	r3, r3, #30
 80058dc:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80058e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058e6:	431a      	orrs	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a60      	ldr	r2, [pc, #384]	@ (8005a74 <HAL_FDCAN_IRQHandler+0x4b8>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	f040 80ac 	bne.w	8005a52 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f003 0303 	and.w	r3, r3, #3
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 80a4 	beq.w	8005a52 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	f003 030f 	and.w	r3, r3, #15
 8005914:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800591e:	4013      	ands	r3, r2
 8005920:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800592c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005934:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005936:	4013      	ands	r3, r2
 8005938:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005944:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800594e:	4013      	ands	r3, r2
 8005950:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 800595c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005964:	6a3a      	ldr	r2, [r7, #32]
 8005966:	4013      	ands	r3, r2
 8005968:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	6a1b      	ldr	r3, [r3, #32]
 8005970:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8005974:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800597c:	69fa      	ldr	r2, [r7, #28]
 800597e:	4013      	ands	r3, r2
 8005980:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005988:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	6a1b      	ldr	r3, [r3, #32]
 8005990:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005994:	2b00      	cmp	r3, #0
 8005996:	d007      	beq.n	80059a8 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800599e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80059a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f8e6 	bl	8005b74 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80059a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d007      	beq.n	80059be <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059b4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80059b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f8e6 	bl	8005b8a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	099b      	lsrs	r3, r3, #6
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d01a      	beq.n	8005a00 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	099b      	lsrs	r3, r3, #6
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d014      	beq.n	8005a00 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059dc:	0c1b      	lsrs	r3, r3, #16
 80059de:	b29b      	uxth	r3, r3
 80059e0:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059ec:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	2240      	movs	r2, #64	@ 0x40
 80059f4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	6939      	ldr	r1, [r7, #16]
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f8d0 	bl	8005ba0 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d007      	beq.n	8005a16 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a0c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005a0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f8d1 	bl	8005bb8 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005a16:	6a3b      	ldr	r3, [r7, #32]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00b      	beq.n	8005a34 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	6a3a      	ldr	r2, [r7, #32]
 8005a22:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00b      	beq.n	8005a52 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	69fa      	ldr	r2, [r7, #28]
 8005a40:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f874 	bl	8005b4a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005a62:	bf00      	nop
 8005a64:	3758      	adds	r7, #88	@ 0x58
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	4000a800 	.word	0x4000a800
 8005a70:	3fcfffff 	.word	0x3fcfffff
 8005a74:	4000a000 	.word	0x4000a000

08005a78 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005a82:	bf00      	nop
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
 8005a96:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b083      	sub	sp, #12
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005ac2:	bf00      	nop
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b083      	sub	sp, #12
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005aee:	bf00      	nop
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005b02:	bf00      	nop
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b083      	sub	sp, #12
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005b16:	bf00      	nop
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005b2a:	bf00      	nop
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b083      	sub	sp, #12
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005b3e:	bf00      	nop
 8005b40:	370c      	adds	r7, #12
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b083      	sub	sp, #12
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005b52:	bf00      	nop
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b083      	sub	sp, #12
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8005b7e:	bf00      	nop
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005bac:	bf00      	nop
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
	...

08005bd0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bdc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005be6:	4ba7      	ldr	r3, [pc, #668]	@ (8005e84 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005be8:	4013      	ands	r3, r2
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	0091      	lsls	r1, r2, #2
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6812      	ldr	r2, [r2, #0]
 8005bf2:	430b      	orrs	r3, r1
 8005bf4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c00:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c08:	041a      	lsls	r2, r3, #16
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005c26:	4b97      	ldr	r3, [pc, #604]	@ (8005e84 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c28:	4013      	ands	r3, r2
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	0091      	lsls	r1, r2, #2
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	6812      	ldr	r2, [r2, #0]
 8005c32:	430b      	orrs	r3, r1
 8005c34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c40:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c48:	041a      	lsls	r2, r3, #16
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005c68:	4b86      	ldr	r3, [pc, #536]	@ (8005e84 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	0091      	lsls	r1, r2, #2
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6812      	ldr	r2, [r2, #0]
 8005c74:	430b      	orrs	r3, r1
 8005c76:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005c82:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8a:	041a      	lsls	r2, r3, #16
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005c9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005cb0:	4b74      	ldr	r3, [pc, #464]	@ (8005e84 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	0091      	lsls	r1, r2, #2
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	6812      	ldr	r2, [r2, #0]
 8005cbc:	430b      	orrs	r3, r1
 8005cbe:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005cca:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cd2:	041a      	lsls	r2, r3, #16
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005ce6:	fb02 f303 	mul.w	r3, r2, r3
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	4413      	add	r3, r2
 8005cee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005cf8:	4b62      	ldr	r3, [pc, #392]	@ (8005e84 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	0091      	lsls	r1, r2, #2
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6812      	ldr	r2, [r2, #0]
 8005d04:	430b      	orrs	r3, r1
 8005d06:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005d12:	fb02 f303 	mul.w	r3, r2, r3
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	4413      	add	r3, r2
 8005d1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005d24:	4b57      	ldr	r3, [pc, #348]	@ (8005e84 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d26:	4013      	ands	r3, r2
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	0091      	lsls	r1, r2, #2
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	6812      	ldr	r2, [r2, #0]
 8005d30:	430b      	orrs	r3, r1
 8005d32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d3e:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d46:	041a      	lsls	r2, r3, #16
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005d66:	4b47      	ldr	r3, [pc, #284]	@ (8005e84 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d68:	4013      	ands	r3, r2
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	0091      	lsls	r1, r2, #2
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6812      	ldr	r2, [r2, #0]
 8005d72:	430b      	orrs	r3, r1
 8005d74:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005d80:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d88:	041a      	lsls	r2, r3, #16
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005d9c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005da4:	061a      	lsls	r2, r3, #24
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005db4:	4b34      	ldr	r3, [pc, #208]	@ (8005e88 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005db6:	4413      	add	r3, r2
 8005db8:	009a      	lsls	r2, r3, #2
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	441a      	add	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	441a      	add	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de6:	6879      	ldr	r1, [r7, #4]
 8005de8:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8005dea:	fb01 f303 	mul.w	r3, r1, r3
 8005dee:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005df0:	441a      	add	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dfe:	6879      	ldr	r1, [r7, #4]
 8005e00:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8005e02:	fb01 f303 	mul.w	r3, r1, r3
 8005e06:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005e08:	441a      	add	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e16:	6879      	ldr	r1, [r7, #4]
 8005e18:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8005e1a:	fb01 f303 	mul.w	r3, r1, r3
 8005e1e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005e20:	441a      	add	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e32:	00db      	lsls	r3, r3, #3
 8005e34:	441a      	add	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e46:	6879      	ldr	r1, [r7, #4]
 8005e48:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005e4a:	fb01 f303 	mul.w	r3, r1, r3
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	441a      	add	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e62:	6879      	ldr	r1, [r7, #4]
 8005e64:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005e66:	fb01 f303 	mul.w	r3, r1, r3
 8005e6a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005e6c:	441a      	add	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e7a:	4a04      	ldr	r2, [pc, #16]	@ (8005e8c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d915      	bls.n	8005eac <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005e80:	e006      	b.n	8005e90 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005e82:	bf00      	nop
 8005e84:	ffff0003 	.word	0xffff0003
 8005e88:	10002b00 	.word	0x10002b00
 8005e8c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e96:	f043 0220 	orr.w	r2, r3, #32
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2203      	movs	r2, #3
 8005ea4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e010      	b.n	8005ece <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	e005      	b.n	8005ec0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d3f3      	bcc.n	8005eb4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop

08005edc <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b089      	sub	sp, #36	@ 0x24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10a      	bne.n	8005f08 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005efa:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005f02:	4313      	orrs	r3, r2
 8005f04:	61fb      	str	r3, [r7, #28]
 8005f06:	e00a      	b.n	8005f1e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005f10:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005f16:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005f18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f1c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005f28:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005f2e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005f34:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f4a:	6839      	ldr	r1, [r7, #0]
 8005f4c:	fb01 f303 	mul.w	r3, r1, r3
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	69fa      	ldr	r2, [r7, #28]
 8005f5a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	3304      	adds	r3, #4
 8005f6c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005f6e:	2300      	movs	r3, #0
 8005f70:	617b      	str	r3, [r7, #20]
 8005f72:	e020      	b.n	8005fb6 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	3303      	adds	r3, #3
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	3302      	adds	r3, #2
 8005f84:	6879      	ldr	r1, [r7, #4]
 8005f86:	440b      	add	r3, r1
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005f8c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	3301      	adds	r3, #1
 8005f92:	6879      	ldr	r1, [r7, #4]
 8005f94:	440b      	add	r3, r1
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005f9a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005f9c:	6879      	ldr	r1, [r7, #4]
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	440a      	add	r2, r1
 8005fa2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005fa4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	3304      	adds	r3, #4
 8005fae:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	617b      	str	r3, [r7, #20]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	4a06      	ldr	r2, [pc, #24]	@ (8005fd4 <FDCAN_CopyMessageToRAM+0xf8>)
 8005fbc:	5cd3      	ldrb	r3, [r2, r3]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d3d6      	bcc.n	8005f74 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8005fc6:	bf00      	nop
 8005fc8:	bf00      	nop
 8005fca:	3724      	adds	r7, #36	@ 0x24
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	0800bc64 	.word	0x0800bc64

08005fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b089      	sub	sp, #36	@ 0x24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005fe6:	4b86      	ldr	r3, [pc, #536]	@ (8006200 <HAL_GPIO_Init+0x228>)
 8005fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005fea:	e18c      	b.n	8006306 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f000 817e 	beq.w	8006300 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f003 0303 	and.w	r3, r3, #3
 800600c:	2b01      	cmp	r3, #1
 800600e:	d005      	beq.n	800601c <HAL_GPIO_Init+0x44>
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f003 0303 	and.w	r3, r3, #3
 8006018:	2b02      	cmp	r3, #2
 800601a:	d130      	bne.n	800607e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	005b      	lsls	r3, r3, #1
 8006026:	2203      	movs	r2, #3
 8006028:	fa02 f303 	lsl.w	r3, r2, r3
 800602c:	43db      	mvns	r3, r3
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	4013      	ands	r3, r2
 8006032:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	68da      	ldr	r2, [r3, #12]
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	fa02 f303 	lsl.w	r3, r2, r3
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	4313      	orrs	r3, r2
 8006044:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006052:	2201      	movs	r2, #1
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	fa02 f303 	lsl.w	r3, r2, r3
 800605a:	43db      	mvns	r3, r3
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	4013      	ands	r3, r2
 8006060:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	091b      	lsrs	r3, r3, #4
 8006068:	f003 0201 	and.w	r2, r3, #1
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	fa02 f303 	lsl.w	r3, r2, r3
 8006072:	69ba      	ldr	r2, [r7, #24]
 8006074:	4313      	orrs	r3, r2
 8006076:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	69ba      	ldr	r2, [r7, #24]
 800607c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f003 0303 	and.w	r3, r3, #3
 8006086:	2b03      	cmp	r3, #3
 8006088:	d017      	beq.n	80060ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	2203      	movs	r2, #3
 8006096:	fa02 f303 	lsl.w	r3, r2, r3
 800609a:	43db      	mvns	r3, r3
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	4013      	ands	r3, r2
 80060a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	689a      	ldr	r2, [r3, #8]
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	005b      	lsls	r3, r3, #1
 80060aa:	fa02 f303 	lsl.w	r3, r2, r3
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f003 0303 	and.w	r3, r3, #3
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d123      	bne.n	800610e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	08da      	lsrs	r2, r3, #3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	3208      	adds	r2, #8
 80060ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	f003 0307 	and.w	r3, r3, #7
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	220f      	movs	r2, #15
 80060de:	fa02 f303 	lsl.w	r3, r2, r3
 80060e2:	43db      	mvns	r3, r3
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	4013      	ands	r3, r2
 80060e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	691a      	ldr	r2, [r3, #16]
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	f003 0307 	and.w	r3, r3, #7
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	fa02 f303 	lsl.w	r3, r2, r3
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	08da      	lsrs	r2, r3, #3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	3208      	adds	r2, #8
 8006108:	69b9      	ldr	r1, [r7, #24]
 800610a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	005b      	lsls	r3, r3, #1
 8006118:	2203      	movs	r2, #3
 800611a:	fa02 f303 	lsl.w	r3, r2, r3
 800611e:	43db      	mvns	r3, r3
 8006120:	69ba      	ldr	r2, [r7, #24]
 8006122:	4013      	ands	r3, r2
 8006124:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f003 0203 	and.w	r2, r3, #3
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	005b      	lsls	r3, r3, #1
 8006132:	fa02 f303 	lsl.w	r3, r2, r3
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	4313      	orrs	r3, r2
 800613a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800614a:	2b00      	cmp	r3, #0
 800614c:	f000 80d8 	beq.w	8006300 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006150:	4b2c      	ldr	r3, [pc, #176]	@ (8006204 <HAL_GPIO_Init+0x22c>)
 8006152:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006156:	4a2b      	ldr	r2, [pc, #172]	@ (8006204 <HAL_GPIO_Init+0x22c>)
 8006158:	f043 0302 	orr.w	r3, r3, #2
 800615c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006160:	4b28      	ldr	r3, [pc, #160]	@ (8006204 <HAL_GPIO_Init+0x22c>)
 8006162:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006166:	f003 0302 	and.w	r3, r3, #2
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800616e:	4a26      	ldr	r2, [pc, #152]	@ (8006208 <HAL_GPIO_Init+0x230>)
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	089b      	lsrs	r3, r3, #2
 8006174:	3302      	adds	r3, #2
 8006176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800617a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	f003 0303 	and.w	r3, r3, #3
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	220f      	movs	r2, #15
 8006186:	fa02 f303 	lsl.w	r3, r2, r3
 800618a:	43db      	mvns	r3, r3
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	4013      	ands	r3, r2
 8006190:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a1d      	ldr	r2, [pc, #116]	@ (800620c <HAL_GPIO_Init+0x234>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d04a      	beq.n	8006230 <HAL_GPIO_Init+0x258>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a1c      	ldr	r2, [pc, #112]	@ (8006210 <HAL_GPIO_Init+0x238>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d02b      	beq.n	80061fa <HAL_GPIO_Init+0x222>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006214 <HAL_GPIO_Init+0x23c>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d025      	beq.n	80061f6 <HAL_GPIO_Init+0x21e>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a1a      	ldr	r2, [pc, #104]	@ (8006218 <HAL_GPIO_Init+0x240>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d01f      	beq.n	80061f2 <HAL_GPIO_Init+0x21a>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a19      	ldr	r2, [pc, #100]	@ (800621c <HAL_GPIO_Init+0x244>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d019      	beq.n	80061ee <HAL_GPIO_Init+0x216>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a18      	ldr	r2, [pc, #96]	@ (8006220 <HAL_GPIO_Init+0x248>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d013      	beq.n	80061ea <HAL_GPIO_Init+0x212>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a17      	ldr	r2, [pc, #92]	@ (8006224 <HAL_GPIO_Init+0x24c>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d00d      	beq.n	80061e6 <HAL_GPIO_Init+0x20e>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a16      	ldr	r2, [pc, #88]	@ (8006228 <HAL_GPIO_Init+0x250>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d007      	beq.n	80061e2 <HAL_GPIO_Init+0x20a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a15      	ldr	r2, [pc, #84]	@ (800622c <HAL_GPIO_Init+0x254>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d101      	bne.n	80061de <HAL_GPIO_Init+0x206>
 80061da:	2309      	movs	r3, #9
 80061dc:	e029      	b.n	8006232 <HAL_GPIO_Init+0x25a>
 80061de:	230a      	movs	r3, #10
 80061e0:	e027      	b.n	8006232 <HAL_GPIO_Init+0x25a>
 80061e2:	2307      	movs	r3, #7
 80061e4:	e025      	b.n	8006232 <HAL_GPIO_Init+0x25a>
 80061e6:	2306      	movs	r3, #6
 80061e8:	e023      	b.n	8006232 <HAL_GPIO_Init+0x25a>
 80061ea:	2305      	movs	r3, #5
 80061ec:	e021      	b.n	8006232 <HAL_GPIO_Init+0x25a>
 80061ee:	2304      	movs	r3, #4
 80061f0:	e01f      	b.n	8006232 <HAL_GPIO_Init+0x25a>
 80061f2:	2303      	movs	r3, #3
 80061f4:	e01d      	b.n	8006232 <HAL_GPIO_Init+0x25a>
 80061f6:	2302      	movs	r3, #2
 80061f8:	e01b      	b.n	8006232 <HAL_GPIO_Init+0x25a>
 80061fa:	2301      	movs	r3, #1
 80061fc:	e019      	b.n	8006232 <HAL_GPIO_Init+0x25a>
 80061fe:	bf00      	nop
 8006200:	58000080 	.word	0x58000080
 8006204:	58024400 	.word	0x58024400
 8006208:	58000400 	.word	0x58000400
 800620c:	58020000 	.word	0x58020000
 8006210:	58020400 	.word	0x58020400
 8006214:	58020800 	.word	0x58020800
 8006218:	58020c00 	.word	0x58020c00
 800621c:	58021000 	.word	0x58021000
 8006220:	58021400 	.word	0x58021400
 8006224:	58021800 	.word	0x58021800
 8006228:	58021c00 	.word	0x58021c00
 800622c:	58022400 	.word	0x58022400
 8006230:	2300      	movs	r3, #0
 8006232:	69fa      	ldr	r2, [r7, #28]
 8006234:	f002 0203 	and.w	r2, r2, #3
 8006238:	0092      	lsls	r2, r2, #2
 800623a:	4093      	lsls	r3, r2
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	4313      	orrs	r3, r2
 8006240:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006242:	4938      	ldr	r1, [pc, #224]	@ (8006324 <HAL_GPIO_Init+0x34c>)
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	089b      	lsrs	r3, r3, #2
 8006248:	3302      	adds	r3, #2
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006250:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	43db      	mvns	r3, r3
 800625c:	69ba      	ldr	r2, [r7, #24]
 800625e:	4013      	ands	r3, r2
 8006260:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	4313      	orrs	r3, r2
 8006274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006276:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800627e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	43db      	mvns	r3, r3
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	4013      	ands	r3, r2
 800628e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d003      	beq.n	80062a4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80062a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	43db      	mvns	r3, r3
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	4013      	ands	r3, r2
 80062ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d003      	beq.n	80062d0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80062c8:	69ba      	ldr	r2, [r7, #24]
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	43db      	mvns	r3, r3
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	4013      	ands	r3, r2
 80062e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80062f2:	69ba      	ldr	r2, [r7, #24]
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	69ba      	ldr	r2, [r7, #24]
 80062fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	3301      	adds	r3, #1
 8006304:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	fa22 f303 	lsr.w	r3, r2, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	f47f ae6b 	bne.w	8005fec <HAL_GPIO_Init+0x14>
  }
}
 8006316:	bf00      	nop
 8006318:	bf00      	nop
 800631a:	3724      	adds	r7, #36	@ 0x24
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	58000400 	.word	0x58000400

08006328 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	460b      	mov	r3, r1
 8006332:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	691a      	ldr	r2, [r3, #16]
 8006338:	887b      	ldrh	r3, [r7, #2]
 800633a:	4013      	ands	r3, r2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d002      	beq.n	8006346 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006340:	2301      	movs	r3, #1
 8006342:	73fb      	strb	r3, [r7, #15]
 8006344:	e001      	b.n	800634a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006346:	2300      	movs	r3, #0
 8006348:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800634a:	7bfb      	ldrb	r3, [r7, #15]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	460b      	mov	r3, r1
 8006362:	807b      	strh	r3, [r7, #2]
 8006364:	4613      	mov	r3, r2
 8006366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006368:	787b      	ldrb	r3, [r7, #1]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800636e:	887a      	ldrh	r2, [r7, #2]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006374:	e003      	b.n	800637e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006376:	887b      	ldrh	r3, [r7, #2]
 8006378:	041a      	lsls	r2, r3, #16
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	619a      	str	r2, [r3, #24]
}
 800637e:	bf00      	nop
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
	...

0800638c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006394:	4b19      	ldr	r3, [pc, #100]	@ (80063fc <HAL_PWREx_ConfigSupply+0x70>)
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	f003 0304 	and.w	r3, r3, #4
 800639c:	2b04      	cmp	r3, #4
 800639e:	d00a      	beq.n	80063b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80063a0:	4b16      	ldr	r3, [pc, #88]	@ (80063fc <HAL_PWREx_ConfigSupply+0x70>)
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	f003 0307 	and.w	r3, r3, #7
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d001      	beq.n	80063b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e01f      	b.n	80063f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	e01d      	b.n	80063f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80063b6:	4b11      	ldr	r3, [pc, #68]	@ (80063fc <HAL_PWREx_ConfigSupply+0x70>)
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	f023 0207 	bic.w	r2, r3, #7
 80063be:	490f      	ldr	r1, [pc, #60]	@ (80063fc <HAL_PWREx_ConfigSupply+0x70>)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80063c6:	f7fc fb7f 	bl	8002ac8 <HAL_GetTick>
 80063ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80063cc:	e009      	b.n	80063e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80063ce:	f7fc fb7b 	bl	8002ac8 <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063dc:	d901      	bls.n	80063e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e007      	b.n	80063f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80063e2:	4b06      	ldr	r3, [pc, #24]	@ (80063fc <HAL_PWREx_ConfigSupply+0x70>)
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063ee:	d1ee      	bne.n	80063ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	58024800 	.word	0x58024800

08006400 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b08c      	sub	sp, #48	@ 0x30
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e3c8      	b.n	8006ba4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b00      	cmp	r3, #0
 800641c:	f000 8087 	beq.w	800652e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006420:	4b88      	ldr	r3, [pc, #544]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006428:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800642a:	4b86      	ldr	r3, [pc, #536]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 800642c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800642e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006432:	2b10      	cmp	r3, #16
 8006434:	d007      	beq.n	8006446 <HAL_RCC_OscConfig+0x46>
 8006436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006438:	2b18      	cmp	r3, #24
 800643a:	d110      	bne.n	800645e <HAL_RCC_OscConfig+0x5e>
 800643c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643e:	f003 0303 	and.w	r3, r3, #3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d10b      	bne.n	800645e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006446:	4b7f      	ldr	r3, [pc, #508]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d06c      	beq.n	800652c <HAL_RCC_OscConfig+0x12c>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d168      	bne.n	800652c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e3a2      	b.n	8006ba4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006466:	d106      	bne.n	8006476 <HAL_RCC_OscConfig+0x76>
 8006468:	4b76      	ldr	r3, [pc, #472]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a75      	ldr	r2, [pc, #468]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 800646e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006472:	6013      	str	r3, [r2, #0]
 8006474:	e02e      	b.n	80064d4 <HAL_RCC_OscConfig+0xd4>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10c      	bne.n	8006498 <HAL_RCC_OscConfig+0x98>
 800647e:	4b71      	ldr	r3, [pc, #452]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a70      	ldr	r2, [pc, #448]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 8006484:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006488:	6013      	str	r3, [r2, #0]
 800648a:	4b6e      	ldr	r3, [pc, #440]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a6d      	ldr	r2, [pc, #436]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 8006490:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006494:	6013      	str	r3, [r2, #0]
 8006496:	e01d      	b.n	80064d4 <HAL_RCC_OscConfig+0xd4>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80064a0:	d10c      	bne.n	80064bc <HAL_RCC_OscConfig+0xbc>
 80064a2:	4b68      	ldr	r3, [pc, #416]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a67      	ldr	r2, [pc, #412]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 80064a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064ac:	6013      	str	r3, [r2, #0]
 80064ae:	4b65      	ldr	r3, [pc, #404]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a64      	ldr	r2, [pc, #400]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 80064b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064b8:	6013      	str	r3, [r2, #0]
 80064ba:	e00b      	b.n	80064d4 <HAL_RCC_OscConfig+0xd4>
 80064bc:	4b61      	ldr	r3, [pc, #388]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a60      	ldr	r2, [pc, #384]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 80064c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064c6:	6013      	str	r3, [r2, #0]
 80064c8:	4b5e      	ldr	r3, [pc, #376]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a5d      	ldr	r2, [pc, #372]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 80064ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d013      	beq.n	8006504 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064dc:	f7fc faf4 	bl	8002ac8 <HAL_GetTick>
 80064e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064e2:	e008      	b.n	80064f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064e4:	f7fc faf0 	bl	8002ac8 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	2b64      	cmp	r3, #100	@ 0x64
 80064f0:	d901      	bls.n	80064f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e356      	b.n	8006ba4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064f6:	4b53      	ldr	r3, [pc, #332]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d0f0      	beq.n	80064e4 <HAL_RCC_OscConfig+0xe4>
 8006502:	e014      	b.n	800652e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006504:	f7fc fae0 	bl	8002ac8 <HAL_GetTick>
 8006508:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800650a:	e008      	b.n	800651e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800650c:	f7fc fadc 	bl	8002ac8 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	2b64      	cmp	r3, #100	@ 0x64
 8006518:	d901      	bls.n	800651e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e342      	b.n	8006ba4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800651e:	4b49      	ldr	r3, [pc, #292]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1f0      	bne.n	800650c <HAL_RCC_OscConfig+0x10c>
 800652a:	e000      	b.n	800652e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800652c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0302 	and.w	r3, r3, #2
 8006536:	2b00      	cmp	r3, #0
 8006538:	f000 808c 	beq.w	8006654 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800653c:	4b41      	ldr	r3, [pc, #260]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006544:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006546:	4b3f      	ldr	r3, [pc, #252]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 8006548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800654c:	6a3b      	ldr	r3, [r7, #32]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d007      	beq.n	8006562 <HAL_RCC_OscConfig+0x162>
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	2b18      	cmp	r3, #24
 8006556:	d137      	bne.n	80065c8 <HAL_RCC_OscConfig+0x1c8>
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	f003 0303 	and.w	r3, r3, #3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d132      	bne.n	80065c8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006562:	4b38      	ldr	r3, [pc, #224]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0304 	and.w	r3, r3, #4
 800656a:	2b00      	cmp	r3, #0
 800656c:	d005      	beq.n	800657a <HAL_RCC_OscConfig+0x17a>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e314      	b.n	8006ba4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800657a:	4b32      	ldr	r3, [pc, #200]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f023 0219 	bic.w	r2, r3, #25
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	492f      	ldr	r1, [pc, #188]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 8006588:	4313      	orrs	r3, r2
 800658a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800658c:	f7fc fa9c 	bl	8002ac8 <HAL_GetTick>
 8006590:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006592:	e008      	b.n	80065a6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006594:	f7fc fa98 	bl	8002ac8 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e2fe      	b.n	8006ba4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065a6:	4b27      	ldr	r3, [pc, #156]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0304 	and.w	r3, r3, #4
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d0f0      	beq.n	8006594 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065b2:	4b24      	ldr	r3, [pc, #144]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	061b      	lsls	r3, r3, #24
 80065c0:	4920      	ldr	r1, [pc, #128]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065c6:	e045      	b.n	8006654 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d026      	beq.n	800661e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80065d0:	4b1c      	ldr	r3, [pc, #112]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f023 0219 	bic.w	r2, r3, #25
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	4919      	ldr	r1, [pc, #100]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e2:	f7fc fa71 	bl	8002ac8 <HAL_GetTick>
 80065e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065e8:	e008      	b.n	80065fc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065ea:	f7fc fa6d 	bl	8002ac8 <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d901      	bls.n	80065fc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e2d3      	b.n	8006ba4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065fc:	4b11      	ldr	r3, [pc, #68]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0304 	and.w	r3, r3, #4
 8006604:	2b00      	cmp	r3, #0
 8006606:	d0f0      	beq.n	80065ea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006608:	4b0e      	ldr	r3, [pc, #56]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	061b      	lsls	r3, r3, #24
 8006616:	490b      	ldr	r1, [pc, #44]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 8006618:	4313      	orrs	r3, r2
 800661a:	604b      	str	r3, [r1, #4]
 800661c:	e01a      	b.n	8006654 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800661e:	4b09      	ldr	r3, [pc, #36]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a08      	ldr	r2, [pc, #32]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 8006624:	f023 0301 	bic.w	r3, r3, #1
 8006628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800662a:	f7fc fa4d 	bl	8002ac8 <HAL_GetTick>
 800662e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006630:	e00a      	b.n	8006648 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006632:	f7fc fa49 	bl	8002ac8 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	2b02      	cmp	r3, #2
 800663e:	d903      	bls.n	8006648 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e2af      	b.n	8006ba4 <HAL_RCC_OscConfig+0x7a4>
 8006644:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006648:	4b96      	ldr	r3, [pc, #600]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0304 	and.w	r3, r3, #4
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1ee      	bne.n	8006632 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0310 	and.w	r3, r3, #16
 800665c:	2b00      	cmp	r3, #0
 800665e:	d06a      	beq.n	8006736 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006660:	4b90      	ldr	r3, [pc, #576]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006668:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800666a:	4b8e      	ldr	r3, [pc, #568]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 800666c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800666e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	2b08      	cmp	r3, #8
 8006674:	d007      	beq.n	8006686 <HAL_RCC_OscConfig+0x286>
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	2b18      	cmp	r3, #24
 800667a:	d11b      	bne.n	80066b4 <HAL_RCC_OscConfig+0x2b4>
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f003 0303 	and.w	r3, r3, #3
 8006682:	2b01      	cmp	r3, #1
 8006684:	d116      	bne.n	80066b4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006686:	4b87      	ldr	r3, [pc, #540]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800668e:	2b00      	cmp	r3, #0
 8006690:	d005      	beq.n	800669e <HAL_RCC_OscConfig+0x29e>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	2b80      	cmp	r3, #128	@ 0x80
 8006698:	d001      	beq.n	800669e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e282      	b.n	8006ba4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800669e:	4b81      	ldr	r3, [pc, #516]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	061b      	lsls	r3, r3, #24
 80066ac:	497d      	ldr	r1, [pc, #500]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066b2:	e040      	b.n	8006736 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d023      	beq.n	8006704 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80066bc:	4b79      	ldr	r3, [pc, #484]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a78      	ldr	r2, [pc, #480]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 80066c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c8:	f7fc f9fe 	bl	8002ac8 <HAL_GetTick>
 80066cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066ce:	e008      	b.n	80066e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80066d0:	f7fc f9fa 	bl	8002ac8 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e260      	b.n	8006ba4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066e2:	4b70      	ldr	r3, [pc, #448]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d0f0      	beq.n	80066d0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066ee:	4b6d      	ldr	r3, [pc, #436]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	061b      	lsls	r3, r3, #24
 80066fc:	4969      	ldr	r1, [pc, #420]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	60cb      	str	r3, [r1, #12]
 8006702:	e018      	b.n	8006736 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006704:	4b67      	ldr	r3, [pc, #412]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a66      	ldr	r2, [pc, #408]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 800670a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800670e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006710:	f7fc f9da 	bl	8002ac8 <HAL_GetTick>
 8006714:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006716:	e008      	b.n	800672a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006718:	f7fc f9d6 	bl	8002ac8 <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	2b02      	cmp	r3, #2
 8006724:	d901      	bls.n	800672a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e23c      	b.n	8006ba4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800672a:	4b5e      	ldr	r3, [pc, #376]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1f0      	bne.n	8006718 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0308 	and.w	r3, r3, #8
 800673e:	2b00      	cmp	r3, #0
 8006740:	d036      	beq.n	80067b0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d019      	beq.n	800677e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800674a:	4b56      	ldr	r3, [pc, #344]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 800674c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800674e:	4a55      	ldr	r2, [pc, #340]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 8006750:	f043 0301 	orr.w	r3, r3, #1
 8006754:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006756:	f7fc f9b7 	bl	8002ac8 <HAL_GetTick>
 800675a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800675c:	e008      	b.n	8006770 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800675e:	f7fc f9b3 	bl	8002ac8 <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	2b02      	cmp	r3, #2
 800676a:	d901      	bls.n	8006770 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e219      	b.n	8006ba4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006770:	4b4c      	ldr	r3, [pc, #304]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 8006772:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006774:	f003 0302 	and.w	r3, r3, #2
 8006778:	2b00      	cmp	r3, #0
 800677a:	d0f0      	beq.n	800675e <HAL_RCC_OscConfig+0x35e>
 800677c:	e018      	b.n	80067b0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800677e:	4b49      	ldr	r3, [pc, #292]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 8006780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006782:	4a48      	ldr	r2, [pc, #288]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 8006784:	f023 0301 	bic.w	r3, r3, #1
 8006788:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800678a:	f7fc f99d 	bl	8002ac8 <HAL_GetTick>
 800678e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006790:	e008      	b.n	80067a4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006792:	f7fc f999 	bl	8002ac8 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	2b02      	cmp	r3, #2
 800679e:	d901      	bls.n	80067a4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e1ff      	b.n	8006ba4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80067a4:	4b3f      	ldr	r3, [pc, #252]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 80067a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067a8:	f003 0302 	and.w	r3, r3, #2
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1f0      	bne.n	8006792 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0320 	and.w	r3, r3, #32
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d036      	beq.n	800682a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d019      	beq.n	80067f8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80067c4:	4b37      	ldr	r3, [pc, #220]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a36      	ldr	r2, [pc, #216]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 80067ca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80067ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80067d0:	f7fc f97a 	bl	8002ac8 <HAL_GetTick>
 80067d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80067d6:	e008      	b.n	80067ea <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067d8:	f7fc f976 	bl	8002ac8 <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d901      	bls.n	80067ea <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e1dc      	b.n	8006ba4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80067ea:	4b2e      	ldr	r3, [pc, #184]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d0f0      	beq.n	80067d8 <HAL_RCC_OscConfig+0x3d8>
 80067f6:	e018      	b.n	800682a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80067f8:	4b2a      	ldr	r3, [pc, #168]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a29      	ldr	r2, [pc, #164]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 80067fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006802:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006804:	f7fc f960 	bl	8002ac8 <HAL_GetTick>
 8006808:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800680a:	e008      	b.n	800681e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800680c:	f7fc f95c 	bl	8002ac8 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	2b02      	cmp	r3, #2
 8006818:	d901      	bls.n	800681e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e1c2      	b.n	8006ba4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800681e:	4b21      	ldr	r3, [pc, #132]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1f0      	bne.n	800680c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0304 	and.w	r3, r3, #4
 8006832:	2b00      	cmp	r3, #0
 8006834:	f000 8086 	beq.w	8006944 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006838:	4b1b      	ldr	r3, [pc, #108]	@ (80068a8 <HAL_RCC_OscConfig+0x4a8>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a1a      	ldr	r2, [pc, #104]	@ (80068a8 <HAL_RCC_OscConfig+0x4a8>)
 800683e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006842:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006844:	f7fc f940 	bl	8002ac8 <HAL_GetTick>
 8006848:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800684a:	e008      	b.n	800685e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800684c:	f7fc f93c 	bl	8002ac8 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b64      	cmp	r3, #100	@ 0x64
 8006858:	d901      	bls.n	800685e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e1a2      	b.n	8006ba4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800685e:	4b12      	ldr	r3, [pc, #72]	@ (80068a8 <HAL_RCC_OscConfig+0x4a8>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006866:	2b00      	cmp	r3, #0
 8006868:	d0f0      	beq.n	800684c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d106      	bne.n	8006880 <HAL_RCC_OscConfig+0x480>
 8006872:	4b0c      	ldr	r3, [pc, #48]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 8006874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006876:	4a0b      	ldr	r2, [pc, #44]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 8006878:	f043 0301 	orr.w	r3, r3, #1
 800687c:	6713      	str	r3, [r2, #112]	@ 0x70
 800687e:	e032      	b.n	80068e6 <HAL_RCC_OscConfig+0x4e6>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d111      	bne.n	80068ac <HAL_RCC_OscConfig+0x4ac>
 8006888:	4b06      	ldr	r3, [pc, #24]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 800688a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800688c:	4a05      	ldr	r2, [pc, #20]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 800688e:	f023 0301 	bic.w	r3, r3, #1
 8006892:	6713      	str	r3, [r2, #112]	@ 0x70
 8006894:	4b03      	ldr	r3, [pc, #12]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 8006896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006898:	4a02      	ldr	r2, [pc, #8]	@ (80068a4 <HAL_RCC_OscConfig+0x4a4>)
 800689a:	f023 0304 	bic.w	r3, r3, #4
 800689e:	6713      	str	r3, [r2, #112]	@ 0x70
 80068a0:	e021      	b.n	80068e6 <HAL_RCC_OscConfig+0x4e6>
 80068a2:	bf00      	nop
 80068a4:	58024400 	.word	0x58024400
 80068a8:	58024800 	.word	0x58024800
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	2b05      	cmp	r3, #5
 80068b2:	d10c      	bne.n	80068ce <HAL_RCC_OscConfig+0x4ce>
 80068b4:	4b83      	ldr	r3, [pc, #524]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 80068b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068b8:	4a82      	ldr	r2, [pc, #520]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 80068ba:	f043 0304 	orr.w	r3, r3, #4
 80068be:	6713      	str	r3, [r2, #112]	@ 0x70
 80068c0:	4b80      	ldr	r3, [pc, #512]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 80068c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068c4:	4a7f      	ldr	r2, [pc, #508]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 80068c6:	f043 0301 	orr.w	r3, r3, #1
 80068ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80068cc:	e00b      	b.n	80068e6 <HAL_RCC_OscConfig+0x4e6>
 80068ce:	4b7d      	ldr	r3, [pc, #500]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 80068d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068d2:	4a7c      	ldr	r2, [pc, #496]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 80068d4:	f023 0301 	bic.w	r3, r3, #1
 80068d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80068da:	4b7a      	ldr	r3, [pc, #488]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 80068dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068de:	4a79      	ldr	r2, [pc, #484]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 80068e0:	f023 0304 	bic.w	r3, r3, #4
 80068e4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d015      	beq.n	800691a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ee:	f7fc f8eb 	bl	8002ac8 <HAL_GetTick>
 80068f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068f4:	e00a      	b.n	800690c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068f6:	f7fc f8e7 	bl	8002ac8 <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006904:	4293      	cmp	r3, r2
 8006906:	d901      	bls.n	800690c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e14b      	b.n	8006ba4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800690c:	4b6d      	ldr	r3, [pc, #436]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 800690e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	2b00      	cmp	r3, #0
 8006916:	d0ee      	beq.n	80068f6 <HAL_RCC_OscConfig+0x4f6>
 8006918:	e014      	b.n	8006944 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800691a:	f7fc f8d5 	bl	8002ac8 <HAL_GetTick>
 800691e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006920:	e00a      	b.n	8006938 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006922:	f7fc f8d1 	bl	8002ac8 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006930:	4293      	cmp	r3, r2
 8006932:	d901      	bls.n	8006938 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e135      	b.n	8006ba4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006938:	4b62      	ldr	r3, [pc, #392]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 800693a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800693c:	f003 0302 	and.w	r3, r3, #2
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1ee      	bne.n	8006922 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 812a 	beq.w	8006ba2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800694e:	4b5d      	ldr	r3, [pc, #372]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006956:	2b18      	cmp	r3, #24
 8006958:	f000 80ba 	beq.w	8006ad0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006960:	2b02      	cmp	r3, #2
 8006962:	f040 8095 	bne.w	8006a90 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006966:	4b57      	ldr	r3, [pc, #348]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a56      	ldr	r2, [pc, #344]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 800696c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006970:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006972:	f7fc f8a9 	bl	8002ac8 <HAL_GetTick>
 8006976:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006978:	e008      	b.n	800698c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800697a:	f7fc f8a5 	bl	8002ac8 <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	2b02      	cmp	r3, #2
 8006986:	d901      	bls.n	800698c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e10b      	b.n	8006ba4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800698c:	4b4d      	ldr	r3, [pc, #308]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1f0      	bne.n	800697a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006998:	4b4a      	ldr	r3, [pc, #296]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 800699a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800699c:	4b4a      	ldr	r3, [pc, #296]	@ (8006ac8 <HAL_RCC_OscConfig+0x6c8>)
 800699e:	4013      	ands	r3, r2
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80069a8:	0112      	lsls	r2, r2, #4
 80069aa:	430a      	orrs	r2, r1
 80069ac:	4945      	ldr	r1, [pc, #276]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	628b      	str	r3, [r1, #40]	@ 0x28
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069b6:	3b01      	subs	r3, #1
 80069b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069c0:	3b01      	subs	r3, #1
 80069c2:	025b      	lsls	r3, r3, #9
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	431a      	orrs	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069cc:	3b01      	subs	r3, #1
 80069ce:	041b      	lsls	r3, r3, #16
 80069d0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80069d4:	431a      	orrs	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069da:	3b01      	subs	r3, #1
 80069dc:	061b      	lsls	r3, r3, #24
 80069de:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80069e2:	4938      	ldr	r1, [pc, #224]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 80069e4:	4313      	orrs	r3, r2
 80069e6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80069e8:	4b36      	ldr	r3, [pc, #216]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 80069ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ec:	4a35      	ldr	r2, [pc, #212]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 80069ee:	f023 0301 	bic.w	r3, r3, #1
 80069f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80069f4:	4b33      	ldr	r3, [pc, #204]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 80069f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069f8:	4b34      	ldr	r3, [pc, #208]	@ (8006acc <HAL_RCC_OscConfig+0x6cc>)
 80069fa:	4013      	ands	r3, r2
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006a00:	00d2      	lsls	r2, r2, #3
 8006a02:	4930      	ldr	r1, [pc, #192]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006a08:	4b2e      	ldr	r3, [pc, #184]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 8006a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0c:	f023 020c 	bic.w	r2, r3, #12
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a14:	492b      	ldr	r1, [pc, #172]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 8006a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a1e:	f023 0202 	bic.w	r2, r3, #2
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a26:	4927      	ldr	r1, [pc, #156]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a2c:	4b25      	ldr	r3, [pc, #148]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 8006a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a30:	4a24      	ldr	r2, [pc, #144]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 8006a32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a38:	4b22      	ldr	r3, [pc, #136]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 8006a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a3c:	4a21      	ldr	r2, [pc, #132]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 8006a3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006a44:	4b1f      	ldr	r3, [pc, #124]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 8006a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a48:	4a1e      	ldr	r2, [pc, #120]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 8006a4a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006a50:	4b1c      	ldr	r3, [pc, #112]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 8006a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a54:	4a1b      	ldr	r2, [pc, #108]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 8006a56:	f043 0301 	orr.w	r3, r3, #1
 8006a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a5c:	4b19      	ldr	r3, [pc, #100]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a18      	ldr	r2, [pc, #96]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 8006a62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a68:	f7fc f82e 	bl	8002ac8 <HAL_GetTick>
 8006a6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a6e:	e008      	b.n	8006a82 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a70:	f7fc f82a 	bl	8002ac8 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d901      	bls.n	8006a82 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e090      	b.n	8006ba4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a82:	4b10      	ldr	r3, [pc, #64]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d0f0      	beq.n	8006a70 <HAL_RCC_OscConfig+0x670>
 8006a8e:	e088      	b.n	8006ba2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a90:	4b0c      	ldr	r3, [pc, #48]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a0b      	ldr	r2, [pc, #44]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 8006a96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a9c:	f7fc f814 	bl	8002ac8 <HAL_GetTick>
 8006aa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006aa2:	e008      	b.n	8006ab6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aa4:	f7fc f810 	bl	8002ac8 <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d901      	bls.n	8006ab6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e076      	b.n	8006ba4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ab6:	4b03      	ldr	r3, [pc, #12]	@ (8006ac4 <HAL_RCC_OscConfig+0x6c4>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1f0      	bne.n	8006aa4 <HAL_RCC_OscConfig+0x6a4>
 8006ac2:	e06e      	b.n	8006ba2 <HAL_RCC_OscConfig+0x7a2>
 8006ac4:	58024400 	.word	0x58024400
 8006ac8:	fffffc0c 	.word	0xfffffc0c
 8006acc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006ad0:	4b36      	ldr	r3, [pc, #216]	@ (8006bac <HAL_RCC_OscConfig+0x7ac>)
 8006ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006ad6:	4b35      	ldr	r3, [pc, #212]	@ (8006bac <HAL_RCC_OscConfig+0x7ac>)
 8006ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ada:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d031      	beq.n	8006b48 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f003 0203 	and.w	r2, r3, #3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d12a      	bne.n	8006b48 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	091b      	lsrs	r3, r3, #4
 8006af6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d122      	bne.n	8006b48 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d11a      	bne.n	8006b48 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	0a5b      	lsrs	r3, r3, #9
 8006b16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b1e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d111      	bne.n	8006b48 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	0c1b      	lsrs	r3, r3, #16
 8006b28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b30:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d108      	bne.n	8006b48 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	0e1b      	lsrs	r3, r3, #24
 8006b3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b42:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d001      	beq.n	8006b4c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e02b      	b.n	8006ba4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006b4c:	4b17      	ldr	r3, [pc, #92]	@ (8006bac <HAL_RCC_OscConfig+0x7ac>)
 8006b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b50:	08db      	lsrs	r3, r3, #3
 8006b52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b56:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d01f      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006b62:	4b12      	ldr	r3, [pc, #72]	@ (8006bac <HAL_RCC_OscConfig+0x7ac>)
 8006b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b66:	4a11      	ldr	r2, [pc, #68]	@ (8006bac <HAL_RCC_OscConfig+0x7ac>)
 8006b68:	f023 0301 	bic.w	r3, r3, #1
 8006b6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b6e:	f7fb ffab 	bl	8002ac8 <HAL_GetTick>
 8006b72:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006b74:	bf00      	nop
 8006b76:	f7fb ffa7 	bl	8002ac8 <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d0f9      	beq.n	8006b76 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006b82:	4b0a      	ldr	r3, [pc, #40]	@ (8006bac <HAL_RCC_OscConfig+0x7ac>)
 8006b84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b86:	4b0a      	ldr	r3, [pc, #40]	@ (8006bb0 <HAL_RCC_OscConfig+0x7b0>)
 8006b88:	4013      	ands	r3, r2
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006b8e:	00d2      	lsls	r2, r2, #3
 8006b90:	4906      	ldr	r1, [pc, #24]	@ (8006bac <HAL_RCC_OscConfig+0x7ac>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006b96:	4b05      	ldr	r3, [pc, #20]	@ (8006bac <HAL_RCC_OscConfig+0x7ac>)
 8006b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9a:	4a04      	ldr	r2, [pc, #16]	@ (8006bac <HAL_RCC_OscConfig+0x7ac>)
 8006b9c:	f043 0301 	orr.w	r3, r3, #1
 8006ba0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3730      	adds	r7, #48	@ 0x30
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	58024400 	.word	0x58024400
 8006bb0:	ffff0007 	.word	0xffff0007

08006bb4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b086      	sub	sp, #24
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e19c      	b.n	8006f02 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006bc8:	4b8a      	ldr	r3, [pc, #552]	@ (8006df4 <HAL_RCC_ClockConfig+0x240>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 030f 	and.w	r3, r3, #15
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d910      	bls.n	8006bf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bd6:	4b87      	ldr	r3, [pc, #540]	@ (8006df4 <HAL_RCC_ClockConfig+0x240>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f023 020f 	bic.w	r2, r3, #15
 8006bde:	4985      	ldr	r1, [pc, #532]	@ (8006df4 <HAL_RCC_ClockConfig+0x240>)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006be6:	4b83      	ldr	r3, [pc, #524]	@ (8006df4 <HAL_RCC_ClockConfig+0x240>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 030f 	and.w	r3, r3, #15
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d001      	beq.n	8006bf8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e184      	b.n	8006f02 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0304 	and.w	r3, r3, #4
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d010      	beq.n	8006c26 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	691a      	ldr	r2, [r3, #16]
 8006c08:	4b7b      	ldr	r3, [pc, #492]	@ (8006df8 <HAL_RCC_ClockConfig+0x244>)
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d908      	bls.n	8006c26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c14:	4b78      	ldr	r3, [pc, #480]	@ (8006df8 <HAL_RCC_ClockConfig+0x244>)
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	4975      	ldr	r1, [pc, #468]	@ (8006df8 <HAL_RCC_ClockConfig+0x244>)
 8006c22:	4313      	orrs	r3, r2
 8006c24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0308 	and.w	r3, r3, #8
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d010      	beq.n	8006c54 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	695a      	ldr	r2, [r3, #20]
 8006c36:	4b70      	ldr	r3, [pc, #448]	@ (8006df8 <HAL_RCC_ClockConfig+0x244>)
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d908      	bls.n	8006c54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c42:	4b6d      	ldr	r3, [pc, #436]	@ (8006df8 <HAL_RCC_ClockConfig+0x244>)
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	496a      	ldr	r1, [pc, #424]	@ (8006df8 <HAL_RCC_ClockConfig+0x244>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0310 	and.w	r3, r3, #16
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d010      	beq.n	8006c82 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	699a      	ldr	r2, [r3, #24]
 8006c64:	4b64      	ldr	r3, [pc, #400]	@ (8006df8 <HAL_RCC_ClockConfig+0x244>)
 8006c66:	69db      	ldr	r3, [r3, #28]
 8006c68:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d908      	bls.n	8006c82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c70:	4b61      	ldr	r3, [pc, #388]	@ (8006df8 <HAL_RCC_ClockConfig+0x244>)
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	495e      	ldr	r1, [pc, #376]	@ (8006df8 <HAL_RCC_ClockConfig+0x244>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0320 	and.w	r3, r3, #32
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d010      	beq.n	8006cb0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	69da      	ldr	r2, [r3, #28]
 8006c92:	4b59      	ldr	r3, [pc, #356]	@ (8006df8 <HAL_RCC_ClockConfig+0x244>)
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d908      	bls.n	8006cb0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006c9e:	4b56      	ldr	r3, [pc, #344]	@ (8006df8 <HAL_RCC_ClockConfig+0x244>)
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	4953      	ldr	r1, [pc, #332]	@ (8006df8 <HAL_RCC_ClockConfig+0x244>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0302 	and.w	r3, r3, #2
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d010      	beq.n	8006cde <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	68da      	ldr	r2, [r3, #12]
 8006cc0:	4b4d      	ldr	r3, [pc, #308]	@ (8006df8 <HAL_RCC_ClockConfig+0x244>)
 8006cc2:	699b      	ldr	r3, [r3, #24]
 8006cc4:	f003 030f 	and.w	r3, r3, #15
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d908      	bls.n	8006cde <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ccc:	4b4a      	ldr	r3, [pc, #296]	@ (8006df8 <HAL_RCC_ClockConfig+0x244>)
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	f023 020f 	bic.w	r2, r3, #15
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	4947      	ldr	r1, [pc, #284]	@ (8006df8 <HAL_RCC_ClockConfig+0x244>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d055      	beq.n	8006d96 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006cea:	4b43      	ldr	r3, [pc, #268]	@ (8006df8 <HAL_RCC_ClockConfig+0x244>)
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	4940      	ldr	r1, [pc, #256]	@ (8006df8 <HAL_RCC_ClockConfig+0x244>)
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d107      	bne.n	8006d14 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d04:	4b3c      	ldr	r3, [pc, #240]	@ (8006df8 <HAL_RCC_ClockConfig+0x244>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d121      	bne.n	8006d54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e0f6      	b.n	8006f02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	2b03      	cmp	r3, #3
 8006d1a:	d107      	bne.n	8006d2c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d1c:	4b36      	ldr	r3, [pc, #216]	@ (8006df8 <HAL_RCC_ClockConfig+0x244>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d115      	bne.n	8006d54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e0ea      	b.n	8006f02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d107      	bne.n	8006d44 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d34:	4b30      	ldr	r3, [pc, #192]	@ (8006df8 <HAL_RCC_ClockConfig+0x244>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d109      	bne.n	8006d54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e0de      	b.n	8006f02 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d44:	4b2c      	ldr	r3, [pc, #176]	@ (8006df8 <HAL_RCC_ClockConfig+0x244>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0304 	and.w	r3, r3, #4
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d101      	bne.n	8006d54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e0d6      	b.n	8006f02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d54:	4b28      	ldr	r3, [pc, #160]	@ (8006df8 <HAL_RCC_ClockConfig+0x244>)
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	f023 0207 	bic.w	r2, r3, #7
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	4925      	ldr	r1, [pc, #148]	@ (8006df8 <HAL_RCC_ClockConfig+0x244>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d66:	f7fb feaf 	bl	8002ac8 <HAL_GetTick>
 8006d6a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d6c:	e00a      	b.n	8006d84 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d6e:	f7fb feab 	bl	8002ac8 <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d901      	bls.n	8006d84 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e0be      	b.n	8006f02 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d84:	4b1c      	ldr	r3, [pc, #112]	@ (8006df8 <HAL_RCC_ClockConfig+0x244>)
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	00db      	lsls	r3, r3, #3
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d1eb      	bne.n	8006d6e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d010      	beq.n	8006dc4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68da      	ldr	r2, [r3, #12]
 8006da6:	4b14      	ldr	r3, [pc, #80]	@ (8006df8 <HAL_RCC_ClockConfig+0x244>)
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	f003 030f 	and.w	r3, r3, #15
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d208      	bcs.n	8006dc4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006db2:	4b11      	ldr	r3, [pc, #68]	@ (8006df8 <HAL_RCC_ClockConfig+0x244>)
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	f023 020f 	bic.w	r2, r3, #15
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	490e      	ldr	r1, [pc, #56]	@ (8006df8 <HAL_RCC_ClockConfig+0x244>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8006df4 <HAL_RCC_ClockConfig+0x240>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 030f 	and.w	r3, r3, #15
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d214      	bcs.n	8006dfc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dd2:	4b08      	ldr	r3, [pc, #32]	@ (8006df4 <HAL_RCC_ClockConfig+0x240>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f023 020f 	bic.w	r2, r3, #15
 8006dda:	4906      	ldr	r1, [pc, #24]	@ (8006df4 <HAL_RCC_ClockConfig+0x240>)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006de2:	4b04      	ldr	r3, [pc, #16]	@ (8006df4 <HAL_RCC_ClockConfig+0x240>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 030f 	and.w	r3, r3, #15
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d005      	beq.n	8006dfc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e086      	b.n	8006f02 <HAL_RCC_ClockConfig+0x34e>
 8006df4:	52002000 	.word	0x52002000
 8006df8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0304 	and.w	r3, r3, #4
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d010      	beq.n	8006e2a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	691a      	ldr	r2, [r3, #16]
 8006e0c:	4b3f      	ldr	r3, [pc, #252]	@ (8006f0c <HAL_RCC_ClockConfig+0x358>)
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d208      	bcs.n	8006e2a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e18:	4b3c      	ldr	r3, [pc, #240]	@ (8006f0c <HAL_RCC_ClockConfig+0x358>)
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	4939      	ldr	r1, [pc, #228]	@ (8006f0c <HAL_RCC_ClockConfig+0x358>)
 8006e26:	4313      	orrs	r3, r2
 8006e28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0308 	and.w	r3, r3, #8
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d010      	beq.n	8006e58 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	695a      	ldr	r2, [r3, #20]
 8006e3a:	4b34      	ldr	r3, [pc, #208]	@ (8006f0c <HAL_RCC_ClockConfig+0x358>)
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d208      	bcs.n	8006e58 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e46:	4b31      	ldr	r3, [pc, #196]	@ (8006f0c <HAL_RCC_ClockConfig+0x358>)
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	492e      	ldr	r1, [pc, #184]	@ (8006f0c <HAL_RCC_ClockConfig+0x358>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0310 	and.w	r3, r3, #16
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d010      	beq.n	8006e86 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	699a      	ldr	r2, [r3, #24]
 8006e68:	4b28      	ldr	r3, [pc, #160]	@ (8006f0c <HAL_RCC_ClockConfig+0x358>)
 8006e6a:	69db      	ldr	r3, [r3, #28]
 8006e6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d208      	bcs.n	8006e86 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e74:	4b25      	ldr	r3, [pc, #148]	@ (8006f0c <HAL_RCC_ClockConfig+0x358>)
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	4922      	ldr	r1, [pc, #136]	@ (8006f0c <HAL_RCC_ClockConfig+0x358>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0320 	and.w	r3, r3, #32
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d010      	beq.n	8006eb4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	69da      	ldr	r2, [r3, #28]
 8006e96:	4b1d      	ldr	r3, [pc, #116]	@ (8006f0c <HAL_RCC_ClockConfig+0x358>)
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d208      	bcs.n	8006eb4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8006f0c <HAL_RCC_ClockConfig+0x358>)
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	4917      	ldr	r1, [pc, #92]	@ (8006f0c <HAL_RCC_ClockConfig+0x358>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006eb4:	f000 f834 	bl	8006f20 <HAL_RCC_GetSysClockFreq>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	4b14      	ldr	r3, [pc, #80]	@ (8006f0c <HAL_RCC_ClockConfig+0x358>)
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	0a1b      	lsrs	r3, r3, #8
 8006ec0:	f003 030f 	and.w	r3, r3, #15
 8006ec4:	4912      	ldr	r1, [pc, #72]	@ (8006f10 <HAL_RCC_ClockConfig+0x35c>)
 8006ec6:	5ccb      	ldrb	r3, [r1, r3]
 8006ec8:	f003 031f 	and.w	r3, r3, #31
 8006ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ed0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8006f0c <HAL_RCC_ClockConfig+0x358>)
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	f003 030f 	and.w	r3, r3, #15
 8006eda:	4a0d      	ldr	r2, [pc, #52]	@ (8006f10 <HAL_RCC_ClockConfig+0x35c>)
 8006edc:	5cd3      	ldrb	r3, [r2, r3]
 8006ede:	f003 031f 	and.w	r3, r3, #31
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8006f14 <HAL_RCC_ClockConfig+0x360>)
 8006eea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006eec:	4a0a      	ldr	r2, [pc, #40]	@ (8006f18 <HAL_RCC_ClockConfig+0x364>)
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8006f1c <HAL_RCC_ClockConfig+0x368>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fb fd9c 	bl	8002a34 <HAL_InitTick>
 8006efc:	4603      	mov	r3, r0
 8006efe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3718      	adds	r7, #24
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	58024400 	.word	0x58024400
 8006f10:	0800bc54 	.word	0x0800bc54
 8006f14:	24000010 	.word	0x24000010
 8006f18:	2400000c 	.word	0x2400000c
 8006f1c:	24000014 	.word	0x24000014

08006f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b089      	sub	sp, #36	@ 0x24
 8006f24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f26:	4bb3      	ldr	r3, [pc, #716]	@ (80071f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f2e:	2b18      	cmp	r3, #24
 8006f30:	f200 8155 	bhi.w	80071de <HAL_RCC_GetSysClockFreq+0x2be>
 8006f34:	a201      	add	r2, pc, #4	@ (adr r2, 8006f3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3a:	bf00      	nop
 8006f3c:	08006fa1 	.word	0x08006fa1
 8006f40:	080071df 	.word	0x080071df
 8006f44:	080071df 	.word	0x080071df
 8006f48:	080071df 	.word	0x080071df
 8006f4c:	080071df 	.word	0x080071df
 8006f50:	080071df 	.word	0x080071df
 8006f54:	080071df 	.word	0x080071df
 8006f58:	080071df 	.word	0x080071df
 8006f5c:	08006fc7 	.word	0x08006fc7
 8006f60:	080071df 	.word	0x080071df
 8006f64:	080071df 	.word	0x080071df
 8006f68:	080071df 	.word	0x080071df
 8006f6c:	080071df 	.word	0x080071df
 8006f70:	080071df 	.word	0x080071df
 8006f74:	080071df 	.word	0x080071df
 8006f78:	080071df 	.word	0x080071df
 8006f7c:	08006fcd 	.word	0x08006fcd
 8006f80:	080071df 	.word	0x080071df
 8006f84:	080071df 	.word	0x080071df
 8006f88:	080071df 	.word	0x080071df
 8006f8c:	080071df 	.word	0x080071df
 8006f90:	080071df 	.word	0x080071df
 8006f94:	080071df 	.word	0x080071df
 8006f98:	080071df 	.word	0x080071df
 8006f9c:	08006fd3 	.word	0x08006fd3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fa0:	4b94      	ldr	r3, [pc, #592]	@ (80071f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0320 	and.w	r3, r3, #32
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d009      	beq.n	8006fc0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fac:	4b91      	ldr	r3, [pc, #580]	@ (80071f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	08db      	lsrs	r3, r3, #3
 8006fb2:	f003 0303 	and.w	r3, r3, #3
 8006fb6:	4a90      	ldr	r2, [pc, #576]	@ (80071f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fbc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006fbe:	e111      	b.n	80071e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006fc0:	4b8d      	ldr	r3, [pc, #564]	@ (80071f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006fc2:	61bb      	str	r3, [r7, #24]
      break;
 8006fc4:	e10e      	b.n	80071e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006fc6:	4b8d      	ldr	r3, [pc, #564]	@ (80071fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006fc8:	61bb      	str	r3, [r7, #24]
      break;
 8006fca:	e10b      	b.n	80071e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006fcc:	4b8c      	ldr	r3, [pc, #560]	@ (8007200 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006fce:	61bb      	str	r3, [r7, #24]
      break;
 8006fd0:	e108      	b.n	80071e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006fd2:	4b88      	ldr	r3, [pc, #544]	@ (80071f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd6:	f003 0303 	and.w	r3, r3, #3
 8006fda:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006fdc:	4b85      	ldr	r3, [pc, #532]	@ (80071f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe0:	091b      	lsrs	r3, r3, #4
 8006fe2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006fe6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006fe8:	4b82      	ldr	r3, [pc, #520]	@ (80071f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006ff2:	4b80      	ldr	r3, [pc, #512]	@ (80071f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ff6:	08db      	lsrs	r3, r3, #3
 8006ff8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	fb02 f303 	mul.w	r3, r2, r3
 8007002:	ee07 3a90 	vmov	s15, r3
 8007006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800700a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 80e1 	beq.w	80071d8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	2b02      	cmp	r3, #2
 800701a:	f000 8083 	beq.w	8007124 <HAL_RCC_GetSysClockFreq+0x204>
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	2b02      	cmp	r3, #2
 8007022:	f200 80a1 	bhi.w	8007168 <HAL_RCC_GetSysClockFreq+0x248>
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d003      	beq.n	8007034 <HAL_RCC_GetSysClockFreq+0x114>
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d056      	beq.n	80070e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007032:	e099      	b.n	8007168 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007034:	4b6f      	ldr	r3, [pc, #444]	@ (80071f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0320 	and.w	r3, r3, #32
 800703c:	2b00      	cmp	r3, #0
 800703e:	d02d      	beq.n	800709c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007040:	4b6c      	ldr	r3, [pc, #432]	@ (80071f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	08db      	lsrs	r3, r3, #3
 8007046:	f003 0303 	and.w	r3, r3, #3
 800704a:	4a6b      	ldr	r2, [pc, #428]	@ (80071f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800704c:	fa22 f303 	lsr.w	r3, r2, r3
 8007050:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	ee07 3a90 	vmov	s15, r3
 8007058:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	ee07 3a90 	vmov	s15, r3
 8007062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800706a:	4b62      	ldr	r3, [pc, #392]	@ (80071f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800706c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800706e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007072:	ee07 3a90 	vmov	s15, r3
 8007076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800707a:	ed97 6a02 	vldr	s12, [r7, #8]
 800707e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007204 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800708a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800708e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007096:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800709a:	e087      	b.n	80071ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	ee07 3a90 	vmov	s15, r3
 80070a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070a6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007208 <HAL_RCC_GetSysClockFreq+0x2e8>
 80070aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ae:	4b51      	ldr	r3, [pc, #324]	@ (80071f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070b6:	ee07 3a90 	vmov	s15, r3
 80070ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070be:	ed97 6a02 	vldr	s12, [r7, #8]
 80070c2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007204 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80070de:	e065      	b.n	80071ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	ee07 3a90 	vmov	s15, r3
 80070e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800720c <HAL_RCC_GetSysClockFreq+0x2ec>
 80070ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070f2:	4b40      	ldr	r3, [pc, #256]	@ (80071f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070fa:	ee07 3a90 	vmov	s15, r3
 80070fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007102:	ed97 6a02 	vldr	s12, [r7, #8]
 8007106:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007204 <HAL_RCC_GetSysClockFreq+0x2e4>
 800710a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800710e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007112:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800711a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800711e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007122:	e043      	b.n	80071ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	ee07 3a90 	vmov	s15, r3
 800712a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007210 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007136:	4b2f      	ldr	r3, [pc, #188]	@ (80071f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800713a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800713e:	ee07 3a90 	vmov	s15, r3
 8007142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007146:	ed97 6a02 	vldr	s12, [r7, #8]
 800714a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007204 <HAL_RCC_GetSysClockFreq+0x2e4>
 800714e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007156:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800715a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800715e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007162:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007166:	e021      	b.n	80071ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	ee07 3a90 	vmov	s15, r3
 800716e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007172:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800720c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800717a:	4b1e      	ldr	r3, [pc, #120]	@ (80071f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800717c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800717e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800718a:	ed97 6a02 	vldr	s12, [r7, #8]
 800718e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007204 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800719a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800719e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80071ac:	4b11      	ldr	r3, [pc, #68]	@ (80071f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b0:	0a5b      	lsrs	r3, r3, #9
 80071b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071b6:	3301      	adds	r3, #1
 80071b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	ee07 3a90 	vmov	s15, r3
 80071c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80071c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80071c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071d0:	ee17 3a90 	vmov	r3, s15
 80071d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80071d6:	e005      	b.n	80071e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80071d8:	2300      	movs	r3, #0
 80071da:	61bb      	str	r3, [r7, #24]
      break;
 80071dc:	e002      	b.n	80071e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80071de:	4b07      	ldr	r3, [pc, #28]	@ (80071fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80071e0:	61bb      	str	r3, [r7, #24]
      break;
 80071e2:	bf00      	nop
  }

  return sysclockfreq;
 80071e4:	69bb      	ldr	r3, [r7, #24]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3724      	adds	r7, #36	@ 0x24
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	58024400 	.word	0x58024400
 80071f8:	03d09000 	.word	0x03d09000
 80071fc:	003d0900 	.word	0x003d0900
 8007200:	016e3600 	.word	0x016e3600
 8007204:	46000000 	.word	0x46000000
 8007208:	4c742400 	.word	0x4c742400
 800720c:	4a742400 	.word	0x4a742400
 8007210:	4bb71b00 	.word	0x4bb71b00

08007214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800721a:	f7ff fe81 	bl	8006f20 <HAL_RCC_GetSysClockFreq>
 800721e:	4602      	mov	r2, r0
 8007220:	4b10      	ldr	r3, [pc, #64]	@ (8007264 <HAL_RCC_GetHCLKFreq+0x50>)
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	0a1b      	lsrs	r3, r3, #8
 8007226:	f003 030f 	and.w	r3, r3, #15
 800722a:	490f      	ldr	r1, [pc, #60]	@ (8007268 <HAL_RCC_GetHCLKFreq+0x54>)
 800722c:	5ccb      	ldrb	r3, [r1, r3]
 800722e:	f003 031f 	and.w	r3, r3, #31
 8007232:	fa22 f303 	lsr.w	r3, r2, r3
 8007236:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007238:	4b0a      	ldr	r3, [pc, #40]	@ (8007264 <HAL_RCC_GetHCLKFreq+0x50>)
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	f003 030f 	and.w	r3, r3, #15
 8007240:	4a09      	ldr	r2, [pc, #36]	@ (8007268 <HAL_RCC_GetHCLKFreq+0x54>)
 8007242:	5cd3      	ldrb	r3, [r2, r3]
 8007244:	f003 031f 	and.w	r3, r3, #31
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	fa22 f303 	lsr.w	r3, r2, r3
 800724e:	4a07      	ldr	r2, [pc, #28]	@ (800726c <HAL_RCC_GetHCLKFreq+0x58>)
 8007250:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007252:	4a07      	ldr	r2, [pc, #28]	@ (8007270 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007258:	4b04      	ldr	r3, [pc, #16]	@ (800726c <HAL_RCC_GetHCLKFreq+0x58>)
 800725a:	681b      	ldr	r3, [r3, #0]
}
 800725c:	4618      	mov	r0, r3
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	58024400 	.word	0x58024400
 8007268:	0800bc54 	.word	0x0800bc54
 800726c:	24000010 	.word	0x24000010
 8007270:	2400000c 	.word	0x2400000c

08007274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007278:	f7ff ffcc 	bl	8007214 <HAL_RCC_GetHCLKFreq>
 800727c:	4602      	mov	r2, r0
 800727e:	4b06      	ldr	r3, [pc, #24]	@ (8007298 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007280:	69db      	ldr	r3, [r3, #28]
 8007282:	091b      	lsrs	r3, r3, #4
 8007284:	f003 0307 	and.w	r3, r3, #7
 8007288:	4904      	ldr	r1, [pc, #16]	@ (800729c <HAL_RCC_GetPCLK1Freq+0x28>)
 800728a:	5ccb      	ldrb	r3, [r1, r3]
 800728c:	f003 031f 	and.w	r3, r3, #31
 8007290:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007294:	4618      	mov	r0, r3
 8007296:	bd80      	pop	{r7, pc}
 8007298:	58024400 	.word	0x58024400
 800729c:	0800bc54 	.word	0x0800bc54

080072a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80072a4:	f7ff ffb6 	bl	8007214 <HAL_RCC_GetHCLKFreq>
 80072a8:	4602      	mov	r2, r0
 80072aa:	4b06      	ldr	r3, [pc, #24]	@ (80072c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80072ac:	69db      	ldr	r3, [r3, #28]
 80072ae:	0a1b      	lsrs	r3, r3, #8
 80072b0:	f003 0307 	and.w	r3, r3, #7
 80072b4:	4904      	ldr	r1, [pc, #16]	@ (80072c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80072b6:	5ccb      	ldrb	r3, [r1, r3]
 80072b8:	f003 031f 	and.w	r3, r3, #31
 80072bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	58024400 	.word	0x58024400
 80072c8:	0800bc54 	.word	0x0800bc54

080072cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072d0:	b0c6      	sub	sp, #280	@ 0x118
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80072d8:	2300      	movs	r3, #0
 80072da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80072de:	2300      	movs	r3, #0
 80072e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80072e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80072f0:	2500      	movs	r5, #0
 80072f2:	ea54 0305 	orrs.w	r3, r4, r5
 80072f6:	d049      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80072f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007302:	d02f      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007304:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007308:	d828      	bhi.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800730a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800730e:	d01a      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007310:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007314:	d822      	bhi.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007316:	2b00      	cmp	r3, #0
 8007318:	d003      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800731a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800731e:	d007      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007320:	e01c      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007322:	4bab      	ldr	r3, [pc, #684]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007326:	4aaa      	ldr	r2, [pc, #680]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800732c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800732e:	e01a      	b.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007334:	3308      	adds	r3, #8
 8007336:	2102      	movs	r1, #2
 8007338:	4618      	mov	r0, r3
 800733a:	f002 fa49 	bl	80097d0 <RCCEx_PLL2_Config>
 800733e:	4603      	mov	r3, r0
 8007340:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007344:	e00f      	b.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800734a:	3328      	adds	r3, #40	@ 0x28
 800734c:	2102      	movs	r1, #2
 800734e:	4618      	mov	r0, r3
 8007350:	f002 faf0 	bl	8009934 <RCCEx_PLL3_Config>
 8007354:	4603      	mov	r3, r0
 8007356:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800735a:	e004      	b.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007362:	e000      	b.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007364:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007366:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10a      	bne.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800736e:	4b98      	ldr	r3, [pc, #608]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007372:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800737a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800737c:	4a94      	ldr	r2, [pc, #592]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800737e:	430b      	orrs	r3, r1
 8007380:	6513      	str	r3, [r2, #80]	@ 0x50
 8007382:	e003      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007384:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007388:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800738c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007394:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007398:	f04f 0900 	mov.w	r9, #0
 800739c:	ea58 0309 	orrs.w	r3, r8, r9
 80073a0:	d047      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80073a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073a8:	2b04      	cmp	r3, #4
 80073aa:	d82a      	bhi.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80073ac:	a201      	add	r2, pc, #4	@ (adr r2, 80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80073ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b2:	bf00      	nop
 80073b4:	080073c9 	.word	0x080073c9
 80073b8:	080073d7 	.word	0x080073d7
 80073bc:	080073ed 	.word	0x080073ed
 80073c0:	0800740b 	.word	0x0800740b
 80073c4:	0800740b 	.word	0x0800740b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073c8:	4b81      	ldr	r3, [pc, #516]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80073ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073cc:	4a80      	ldr	r2, [pc, #512]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80073ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073d4:	e01a      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073da:	3308      	adds	r3, #8
 80073dc:	2100      	movs	r1, #0
 80073de:	4618      	mov	r0, r3
 80073e0:	f002 f9f6 	bl	80097d0 <RCCEx_PLL2_Config>
 80073e4:	4603      	mov	r3, r0
 80073e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073ea:	e00f      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f0:	3328      	adds	r3, #40	@ 0x28
 80073f2:	2100      	movs	r1, #0
 80073f4:	4618      	mov	r0, r3
 80073f6:	f002 fa9d 	bl	8009934 <RCCEx_PLL3_Config>
 80073fa:	4603      	mov	r3, r0
 80073fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007400:	e004      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007408:	e000      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800740a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800740c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10a      	bne.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007414:	4b6e      	ldr	r3, [pc, #440]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007418:	f023 0107 	bic.w	r1, r3, #7
 800741c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007422:	4a6b      	ldr	r2, [pc, #428]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007424:	430b      	orrs	r3, r1
 8007426:	6513      	str	r3, [r2, #80]	@ 0x50
 8007428:	e003      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800742a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800742e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800743e:	f04f 0b00 	mov.w	fp, #0
 8007442:	ea5a 030b 	orrs.w	r3, sl, fp
 8007446:	d05b      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800744c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007450:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007454:	d03b      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007456:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800745a:	d834      	bhi.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800745c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007460:	d037      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007462:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007466:	d82e      	bhi.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007468:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800746c:	d033      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800746e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007472:	d828      	bhi.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007474:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007478:	d01a      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800747a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800747e:	d822      	bhi.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007480:	2b00      	cmp	r3, #0
 8007482:	d003      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007484:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007488:	d007      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800748a:	e01c      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800748c:	4b50      	ldr	r3, [pc, #320]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800748e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007490:	4a4f      	ldr	r2, [pc, #316]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007492:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007496:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007498:	e01e      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800749a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800749e:	3308      	adds	r3, #8
 80074a0:	2100      	movs	r1, #0
 80074a2:	4618      	mov	r0, r3
 80074a4:	f002 f994 	bl	80097d0 <RCCEx_PLL2_Config>
 80074a8:	4603      	mov	r3, r0
 80074aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80074ae:	e013      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b4:	3328      	adds	r3, #40	@ 0x28
 80074b6:	2100      	movs	r1, #0
 80074b8:	4618      	mov	r0, r3
 80074ba:	f002 fa3b 	bl	8009934 <RCCEx_PLL3_Config>
 80074be:	4603      	mov	r3, r0
 80074c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074c4:	e008      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80074cc:	e004      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80074ce:	bf00      	nop
 80074d0:	e002      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80074d2:	bf00      	nop
 80074d4:	e000      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80074d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10b      	bne.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80074e0:	4b3b      	ldr	r3, [pc, #236]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80074e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074e4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80074e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80074f0:	4a37      	ldr	r2, [pc, #220]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80074f2:	430b      	orrs	r3, r1
 80074f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80074f6:	e003      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007508:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800750c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007510:	2300      	movs	r3, #0
 8007512:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007516:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800751a:	460b      	mov	r3, r1
 800751c:	4313      	orrs	r3, r2
 800751e:	d05d      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007524:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007528:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800752c:	d03b      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800752e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007532:	d834      	bhi.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007534:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007538:	d037      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800753a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800753e:	d82e      	bhi.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007540:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007544:	d033      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8007546:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800754a:	d828      	bhi.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800754c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007550:	d01a      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8007552:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007556:	d822      	bhi.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007558:	2b00      	cmp	r3, #0
 800755a:	d003      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800755c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007560:	d007      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007562:	e01c      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007564:	4b1a      	ldr	r3, [pc, #104]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007568:	4a19      	ldr	r2, [pc, #100]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800756a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800756e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007570:	e01e      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007576:	3308      	adds	r3, #8
 8007578:	2100      	movs	r1, #0
 800757a:	4618      	mov	r0, r3
 800757c:	f002 f928 	bl	80097d0 <RCCEx_PLL2_Config>
 8007580:	4603      	mov	r3, r0
 8007582:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007586:	e013      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800758c:	3328      	adds	r3, #40	@ 0x28
 800758e:	2100      	movs	r1, #0
 8007590:	4618      	mov	r0, r3
 8007592:	f002 f9cf 	bl	8009934 <RCCEx_PLL3_Config>
 8007596:	4603      	mov	r3, r0
 8007598:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800759c:	e008      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80075a4:	e004      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80075a6:	bf00      	nop
 80075a8:	e002      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80075aa:	bf00      	nop
 80075ac:	e000      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80075ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10d      	bne.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80075b8:	4b05      	ldr	r3, [pc, #20]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075bc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80075c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80075c8:	4a01      	ldr	r2, [pc, #4]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075ca:	430b      	orrs	r3, r1
 80075cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80075ce:	e005      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80075d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80075dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80075e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80075ec:	2300      	movs	r3, #0
 80075ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80075f2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80075f6:	460b      	mov	r3, r1
 80075f8:	4313      	orrs	r3, r2
 80075fa:	d03a      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80075fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007602:	2b30      	cmp	r3, #48	@ 0x30
 8007604:	d01f      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8007606:	2b30      	cmp	r3, #48	@ 0x30
 8007608:	d819      	bhi.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800760a:	2b20      	cmp	r3, #32
 800760c:	d00c      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800760e:	2b20      	cmp	r3, #32
 8007610:	d815      	bhi.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007612:	2b00      	cmp	r3, #0
 8007614:	d019      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007616:	2b10      	cmp	r3, #16
 8007618:	d111      	bne.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800761a:	4baa      	ldr	r3, [pc, #680]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800761c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800761e:	4aa9      	ldr	r2, [pc, #676]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007620:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007624:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007626:	e011      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800762c:	3308      	adds	r3, #8
 800762e:	2102      	movs	r1, #2
 8007630:	4618      	mov	r0, r3
 8007632:	f002 f8cd 	bl	80097d0 <RCCEx_PLL2_Config>
 8007636:	4603      	mov	r3, r0
 8007638:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800763c:	e006      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007644:	e002      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007646:	bf00      	nop
 8007648:	e000      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800764a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800764c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10a      	bne.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007654:	4b9b      	ldr	r3, [pc, #620]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007658:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800765c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007662:	4a98      	ldr	r2, [pc, #608]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007664:	430b      	orrs	r3, r1
 8007666:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007668:	e003      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800766a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800766e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800767e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007682:	2300      	movs	r3, #0
 8007684:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007688:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800768c:	460b      	mov	r3, r1
 800768e:	4313      	orrs	r3, r2
 8007690:	d051      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007698:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800769c:	d035      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800769e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076a2:	d82e      	bhi.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80076a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80076a8:	d031      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80076aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80076ae:	d828      	bhi.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80076b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076b4:	d01a      	beq.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x420>
 80076b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076ba:	d822      	bhi.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d003      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80076c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076c4:	d007      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80076c6:	e01c      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076c8:	4b7e      	ldr	r3, [pc, #504]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076cc:	4a7d      	ldr	r2, [pc, #500]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80076d4:	e01c      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076da:	3308      	adds	r3, #8
 80076dc:	2100      	movs	r1, #0
 80076de:	4618      	mov	r0, r3
 80076e0:	f002 f876 	bl	80097d0 <RCCEx_PLL2_Config>
 80076e4:	4603      	mov	r3, r0
 80076e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80076ea:	e011      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f0:	3328      	adds	r3, #40	@ 0x28
 80076f2:	2100      	movs	r1, #0
 80076f4:	4618      	mov	r0, r3
 80076f6:	f002 f91d 	bl	8009934 <RCCEx_PLL3_Config>
 80076fa:	4603      	mov	r3, r0
 80076fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007700:	e006      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007708:	e002      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800770a:	bf00      	nop
 800770c:	e000      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800770e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007710:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10a      	bne.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007718:	4b6a      	ldr	r3, [pc, #424]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800771a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800771c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007726:	4a67      	ldr	r2, [pc, #412]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007728:	430b      	orrs	r3, r1
 800772a:	6513      	str	r3, [r2, #80]	@ 0x50
 800772c:	e003      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800772e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007732:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800773a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007742:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007746:	2300      	movs	r3, #0
 8007748:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800774c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007750:	460b      	mov	r3, r1
 8007752:	4313      	orrs	r3, r2
 8007754:	d053      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800775a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800775c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007760:	d033      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8007762:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007766:	d82c      	bhi.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007768:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800776c:	d02f      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x502>
 800776e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007772:	d826      	bhi.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007774:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007778:	d02b      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800777a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800777e:	d820      	bhi.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007780:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007784:	d012      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8007786:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800778a:	d81a      	bhi.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800778c:	2b00      	cmp	r3, #0
 800778e:	d022      	beq.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007794:	d115      	bne.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800779a:	3308      	adds	r3, #8
 800779c:	2101      	movs	r1, #1
 800779e:	4618      	mov	r0, r3
 80077a0:	f002 f816 	bl	80097d0 <RCCEx_PLL2_Config>
 80077a4:	4603      	mov	r3, r0
 80077a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80077aa:	e015      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b0:	3328      	adds	r3, #40	@ 0x28
 80077b2:	2101      	movs	r1, #1
 80077b4:	4618      	mov	r0, r3
 80077b6:	f002 f8bd 	bl	8009934 <RCCEx_PLL3_Config>
 80077ba:	4603      	mov	r3, r0
 80077bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80077c0:	e00a      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80077c8:	e006      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80077ca:	bf00      	nop
 80077cc:	e004      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80077ce:	bf00      	nop
 80077d0:	e002      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80077d2:	bf00      	nop
 80077d4:	e000      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80077d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10a      	bne.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80077e0:	4b38      	ldr	r3, [pc, #224]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077e4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80077e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077ee:	4a35      	ldr	r2, [pc, #212]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077f0:	430b      	orrs	r3, r1
 80077f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80077f4:	e003      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80077fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007806:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800780a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800780e:	2300      	movs	r3, #0
 8007810:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007814:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007818:	460b      	mov	r3, r1
 800781a:	4313      	orrs	r3, r2
 800781c:	d058      	beq.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800781e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007822:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007826:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800782a:	d033      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800782c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007830:	d82c      	bhi.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007836:	d02f      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800783c:	d826      	bhi.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800783e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007842:	d02b      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007844:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007848:	d820      	bhi.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800784a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800784e:	d012      	beq.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007850:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007854:	d81a      	bhi.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007856:	2b00      	cmp	r3, #0
 8007858:	d022      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800785a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800785e:	d115      	bne.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007864:	3308      	adds	r3, #8
 8007866:	2101      	movs	r1, #1
 8007868:	4618      	mov	r0, r3
 800786a:	f001 ffb1 	bl	80097d0 <RCCEx_PLL2_Config>
 800786e:	4603      	mov	r3, r0
 8007870:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007874:	e015      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800787a:	3328      	adds	r3, #40	@ 0x28
 800787c:	2101      	movs	r1, #1
 800787e:	4618      	mov	r0, r3
 8007880:	f002 f858 	bl	8009934 <RCCEx_PLL3_Config>
 8007884:	4603      	mov	r3, r0
 8007886:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800788a:	e00a      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007892:	e006      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007894:	bf00      	nop
 8007896:	e004      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007898:	bf00      	nop
 800789a:	e002      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800789c:	bf00      	nop
 800789e:	e000      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80078a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10e      	bne.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80078aa:	4b06      	ldr	r3, [pc, #24]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80078ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078ae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80078b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80078ba:	4a02      	ldr	r2, [pc, #8]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80078bc:	430b      	orrs	r3, r1
 80078be:	6593      	str	r3, [r2, #88]	@ 0x58
 80078c0:	e006      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80078c2:	bf00      	nop
 80078c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80078d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80078dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80078e0:	2300      	movs	r3, #0
 80078e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80078e6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80078ea:	460b      	mov	r3, r1
 80078ec:	4313      	orrs	r3, r2
 80078ee:	d037      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80078f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078fa:	d00e      	beq.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80078fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007900:	d816      	bhi.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007902:	2b00      	cmp	r3, #0
 8007904:	d018      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007906:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800790a:	d111      	bne.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800790c:	4bc4      	ldr	r3, [pc, #784]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800790e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007910:	4ac3      	ldr	r2, [pc, #780]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007912:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007916:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007918:	e00f      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800791a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800791e:	3308      	adds	r3, #8
 8007920:	2101      	movs	r1, #1
 8007922:	4618      	mov	r0, r3
 8007924:	f001 ff54 	bl	80097d0 <RCCEx_PLL2_Config>
 8007928:	4603      	mov	r3, r0
 800792a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800792e:	e004      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007936:	e000      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007938:	bf00      	nop
    }

    if (ret == HAL_OK)
 800793a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10a      	bne.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007942:	4bb7      	ldr	r3, [pc, #732]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007946:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800794a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800794e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007950:	4ab3      	ldr	r2, [pc, #716]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007952:	430b      	orrs	r3, r1
 8007954:	6513      	str	r3, [r2, #80]	@ 0x50
 8007956:	e003      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007958:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800795c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007968:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800796c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007970:	2300      	movs	r3, #0
 8007972:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007976:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800797a:	460b      	mov	r3, r1
 800797c:	4313      	orrs	r3, r2
 800797e:	d039      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007984:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007986:	2b03      	cmp	r3, #3
 8007988:	d81c      	bhi.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800798a:	a201      	add	r2, pc, #4	@ (adr r2, 8007990 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800798c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007990:	080079cd 	.word	0x080079cd
 8007994:	080079a1 	.word	0x080079a1
 8007998:	080079af 	.word	0x080079af
 800799c:	080079cd 	.word	0x080079cd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079a0:	4b9f      	ldr	r3, [pc, #636]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a4:	4a9e      	ldr	r2, [pc, #632]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80079ac:	e00f      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079b2:	3308      	adds	r3, #8
 80079b4:	2102      	movs	r1, #2
 80079b6:	4618      	mov	r0, r3
 80079b8:	f001 ff0a 	bl	80097d0 <RCCEx_PLL2_Config>
 80079bc:	4603      	mov	r3, r0
 80079be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80079c2:	e004      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80079ca:	e000      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80079cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10a      	bne.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80079d6:	4b92      	ldr	r3, [pc, #584]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079da:	f023 0103 	bic.w	r1, r3, #3
 80079de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079e4:	4a8e      	ldr	r2, [pc, #568]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079e6:	430b      	orrs	r3, r1
 80079e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80079ea:	e003      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007a00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a04:	2300      	movs	r3, #0
 8007a06:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a0a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007a0e:	460b      	mov	r3, r1
 8007a10:	4313      	orrs	r3, r2
 8007a12:	f000 8099 	beq.w	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a16:	4b83      	ldr	r3, [pc, #524]	@ (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a82      	ldr	r2, [pc, #520]	@ (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a22:	f7fb f851 	bl	8002ac8 <HAL_GetTick>
 8007a26:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a2a:	e00b      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a2c:	f7fb f84c 	bl	8002ac8 <HAL_GetTick>
 8007a30:	4602      	mov	r2, r0
 8007a32:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	2b64      	cmp	r3, #100	@ 0x64
 8007a3a:	d903      	bls.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a42:	e005      	b.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a44:	4b77      	ldr	r3, [pc, #476]	@ (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d0ed      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007a50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d173      	bne.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007a58:	4b71      	ldr	r3, [pc, #452]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a5a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007a64:	4053      	eors	r3, r2
 8007a66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d015      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a6e:	4b6c      	ldr	r3, [pc, #432]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a76:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a7a:	4b69      	ldr	r3, [pc, #420]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a7e:	4a68      	ldr	r2, [pc, #416]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a84:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a86:	4b66      	ldr	r3, [pc, #408]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a8a:	4a65      	ldr	r2, [pc, #404]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a90:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007a92:	4a63      	ldr	r2, [pc, #396]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a98:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007aa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007aa6:	d118      	bne.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aa8:	f7fb f80e 	bl	8002ac8 <HAL_GetTick>
 8007aac:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ab0:	e00d      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ab2:	f7fb f809 	bl	8002ac8 <HAL_GetTick>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007abc:	1ad2      	subs	r2, r2, r3
 8007abe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d903      	bls.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007acc:	e005      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ace:	4b54      	ldr	r3, [pc, #336]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ad2:	f003 0302 	and.w	r3, r3, #2
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d0eb      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007ada:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d129      	bne.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ae6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007aea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007aee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007af2:	d10e      	bne.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007af4:	4b4a      	ldr	r3, [pc, #296]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b04:	091a      	lsrs	r2, r3, #4
 8007b06:	4b48      	ldr	r3, [pc, #288]	@ (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007b08:	4013      	ands	r3, r2
 8007b0a:	4a45      	ldr	r2, [pc, #276]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b0c:	430b      	orrs	r3, r1
 8007b0e:	6113      	str	r3, [r2, #16]
 8007b10:	e005      	b.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007b12:	4b43      	ldr	r3, [pc, #268]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	4a42      	ldr	r2, [pc, #264]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b18:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007b1c:	6113      	str	r3, [r2, #16]
 8007b1e:	4b40      	ldr	r3, [pc, #256]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b20:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b2e:	4a3c      	ldr	r2, [pc, #240]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b30:	430b      	orrs	r3, r1
 8007b32:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b34:	e008      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b3a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8007b3e:	e003      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b50:	f002 0301 	and.w	r3, r2, #1
 8007b54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b58:	2300      	movs	r3, #0
 8007b5a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007b5e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007b62:	460b      	mov	r3, r1
 8007b64:	4313      	orrs	r3, r2
 8007b66:	f000 808f 	beq.w	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b70:	2b28      	cmp	r3, #40	@ 0x28
 8007b72:	d871      	bhi.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007b74:	a201      	add	r2, pc, #4	@ (adr r2, 8007b7c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7a:	bf00      	nop
 8007b7c:	08007c61 	.word	0x08007c61
 8007b80:	08007c59 	.word	0x08007c59
 8007b84:	08007c59 	.word	0x08007c59
 8007b88:	08007c59 	.word	0x08007c59
 8007b8c:	08007c59 	.word	0x08007c59
 8007b90:	08007c59 	.word	0x08007c59
 8007b94:	08007c59 	.word	0x08007c59
 8007b98:	08007c59 	.word	0x08007c59
 8007b9c:	08007c2d 	.word	0x08007c2d
 8007ba0:	08007c59 	.word	0x08007c59
 8007ba4:	08007c59 	.word	0x08007c59
 8007ba8:	08007c59 	.word	0x08007c59
 8007bac:	08007c59 	.word	0x08007c59
 8007bb0:	08007c59 	.word	0x08007c59
 8007bb4:	08007c59 	.word	0x08007c59
 8007bb8:	08007c59 	.word	0x08007c59
 8007bbc:	08007c43 	.word	0x08007c43
 8007bc0:	08007c59 	.word	0x08007c59
 8007bc4:	08007c59 	.word	0x08007c59
 8007bc8:	08007c59 	.word	0x08007c59
 8007bcc:	08007c59 	.word	0x08007c59
 8007bd0:	08007c59 	.word	0x08007c59
 8007bd4:	08007c59 	.word	0x08007c59
 8007bd8:	08007c59 	.word	0x08007c59
 8007bdc:	08007c61 	.word	0x08007c61
 8007be0:	08007c59 	.word	0x08007c59
 8007be4:	08007c59 	.word	0x08007c59
 8007be8:	08007c59 	.word	0x08007c59
 8007bec:	08007c59 	.word	0x08007c59
 8007bf0:	08007c59 	.word	0x08007c59
 8007bf4:	08007c59 	.word	0x08007c59
 8007bf8:	08007c59 	.word	0x08007c59
 8007bfc:	08007c61 	.word	0x08007c61
 8007c00:	08007c59 	.word	0x08007c59
 8007c04:	08007c59 	.word	0x08007c59
 8007c08:	08007c59 	.word	0x08007c59
 8007c0c:	08007c59 	.word	0x08007c59
 8007c10:	08007c59 	.word	0x08007c59
 8007c14:	08007c59 	.word	0x08007c59
 8007c18:	08007c59 	.word	0x08007c59
 8007c1c:	08007c61 	.word	0x08007c61
 8007c20:	58024400 	.word	0x58024400
 8007c24:	58024800 	.word	0x58024800
 8007c28:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c30:	3308      	adds	r3, #8
 8007c32:	2101      	movs	r1, #1
 8007c34:	4618      	mov	r0, r3
 8007c36:	f001 fdcb 	bl	80097d0 <RCCEx_PLL2_Config>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007c40:	e00f      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c46:	3328      	adds	r3, #40	@ 0x28
 8007c48:	2101      	movs	r1, #1
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f001 fe72 	bl	8009934 <RCCEx_PLL3_Config>
 8007c50:	4603      	mov	r3, r0
 8007c52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007c56:	e004      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c5e:	e000      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007c60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10a      	bne.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007c6a:	4bbf      	ldr	r3, [pc, #764]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c6e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c78:	4abb      	ldr	r2, [pc, #748]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007c7a:	430b      	orrs	r3, r1
 8007c7c:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c7e:	e003      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c90:	f002 0302 	and.w	r3, r2, #2
 8007c94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c98:	2300      	movs	r3, #0
 8007c9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c9e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	d041      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cae:	2b05      	cmp	r3, #5
 8007cb0:	d824      	bhi.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb8:	08007d05 	.word	0x08007d05
 8007cbc:	08007cd1 	.word	0x08007cd1
 8007cc0:	08007ce7 	.word	0x08007ce7
 8007cc4:	08007d05 	.word	0x08007d05
 8007cc8:	08007d05 	.word	0x08007d05
 8007ccc:	08007d05 	.word	0x08007d05
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cd4:	3308      	adds	r3, #8
 8007cd6:	2101      	movs	r1, #1
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f001 fd79 	bl	80097d0 <RCCEx_PLL2_Config>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007ce4:	e00f      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cea:	3328      	adds	r3, #40	@ 0x28
 8007cec:	2101      	movs	r1, #1
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f001 fe20 	bl	8009934 <RCCEx_PLL3_Config>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007cfa:	e004      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d02:	e000      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10a      	bne.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007d0e:	4b96      	ldr	r3, [pc, #600]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d12:	f023 0107 	bic.w	r1, r3, #7
 8007d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d1c:	4a92      	ldr	r2, [pc, #584]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007d1e:	430b      	orrs	r3, r1
 8007d20:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d22:	e003      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d34:	f002 0304 	and.w	r3, r2, #4
 8007d38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d42:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007d46:	460b      	mov	r3, r1
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	d044      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d54:	2b05      	cmp	r3, #5
 8007d56:	d825      	bhi.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007d58:	a201      	add	r2, pc, #4	@ (adr r2, 8007d60 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5e:	bf00      	nop
 8007d60:	08007dad 	.word	0x08007dad
 8007d64:	08007d79 	.word	0x08007d79
 8007d68:	08007d8f 	.word	0x08007d8f
 8007d6c:	08007dad 	.word	0x08007dad
 8007d70:	08007dad 	.word	0x08007dad
 8007d74:	08007dad 	.word	0x08007dad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d7c:	3308      	adds	r3, #8
 8007d7e:	2101      	movs	r1, #1
 8007d80:	4618      	mov	r0, r3
 8007d82:	f001 fd25 	bl	80097d0 <RCCEx_PLL2_Config>
 8007d86:	4603      	mov	r3, r0
 8007d88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007d8c:	e00f      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d92:	3328      	adds	r3, #40	@ 0x28
 8007d94:	2101      	movs	r1, #1
 8007d96:	4618      	mov	r0, r3
 8007d98:	f001 fdcc 	bl	8009934 <RCCEx_PLL3_Config>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007da2:	e004      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007daa:	e000      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007dac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d10b      	bne.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007db6:	4b6c      	ldr	r3, [pc, #432]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dba:	f023 0107 	bic.w	r1, r3, #7
 8007dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dc6:	4a68      	ldr	r2, [pc, #416]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007dc8:	430b      	orrs	r3, r1
 8007dca:	6593      	str	r3, [r2, #88]	@ 0x58
 8007dcc:	e003      	b.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dd2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dde:	f002 0320 	and.w	r3, r2, #32
 8007de2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007de6:	2300      	movs	r3, #0
 8007de8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007dec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007df0:	460b      	mov	r3, r1
 8007df2:	4313      	orrs	r3, r2
 8007df4:	d055      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e02:	d033      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007e04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e08:	d82c      	bhi.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e0e:	d02f      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007e10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e14:	d826      	bhi.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007e16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e1a:	d02b      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007e1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e20:	d820      	bhi.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007e22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e26:	d012      	beq.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007e28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e2c:	d81a      	bhi.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d022      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007e32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e36:	d115      	bne.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e3c:	3308      	adds	r3, #8
 8007e3e:	2100      	movs	r1, #0
 8007e40:	4618      	mov	r0, r3
 8007e42:	f001 fcc5 	bl	80097d0 <RCCEx_PLL2_Config>
 8007e46:	4603      	mov	r3, r0
 8007e48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007e4c:	e015      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e52:	3328      	adds	r3, #40	@ 0x28
 8007e54:	2102      	movs	r1, #2
 8007e56:	4618      	mov	r0, r3
 8007e58:	f001 fd6c 	bl	8009934 <RCCEx_PLL3_Config>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007e62:	e00a      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e6a:	e006      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007e6c:	bf00      	nop
 8007e6e:	e004      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007e70:	bf00      	nop
 8007e72:	e002      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007e74:	bf00      	nop
 8007e76:	e000      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10b      	bne.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e82:	4b39      	ldr	r3, [pc, #228]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e86:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e92:	4a35      	ldr	r2, [pc, #212]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007e94:	430b      	orrs	r3, r1
 8007e96:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e98:	e003      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eaa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007eae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007eb8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	d058      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ec6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007eca:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007ece:	d033      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007ed0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007ed4:	d82c      	bhi.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007ed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eda:	d02f      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007edc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ee0:	d826      	bhi.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007ee2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ee6:	d02b      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007ee8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007eec:	d820      	bhi.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007eee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ef2:	d012      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007ef4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ef8:	d81a      	bhi.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d022      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f02:	d115      	bne.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f08:	3308      	adds	r3, #8
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f001 fc5f 	bl	80097d0 <RCCEx_PLL2_Config>
 8007f12:	4603      	mov	r3, r0
 8007f14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007f18:	e015      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f1e:	3328      	adds	r3, #40	@ 0x28
 8007f20:	2102      	movs	r1, #2
 8007f22:	4618      	mov	r0, r3
 8007f24:	f001 fd06 	bl	8009934 <RCCEx_PLL3_Config>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007f2e:	e00a      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f36:	e006      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007f38:	bf00      	nop
 8007f3a:	e004      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007f3c:	bf00      	nop
 8007f3e:	e002      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007f40:	bf00      	nop
 8007f42:	e000      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10e      	bne.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007f4e:	4b06      	ldr	r3, [pc, #24]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f52:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f5e:	4a02      	ldr	r2, [pc, #8]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007f60:	430b      	orrs	r3, r1
 8007f62:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f64:	e006      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007f66:	bf00      	nop
 8007f68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007f80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f84:	2300      	movs	r3, #0
 8007f86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007f8a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007f8e:	460b      	mov	r3, r1
 8007f90:	4313      	orrs	r3, r2
 8007f92:	d055      	beq.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f9c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007fa0:	d033      	beq.n	800800a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007fa2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007fa6:	d82c      	bhi.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007fa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fac:	d02f      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007fae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fb2:	d826      	bhi.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007fb4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007fb8:	d02b      	beq.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007fba:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007fbe:	d820      	bhi.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007fc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fc4:	d012      	beq.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007fc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fca:	d81a      	bhi.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d022      	beq.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007fd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fd4:	d115      	bne.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fda:	3308      	adds	r3, #8
 8007fdc:	2100      	movs	r1, #0
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f001 fbf6 	bl	80097d0 <RCCEx_PLL2_Config>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007fea:	e015      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ff0:	3328      	adds	r3, #40	@ 0x28
 8007ff2:	2102      	movs	r1, #2
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f001 fc9d 	bl	8009934 <RCCEx_PLL3_Config>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008000:	e00a      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008008:	e006      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800800a:	bf00      	nop
 800800c:	e004      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800800e:	bf00      	nop
 8008010:	e002      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008012:	bf00      	nop
 8008014:	e000      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008016:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008018:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10b      	bne.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008020:	4ba0      	ldr	r3, [pc, #640]	@ (80082a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008024:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800802c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008030:	4a9c      	ldr	r2, [pc, #624]	@ (80082a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008032:	430b      	orrs	r3, r1
 8008034:	6593      	str	r3, [r2, #88]	@ 0x58
 8008036:	e003      	b.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008038:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800803c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008048:	f002 0308 	and.w	r3, r2, #8
 800804c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008050:	2300      	movs	r3, #0
 8008052:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008056:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800805a:	460b      	mov	r3, r1
 800805c:	4313      	orrs	r3, r2
 800805e:	d01e      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8008060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008064:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008068:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800806c:	d10c      	bne.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800806e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008072:	3328      	adds	r3, #40	@ 0x28
 8008074:	2102      	movs	r1, #2
 8008076:	4618      	mov	r0, r3
 8008078:	f001 fc5c 	bl	8009934 <RCCEx_PLL3_Config>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d002      	beq.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008088:	4b86      	ldr	r3, [pc, #536]	@ (80082a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800808a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800808c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008094:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008098:	4a82      	ldr	r2, [pc, #520]	@ (80082a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800809a:	430b      	orrs	r3, r1
 800809c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800809e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a6:	f002 0310 	and.w	r3, r2, #16
 80080aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80080ae:	2300      	movs	r3, #0
 80080b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80080b4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80080b8:	460b      	mov	r3, r1
 80080ba:	4313      	orrs	r3, r2
 80080bc:	d01e      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80080be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080ca:	d10c      	bne.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80080cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080d0:	3328      	adds	r3, #40	@ 0x28
 80080d2:	2102      	movs	r1, #2
 80080d4:	4618      	mov	r0, r3
 80080d6:	f001 fc2d 	bl	8009934 <RCCEx_PLL3_Config>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d002      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80080e6:	4b6f      	ldr	r3, [pc, #444]	@ (80082a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80080e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80080ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080f6:	4a6b      	ldr	r2, [pc, #428]	@ (80082a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80080f8:	430b      	orrs	r3, r1
 80080fa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80080fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008104:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008108:	67bb      	str	r3, [r7, #120]	@ 0x78
 800810a:	2300      	movs	r3, #0
 800810c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800810e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008112:	460b      	mov	r3, r1
 8008114:	4313      	orrs	r3, r2
 8008116:	d03e      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800811c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008120:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008124:	d022      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008126:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800812a:	d81b      	bhi.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800812c:	2b00      	cmp	r3, #0
 800812e:	d003      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8008130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008134:	d00b      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8008136:	e015      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800813c:	3308      	adds	r3, #8
 800813e:	2100      	movs	r1, #0
 8008140:	4618      	mov	r0, r3
 8008142:	f001 fb45 	bl	80097d0 <RCCEx_PLL2_Config>
 8008146:	4603      	mov	r3, r0
 8008148:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800814c:	e00f      	b.n	800816e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800814e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008152:	3328      	adds	r3, #40	@ 0x28
 8008154:	2102      	movs	r1, #2
 8008156:	4618      	mov	r0, r3
 8008158:	f001 fbec 	bl	8009934 <RCCEx_PLL3_Config>
 800815c:	4603      	mov	r3, r0
 800815e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008162:	e004      	b.n	800816e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800816a:	e000      	b.n	800816e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800816c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800816e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008172:	2b00      	cmp	r3, #0
 8008174:	d10b      	bne.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008176:	4b4b      	ldr	r3, [pc, #300]	@ (80082a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800817a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800817e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008182:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008186:	4a47      	ldr	r2, [pc, #284]	@ (80082a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008188:	430b      	orrs	r3, r1
 800818a:	6593      	str	r3, [r2, #88]	@ 0x58
 800818c:	e003      	b.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800818e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008192:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800819a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80081a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80081a4:	2300      	movs	r3, #0
 80081a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80081a8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80081ac:	460b      	mov	r3, r1
 80081ae:	4313      	orrs	r3, r2
 80081b0:	d03b      	beq.n	800822a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80081b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80081be:	d01f      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80081c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80081c4:	d818      	bhi.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80081c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081ca:	d003      	beq.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80081cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80081d0:	d007      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80081d2:	e011      	b.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081d4:	4b33      	ldr	r3, [pc, #204]	@ (80082a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80081d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d8:	4a32      	ldr	r2, [pc, #200]	@ (80082a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80081da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80081e0:	e00f      	b.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80081e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081e6:	3328      	adds	r3, #40	@ 0x28
 80081e8:	2101      	movs	r1, #1
 80081ea:	4618      	mov	r0, r3
 80081ec:	f001 fba2 	bl	8009934 <RCCEx_PLL3_Config>
 80081f0:	4603      	mov	r3, r0
 80081f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80081f6:	e004      	b.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80081fe:	e000      	b.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8008200:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008202:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008206:	2b00      	cmp	r3, #0
 8008208:	d10b      	bne.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800820a:	4b26      	ldr	r3, [pc, #152]	@ (80082a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800820c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800820e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008216:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800821a:	4a22      	ldr	r2, [pc, #136]	@ (80082a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800821c:	430b      	orrs	r3, r1
 800821e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008220:	e003      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008222:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008226:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800822a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800822e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008232:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008236:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008238:	2300      	movs	r3, #0
 800823a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800823c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008240:	460b      	mov	r3, r1
 8008242:	4313      	orrs	r3, r2
 8008244:	d034      	beq.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800824a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800824c:	2b00      	cmp	r3, #0
 800824e:	d003      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8008250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008254:	d007      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8008256:	e011      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008258:	4b12      	ldr	r3, [pc, #72]	@ (80082a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800825a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800825c:	4a11      	ldr	r2, [pc, #68]	@ (80082a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800825e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008262:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008264:	e00e      	b.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800826a:	3308      	adds	r3, #8
 800826c:	2102      	movs	r1, #2
 800826e:	4618      	mov	r0, r3
 8008270:	f001 faae 	bl	80097d0 <RCCEx_PLL2_Config>
 8008274:	4603      	mov	r3, r0
 8008276:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800827a:	e003      	b.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008282:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008284:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10d      	bne.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800828c:	4b05      	ldr	r3, [pc, #20]	@ (80082a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800828e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008290:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800829a:	4a02      	ldr	r2, [pc, #8]	@ (80082a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800829c:	430b      	orrs	r3, r1
 800829e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80082a0:	e006      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80082a2:	bf00      	nop
 80082a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80082b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80082bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80082be:	2300      	movs	r3, #0
 80082c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80082c2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80082c6:	460b      	mov	r3, r1
 80082c8:	4313      	orrs	r3, r2
 80082ca:	d00c      	beq.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80082cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082d0:	3328      	adds	r3, #40	@ 0x28
 80082d2:	2102      	movs	r1, #2
 80082d4:	4618      	mov	r0, r3
 80082d6:	f001 fb2d 	bl	8009934 <RCCEx_PLL3_Config>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d002      	beq.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80082e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80082f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80082f4:	2300      	movs	r3, #0
 80082f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80082f8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80082fc:	460b      	mov	r3, r1
 80082fe:	4313      	orrs	r3, r2
 8008300:	d036      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008306:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008308:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800830c:	d018      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800830e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008312:	d811      	bhi.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008314:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008318:	d014      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800831a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800831e:	d80b      	bhi.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008320:	2b00      	cmp	r3, #0
 8008322:	d011      	beq.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008324:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008328:	d106      	bne.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800832a:	4bb7      	ldr	r3, [pc, #732]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800832c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800832e:	4ab6      	ldr	r2, [pc, #728]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008330:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008334:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008336:	e008      	b.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800833e:	e004      	b.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008340:	bf00      	nop
 8008342:	e002      	b.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008344:	bf00      	nop
 8008346:	e000      	b.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800834a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10a      	bne.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008352:	4bad      	ldr	r3, [pc, #692]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008356:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800835a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800835e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008360:	4aa9      	ldr	r2, [pc, #676]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008362:	430b      	orrs	r3, r1
 8008364:	6553      	str	r3, [r2, #84]	@ 0x54
 8008366:	e003      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008368:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800836c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008378:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800837c:	653b      	str	r3, [r7, #80]	@ 0x50
 800837e:	2300      	movs	r3, #0
 8008380:	657b      	str	r3, [r7, #84]	@ 0x54
 8008382:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008386:	460b      	mov	r3, r1
 8008388:	4313      	orrs	r3, r2
 800838a:	d009      	beq.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800838c:	4b9e      	ldr	r3, [pc, #632]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800838e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008390:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800839a:	4a9b      	ldr	r2, [pc, #620]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800839c:	430b      	orrs	r3, r1
 800839e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80083a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80083ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083ae:	2300      	movs	r3, #0
 80083b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083b2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80083b6:	460b      	mov	r3, r1
 80083b8:	4313      	orrs	r3, r2
 80083ba:	d009      	beq.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80083bc:	4b92      	ldr	r3, [pc, #584]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80083be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083c0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80083c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083ca:	4a8f      	ldr	r2, [pc, #572]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80083cc:	430b      	orrs	r3, r1
 80083ce:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80083d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80083dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80083de:	2300      	movs	r3, #0
 80083e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80083e2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80083e6:	460b      	mov	r3, r1
 80083e8:	4313      	orrs	r3, r2
 80083ea:	d00e      	beq.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80083ec:	4b86      	ldr	r3, [pc, #536]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	4a85      	ldr	r2, [pc, #532]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80083f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80083f6:	6113      	str	r3, [r2, #16]
 80083f8:	4b83      	ldr	r3, [pc, #524]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80083fa:	6919      	ldr	r1, [r3, #16]
 80083fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008400:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008404:	4a80      	ldr	r2, [pc, #512]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008406:	430b      	orrs	r3, r1
 8008408:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800840a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800840e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008412:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008416:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008418:	2300      	movs	r3, #0
 800841a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800841c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008420:	460b      	mov	r3, r1
 8008422:	4313      	orrs	r3, r2
 8008424:	d009      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008426:	4b78      	ldr	r3, [pc, #480]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800842a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800842e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008434:	4a74      	ldr	r2, [pc, #464]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008436:	430b      	orrs	r3, r1
 8008438:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800843a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800843e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008442:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008446:	633b      	str	r3, [r7, #48]	@ 0x30
 8008448:	2300      	movs	r3, #0
 800844a:	637b      	str	r3, [r7, #52]	@ 0x34
 800844c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008450:	460b      	mov	r3, r1
 8008452:	4313      	orrs	r3, r2
 8008454:	d00a      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008456:	4b6c      	ldr	r3, [pc, #432]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800845a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800845e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008466:	4a68      	ldr	r2, [pc, #416]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008468:	430b      	orrs	r3, r1
 800846a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800846c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008474:	2100      	movs	r1, #0
 8008476:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008478:	f003 0301 	and.w	r3, r3, #1
 800847c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800847e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008482:	460b      	mov	r3, r1
 8008484:	4313      	orrs	r3, r2
 8008486:	d011      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800848c:	3308      	adds	r3, #8
 800848e:	2100      	movs	r1, #0
 8008490:	4618      	mov	r0, r3
 8008492:	f001 f99d 	bl	80097d0 <RCCEx_PLL2_Config>
 8008496:	4603      	mov	r3, r0
 8008498:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800849c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d003      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80084ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b4:	2100      	movs	r1, #0
 80084b6:	6239      	str	r1, [r7, #32]
 80084b8:	f003 0302 	and.w	r3, r3, #2
 80084bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80084be:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80084c2:	460b      	mov	r3, r1
 80084c4:	4313      	orrs	r3, r2
 80084c6:	d011      	beq.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80084c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084cc:	3308      	adds	r3, #8
 80084ce:	2101      	movs	r1, #1
 80084d0:	4618      	mov	r0, r3
 80084d2:	f001 f97d 	bl	80097d0 <RCCEx_PLL2_Config>
 80084d6:	4603      	mov	r3, r0
 80084d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80084dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d003      	beq.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80084ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f4:	2100      	movs	r1, #0
 80084f6:	61b9      	str	r1, [r7, #24]
 80084f8:	f003 0304 	and.w	r3, r3, #4
 80084fc:	61fb      	str	r3, [r7, #28]
 80084fe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008502:	460b      	mov	r3, r1
 8008504:	4313      	orrs	r3, r2
 8008506:	d011      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800850c:	3308      	adds	r3, #8
 800850e:	2102      	movs	r1, #2
 8008510:	4618      	mov	r0, r3
 8008512:	f001 f95d 	bl	80097d0 <RCCEx_PLL2_Config>
 8008516:	4603      	mov	r3, r0
 8008518:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800851c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008520:	2b00      	cmp	r3, #0
 8008522:	d003      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008524:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008528:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800852c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008534:	2100      	movs	r1, #0
 8008536:	6139      	str	r1, [r7, #16]
 8008538:	f003 0308 	and.w	r3, r3, #8
 800853c:	617b      	str	r3, [r7, #20]
 800853e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008542:	460b      	mov	r3, r1
 8008544:	4313      	orrs	r3, r2
 8008546:	d011      	beq.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800854c:	3328      	adds	r3, #40	@ 0x28
 800854e:	2100      	movs	r1, #0
 8008550:	4618      	mov	r0, r3
 8008552:	f001 f9ef 	bl	8009934 <RCCEx_PLL3_Config>
 8008556:	4603      	mov	r3, r0
 8008558:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800855c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008560:	2b00      	cmp	r3, #0
 8008562:	d003      	beq.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008564:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008568:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800856c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008574:	2100      	movs	r1, #0
 8008576:	60b9      	str	r1, [r7, #8]
 8008578:	f003 0310 	and.w	r3, r3, #16
 800857c:	60fb      	str	r3, [r7, #12]
 800857e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008582:	460b      	mov	r3, r1
 8008584:	4313      	orrs	r3, r2
 8008586:	d011      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800858c:	3328      	adds	r3, #40	@ 0x28
 800858e:	2101      	movs	r1, #1
 8008590:	4618      	mov	r0, r3
 8008592:	f001 f9cf 	bl	8009934 <RCCEx_PLL3_Config>
 8008596:	4603      	mov	r3, r0
 8008598:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800859c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d003      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80085ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b4:	2100      	movs	r1, #0
 80085b6:	6039      	str	r1, [r7, #0]
 80085b8:	f003 0320 	and.w	r3, r3, #32
 80085bc:	607b      	str	r3, [r7, #4]
 80085be:	e9d7 1200 	ldrd	r1, r2, [r7]
 80085c2:	460b      	mov	r3, r1
 80085c4:	4313      	orrs	r3, r2
 80085c6:	d011      	beq.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085cc:	3328      	adds	r3, #40	@ 0x28
 80085ce:	2102      	movs	r1, #2
 80085d0:	4618      	mov	r0, r3
 80085d2:	f001 f9af 	bl	8009934 <RCCEx_PLL3_Config>
 80085d6:	4603      	mov	r3, r0
 80085d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80085dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d003      	beq.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80085ec:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d101      	bne.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80085f4:	2300      	movs	r3, #0
 80085f6:	e000      	b.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8008600:	46bd      	mov	sp, r7
 8008602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008606:	bf00      	nop
 8008608:	58024400 	.word	0x58024400

0800860c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b090      	sub	sp, #64	@ 0x40
 8008610:	af00      	add	r7, sp, #0
 8008612:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008616:	e9d7 2300 	ldrd	r2, r3, [r7]
 800861a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800861e:	430b      	orrs	r3, r1
 8008620:	f040 8094 	bne.w	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008624:	4b9b      	ldr	r3, [pc, #620]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008628:	f003 0307 	and.w	r3, r3, #7
 800862c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800862e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008630:	2b04      	cmp	r3, #4
 8008632:	f200 8087 	bhi.w	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008636:	a201      	add	r2, pc, #4	@ (adr r2, 800863c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863c:	08008651 	.word	0x08008651
 8008640:	08008679 	.word	0x08008679
 8008644:	080086a1 	.word	0x080086a1
 8008648:	0800873d 	.word	0x0800873d
 800864c:	080086c9 	.word	0x080086c9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008650:	4b90      	ldr	r3, [pc, #576]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008658:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800865c:	d108      	bne.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800865e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008662:	4618      	mov	r0, r3
 8008664:	f000 ff62 	bl	800952c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800866a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800866c:	f000 bc93 	b.w	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008670:	2300      	movs	r3, #0
 8008672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008674:	f000 bc8f 	b.w	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008678:	4b86      	ldr	r3, [pc, #536]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008680:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008684:	d108      	bne.n	8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008686:	f107 0318 	add.w	r3, r7, #24
 800868a:	4618      	mov	r0, r3
 800868c:	f000 fca6 	bl	8008fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008694:	f000 bc7f 	b.w	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008698:	2300      	movs	r3, #0
 800869a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800869c:	f000 bc7b 	b.w	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086a0:	4b7c      	ldr	r3, [pc, #496]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086ac:	d108      	bne.n	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086ae:	f107 030c 	add.w	r3, r7, #12
 80086b2:	4618      	mov	r0, r3
 80086b4:	f000 fde6 	bl	8009284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086bc:	f000 bc6b 	b.w	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086c0:	2300      	movs	r3, #0
 80086c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086c4:	f000 bc67 	b.w	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086c8:	4b72      	ldr	r3, [pc, #456]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80086ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80086d0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086d2:	4b70      	ldr	r3, [pc, #448]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 0304 	and.w	r3, r3, #4
 80086da:	2b04      	cmp	r3, #4
 80086dc:	d10c      	bne.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80086de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d109      	bne.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086e4:	4b6b      	ldr	r3, [pc, #428]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	08db      	lsrs	r3, r3, #3
 80086ea:	f003 0303 	and.w	r3, r3, #3
 80086ee:	4a6a      	ldr	r2, [pc, #424]	@ (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80086f0:	fa22 f303 	lsr.w	r3, r2, r3
 80086f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086f6:	e01f      	b.n	8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086f8:	4b66      	ldr	r3, [pc, #408]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008700:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008704:	d106      	bne.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008708:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800870c:	d102      	bne.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800870e:	4b63      	ldr	r3, [pc, #396]	@ (800889c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008710:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008712:	e011      	b.n	8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008714:	4b5f      	ldr	r3, [pc, #380]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800871c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008720:	d106      	bne.n	8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008724:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008728:	d102      	bne.n	8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800872a:	4b5d      	ldr	r3, [pc, #372]	@ (80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800872c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800872e:	e003      	b.n	8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008730:	2300      	movs	r3, #0
 8008732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008734:	f000 bc2f 	b.w	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008738:	f000 bc2d 	b.w	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800873c:	4b59      	ldr	r3, [pc, #356]	@ (80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800873e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008740:	f000 bc29 	b.w	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008744:	2300      	movs	r3, #0
 8008746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008748:	f000 bc25 	b.w	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800874c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008750:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008754:	430b      	orrs	r3, r1
 8008756:	f040 80a7 	bne.w	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800875a:	4b4e      	ldr	r3, [pc, #312]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800875c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800875e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008762:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008766:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800876a:	d054      	beq.n	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800876c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800876e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008772:	f200 808b 	bhi.w	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008778:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800877c:	f000 8083 	beq.w	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8008780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008782:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008786:	f200 8081 	bhi.w	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800878a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800878c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008790:	d02f      	beq.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008794:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008798:	d878      	bhi.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800879a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879c:	2b00      	cmp	r3, #0
 800879e:	d004      	beq.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80087a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087a6:	d012      	beq.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80087a8:	e070      	b.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087aa:	4b3a      	ldr	r3, [pc, #232]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087b6:	d107      	bne.n	80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087bc:	4618      	mov	r0, r3
 80087be:	f000 feb5 	bl	800952c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087c6:	e3e6      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80087c8:	2300      	movs	r3, #0
 80087ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087cc:	e3e3      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087ce:	4b31      	ldr	r3, [pc, #196]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087da:	d107      	bne.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087dc:	f107 0318 	add.w	r3, r7, #24
 80087e0:	4618      	mov	r0, r3
 80087e2:	f000 fbfb 	bl	8008fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087ea:	e3d4      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80087ec:	2300      	movs	r3, #0
 80087ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087f0:	e3d1      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087f2:	4b28      	ldr	r3, [pc, #160]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087fe:	d107      	bne.n	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008800:	f107 030c 	add.w	r3, r7, #12
 8008804:	4618      	mov	r0, r3
 8008806:	f000 fd3d 	bl	8009284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800880e:	e3c2      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008810:	2300      	movs	r3, #0
 8008812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008814:	e3bf      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008816:	4b1f      	ldr	r3, [pc, #124]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800881a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800881e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008820:	4b1c      	ldr	r3, [pc, #112]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 0304 	and.w	r3, r3, #4
 8008828:	2b04      	cmp	r3, #4
 800882a:	d10c      	bne.n	8008846 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800882c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800882e:	2b00      	cmp	r3, #0
 8008830:	d109      	bne.n	8008846 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008832:	4b18      	ldr	r3, [pc, #96]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	08db      	lsrs	r3, r3, #3
 8008838:	f003 0303 	and.w	r3, r3, #3
 800883c:	4a16      	ldr	r2, [pc, #88]	@ (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800883e:	fa22 f303 	lsr.w	r3, r2, r3
 8008842:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008844:	e01e      	b.n	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008846:	4b13      	ldr	r3, [pc, #76]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800884e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008852:	d106      	bne.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008856:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800885a:	d102      	bne.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800885c:	4b0f      	ldr	r3, [pc, #60]	@ (800889c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800885e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008860:	e010      	b.n	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008862:	4b0c      	ldr	r3, [pc, #48]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800886a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800886e:	d106      	bne.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008872:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008876:	d102      	bne.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008878:	4b09      	ldr	r3, [pc, #36]	@ (80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800887a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800887c:	e002      	b.n	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800887e:	2300      	movs	r3, #0
 8008880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008882:	e388      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008884:	e387      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008886:	4b07      	ldr	r3, [pc, #28]	@ (80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800888a:	e384      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800888c:	2300      	movs	r3, #0
 800888e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008890:	e381      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008892:	bf00      	nop
 8008894:	58024400 	.word	0x58024400
 8008898:	03d09000 	.word	0x03d09000
 800889c:	003d0900 	.word	0x003d0900
 80088a0:	016e3600 	.word	0x016e3600
 80088a4:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80088a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088ac:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80088b0:	430b      	orrs	r3, r1
 80088b2:	f040 809c 	bne.w	80089ee <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80088b6:	4b9e      	ldr	r3, [pc, #632]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80088b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088ba:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80088be:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80088c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80088c6:	d054      	beq.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80088c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80088ce:	f200 808b 	bhi.w	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80088d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80088d8:	f000 8083 	beq.w	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80088dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80088e2:	f200 8081 	bhi.w	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80088e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088ec:	d02f      	beq.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80088ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088f4:	d878      	bhi.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80088f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d004      	beq.n	8008906 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80088fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008902:	d012      	beq.n	800892a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008904:	e070      	b.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008906:	4b8a      	ldr	r3, [pc, #552]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800890e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008912:	d107      	bne.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008914:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008918:	4618      	mov	r0, r3
 800891a:	f000 fe07 	bl	800952c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800891e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008922:	e338      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008924:	2300      	movs	r3, #0
 8008926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008928:	e335      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800892a:	4b81      	ldr	r3, [pc, #516]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008932:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008936:	d107      	bne.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008938:	f107 0318 	add.w	r3, r7, #24
 800893c:	4618      	mov	r0, r3
 800893e:	f000 fb4d 	bl	8008fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008946:	e326      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008948:	2300      	movs	r3, #0
 800894a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800894c:	e323      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800894e:	4b78      	ldr	r3, [pc, #480]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008956:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800895a:	d107      	bne.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800895c:	f107 030c 	add.w	r3, r7, #12
 8008960:	4618      	mov	r0, r3
 8008962:	f000 fc8f 	bl	8009284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800896a:	e314      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800896c:	2300      	movs	r3, #0
 800896e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008970:	e311      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008972:	4b6f      	ldr	r3, [pc, #444]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008976:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800897a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800897c:	4b6c      	ldr	r3, [pc, #432]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 0304 	and.w	r3, r3, #4
 8008984:	2b04      	cmp	r3, #4
 8008986:	d10c      	bne.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800898a:	2b00      	cmp	r3, #0
 800898c:	d109      	bne.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800898e:	4b68      	ldr	r3, [pc, #416]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	08db      	lsrs	r3, r3, #3
 8008994:	f003 0303 	and.w	r3, r3, #3
 8008998:	4a66      	ldr	r2, [pc, #408]	@ (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800899a:	fa22 f303 	lsr.w	r3, r2, r3
 800899e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089a0:	e01e      	b.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089a2:	4b63      	ldr	r3, [pc, #396]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089ae:	d106      	bne.n	80089be <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80089b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089b6:	d102      	bne.n	80089be <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80089b8:	4b5f      	ldr	r3, [pc, #380]	@ (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80089ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089bc:	e010      	b.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089be:	4b5c      	ldr	r3, [pc, #368]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089ca:	d106      	bne.n	80089da <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80089cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089d2:	d102      	bne.n	80089da <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80089d4:	4b59      	ldr	r3, [pc, #356]	@ (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089d8:	e002      	b.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80089da:	2300      	movs	r3, #0
 80089dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80089de:	e2da      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80089e0:	e2d9      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80089e2:	4b57      	ldr	r3, [pc, #348]	@ (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80089e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089e6:	e2d6      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80089e8:	2300      	movs	r3, #0
 80089ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089ec:	e2d3      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80089ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089f2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80089f6:	430b      	orrs	r3, r1
 80089f8:	f040 80a7 	bne.w	8008b4a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80089fc:	4b4c      	ldr	r3, [pc, #304]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a00:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008a04:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a0c:	d055      	beq.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a14:	f200 8096 	bhi.w	8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a1e:	f000 8084 	beq.w	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a24:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a28:	f200 808c 	bhi.w	8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a32:	d030      	beq.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a3a:	f200 8083 	bhi.w	8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d004      	beq.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a4a:	d012      	beq.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008a4c:	e07a      	b.n	8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a4e:	4b38      	ldr	r3, [pc, #224]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a5a:	d107      	bne.n	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a60:	4618      	mov	r0, r3
 8008a62:	f000 fd63 	bl	800952c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a6a:	e294      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a70:	e291      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a72:	4b2f      	ldr	r3, [pc, #188]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a7e:	d107      	bne.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a80:	f107 0318 	add.w	r3, r7, #24
 8008a84:	4618      	mov	r0, r3
 8008a86:	f000 faa9 	bl	8008fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a8e:	e282      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a90:	2300      	movs	r3, #0
 8008a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a94:	e27f      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a96:	4b26      	ldr	r3, [pc, #152]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008aa2:	d107      	bne.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008aa4:	f107 030c 	add.w	r3, r7, #12
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f000 fbeb 	bl	8009284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ab2:	e270      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ab8:	e26d      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008aba:	4b1d      	ldr	r3, [pc, #116]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008abe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ac2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 0304 	and.w	r3, r3, #4
 8008acc:	2b04      	cmp	r3, #4
 8008ace:	d10c      	bne.n	8008aea <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d109      	bne.n	8008aea <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ad6:	4b16      	ldr	r3, [pc, #88]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	08db      	lsrs	r3, r3, #3
 8008adc:	f003 0303 	and.w	r3, r3, #3
 8008ae0:	4a14      	ldr	r2, [pc, #80]	@ (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ae8:	e01e      	b.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008aea:	4b11      	ldr	r3, [pc, #68]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008af2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008af6:	d106      	bne.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008afa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008afe:	d102      	bne.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008b00:	4b0d      	ldr	r3, [pc, #52]	@ (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b04:	e010      	b.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b06:	4b0a      	ldr	r3, [pc, #40]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b12:	d106      	bne.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b1a:	d102      	bne.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b1c:	4b07      	ldr	r3, [pc, #28]	@ (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b20:	e002      	b.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b22:	2300      	movs	r3, #0
 8008b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008b26:	e236      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008b28:	e235      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b2a:	4b05      	ldr	r3, [pc, #20]	@ (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b2e:	e232      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008b30:	58024400 	.word	0x58024400
 8008b34:	03d09000 	.word	0x03d09000
 8008b38:	003d0900 	.word	0x003d0900
 8008b3c:	016e3600 	.word	0x016e3600
 8008b40:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008b44:	2300      	movs	r3, #0
 8008b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b48:	e225      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008b4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b4e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008b52:	430b      	orrs	r3, r1
 8008b54:	f040 8085 	bne.w	8008c62 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008b58:	4b9c      	ldr	r3, [pc, #624]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b5c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008b60:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b68:	d06b      	beq.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b70:	d874      	bhi.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008b78:	d056      	beq.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8008b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008b80:	d86c      	bhi.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008b88:	d03b      	beq.n	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008b90:	d864      	bhi.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b98:	d021      	beq.n	8008bde <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ba0:	d85c      	bhi.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d004      	beq.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8008ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008baa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bae:	d004      	beq.n	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8008bb0:	e054      	b.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008bb2:	f7fe fb5f 	bl	8007274 <HAL_RCC_GetPCLK1Freq>
 8008bb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008bb8:	e1ed      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bba:	4b84      	ldr	r3, [pc, #528]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bc6:	d107      	bne.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bc8:	f107 0318 	add.w	r3, r7, #24
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f000 fa05 	bl	8008fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bd6:	e1de      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bdc:	e1db      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bde:	4b7b      	ldr	r3, [pc, #492]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008be6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bea:	d107      	bne.n	8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bec:	f107 030c 	add.w	r3, r7, #12
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f000 fb47 	bl	8009284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bfa:	e1cc      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c00:	e1c9      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008c02:	4b72      	ldr	r3, [pc, #456]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 0304 	and.w	r3, r3, #4
 8008c0a:	2b04      	cmp	r3, #4
 8008c0c:	d109      	bne.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c0e:	4b6f      	ldr	r3, [pc, #444]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	08db      	lsrs	r3, r3, #3
 8008c14:	f003 0303 	and.w	r3, r3, #3
 8008c18:	4a6d      	ldr	r2, [pc, #436]	@ (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c20:	e1b9      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c22:	2300      	movs	r3, #0
 8008c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c26:	e1b6      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008c28:	4b68      	ldr	r3, [pc, #416]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c34:	d102      	bne.n	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8008c36:	4b67      	ldr	r3, [pc, #412]	@ (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c3a:	e1ac      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c40:	e1a9      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c42:	4b62      	ldr	r3, [pc, #392]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c4e:	d102      	bne.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8008c50:	4b61      	ldr	r3, [pc, #388]	@ (8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c54:	e19f      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c56:	2300      	movs	r3, #0
 8008c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c5a:	e19c      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c60:	e199      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008c62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c66:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008c6a:	430b      	orrs	r3, r1
 8008c6c:	d173      	bne.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008c6e:	4b57      	ldr	r3, [pc, #348]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008c76:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c7e:	d02f      	beq.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8008c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c86:	d863      	bhi.n	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8008c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d004      	beq.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8008c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c94:	d012      	beq.n	8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8008c96:	e05b      	b.n	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c98:	4b4c      	ldr	r3, [pc, #304]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ca0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ca4:	d107      	bne.n	8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ca6:	f107 0318 	add.w	r3, r7, #24
 8008caa:	4618      	mov	r0, r3
 8008cac:	f000 f996 	bl	8008fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cb4:	e16f      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cba:	e16c      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008cbc:	4b43      	ldr	r3, [pc, #268]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008cc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cc8:	d107      	bne.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cca:	f107 030c 	add.w	r3, r7, #12
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f000 fad8 	bl	8009284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cd8:	e15d      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cde:	e15a      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ce0:	4b3a      	ldr	r3, [pc, #232]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008ce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ce4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ce8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cea:	4b38      	ldr	r3, [pc, #224]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f003 0304 	and.w	r3, r3, #4
 8008cf2:	2b04      	cmp	r3, #4
 8008cf4:	d10c      	bne.n	8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d109      	bne.n	8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cfc:	4b33      	ldr	r3, [pc, #204]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	08db      	lsrs	r3, r3, #3
 8008d02:	f003 0303 	and.w	r3, r3, #3
 8008d06:	4a32      	ldr	r2, [pc, #200]	@ (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008d08:	fa22 f303 	lsr.w	r3, r2, r3
 8008d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d0e:	e01e      	b.n	8008d4e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d10:	4b2e      	ldr	r3, [pc, #184]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d1c:	d106      	bne.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d24:	d102      	bne.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d26:	4b2b      	ldr	r3, [pc, #172]	@ (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d2a:	e010      	b.n	8008d4e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d2c:	4b27      	ldr	r3, [pc, #156]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d38:	d106      	bne.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d40:	d102      	bne.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d42:	4b25      	ldr	r3, [pc, #148]	@ (8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d46:	e002      	b.n	8008d4e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008d4c:	e123      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008d4e:	e122      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008d50:	2300      	movs	r3, #0
 8008d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d54:	e11f      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008d56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d5a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008d5e:	430b      	orrs	r3, r1
 8008d60:	d13c      	bne.n	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008d62:	4b1a      	ldr	r3, [pc, #104]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008d6a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d004      	beq.n	8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d78:	d012      	beq.n	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8008d7a:	e023      	b.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d7c:	4b13      	ldr	r3, [pc, #76]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d88:	d107      	bne.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f000 fbcc 	bl	800952c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d98:	e0fd      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d9e:	e0fa      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008da0:	4b0a      	ldr	r3, [pc, #40]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008da8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008dac:	d107      	bne.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dae:	f107 0318 	add.w	r3, r7, #24
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 f912 	bl	8008fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008db8:	6a3b      	ldr	r3, [r7, #32]
 8008dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dbc:	e0eb      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dc2:	e0e8      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dc8:	e0e5      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008dca:	bf00      	nop
 8008dcc:	58024400 	.word	0x58024400
 8008dd0:	03d09000 	.word	0x03d09000
 8008dd4:	003d0900 	.word	0x003d0900
 8008dd8:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008ddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008de0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008de4:	430b      	orrs	r3, r1
 8008de6:	f040 8085 	bne.w	8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008dea:	4b6d      	ldr	r3, [pc, #436]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dee:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008df2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008dfa:	d06b      	beq.n	8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e02:	d874      	bhi.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e0a:	d056      	beq.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e12:	d86c      	bhi.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008e1a:	d03b      	beq.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8008e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008e22:	d864      	bhi.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e2a:	d021      	beq.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8008e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e32:	d85c      	bhi.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d004      	beq.n	8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8008e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e40:	d004      	beq.n	8008e4c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008e42:	e054      	b.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008e44:	f000 f8b4 	bl	8008fb0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008e48:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e4a:	e0a4      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e4c:	4b54      	ldr	r3, [pc, #336]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e58:	d107      	bne.n	8008e6a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e5a:	f107 0318 	add.w	r3, r7, #24
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 f8bc 	bl	8008fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e68:	e095      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e6e:	e092      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e70:	4b4b      	ldr	r3, [pc, #300]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e7c:	d107      	bne.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e7e:	f107 030c 	add.w	r3, r7, #12
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 f9fe 	bl	8009284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e8c:	e083      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e92:	e080      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e94:	4b42      	ldr	r3, [pc, #264]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 0304 	and.w	r3, r3, #4
 8008e9c:	2b04      	cmp	r3, #4
 8008e9e:	d109      	bne.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ea0:	4b3f      	ldr	r3, [pc, #252]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	08db      	lsrs	r3, r3, #3
 8008ea6:	f003 0303 	and.w	r3, r3, #3
 8008eaa:	4a3e      	ldr	r2, [pc, #248]	@ (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008eac:	fa22 f303 	lsr.w	r3, r2, r3
 8008eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eb2:	e070      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eb8:	e06d      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008eba:	4b39      	ldr	r3, [pc, #228]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ec2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ec6:	d102      	bne.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008ec8:	4b37      	ldr	r3, [pc, #220]	@ (8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ecc:	e063      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ed2:	e060      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008ed4:	4b32      	ldr	r3, [pc, #200]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008edc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ee0:	d102      	bne.n	8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8008ee2:	4b32      	ldr	r3, [pc, #200]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ee6:	e056      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eec:	e053      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ef2:	e050      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008ef4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ef8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008efc:	430b      	orrs	r3, r1
 8008efe:	d148      	bne.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008f00:	4b27      	ldr	r3, [pc, #156]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008f08:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f10:	d02a      	beq.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f18:	d838      	bhi.n	8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d004      	beq.n	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f26:	d00d      	beq.n	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008f28:	e030      	b.n	8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f36:	d102      	bne.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8008f38:	4b1c      	ldr	r3, [pc, #112]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f3c:	e02b      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f42:	e028      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f44:	4b16      	ldr	r3, [pc, #88]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f50:	d107      	bne.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f56:	4618      	mov	r0, r3
 8008f58:	f000 fae8 	bl	800952c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f60:	e019      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f62:	2300      	movs	r3, #0
 8008f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f66:	e016      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f68:	4b0d      	ldr	r3, [pc, #52]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f74:	d107      	bne.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f76:	f107 0318 	add.w	r3, r7, #24
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f000 f82e 	bl	8008fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f84:	e007      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f86:	2300      	movs	r3, #0
 8008f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f8a:	e004      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f90:	e001      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8008f92:	2300      	movs	r3, #0
 8008f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3740      	adds	r7, #64	@ 0x40
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	58024400 	.word	0x58024400
 8008fa4:	03d09000 	.word	0x03d09000
 8008fa8:	003d0900 	.word	0x003d0900
 8008fac:	016e3600 	.word	0x016e3600

08008fb0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008fb4:	f7fe f92e 	bl	8007214 <HAL_RCC_GetHCLKFreq>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	4b06      	ldr	r3, [pc, #24]	@ (8008fd4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008fbc:	6a1b      	ldr	r3, [r3, #32]
 8008fbe:	091b      	lsrs	r3, r3, #4
 8008fc0:	f003 0307 	and.w	r3, r3, #7
 8008fc4:	4904      	ldr	r1, [pc, #16]	@ (8008fd8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008fc6:	5ccb      	ldrb	r3, [r1, r3]
 8008fc8:	f003 031f 	and.w	r3, r3, #31
 8008fcc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	58024400 	.word	0x58024400
 8008fd8:	0800bc54 	.word	0x0800bc54

08008fdc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b089      	sub	sp, #36	@ 0x24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fe4:	4ba1      	ldr	r3, [pc, #644]	@ (800926c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe8:	f003 0303 	and.w	r3, r3, #3
 8008fec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008fee:	4b9f      	ldr	r3, [pc, #636]	@ (800926c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ff2:	0b1b      	lsrs	r3, r3, #12
 8008ff4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ff8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008ffa:	4b9c      	ldr	r3, [pc, #624]	@ (800926c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ffe:	091b      	lsrs	r3, r3, #4
 8009000:	f003 0301 	and.w	r3, r3, #1
 8009004:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009006:	4b99      	ldr	r3, [pc, #612]	@ (800926c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800900a:	08db      	lsrs	r3, r3, #3
 800900c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009010:	693a      	ldr	r2, [r7, #16]
 8009012:	fb02 f303 	mul.w	r3, r2, r3
 8009016:	ee07 3a90 	vmov	s15, r3
 800901a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800901e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	2b00      	cmp	r3, #0
 8009026:	f000 8111 	beq.w	800924c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	2b02      	cmp	r3, #2
 800902e:	f000 8083 	beq.w	8009138 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	2b02      	cmp	r3, #2
 8009036:	f200 80a1 	bhi.w	800917c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d003      	beq.n	8009048 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009040:	69bb      	ldr	r3, [r7, #24]
 8009042:	2b01      	cmp	r3, #1
 8009044:	d056      	beq.n	80090f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009046:	e099      	b.n	800917c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009048:	4b88      	ldr	r3, [pc, #544]	@ (800926c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 0320 	and.w	r3, r3, #32
 8009050:	2b00      	cmp	r3, #0
 8009052:	d02d      	beq.n	80090b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009054:	4b85      	ldr	r3, [pc, #532]	@ (800926c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	08db      	lsrs	r3, r3, #3
 800905a:	f003 0303 	and.w	r3, r3, #3
 800905e:	4a84      	ldr	r2, [pc, #528]	@ (8009270 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009060:	fa22 f303 	lsr.w	r3, r2, r3
 8009064:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	ee07 3a90 	vmov	s15, r3
 800906c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	ee07 3a90 	vmov	s15, r3
 8009076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800907a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800907e:	4b7b      	ldr	r3, [pc, #492]	@ (800926c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009086:	ee07 3a90 	vmov	s15, r3
 800908a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800908e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009092:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009274 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800909a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800909e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80090ae:	e087      	b.n	80091c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	ee07 3a90 	vmov	s15, r3
 80090b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009278 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80090be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090c2:	4b6a      	ldr	r3, [pc, #424]	@ (800926c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ca:	ee07 3a90 	vmov	s15, r3
 80090ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80090d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009274 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80090da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090f2:	e065      	b.n	80091c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	ee07 3a90 	vmov	s15, r3
 80090fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800927c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009106:	4b59      	ldr	r3, [pc, #356]	@ (800926c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800910a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800910e:	ee07 3a90 	vmov	s15, r3
 8009112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009116:	ed97 6a03 	vldr	s12, [r7, #12]
 800911a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009274 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800911e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800912a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800912e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009132:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009136:	e043      	b.n	80091c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	ee07 3a90 	vmov	s15, r3
 800913e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009142:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009280 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800914a:	4b48      	ldr	r3, [pc, #288]	@ (800926c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800914c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800914e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009152:	ee07 3a90 	vmov	s15, r3
 8009156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800915a:	ed97 6a03 	vldr	s12, [r7, #12]
 800915e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009274 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800916a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800916e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009176:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800917a:	e021      	b.n	80091c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	ee07 3a90 	vmov	s15, r3
 8009182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009186:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800927c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800918a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800918e:	4b37      	ldr	r3, [pc, #220]	@ (800926c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009196:	ee07 3a90 	vmov	s15, r3
 800919a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800919e:	ed97 6a03 	vldr	s12, [r7, #12]
 80091a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009274 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80091c0:	4b2a      	ldr	r3, [pc, #168]	@ (800926c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091c4:	0a5b      	lsrs	r3, r3, #9
 80091c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091ca:	ee07 3a90 	vmov	s15, r3
 80091ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091da:	edd7 6a07 	vldr	s13, [r7, #28]
 80091de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091e6:	ee17 2a90 	vmov	r2, s15
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80091ee:	4b1f      	ldr	r3, [pc, #124]	@ (800926c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f2:	0c1b      	lsrs	r3, r3, #16
 80091f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091f8:	ee07 3a90 	vmov	s15, r3
 80091fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009200:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009204:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009208:	edd7 6a07 	vldr	s13, [r7, #28]
 800920c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009214:	ee17 2a90 	vmov	r2, s15
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800921c:	4b13      	ldr	r3, [pc, #76]	@ (800926c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800921e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009220:	0e1b      	lsrs	r3, r3, #24
 8009222:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009226:	ee07 3a90 	vmov	s15, r3
 800922a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800922e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009232:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009236:	edd7 6a07 	vldr	s13, [r7, #28]
 800923a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800923e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009242:	ee17 2a90 	vmov	r2, s15
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800924a:	e008      	b.n	800925e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	609a      	str	r2, [r3, #8]
}
 800925e:	bf00      	nop
 8009260:	3724      	adds	r7, #36	@ 0x24
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	58024400 	.word	0x58024400
 8009270:	03d09000 	.word	0x03d09000
 8009274:	46000000 	.word	0x46000000
 8009278:	4c742400 	.word	0x4c742400
 800927c:	4a742400 	.word	0x4a742400
 8009280:	4bb71b00 	.word	0x4bb71b00

08009284 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009284:	b480      	push	{r7}
 8009286:	b089      	sub	sp, #36	@ 0x24
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800928c:	4ba1      	ldr	r3, [pc, #644]	@ (8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800928e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009290:	f003 0303 	and.w	r3, r3, #3
 8009294:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009296:	4b9f      	ldr	r3, [pc, #636]	@ (8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800929a:	0d1b      	lsrs	r3, r3, #20
 800929c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80092a2:	4b9c      	ldr	r3, [pc, #624]	@ (8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a6:	0a1b      	lsrs	r3, r3, #8
 80092a8:	f003 0301 	and.w	r3, r3, #1
 80092ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80092ae:	4b99      	ldr	r3, [pc, #612]	@ (8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092b2:	08db      	lsrs	r3, r3, #3
 80092b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092b8:	693a      	ldr	r2, [r7, #16]
 80092ba:	fb02 f303 	mul.w	r3, r2, r3
 80092be:	ee07 3a90 	vmov	s15, r3
 80092c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	f000 8111 	beq.w	80094f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	2b02      	cmp	r3, #2
 80092d6:	f000 8083 	beq.w	80093e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	2b02      	cmp	r3, #2
 80092de:	f200 80a1 	bhi.w	8009424 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d003      	beq.n	80092f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d056      	beq.n	800939c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80092ee:	e099      	b.n	8009424 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092f0:	4b88      	ldr	r3, [pc, #544]	@ (8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 0320 	and.w	r3, r3, #32
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d02d      	beq.n	8009358 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092fc:	4b85      	ldr	r3, [pc, #532]	@ (8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	08db      	lsrs	r3, r3, #3
 8009302:	f003 0303 	and.w	r3, r3, #3
 8009306:	4a84      	ldr	r2, [pc, #528]	@ (8009518 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009308:	fa22 f303 	lsr.w	r3, r2, r3
 800930c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	ee07 3a90 	vmov	s15, r3
 8009314:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	ee07 3a90 	vmov	s15, r3
 800931e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009326:	4b7b      	ldr	r3, [pc, #492]	@ (8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800932a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800932e:	ee07 3a90 	vmov	s15, r3
 8009332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009336:	ed97 6a03 	vldr	s12, [r7, #12]
 800933a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800951c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800933e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009346:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800934a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800934e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009352:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009356:	e087      	b.n	8009468 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	ee07 3a90 	vmov	s15, r3
 800935e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009362:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009520 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800936a:	4b6a      	ldr	r3, [pc, #424]	@ (8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800936c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800936e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009372:	ee07 3a90 	vmov	s15, r3
 8009376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800937a:	ed97 6a03 	vldr	s12, [r7, #12]
 800937e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800951c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800938a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800938e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009396:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800939a:	e065      	b.n	8009468 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	ee07 3a90 	vmov	s15, r3
 80093a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80093aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ae:	4b59      	ldr	r3, [pc, #356]	@ (8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093b6:	ee07 3a90 	vmov	s15, r3
 80093ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093be:	ed97 6a03 	vldr	s12, [r7, #12]
 80093c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800951c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093de:	e043      	b.n	8009468 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	ee07 3a90 	vmov	s15, r3
 80093e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80093ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093f2:	4b48      	ldr	r3, [pc, #288]	@ (8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093fa:	ee07 3a90 	vmov	s15, r3
 80093fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009402:	ed97 6a03 	vldr	s12, [r7, #12]
 8009406:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800951c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800940a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800940e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009412:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800941a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800941e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009422:	e021      	b.n	8009468 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	ee07 3a90 	vmov	s15, r3
 800942a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800942e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009436:	4b37      	ldr	r3, [pc, #220]	@ (8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800943a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800943e:	ee07 3a90 	vmov	s15, r3
 8009442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009446:	ed97 6a03 	vldr	s12, [r7, #12]
 800944a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800951c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800944e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800945a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800945e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009462:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009466:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009468:	4b2a      	ldr	r3, [pc, #168]	@ (8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800946a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800946c:	0a5b      	lsrs	r3, r3, #9
 800946e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009472:	ee07 3a90 	vmov	s15, r3
 8009476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800947e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009482:	edd7 6a07 	vldr	s13, [r7, #28]
 8009486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800948a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800948e:	ee17 2a90 	vmov	r2, s15
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009496:	4b1f      	ldr	r3, [pc, #124]	@ (8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800949a:	0c1b      	lsrs	r3, r3, #16
 800949c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094a0:	ee07 3a90 	vmov	s15, r3
 80094a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80094b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094bc:	ee17 2a90 	vmov	r2, s15
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80094c4:	4b13      	ldr	r3, [pc, #76]	@ (8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094c8:	0e1b      	lsrs	r3, r3, #24
 80094ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094ce:	ee07 3a90 	vmov	s15, r3
 80094d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094de:	edd7 6a07 	vldr	s13, [r7, #28]
 80094e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094ea:	ee17 2a90 	vmov	r2, s15
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80094f2:	e008      	b.n	8009506 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	609a      	str	r2, [r3, #8]
}
 8009506:	bf00      	nop
 8009508:	3724      	adds	r7, #36	@ 0x24
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop
 8009514:	58024400 	.word	0x58024400
 8009518:	03d09000 	.word	0x03d09000
 800951c:	46000000 	.word	0x46000000
 8009520:	4c742400 	.word	0x4c742400
 8009524:	4a742400 	.word	0x4a742400
 8009528:	4bb71b00 	.word	0x4bb71b00

0800952c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800952c:	b480      	push	{r7}
 800952e:	b089      	sub	sp, #36	@ 0x24
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009534:	4ba0      	ldr	r3, [pc, #640]	@ (80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009538:	f003 0303 	and.w	r3, r3, #3
 800953c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800953e:	4b9e      	ldr	r3, [pc, #632]	@ (80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009542:	091b      	lsrs	r3, r3, #4
 8009544:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009548:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800954a:	4b9b      	ldr	r3, [pc, #620]	@ (80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800954c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800954e:	f003 0301 	and.w	r3, r3, #1
 8009552:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009554:	4b98      	ldr	r3, [pc, #608]	@ (80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009558:	08db      	lsrs	r3, r3, #3
 800955a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800955e:	693a      	ldr	r2, [r7, #16]
 8009560:	fb02 f303 	mul.w	r3, r2, r3
 8009564:	ee07 3a90 	vmov	s15, r3
 8009568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800956c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	2b00      	cmp	r3, #0
 8009574:	f000 8111 	beq.w	800979a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	2b02      	cmp	r3, #2
 800957c:	f000 8083 	beq.w	8009686 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	2b02      	cmp	r3, #2
 8009584:	f200 80a1 	bhi.w	80096ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d003      	beq.n	8009596 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d056      	beq.n	8009642 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009594:	e099      	b.n	80096ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009596:	4b88      	ldr	r3, [pc, #544]	@ (80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f003 0320 	and.w	r3, r3, #32
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d02d      	beq.n	80095fe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095a2:	4b85      	ldr	r3, [pc, #532]	@ (80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	08db      	lsrs	r3, r3, #3
 80095a8:	f003 0303 	and.w	r3, r3, #3
 80095ac:	4a83      	ldr	r2, [pc, #524]	@ (80097bc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80095ae:	fa22 f303 	lsr.w	r3, r2, r3
 80095b2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	ee07 3a90 	vmov	s15, r3
 80095ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	ee07 3a90 	vmov	s15, r3
 80095c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095cc:	4b7a      	ldr	r3, [pc, #488]	@ (80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095d4:	ee07 3a90 	vmov	s15, r3
 80095d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80095e0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80097c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80095e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095f8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80095fc:	e087      	b.n	800970e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	ee07 3a90 	vmov	s15, r3
 8009604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009608:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80097c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800960c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009610:	4b69      	ldr	r3, [pc, #420]	@ (80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009618:	ee07 3a90 	vmov	s15, r3
 800961c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009620:	ed97 6a03 	vldr	s12, [r7, #12]
 8009624:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80097c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009628:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800962c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009630:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009634:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800963c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009640:	e065      	b.n	800970e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	ee07 3a90 	vmov	s15, r3
 8009648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800964c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80097c8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009650:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009654:	4b58      	ldr	r3, [pc, #352]	@ (80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800965c:	ee07 3a90 	vmov	s15, r3
 8009660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009664:	ed97 6a03 	vldr	s12, [r7, #12]
 8009668:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80097c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800966c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009670:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009674:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009678:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800967c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009680:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009684:	e043      	b.n	800970e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	ee07 3a90 	vmov	s15, r3
 800968c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009690:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80097cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009694:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009698:	4b47      	ldr	r3, [pc, #284]	@ (80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800969a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800969c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096a0:	ee07 3a90 	vmov	s15, r3
 80096a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80096ac:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80097c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096c8:	e021      	b.n	800970e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	ee07 3a90 	vmov	s15, r3
 80096d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096d4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80097c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80096d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096dc:	4b36      	ldr	r3, [pc, #216]	@ (80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e4:	ee07 3a90 	vmov	s15, r3
 80096e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80096f0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80097c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009700:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009708:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800970c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800970e:	4b2a      	ldr	r3, [pc, #168]	@ (80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009712:	0a5b      	lsrs	r3, r3, #9
 8009714:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009718:	ee07 3a90 	vmov	s15, r3
 800971c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009720:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009724:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009728:	edd7 6a07 	vldr	s13, [r7, #28]
 800972c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009734:	ee17 2a90 	vmov	r2, s15
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800973c:	4b1e      	ldr	r3, [pc, #120]	@ (80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800973e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009740:	0c1b      	lsrs	r3, r3, #16
 8009742:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009746:	ee07 3a90 	vmov	s15, r3
 800974a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800974e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009752:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009756:	edd7 6a07 	vldr	s13, [r7, #28]
 800975a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800975e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009762:	ee17 2a90 	vmov	r2, s15
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800976a:	4b13      	ldr	r3, [pc, #76]	@ (80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800976c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800976e:	0e1b      	lsrs	r3, r3, #24
 8009770:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009774:	ee07 3a90 	vmov	s15, r3
 8009778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800977c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009780:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009784:	edd7 6a07 	vldr	s13, [r7, #28]
 8009788:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800978c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009790:	ee17 2a90 	vmov	r2, s15
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009798:	e008      	b.n	80097ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	609a      	str	r2, [r3, #8]
}
 80097ac:	bf00      	nop
 80097ae:	3724      	adds	r7, #36	@ 0x24
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr
 80097b8:	58024400 	.word	0x58024400
 80097bc:	03d09000 	.word	0x03d09000
 80097c0:	46000000 	.word	0x46000000
 80097c4:	4c742400 	.word	0x4c742400
 80097c8:	4a742400 	.word	0x4a742400
 80097cc:	4bb71b00 	.word	0x4bb71b00

080097d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80097da:	2300      	movs	r3, #0
 80097dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80097de:	4b53      	ldr	r3, [pc, #332]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 80097e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097e2:	f003 0303 	and.w	r3, r3, #3
 80097e6:	2b03      	cmp	r3, #3
 80097e8:	d101      	bne.n	80097ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	e099      	b.n	8009922 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80097ee:	4b4f      	ldr	r3, [pc, #316]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a4e      	ldr	r2, [pc, #312]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 80097f4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80097f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097fa:	f7f9 f965 	bl	8002ac8 <HAL_GetTick>
 80097fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009800:	e008      	b.n	8009814 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009802:	f7f9 f961 	bl	8002ac8 <HAL_GetTick>
 8009806:	4602      	mov	r2, r0
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	1ad3      	subs	r3, r2, r3
 800980c:	2b02      	cmp	r3, #2
 800980e:	d901      	bls.n	8009814 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009810:	2303      	movs	r3, #3
 8009812:	e086      	b.n	8009922 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009814:	4b45      	ldr	r3, [pc, #276]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1f0      	bne.n	8009802 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009820:	4b42      	ldr	r3, [pc, #264]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 8009822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009824:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	031b      	lsls	r3, r3, #12
 800982e:	493f      	ldr	r1, [pc, #252]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 8009830:	4313      	orrs	r3, r2
 8009832:	628b      	str	r3, [r1, #40]	@ 0x28
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	3b01      	subs	r3, #1
 800983a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	3b01      	subs	r3, #1
 8009844:	025b      	lsls	r3, r3, #9
 8009846:	b29b      	uxth	r3, r3
 8009848:	431a      	orrs	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	3b01      	subs	r3, #1
 8009850:	041b      	lsls	r3, r3, #16
 8009852:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009856:	431a      	orrs	r2, r3
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	3b01      	subs	r3, #1
 800985e:	061b      	lsls	r3, r3, #24
 8009860:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009864:	4931      	ldr	r1, [pc, #196]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 8009866:	4313      	orrs	r3, r2
 8009868:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800986a:	4b30      	ldr	r3, [pc, #192]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 800986c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800986e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	695b      	ldr	r3, [r3, #20]
 8009876:	492d      	ldr	r1, [pc, #180]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 8009878:	4313      	orrs	r3, r2
 800987a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800987c:	4b2b      	ldr	r3, [pc, #172]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 800987e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009880:	f023 0220 	bic.w	r2, r3, #32
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	699b      	ldr	r3, [r3, #24]
 8009888:	4928      	ldr	r1, [pc, #160]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 800988a:	4313      	orrs	r3, r2
 800988c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800988e:	4b27      	ldr	r3, [pc, #156]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 8009890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009892:	4a26      	ldr	r2, [pc, #152]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 8009894:	f023 0310 	bic.w	r3, r3, #16
 8009898:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800989a:	4b24      	ldr	r3, [pc, #144]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 800989c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800989e:	4b24      	ldr	r3, [pc, #144]	@ (8009930 <RCCEx_PLL2_Config+0x160>)
 80098a0:	4013      	ands	r3, r2
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	69d2      	ldr	r2, [r2, #28]
 80098a6:	00d2      	lsls	r2, r2, #3
 80098a8:	4920      	ldr	r1, [pc, #128]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 80098aa:	4313      	orrs	r3, r2
 80098ac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80098ae:	4b1f      	ldr	r3, [pc, #124]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 80098b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098b2:	4a1e      	ldr	r2, [pc, #120]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 80098b4:	f043 0310 	orr.w	r3, r3, #16
 80098b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d106      	bne.n	80098ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80098c0:	4b1a      	ldr	r3, [pc, #104]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 80098c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098c4:	4a19      	ldr	r2, [pc, #100]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 80098c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80098ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80098cc:	e00f      	b.n	80098ee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d106      	bne.n	80098e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80098d4:	4b15      	ldr	r3, [pc, #84]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 80098d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098d8:	4a14      	ldr	r2, [pc, #80]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 80098da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80098e0:	e005      	b.n	80098ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80098e2:	4b12      	ldr	r3, [pc, #72]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 80098e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098e6:	4a11      	ldr	r2, [pc, #68]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 80098e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80098ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80098ee:	4b0f      	ldr	r3, [pc, #60]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a0e      	ldr	r2, [pc, #56]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 80098f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80098f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098fa:	f7f9 f8e5 	bl	8002ac8 <HAL_GetTick>
 80098fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009900:	e008      	b.n	8009914 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009902:	f7f9 f8e1 	bl	8002ac8 <HAL_GetTick>
 8009906:	4602      	mov	r2, r0
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	1ad3      	subs	r3, r2, r3
 800990c:	2b02      	cmp	r3, #2
 800990e:	d901      	bls.n	8009914 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009910:	2303      	movs	r3, #3
 8009912:	e006      	b.n	8009922 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009914:	4b05      	ldr	r3, [pc, #20]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800991c:	2b00      	cmp	r3, #0
 800991e:	d0f0      	beq.n	8009902 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009920:	7bfb      	ldrb	r3, [r7, #15]
}
 8009922:	4618      	mov	r0, r3
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	58024400 	.word	0x58024400
 8009930:	ffff0007 	.word	0xffff0007

08009934 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800993e:	2300      	movs	r3, #0
 8009940:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009942:	4b53      	ldr	r3, [pc, #332]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009946:	f003 0303 	and.w	r3, r3, #3
 800994a:	2b03      	cmp	r3, #3
 800994c:	d101      	bne.n	8009952 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	e099      	b.n	8009a86 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009952:	4b4f      	ldr	r3, [pc, #316]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a4e      	ldr	r2, [pc, #312]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009958:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800995c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800995e:	f7f9 f8b3 	bl	8002ac8 <HAL_GetTick>
 8009962:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009964:	e008      	b.n	8009978 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009966:	f7f9 f8af 	bl	8002ac8 <HAL_GetTick>
 800996a:	4602      	mov	r2, r0
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	1ad3      	subs	r3, r2, r3
 8009970:	2b02      	cmp	r3, #2
 8009972:	d901      	bls.n	8009978 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009974:	2303      	movs	r3, #3
 8009976:	e086      	b.n	8009a86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009978:	4b45      	ldr	r3, [pc, #276]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1f0      	bne.n	8009966 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009984:	4b42      	ldr	r3, [pc, #264]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009988:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	051b      	lsls	r3, r3, #20
 8009992:	493f      	ldr	r1, [pc, #252]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009994:	4313      	orrs	r3, r2
 8009996:	628b      	str	r3, [r1, #40]	@ 0x28
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	3b01      	subs	r3, #1
 800999e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	3b01      	subs	r3, #1
 80099a8:	025b      	lsls	r3, r3, #9
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	431a      	orrs	r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	3b01      	subs	r3, #1
 80099b4:	041b      	lsls	r3, r3, #16
 80099b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80099ba:	431a      	orrs	r2, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	3b01      	subs	r3, #1
 80099c2:	061b      	lsls	r3, r3, #24
 80099c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80099c8:	4931      	ldr	r1, [pc, #196]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 80099ca:	4313      	orrs	r3, r2
 80099cc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80099ce:	4b30      	ldr	r3, [pc, #192]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 80099d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	695b      	ldr	r3, [r3, #20]
 80099da:	492d      	ldr	r1, [pc, #180]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 80099dc:	4313      	orrs	r3, r2
 80099de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80099e0:	4b2b      	ldr	r3, [pc, #172]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 80099e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	699b      	ldr	r3, [r3, #24]
 80099ec:	4928      	ldr	r1, [pc, #160]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 80099ee:	4313      	orrs	r3, r2
 80099f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80099f2:	4b27      	ldr	r3, [pc, #156]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 80099f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099f6:	4a26      	ldr	r2, [pc, #152]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 80099f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80099fe:	4b24      	ldr	r3, [pc, #144]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009a00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a02:	4b24      	ldr	r3, [pc, #144]	@ (8009a94 <RCCEx_PLL3_Config+0x160>)
 8009a04:	4013      	ands	r3, r2
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	69d2      	ldr	r2, [r2, #28]
 8009a0a:	00d2      	lsls	r2, r2, #3
 8009a0c:	4920      	ldr	r1, [pc, #128]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009a12:	4b1f      	ldr	r3, [pc, #124]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a16:	4a1e      	ldr	r2, [pc, #120]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009a18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d106      	bne.n	8009a32 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a24:	4b1a      	ldr	r3, [pc, #104]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a28:	4a19      	ldr	r2, [pc, #100]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009a2a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009a2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a30:	e00f      	b.n	8009a52 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d106      	bne.n	8009a46 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009a38:	4b15      	ldr	r3, [pc, #84]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a3c:	4a14      	ldr	r2, [pc, #80]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009a3e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009a42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a44:	e005      	b.n	8009a52 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009a46:	4b12      	ldr	r3, [pc, #72]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a4a:	4a11      	ldr	r2, [pc, #68]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009a4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009a50:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009a52:	4b0f      	ldr	r3, [pc, #60]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a0e      	ldr	r2, [pc, #56]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a5e:	f7f9 f833 	bl	8002ac8 <HAL_GetTick>
 8009a62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a64:	e008      	b.n	8009a78 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009a66:	f7f9 f82f 	bl	8002ac8 <HAL_GetTick>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	1ad3      	subs	r3, r2, r3
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	d901      	bls.n	8009a78 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a74:	2303      	movs	r3, #3
 8009a76:	e006      	b.n	8009a86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a78:	4b05      	ldr	r3, [pc, #20]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d0f0      	beq.n	8009a66 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	58024400 	.word	0x58024400
 8009a94:	ffff0007 	.word	0xffff0007

08009a98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d101      	bne.n	8009aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e042      	b.n	8009b30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d106      	bne.n	8009ac2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f7f8 fe03 	bl	80026c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2224      	movs	r2, #36	@ 0x24
 8009ac6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f022 0201 	bic.w	r2, r2, #1
 8009ad8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d002      	beq.n	8009ae8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 ff38 	bl	800a958 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 f8c9 	bl	8009c80 <UART_SetConfig>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d101      	bne.n	8009af8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	e01b      	b.n	8009b30 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	685a      	ldr	r2, [r3, #4]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009b06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	689a      	ldr	r2, [r3, #8]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009b16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f042 0201 	orr.w	r2, r2, #1
 8009b26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 ffb7 	bl	800aa9c <UART_CheckIdleState>
 8009b2e:	4603      	mov	r3, r0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3708      	adds	r7, #8
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b08a      	sub	sp, #40	@ 0x28
 8009b3c:	af02      	add	r7, sp, #8
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	603b      	str	r3, [r7, #0]
 8009b44:	4613      	mov	r3, r2
 8009b46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b4e:	2b20      	cmp	r3, #32
 8009b50:	d17b      	bne.n	8009c4a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d002      	beq.n	8009b5e <HAL_UART_Transmit+0x26>
 8009b58:	88fb      	ldrh	r3, [r7, #6]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d101      	bne.n	8009b62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e074      	b.n	8009c4c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2221      	movs	r2, #33	@ 0x21
 8009b6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b72:	f7f8 ffa9 	bl	8002ac8 <HAL_GetTick>
 8009b76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	88fa      	ldrh	r2, [r7, #6]
 8009b7c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	88fa      	ldrh	r2, [r7, #6]
 8009b84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b90:	d108      	bne.n	8009ba4 <HAL_UART_Transmit+0x6c>
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	691b      	ldr	r3, [r3, #16]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d104      	bne.n	8009ba4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	61bb      	str	r3, [r7, #24]
 8009ba2:	e003      	b.n	8009bac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009bac:	e030      	b.n	8009c10 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	9300      	str	r3, [sp, #0]
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	2180      	movs	r1, #128	@ 0x80
 8009bb8:	68f8      	ldr	r0, [r7, #12]
 8009bba:	f001 f819 	bl	800abf0 <UART_WaitOnFlagUntilTimeout>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d005      	beq.n	8009bd0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2220      	movs	r2, #32
 8009bc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009bcc:	2303      	movs	r3, #3
 8009bce:	e03d      	b.n	8009c4c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d10b      	bne.n	8009bee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	881b      	ldrh	r3, [r3, #0]
 8009bda:	461a      	mov	r2, r3
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009be4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	3302      	adds	r3, #2
 8009bea:	61bb      	str	r3, [r7, #24]
 8009bec:	e007      	b.n	8009bfe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	781a      	ldrb	r2, [r3, #0]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	3b01      	subs	r3, #1
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1c8      	bne.n	8009bae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	9300      	str	r3, [sp, #0]
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	2200      	movs	r2, #0
 8009c24:	2140      	movs	r1, #64	@ 0x40
 8009c26:	68f8      	ldr	r0, [r7, #12]
 8009c28:	f000 ffe2 	bl	800abf0 <UART_WaitOnFlagUntilTimeout>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d005      	beq.n	8009c3e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2220      	movs	r2, #32
 8009c36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009c3a:	2303      	movs	r3, #3
 8009c3c:	e006      	b.n	8009c4c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2220      	movs	r2, #32
 8009c42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009c46:	2300      	movs	r3, #0
 8009c48:	e000      	b.n	8009c4c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009c4a:	2302      	movs	r3, #2
  }
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3720      	adds	r7, #32
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c62:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c6a:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	4313      	orrs	r3, r2
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3714      	adds	r7, #20
 8009c76:	46bd      	mov	sp, r7
 8009c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7c:	4770      	bx	lr
	...

08009c80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c84:	b092      	sub	sp, #72	@ 0x48
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	689a      	ldr	r2, [r3, #8]
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	691b      	ldr	r3, [r3, #16]
 8009c98:	431a      	orrs	r2, r3
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	695b      	ldr	r3, [r3, #20]
 8009c9e:	431a      	orrs	r2, r3
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	69db      	ldr	r3, [r3, #28]
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	4bbe      	ldr	r3, [pc, #760]	@ (8009fa8 <UART_SetConfig+0x328>)
 8009cb0:	4013      	ands	r3, r2
 8009cb2:	697a      	ldr	r2, [r7, #20]
 8009cb4:	6812      	ldr	r2, [r2, #0]
 8009cb6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009cb8:	430b      	orrs	r3, r1
 8009cba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	68da      	ldr	r2, [r3, #12]
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	430a      	orrs	r2, r1
 8009cd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	699b      	ldr	r3, [r3, #24]
 8009cd6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4ab3      	ldr	r2, [pc, #716]	@ (8009fac <UART_SetConfig+0x32c>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d004      	beq.n	8009cec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	689a      	ldr	r2, [r3, #8]
 8009cf2:	4baf      	ldr	r3, [pc, #700]	@ (8009fb0 <UART_SetConfig+0x330>)
 8009cf4:	4013      	ands	r3, r2
 8009cf6:	697a      	ldr	r2, [r7, #20]
 8009cf8:	6812      	ldr	r2, [r2, #0]
 8009cfa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009cfc:	430b      	orrs	r3, r1
 8009cfe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d06:	f023 010f 	bic.w	r1, r3, #15
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	430a      	orrs	r2, r1
 8009d14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4aa6      	ldr	r2, [pc, #664]	@ (8009fb4 <UART_SetConfig+0x334>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d177      	bne.n	8009e10 <UART_SetConfig+0x190>
 8009d20:	4ba5      	ldr	r3, [pc, #660]	@ (8009fb8 <UART_SetConfig+0x338>)
 8009d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009d28:	2b28      	cmp	r3, #40	@ 0x28
 8009d2a:	d86d      	bhi.n	8009e08 <UART_SetConfig+0x188>
 8009d2c:	a201      	add	r2, pc, #4	@ (adr r2, 8009d34 <UART_SetConfig+0xb4>)
 8009d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d32:	bf00      	nop
 8009d34:	08009dd9 	.word	0x08009dd9
 8009d38:	08009e09 	.word	0x08009e09
 8009d3c:	08009e09 	.word	0x08009e09
 8009d40:	08009e09 	.word	0x08009e09
 8009d44:	08009e09 	.word	0x08009e09
 8009d48:	08009e09 	.word	0x08009e09
 8009d4c:	08009e09 	.word	0x08009e09
 8009d50:	08009e09 	.word	0x08009e09
 8009d54:	08009de1 	.word	0x08009de1
 8009d58:	08009e09 	.word	0x08009e09
 8009d5c:	08009e09 	.word	0x08009e09
 8009d60:	08009e09 	.word	0x08009e09
 8009d64:	08009e09 	.word	0x08009e09
 8009d68:	08009e09 	.word	0x08009e09
 8009d6c:	08009e09 	.word	0x08009e09
 8009d70:	08009e09 	.word	0x08009e09
 8009d74:	08009de9 	.word	0x08009de9
 8009d78:	08009e09 	.word	0x08009e09
 8009d7c:	08009e09 	.word	0x08009e09
 8009d80:	08009e09 	.word	0x08009e09
 8009d84:	08009e09 	.word	0x08009e09
 8009d88:	08009e09 	.word	0x08009e09
 8009d8c:	08009e09 	.word	0x08009e09
 8009d90:	08009e09 	.word	0x08009e09
 8009d94:	08009df1 	.word	0x08009df1
 8009d98:	08009e09 	.word	0x08009e09
 8009d9c:	08009e09 	.word	0x08009e09
 8009da0:	08009e09 	.word	0x08009e09
 8009da4:	08009e09 	.word	0x08009e09
 8009da8:	08009e09 	.word	0x08009e09
 8009dac:	08009e09 	.word	0x08009e09
 8009db0:	08009e09 	.word	0x08009e09
 8009db4:	08009df9 	.word	0x08009df9
 8009db8:	08009e09 	.word	0x08009e09
 8009dbc:	08009e09 	.word	0x08009e09
 8009dc0:	08009e09 	.word	0x08009e09
 8009dc4:	08009e09 	.word	0x08009e09
 8009dc8:	08009e09 	.word	0x08009e09
 8009dcc:	08009e09 	.word	0x08009e09
 8009dd0:	08009e09 	.word	0x08009e09
 8009dd4:	08009e01 	.word	0x08009e01
 8009dd8:	2301      	movs	r3, #1
 8009dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dde:	e326      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009de0:	2304      	movs	r3, #4
 8009de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009de6:	e322      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009de8:	2308      	movs	r3, #8
 8009dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dee:	e31e      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009df0:	2310      	movs	r3, #16
 8009df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009df6:	e31a      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009df8:	2320      	movs	r3, #32
 8009dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dfe:	e316      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009e00:	2340      	movs	r3, #64	@ 0x40
 8009e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e06:	e312      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009e08:	2380      	movs	r3, #128	@ 0x80
 8009e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e0e:	e30e      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a69      	ldr	r2, [pc, #420]	@ (8009fbc <UART_SetConfig+0x33c>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d130      	bne.n	8009e7c <UART_SetConfig+0x1fc>
 8009e1a:	4b67      	ldr	r3, [pc, #412]	@ (8009fb8 <UART_SetConfig+0x338>)
 8009e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e1e:	f003 0307 	and.w	r3, r3, #7
 8009e22:	2b05      	cmp	r3, #5
 8009e24:	d826      	bhi.n	8009e74 <UART_SetConfig+0x1f4>
 8009e26:	a201      	add	r2, pc, #4	@ (adr r2, 8009e2c <UART_SetConfig+0x1ac>)
 8009e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2c:	08009e45 	.word	0x08009e45
 8009e30:	08009e4d 	.word	0x08009e4d
 8009e34:	08009e55 	.word	0x08009e55
 8009e38:	08009e5d 	.word	0x08009e5d
 8009e3c:	08009e65 	.word	0x08009e65
 8009e40:	08009e6d 	.word	0x08009e6d
 8009e44:	2300      	movs	r3, #0
 8009e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e4a:	e2f0      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009e4c:	2304      	movs	r3, #4
 8009e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e52:	e2ec      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009e54:	2308      	movs	r3, #8
 8009e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e5a:	e2e8      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009e5c:	2310      	movs	r3, #16
 8009e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e62:	e2e4      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009e64:	2320      	movs	r3, #32
 8009e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e6a:	e2e0      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009e6c:	2340      	movs	r3, #64	@ 0x40
 8009e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e72:	e2dc      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009e74:	2380      	movs	r3, #128	@ 0x80
 8009e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e7a:	e2d8      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a4f      	ldr	r2, [pc, #316]	@ (8009fc0 <UART_SetConfig+0x340>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d130      	bne.n	8009ee8 <UART_SetConfig+0x268>
 8009e86:	4b4c      	ldr	r3, [pc, #304]	@ (8009fb8 <UART_SetConfig+0x338>)
 8009e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e8a:	f003 0307 	and.w	r3, r3, #7
 8009e8e:	2b05      	cmp	r3, #5
 8009e90:	d826      	bhi.n	8009ee0 <UART_SetConfig+0x260>
 8009e92:	a201      	add	r2, pc, #4	@ (adr r2, 8009e98 <UART_SetConfig+0x218>)
 8009e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e98:	08009eb1 	.word	0x08009eb1
 8009e9c:	08009eb9 	.word	0x08009eb9
 8009ea0:	08009ec1 	.word	0x08009ec1
 8009ea4:	08009ec9 	.word	0x08009ec9
 8009ea8:	08009ed1 	.word	0x08009ed1
 8009eac:	08009ed9 	.word	0x08009ed9
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eb6:	e2ba      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009eb8:	2304      	movs	r3, #4
 8009eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ebe:	e2b6      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009ec0:	2308      	movs	r3, #8
 8009ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ec6:	e2b2      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009ec8:	2310      	movs	r3, #16
 8009eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ece:	e2ae      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009ed0:	2320      	movs	r3, #32
 8009ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ed6:	e2aa      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009ed8:	2340      	movs	r3, #64	@ 0x40
 8009eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ede:	e2a6      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009ee0:	2380      	movs	r3, #128	@ 0x80
 8009ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ee6:	e2a2      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a35      	ldr	r2, [pc, #212]	@ (8009fc4 <UART_SetConfig+0x344>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d130      	bne.n	8009f54 <UART_SetConfig+0x2d4>
 8009ef2:	4b31      	ldr	r3, [pc, #196]	@ (8009fb8 <UART_SetConfig+0x338>)
 8009ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ef6:	f003 0307 	and.w	r3, r3, #7
 8009efa:	2b05      	cmp	r3, #5
 8009efc:	d826      	bhi.n	8009f4c <UART_SetConfig+0x2cc>
 8009efe:	a201      	add	r2, pc, #4	@ (adr r2, 8009f04 <UART_SetConfig+0x284>)
 8009f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f04:	08009f1d 	.word	0x08009f1d
 8009f08:	08009f25 	.word	0x08009f25
 8009f0c:	08009f2d 	.word	0x08009f2d
 8009f10:	08009f35 	.word	0x08009f35
 8009f14:	08009f3d 	.word	0x08009f3d
 8009f18:	08009f45 	.word	0x08009f45
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f22:	e284      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009f24:	2304      	movs	r3, #4
 8009f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f2a:	e280      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009f2c:	2308      	movs	r3, #8
 8009f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f32:	e27c      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009f34:	2310      	movs	r3, #16
 8009f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f3a:	e278      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009f3c:	2320      	movs	r3, #32
 8009f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f42:	e274      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009f44:	2340      	movs	r3, #64	@ 0x40
 8009f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f4a:	e270      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009f4c:	2380      	movs	r3, #128	@ 0x80
 8009f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f52:	e26c      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a1b      	ldr	r2, [pc, #108]	@ (8009fc8 <UART_SetConfig+0x348>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d142      	bne.n	8009fe4 <UART_SetConfig+0x364>
 8009f5e:	4b16      	ldr	r3, [pc, #88]	@ (8009fb8 <UART_SetConfig+0x338>)
 8009f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f62:	f003 0307 	and.w	r3, r3, #7
 8009f66:	2b05      	cmp	r3, #5
 8009f68:	d838      	bhi.n	8009fdc <UART_SetConfig+0x35c>
 8009f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8009f70 <UART_SetConfig+0x2f0>)
 8009f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f70:	08009f89 	.word	0x08009f89
 8009f74:	08009f91 	.word	0x08009f91
 8009f78:	08009f99 	.word	0x08009f99
 8009f7c:	08009fa1 	.word	0x08009fa1
 8009f80:	08009fcd 	.word	0x08009fcd
 8009f84:	08009fd5 	.word	0x08009fd5
 8009f88:	2300      	movs	r3, #0
 8009f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f8e:	e24e      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009f90:	2304      	movs	r3, #4
 8009f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f96:	e24a      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009f98:	2308      	movs	r3, #8
 8009f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f9e:	e246      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009fa0:	2310      	movs	r3, #16
 8009fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fa6:	e242      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009fa8:	cfff69f3 	.word	0xcfff69f3
 8009fac:	58000c00 	.word	0x58000c00
 8009fb0:	11fff4ff 	.word	0x11fff4ff
 8009fb4:	40011000 	.word	0x40011000
 8009fb8:	58024400 	.word	0x58024400
 8009fbc:	40004400 	.word	0x40004400
 8009fc0:	40004800 	.word	0x40004800
 8009fc4:	40004c00 	.word	0x40004c00
 8009fc8:	40005000 	.word	0x40005000
 8009fcc:	2320      	movs	r3, #32
 8009fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fd2:	e22c      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009fd4:	2340      	movs	r3, #64	@ 0x40
 8009fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fda:	e228      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009fdc:	2380      	movs	r3, #128	@ 0x80
 8009fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fe2:	e224      	b.n	800a42e <UART_SetConfig+0x7ae>
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4ab1      	ldr	r2, [pc, #708]	@ (800a2b0 <UART_SetConfig+0x630>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d176      	bne.n	800a0dc <UART_SetConfig+0x45c>
 8009fee:	4bb1      	ldr	r3, [pc, #708]	@ (800a2b4 <UART_SetConfig+0x634>)
 8009ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ff2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009ff6:	2b28      	cmp	r3, #40	@ 0x28
 8009ff8:	d86c      	bhi.n	800a0d4 <UART_SetConfig+0x454>
 8009ffa:	a201      	add	r2, pc, #4	@ (adr r2, 800a000 <UART_SetConfig+0x380>)
 8009ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a000:	0800a0a5 	.word	0x0800a0a5
 800a004:	0800a0d5 	.word	0x0800a0d5
 800a008:	0800a0d5 	.word	0x0800a0d5
 800a00c:	0800a0d5 	.word	0x0800a0d5
 800a010:	0800a0d5 	.word	0x0800a0d5
 800a014:	0800a0d5 	.word	0x0800a0d5
 800a018:	0800a0d5 	.word	0x0800a0d5
 800a01c:	0800a0d5 	.word	0x0800a0d5
 800a020:	0800a0ad 	.word	0x0800a0ad
 800a024:	0800a0d5 	.word	0x0800a0d5
 800a028:	0800a0d5 	.word	0x0800a0d5
 800a02c:	0800a0d5 	.word	0x0800a0d5
 800a030:	0800a0d5 	.word	0x0800a0d5
 800a034:	0800a0d5 	.word	0x0800a0d5
 800a038:	0800a0d5 	.word	0x0800a0d5
 800a03c:	0800a0d5 	.word	0x0800a0d5
 800a040:	0800a0b5 	.word	0x0800a0b5
 800a044:	0800a0d5 	.word	0x0800a0d5
 800a048:	0800a0d5 	.word	0x0800a0d5
 800a04c:	0800a0d5 	.word	0x0800a0d5
 800a050:	0800a0d5 	.word	0x0800a0d5
 800a054:	0800a0d5 	.word	0x0800a0d5
 800a058:	0800a0d5 	.word	0x0800a0d5
 800a05c:	0800a0d5 	.word	0x0800a0d5
 800a060:	0800a0bd 	.word	0x0800a0bd
 800a064:	0800a0d5 	.word	0x0800a0d5
 800a068:	0800a0d5 	.word	0x0800a0d5
 800a06c:	0800a0d5 	.word	0x0800a0d5
 800a070:	0800a0d5 	.word	0x0800a0d5
 800a074:	0800a0d5 	.word	0x0800a0d5
 800a078:	0800a0d5 	.word	0x0800a0d5
 800a07c:	0800a0d5 	.word	0x0800a0d5
 800a080:	0800a0c5 	.word	0x0800a0c5
 800a084:	0800a0d5 	.word	0x0800a0d5
 800a088:	0800a0d5 	.word	0x0800a0d5
 800a08c:	0800a0d5 	.word	0x0800a0d5
 800a090:	0800a0d5 	.word	0x0800a0d5
 800a094:	0800a0d5 	.word	0x0800a0d5
 800a098:	0800a0d5 	.word	0x0800a0d5
 800a09c:	0800a0d5 	.word	0x0800a0d5
 800a0a0:	0800a0cd 	.word	0x0800a0cd
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0aa:	e1c0      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a0ac:	2304      	movs	r3, #4
 800a0ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0b2:	e1bc      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a0b4:	2308      	movs	r3, #8
 800a0b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ba:	e1b8      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a0bc:	2310      	movs	r3, #16
 800a0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0c2:	e1b4      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a0c4:	2320      	movs	r3, #32
 800a0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ca:	e1b0      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a0cc:	2340      	movs	r3, #64	@ 0x40
 800a0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0d2:	e1ac      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a0d4:	2380      	movs	r3, #128	@ 0x80
 800a0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0da:	e1a8      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a75      	ldr	r2, [pc, #468]	@ (800a2b8 <UART_SetConfig+0x638>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d130      	bne.n	800a148 <UART_SetConfig+0x4c8>
 800a0e6:	4b73      	ldr	r3, [pc, #460]	@ (800a2b4 <UART_SetConfig+0x634>)
 800a0e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0ea:	f003 0307 	and.w	r3, r3, #7
 800a0ee:	2b05      	cmp	r3, #5
 800a0f0:	d826      	bhi.n	800a140 <UART_SetConfig+0x4c0>
 800a0f2:	a201      	add	r2, pc, #4	@ (adr r2, 800a0f8 <UART_SetConfig+0x478>)
 800a0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f8:	0800a111 	.word	0x0800a111
 800a0fc:	0800a119 	.word	0x0800a119
 800a100:	0800a121 	.word	0x0800a121
 800a104:	0800a129 	.word	0x0800a129
 800a108:	0800a131 	.word	0x0800a131
 800a10c:	0800a139 	.word	0x0800a139
 800a110:	2300      	movs	r3, #0
 800a112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a116:	e18a      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a118:	2304      	movs	r3, #4
 800a11a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a11e:	e186      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a120:	2308      	movs	r3, #8
 800a122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a126:	e182      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a128:	2310      	movs	r3, #16
 800a12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a12e:	e17e      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a130:	2320      	movs	r3, #32
 800a132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a136:	e17a      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a138:	2340      	movs	r3, #64	@ 0x40
 800a13a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a13e:	e176      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a140:	2380      	movs	r3, #128	@ 0x80
 800a142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a146:	e172      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a5b      	ldr	r2, [pc, #364]	@ (800a2bc <UART_SetConfig+0x63c>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d130      	bne.n	800a1b4 <UART_SetConfig+0x534>
 800a152:	4b58      	ldr	r3, [pc, #352]	@ (800a2b4 <UART_SetConfig+0x634>)
 800a154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a156:	f003 0307 	and.w	r3, r3, #7
 800a15a:	2b05      	cmp	r3, #5
 800a15c:	d826      	bhi.n	800a1ac <UART_SetConfig+0x52c>
 800a15e:	a201      	add	r2, pc, #4	@ (adr r2, 800a164 <UART_SetConfig+0x4e4>)
 800a160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a164:	0800a17d 	.word	0x0800a17d
 800a168:	0800a185 	.word	0x0800a185
 800a16c:	0800a18d 	.word	0x0800a18d
 800a170:	0800a195 	.word	0x0800a195
 800a174:	0800a19d 	.word	0x0800a19d
 800a178:	0800a1a5 	.word	0x0800a1a5
 800a17c:	2300      	movs	r3, #0
 800a17e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a182:	e154      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a184:	2304      	movs	r3, #4
 800a186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a18a:	e150      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a18c:	2308      	movs	r3, #8
 800a18e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a192:	e14c      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a194:	2310      	movs	r3, #16
 800a196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a19a:	e148      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a19c:	2320      	movs	r3, #32
 800a19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1a2:	e144      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a1a4:	2340      	movs	r3, #64	@ 0x40
 800a1a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1aa:	e140      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a1ac:	2380      	movs	r3, #128	@ 0x80
 800a1ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1b2:	e13c      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a41      	ldr	r2, [pc, #260]	@ (800a2c0 <UART_SetConfig+0x640>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	f040 8082 	bne.w	800a2c4 <UART_SetConfig+0x644>
 800a1c0:	4b3c      	ldr	r3, [pc, #240]	@ (800a2b4 <UART_SetConfig+0x634>)
 800a1c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a1c8:	2b28      	cmp	r3, #40	@ 0x28
 800a1ca:	d86d      	bhi.n	800a2a8 <UART_SetConfig+0x628>
 800a1cc:	a201      	add	r2, pc, #4	@ (adr r2, 800a1d4 <UART_SetConfig+0x554>)
 800a1ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d2:	bf00      	nop
 800a1d4:	0800a279 	.word	0x0800a279
 800a1d8:	0800a2a9 	.word	0x0800a2a9
 800a1dc:	0800a2a9 	.word	0x0800a2a9
 800a1e0:	0800a2a9 	.word	0x0800a2a9
 800a1e4:	0800a2a9 	.word	0x0800a2a9
 800a1e8:	0800a2a9 	.word	0x0800a2a9
 800a1ec:	0800a2a9 	.word	0x0800a2a9
 800a1f0:	0800a2a9 	.word	0x0800a2a9
 800a1f4:	0800a281 	.word	0x0800a281
 800a1f8:	0800a2a9 	.word	0x0800a2a9
 800a1fc:	0800a2a9 	.word	0x0800a2a9
 800a200:	0800a2a9 	.word	0x0800a2a9
 800a204:	0800a2a9 	.word	0x0800a2a9
 800a208:	0800a2a9 	.word	0x0800a2a9
 800a20c:	0800a2a9 	.word	0x0800a2a9
 800a210:	0800a2a9 	.word	0x0800a2a9
 800a214:	0800a289 	.word	0x0800a289
 800a218:	0800a2a9 	.word	0x0800a2a9
 800a21c:	0800a2a9 	.word	0x0800a2a9
 800a220:	0800a2a9 	.word	0x0800a2a9
 800a224:	0800a2a9 	.word	0x0800a2a9
 800a228:	0800a2a9 	.word	0x0800a2a9
 800a22c:	0800a2a9 	.word	0x0800a2a9
 800a230:	0800a2a9 	.word	0x0800a2a9
 800a234:	0800a291 	.word	0x0800a291
 800a238:	0800a2a9 	.word	0x0800a2a9
 800a23c:	0800a2a9 	.word	0x0800a2a9
 800a240:	0800a2a9 	.word	0x0800a2a9
 800a244:	0800a2a9 	.word	0x0800a2a9
 800a248:	0800a2a9 	.word	0x0800a2a9
 800a24c:	0800a2a9 	.word	0x0800a2a9
 800a250:	0800a2a9 	.word	0x0800a2a9
 800a254:	0800a299 	.word	0x0800a299
 800a258:	0800a2a9 	.word	0x0800a2a9
 800a25c:	0800a2a9 	.word	0x0800a2a9
 800a260:	0800a2a9 	.word	0x0800a2a9
 800a264:	0800a2a9 	.word	0x0800a2a9
 800a268:	0800a2a9 	.word	0x0800a2a9
 800a26c:	0800a2a9 	.word	0x0800a2a9
 800a270:	0800a2a9 	.word	0x0800a2a9
 800a274:	0800a2a1 	.word	0x0800a2a1
 800a278:	2301      	movs	r3, #1
 800a27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a27e:	e0d6      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a280:	2304      	movs	r3, #4
 800a282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a286:	e0d2      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a288:	2308      	movs	r3, #8
 800a28a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a28e:	e0ce      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a290:	2310      	movs	r3, #16
 800a292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a296:	e0ca      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a298:	2320      	movs	r3, #32
 800a29a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a29e:	e0c6      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a2a0:	2340      	movs	r3, #64	@ 0x40
 800a2a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2a6:	e0c2      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a2a8:	2380      	movs	r3, #128	@ 0x80
 800a2aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ae:	e0be      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a2b0:	40011400 	.word	0x40011400
 800a2b4:	58024400 	.word	0x58024400
 800a2b8:	40007800 	.word	0x40007800
 800a2bc:	40007c00 	.word	0x40007c00
 800a2c0:	40011800 	.word	0x40011800
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4aad      	ldr	r2, [pc, #692]	@ (800a580 <UART_SetConfig+0x900>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d176      	bne.n	800a3bc <UART_SetConfig+0x73c>
 800a2ce:	4bad      	ldr	r3, [pc, #692]	@ (800a584 <UART_SetConfig+0x904>)
 800a2d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a2d6:	2b28      	cmp	r3, #40	@ 0x28
 800a2d8:	d86c      	bhi.n	800a3b4 <UART_SetConfig+0x734>
 800a2da:	a201      	add	r2, pc, #4	@ (adr r2, 800a2e0 <UART_SetConfig+0x660>)
 800a2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e0:	0800a385 	.word	0x0800a385
 800a2e4:	0800a3b5 	.word	0x0800a3b5
 800a2e8:	0800a3b5 	.word	0x0800a3b5
 800a2ec:	0800a3b5 	.word	0x0800a3b5
 800a2f0:	0800a3b5 	.word	0x0800a3b5
 800a2f4:	0800a3b5 	.word	0x0800a3b5
 800a2f8:	0800a3b5 	.word	0x0800a3b5
 800a2fc:	0800a3b5 	.word	0x0800a3b5
 800a300:	0800a38d 	.word	0x0800a38d
 800a304:	0800a3b5 	.word	0x0800a3b5
 800a308:	0800a3b5 	.word	0x0800a3b5
 800a30c:	0800a3b5 	.word	0x0800a3b5
 800a310:	0800a3b5 	.word	0x0800a3b5
 800a314:	0800a3b5 	.word	0x0800a3b5
 800a318:	0800a3b5 	.word	0x0800a3b5
 800a31c:	0800a3b5 	.word	0x0800a3b5
 800a320:	0800a395 	.word	0x0800a395
 800a324:	0800a3b5 	.word	0x0800a3b5
 800a328:	0800a3b5 	.word	0x0800a3b5
 800a32c:	0800a3b5 	.word	0x0800a3b5
 800a330:	0800a3b5 	.word	0x0800a3b5
 800a334:	0800a3b5 	.word	0x0800a3b5
 800a338:	0800a3b5 	.word	0x0800a3b5
 800a33c:	0800a3b5 	.word	0x0800a3b5
 800a340:	0800a39d 	.word	0x0800a39d
 800a344:	0800a3b5 	.word	0x0800a3b5
 800a348:	0800a3b5 	.word	0x0800a3b5
 800a34c:	0800a3b5 	.word	0x0800a3b5
 800a350:	0800a3b5 	.word	0x0800a3b5
 800a354:	0800a3b5 	.word	0x0800a3b5
 800a358:	0800a3b5 	.word	0x0800a3b5
 800a35c:	0800a3b5 	.word	0x0800a3b5
 800a360:	0800a3a5 	.word	0x0800a3a5
 800a364:	0800a3b5 	.word	0x0800a3b5
 800a368:	0800a3b5 	.word	0x0800a3b5
 800a36c:	0800a3b5 	.word	0x0800a3b5
 800a370:	0800a3b5 	.word	0x0800a3b5
 800a374:	0800a3b5 	.word	0x0800a3b5
 800a378:	0800a3b5 	.word	0x0800a3b5
 800a37c:	0800a3b5 	.word	0x0800a3b5
 800a380:	0800a3ad 	.word	0x0800a3ad
 800a384:	2301      	movs	r3, #1
 800a386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a38a:	e050      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a38c:	2304      	movs	r3, #4
 800a38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a392:	e04c      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a394:	2308      	movs	r3, #8
 800a396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a39a:	e048      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a39c:	2310      	movs	r3, #16
 800a39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3a2:	e044      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a3a4:	2320      	movs	r3, #32
 800a3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3aa:	e040      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a3ac:	2340      	movs	r3, #64	@ 0x40
 800a3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3b2:	e03c      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a3b4:	2380      	movs	r3, #128	@ 0x80
 800a3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ba:	e038      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a71      	ldr	r2, [pc, #452]	@ (800a588 <UART_SetConfig+0x908>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d130      	bne.n	800a428 <UART_SetConfig+0x7a8>
 800a3c6:	4b6f      	ldr	r3, [pc, #444]	@ (800a584 <UART_SetConfig+0x904>)
 800a3c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3ca:	f003 0307 	and.w	r3, r3, #7
 800a3ce:	2b05      	cmp	r3, #5
 800a3d0:	d826      	bhi.n	800a420 <UART_SetConfig+0x7a0>
 800a3d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a3d8 <UART_SetConfig+0x758>)
 800a3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d8:	0800a3f1 	.word	0x0800a3f1
 800a3dc:	0800a3f9 	.word	0x0800a3f9
 800a3e0:	0800a401 	.word	0x0800a401
 800a3e4:	0800a409 	.word	0x0800a409
 800a3e8:	0800a411 	.word	0x0800a411
 800a3ec:	0800a419 	.word	0x0800a419
 800a3f0:	2302      	movs	r3, #2
 800a3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3f6:	e01a      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a3f8:	2304      	movs	r3, #4
 800a3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3fe:	e016      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a400:	2308      	movs	r3, #8
 800a402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a406:	e012      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a408:	2310      	movs	r3, #16
 800a40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a40e:	e00e      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a410:	2320      	movs	r3, #32
 800a412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a416:	e00a      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a418:	2340      	movs	r3, #64	@ 0x40
 800a41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a41e:	e006      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a420:	2380      	movs	r3, #128	@ 0x80
 800a422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a426:	e002      	b.n	800a42e <UART_SetConfig+0x7ae>
 800a428:	2380      	movs	r3, #128	@ 0x80
 800a42a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a55      	ldr	r2, [pc, #340]	@ (800a588 <UART_SetConfig+0x908>)
 800a434:	4293      	cmp	r3, r2
 800a436:	f040 80f8 	bne.w	800a62a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a43a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a43e:	2b20      	cmp	r3, #32
 800a440:	dc46      	bgt.n	800a4d0 <UART_SetConfig+0x850>
 800a442:	2b02      	cmp	r3, #2
 800a444:	db75      	blt.n	800a532 <UART_SetConfig+0x8b2>
 800a446:	3b02      	subs	r3, #2
 800a448:	2b1e      	cmp	r3, #30
 800a44a:	d872      	bhi.n	800a532 <UART_SetConfig+0x8b2>
 800a44c:	a201      	add	r2, pc, #4	@ (adr r2, 800a454 <UART_SetConfig+0x7d4>)
 800a44e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a452:	bf00      	nop
 800a454:	0800a4d7 	.word	0x0800a4d7
 800a458:	0800a533 	.word	0x0800a533
 800a45c:	0800a4df 	.word	0x0800a4df
 800a460:	0800a533 	.word	0x0800a533
 800a464:	0800a533 	.word	0x0800a533
 800a468:	0800a533 	.word	0x0800a533
 800a46c:	0800a4ef 	.word	0x0800a4ef
 800a470:	0800a533 	.word	0x0800a533
 800a474:	0800a533 	.word	0x0800a533
 800a478:	0800a533 	.word	0x0800a533
 800a47c:	0800a533 	.word	0x0800a533
 800a480:	0800a533 	.word	0x0800a533
 800a484:	0800a533 	.word	0x0800a533
 800a488:	0800a533 	.word	0x0800a533
 800a48c:	0800a4ff 	.word	0x0800a4ff
 800a490:	0800a533 	.word	0x0800a533
 800a494:	0800a533 	.word	0x0800a533
 800a498:	0800a533 	.word	0x0800a533
 800a49c:	0800a533 	.word	0x0800a533
 800a4a0:	0800a533 	.word	0x0800a533
 800a4a4:	0800a533 	.word	0x0800a533
 800a4a8:	0800a533 	.word	0x0800a533
 800a4ac:	0800a533 	.word	0x0800a533
 800a4b0:	0800a533 	.word	0x0800a533
 800a4b4:	0800a533 	.word	0x0800a533
 800a4b8:	0800a533 	.word	0x0800a533
 800a4bc:	0800a533 	.word	0x0800a533
 800a4c0:	0800a533 	.word	0x0800a533
 800a4c4:	0800a533 	.word	0x0800a533
 800a4c8:	0800a533 	.word	0x0800a533
 800a4cc:	0800a525 	.word	0x0800a525
 800a4d0:	2b40      	cmp	r3, #64	@ 0x40
 800a4d2:	d02a      	beq.n	800a52a <UART_SetConfig+0x8aa>
 800a4d4:	e02d      	b.n	800a532 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a4d6:	f7fe fd6b 	bl	8008fb0 <HAL_RCCEx_GetD3PCLK1Freq>
 800a4da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a4dc:	e02f      	b.n	800a53e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7fe fd7a 	bl	8008fdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a4e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4ec:	e027      	b.n	800a53e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4ee:	f107 0318 	add.w	r3, r7, #24
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7fe fec6 	bl	8009284 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4fc:	e01f      	b.n	800a53e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4fe:	4b21      	ldr	r3, [pc, #132]	@ (800a584 <UART_SetConfig+0x904>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f003 0320 	and.w	r3, r3, #32
 800a506:	2b00      	cmp	r3, #0
 800a508:	d009      	beq.n	800a51e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a50a:	4b1e      	ldr	r3, [pc, #120]	@ (800a584 <UART_SetConfig+0x904>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	08db      	lsrs	r3, r3, #3
 800a510:	f003 0303 	and.w	r3, r3, #3
 800a514:	4a1d      	ldr	r2, [pc, #116]	@ (800a58c <UART_SetConfig+0x90c>)
 800a516:	fa22 f303 	lsr.w	r3, r2, r3
 800a51a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a51c:	e00f      	b.n	800a53e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a51e:	4b1b      	ldr	r3, [pc, #108]	@ (800a58c <UART_SetConfig+0x90c>)
 800a520:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a522:	e00c      	b.n	800a53e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a524:	4b1a      	ldr	r3, [pc, #104]	@ (800a590 <UART_SetConfig+0x910>)
 800a526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a528:	e009      	b.n	800a53e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a52a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a52e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a530:	e005      	b.n	800a53e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a532:	2300      	movs	r3, #0
 800a534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a536:	2301      	movs	r3, #1
 800a538:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a53c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a53e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a540:	2b00      	cmp	r3, #0
 800a542:	f000 81ee 	beq.w	800a922 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a54a:	4a12      	ldr	r2, [pc, #72]	@ (800a594 <UART_SetConfig+0x914>)
 800a54c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a550:	461a      	mov	r2, r3
 800a552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a554:	fbb3 f3f2 	udiv	r3, r3, r2
 800a558:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	685a      	ldr	r2, [r3, #4]
 800a55e:	4613      	mov	r3, r2
 800a560:	005b      	lsls	r3, r3, #1
 800a562:	4413      	add	r3, r2
 800a564:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a566:	429a      	cmp	r2, r3
 800a568:	d305      	bcc.n	800a576 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a570:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a572:	429a      	cmp	r2, r3
 800a574:	d910      	bls.n	800a598 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a57c:	e1d1      	b.n	800a922 <UART_SetConfig+0xca2>
 800a57e:	bf00      	nop
 800a580:	40011c00 	.word	0x40011c00
 800a584:	58024400 	.word	0x58024400
 800a588:	58000c00 	.word	0x58000c00
 800a58c:	03d09000 	.word	0x03d09000
 800a590:	003d0900 	.word	0x003d0900
 800a594:	0800bc74 	.word	0x0800bc74
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a59a:	2200      	movs	r2, #0
 800a59c:	60bb      	str	r3, [r7, #8]
 800a59e:	60fa      	str	r2, [r7, #12]
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5a4:	4ac0      	ldr	r2, [pc, #768]	@ (800a8a8 <UART_SetConfig+0xc28>)
 800a5a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	603b      	str	r3, [r7, #0]
 800a5b0:	607a      	str	r2, [r7, #4]
 800a5b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a5ba:	f7f5 ff01 	bl	80003c0 <__aeabi_uldivmod>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	4610      	mov	r0, r2
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	f04f 0200 	mov.w	r2, #0
 800a5ca:	f04f 0300 	mov.w	r3, #0
 800a5ce:	020b      	lsls	r3, r1, #8
 800a5d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a5d4:	0202      	lsls	r2, r0, #8
 800a5d6:	6979      	ldr	r1, [r7, #20]
 800a5d8:	6849      	ldr	r1, [r1, #4]
 800a5da:	0849      	lsrs	r1, r1, #1
 800a5dc:	2000      	movs	r0, #0
 800a5de:	460c      	mov	r4, r1
 800a5e0:	4605      	mov	r5, r0
 800a5e2:	eb12 0804 	adds.w	r8, r2, r4
 800a5e6:	eb43 0905 	adc.w	r9, r3, r5
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	469a      	mov	sl, r3
 800a5f2:	4693      	mov	fp, r2
 800a5f4:	4652      	mov	r2, sl
 800a5f6:	465b      	mov	r3, fp
 800a5f8:	4640      	mov	r0, r8
 800a5fa:	4649      	mov	r1, r9
 800a5fc:	f7f5 fee0 	bl	80003c0 <__aeabi_uldivmod>
 800a600:	4602      	mov	r2, r0
 800a602:	460b      	mov	r3, r1
 800a604:	4613      	mov	r3, r2
 800a606:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a60a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a60e:	d308      	bcc.n	800a622 <UART_SetConfig+0x9a2>
 800a610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a612:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a616:	d204      	bcs.n	800a622 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a61e:	60da      	str	r2, [r3, #12]
 800a620:	e17f      	b.n	800a922 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a628:	e17b      	b.n	800a922 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	69db      	ldr	r3, [r3, #28]
 800a62e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a632:	f040 80bd 	bne.w	800a7b0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a636:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a63a:	2b20      	cmp	r3, #32
 800a63c:	dc48      	bgt.n	800a6d0 <UART_SetConfig+0xa50>
 800a63e:	2b00      	cmp	r3, #0
 800a640:	db7b      	blt.n	800a73a <UART_SetConfig+0xaba>
 800a642:	2b20      	cmp	r3, #32
 800a644:	d879      	bhi.n	800a73a <UART_SetConfig+0xaba>
 800a646:	a201      	add	r2, pc, #4	@ (adr r2, 800a64c <UART_SetConfig+0x9cc>)
 800a648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a64c:	0800a6d7 	.word	0x0800a6d7
 800a650:	0800a6df 	.word	0x0800a6df
 800a654:	0800a73b 	.word	0x0800a73b
 800a658:	0800a73b 	.word	0x0800a73b
 800a65c:	0800a6e7 	.word	0x0800a6e7
 800a660:	0800a73b 	.word	0x0800a73b
 800a664:	0800a73b 	.word	0x0800a73b
 800a668:	0800a73b 	.word	0x0800a73b
 800a66c:	0800a6f7 	.word	0x0800a6f7
 800a670:	0800a73b 	.word	0x0800a73b
 800a674:	0800a73b 	.word	0x0800a73b
 800a678:	0800a73b 	.word	0x0800a73b
 800a67c:	0800a73b 	.word	0x0800a73b
 800a680:	0800a73b 	.word	0x0800a73b
 800a684:	0800a73b 	.word	0x0800a73b
 800a688:	0800a73b 	.word	0x0800a73b
 800a68c:	0800a707 	.word	0x0800a707
 800a690:	0800a73b 	.word	0x0800a73b
 800a694:	0800a73b 	.word	0x0800a73b
 800a698:	0800a73b 	.word	0x0800a73b
 800a69c:	0800a73b 	.word	0x0800a73b
 800a6a0:	0800a73b 	.word	0x0800a73b
 800a6a4:	0800a73b 	.word	0x0800a73b
 800a6a8:	0800a73b 	.word	0x0800a73b
 800a6ac:	0800a73b 	.word	0x0800a73b
 800a6b0:	0800a73b 	.word	0x0800a73b
 800a6b4:	0800a73b 	.word	0x0800a73b
 800a6b8:	0800a73b 	.word	0x0800a73b
 800a6bc:	0800a73b 	.word	0x0800a73b
 800a6c0:	0800a73b 	.word	0x0800a73b
 800a6c4:	0800a73b 	.word	0x0800a73b
 800a6c8:	0800a73b 	.word	0x0800a73b
 800a6cc:	0800a72d 	.word	0x0800a72d
 800a6d0:	2b40      	cmp	r3, #64	@ 0x40
 800a6d2:	d02e      	beq.n	800a732 <UART_SetConfig+0xab2>
 800a6d4:	e031      	b.n	800a73a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6d6:	f7fc fdcd 	bl	8007274 <HAL_RCC_GetPCLK1Freq>
 800a6da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a6dc:	e033      	b.n	800a746 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6de:	f7fc fddf 	bl	80072a0 <HAL_RCC_GetPCLK2Freq>
 800a6e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a6e4:	e02f      	b.n	800a746 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7fe fc76 	bl	8008fdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a6f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6f4:	e027      	b.n	800a746 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6f6:	f107 0318 	add.w	r3, r7, #24
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7fe fdc2 	bl	8009284 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a704:	e01f      	b.n	800a746 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a706:	4b69      	ldr	r3, [pc, #420]	@ (800a8ac <UART_SetConfig+0xc2c>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f003 0320 	and.w	r3, r3, #32
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d009      	beq.n	800a726 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a712:	4b66      	ldr	r3, [pc, #408]	@ (800a8ac <UART_SetConfig+0xc2c>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	08db      	lsrs	r3, r3, #3
 800a718:	f003 0303 	and.w	r3, r3, #3
 800a71c:	4a64      	ldr	r2, [pc, #400]	@ (800a8b0 <UART_SetConfig+0xc30>)
 800a71e:	fa22 f303 	lsr.w	r3, r2, r3
 800a722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a724:	e00f      	b.n	800a746 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a726:	4b62      	ldr	r3, [pc, #392]	@ (800a8b0 <UART_SetConfig+0xc30>)
 800a728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a72a:	e00c      	b.n	800a746 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a72c:	4b61      	ldr	r3, [pc, #388]	@ (800a8b4 <UART_SetConfig+0xc34>)
 800a72e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a730:	e009      	b.n	800a746 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a732:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a738:	e005      	b.n	800a746 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a73a:	2300      	movs	r3, #0
 800a73c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a744:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a746:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f000 80ea 	beq.w	800a922 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a752:	4a55      	ldr	r2, [pc, #340]	@ (800a8a8 <UART_SetConfig+0xc28>)
 800a754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a758:	461a      	mov	r2, r3
 800a75a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a75c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a760:	005a      	lsls	r2, r3, #1
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	085b      	lsrs	r3, r3, #1
 800a768:	441a      	add	r2, r3
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a772:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a776:	2b0f      	cmp	r3, #15
 800a778:	d916      	bls.n	800a7a8 <UART_SetConfig+0xb28>
 800a77a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a77c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a780:	d212      	bcs.n	800a7a8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a784:	b29b      	uxth	r3, r3
 800a786:	f023 030f 	bic.w	r3, r3, #15
 800a78a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a78e:	085b      	lsrs	r3, r3, #1
 800a790:	b29b      	uxth	r3, r3
 800a792:	f003 0307 	and.w	r3, r3, #7
 800a796:	b29a      	uxth	r2, r3
 800a798:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a79a:	4313      	orrs	r3, r2
 800a79c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a7a4:	60da      	str	r2, [r3, #12]
 800a7a6:	e0bc      	b.n	800a922 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a7ae:	e0b8      	b.n	800a922 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a7b0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a7b4:	2b20      	cmp	r3, #32
 800a7b6:	dc4b      	bgt.n	800a850 <UART_SetConfig+0xbd0>
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	f2c0 8087 	blt.w	800a8cc <UART_SetConfig+0xc4c>
 800a7be:	2b20      	cmp	r3, #32
 800a7c0:	f200 8084 	bhi.w	800a8cc <UART_SetConfig+0xc4c>
 800a7c4:	a201      	add	r2, pc, #4	@ (adr r2, 800a7cc <UART_SetConfig+0xb4c>)
 800a7c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ca:	bf00      	nop
 800a7cc:	0800a857 	.word	0x0800a857
 800a7d0:	0800a85f 	.word	0x0800a85f
 800a7d4:	0800a8cd 	.word	0x0800a8cd
 800a7d8:	0800a8cd 	.word	0x0800a8cd
 800a7dc:	0800a867 	.word	0x0800a867
 800a7e0:	0800a8cd 	.word	0x0800a8cd
 800a7e4:	0800a8cd 	.word	0x0800a8cd
 800a7e8:	0800a8cd 	.word	0x0800a8cd
 800a7ec:	0800a877 	.word	0x0800a877
 800a7f0:	0800a8cd 	.word	0x0800a8cd
 800a7f4:	0800a8cd 	.word	0x0800a8cd
 800a7f8:	0800a8cd 	.word	0x0800a8cd
 800a7fc:	0800a8cd 	.word	0x0800a8cd
 800a800:	0800a8cd 	.word	0x0800a8cd
 800a804:	0800a8cd 	.word	0x0800a8cd
 800a808:	0800a8cd 	.word	0x0800a8cd
 800a80c:	0800a887 	.word	0x0800a887
 800a810:	0800a8cd 	.word	0x0800a8cd
 800a814:	0800a8cd 	.word	0x0800a8cd
 800a818:	0800a8cd 	.word	0x0800a8cd
 800a81c:	0800a8cd 	.word	0x0800a8cd
 800a820:	0800a8cd 	.word	0x0800a8cd
 800a824:	0800a8cd 	.word	0x0800a8cd
 800a828:	0800a8cd 	.word	0x0800a8cd
 800a82c:	0800a8cd 	.word	0x0800a8cd
 800a830:	0800a8cd 	.word	0x0800a8cd
 800a834:	0800a8cd 	.word	0x0800a8cd
 800a838:	0800a8cd 	.word	0x0800a8cd
 800a83c:	0800a8cd 	.word	0x0800a8cd
 800a840:	0800a8cd 	.word	0x0800a8cd
 800a844:	0800a8cd 	.word	0x0800a8cd
 800a848:	0800a8cd 	.word	0x0800a8cd
 800a84c:	0800a8bf 	.word	0x0800a8bf
 800a850:	2b40      	cmp	r3, #64	@ 0x40
 800a852:	d037      	beq.n	800a8c4 <UART_SetConfig+0xc44>
 800a854:	e03a      	b.n	800a8cc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a856:	f7fc fd0d 	bl	8007274 <HAL_RCC_GetPCLK1Freq>
 800a85a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a85c:	e03c      	b.n	800a8d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a85e:	f7fc fd1f 	bl	80072a0 <HAL_RCC_GetPCLK2Freq>
 800a862:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a864:	e038      	b.n	800a8d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a866:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7fe fbb6 	bl	8008fdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a874:	e030      	b.n	800a8d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a876:	f107 0318 	add.w	r3, r7, #24
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7fe fd02 	bl	8009284 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a884:	e028      	b.n	800a8d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a886:	4b09      	ldr	r3, [pc, #36]	@ (800a8ac <UART_SetConfig+0xc2c>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f003 0320 	and.w	r3, r3, #32
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d012      	beq.n	800a8b8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a892:	4b06      	ldr	r3, [pc, #24]	@ (800a8ac <UART_SetConfig+0xc2c>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	08db      	lsrs	r3, r3, #3
 800a898:	f003 0303 	and.w	r3, r3, #3
 800a89c:	4a04      	ldr	r2, [pc, #16]	@ (800a8b0 <UART_SetConfig+0xc30>)
 800a89e:	fa22 f303 	lsr.w	r3, r2, r3
 800a8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8a4:	e018      	b.n	800a8d8 <UART_SetConfig+0xc58>
 800a8a6:	bf00      	nop
 800a8a8:	0800bc74 	.word	0x0800bc74
 800a8ac:	58024400 	.word	0x58024400
 800a8b0:	03d09000 	.word	0x03d09000
 800a8b4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a8b8:	4b24      	ldr	r3, [pc, #144]	@ (800a94c <UART_SetConfig+0xccc>)
 800a8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8bc:	e00c      	b.n	800a8d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a8be:	4b24      	ldr	r3, [pc, #144]	@ (800a950 <UART_SetConfig+0xcd0>)
 800a8c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8c2:	e009      	b.n	800a8d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8ca:	e005      	b.n	800a8d8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a8d6:	bf00      	nop
    }

    if (pclk != 0U)
 800a8d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d021      	beq.n	800a922 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8e2:	4a1c      	ldr	r2, [pc, #112]	@ (800a954 <UART_SetConfig+0xcd4>)
 800a8e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8ec:	fbb3 f2f2 	udiv	r2, r3, r2
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	085b      	lsrs	r3, r3, #1
 800a8f6:	441a      	add	r2, r3
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a900:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a904:	2b0f      	cmp	r3, #15
 800a906:	d909      	bls.n	800a91c <UART_SetConfig+0xc9c>
 800a908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a90a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a90e:	d205      	bcs.n	800a91c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a912:	b29a      	uxth	r2, r3
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	60da      	str	r2, [r3, #12]
 800a91a:	e002      	b.n	800a922 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a91c:	2301      	movs	r3, #1
 800a91e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	2201      	movs	r2, #1
 800a926:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	2201      	movs	r2, #1
 800a92e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	2200      	movs	r2, #0
 800a936:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	2200      	movs	r2, #0
 800a93c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a93e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a942:	4618      	mov	r0, r3
 800a944:	3748      	adds	r7, #72	@ 0x48
 800a946:	46bd      	mov	sp, r7
 800a948:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a94c:	03d09000 	.word	0x03d09000
 800a950:	003d0900 	.word	0x003d0900
 800a954:	0800bc74 	.word	0x0800bc74

0800a958 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a964:	f003 0308 	and.w	r3, r3, #8
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d00a      	beq.n	800a982 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	430a      	orrs	r2, r1
 800a980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a986:	f003 0301 	and.w	r3, r3, #1
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d00a      	beq.n	800a9a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	430a      	orrs	r2, r1
 800a9a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9a8:	f003 0302 	and.w	r3, r3, #2
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d00a      	beq.n	800a9c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	430a      	orrs	r2, r1
 800a9c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9ca:	f003 0304 	and.w	r3, r3, #4
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d00a      	beq.n	800a9e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	430a      	orrs	r2, r1
 800a9e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9ec:	f003 0310 	and.w	r3, r3, #16
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d00a      	beq.n	800aa0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	689b      	ldr	r3, [r3, #8]
 800a9fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	430a      	orrs	r2, r1
 800aa08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa0e:	f003 0320 	and.w	r3, r3, #32
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d00a      	beq.n	800aa2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	689b      	ldr	r3, [r3, #8]
 800aa1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	430a      	orrs	r2, r1
 800aa2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d01a      	beq.n	800aa6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	430a      	orrs	r2, r1
 800aa4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa56:	d10a      	bne.n	800aa6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	430a      	orrs	r2, r1
 800aa6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d00a      	beq.n	800aa90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	430a      	orrs	r2, r1
 800aa8e:	605a      	str	r2, [r3, #4]
  }
}
 800aa90:	bf00      	nop
 800aa92:	370c      	adds	r7, #12
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b098      	sub	sp, #96	@ 0x60
 800aaa0:	af02      	add	r7, sp, #8
 800aaa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aaac:	f7f8 f80c 	bl	8002ac8 <HAL_GetTick>
 800aab0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f003 0308 	and.w	r3, r3, #8
 800aabc:	2b08      	cmp	r3, #8
 800aabe:	d12f      	bne.n	800ab20 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aac0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aac4:	9300      	str	r3, [sp, #0]
 800aac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aac8:	2200      	movs	r2, #0
 800aaca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 f88e 	bl	800abf0 <UART_WaitOnFlagUntilTimeout>
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d022      	beq.n	800ab20 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aae2:	e853 3f00 	ldrex	r3, [r3]
 800aae6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aaee:	653b      	str	r3, [r7, #80]	@ 0x50
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aaf8:	647b      	str	r3, [r7, #68]	@ 0x44
 800aafa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aafc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aafe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab00:	e841 2300 	strex	r3, r2, [r1]
 800ab04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d1e6      	bne.n	800aada <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2220      	movs	r2, #32
 800ab10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab1c:	2303      	movs	r3, #3
 800ab1e:	e063      	b.n	800abe8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f003 0304 	and.w	r3, r3, #4
 800ab2a:	2b04      	cmp	r3, #4
 800ab2c:	d149      	bne.n	800abc2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab2e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ab32:	9300      	str	r3, [sp, #0]
 800ab34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab36:	2200      	movs	r2, #0
 800ab38:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 f857 	bl	800abf0 <UART_WaitOnFlagUntilTimeout>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d03c      	beq.n	800abc2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab50:	e853 3f00 	ldrex	r3, [r3]
 800ab54:	623b      	str	r3, [r7, #32]
   return(result);
 800ab56:	6a3b      	ldr	r3, [r7, #32]
 800ab58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	461a      	mov	r2, r3
 800ab64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab66:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab68:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab6e:	e841 2300 	strex	r3, r2, [r1]
 800ab72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1e6      	bne.n	800ab48 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	3308      	adds	r3, #8
 800ab80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	e853 3f00 	ldrex	r3, [r3]
 800ab88:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f023 0301 	bic.w	r3, r3, #1
 800ab90:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	3308      	adds	r3, #8
 800ab98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab9a:	61fa      	str	r2, [r7, #28]
 800ab9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab9e:	69b9      	ldr	r1, [r7, #24]
 800aba0:	69fa      	ldr	r2, [r7, #28]
 800aba2:	e841 2300 	strex	r3, r2, [r1]
 800aba6:	617b      	str	r3, [r7, #20]
   return(result);
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d1e5      	bne.n	800ab7a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2220      	movs	r2, #32
 800abb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abbe:	2303      	movs	r3, #3
 800abc0:	e012      	b.n	800abe8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2220      	movs	r2, #32
 800abc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2220      	movs	r2, #32
 800abce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2200      	movs	r2, #0
 800abd6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2200      	movs	r2, #0
 800abe2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800abe6:	2300      	movs	r3, #0
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3758      	adds	r7, #88	@ 0x58
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	603b      	str	r3, [r7, #0]
 800abfc:	4613      	mov	r3, r2
 800abfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac00:	e04f      	b.n	800aca2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac08:	d04b      	beq.n	800aca2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac0a:	f7f7 ff5d 	bl	8002ac8 <HAL_GetTick>
 800ac0e:	4602      	mov	r2, r0
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	1ad3      	subs	r3, r2, r3
 800ac14:	69ba      	ldr	r2, [r7, #24]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d302      	bcc.n	800ac20 <UART_WaitOnFlagUntilTimeout+0x30>
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d101      	bne.n	800ac24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ac20:	2303      	movs	r3, #3
 800ac22:	e04e      	b.n	800acc2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f003 0304 	and.w	r3, r3, #4
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d037      	beq.n	800aca2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	2b80      	cmp	r3, #128	@ 0x80
 800ac36:	d034      	beq.n	800aca2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	2b40      	cmp	r3, #64	@ 0x40
 800ac3c:	d031      	beq.n	800aca2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	69db      	ldr	r3, [r3, #28]
 800ac44:	f003 0308 	and.w	r3, r3, #8
 800ac48:	2b08      	cmp	r3, #8
 800ac4a:	d110      	bne.n	800ac6e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	2208      	movs	r2, #8
 800ac52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac54:	68f8      	ldr	r0, [r7, #12]
 800ac56:	f000 f839 	bl	800accc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2208      	movs	r2, #8
 800ac5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2200      	movs	r2, #0
 800ac66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	e029      	b.n	800acc2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	69db      	ldr	r3, [r3, #28]
 800ac74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ac78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac7c:	d111      	bne.n	800aca2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ac86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac88:	68f8      	ldr	r0, [r7, #12]
 800ac8a:	f000 f81f 	bl	800accc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2220      	movs	r2, #32
 800ac92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ac9e:	2303      	movs	r3, #3
 800aca0:	e00f      	b.n	800acc2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	69da      	ldr	r2, [r3, #28]
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	4013      	ands	r3, r2
 800acac:	68ba      	ldr	r2, [r7, #8]
 800acae:	429a      	cmp	r2, r3
 800acb0:	bf0c      	ite	eq
 800acb2:	2301      	moveq	r3, #1
 800acb4:	2300      	movne	r3, #0
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	461a      	mov	r2, r3
 800acba:	79fb      	ldrb	r3, [r7, #7]
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d0a0      	beq.n	800ac02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800acc0:	2300      	movs	r3, #0
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3710      	adds	r7, #16
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
	...

0800accc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800accc:	b480      	push	{r7}
 800acce:	b095      	sub	sp, #84	@ 0x54
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acdc:	e853 3f00 	ldrex	r3, [r3]
 800ace0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ace2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ace8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	461a      	mov	r2, r3
 800acf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acf2:	643b      	str	r3, [r7, #64]	@ 0x40
 800acf4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800acf8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800acfa:	e841 2300 	strex	r3, r2, [r1]
 800acfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ad00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d1e6      	bne.n	800acd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	3308      	adds	r3, #8
 800ad0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad0e:	6a3b      	ldr	r3, [r7, #32]
 800ad10:	e853 3f00 	ldrex	r3, [r3]
 800ad14:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad16:	69fa      	ldr	r2, [r7, #28]
 800ad18:	4b1e      	ldr	r3, [pc, #120]	@ (800ad94 <UART_EndRxTransfer+0xc8>)
 800ad1a:	4013      	ands	r3, r2
 800ad1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	3308      	adds	r3, #8
 800ad24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ad28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad2e:	e841 2300 	strex	r3, r2, [r1]
 800ad32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ad34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d1e5      	bne.n	800ad06 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d118      	bne.n	800ad74 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	e853 3f00 	ldrex	r3, [r3]
 800ad4e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	f023 0310 	bic.w	r3, r3, #16
 800ad56:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad60:	61bb      	str	r3, [r7, #24]
 800ad62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad64:	6979      	ldr	r1, [r7, #20]
 800ad66:	69ba      	ldr	r2, [r7, #24]
 800ad68:	e841 2300 	strex	r3, r2, [r1]
 800ad6c:	613b      	str	r3, [r7, #16]
   return(result);
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d1e6      	bne.n	800ad42 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2220      	movs	r2, #32
 800ad78:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2200      	movs	r2, #0
 800ad86:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ad88:	bf00      	nop
 800ad8a:	3754      	adds	r7, #84	@ 0x54
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr
 800ad94:	effffffe 	.word	0xeffffffe

0800ad98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b085      	sub	sp, #20
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d101      	bne.n	800adae <HAL_UARTEx_DisableFifoMode+0x16>
 800adaa:	2302      	movs	r3, #2
 800adac:	e027      	b.n	800adfe <HAL_UARTEx_DisableFifoMode+0x66>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2201      	movs	r2, #1
 800adb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2224      	movs	r2, #36	@ 0x24
 800adba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f022 0201 	bic.w	r2, r2, #1
 800add4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800addc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2200      	movs	r2, #0
 800ade2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2220      	movs	r2, #32
 800adf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2200      	movs	r2, #0
 800adf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800adfc:	2300      	movs	r3, #0
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3714      	adds	r7, #20
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr

0800ae0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b084      	sub	sp, #16
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
 800ae12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	d101      	bne.n	800ae22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ae1e:	2302      	movs	r3, #2
 800ae20:	e02d      	b.n	800ae7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2201      	movs	r2, #1
 800ae26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2224      	movs	r2, #36	@ 0x24
 800ae2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	681a      	ldr	r2, [r3, #0]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f022 0201 	bic.w	r2, r2, #1
 800ae48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	683a      	ldr	r2, [r7, #0]
 800ae5a:	430a      	orrs	r2, r1
 800ae5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 f850 	bl	800af04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	68fa      	ldr	r2, [r7, #12]
 800ae6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2220      	movs	r2, #32
 800ae70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2200      	movs	r2, #0
 800ae78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae7c:	2300      	movs	r3, #0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3710      	adds	r7, #16
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b084      	sub	sp, #16
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
 800ae8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d101      	bne.n	800ae9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ae9a:	2302      	movs	r3, #2
 800ae9c:	e02d      	b.n	800aefa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2201      	movs	r2, #1
 800aea2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2224      	movs	r2, #36	@ 0x24
 800aeaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f022 0201 	bic.w	r2, r2, #1
 800aec4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	683a      	ldr	r2, [r7, #0]
 800aed6:	430a      	orrs	r2, r1
 800aed8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 f812 	bl	800af04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2220      	movs	r2, #32
 800aeec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2200      	movs	r2, #0
 800aef4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aef8:	2300      	movs	r3, #0
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3710      	adds	r7, #16
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
	...

0800af04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800af04:	b480      	push	{r7}
 800af06:	b085      	sub	sp, #20
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af10:	2b00      	cmp	r3, #0
 800af12:	d108      	bne.n	800af26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2201      	movs	r2, #1
 800af18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2201      	movs	r2, #1
 800af20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800af24:	e031      	b.n	800af8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800af26:	2310      	movs	r3, #16
 800af28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800af2a:	2310      	movs	r3, #16
 800af2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	0e5b      	lsrs	r3, r3, #25
 800af36:	b2db      	uxtb	r3, r3
 800af38:	f003 0307 	and.w	r3, r3, #7
 800af3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	0f5b      	lsrs	r3, r3, #29
 800af46:	b2db      	uxtb	r3, r3
 800af48:	f003 0307 	and.w	r3, r3, #7
 800af4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af4e:	7bbb      	ldrb	r3, [r7, #14]
 800af50:	7b3a      	ldrb	r2, [r7, #12]
 800af52:	4911      	ldr	r1, [pc, #68]	@ (800af98 <UARTEx_SetNbDataToProcess+0x94>)
 800af54:	5c8a      	ldrb	r2, [r1, r2]
 800af56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800af5a:	7b3a      	ldrb	r2, [r7, #12]
 800af5c:	490f      	ldr	r1, [pc, #60]	@ (800af9c <UARTEx_SetNbDataToProcess+0x98>)
 800af5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af60:	fb93 f3f2 	sdiv	r3, r3, r2
 800af64:	b29a      	uxth	r2, r3
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af6c:	7bfb      	ldrb	r3, [r7, #15]
 800af6e:	7b7a      	ldrb	r2, [r7, #13]
 800af70:	4909      	ldr	r1, [pc, #36]	@ (800af98 <UARTEx_SetNbDataToProcess+0x94>)
 800af72:	5c8a      	ldrb	r2, [r1, r2]
 800af74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800af78:	7b7a      	ldrb	r2, [r7, #13]
 800af7a:	4908      	ldr	r1, [pc, #32]	@ (800af9c <UARTEx_SetNbDataToProcess+0x98>)
 800af7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af7e:	fb93 f3f2 	sdiv	r3, r3, r2
 800af82:	b29a      	uxth	r2, r3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800af8a:	bf00      	nop
 800af8c:	3714      	adds	r7, #20
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr
 800af96:	bf00      	nop
 800af98:	0800bc8c 	.word	0x0800bc8c
 800af9c:	0800bc94 	.word	0x0800bc94

0800afa0 <siprintf>:
 800afa0:	b40e      	push	{r1, r2, r3}
 800afa2:	b510      	push	{r4, lr}
 800afa4:	b09d      	sub	sp, #116	@ 0x74
 800afa6:	ab1f      	add	r3, sp, #124	@ 0x7c
 800afa8:	9002      	str	r0, [sp, #8]
 800afaa:	9006      	str	r0, [sp, #24]
 800afac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800afb0:	480a      	ldr	r0, [pc, #40]	@ (800afdc <siprintf+0x3c>)
 800afb2:	9107      	str	r1, [sp, #28]
 800afb4:	9104      	str	r1, [sp, #16]
 800afb6:	490a      	ldr	r1, [pc, #40]	@ (800afe0 <siprintf+0x40>)
 800afb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800afbc:	9105      	str	r1, [sp, #20]
 800afbe:	2400      	movs	r4, #0
 800afc0:	a902      	add	r1, sp, #8
 800afc2:	6800      	ldr	r0, [r0, #0]
 800afc4:	9301      	str	r3, [sp, #4]
 800afc6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800afc8:	f000 f9a2 	bl	800b310 <_svfiprintf_r>
 800afcc:	9b02      	ldr	r3, [sp, #8]
 800afce:	701c      	strb	r4, [r3, #0]
 800afd0:	b01d      	add	sp, #116	@ 0x74
 800afd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afd6:	b003      	add	sp, #12
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop
 800afdc:	2400001c 	.word	0x2400001c
 800afe0:	ffff0208 	.word	0xffff0208

0800afe4 <memset>:
 800afe4:	4402      	add	r2, r0
 800afe6:	4603      	mov	r3, r0
 800afe8:	4293      	cmp	r3, r2
 800afea:	d100      	bne.n	800afee <memset+0xa>
 800afec:	4770      	bx	lr
 800afee:	f803 1b01 	strb.w	r1, [r3], #1
 800aff2:	e7f9      	b.n	800afe8 <memset+0x4>

0800aff4 <__errno>:
 800aff4:	4b01      	ldr	r3, [pc, #4]	@ (800affc <__errno+0x8>)
 800aff6:	6818      	ldr	r0, [r3, #0]
 800aff8:	4770      	bx	lr
 800affa:	bf00      	nop
 800affc:	2400001c 	.word	0x2400001c

0800b000 <__libc_init_array>:
 800b000:	b570      	push	{r4, r5, r6, lr}
 800b002:	4d0d      	ldr	r5, [pc, #52]	@ (800b038 <__libc_init_array+0x38>)
 800b004:	4c0d      	ldr	r4, [pc, #52]	@ (800b03c <__libc_init_array+0x3c>)
 800b006:	1b64      	subs	r4, r4, r5
 800b008:	10a4      	asrs	r4, r4, #2
 800b00a:	2600      	movs	r6, #0
 800b00c:	42a6      	cmp	r6, r4
 800b00e:	d109      	bne.n	800b024 <__libc_init_array+0x24>
 800b010:	4d0b      	ldr	r5, [pc, #44]	@ (800b040 <__libc_init_array+0x40>)
 800b012:	4c0c      	ldr	r4, [pc, #48]	@ (800b044 <__libc_init_array+0x44>)
 800b014:	f000 fc64 	bl	800b8e0 <_init>
 800b018:	1b64      	subs	r4, r4, r5
 800b01a:	10a4      	asrs	r4, r4, #2
 800b01c:	2600      	movs	r6, #0
 800b01e:	42a6      	cmp	r6, r4
 800b020:	d105      	bne.n	800b02e <__libc_init_array+0x2e>
 800b022:	bd70      	pop	{r4, r5, r6, pc}
 800b024:	f855 3b04 	ldr.w	r3, [r5], #4
 800b028:	4798      	blx	r3
 800b02a:	3601      	adds	r6, #1
 800b02c:	e7ee      	b.n	800b00c <__libc_init_array+0xc>
 800b02e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b032:	4798      	blx	r3
 800b034:	3601      	adds	r6, #1
 800b036:	e7f2      	b.n	800b01e <__libc_init_array+0x1e>
 800b038:	0800bcd8 	.word	0x0800bcd8
 800b03c:	0800bcd8 	.word	0x0800bcd8
 800b040:	0800bcd8 	.word	0x0800bcd8
 800b044:	0800bce0 	.word	0x0800bce0

0800b048 <__retarget_lock_acquire_recursive>:
 800b048:	4770      	bx	lr

0800b04a <__retarget_lock_release_recursive>:
 800b04a:	4770      	bx	lr

0800b04c <memcpy>:
 800b04c:	440a      	add	r2, r1
 800b04e:	4291      	cmp	r1, r2
 800b050:	f100 33ff 	add.w	r3, r0, #4294967295
 800b054:	d100      	bne.n	800b058 <memcpy+0xc>
 800b056:	4770      	bx	lr
 800b058:	b510      	push	{r4, lr}
 800b05a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b05e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b062:	4291      	cmp	r1, r2
 800b064:	d1f9      	bne.n	800b05a <memcpy+0xe>
 800b066:	bd10      	pop	{r4, pc}

0800b068 <_free_r>:
 800b068:	b538      	push	{r3, r4, r5, lr}
 800b06a:	4605      	mov	r5, r0
 800b06c:	2900      	cmp	r1, #0
 800b06e:	d041      	beq.n	800b0f4 <_free_r+0x8c>
 800b070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b074:	1f0c      	subs	r4, r1, #4
 800b076:	2b00      	cmp	r3, #0
 800b078:	bfb8      	it	lt
 800b07a:	18e4      	addlt	r4, r4, r3
 800b07c:	f000 f8e0 	bl	800b240 <__malloc_lock>
 800b080:	4a1d      	ldr	r2, [pc, #116]	@ (800b0f8 <_free_r+0x90>)
 800b082:	6813      	ldr	r3, [r2, #0]
 800b084:	b933      	cbnz	r3, 800b094 <_free_r+0x2c>
 800b086:	6063      	str	r3, [r4, #4]
 800b088:	6014      	str	r4, [r2, #0]
 800b08a:	4628      	mov	r0, r5
 800b08c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b090:	f000 b8dc 	b.w	800b24c <__malloc_unlock>
 800b094:	42a3      	cmp	r3, r4
 800b096:	d908      	bls.n	800b0aa <_free_r+0x42>
 800b098:	6820      	ldr	r0, [r4, #0]
 800b09a:	1821      	adds	r1, r4, r0
 800b09c:	428b      	cmp	r3, r1
 800b09e:	bf01      	itttt	eq
 800b0a0:	6819      	ldreq	r1, [r3, #0]
 800b0a2:	685b      	ldreq	r3, [r3, #4]
 800b0a4:	1809      	addeq	r1, r1, r0
 800b0a6:	6021      	streq	r1, [r4, #0]
 800b0a8:	e7ed      	b.n	800b086 <_free_r+0x1e>
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	b10b      	cbz	r3, 800b0b4 <_free_r+0x4c>
 800b0b0:	42a3      	cmp	r3, r4
 800b0b2:	d9fa      	bls.n	800b0aa <_free_r+0x42>
 800b0b4:	6811      	ldr	r1, [r2, #0]
 800b0b6:	1850      	adds	r0, r2, r1
 800b0b8:	42a0      	cmp	r0, r4
 800b0ba:	d10b      	bne.n	800b0d4 <_free_r+0x6c>
 800b0bc:	6820      	ldr	r0, [r4, #0]
 800b0be:	4401      	add	r1, r0
 800b0c0:	1850      	adds	r0, r2, r1
 800b0c2:	4283      	cmp	r3, r0
 800b0c4:	6011      	str	r1, [r2, #0]
 800b0c6:	d1e0      	bne.n	800b08a <_free_r+0x22>
 800b0c8:	6818      	ldr	r0, [r3, #0]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	6053      	str	r3, [r2, #4]
 800b0ce:	4408      	add	r0, r1
 800b0d0:	6010      	str	r0, [r2, #0]
 800b0d2:	e7da      	b.n	800b08a <_free_r+0x22>
 800b0d4:	d902      	bls.n	800b0dc <_free_r+0x74>
 800b0d6:	230c      	movs	r3, #12
 800b0d8:	602b      	str	r3, [r5, #0]
 800b0da:	e7d6      	b.n	800b08a <_free_r+0x22>
 800b0dc:	6820      	ldr	r0, [r4, #0]
 800b0de:	1821      	adds	r1, r4, r0
 800b0e0:	428b      	cmp	r3, r1
 800b0e2:	bf04      	itt	eq
 800b0e4:	6819      	ldreq	r1, [r3, #0]
 800b0e6:	685b      	ldreq	r3, [r3, #4]
 800b0e8:	6063      	str	r3, [r4, #4]
 800b0ea:	bf04      	itt	eq
 800b0ec:	1809      	addeq	r1, r1, r0
 800b0ee:	6021      	streq	r1, [r4, #0]
 800b0f0:	6054      	str	r4, [r2, #4]
 800b0f2:	e7ca      	b.n	800b08a <_free_r+0x22>
 800b0f4:	bd38      	pop	{r3, r4, r5, pc}
 800b0f6:	bf00      	nop
 800b0f8:	24000e48 	.word	0x24000e48

0800b0fc <sbrk_aligned>:
 800b0fc:	b570      	push	{r4, r5, r6, lr}
 800b0fe:	4e0f      	ldr	r6, [pc, #60]	@ (800b13c <sbrk_aligned+0x40>)
 800b100:	460c      	mov	r4, r1
 800b102:	6831      	ldr	r1, [r6, #0]
 800b104:	4605      	mov	r5, r0
 800b106:	b911      	cbnz	r1, 800b10e <sbrk_aligned+0x12>
 800b108:	f000 fba4 	bl	800b854 <_sbrk_r>
 800b10c:	6030      	str	r0, [r6, #0]
 800b10e:	4621      	mov	r1, r4
 800b110:	4628      	mov	r0, r5
 800b112:	f000 fb9f 	bl	800b854 <_sbrk_r>
 800b116:	1c43      	adds	r3, r0, #1
 800b118:	d103      	bne.n	800b122 <sbrk_aligned+0x26>
 800b11a:	f04f 34ff 	mov.w	r4, #4294967295
 800b11e:	4620      	mov	r0, r4
 800b120:	bd70      	pop	{r4, r5, r6, pc}
 800b122:	1cc4      	adds	r4, r0, #3
 800b124:	f024 0403 	bic.w	r4, r4, #3
 800b128:	42a0      	cmp	r0, r4
 800b12a:	d0f8      	beq.n	800b11e <sbrk_aligned+0x22>
 800b12c:	1a21      	subs	r1, r4, r0
 800b12e:	4628      	mov	r0, r5
 800b130:	f000 fb90 	bl	800b854 <_sbrk_r>
 800b134:	3001      	adds	r0, #1
 800b136:	d1f2      	bne.n	800b11e <sbrk_aligned+0x22>
 800b138:	e7ef      	b.n	800b11a <sbrk_aligned+0x1e>
 800b13a:	bf00      	nop
 800b13c:	24000e44 	.word	0x24000e44

0800b140 <_malloc_r>:
 800b140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b144:	1ccd      	adds	r5, r1, #3
 800b146:	f025 0503 	bic.w	r5, r5, #3
 800b14a:	3508      	adds	r5, #8
 800b14c:	2d0c      	cmp	r5, #12
 800b14e:	bf38      	it	cc
 800b150:	250c      	movcc	r5, #12
 800b152:	2d00      	cmp	r5, #0
 800b154:	4606      	mov	r6, r0
 800b156:	db01      	blt.n	800b15c <_malloc_r+0x1c>
 800b158:	42a9      	cmp	r1, r5
 800b15a:	d904      	bls.n	800b166 <_malloc_r+0x26>
 800b15c:	230c      	movs	r3, #12
 800b15e:	6033      	str	r3, [r6, #0]
 800b160:	2000      	movs	r0, #0
 800b162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b166:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b23c <_malloc_r+0xfc>
 800b16a:	f000 f869 	bl	800b240 <__malloc_lock>
 800b16e:	f8d8 3000 	ldr.w	r3, [r8]
 800b172:	461c      	mov	r4, r3
 800b174:	bb44      	cbnz	r4, 800b1c8 <_malloc_r+0x88>
 800b176:	4629      	mov	r1, r5
 800b178:	4630      	mov	r0, r6
 800b17a:	f7ff ffbf 	bl	800b0fc <sbrk_aligned>
 800b17e:	1c43      	adds	r3, r0, #1
 800b180:	4604      	mov	r4, r0
 800b182:	d158      	bne.n	800b236 <_malloc_r+0xf6>
 800b184:	f8d8 4000 	ldr.w	r4, [r8]
 800b188:	4627      	mov	r7, r4
 800b18a:	2f00      	cmp	r7, #0
 800b18c:	d143      	bne.n	800b216 <_malloc_r+0xd6>
 800b18e:	2c00      	cmp	r4, #0
 800b190:	d04b      	beq.n	800b22a <_malloc_r+0xea>
 800b192:	6823      	ldr	r3, [r4, #0]
 800b194:	4639      	mov	r1, r7
 800b196:	4630      	mov	r0, r6
 800b198:	eb04 0903 	add.w	r9, r4, r3
 800b19c:	f000 fb5a 	bl	800b854 <_sbrk_r>
 800b1a0:	4581      	cmp	r9, r0
 800b1a2:	d142      	bne.n	800b22a <_malloc_r+0xea>
 800b1a4:	6821      	ldr	r1, [r4, #0]
 800b1a6:	1a6d      	subs	r5, r5, r1
 800b1a8:	4629      	mov	r1, r5
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	f7ff ffa6 	bl	800b0fc <sbrk_aligned>
 800b1b0:	3001      	adds	r0, #1
 800b1b2:	d03a      	beq.n	800b22a <_malloc_r+0xea>
 800b1b4:	6823      	ldr	r3, [r4, #0]
 800b1b6:	442b      	add	r3, r5
 800b1b8:	6023      	str	r3, [r4, #0]
 800b1ba:	f8d8 3000 	ldr.w	r3, [r8]
 800b1be:	685a      	ldr	r2, [r3, #4]
 800b1c0:	bb62      	cbnz	r2, 800b21c <_malloc_r+0xdc>
 800b1c2:	f8c8 7000 	str.w	r7, [r8]
 800b1c6:	e00f      	b.n	800b1e8 <_malloc_r+0xa8>
 800b1c8:	6822      	ldr	r2, [r4, #0]
 800b1ca:	1b52      	subs	r2, r2, r5
 800b1cc:	d420      	bmi.n	800b210 <_malloc_r+0xd0>
 800b1ce:	2a0b      	cmp	r2, #11
 800b1d0:	d917      	bls.n	800b202 <_malloc_r+0xc2>
 800b1d2:	1961      	adds	r1, r4, r5
 800b1d4:	42a3      	cmp	r3, r4
 800b1d6:	6025      	str	r5, [r4, #0]
 800b1d8:	bf18      	it	ne
 800b1da:	6059      	strne	r1, [r3, #4]
 800b1dc:	6863      	ldr	r3, [r4, #4]
 800b1de:	bf08      	it	eq
 800b1e0:	f8c8 1000 	streq.w	r1, [r8]
 800b1e4:	5162      	str	r2, [r4, r5]
 800b1e6:	604b      	str	r3, [r1, #4]
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	f000 f82f 	bl	800b24c <__malloc_unlock>
 800b1ee:	f104 000b 	add.w	r0, r4, #11
 800b1f2:	1d23      	adds	r3, r4, #4
 800b1f4:	f020 0007 	bic.w	r0, r0, #7
 800b1f8:	1ac2      	subs	r2, r0, r3
 800b1fa:	bf1c      	itt	ne
 800b1fc:	1a1b      	subne	r3, r3, r0
 800b1fe:	50a3      	strne	r3, [r4, r2]
 800b200:	e7af      	b.n	800b162 <_malloc_r+0x22>
 800b202:	6862      	ldr	r2, [r4, #4]
 800b204:	42a3      	cmp	r3, r4
 800b206:	bf0c      	ite	eq
 800b208:	f8c8 2000 	streq.w	r2, [r8]
 800b20c:	605a      	strne	r2, [r3, #4]
 800b20e:	e7eb      	b.n	800b1e8 <_malloc_r+0xa8>
 800b210:	4623      	mov	r3, r4
 800b212:	6864      	ldr	r4, [r4, #4]
 800b214:	e7ae      	b.n	800b174 <_malloc_r+0x34>
 800b216:	463c      	mov	r4, r7
 800b218:	687f      	ldr	r7, [r7, #4]
 800b21a:	e7b6      	b.n	800b18a <_malloc_r+0x4a>
 800b21c:	461a      	mov	r2, r3
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	42a3      	cmp	r3, r4
 800b222:	d1fb      	bne.n	800b21c <_malloc_r+0xdc>
 800b224:	2300      	movs	r3, #0
 800b226:	6053      	str	r3, [r2, #4]
 800b228:	e7de      	b.n	800b1e8 <_malloc_r+0xa8>
 800b22a:	230c      	movs	r3, #12
 800b22c:	6033      	str	r3, [r6, #0]
 800b22e:	4630      	mov	r0, r6
 800b230:	f000 f80c 	bl	800b24c <__malloc_unlock>
 800b234:	e794      	b.n	800b160 <_malloc_r+0x20>
 800b236:	6005      	str	r5, [r0, #0]
 800b238:	e7d6      	b.n	800b1e8 <_malloc_r+0xa8>
 800b23a:	bf00      	nop
 800b23c:	24000e48 	.word	0x24000e48

0800b240 <__malloc_lock>:
 800b240:	4801      	ldr	r0, [pc, #4]	@ (800b248 <__malloc_lock+0x8>)
 800b242:	f7ff bf01 	b.w	800b048 <__retarget_lock_acquire_recursive>
 800b246:	bf00      	nop
 800b248:	24000e40 	.word	0x24000e40

0800b24c <__malloc_unlock>:
 800b24c:	4801      	ldr	r0, [pc, #4]	@ (800b254 <__malloc_unlock+0x8>)
 800b24e:	f7ff befc 	b.w	800b04a <__retarget_lock_release_recursive>
 800b252:	bf00      	nop
 800b254:	24000e40 	.word	0x24000e40

0800b258 <__ssputs_r>:
 800b258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b25c:	688e      	ldr	r6, [r1, #8]
 800b25e:	461f      	mov	r7, r3
 800b260:	42be      	cmp	r6, r7
 800b262:	680b      	ldr	r3, [r1, #0]
 800b264:	4682      	mov	sl, r0
 800b266:	460c      	mov	r4, r1
 800b268:	4690      	mov	r8, r2
 800b26a:	d82d      	bhi.n	800b2c8 <__ssputs_r+0x70>
 800b26c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b270:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b274:	d026      	beq.n	800b2c4 <__ssputs_r+0x6c>
 800b276:	6965      	ldr	r5, [r4, #20]
 800b278:	6909      	ldr	r1, [r1, #16]
 800b27a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b27e:	eba3 0901 	sub.w	r9, r3, r1
 800b282:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b286:	1c7b      	adds	r3, r7, #1
 800b288:	444b      	add	r3, r9
 800b28a:	106d      	asrs	r5, r5, #1
 800b28c:	429d      	cmp	r5, r3
 800b28e:	bf38      	it	cc
 800b290:	461d      	movcc	r5, r3
 800b292:	0553      	lsls	r3, r2, #21
 800b294:	d527      	bpl.n	800b2e6 <__ssputs_r+0x8e>
 800b296:	4629      	mov	r1, r5
 800b298:	f7ff ff52 	bl	800b140 <_malloc_r>
 800b29c:	4606      	mov	r6, r0
 800b29e:	b360      	cbz	r0, 800b2fa <__ssputs_r+0xa2>
 800b2a0:	6921      	ldr	r1, [r4, #16]
 800b2a2:	464a      	mov	r2, r9
 800b2a4:	f7ff fed2 	bl	800b04c <memcpy>
 800b2a8:	89a3      	ldrh	r3, [r4, #12]
 800b2aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b2ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2b2:	81a3      	strh	r3, [r4, #12]
 800b2b4:	6126      	str	r6, [r4, #16]
 800b2b6:	6165      	str	r5, [r4, #20]
 800b2b8:	444e      	add	r6, r9
 800b2ba:	eba5 0509 	sub.w	r5, r5, r9
 800b2be:	6026      	str	r6, [r4, #0]
 800b2c0:	60a5      	str	r5, [r4, #8]
 800b2c2:	463e      	mov	r6, r7
 800b2c4:	42be      	cmp	r6, r7
 800b2c6:	d900      	bls.n	800b2ca <__ssputs_r+0x72>
 800b2c8:	463e      	mov	r6, r7
 800b2ca:	6820      	ldr	r0, [r4, #0]
 800b2cc:	4632      	mov	r2, r6
 800b2ce:	4641      	mov	r1, r8
 800b2d0:	f000 faa6 	bl	800b820 <memmove>
 800b2d4:	68a3      	ldr	r3, [r4, #8]
 800b2d6:	1b9b      	subs	r3, r3, r6
 800b2d8:	60a3      	str	r3, [r4, #8]
 800b2da:	6823      	ldr	r3, [r4, #0]
 800b2dc:	4433      	add	r3, r6
 800b2de:	6023      	str	r3, [r4, #0]
 800b2e0:	2000      	movs	r0, #0
 800b2e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2e6:	462a      	mov	r2, r5
 800b2e8:	f000 fac4 	bl	800b874 <_realloc_r>
 800b2ec:	4606      	mov	r6, r0
 800b2ee:	2800      	cmp	r0, #0
 800b2f0:	d1e0      	bne.n	800b2b4 <__ssputs_r+0x5c>
 800b2f2:	6921      	ldr	r1, [r4, #16]
 800b2f4:	4650      	mov	r0, sl
 800b2f6:	f7ff feb7 	bl	800b068 <_free_r>
 800b2fa:	230c      	movs	r3, #12
 800b2fc:	f8ca 3000 	str.w	r3, [sl]
 800b300:	89a3      	ldrh	r3, [r4, #12]
 800b302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b306:	81a3      	strh	r3, [r4, #12]
 800b308:	f04f 30ff 	mov.w	r0, #4294967295
 800b30c:	e7e9      	b.n	800b2e2 <__ssputs_r+0x8a>
	...

0800b310 <_svfiprintf_r>:
 800b310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b314:	4698      	mov	r8, r3
 800b316:	898b      	ldrh	r3, [r1, #12]
 800b318:	061b      	lsls	r3, r3, #24
 800b31a:	b09d      	sub	sp, #116	@ 0x74
 800b31c:	4607      	mov	r7, r0
 800b31e:	460d      	mov	r5, r1
 800b320:	4614      	mov	r4, r2
 800b322:	d510      	bpl.n	800b346 <_svfiprintf_r+0x36>
 800b324:	690b      	ldr	r3, [r1, #16]
 800b326:	b973      	cbnz	r3, 800b346 <_svfiprintf_r+0x36>
 800b328:	2140      	movs	r1, #64	@ 0x40
 800b32a:	f7ff ff09 	bl	800b140 <_malloc_r>
 800b32e:	6028      	str	r0, [r5, #0]
 800b330:	6128      	str	r0, [r5, #16]
 800b332:	b930      	cbnz	r0, 800b342 <_svfiprintf_r+0x32>
 800b334:	230c      	movs	r3, #12
 800b336:	603b      	str	r3, [r7, #0]
 800b338:	f04f 30ff 	mov.w	r0, #4294967295
 800b33c:	b01d      	add	sp, #116	@ 0x74
 800b33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b342:	2340      	movs	r3, #64	@ 0x40
 800b344:	616b      	str	r3, [r5, #20]
 800b346:	2300      	movs	r3, #0
 800b348:	9309      	str	r3, [sp, #36]	@ 0x24
 800b34a:	2320      	movs	r3, #32
 800b34c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b350:	f8cd 800c 	str.w	r8, [sp, #12]
 800b354:	2330      	movs	r3, #48	@ 0x30
 800b356:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b4f4 <_svfiprintf_r+0x1e4>
 800b35a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b35e:	f04f 0901 	mov.w	r9, #1
 800b362:	4623      	mov	r3, r4
 800b364:	469a      	mov	sl, r3
 800b366:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b36a:	b10a      	cbz	r2, 800b370 <_svfiprintf_r+0x60>
 800b36c:	2a25      	cmp	r2, #37	@ 0x25
 800b36e:	d1f9      	bne.n	800b364 <_svfiprintf_r+0x54>
 800b370:	ebba 0b04 	subs.w	fp, sl, r4
 800b374:	d00b      	beq.n	800b38e <_svfiprintf_r+0x7e>
 800b376:	465b      	mov	r3, fp
 800b378:	4622      	mov	r2, r4
 800b37a:	4629      	mov	r1, r5
 800b37c:	4638      	mov	r0, r7
 800b37e:	f7ff ff6b 	bl	800b258 <__ssputs_r>
 800b382:	3001      	adds	r0, #1
 800b384:	f000 80a7 	beq.w	800b4d6 <_svfiprintf_r+0x1c6>
 800b388:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b38a:	445a      	add	r2, fp
 800b38c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b38e:	f89a 3000 	ldrb.w	r3, [sl]
 800b392:	2b00      	cmp	r3, #0
 800b394:	f000 809f 	beq.w	800b4d6 <_svfiprintf_r+0x1c6>
 800b398:	2300      	movs	r3, #0
 800b39a:	f04f 32ff 	mov.w	r2, #4294967295
 800b39e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3a2:	f10a 0a01 	add.w	sl, sl, #1
 800b3a6:	9304      	str	r3, [sp, #16]
 800b3a8:	9307      	str	r3, [sp, #28]
 800b3aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b3ae:	931a      	str	r3, [sp, #104]	@ 0x68
 800b3b0:	4654      	mov	r4, sl
 800b3b2:	2205      	movs	r2, #5
 800b3b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3b8:	484e      	ldr	r0, [pc, #312]	@ (800b4f4 <_svfiprintf_r+0x1e4>)
 800b3ba:	f7f4 ffb1 	bl	8000320 <memchr>
 800b3be:	9a04      	ldr	r2, [sp, #16]
 800b3c0:	b9d8      	cbnz	r0, 800b3fa <_svfiprintf_r+0xea>
 800b3c2:	06d0      	lsls	r0, r2, #27
 800b3c4:	bf44      	itt	mi
 800b3c6:	2320      	movmi	r3, #32
 800b3c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3cc:	0711      	lsls	r1, r2, #28
 800b3ce:	bf44      	itt	mi
 800b3d0:	232b      	movmi	r3, #43	@ 0x2b
 800b3d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3d6:	f89a 3000 	ldrb.w	r3, [sl]
 800b3da:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3dc:	d015      	beq.n	800b40a <_svfiprintf_r+0xfa>
 800b3de:	9a07      	ldr	r2, [sp, #28]
 800b3e0:	4654      	mov	r4, sl
 800b3e2:	2000      	movs	r0, #0
 800b3e4:	f04f 0c0a 	mov.w	ip, #10
 800b3e8:	4621      	mov	r1, r4
 800b3ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3ee:	3b30      	subs	r3, #48	@ 0x30
 800b3f0:	2b09      	cmp	r3, #9
 800b3f2:	d94b      	bls.n	800b48c <_svfiprintf_r+0x17c>
 800b3f4:	b1b0      	cbz	r0, 800b424 <_svfiprintf_r+0x114>
 800b3f6:	9207      	str	r2, [sp, #28]
 800b3f8:	e014      	b.n	800b424 <_svfiprintf_r+0x114>
 800b3fa:	eba0 0308 	sub.w	r3, r0, r8
 800b3fe:	fa09 f303 	lsl.w	r3, r9, r3
 800b402:	4313      	orrs	r3, r2
 800b404:	9304      	str	r3, [sp, #16]
 800b406:	46a2      	mov	sl, r4
 800b408:	e7d2      	b.n	800b3b0 <_svfiprintf_r+0xa0>
 800b40a:	9b03      	ldr	r3, [sp, #12]
 800b40c:	1d19      	adds	r1, r3, #4
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	9103      	str	r1, [sp, #12]
 800b412:	2b00      	cmp	r3, #0
 800b414:	bfbb      	ittet	lt
 800b416:	425b      	neglt	r3, r3
 800b418:	f042 0202 	orrlt.w	r2, r2, #2
 800b41c:	9307      	strge	r3, [sp, #28]
 800b41e:	9307      	strlt	r3, [sp, #28]
 800b420:	bfb8      	it	lt
 800b422:	9204      	strlt	r2, [sp, #16]
 800b424:	7823      	ldrb	r3, [r4, #0]
 800b426:	2b2e      	cmp	r3, #46	@ 0x2e
 800b428:	d10a      	bne.n	800b440 <_svfiprintf_r+0x130>
 800b42a:	7863      	ldrb	r3, [r4, #1]
 800b42c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b42e:	d132      	bne.n	800b496 <_svfiprintf_r+0x186>
 800b430:	9b03      	ldr	r3, [sp, #12]
 800b432:	1d1a      	adds	r2, r3, #4
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	9203      	str	r2, [sp, #12]
 800b438:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b43c:	3402      	adds	r4, #2
 800b43e:	9305      	str	r3, [sp, #20]
 800b440:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b504 <_svfiprintf_r+0x1f4>
 800b444:	7821      	ldrb	r1, [r4, #0]
 800b446:	2203      	movs	r2, #3
 800b448:	4650      	mov	r0, sl
 800b44a:	f7f4 ff69 	bl	8000320 <memchr>
 800b44e:	b138      	cbz	r0, 800b460 <_svfiprintf_r+0x150>
 800b450:	9b04      	ldr	r3, [sp, #16]
 800b452:	eba0 000a 	sub.w	r0, r0, sl
 800b456:	2240      	movs	r2, #64	@ 0x40
 800b458:	4082      	lsls	r2, r0
 800b45a:	4313      	orrs	r3, r2
 800b45c:	3401      	adds	r4, #1
 800b45e:	9304      	str	r3, [sp, #16]
 800b460:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b464:	4824      	ldr	r0, [pc, #144]	@ (800b4f8 <_svfiprintf_r+0x1e8>)
 800b466:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b46a:	2206      	movs	r2, #6
 800b46c:	f7f4 ff58 	bl	8000320 <memchr>
 800b470:	2800      	cmp	r0, #0
 800b472:	d036      	beq.n	800b4e2 <_svfiprintf_r+0x1d2>
 800b474:	4b21      	ldr	r3, [pc, #132]	@ (800b4fc <_svfiprintf_r+0x1ec>)
 800b476:	bb1b      	cbnz	r3, 800b4c0 <_svfiprintf_r+0x1b0>
 800b478:	9b03      	ldr	r3, [sp, #12]
 800b47a:	3307      	adds	r3, #7
 800b47c:	f023 0307 	bic.w	r3, r3, #7
 800b480:	3308      	adds	r3, #8
 800b482:	9303      	str	r3, [sp, #12]
 800b484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b486:	4433      	add	r3, r6
 800b488:	9309      	str	r3, [sp, #36]	@ 0x24
 800b48a:	e76a      	b.n	800b362 <_svfiprintf_r+0x52>
 800b48c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b490:	460c      	mov	r4, r1
 800b492:	2001      	movs	r0, #1
 800b494:	e7a8      	b.n	800b3e8 <_svfiprintf_r+0xd8>
 800b496:	2300      	movs	r3, #0
 800b498:	3401      	adds	r4, #1
 800b49a:	9305      	str	r3, [sp, #20]
 800b49c:	4619      	mov	r1, r3
 800b49e:	f04f 0c0a 	mov.w	ip, #10
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4a8:	3a30      	subs	r2, #48	@ 0x30
 800b4aa:	2a09      	cmp	r2, #9
 800b4ac:	d903      	bls.n	800b4b6 <_svfiprintf_r+0x1a6>
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d0c6      	beq.n	800b440 <_svfiprintf_r+0x130>
 800b4b2:	9105      	str	r1, [sp, #20]
 800b4b4:	e7c4      	b.n	800b440 <_svfiprintf_r+0x130>
 800b4b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4ba:	4604      	mov	r4, r0
 800b4bc:	2301      	movs	r3, #1
 800b4be:	e7f0      	b.n	800b4a2 <_svfiprintf_r+0x192>
 800b4c0:	ab03      	add	r3, sp, #12
 800b4c2:	9300      	str	r3, [sp, #0]
 800b4c4:	462a      	mov	r2, r5
 800b4c6:	4b0e      	ldr	r3, [pc, #56]	@ (800b500 <_svfiprintf_r+0x1f0>)
 800b4c8:	a904      	add	r1, sp, #16
 800b4ca:	4638      	mov	r0, r7
 800b4cc:	f3af 8000 	nop.w
 800b4d0:	1c42      	adds	r2, r0, #1
 800b4d2:	4606      	mov	r6, r0
 800b4d4:	d1d6      	bne.n	800b484 <_svfiprintf_r+0x174>
 800b4d6:	89ab      	ldrh	r3, [r5, #12]
 800b4d8:	065b      	lsls	r3, r3, #25
 800b4da:	f53f af2d 	bmi.w	800b338 <_svfiprintf_r+0x28>
 800b4de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b4e0:	e72c      	b.n	800b33c <_svfiprintf_r+0x2c>
 800b4e2:	ab03      	add	r3, sp, #12
 800b4e4:	9300      	str	r3, [sp, #0]
 800b4e6:	462a      	mov	r2, r5
 800b4e8:	4b05      	ldr	r3, [pc, #20]	@ (800b500 <_svfiprintf_r+0x1f0>)
 800b4ea:	a904      	add	r1, sp, #16
 800b4ec:	4638      	mov	r0, r7
 800b4ee:	f000 f879 	bl	800b5e4 <_printf_i>
 800b4f2:	e7ed      	b.n	800b4d0 <_svfiprintf_r+0x1c0>
 800b4f4:	0800bc9c 	.word	0x0800bc9c
 800b4f8:	0800bca6 	.word	0x0800bca6
 800b4fc:	00000000 	.word	0x00000000
 800b500:	0800b259 	.word	0x0800b259
 800b504:	0800bca2 	.word	0x0800bca2

0800b508 <_printf_common>:
 800b508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b50c:	4616      	mov	r6, r2
 800b50e:	4698      	mov	r8, r3
 800b510:	688a      	ldr	r2, [r1, #8]
 800b512:	690b      	ldr	r3, [r1, #16]
 800b514:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b518:	4293      	cmp	r3, r2
 800b51a:	bfb8      	it	lt
 800b51c:	4613      	movlt	r3, r2
 800b51e:	6033      	str	r3, [r6, #0]
 800b520:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b524:	4607      	mov	r7, r0
 800b526:	460c      	mov	r4, r1
 800b528:	b10a      	cbz	r2, 800b52e <_printf_common+0x26>
 800b52a:	3301      	adds	r3, #1
 800b52c:	6033      	str	r3, [r6, #0]
 800b52e:	6823      	ldr	r3, [r4, #0]
 800b530:	0699      	lsls	r1, r3, #26
 800b532:	bf42      	ittt	mi
 800b534:	6833      	ldrmi	r3, [r6, #0]
 800b536:	3302      	addmi	r3, #2
 800b538:	6033      	strmi	r3, [r6, #0]
 800b53a:	6825      	ldr	r5, [r4, #0]
 800b53c:	f015 0506 	ands.w	r5, r5, #6
 800b540:	d106      	bne.n	800b550 <_printf_common+0x48>
 800b542:	f104 0a19 	add.w	sl, r4, #25
 800b546:	68e3      	ldr	r3, [r4, #12]
 800b548:	6832      	ldr	r2, [r6, #0]
 800b54a:	1a9b      	subs	r3, r3, r2
 800b54c:	42ab      	cmp	r3, r5
 800b54e:	dc26      	bgt.n	800b59e <_printf_common+0x96>
 800b550:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b554:	6822      	ldr	r2, [r4, #0]
 800b556:	3b00      	subs	r3, #0
 800b558:	bf18      	it	ne
 800b55a:	2301      	movne	r3, #1
 800b55c:	0692      	lsls	r2, r2, #26
 800b55e:	d42b      	bmi.n	800b5b8 <_printf_common+0xb0>
 800b560:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b564:	4641      	mov	r1, r8
 800b566:	4638      	mov	r0, r7
 800b568:	47c8      	blx	r9
 800b56a:	3001      	adds	r0, #1
 800b56c:	d01e      	beq.n	800b5ac <_printf_common+0xa4>
 800b56e:	6823      	ldr	r3, [r4, #0]
 800b570:	6922      	ldr	r2, [r4, #16]
 800b572:	f003 0306 	and.w	r3, r3, #6
 800b576:	2b04      	cmp	r3, #4
 800b578:	bf02      	ittt	eq
 800b57a:	68e5      	ldreq	r5, [r4, #12]
 800b57c:	6833      	ldreq	r3, [r6, #0]
 800b57e:	1aed      	subeq	r5, r5, r3
 800b580:	68a3      	ldr	r3, [r4, #8]
 800b582:	bf0c      	ite	eq
 800b584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b588:	2500      	movne	r5, #0
 800b58a:	4293      	cmp	r3, r2
 800b58c:	bfc4      	itt	gt
 800b58e:	1a9b      	subgt	r3, r3, r2
 800b590:	18ed      	addgt	r5, r5, r3
 800b592:	2600      	movs	r6, #0
 800b594:	341a      	adds	r4, #26
 800b596:	42b5      	cmp	r5, r6
 800b598:	d11a      	bne.n	800b5d0 <_printf_common+0xc8>
 800b59a:	2000      	movs	r0, #0
 800b59c:	e008      	b.n	800b5b0 <_printf_common+0xa8>
 800b59e:	2301      	movs	r3, #1
 800b5a0:	4652      	mov	r2, sl
 800b5a2:	4641      	mov	r1, r8
 800b5a4:	4638      	mov	r0, r7
 800b5a6:	47c8      	blx	r9
 800b5a8:	3001      	adds	r0, #1
 800b5aa:	d103      	bne.n	800b5b4 <_printf_common+0xac>
 800b5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5b4:	3501      	adds	r5, #1
 800b5b6:	e7c6      	b.n	800b546 <_printf_common+0x3e>
 800b5b8:	18e1      	adds	r1, r4, r3
 800b5ba:	1c5a      	adds	r2, r3, #1
 800b5bc:	2030      	movs	r0, #48	@ 0x30
 800b5be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b5c2:	4422      	add	r2, r4
 800b5c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b5c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b5cc:	3302      	adds	r3, #2
 800b5ce:	e7c7      	b.n	800b560 <_printf_common+0x58>
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	4622      	mov	r2, r4
 800b5d4:	4641      	mov	r1, r8
 800b5d6:	4638      	mov	r0, r7
 800b5d8:	47c8      	blx	r9
 800b5da:	3001      	adds	r0, #1
 800b5dc:	d0e6      	beq.n	800b5ac <_printf_common+0xa4>
 800b5de:	3601      	adds	r6, #1
 800b5e0:	e7d9      	b.n	800b596 <_printf_common+0x8e>
	...

0800b5e4 <_printf_i>:
 800b5e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5e8:	7e0f      	ldrb	r7, [r1, #24]
 800b5ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b5ec:	2f78      	cmp	r7, #120	@ 0x78
 800b5ee:	4691      	mov	r9, r2
 800b5f0:	4680      	mov	r8, r0
 800b5f2:	460c      	mov	r4, r1
 800b5f4:	469a      	mov	sl, r3
 800b5f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b5fa:	d807      	bhi.n	800b60c <_printf_i+0x28>
 800b5fc:	2f62      	cmp	r7, #98	@ 0x62
 800b5fe:	d80a      	bhi.n	800b616 <_printf_i+0x32>
 800b600:	2f00      	cmp	r7, #0
 800b602:	f000 80d1 	beq.w	800b7a8 <_printf_i+0x1c4>
 800b606:	2f58      	cmp	r7, #88	@ 0x58
 800b608:	f000 80b8 	beq.w	800b77c <_printf_i+0x198>
 800b60c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b610:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b614:	e03a      	b.n	800b68c <_printf_i+0xa8>
 800b616:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b61a:	2b15      	cmp	r3, #21
 800b61c:	d8f6      	bhi.n	800b60c <_printf_i+0x28>
 800b61e:	a101      	add	r1, pc, #4	@ (adr r1, 800b624 <_printf_i+0x40>)
 800b620:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b624:	0800b67d 	.word	0x0800b67d
 800b628:	0800b691 	.word	0x0800b691
 800b62c:	0800b60d 	.word	0x0800b60d
 800b630:	0800b60d 	.word	0x0800b60d
 800b634:	0800b60d 	.word	0x0800b60d
 800b638:	0800b60d 	.word	0x0800b60d
 800b63c:	0800b691 	.word	0x0800b691
 800b640:	0800b60d 	.word	0x0800b60d
 800b644:	0800b60d 	.word	0x0800b60d
 800b648:	0800b60d 	.word	0x0800b60d
 800b64c:	0800b60d 	.word	0x0800b60d
 800b650:	0800b78f 	.word	0x0800b78f
 800b654:	0800b6bb 	.word	0x0800b6bb
 800b658:	0800b749 	.word	0x0800b749
 800b65c:	0800b60d 	.word	0x0800b60d
 800b660:	0800b60d 	.word	0x0800b60d
 800b664:	0800b7b1 	.word	0x0800b7b1
 800b668:	0800b60d 	.word	0x0800b60d
 800b66c:	0800b6bb 	.word	0x0800b6bb
 800b670:	0800b60d 	.word	0x0800b60d
 800b674:	0800b60d 	.word	0x0800b60d
 800b678:	0800b751 	.word	0x0800b751
 800b67c:	6833      	ldr	r3, [r6, #0]
 800b67e:	1d1a      	adds	r2, r3, #4
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	6032      	str	r2, [r6, #0]
 800b684:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b688:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b68c:	2301      	movs	r3, #1
 800b68e:	e09c      	b.n	800b7ca <_printf_i+0x1e6>
 800b690:	6833      	ldr	r3, [r6, #0]
 800b692:	6820      	ldr	r0, [r4, #0]
 800b694:	1d19      	adds	r1, r3, #4
 800b696:	6031      	str	r1, [r6, #0]
 800b698:	0606      	lsls	r6, r0, #24
 800b69a:	d501      	bpl.n	800b6a0 <_printf_i+0xbc>
 800b69c:	681d      	ldr	r5, [r3, #0]
 800b69e:	e003      	b.n	800b6a8 <_printf_i+0xc4>
 800b6a0:	0645      	lsls	r5, r0, #25
 800b6a2:	d5fb      	bpl.n	800b69c <_printf_i+0xb8>
 800b6a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b6a8:	2d00      	cmp	r5, #0
 800b6aa:	da03      	bge.n	800b6b4 <_printf_i+0xd0>
 800b6ac:	232d      	movs	r3, #45	@ 0x2d
 800b6ae:	426d      	negs	r5, r5
 800b6b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6b4:	4858      	ldr	r0, [pc, #352]	@ (800b818 <_printf_i+0x234>)
 800b6b6:	230a      	movs	r3, #10
 800b6b8:	e011      	b.n	800b6de <_printf_i+0xfa>
 800b6ba:	6821      	ldr	r1, [r4, #0]
 800b6bc:	6833      	ldr	r3, [r6, #0]
 800b6be:	0608      	lsls	r0, r1, #24
 800b6c0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b6c4:	d402      	bmi.n	800b6cc <_printf_i+0xe8>
 800b6c6:	0649      	lsls	r1, r1, #25
 800b6c8:	bf48      	it	mi
 800b6ca:	b2ad      	uxthmi	r5, r5
 800b6cc:	2f6f      	cmp	r7, #111	@ 0x6f
 800b6ce:	4852      	ldr	r0, [pc, #328]	@ (800b818 <_printf_i+0x234>)
 800b6d0:	6033      	str	r3, [r6, #0]
 800b6d2:	bf14      	ite	ne
 800b6d4:	230a      	movne	r3, #10
 800b6d6:	2308      	moveq	r3, #8
 800b6d8:	2100      	movs	r1, #0
 800b6da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b6de:	6866      	ldr	r6, [r4, #4]
 800b6e0:	60a6      	str	r6, [r4, #8]
 800b6e2:	2e00      	cmp	r6, #0
 800b6e4:	db05      	blt.n	800b6f2 <_printf_i+0x10e>
 800b6e6:	6821      	ldr	r1, [r4, #0]
 800b6e8:	432e      	orrs	r6, r5
 800b6ea:	f021 0104 	bic.w	r1, r1, #4
 800b6ee:	6021      	str	r1, [r4, #0]
 800b6f0:	d04b      	beq.n	800b78a <_printf_i+0x1a6>
 800b6f2:	4616      	mov	r6, r2
 800b6f4:	fbb5 f1f3 	udiv	r1, r5, r3
 800b6f8:	fb03 5711 	mls	r7, r3, r1, r5
 800b6fc:	5dc7      	ldrb	r7, [r0, r7]
 800b6fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b702:	462f      	mov	r7, r5
 800b704:	42bb      	cmp	r3, r7
 800b706:	460d      	mov	r5, r1
 800b708:	d9f4      	bls.n	800b6f4 <_printf_i+0x110>
 800b70a:	2b08      	cmp	r3, #8
 800b70c:	d10b      	bne.n	800b726 <_printf_i+0x142>
 800b70e:	6823      	ldr	r3, [r4, #0]
 800b710:	07df      	lsls	r7, r3, #31
 800b712:	d508      	bpl.n	800b726 <_printf_i+0x142>
 800b714:	6923      	ldr	r3, [r4, #16]
 800b716:	6861      	ldr	r1, [r4, #4]
 800b718:	4299      	cmp	r1, r3
 800b71a:	bfde      	ittt	le
 800b71c:	2330      	movle	r3, #48	@ 0x30
 800b71e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b722:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b726:	1b92      	subs	r2, r2, r6
 800b728:	6122      	str	r2, [r4, #16]
 800b72a:	f8cd a000 	str.w	sl, [sp]
 800b72e:	464b      	mov	r3, r9
 800b730:	aa03      	add	r2, sp, #12
 800b732:	4621      	mov	r1, r4
 800b734:	4640      	mov	r0, r8
 800b736:	f7ff fee7 	bl	800b508 <_printf_common>
 800b73a:	3001      	adds	r0, #1
 800b73c:	d14a      	bne.n	800b7d4 <_printf_i+0x1f0>
 800b73e:	f04f 30ff 	mov.w	r0, #4294967295
 800b742:	b004      	add	sp, #16
 800b744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b748:	6823      	ldr	r3, [r4, #0]
 800b74a:	f043 0320 	orr.w	r3, r3, #32
 800b74e:	6023      	str	r3, [r4, #0]
 800b750:	4832      	ldr	r0, [pc, #200]	@ (800b81c <_printf_i+0x238>)
 800b752:	2778      	movs	r7, #120	@ 0x78
 800b754:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b758:	6823      	ldr	r3, [r4, #0]
 800b75a:	6831      	ldr	r1, [r6, #0]
 800b75c:	061f      	lsls	r7, r3, #24
 800b75e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b762:	d402      	bmi.n	800b76a <_printf_i+0x186>
 800b764:	065f      	lsls	r7, r3, #25
 800b766:	bf48      	it	mi
 800b768:	b2ad      	uxthmi	r5, r5
 800b76a:	6031      	str	r1, [r6, #0]
 800b76c:	07d9      	lsls	r1, r3, #31
 800b76e:	bf44      	itt	mi
 800b770:	f043 0320 	orrmi.w	r3, r3, #32
 800b774:	6023      	strmi	r3, [r4, #0]
 800b776:	b11d      	cbz	r5, 800b780 <_printf_i+0x19c>
 800b778:	2310      	movs	r3, #16
 800b77a:	e7ad      	b.n	800b6d8 <_printf_i+0xf4>
 800b77c:	4826      	ldr	r0, [pc, #152]	@ (800b818 <_printf_i+0x234>)
 800b77e:	e7e9      	b.n	800b754 <_printf_i+0x170>
 800b780:	6823      	ldr	r3, [r4, #0]
 800b782:	f023 0320 	bic.w	r3, r3, #32
 800b786:	6023      	str	r3, [r4, #0]
 800b788:	e7f6      	b.n	800b778 <_printf_i+0x194>
 800b78a:	4616      	mov	r6, r2
 800b78c:	e7bd      	b.n	800b70a <_printf_i+0x126>
 800b78e:	6833      	ldr	r3, [r6, #0]
 800b790:	6825      	ldr	r5, [r4, #0]
 800b792:	6961      	ldr	r1, [r4, #20]
 800b794:	1d18      	adds	r0, r3, #4
 800b796:	6030      	str	r0, [r6, #0]
 800b798:	062e      	lsls	r6, r5, #24
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	d501      	bpl.n	800b7a2 <_printf_i+0x1be>
 800b79e:	6019      	str	r1, [r3, #0]
 800b7a0:	e002      	b.n	800b7a8 <_printf_i+0x1c4>
 800b7a2:	0668      	lsls	r0, r5, #25
 800b7a4:	d5fb      	bpl.n	800b79e <_printf_i+0x1ba>
 800b7a6:	8019      	strh	r1, [r3, #0]
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	6123      	str	r3, [r4, #16]
 800b7ac:	4616      	mov	r6, r2
 800b7ae:	e7bc      	b.n	800b72a <_printf_i+0x146>
 800b7b0:	6833      	ldr	r3, [r6, #0]
 800b7b2:	1d1a      	adds	r2, r3, #4
 800b7b4:	6032      	str	r2, [r6, #0]
 800b7b6:	681e      	ldr	r6, [r3, #0]
 800b7b8:	6862      	ldr	r2, [r4, #4]
 800b7ba:	2100      	movs	r1, #0
 800b7bc:	4630      	mov	r0, r6
 800b7be:	f7f4 fdaf 	bl	8000320 <memchr>
 800b7c2:	b108      	cbz	r0, 800b7c8 <_printf_i+0x1e4>
 800b7c4:	1b80      	subs	r0, r0, r6
 800b7c6:	6060      	str	r0, [r4, #4]
 800b7c8:	6863      	ldr	r3, [r4, #4]
 800b7ca:	6123      	str	r3, [r4, #16]
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7d2:	e7aa      	b.n	800b72a <_printf_i+0x146>
 800b7d4:	6923      	ldr	r3, [r4, #16]
 800b7d6:	4632      	mov	r2, r6
 800b7d8:	4649      	mov	r1, r9
 800b7da:	4640      	mov	r0, r8
 800b7dc:	47d0      	blx	sl
 800b7de:	3001      	adds	r0, #1
 800b7e0:	d0ad      	beq.n	800b73e <_printf_i+0x15a>
 800b7e2:	6823      	ldr	r3, [r4, #0]
 800b7e4:	079b      	lsls	r3, r3, #30
 800b7e6:	d413      	bmi.n	800b810 <_printf_i+0x22c>
 800b7e8:	68e0      	ldr	r0, [r4, #12]
 800b7ea:	9b03      	ldr	r3, [sp, #12]
 800b7ec:	4298      	cmp	r0, r3
 800b7ee:	bfb8      	it	lt
 800b7f0:	4618      	movlt	r0, r3
 800b7f2:	e7a6      	b.n	800b742 <_printf_i+0x15e>
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	4632      	mov	r2, r6
 800b7f8:	4649      	mov	r1, r9
 800b7fa:	4640      	mov	r0, r8
 800b7fc:	47d0      	blx	sl
 800b7fe:	3001      	adds	r0, #1
 800b800:	d09d      	beq.n	800b73e <_printf_i+0x15a>
 800b802:	3501      	adds	r5, #1
 800b804:	68e3      	ldr	r3, [r4, #12]
 800b806:	9903      	ldr	r1, [sp, #12]
 800b808:	1a5b      	subs	r3, r3, r1
 800b80a:	42ab      	cmp	r3, r5
 800b80c:	dcf2      	bgt.n	800b7f4 <_printf_i+0x210>
 800b80e:	e7eb      	b.n	800b7e8 <_printf_i+0x204>
 800b810:	2500      	movs	r5, #0
 800b812:	f104 0619 	add.w	r6, r4, #25
 800b816:	e7f5      	b.n	800b804 <_printf_i+0x220>
 800b818:	0800bcad 	.word	0x0800bcad
 800b81c:	0800bcbe 	.word	0x0800bcbe

0800b820 <memmove>:
 800b820:	4288      	cmp	r0, r1
 800b822:	b510      	push	{r4, lr}
 800b824:	eb01 0402 	add.w	r4, r1, r2
 800b828:	d902      	bls.n	800b830 <memmove+0x10>
 800b82a:	4284      	cmp	r4, r0
 800b82c:	4623      	mov	r3, r4
 800b82e:	d807      	bhi.n	800b840 <memmove+0x20>
 800b830:	1e43      	subs	r3, r0, #1
 800b832:	42a1      	cmp	r1, r4
 800b834:	d008      	beq.n	800b848 <memmove+0x28>
 800b836:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b83a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b83e:	e7f8      	b.n	800b832 <memmove+0x12>
 800b840:	4402      	add	r2, r0
 800b842:	4601      	mov	r1, r0
 800b844:	428a      	cmp	r2, r1
 800b846:	d100      	bne.n	800b84a <memmove+0x2a>
 800b848:	bd10      	pop	{r4, pc}
 800b84a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b84e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b852:	e7f7      	b.n	800b844 <memmove+0x24>

0800b854 <_sbrk_r>:
 800b854:	b538      	push	{r3, r4, r5, lr}
 800b856:	4d06      	ldr	r5, [pc, #24]	@ (800b870 <_sbrk_r+0x1c>)
 800b858:	2300      	movs	r3, #0
 800b85a:	4604      	mov	r4, r0
 800b85c:	4608      	mov	r0, r1
 800b85e:	602b      	str	r3, [r5, #0]
 800b860:	f7f6 ffd4 	bl	800280c <_sbrk>
 800b864:	1c43      	adds	r3, r0, #1
 800b866:	d102      	bne.n	800b86e <_sbrk_r+0x1a>
 800b868:	682b      	ldr	r3, [r5, #0]
 800b86a:	b103      	cbz	r3, 800b86e <_sbrk_r+0x1a>
 800b86c:	6023      	str	r3, [r4, #0]
 800b86e:	bd38      	pop	{r3, r4, r5, pc}
 800b870:	24000e3c 	.word	0x24000e3c

0800b874 <_realloc_r>:
 800b874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b878:	4607      	mov	r7, r0
 800b87a:	4614      	mov	r4, r2
 800b87c:	460d      	mov	r5, r1
 800b87e:	b921      	cbnz	r1, 800b88a <_realloc_r+0x16>
 800b880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b884:	4611      	mov	r1, r2
 800b886:	f7ff bc5b 	b.w	800b140 <_malloc_r>
 800b88a:	b92a      	cbnz	r2, 800b898 <_realloc_r+0x24>
 800b88c:	f7ff fbec 	bl	800b068 <_free_r>
 800b890:	4625      	mov	r5, r4
 800b892:	4628      	mov	r0, r5
 800b894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b898:	f000 f81a 	bl	800b8d0 <_malloc_usable_size_r>
 800b89c:	4284      	cmp	r4, r0
 800b89e:	4606      	mov	r6, r0
 800b8a0:	d802      	bhi.n	800b8a8 <_realloc_r+0x34>
 800b8a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b8a6:	d8f4      	bhi.n	800b892 <_realloc_r+0x1e>
 800b8a8:	4621      	mov	r1, r4
 800b8aa:	4638      	mov	r0, r7
 800b8ac:	f7ff fc48 	bl	800b140 <_malloc_r>
 800b8b0:	4680      	mov	r8, r0
 800b8b2:	b908      	cbnz	r0, 800b8b8 <_realloc_r+0x44>
 800b8b4:	4645      	mov	r5, r8
 800b8b6:	e7ec      	b.n	800b892 <_realloc_r+0x1e>
 800b8b8:	42b4      	cmp	r4, r6
 800b8ba:	4622      	mov	r2, r4
 800b8bc:	4629      	mov	r1, r5
 800b8be:	bf28      	it	cs
 800b8c0:	4632      	movcs	r2, r6
 800b8c2:	f7ff fbc3 	bl	800b04c <memcpy>
 800b8c6:	4629      	mov	r1, r5
 800b8c8:	4638      	mov	r0, r7
 800b8ca:	f7ff fbcd 	bl	800b068 <_free_r>
 800b8ce:	e7f1      	b.n	800b8b4 <_realloc_r+0x40>

0800b8d0 <_malloc_usable_size_r>:
 800b8d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8d4:	1f18      	subs	r0, r3, #4
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	bfbc      	itt	lt
 800b8da:	580b      	ldrlt	r3, [r1, r0]
 800b8dc:	18c0      	addlt	r0, r0, r3
 800b8de:	4770      	bx	lr

0800b8e0 <_init>:
 800b8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8e2:	bf00      	nop
 800b8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8e6:	bc08      	pop	{r3}
 800b8e8:	469e      	mov	lr, r3
 800b8ea:	4770      	bx	lr

0800b8ec <_fini>:
 800b8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ee:	bf00      	nop
 800b8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8f2:	bc08      	pop	{r3}
 800b8f4:	469e      	mov	lr, r3
 800b8f6:	4770      	bx	lr
